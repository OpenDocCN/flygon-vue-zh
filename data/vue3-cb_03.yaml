- en: Data Binding, Form Validations, Events, and Computed Properties
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定、表单验证、事件和计算属性
- en: Data is the most valuable asset in the world right now, and knowing how to manage
    it is a must. In Vue, we have the power to choose how we can gather this data,
    manipulate it as we want, and deliver it to the server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是当今世界上最宝贵的资产，知道如何管理它是必须的。在Vue中，我们有权利选择如何收集这些数据，按照我们的意愿进行操作，并将其传递到服务器。
- en: In this chapter, we will learn more about the process of data manipulation and
    data handling, form validations, data filtering, how to display this data to the
    user, and how to present it in a way that is different from what we then have
    inside our application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更多地了解数据处理和数据处理过程、表单验证、数据过滤、如何向用户显示这些数据以及如何以与我们应用程序内部不同的方式呈现它。
- en: We will learn how to use the `vue-devtools` to go deep inside the Vue components
    and see what is happening to our data and application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何使用`vue-devtools`深入了解Vue组件并查看我们的数据和应用程序发生了什么。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating the "hello world" component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建“hello world”组件
- en: Creating an input form with two-way data binding
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有双向数据绑定的输入表单
- en: Adding an event listener to an element
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向元素添加事件侦听器
- en: Removing the v-model from the input
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从输入中删除v-model
- en: Creating a dynamic to-do list
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建动态待办事项列表
- en: Creating computed properties and exploring how they work
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建计算属性并探索其工作原理
- en: Displaying cleaner data and text with custom filters
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义过滤器显示更清晰的数据和文本
- en: Adding form validation with Vuelidate
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vuelidate添加表单验证
- en: Creating filters and sorters for a list
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为列表创建过滤器和排序器
- en: Creating conditional filtering to sort list data
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建条件过滤以对列表数据进行排序
- en: Adding custom styles and transitions
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自定义样式和过渡
- en: Using `vue-devtools` to debug your application
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`vue-devtools`调试您的应用程序
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using **Node.js** and **Vue CLI****.**
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用**Node.js**和**Vue CLI**。
- en: 'Attention, Windows users—you need to install an `npm` package called `windows-build-tools` to
    be able to install the following required packages. To do this, open PowerShell
    as administrator and execute the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Windows用户需要安装一个名为`windows-build-tools`的`npm`包，以便安装以下所需的软件包。为此，请以管理员身份打开PowerShell并执行以下命令：
- en: '`> npm install -g windows-build-tools`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`。'
- en: 'To install **Vue CLI**, you need to open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**Vue CLI**，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating the "hello world" component
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建“hello world”组件
- en: A Vue application is a combination of various components, bound together and
    orchestrated by the Vue framework. Knowing how to make your component is important. Each
    component is like a brick in the wall and needs to be made in a way that, when
    placed, doesn't end up needing other bricks to be reshaped in different ways around
    it. We are going to learn how to make a base component, with some important principles
    that focus on organization and clean code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Vue应用程序是各种组件的组合，由Vue框架绑定在一起并进行编排。知道如何制作您的组件很重要。每个组件就像墙上的一块砖，需要以一种方式制作，以便在放置时不需要其他砖块以不同的方式重新塑造。我们将学习如何制作一个基本组件，其中包含一些侧重于组织和清晰代码的重要原则。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的先决条件如下：
- en: Node.js 12+
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '如何做到这一点... '
- en: To start our component, we can create our Vue project with Vue CLI as learned
    in the 'Creating your first project with Vue CLI' recipe in [C](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)[hapter
    2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml),*Introducing TypeScript and the
    Vue Ecosystem*, or start a new one.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用Vue CLI创建我们的Vue项目，就像在“使用Vue CLI创建您的第一个项目”中学到的那样，或者开始一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新的组件，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The **command-line interface** (**CLI**) will ask some questions that will
    help with the creation of the project. You can use the arrow keys to navigate,
    the *Enter* key to continue, and the *spacebar* to select an option. Choose the **`default`** option:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令行界面**（**CLI**）将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键导航，*Enter*键继续，*空格键*选择选项。选择**`default`**选项：'
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s create our first "hello world" component, following these steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个“hello world”组件，按照以下步骤进行：
- en: Let's create a new file called `CurrentTime.vue` file in the `src/components`
    folder.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`src/components`文件夹中创建一个名为`CurrentTime.vue`的新文件。
- en: 'On this file, we will start with the `<template>` part of our component. It
    will be a shadowed-box card that will display the current date formatted:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将从组件的`<template>`部分开始。它将是一个显示当前日期格式化的阴影框卡：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we need to create the `<script>` part. We will start with the `name` property.
    This will be used when debugging our application with `vue-devtools` to identify
    our component and helps the **integrated development environment** (**IDE**) too.
    For the `getCurrentDate` computed property, we will create a `computed` property
    that will return the current date, formatted by the `Intl` browser function:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建`<script>`部分。我们将从`name`属性开始。这将在使用`vue-devtools`调试我们的应用程序时使用，也有助于**集成开发环境**（**IDE**）。对于`getCurrentDate`计算属性，我们将创建一个`computed`属性，它将返回当前日期，由`Intl`浏览器函数格式化：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For styling our box, we need to create a `style.css` file in the `src` folder,
    then add the `cardBox` style to it:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了为我们的框添加样式，我们需要在`src`文件夹中创建一个`style.css`文件，然后将`cardBox`样式添加到其中：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `App.vue` file, we need to import our component to be able to see it:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们需要导入我们的组件才能看到它：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `main.js` file, we need to import the `style.css` file to be included
    in the Vue application:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.js`文件中，我们需要导入`style.css`文件以包含在Vue应用程序中：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is your component rendered and running:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现和运行的方式：
- en: '![](assets/b99bd21c-bcb6-42d3-9983-ab6b05c8c47b.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b99bd21c-bcb6-42d3-9983-ab6b05c8c47b.png)'
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Vue component works almost like the Node.js packages. To use it in your
    code, you need to import the component and then declare it inside the `components`
    property on the component you want to use.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Vue组件几乎与Node.js包一样工作。要在代码中使用它，您需要导入组件，然后在要使用的组件的“components”属性中声明它。
- en: Like a wall of bricks, a Vue application is made of components that call and
    use other components.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一堵砖墙一样，Vue应用程序由调用和使用其他组件的组件组成。
- en: For our component, we used the `Intl.DateTimeFormat` function, a native function,
    which can be used to format and parse dates to declared locations. To get the
    local format, we used the `navigator` global variable.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的组件，我们使用了`Intl.DateTimeFormat`函数，这是一个本机函数，可用于将日期格式化和解析为声明的位置。为了获得本地格式，我们使用了`navigator`全局变量。
- en: See also
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: You can find more information about `Intl.DateTimeFormat` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat)找到有关`Intl.DateTimeFormat`的更多信息。
- en: You can find more information about Vue components at [https://v3.vuejs.org/guide/single-file-component.html](https://v3.vuejs.org/guide/single-file-component.html)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/single-file-component.html](https://v3.vuejs.org/guide/single-file-component.html)找到有关Vue组件的更多信息
- en: Creating an input form with two-way data binding
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建具有双向数据绑定的输入表单
- en: To gather data on the web, we use HTML form inputs. In Vue, it's possible to
    use a two-way data binding method, where the value of the input on the **Document
    Object Model** (**DOM**) is passed to the JavaScript—or vice versa.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集网页上的数据，我们使用HTML表单输入。在Vue中，可以使用双向数据绑定方法，其中输入在**文档对象模型**（**DOM**）上的值传递到JavaScript，反之亦然。
- en: This makes the web form more dynamic, giving you the possibility to manage,
    format, and validate the data before saving or sending the data back to the server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Web表单更加动态，使您有可能在保存或发送数据回服务器之前管理、格式化和验证数据。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的先决条件如下：
- en: Node.js 12+
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: To start our component, we can create our Vue project with Vue CLI, as learned in
    the '*Creating your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml),* Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Creating the
    "hello world" component*' recipe.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用Vue CLI创建Vue项目，就像在[第2章](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)的“使用Vue
    CLI创建第一个项目”中学到的那样，或者使用“创建'hello world'组件”中的项目。
- en: 'Now, let''s follow these steps to create an input form with a two-way data
    binding:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照以下步骤创建具有双向数据绑定的输入表单：
- en: Let's create a new file called `TaskInput.vue` in the `src/components` folder.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`src/components`文件夹中创建一个名为`TaskInput.vue`的新文件。
- en: 'In this file, we''re going to create a component that will have a text input
    and a display text. This text will be based on what is typed on the text input.
    At the `<template>` part of the component, we need to create an HTML input and
    a `mustache` variable that will receive and render the data:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将创建一个组件，其中将包含一个文本输入和一个显示文本。这个文本将基于文本输入中键入的内容。在组件的`<template>`部分，我们需要创建一个HTML输入和一个`mustache`变量，用于接收和呈现数据：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, on the `<script>` part of the component, we will name it and add the task
    to the `data` property. As the data always needs to be a returned `Object`, we
    will use an arrow function to return an `Object` directly:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在组件的`<script>`部分，我们将命名它并将任务添加到`data`属性中。由于数据始终需要返回一个`Object`，我们将使用箭头函数直接返回一个`Object`：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We need to add some style to this component. In the `<style>` part of the component,
    we need to add the `scoped` attribute so that the style remains only bound to
    the component and won''t mix with other **Cascading Style Sheets** (**CSS**) rules:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为这个组件添加一些样式。在组件的`<style>`部分，我们需要添加`scoped`属性，以便样式仅绑定到组件，不会与其他**层叠样式表**（**CSS**）规则混合：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we need to import this component into our `App.vue` file:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将这个组件导入到我们的`App.vue`文件中：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is your component rendered and running:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的方式：
- en: '![](assets/b95c0f20-649c-45cf-a412-60aa5e1ff24c.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b95c0f20-649c-45cf-a412-60aa5e1ff24c.png)'
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you create an HTML `input` element and add a `v-model` to it, you are passing
    a directive, built into Vue, that checks the input type and gives us sugar syntax
    for the input. This handles the update of the value of the variable and the DOM.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个HTML`input`元素并为其添加`v-model`时，您正在传递一个内置于Vue中的指令，该指令检查输入类型并为我们提供输入的糖语法。这处理了变量值和DOM的更新。
- en: This model is what is called two-way data binding. If the variable is changed
    by the code, the DOM will re-render, and if it's changed by the DOM via user input,
    such as the `input-form`, the JavaScript code can then execute a function.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型被称为双向数据绑定。如果变量被代码改变，DOM将重新渲染，如果它被DOM通过用户输入改变，比如`input-form`，那么JavaScript代码就可以执行一个函数。
- en: See also
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about the form input bindings at [https://v3.vuejs.org/guide/forms.html](https://v3.vuejs.org/guide/forms.html)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://v3.vuejs.org/guide/forms.html](https://v3.vuejs.org/guide/forms.html)找到有关表单输入绑定的更多信息
- en: Adding an event listener to an element
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向元素添加事件监听器
- en: The most common method of parent-child communication in Vue is through props
    and events. In JavaScript, it's common to add event listeners to elements of the
    DOM tree to execute functions on specific events. In Vue, it's possible to add
    listeners and name them as you wish, rather than sticking to the names that exist
    on the JavaScript engine.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中，父子通信最常见的方法是通过props和events。在JavaScript中，通常会向DOM树的元素添加事件监听器，以便在特定事件上执行函数。在Vue中，可以添加监听器并根据需要命名，而不是坚持JavaScript引擎上存在的名称。
- en: In this recipe, we are going to learn how to create custom events and how to
    emit then.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何创建自定义事件以及如何发出它们。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件如下：
- en: Node.js 12+
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we can create our Vue project with Vue CLI, as learned
    in the '*Creating your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Creating an input
    form with two-way data binding*' recipe.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 启动我们的组件，我们可以使用Vue CLI创建Vue项目，就像在“*使用Vue CLI创建您的第一个项目*”一章中学到的那样，或者使用“*使用双向数据绑定创建输入表单*”一章中的项目。
- en: 'Follow these steps to add an event listener in an element on Vue:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在Vue中的元素上添加事件监听器：
- en: Create a new component or open the `TaskInput.vue` file.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新组件或打开`TaskInput.vue`文件。
- en: 'At the `<template>` part, we are going to add a button element and add an event
    listener to the button click event with the `v-on` directive. We will remove the
    `{{ task }}` variable from the component, as from now on it will be emitted and
    won''t be displayed on the component anymore:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，我们将添加一个按钮元素，并使用`v-on`指令为按钮点击事件添加事件监听器。我们将从组件中删除`{{ task }}`变量，因为从现在开始它将被发出并不再显示在组件上：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'On the `<script>` part of the component, we need to add a method to handle
    the click event. This method will be named `addTask`. The method will emit an
    event called `add-task` and send the task on the data. After that, the task on
    the component will be reset:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件的`<script>`部分，我们需要添加一个处理点击事件的方法。该方法将被命名为`addTask`。该方法将触发一个名为`add-task`的事件，并将任务发送到数据中。之后，组件上的任务将被重置：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'On the `App.vue` file, we need to add an event listener bind on the component.
    This listener will be attached to the `add-task` event. We will use the shortened
    version of the `v-on` directive, `@`. When it''s fired, the event will call the
    method, `addNewTask`, which will send an alert that a new task was added:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们需要在组件上添加一个事件监听器绑定。此侦听器将附加到`add-task`事件。我们将使用`v-on`指令的缩写版本`@`。当它被触发时，事件将调用`addNewTask`方法，该方法将发送一个警报，说明已添加了一个新任务：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s create the `addNewTask` method. This will receive the task as a
    parameter and will show an alert to the user, displaying that the task was added:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建`addNewTask`方法。这将接收任务作为参数，并向用户显示一个警报，显示任务已添加：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is your component rendered and running:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的方式：
- en: '![](assets/80b3e48c-93f9-41ef-b73b-58aff9641f67.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/80b3e48c-93f9-41ef-b73b-58aff9641f67.png)'
- en: How it works...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The HTML events are read by Vue with the `v-on` event handling directive. When
    we attached the `v-on:click` directive to the button, we added a listener to the
    button so that a function will be executed when the user clicks on it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: HTML事件通过`v-on`事件处理指令由Vue读取。当我们将`v-on:click`指令附加到按钮时，我们向按钮添加了一个监听器，以便在用户单击按钮时执行一个函数。
- en: The function is declared on the component methods. That function, when called,
    will emit an event, denoting that any component using this component as a child
    can listen to it with the `v-on` directive.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数在组件方法中声明。该函数在调用时将发出一个事件，表示使用此组件作为子组件的任何组件都可以使用`v-on`指令监听它。
- en: See also
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about event handling at [https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html)找到有关事件处理的更多信息
- en: Removing the v-model from the input
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从输入中删除v-model
- en: What if I told you that behind the magic of the `v-model` there is a lot of
    code that makes our magic sugar syntax happen? What if I told you that the rabbit
    hole can go deep enough that you can control everything that can happen with the
    events and values of the inputs?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我告诉您，在`v-model`的魔术背后有很多代码，使我们的魔术糖语法发生？如果我告诉您，兔子洞可以深入到足以控制输入的事件和值发生的一切？
- en: We will learn how to extract the sugar syntax of the `v-model` directive and
    transform it into the base syntax behind it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何提取`v-model`指令的糖语法，并将其转换为其背后的基本语法。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: To start our component, we can create our Vue project with Vue CLI, as learned
    in the '*Creating your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Adding an event
    listener to an element'* recipe.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用Vue CLI创建我们的Vue项目，就像在[第2章](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*，介绍TypeScript和Vue生态系统*中学到的那样，或者使用“向元素添加事件侦听器”配方中的项目。
- en: 'In the following steps, we will remove the `v-model` directive sugar syntax
    from the input:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将从输入中删除`v-model`指令的语法糖：
- en: Open the `TaskInput.vue` file.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`TaskInput.vue`文件。
- en: 'At the `<template>` block of the component, find the `v-model` directive. We''ll
    remove the `v-model` directive. Then, we need to add a new bind to the input called
    `v-bind:value` or the shortened version, `:value`, and an event listener to the
    HTML `input` element. We need to add an event listener to the `input` event with
    the `v-on:input` directive or the shortened version, `@input`. The input bind
    will receive the task value as a parameter and the event listener will receive
    a value attribution, where it will make the task variable equal the value of the
    event value:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件的`<template>`块中，找到`v-model`指令。我们将删除`v-model`指令。然后，我们需要向输入添加一个新的绑定，称为`v-bind:value`或缩写版本`:value`，以及一个事件侦听器到HTML`input`元素。我们需要向`input`事件添加一个事件侦听器，使用`v-on:input`指令或缩写版本`@input`。输入绑定将接收任务值作为参数，事件侦听器将接收一个值赋值，其中它将使任务变量等于事件值的值。
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As a sugar syntax, the `v-model` directive does the magic of automatically declaring
    the bind and the event listener to the element for you, but the side effect is
    that you don't have full control over what can be achieved.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种语法糖，`v-model`指令可以自动为您声明绑定和元素的事件侦听器，但副作用是您无法完全控制可以实现的内容。
- en: As we've seen, the bound value can be a variable, a method, a computed property,
    or a Vuex getter, for example. And for the event listener, it can be a function
    or a direct declaration of a variable assignment. When an event is emitted and
    passed to Vue, the `$event` variable is used to pass the event. In this case,
    as in normal JavaScript, to catch the value of an input, we need to use the `event.target.value` value.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，绑定的值可以是变量、方法、计算属性或Vuex getter，例如。对于事件侦听器，它可以是一个函数或一个变量赋值的直接声明。当事件被触发并传递给Vue时，`$event`变量用于传递事件。在这种情况下，就像在普通JavaScript中一样，要捕获输入的值，我们需要使用`event.target.value`值。
- en: See also
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about event handling at [https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html)找到有关事件处理的更多信息
- en: Creating a dynamic to-do list
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个动态的待办事项列表
- en: One of the first projects every programmer creates when learning a new language
    is a to-do list. Doing this allows us to learn more about the language process
    around the manipulation of states and data.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序员在学习一种新语言时创建的第一个项目之一就是待办事项列表。这样做可以让我们更多地了解围绕状态和数据操作的语言过程。
- en: We are going to make our to-do list using Vue. We'll use what we have learned
    and created in the previous recipes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Vue制作我们的待办事项列表。我们将使用我们在之前的配方中学到和创建的内容。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件如下：
- en: Node.js 12+
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: There are some basic principles involved in making a to-do application—it must
    have a list of tasks; those tasks can be marked as done and undone, and the list
    can be filtered and sorted. Now, we are going to learn how to take the tasks and
    add them to the task list.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 制作待办事项应用程序涉及一些基本原则——它必须有一个任务列表；这些任务可以标记为已完成和未完成，并且列表可以进行过滤和排序。现在，我们将学习如何将任务添加到任务列表中。
- en: To start our component, we can create our Vue project with Vue CLI, as learned
    in the '*Creating your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Removing the
    v-model from the input*' recipe.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用Vue CLI创建Vue项目，就像在[第2章](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*，介绍TypeScript和Vue生态系统*中学到的“使用Vue
    CLI创建你的第一个项目”一节中所述，或者使用“从输入中删除v-model”一节中的项目。
- en: 'Now, follow these steps to create a dynamic to-do list with Vue and the previous
    recipes:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤使用Vue和之前的方法创建一个动态的待办事项列表：
- en: 'In the `App.vue` file, we will create our array of tasks. This task will be
    filled every time the `TaskInput.vue` component emits a message. We will add an
    object to this array with the task, and the current date when the task was created.
    The date when the task was finished will be undefined for now. To do this, in
    the `<script>` part of the component, we need to create a method that receives
    a task and add this task with the current date to the `taskList` array:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们将创建我们的任务数组。每当`TaskInput.vue`组件发出消息时，这个任务将被填充。我们将向这个数组添加一个带有任务和创建任务的当前日期的对象。目前，任务完成时的日期将是未定义的。为了做到这一点，在组件的`<script>`部分，我们需要创建一个接收任务并将该任务与当前日期添加到`taskList`数组中的方法：
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we need to render this list on the `<template>` part. We will iterate
    the list of tasks using the `v-for` directive of Vue. This directive, when we
    use it with an array, gives us access to two properties—the item itself and the
    index of the item. We will use the item to render it and the index to make the
    key of the element for the rendering. We need to add a checkbox that, when marked,
    calls a function that changes the status of the task and the display when the
    task was done:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在`<template>`部分呈现这个列表。我们将使用Vue的`v-for`指令来迭代任务列表。当我们将这个指令与数组一起使用时，它会给我们访问两个属性——项目本身和项目的索引。我们将使用项目来呈现它，使用索引来创建元素的键以进行呈现。我们需要添加一个复选框，当选中时，调用一个函数来改变任务的状态和任务完成时的显示：
- en: '[PRE22]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It's always important to remember that the key in the iterator needs to be unique.
    This is needed because the render function needs to knows which elements were
    changed. In the example, we added the `Math.random()` function to the index to
    generate a unique key, because the index of the first elements of the array is
    always the same number when the number of elements is reduced.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 始终重要的是要记住迭代器中的键必须是唯一的。这是因为呈现函数需要知道哪些元素已经改变。在这个例子中，我们将`Math.random()`函数添加到索引中以生成一个唯一的键，因为当元素的数量减少时，数组的前几个元素的索引始终是相同的数字。
- en: 'We need to create the `changeStatus` function on the `methods` property of
    the `App.vue`. This function will receive the index of the task as a parameter,
    then go to the array of tasks and change the `finishedAt` property, which is our
    marker for when a task is done:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在`App.vue`的`methods`属性上创建`changeStatus`函数。这个函数将接收任务的索引作为参数，然后去改变任务数组中的`finishedAt`属性，这是我们标记任务完成的标志：
- en: '[PRE23]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we need to add the task text to the left-hand side of the screen. On the
    `<style>` part of the component, we will make it scoped and add the custom class:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将任务文本添加到屏幕的左侧。在组件的`<style>`部分，我们将使其具有作用域并添加自定义类：
- en: '[PRE24]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here is your component rendered and running:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件渲染并运行的地方：
- en: '![](assets/6f496750-540a-434a-9446-11731175ea7c.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6f496750-540a-434a-9446-11731175ea7c.png)'
- en: How it works...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As we received the emitted message from the component, we hydrated the message
    with more data and pushed it to a local array variable.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从组件接收到发射的消息时，我们用更多的数据来填充消息，并将其推送到本地数组变量中。
- en: In the template we iterate this array, making it a list of tasks. This displays
    the tasks we need to do, the checkbox to mark when the task is done, and the time
    that a task was done.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，我们遍历这个数组，使其成为任务列表。这显示了我们需要做的任务，标记任务完成时的复选框以及任务完成的时间。
- en: When the user clicks on the checkbox, it executes a function, which marks the
    current task as done. If the task is already done, the function will set the `finishedAt`
    property as `undefined`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击复选框时，它会执行一个函数，将当前任务标记为已完成。如果任务已经完成，函数将把`finishedAt`属性设置为`undefined`。
- en: See also
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about list rendering at [https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for](https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for](https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for)找到有关列表渲染的更多信息
- en: You can find more information about conditional rendering at [https://v3.vuejs.org/guide/conditional.html#v-if](https://v3.vuejs.org/guide/conditional.html#v-if)
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/conditional.html#v-if](https://v3.vuejs.org/guide/conditional.html#v-if)找到有关条件渲染的更多信息
- en: You can find more information about `Math.random` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)找到有关`Math.random`的更多信息。
- en: Creating computed properties and understanding how they work
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建计算属性并了解其工作原理
- en: Imagine that every time you have to fetch manipulated data, you need to execute
    a function. Imagine you need to get specific data that needs to go through some
    process and you need to execute it through a function every time. This type of
    work would not be easy to maintain. Computed properties exist to solve these problems. Using
    computed properties makes it easier to obtain data that needs preprocessing or
    even caching without executing any other external memorizing function.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，每次您必须获取操作过的数据时，都需要执行一个函数。想象一下，您需要获取需要经过一些处理的特定数据，并且每次都需要通过函数执行它。这种类型的工作不容易维护。计算属性存在是为了解决这些问题。使用计算属性可以更容易地获取需要预处理甚至缓存的数据，而无需执行任何其他外部记忆函数。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的先决条件如下：
- en: Node.js 12+
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续我们的待办事项项目，或者您可以按照[第2章](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)中学到的'*使用Vue
    CLI创建您的第一个项目*'中的步骤创建一个新的Vue项目，介绍TypeScript和Vue生态系统。
- en: 'Now, follow these steps to create a computed property and understand how it
    works:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤创建计算属性并了解其工作原理：
- en: 'On the `App.vue` file, at the `<script>` part, we will add a new property between
    `data` and `method`, called `computed`. This is where the `computed` properties
    will be placed. We will create a new computed property called `displayList`, which
    will be the one that will be used to render the final list on the template:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件的`<script>`部分，我们将在`data`和`method`之间添加一个名为`computed`的新属性。这是`computed`属性将被放置的地方。我们将创建一个名为`displayList`的新计算属性，它将用于在模板上呈现最终列表：
- en: '[PRE26]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `displayList` property, for now, is just returning a cached value of the
    variable, and not the direct variable as itself.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`displayList`属性目前只返回变量的缓存值，而不是直接的变量本身。'
- en: 'Now, on the `<template>` part, we need to change where the list is being fetched:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`<template>`部分，我们需要更改列表的获取位置：
- en: '[PRE27]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShel*l* (Windows) and execute the following command:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE28]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When using the `computed` property to pass a value to the template, this value
    is now cached. This means we will only trigger the rendering process when the
    value is updated. At the same time, we made sure that the template doesn't use
    the variable for rendering so that it can't be changed on the template, as it
    is a cached copy of the variable.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`computed`属性将值传递到模板时，该值现在被缓存。这意味着只有在值更新时才会触发渲染过程。同时，我们确保模板不使用变量进行渲染，因此它不能在模板上更改，因为它是变量的缓存副本。
- en: Using this process, we get the best performance because we won't waste processing
    time re-rendering the DOM tree for changes that have no effect on the data being
    displayed. This is because if something changes and the result is the same, the
    `computed` property caches the result and won't update the final result.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个过程，我们可以获得最佳性能，因为我们不会浪费处理时间重新渲染对数据显示没有影响的更改的DOM树。这是因为如果有什么变化，而结果是相同的，`computed`属性会缓存结果并不会更新最终结果。
- en: See also
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about computed properties at [https://v3.vuejs.org/guide/computed.html.](https://v3.vuejs.org/guide/computed.html)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/computed.html](https://v3.vuejs.org/guide/computed.html)找到有关计算属性的更多信息。
- en: Displaying cleaner data and text with custom filters
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义过滤器显示更清晰的数据和文本
- en: Sometimes you may find that the user, or even you, cannot read the Unix timestamp
    or other `DateTime` formats. How can we solve this problem? When rendering the
    data in Vue, it's possible to use what we call filters.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能会发现用户甚至您自己无法阅读Unix时间戳或其他`DateTime`格式。我们如何解决这个问题？在Vue中渲染数据时，可以使用我们称之为过滤器的东西。
- en: Imagine a series of pipes through which data flows. Data enters each pipe in
    one shape and exits in another. This is what filters in Vue look like. You can
    place a series of filters on the same variable, so it gets formatted, reshaped,
    and ultimately displayed with different data while the code remains the same.
    The code of the initial variable is immutable in those pipes.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一系列管道，数据通过这些管道流动。数据以一种形式进入每个管道，以另一种形式退出。这就是Vue中的过滤器的样子。您可以在同一变量上放置一系列过滤器，因此它会被格式化，重塑，并最终以不同的数据显示，而代码保持不变。在这些管道中，初始变量的代码是不可变的。
- en: Getting ready
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续我们的待办事项列表项目，或者您可以像在[第2章](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)中学到的那样，使用Vue
    CLI创建一个新的Vue项目，介绍TypeScript和Vue生态系统。
- en: 'Follow these steps to create your first custom Vue filter:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建您的第一个自定义Vue过滤器：
- en: 'In the `App.vue` file, at the `<script>` part, in the methods, create a `formatDate`
    function inside this property. This function will receive `value` as a parameter
    and enters the filter pipe. We can check if the value is a number because we know
    that our time is based on the Unix timestamp format. If it''s a number, we will
    format based on the current browser location and return that formatted value.
    If the passed value is not a number, we just return the passed value:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件的`<script>`部分，在方法中，创建一个`formatDate`函数。此函数将接收`value`作为参数并进入过滤器管道。我们可以检查`value`是否是一个数字，因为我们知道我们的时间是基于Unix时间戳格式的。如果它是一个数字，我们将根据当前浏览器位置进行格式化，并返回该格式化的值。如果传递的值不是一个数字，我们只需返回传递的值。
- en: '[PRE29]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'On the `<template>` part of the component, we need to pass the variable to
    the filter method. To do that, we need to find the `taskItem.finishedAt` property
    and make it the parameter of the `formatDate` method. We will add some text to
    denote that the task was `Done at:` at the beginning of the date:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件的`<template>`部分，我们需要将变量传递给过滤器方法。为此，我们需要找到`taskItem.finishedAt`属性，并将其作为`formatDate`方法的参数。我们将添加一些文本来表示任务在日期开始时已完成：
- en: '[PRE30]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To run the server and see your component, open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看组件，请打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE31]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here is your component rendered and running:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的样子：
- en: '![](assets/f6bf169d-8204-4639-b374-a87b46760d46.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f6bf169d-8204-4639-b374-a87b46760d46.png)'
- en: How it works...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Filters are methods that receive a value and must return a value to be displayed
    on the `<template>` section of the file, or used in a Vue property.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器是接收一个值并必须返回一个值以在文件的`<template>`部分显示或在Vue属性中使用的方法。
- en: When we pass the value to the `formatDate` method, we know that it's a valid
    Unix timestamp, so it was possible to invoke to a new `Date` class constructor,
    passing the `value` as a parameter because the Unix timestamp is a valid date
    constructor.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将值传递给`formatDate`方法时，我们知道它是一个有效的Unix时间戳，因此可以调用新的`Date`类构造函数，将`value`作为参数传递，因为Unix时间戳是一个有效的日期构造函数。
- en: The code behind our filter is the `Intl.DateTimeFormat` function, a native function
    that can be used to format and parse dates to declared locations. To get the local
    format, we use the `navigator` global variable.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们过滤器背后的代码是`Intl.DateTimeFormat`函数，这是一个原生函数，可用于格式化和解析日期到声明的位置。为了获得本地格式，我们使用`navigator`全局变量。
- en: See also
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `Intl.DateTimeFormat` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat)找到有关`Intl.DateTimeFormat`的更多信息。
- en: Adding form validation with Vuelidate
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vuelidate添加表单验证
- en: 'Originally, JavaScript was used just for validating HTML forms before sending
    these to servers; we didn''t have any JavaScript frameworks or the JavaScript
    ecosystem that we have today. However, one thing remains the same: form validation
    is to be done first by the JavaScript engine before sending the forms to the server.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，JavaScript仅用于在将HTML表单发送到服务器之前验证这些表单；我们没有任何JavaScript框架或今天我们拥有的JavaScript生态系统。然而，有一件事仍然是相同的：在将表单发送到服务器之前，应该首先由JavaScript引擎进行表单验证。
- en: We will learn how to use one of the most popular libraries on the Vue ecosystem
    to validate our input form before sending it.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何使用Vue生态系统中最受欢迎的库之一，在发送之前验证我们的输入表单。
- en: Getting ready
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件如下：
- en: Node.js 12+
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做...
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续我们的待办事项项目，或者您可以使用Vue CLI创建一个新的Vue项目，就像在[第2章](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)的“使用Vue
    CLI创建您的第一个项目”中学到的那样。
- en: 'Now, follow these steps to add a form validation into your Vue project, and
    your form component:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤将表单验证添加到您的Vue项目和表单组件中：
- en: 'To install **Vuelidate**, you need to open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装**Vuelidate**，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE32]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To add the Vuelidate plugin to the Vue application, we need to import and add
    it to Vue in the `main.js` file in the `src` folder:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将Vuelidate插件添加到Vue应用程序中，我们需要在`src`文件夹中的`main.js`文件中导入并添加它：
- en: '[PRE33]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the `TaskInput.vue` file, we will add a new property to the Vue object.
    This property is interpreted by the new plugin that was installed. At the end
    of the object, we will add the `validations` property, and inside that property,
    we will add the name of the model*.* The model is a direct name of the data or
    computed property that the plugin will check for validation:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TaskInput.vue`文件中，我们将向Vue对象添加一个新属性。这个属性由安装的新插件解释。在对象的末尾，我们将添加`validations`属性，并在该属性内添加模型的名称。模型是插件将检查验证的数据或计算属性的直接名称：
- en: '[PRE34]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we need to import the rules that already exist on the plugins that we
    want to use—those will be `required` and `minLength`. After the import, we will
    add those rules to the model:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要导入已经存在于我们想要使用的插件上的规则，这些规则将是`required`和`minLength`。导入后，我们将这些规则添加到模型中：
- en: '[PRE35]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, we need to add the validation before emitting the event. We will use the `$touch` built-in
    function to tell the plugin that the field was touched by the user and check for
    validation. If there are any fields that had any interaction with the user, the
    plugin will set the flags accordingly. If there are no errors, we will emit the
    event and we will reset the validation with the `$reset` function. To do this,
    we will change the `addTask` method:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在发出事件之前添加验证。我们将使用`$touch`内置函数告诉插件该字段已被用户触摸，并进行验证。如果有任何字段与用户有任何交互，插件将相应地设置标志。如果没有错误，我们将发出事件，并使用`$reset`函数重置验证。为此，我们将更改`addTask`方法：
- en: '[PRE36]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To alert the user that there are some errors on the field, we will make the
    input change the style to a complete red border and have a red text. To do this,
    we will need to make a conditional class on the input field. This will be attached
    directly to the model''s `$error` property:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了提醒用户字段上存在一些错误，我们将使输入更改样式为完整的红色边框，并具有红色文本。为此，我们需要在输入字段上创建一个条件类。这将直接附加到模型的`$error`属性上：
- en: '[PRE37]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'For the class, we can create a `fieldError` class in the `style.css` file in the
    `src` folder:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于类，我们可以在`src`文件夹中的`style.css`文件中创建一个`fieldError`类：
- en: '[PRE38]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE39]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here is your component rendered and running:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的方式：
- en: '![](assets/284f804c-a701-4420-8b1b-ae7e4aafb1b9.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/284f804c-a701-4420-8b1b-ae7e4aafb1b9.png)'
- en: How it works...
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Once installed, the Vuelidate plugin adds a new `$v` property to the Vue prototype and
    checks for a new object property in the Vue object, called `validations`. When
    this property is defined and has some rules, the plugins check for the model's
    rules on each update.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，Vuelidate插件会向Vue原型添加一个新的`$v`属性，并在Vue对象中检查一个名为`validations`的新对象属性。当定义了此属性并具有一些规则时，插件会在每次更新时检查模型的规则。
- en: Using this new Vue prototype, we can check inside our code for the errors inside
    the rules we defined, and execute functions to tell the plugin that the field
    was touched by the user to flag as a dirty field or reset it. Using those features,
    we're able to add a new conditional class based on the rules that we defined on
    the task model.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个新的Vue原型，我们可以在我们的代码中检查我们定义的规则内的错误，并执行函数来告诉插件该字段已被用户触摸以标记为脏字段或重置它。使用这些功能，我们能够根据我们在任务模型上定义的规则添加一个新的条件类。
- en: The task model is required and has a minimum of five characters. If those rules
    are not met, the plugin will mark the model with an error. We take this error
    and use it to show the user that the task field has an active error. When the
    user fulfills the requirements, the display of the error disappears and the event
    can be emitted.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 任务模型是必需的，并且至少有五个字符。如果不满足这些规则，插件将标记模型有错误。我们获取此错误并使用它来向用户显示任务字段有活动错误。当用户满足要求时，错误的显示消失，事件可以被触发。
- en: See also
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about Vuelidate at [https://vuelidate.netlify.com/](https://vuelidate.netlify.com/).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuelidate.netlify.com/](https://vuelidate.netlify.com/)找到有关Vuelidate的更多信息。
- en: You can find more information about class and style bindings at [https://v3.vuejs.org/guide/class-and-style.html](https://v3.vuejs.org/guide/class-and-style.html)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/class-and-style.html](https://v3.vuejs.org/guide/class-and-style.html)找到有关类和样式绑定的更多信息
- en: Creating filters and sorters for a list
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为列表创建过滤器和排序器
- en: When working with lists, it's common to find yourself with raw data. Sometimes,
    you need to get this data filtered so that it's readable for the user. To do this,
    we need a combination of the computed properties to form a final set of filters
    and sorters.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理列表时，通常会发现自己有原始数据。有时，您需要对这些数据进行过滤，以便用户可以阅读。为此，我们需要一组计算属性来形成最终的过滤器和排序器。
- en: In this recipe, we will learn how to create a simple filter and sorter that
    will control our initial to-do task list.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何创建一个简单的过滤器和排序器，来控制我们最初的待办任务列表。
- en: Getting ready
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的先决条件如下：
- en: Node.js 12+
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*,** Introducing TypeScript
    and the Vue Ecosystem*.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续我们的待办事项列表项目，或者您可以像在[第2章](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)中学到的那样，使用Vue
    CLI创建一个新的Vue项目，介绍TypeScript和Vue生态系统。
- en: 'Follow these steps to add a set of filters and sorts into your list:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加一组过滤器和排序到您的列表中：
- en: 'In the `App.vue` file, at the `<script>` part, we will add new computed properties;
    those will be for sorting and filtering. We will add three new computed properties,
    `baseList`, `filteredList`, and `sortedList`. The `baseList` property will be
    our first manipulation. We will add an `id` property to the task list via `Array.map`.
    As JavaScript arrays start at zero, we will add `1` to the index of the array.
    The `filteredList` property will filter the `baseList` property and return just
    the unfinished tasks, and the `sortedList` property will sort the `filteredList` property
    so that the last added `id` property will be the first displayed to the user:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件的`<script>`部分，我们将添加新的计算属性；这些将用于排序和过滤。我们将添加三个新的计算属性，`baseList`，`filteredList`和`sortedList`。`baseList`属性将是我们的第一个操作。我们将通过`Array.map`向任务列表添加一个`id`属性。由于JavaScript数组从零开始，我们将在数组的索引上添加`1`。`filteredList`属性将过滤`baseList`属性，并返回未完成的任务，`sortedList`属性将对`filteredList`属性进行排序，以便最后添加的`id`属性将首先显示给用户：
- en: '[PRE40]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'On the `<template>` part, we will add the `Task ID` as an indicator and change
    how the `changeStatus` method sends the argument. Because now the index is mutable,
    we can''t use it as a variable; it''s just a temporary index on the array. We
    need to use the task `id`:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，我们将`Task ID`添加为指示器，并更改`changeStatus`方法发送参数的方式。因为现在索引是可变的，我们不能将其用作变量；它只是数组上的临时索引。我们需要使用任务`id`：
- en: '[PRE41]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'On the `changeStatus` method, we need to update our function too. As the index
    now starts at `1`, we need to decrease the index of the array by one to get the
    real index of the element before updating it:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`changeStatus`方法中，我们也需要更新我们的函数。由于索引现在从`1`开始，我们需要将数组的索引减一，以获取更新前元素的真实索引：
- en: '[PRE42]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE43]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Here is your component rendered and running:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现和运行的方式：
- en: '![](assets/ac7a3ae0-6182-43c6-9398-c6de789ffe45.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ac7a3ae0-6182-43c6-9398-c6de789ffe45.png)'
- en: How it works...
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `computed` properties worked together as a cache for the list and made
    sure there were no side effects on the manipulation of the elements:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`computed`属性一起作为列表的缓存工作，并确保对元素的操作没有副作用：'
- en: At the `baseList` property, we created a new array with the same tasks but added
    a new `id` property to the task.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`baseList`属性中，我们创建了一个新数组，其中包含相同的任务，但为任务添加了一个新的`id`属性。
- en: At the `filteredList` property, we took the `baseList` property and only returned
    the tasks that weren't finished.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`filteredList`属性中，我们取出了`baseList`属性，并且只返回了未完成的任务。
- en: At the `sortedList` property, we sorted the tasks on the `filteredList` property
    by their ID, in descending order.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`sortedList`属性上，我们按照它们的ID，按降序对`filteredList`属性上的任务进行排序。
- en: When all the manipulation was done, the `displayList` property returned the
    result of the data that was manipulated.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有操作完成时，`displayList`属性将返回被操作的数据的结果。
- en: See also
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `Array.prototype.map` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)找到有关`Array.prototype.map`的更多信息。
- en: You can find more information about `Array.prototype.filter` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)找到有关`Array.prototype.filter`的更多信息。
- en: You can find more information about `Array.prototype.sort` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)找到有关`Array.prototype.sort`的更多信息。
- en: Creating conditional filters to sort list data
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建条件过滤器以对列表数据进行排序
- en: After completing the previous recipe, your data should be filtered and sorted,
    but you might need to check the filtered data or need to change how it was sorted.
    In this recipe, we will learn how to create conditional filters and sort the data
    on a list.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上一个食谱后，您的数据应该已经被过滤和排序，但您可能需要检查过滤后的数据或需要更改排序方式。在这个食谱中，我们将学习如何创建条件过滤器并对列表上的数据进行排序。
- en: Using some basic principles, it's possible to gather information and display
    it in many different ways.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一些基本原则，可以收集信息并以许多不同的方式显示它。
- en: Getting ready
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续我们的待办事项列表项目，或者您可以按照*在[第2章](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*中学到的，在Vue
    CLI中创建一个新的Vue项目，介绍TypeScript和Vue生态系统。
- en: 'Now, follow these steps to add a conditional filter to sort your list data:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤添加条件过滤器以对列表数据进行排序：
- en: 'In the `App.vue` file, at the `<script>` part, we will update the `computed`
    properties, `filteredList`, `sortedList`, and `displayList`. We need to add three
    new variables to our project, `hideDone`, `reverse`, and `sortById`. All three
    are going to be Boolean variables and will start with a default value of `false`.
    The `filteredList` property will check if the `hideDone` variable is `true`. If
    it is, it will have the same behavior, but if not, it will show the whole list
    with no filter. The `sortedList` property will check if the `sortById`variableis
    `true`. If it is, it will have the same behavior, but if not, it will sort the
    list by the finished date of the task. The `displayList`propertywill check if
    the `reverse` variable is `true`. If it is, it will reverse the displayed list,
    but if not, it will have the same behavior:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件的`<script>`部分，我们将更新`computed`属性，`filteredList`，`sortedList`和`displayList`。我们需要向我们的项目添加三个新变量，`hideDone`，`reverse`和`sortById`。所有三个变量都将是布尔变量，并且默认值为`false`。`filteredList`属性将检查`hideDone`变量是否为`true`。如果是，它将具有相同的行为，但如果不是，它将显示整个列表而不进行任何过滤。`sortedList`属性将检查`sortById`变量是否为`true`。如果是，它将具有相同的行为，但如果不是，它将按任务完成日期对列表进行排序。`displayList`属性将检查`reverse`变量是否为`true`。如果是，它将颠倒显示的列表，但如果不是，它将具有相同的行为：
- en: '[PRE44]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'On the `<template>` part, we need to add the controllers for those variables.
    We will create three checkboxes, linked directly to the variables via the `v-model`
    directive:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，我们需要为这些变量添加控制器。我们将创建三个复选框，直接通过`v-model`指令与变量链接：
- en: '[PRE45]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE46]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Here is your component rendered and running:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现和运行的方式：
- en: '![](assets/4d8eb6dc-0d68-4c98-9a23-594d2b8df916.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4d8eb6dc-0d68-4c98-9a23-594d2b8df916.png)'
- en: How it works...
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The `computed` properties worked together as a cache for the list and made
    sure there weren''t any side effects on the manipulation of the elements. With
    the conditional process, it was possible to change the rules of the filtering
    and sorting through a variable, and the display was updated in real-time:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`computed`属性一起作为列表的缓存工作，并确保在元素操作中没有任何副作用。通过条件处理，可以通过变量更改过滤和排序规则，并且显示会实时更新：'
- en: At the `filteredList` property, we took the `baseList` property and returned
    just the tasks that weren't finished. When the `hideDone` variable was `false`,
    we returned the whole list without any filter.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`filteredList`属性处，我们取出了`baseList`属性，并返回了未完成的任务。当`hideDone`变量为`false`时，我们返回整个列表而不进行任何过滤。
- en: At the `sortedList` property, we sorted the tasks on the `filteredList` property.
    When the `sortById` variable was `true`, the list was sorted by ID in descending
    order; when it was `false`, the sorting was done by the task finish time in ascending
    order.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`sortedList`属性处，我们对`filteredList`属性上的任务进行了排序。当`sortById`变量为`true`时，列表按ID降序排序；当为`false`时，按任务完成时间升序排序。
- en: At the `displayList` property,  when the `reverse` variable was `true`, the
    final list was reversed.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`displayList`属性处，当`reverse`变量为`true`时，最终列表被颠倒。
- en: When all the manipulation was done, the `displayList`property returned the result
    of the data that was manipulated.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有操作都完成时，“displayList”属性返回了被操作的数据的结果。
- en: Those `computed` properties were controlled by the checkboxes on the user screen,
    so the user had total control of what they could see and how they could see it.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`computed`属性由用户屏幕上的复选框控制，因此用户可以完全控制他们可以看到什么以及如何看到它。
- en: See also
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `Array.prototype.map` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)找到有关`Array.prototype.map`的更多信息。
- en: You can find more information about `Array.prototype.filter` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)找到有关`Array.prototype.filter`的更多信息。
- en: You can find more information about `Array.prototype.sort` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)找到有关`Array.prototype.sort`的更多信息。
- en: Adding custom styles and transitions
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义样式和过渡效果
- en: Adding styles in your components is a good practice, as it allows you to show
    your user what is happening more clearly. By doing this, you are able to show
    a visual response to the user and also give a better experience on your application.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件中添加样式是一个很好的做法，因为它可以让用户更清楚地看到发生了什么。通过这样做，您可以向用户显示视觉响应，也可以为您的应用程序提供更好的体验。
- en: In this recipe, we will learn how to add a new kind of conditional class binding.
    We will use CSS effects mixed with the re-rendering that comes with each new Vue
    update.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何添加一种新的条件类绑定。我们将使用CSS效果与每个新的Vue更新带来的重新渲染相结合。
- en: Getting ready
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的先决条件如下：
- en: Node.js 12+
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续我们的待办事项清单项目，或者您可以像在第2章“使用Vue CLI创建您的第一个项目”中学到的那样，使用Vue CLI创建一个新的Vue项目。
- en: 'Follow these steps to add custom styles and transitions to your component:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为您的组件添加自定义样式和过渡效果：
- en: 'In the `App.vue` file, we will add a conditional class to the list items for
    the tasks that are done:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们将为已完成的任务的列表项添加一个条件类：
- en: '[PRE47]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'At the `<style>` part of the component, we will create the CSS style sheet
    classes for the `taskDone` CSS class. We need to make the list have a separator
    between the items; then, we will make the list have a striped style; and when
    they get marked as done, the background will change with an effect. To add the
    separator between the lines and the striped list or zebra style, we need to add
    a CSS style sheet rule that applies for each `even nth-child`of our list:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件的`<style>`部分，我们将为`taskDone`的CSS类创建CSS样式表类。我们需要让列表项之间有一个分隔符；然后，我们将使列表具有条纹样式；当它们被标记为完成时，背景将发生变化。要在行之间添加分隔符和条纹列表或斑马样式，我们需要添加一个CSS样式表规则，适用于我们列表的每个`even
    nth-child`：
- en: '[PRE48]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'To add the effect on the background, when the task is done, at the end of the
    `<style>` part, we will add a CSS animation keyframe that indicates the background
    color change and apply this animation to the `.taskDone` CSS class:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<style>`部分的末尾添加CSS动画关键帧，指示背景颜色变化，并将此动画应用于`.taskDone` CSS类，以在任务完成时添加背景效果
- en: '[PRE49]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE50]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Here is your component rendered and running:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现和运行的地方：
- en: '![](assets/b6bfb646-97a9-4db1-a4f4-ff5e1722f1d5.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b6bfb646-97a9-4db1-a4f4-ff5e1722f1d5.png)'
- en: How it works...
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Each time a new item in our application is marked as done, the `displayList` property
    gets updated and triggers the re-rendering of the component.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们的应用程序中的新项目被标记为已完成时，`displayList`属性都会更新并触发组件的重新渲染。
- en: Because of this, our `taskDone` CSS class has an animation attached to it that
    is executed on rendering, showing a green background.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的`taskDone` CSS类附加了一个在渲染时执行的动画，显示绿色背景。
- en: See also
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about CSS animations at [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)找到有关CSS动画的更多信息。
- en: You can find more information about class and style bindings at [https://v3.vuejs.org/guide/class-and-style.html](https://v3.vuejs.org/guide/class-and-style.html)
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/class-and-style.html](https://v3.vuejs.org/guide/class-and-style.html)找到有关类和样式绑定的更多信息
- en: Using vue-devtools to debug your application
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vue-devtools调试您的应用程序
- en: '`vue-devtools` is a must for every Vue developer. This tool shows us the depths
    of the Vue components, routes, events, and vuex.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue-devtools`对于每个Vue开发人员都是必不可少的。这个工具向我们展示了Vue组件、路由、事件和vuex的深度。'
- en: With the help of the `vue-devtools` extension, it's possible to debug our application,
    try new data before changing our code, execute functions without needing to call
    them in our code directly, and so much more.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 借助`vue-devtools`扩展程序，可以调试我们的应用程序，在更改代码之前尝试新数据，执行函数而无需直接在代码中调用它们，等等。
- en: In this recipe, we will learn more about how we can use the devtools to find
    more information on your application and how it can be used to help your debug
    process.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何使用devtools找到有关您的应用程序的更多信息，以及如何使用它来帮助您的调试过程。
- en: Getting ready
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: 'You will need to install the `vue-devtools` extension in your browser:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在浏览器中安装`vue-devtools`扩展程序：
- en: Chrome extension—[http://bit.ly/chrome-vue-devtools](http://bit.ly/chrome-vue-devtools)
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome扩展程序-[http://bit.ly/chrome-vue-devtools](http://bit.ly/chrome-vue-devtools)
- en: Firefox extension—[http://bit.ly/firefox-vue-devtools](http://bit.ly/firefox-vue-devtools)
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox扩展程序-[http://bit.ly/firefox-vue-devtools](http://bit.ly/firefox-vue-devtools)
- en: How to do it...
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续进行待办事项列表项目，或者您可以按照[第2章](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*，介绍TypeScript和Vue生态系统*中学到的内容，使用Vue
    CLI创建一个新的Vue项目。
- en: When developing any Vue application, it's always a good practice to develop
    with `vue-devtools` to hand.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发任何Vue应用程序时，始终最好使用`vue-devtools`进行开发。
- en: 'Follow these steps to understand how to use `vue-devtools` and how to properly
    debug a Vue application:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤来了解如何使用`vue-devtools`以及如何正确调试Vue应用程序：
- en: 'To enter `vue-devtools`, you need to have it installed in your browser first,
    so check the ''Getting ready'' section of this recipe for the links to the extension
    for Chrome or Firefox. In your Vue development application, enter **browser developer
    inspector** mode. A new tab with the name Vue must appear:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进入`vue-devtools`，首先需要在浏览器中安装它，所以请查看本教程的“准备就绪”部分，获取Chrome或Firefox的扩展链接。在Vue开发应用程序中，进入**浏览器开发者检查器**模式。一个名为Vue的新标签页必须出现：
- en: '![](assets/423ad7ca-5967-4855-9f18-ed65a80156c6.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/423ad7ca-5967-4855-9f18-ed65a80156c6.png)'
- en: 'The first tab that you are presented with is the **Components** tab. This tab
    shows your application component tree. If you click on a component, you will be
    able to see all the available data, the computed property, extra data injected
    by plugins such as `vuelidate`, `vue-router`, or `vuex`. You can edit the data
    to see the changes in the application in real time:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您首先看到的是**组件**标签页。该标签页显示了您的应用程序组件树。如果单击组件，您将能够查看所有可用数据，计算属性，以及由插件（如`vuelidate`，`vue-router`或`vuex`）注入的额外数据。您可以编辑数据以实时查看应用程序中的更改：
- en: '![](assets/510f837e-67e8-4f55-9988-82e00cf76724.png)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/510f837e-67e8-4f55-9988-82e00cf76724.png)'
- en: 'The second tab is for **vuex development**. This tab will show the history
    of the mutations, the current state, and the getters. It''s possible to check
    on each mutation the passed payload and do time-travel mutations, to "go back
    in time" in the vuex changes in the states:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个标签页是用于**vuex开发**的。该标签页将显示变化的历史记录、当前状态和getter。可以检查每个变化传递的有效负载，并进行时间旅行变化，以在vuex状态中“回到过去”：
- en: '![](assets/30c2819a-19b2-4d5f-98ce-ed4915549aaf.png)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/30c2819a-19b2-4d5f-98ce-ed4915549aaf.png)'
- en: 'The third tab is dedicated to **event emitters** in the application. All events
    that are emitted in the application will be shown here. You can check the event
    that was emitted by clicking on it. You can see the name of the event, the type,
    who was the source of the event (in this case, it was a component), and the payload:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个标签页专门用于应用程序中的**事件发射器**。在此处显示了应用程序中发射的所有事件。您可以通过单击事件来检查发射的事件。您可以查看事件的名称、类型，事件的来源（在本例中是一个组件），以及有效负载：
- en: '![](assets/e211f6da-af01-4328-ad00-4bc3860f88f8.png)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e211f6da-af01-4328-ad00-4bc3860f88f8.png)'
- en: 'The fourth tab is dedicated to the **vue-router** plugin. There, you can see
    the navigation history, with all the metadata passed to the new route. You can
    check all the available routes in your application:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四个标签页专门用于**vue-router**插件。在那里，您可以查看导航历史记录，以及传递给新路由的所有元数据。您可以查看应用程序中所有可用的路由：
- en: '![](assets/64d52f48-5546-4437-98bb-b71640903cff.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/64d52f48-5546-4437-98bb-b71640903cff.png)'
- en: 'The fifth tab is a **Performance** tab. Here, you can check your component
    loading time, the frames per second that your application is running by the events
    that are happening in real time. This first screenshot shows the current frames
    per second of the current application, and for the selected component:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第五个标签页是**性能**标签页。在这里，您可以检查组件的加载时间，应用程序运行的每秒帧数，以及实时发生的事件。第一张截图显示了当前应用程序的每秒帧数，以及所选组件的每秒帧数：
- en: '![](assets/8eb92c33-2f51-465f-a770-136dfcc1db6d.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8eb92c33-2f51-465f-a770-136dfcc1db6d.png)'
- en: 'This second screenshot shows the components lifecycle hooks performance and
    the time it took to execute each hook:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 第二张截图显示了组件生命周期钩子的性能，以及执行每个钩子所需的时间：
- en: '![](assets/0147e07e-1a25-4646-9d96-be9825945a4e.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0147e07e-1a25-4646-9d96-be9825945a4e.png)'
- en: 'The sixth tab is your **Settings** tab; here, you can manage the extension,
    change how it looks, how it behaves internally, and how it will behave within
    the Vue plugins:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第六个标签是您的**设置**标签；在这里，您可以管理扩展程序，更改外观，内部行为以及在Vue插件中的行为方式：
- en: '![](assets/14845284-4326-4234-99f5-96a2e6712e31.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/14845284-4326-4234-99f5-96a2e6712e31.png)'
- en: The last tab is a refresh button for the `vue-devtools`. Sometimes, when the
    `hot-module-reload` occurs or when some complex events happen in your application
    component tree, the extension can lose track of what is happening. This button
    forces the extension to reload and read the Vue application state again.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个标签是`vue-devtools`的刷新按钮。有时，当`hot-module-reload`发生或者应用程序组件树中发生一些复杂事件时，扩展程序可能会失去对发生情况的跟踪。这个按钮强制扩展程序重新加载并再次读取Vue应用程序状态。
- en: See also
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `vue-devtools` at [https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools).
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools)找到有关`vue-devtools`的更多信息。
