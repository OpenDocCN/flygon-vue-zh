- en: '*Chapter 2*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*'
- en: Test Deeply Rendered Vue.js Components
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度渲染Vue.js组件的测试
- en: So far, we've seen how to use shallow rendering to test a component in isolation,
    preventing the component's sub-tree from rendering.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何使用浅渲染来测试一个组件，以防止组件的子树渲染。
- en: But in some cases, we want to test components that behave as a group, or **molecules**
    ([http://atomicdesign.bradfrost.com/chapter-2/#molecules](http://atomicdesign.bradfrost.com/chapter-2/#molecules)),
    as stated in *Atomic Design*. Keep in mind that this applies to **Presentational
    Components** ([https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0))
    since they're unaware of app state and logic. In most cases, you'd want to use
    shallow rendering for container components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但在某些情况下，我们希望测试作为一组行为的组件，或者**分子**（[http://atomicdesign.bradfrost.com/chapter-2/#molecules](http://atomicdesign.bradfrost.com/chapter-2/#molecules)）,正如*Atomic
    Design*中所述。请记住，这适用于**呈现组件**（[https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0)），因为它们不知道应用程序的状态和逻辑。在大多数情况下，你可能会希望为容器组件使用浅渲染。
- en: Adding a Message Component
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个Message组件
- en: In the case of `Message` and `MessageList` components, apart from writing their
    own individual unit tests, we might want to test them both as a unit as well.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Message`和`MessageList`组件的情况下，除了编写它们各自的单元测试之外，我们可能还想将它们作为一个单元进行测试。
- en: 'Let''s start by creating `components/Message.vue`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建`components/Message.vue`：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And update `components/MessageList.vue` to use it:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 并更新`components/MessageList.vue`来使用它：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Testing MessageList with a Message Component
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Message组件测试MessageList
- en: 'To test `MessageList` with deep rendering, we just need to use `mount` instead
    of `shallowMount` in the previously created `test/MessageList.test.js`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用深度渲染测试`MessageList`，我们只需要在先前创建的`test/MessageList.test.js`中使用`mount`而不是`shallowMount`：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By the way, have you noticed the `beforeEach` thing? That's a very clean way
    to create a clean component before each test, which is very important in unit
    testing since it defines that tests shouldn't depend on each other.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，你有没有注意到`beforeEach`这个东西？这是一种非常干净的方式，在每个测试之前创建一个干净的组件，这在单元测试中非常重要，因为它定义了测试不应该相互依赖。
- en: Both `mount` and `shallowMount` use exactly the same API; the difference is
    in the rendering. I'll progressively show you more of the API as we move along
    in this series.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`mount`和`shallowMount`使用完全相同的API；区别在于渲染。随着我们在本系列中的进展，我会逐渐向你展示更多的API。'
- en: 'If you run `npm t`, you''ll see the test is failing because the Snapshot doesn''t
    match `MessageList.test.js`. To regenerate it, run  with the `-u` option:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行`npm t`，你会看到测试失败，因为快照与`MessageList.test.js`不匹配。要重新生成它，请使用`-u`选项运行：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, if you open and inspect `test/__snapshots__/MessageList.test.js.snap`,
    you''ll see the `class="message"` is there, meaning the component has been rendered:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果你打开并检查`test/__snapshots__/MessageList.test.js.snap`，你会看到`class="message"`在那里，这意味着组件已经被渲染：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Keep in mind to avoid deep rendering when there could be side effects, since
    the children component hooks, such as `created` and `mount`, will be triggered,
    and there could be HTTP calls or other side effects there that we don''t want
    to be called. If you want to try out what I''m saying, add a `console.log` to
    the `Message.vue` component, in the `created` hook:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在可能存在副作用的情况下避免深度渲染，因为子组件的钩子，比如`created`和`mount`，将被触发，那里可能会有HTTP调用或其他副作用，我们不希望被调用。如果你想尝试一下我说的话，可以在`Message.vue`组件的`created`钩子中添加一个`console.log`：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then, if you run the tests again with `npm t`, you'll see the `"CREATED!"` text
    in the terminal output. So, be cautious.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果你再次用`npm t`运行测试，你会在终端输出中看到`"CREATED!"`文本。所以，要小心。
- en: You can find the code and examples for this chapter on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/Test-fully-rendered-Vue-js-Components-in-Jest](https://github.com/alexjoverm/vue-testing-series/tree/Test-fully-rendered-Vue-js-Components-in-Jest)).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码和示例（[https://github.com/alexjoverm/vue-testing-series/tree/Test-fully-rendered-Vue-js-Components-in-Jest](https://github.com/alexjoverm/vue-testing-series/tree/Test-fully-rendered-Vue-js-Components-in-Jest)）。
