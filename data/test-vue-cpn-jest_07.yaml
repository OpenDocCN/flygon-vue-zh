- en: '*Chapter 7*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*'
- en: Test Vue.js Slots
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Vue.js插槽
- en: Slots are a means of making content distribution happen in the world of web
    components. Vue.js slots are made in accordance with the **Web Component specs**
    ([https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md)),
    meaning that if you learn how to use them in Vue.js, they will be useful moving
    forward.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 插槽是在Web组件世界中进行内容分发的一种方式。Vue.js插槽是根据**Web组件规范**制作的（[https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md)），这意味着如果你学会了如何在Vue.js中使用它们，它们将对你以后很有用。
- en: 'They make the structures of components much more flexible, moving the responsibility
    of managing state to the parent component. For example, we can have a `List` component,
    and different kinds of item components, such as `ListItem` and `ListItemImage`.
    These will be used as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 它们使组件的结构更加灵活，将管理状态的责任转移到父组件。例如，我们可以有一个`List`组件，以及不同类型的项目组件，比如`ListItem`和`ListItemImage`。它们将被如下使用：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The inner content of `List` is the slot itself, and it is accessible via the
    `<slot>` tag. Hence, the `List` implementation appears as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`List`的内部内容就是插槽本身，可以通过`<slot>`标签访问。因此，`List`的实现如下：'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let''s say that the `ListItem` component looks like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设`ListItem`组件如下所示：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, the final result rendered by Vue.js would be:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Vue.js渲染的最终结果将是：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Making MessageList Slot-Based
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使MessageList基于插槽
- en: 'Now, let''s take a look at the `MessageList.vue` component:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看`MessageList.vue`组件：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`MessageList` has *hardcoded* the `Message` component inside. In one way, that
    is more automated but, in another, it is lacking in any flexibility whatsoever.
    What if you want to have different types of `Message` components? What about changing
    their structure or styling? That''s where slots come in handy.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageList`在内部*硬编码*了`Message`组件。在某种程度上，这更加自动化，但在另一方面，它完全缺乏灵活性。如果你想要不同类型的`Message`组件怎么办？改变它们的结构或样式呢？这就是插槽派上用场的地方。'
- en: 'Let''s now change `Message.vue` to use slots. First, move the `<Message...`
    part to the `App.vue` component, along with the `handleMessageClick` method, so
    that it''s used externally:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将`Message.vue`更改为使用插槽。首先，将`<Message...`部分移动到`App.vue`组件中，连同`handleMessageClick`方法，以便在外部使用：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Don't forget to import the `Message` component and add it to the `components`
    option in `App.vue`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记导入`Message`组件，并将其添加到`App.vue`中的`components`选项中。
- en: 'Then, in `MessageList.vue`, we can remove the references to `Message`. This
    now appears as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`MessageList.vue`中，我们可以删除对`Message`的引用。现在看起来如下：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: $children and $slots
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: $children和$slots
- en: 'Vue components have two instance variables that are useful for accessing slots:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Vue组件有两个实例变量，对于访问插槽非常有用：
- en: '`$children`: An array of Vue component instances of the default slot'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$children`：默认插槽的Vue组件实例数组'
- en: '`$slots`: An object of VNodes mapping all the slots defined in the component
    instance'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$slots`：一个VNodes对象，映射了组件实例中定义的所有插槽'
- en: 'The `$slots` object has more data available. In fact, `$children` is just a
    portion of the `$slots` variable that could be accessed the same way by mapping
    over the `$slots.default` array, filtered by Vue component instances:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`$slots`对象有更多可用的数据。实际上，`$children`只是`$slots`变量的一部分，可以通过在`$slots.default`数组上进行映射，通过Vue组件实例进行过滤来访问相同的方式：'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Testing Slots
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试插槽
- en: The aspect of slots that we probably want to test the most is where they end
    up in the component, and for that, we can reuse the skills we learned in *Chapter
    3*, *Test Styles and Structure of Vue.js Components in Jest*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能最想测试的插槽方面是它们在组件中的位置，为此，我们可以重复在*第3章*中学到的技能，*在Jest中测试Vue.js组件的样式和结构*。
- en: Right now, most of the tests in `MessageList.test.js` will fail, so let's remove
    them all (or comment them out), and focus on slot testing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`MessageList.test.js`中的大多数测试都会失败，所以让我们移除它们（或者将它们注释掉），并专注于插槽测试。
- en: 'One thing we can test is to make sure that the `Message` components end up
    within a `ul` element with the `list-messages` class. In order to pass slots to
    the `MessageList` component, we can use the `slots` property of the `options`
    object of the `mount` or `shallowMount` methods. So, let''s create a `beforeEach`
    method ([https://jestjs.io/docs/en/api.html#beforeeachfn-timeout](https://jestjs.io/docs/en/api.html#beforeeachfn-timeout))
    with the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以测试的一件事是确保`Message`组件最终出现在具有`list-messages`类的`ul`元素中。为了将插槽传递给`MessageList`组件，我们可以使用`mount`或`shallowMount`方法的`options`对象的`slots`属性。因此，让我们创建一个`beforeEach`方法（[https://jestjs.io/docs/en/api.html#beforeeachfn-timeout](https://jestjs.io/docs/en/api.html#beforeeachfn-timeout)），其中包含以下代码：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Since we just want to test whether the messages are rendered, we can search
    for `<div class="fake-msg"></div>` as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只想测试消息是否被渲染，我们可以按如下方式搜索`<div class="fake-msg"></div>`：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And that should be good to go. The slots option also accepts a component declaration,
    and even an array, so we could write the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后就可以进行了。插槽选项还接受组件声明，甚至是数组，所以我们可以编写以下内容：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The problem with this is that it is very limited; you cannot override props
    for example, and we need that for the `Message` component since it has a required
    property. This should affect the cases that you really need to test slots with
    the expected components; for example, if you want to make sure that `MessageList`
    expects only `Message` components as slots. That's on track and, at some point,
    it will land in `vue-test-utils` ([https://github.com/vuejs/vue-test-utils/issues/41#issue-255235880](https://github.com/vuejs/vue-test-utils/issues/41#issue-255235880)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的问题在于它非常有限；例如，您不能覆盖props，而我们需要为`Message`组件做到这一点，因为它有一个必需的属性。这应该影响到您真正需要测试预期组件的插槽的情况；例如，如果您想确保`MessageList`只期望`Message`组件作为插槽。这是在正确的轨道上，并且在某个时候，它将出现在`vue-test-utils`中（[https://github.com/vuejs/vue-test-utils/issues/41#issue-255235880](https://github.com/vuejs/vue-test-utils/issues/41#issue-255235880)）。
- en: 'As a workaround, we can accomplish that by using a **render function** ([https://vuejs.org/v2/guide/render-function.html](https://vuejs.org/v2/guide/render-function.html)).
    Consequently, we can rewrite the test to be more specific:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种解决方法，我们可以通过使用**渲染函数**（[https://vuejs.org/v2/guide/render-function.html](https://vuejs.org/v2/guide/render-function.html)）来实现这一点。因此，我们可以重写测试以更具体：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Testing Named Slots
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试命名插槽
- en: 'The unnamed slot we used previously is called the *default slot*, but we can
    have multiple slots by using named slots. Let''s now add a header to the `MessageList.vue`
    component:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前使用的未命名插槽称为*默认插槽*，但我们可以通过使用命名插槽来拥有多个插槽。现在让我们给`MessageList.vue`组件添加一个标题：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By using `<slot name="header">`, we're defining another slot for the header.
    You can see the `This is a default header` text inside the slot. This is displayed
    as the default content when a slot is not passed to the component, and that's
    applicable to the default slot.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`<slot name="header">`，我们为标题定义了另一个插槽。您可以在插槽中看到`这是一个默认标题`文本。当未传递插槽给组件时，这将显示为默认内容，并且适用于默认插槽。
- en: 'Then, from `App.vue`, we can add a header to the `MessageList` component by
    using the `slot="header"` attribute:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从`App.vue`中，我们可以通过使用`slot="header"`属性为`MessageList`组件添加一个标题：
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It''s now time to write a unit test for it. Testing named slots is just like
    testing a default slot; the same dynamics apply. So, we can start by verifying
    that the header slot is rendered within the `<header class="list-header">` element,
    and that it renders default text when no header slot is passed by. In `MessageList.test.js`,
    we have the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为它编写一个单元测试了。测试命名插槽就像测试默认插槽一样；相同的动态适用。因此，我们可以首先验证标题插槽是否在`<header class="list-header">`元素内呈现，并且在没有传递标题插槽时呈现默认文本。在`MessageList.test.js`中，我们有以下内容：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, the same but checking the default content gets replaced when we mock
    the `header` slot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，相同的，但是在我们模拟`header`插槽时检查默认内容是否被替换：
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can see that the header slot used in this last test is wrapped in a `<div>`.
    It's important that slots are wrapped in an HTML tag, otherwise `vue-test-utils`
    will complain.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在最后一个测试中使用的标题插槽被包裹在`<div>`中。插槽被包裹在HTML标记中非常重要，否则`vue-test-utils`会抱怨。
- en: Testing Contextual Slot Specs
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试上下文插槽规范
- en: We have tested how and where the slots render, and that's probably the most
    important aspect. However, it doesn't end there. If you pass component instances
    as slots, just as we're doing in the default slot with `Message`, you can test
    the functionality related to them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经测试了插槽的渲染方式和位置，这可能是最重要的方面。然而，事情并不止于此。如果您将组件实例作为插槽传递，就像我们在`Message`默认插槽中所做的那样，您可以测试与它们相关的功能。
- en: Be careful as to what you test here. This is probably something you don't need
    to do in most cases since the functional tests of a component should belong to
    that component test. When talking about testing the functionality of slots, we
    test how a slot must behave *in the context of the component where that slot is
    used*, and this is something that is not very common. Normally, we just pass the
    slot and forget about it. So, don't get too attached to the following example
    – its sole purpose is to demonstrate how the tool works.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里要小心测试什么。这在大多数情况下可能是您不需要做的事情，因为组件的功能测试应该属于该组件的测试范畴。当谈到测试插槽功能时，我们测试插槽在*使用该插槽的组件的上下文中*应该如何行为，这是不太常见的。通常，我们只是传递插槽然后忘记它。所以，不要对下面的示例过于执着
    - 它的唯一目的是演示工具的工作原理。
- en: 'Let''s say that, for whatever reason, in the context of the `MessageList` component,
    all the `Message` components must have a length of higher than 5\. We can test
    this as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 假设出于某种原因，在`MessageList`组件的上下文中，所有`Message`组件的长度都必须大于5。我们可以这样测试：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`findAll` returns an object containing an array of `wrappers` where we can
    access its `vm` component instance property. This test will fail because the message
    has a length of 3, so go to the `beforeEach` function and make it longer:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`findAll`返回一个包含`wrappers`数组的对象，我们可以访问其`vm`组件实例属性。这个测试将失败，因为消息的长度为3，所以去`beforeEach`函数并使其更长：'
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, it should pass.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它应该通过。
- en: Wrapping Up
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Testing slots is quite simple. Normally, we'd like to test that they're placed
    and rendered as we want, so it is just like testing style and structure, knowing
    how slots behave or can be mocked. You won't need to test slot functionality very
    often in all probability.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 测试插槽非常简单。通常，我们希望测试它们是否按照我们的期望放置和渲染，因此这就像测试样式和结构一样，了解插槽的行为或可以进行模拟。您很可能不需要经常测试插槽功能。
- en: Keep in mind that you should only test things related to slots when you want
    to test slots and think twice about whether what you're testing belongs to the
    slot test or the component test itself.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，只有在想要测试插槽并且三思而后行时，才应该测试与插槽相关的事物是否属于插槽测试还是组件测试本身。
- en: You can find the code relating to this chapter on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/test-slots](https://github.com/alexjoverm/vue-testing-series/tree/test-slots)).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 **GitHub** 上找到与本章相关的代码（[https://github.com/alexjoverm/vue-testing-series/tree/test-slots](https://github.com/alexjoverm/vue-testing-series/tree/test-slots)）。
