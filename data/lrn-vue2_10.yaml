- en: Chapter 10. Solutions to Exercises
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。练习解决方案
- en: Exercise for chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章的练习
- en: 'In the end of the first chapter, there was the following exercise:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章的结尾，有以下练习：
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Pomodoro timer that we have built in the previous chapters is, without any
    doubt, great, but it still lacks some nice features. A really nice thing that
    it could provide would be showing random kittens from [http://thecatapi.com/](http://thecatapi.com/)
    during resting time. Can you implement this? Of course you can! But please do
    not confuse resting with working time! I am almost sure that your project manager
    will not like much if you stare at the kittens instead of working :)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中构建的番茄钟毫无疑问非常棒，但仍然缺少一些不错的功能。它可以提供的一个非常好的功能是在休息时间显示来自[http://thecatapi.com/](http://thecatapi.com/)的随机小猫。你能实现这个吗？当然可以！但请不要把休息时间和工作时间搞混了！我几乎可以肯定，如果你盯着小猫而不是工作，你的项目经理是不会喜欢的
    :)
- en: Let's solve it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解决这个问题。
- en: Check the code for Pomodoro at [https://jsfiddle.net/chudaol/b6vmtzq1/](https://jsfiddle.net/chudaol/b6vmtzq1/).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Pomodoro的代码[https://jsfiddle.net/chudaol/b6vmtzq1/](https://jsfiddle.net/chudaol/b6vmtzq1/)。
- en: Check [http://thecatapi.com/](http://thecatapi.com/) website.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 检查[http://thecatapi.com/](http://thecatapi.com/)网站。
- en: 'Let''s start by adding the well Bootstrap element with an image whose source
    points to the cat API:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先添加一个带有指向猫API的图像的Bootstrap元素：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you open the page you will see that the image is always visible. This is
    not what we want, we want, it to only be visible when we are in our Pomodoro resting
    interval. You already know how to do it. There are several ways of achieving this;
    let''s use the class binding method and bind a class that''s hidden when the state
    is working:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开页面，你会发现图像总是可见的。这不是我们想要的，我们希望它只在我们的Pomodoro休息间隔时可见。你已经知道如何做了。有几种方法可以实现这一点；让我们使用类绑定方法，并在状态为工作时绑定一个隐藏的类：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, if you open the page you will see that the image only appears when the
    working Pomodoro is finished.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你打开页面，你会发现图像只在工作的Pomodoro完成后出现。
- en: However, the problem is that for all the time that we rest, the image is the
    same. It would be great if we could update it every, let's say, 10 seconds.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，问题在于我们休息的所有时间，图像都是一样的。如果我们每隔，比如，10秒更新一次，那就太好了。
- en: 'Let''s use a cache buster mechanism for this purpose. If we attach some property
    to our URL and change it each 10 seconds, the URL will change and therefore we
    will obtain another random cat. Let''s add a `timestamp` variable to our Vue application
    and change it inside the `_tick` function:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为此目的使用缓存破坏机制。如果我们将一些属性附加到我们的URL并每隔10秒更改它，URL将改变，因此我们将获得另一只随机的猫。让我们向我们的Vue应用程序添加一个`timestamp`变量，并在`_tick`函数内更改它：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After the timestamp is created and updated, we can use it in our image source
    URL:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳创建和更新后，我们可以在图像源URL中使用它：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That's all! Check the whole code in this JSFiddle at [https://jsfiddle.net/chudaol/4hnbt0pd/2/](https://jsfiddle.net/chudaol/4hnbt0pd/2/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！在这个JSFiddle中检查整个代码[https://jsfiddle.net/chudaol/4hnbt0pd/2/](https://jsfiddle.net/chudaol/4hnbt0pd/2/)。
- en: Exercises for chapter 2
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章的练习
- en: Enhancing MathPlugin
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强MathPlugin
- en: Enhance our `MathPlugin` with trigonometrical functions (sine, cosine, and tangent).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 用三角函数（正弦、余弦和正切）增强我们的`MathPlugin`。
- en: 'Actually, it is just about adding the missing directives and using the `Math`
    object''s functions in it. Open `VueMathPlugin.js` and add the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这只是添加缺失的指令并在其中使用`Math`对象的函数。打开`VueMathPlugin.js`并添加以下内容：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can check how this directive works in the HTML file:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在HTML文件中检查这个指令是如何工作的：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That's it!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！
- en: Creating a Chrome application of the Pomodoro timer
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Pomodoro计时器的Chrome应用程序
- en: Please combine a solution of bootstrapping the application using a SCP-compliant
    version of Vue.js and the simple Pomodoro application that we created in [Chapter
    1](part0016.xhtml#aid-F8901 "Chapter 1. Going Shopping with Vue.js"), *Going Shopping
    with Vue.js*. Check the code in the `chrome-app-pomodoro` folder.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请结合使用符合SCP标准的Vue.js版本和我们在[第1章](part0016.xhtml#aid-F8901 "第1章。使用Vue.js购物")中创建的简单番茄钟应用程序的解决方案。检查`chrome-app-pomodoro`文件夹中的代码。
- en: Exercises for chapter 3
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章练习
- en: Exercise 1
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1
- en: When we were rewriting the shopping list application using simple components,
    we lost the application's functionality. The exercise suggests using an events
    emitting system in order to bring the functionality back.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用简单组件重写购物清单应用程序时，我们失去了应用程序的功能。这个练习建议使用事件发射系统来恢复功能。
- en: The code we ended up with in this section was looking similar to what is in
    the [chapter3/vue-shopping-list-simple-components](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/chapter3/vue-shopping-list-simple-components)
    folder.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们最终得到的代码看起来与[chapter3/vue-shopping-list-simple-components](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/chapter3/vue-shopping-list-simple-components)文件夹中的代码类似。
- en: 'Why doesn''t it work? Check the devtools error console. It states the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么它不起作用？检查开发工具的错误控制台。它显示如下内容：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Aha! This happens because inside `add-item-template` we are calling the `addItem`
    method which does not belong to this component. This method belongs to the parent
    component, and of course, the child component does not have access to it. What
    should we do? Let''s emit events! We already know how to do it. So, we don''t
    have to do too much. Actually, we have to do three small things:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈！这是因为在`add-item-template`中，我们调用了不属于这个组件的`addItem`方法。这个方法属于父组件，当然，子组件没有访问权限。我们该怎么办？让我们发出事件！我们已经知道如何做了。所以，我们不需要做太多事情。实际上，我们只需要做三件小事：
- en: Attach the `addItem` method to `add-item-component` in which we will emit an
    event and pass this component's `newItem` property to it.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`addItem`方法附加到`add-item-component`中，我们将在其中发出一个事件，并将这个组件的`newItem`属性传递给它。
- en: Modify/simplify the `addItem` method of the parent component. It should now
    just receive a text and add it to its `items` property.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改/简化父组件的`addItem`方法。现在它只需要接收一个文本并将其添加到其`items`属性中。
- en: Attach the `v-on` modifier with the name of the event to the component's invocation
    inside the main markup that will call the `addItem` method each time the event
    is emitted.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主标记中，使用`v-on`修饰符和事件的名称将组件的调用绑定到`addItem`方法，每次事件被发出时都会调用它。
- en: 'Let''s start by adding the `addItem` method to `add-item-component`. It is
    called each time the add button or *Enter* is hit. This method should check the
    `newItem` property, and if it contains a text, should emit an event. Let''s call
    this event `add`. Thus, the JavaScript code of our component will now look the
    follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将`addItem`方法添加到`add-item-component`中。每次点击添加按钮或按下*Enter*键时都会调用它。这个方法应该检查`newItem`属性，如果包含文本，就应该发出一个事件。让我们把这个事件叫做`add`。因此，我们组件的JavaScript代码现在应该如下所示：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the `add` event is emitted, somehow the `addItem` method of the main component
    should be invoked. Let''s bind the `add` event to `addItem` by attaching the `v-on:add`
    modifier to the `add-item-component` invocation:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当发出`add`事件时，一定要以某种方式调用主组件的`addItem`方法。让我们通过在`add-item-component`的调用中附加`v-on:add`修饰符来将`add`事件绑定到`addItem`：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Okay then. As you can see, this method does almost the same that the `addItem`
    method of the main component was doing before. It just doesn''t push `newItem`
    to the `items` array. Let''s modify the `addItem` method of the main component
    so it just receives already processed text and pushes it into the array of items:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧。正如你所看到的，这种方法几乎与主组件的`addItem`方法之前所做的事情相同。它只是不将`newItem`推送到`items`数组中。让我们修改主组件的`addItem`方法，使其只接收已处理的文本并将其推入物品数组中：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We're done! The full solution of this exercise can be found in the [appendix/chapter3/vue-shopping-list-simple-components](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/Appendix/chapter3/vue-shopping-list-simple-components)
    folder.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！这个练习的完整解决方案可以在[附录/第3章/vue-shopping-list-simple-components](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/Appendix/chapter3/vue-shopping-list-simple-components)文件夹中找到。
- en: Exercise 2
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2
- en: 'In the section called *Rewriting the shopping list application with single-file
    components* in [Chapter 3](part0036.xhtml#aid-12AK81 "Chapter 3. Components –
    Understanding and Using"), *Components – Understanding and Using*, we did quite
    a nice job of changing the shopping list application using single-file components,
    but there are still few things left. We have two missing functionalities: adding
    items to the items list, and changing the title.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](part0036.xhtml#aid-12AK81 "第3章。组件-理解和使用")的*使用单文件组件重写购物清单应用程序*部分，*组件-理解和使用*，我们很好地改变了使用单文件组件的购物清单应用程序，但还有一些事情没有完成。我们有两个缺失的功能：向物品列表添加物品和更改标题。
- en: In order to achieve the first functionality, we have to emit an event from `AddItemComponent`
    and attach the `v-on` modifier to the `add-item-component` invocation with the
    main `App.vue` component, exactly like we have done in the case of dealing with
    simple components. You can basically just copy and paste the code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现第一个功能，我们必须从`AddItemComponent`中发出一个事件，并在主`App.vue`组件中的`add-item-component`调用上附加`v-on`修饰符，就像我们在处理简单组件的情况下所做的那样。你基本上只需复制并粘贴代码。
- en: The same goes for the changing title functionality. We should also emit an `input`
    event, just like we did in the simple components example.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 更改标题功能也是如此。我们还应该发出一个`input`事件，就像我们在简单组件示例中所做的那样。
- en: Do not forget to add the style to the `App.vue` component to make it look just
    as it was before.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记向`App.vue`组件添加样式，使其看起来与以前一样。
- en: Check the full code in the [appendix/chapter3/shopping-list-single-file-components](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/Appendix/chapter3/shopping-list-single-file-components)
    folder.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在[附录/第3章/shopping-list-single-file-components](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/Appendix/chapter3/shopping-list-single-file-components)文件夹中检查完整的代码。
- en: Summary
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to make our applications available for everyone.
    You also learned how to deploy them using Heroku integration with the GitHub repository.
    You also learned how to do it automatically on each commit and push. We also used
    Travis for automatic builds on each deployment. Now our applications are being
    fully tested and automatically redeployed each time we commit a change. Congratulations!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何使我们的应用程序对每个人都可用。您还学会了如何使用Heroku与GitHub存储库集成部署它们。您还学会了如何在每次提交和推送时自动执行此操作。我们还使用Travis在每次部署时进行自动构建。现在我们的应用程序正在进行全面测试，并在每次提交更改时自动重新部署。恭喜！
- en: You probably think that this is the end of the journey. No, it is not. This
    is just the beginning. In the next chapter, we will see what you can learn and
    what nice things you can do next with both the Pomodoro and shopping list applications.
    Stay with me!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为这是旅程的终点。不，不是。这只是开始。在下一章中，我们将看到您可以学到什么，以及您可以用Pomodoro和购物清单应用程序做些什么好事。和我在一起！
