- en: Writing Clean and Lean Code with Vue
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue编写干净、精简的代码
- en: In this section, we'll be investigating how a Vue.js instance works at a lower
    level by looking at how this is handled by Vue. We'll also be looking at the various
    properties on our instance such as data, computed, watch, as well as best practices
    when using each one. Furthermore, we'll be looking at the various lifecycle hooks
    available within our Vue instance, allowing us to call particular functions at
    various stages of our application. Finally, we'll be investigating the **Document
    Object Model** (**DOM**) and why Vue implements a Virtual DOM for enhanced performance.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将调查Vue.js实例在更低级别上的工作方式，看看Vue是如何处理this的。我们还将查看实例上的各种属性，如数据、计算、观察，以及在使用每个属性时的最佳实践。此外，我们将查看Vue实例中可用的各种生命周期钩子，允许我们在应用程序的各个阶段调用特定函数。最后，我们将调查**文档对象模型**（**DOM**）以及为什么Vue实现了虚拟DOM以提高性能。
- en: 'By the end of this chapter you will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将：
- en: Have a greater understanding of how `this` keyword works within JavaScript
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好地理解JavaScript中`this`关键字的工作原理
- en: Understand how Vue proxies `this` keyword within Vue instances
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Vue如何在Vue实例中代理`this`关键字
- en: Use data properties to create reactive bindings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据属性创建响应式绑定
- en: Use computed properties to create declarative functions based on our data model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用计算属性基于我们的数据模型创建声明性函数
- en: Use watched properties to access asynchronous data and build upon the foundations
    of computed properties
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用观察属性访问异步数据，并在计算属性的基础上构建
- en: Use lifecycle hooks to activate functionality at particular stages of the Vue
    lifecycle
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用生命周期钩子在Vue生命周期的特定阶段激活功能
- en: Investigate the DOM and Virtual DOM for an understanding of how Vue renders
    data to the screen
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查DOM和虚拟DOM，以了解Vue如何将数据渲染到屏幕上
- en: To begin, let's start off by looking into how this works within JavaScript and
    how this relates to the context within our Vue instances.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看看在JavaScript中this是如何工作的，以及它如何与我们的Vue实例中的上下文相关联。
- en: Proxying
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理
- en: 'So far, you may have interacted with a Vue application and thought to yourself:
    How does `this` work the way it does? Before looking into how Vue.js handles `this`,
    let''s have a look at how it works within JavaScript.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经与Vue应用程序进行了交互，并想过：`this`是如何工作的？在查看Vue.js如何处理`this`之前，让我们先看看它在JavaScript中是如何工作的。
- en: How 'this' works within JavaScript
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解JavaScript中的'this'工作原理
- en: 'Within JavaScript, `this` has varying contexts that range from the global window
    context to eval, newable, and function contexts. As the default context for this
    relates to the global scope, this is our window object:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，`this`具有不同的上下文，从全局窗口上下文到eval、可实例化和函数上下文。由于默认上下文与全局范围相关，因此this是我们的窗口对象：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The context of this changes depending on where we are in scope. This means,
    that if we had a `Student` object with particular values, such as `firstName`,
    `lastName`, `grades`, and so on, the context of `this` would be related to the
    object itself:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: this的上下文会根据我们所处的范围而改变。这意味着，如果我们有一个`Student`对象，具有特定的值，比如`firstName`、`lastName`、`grades`等，那么`this`的上下文将与对象本身相关联：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we run the preceding code with `console.log(Student.toString())`, we get
    this: `Student Paul Halliday scored 315/500` as the context of this is now scoped
    to the object itself rather than the global window scope.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行上述代码并使用`console.log(Student.toString())`时，我们会得到这个结果：`Student Paul Halliday
    scored 315/500`，因为此时this的上下文现在是对象本身，而不是全局窗口范围。
- en: 'If we wanted to display this in the document we could do it like so:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要在文档中显示this，我们可以这样做：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that, with the preceding code, once again we don't have to use `this`
    as it isn't needed with the global context.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上述代码中，我们再次不必使用`this`，因为它在全局上下文中不需要。
- en: Now that we have an understanding of how `this` works at a basic level, we can
    investigate how Vue proxies `this` inside of our instances to make interacting
    with the various properties much easier.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对`this`的基本工作原理有了一定的了解，我们可以调查Vue如何在实例内部代理`this`，以便更轻松地与各种属性进行交互。
- en: How Vue handles 'this'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue如何处理'this'
- en: You may have noticed up to this point that we're able to reference values inside
    of our data, methods, and other objects using `this` syntax, but the actual structure
    of our instance is `this.data.propertyName` or `this.methods.methodName`; all
    of this is possible due to the way Vue proxies our instance properties.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经注意到我们能够使用`this`语法引用数据、方法和其他对象中的值，但实例的实际结构是`this.data.propertyName`或`this.methods.methodName`；所有这些都是由Vue代理我们的实例属性实现的。
- en: Let's take a very simple Vue application that has one instance. We have a `data`
    object that has a `message` variable and a method named `showAlert`; how does
    Vue know how to access our alert text with `this.message`?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个非常简单的Vue应用程序，它只有一个实例。我们有一个`data`对象，其中有一个`message`变量和一个名为`showAlert`的方法；Vue如何知道如何通过`this.message`访问我们的警报文本？
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Vue proxies the instance properties to the top level object, allowing us to
    access these properties via this. If we were to log out the instance to the console
    (with the help of Vue.js devtools), we''d get the following result:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Vue将实例属性代理到顶层对象，使我们可以通过this访问这些属性。如果我们将实例记录到控制台（借助Vue.js开发工具），我们会得到以下结果：
- en: '![](assets/50163bb3-787a-4250-b7fd-4f3aec51aad6.png)Console logout'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/50163bb3-787a-4250-b7fd-4f3aec51aad6.png)控制台记录'
- en: The key properties to look at within the preceding screenshot are `message`
    and `showAlert`, both of which are defined on our Vue instance yet proxied to
    the root object instance at initialization time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中要查看的关键属性是`message`和`showAlert`，它们都在我们的Vue实例上定义，但在初始化时代理到根对象实例。
- en: Data properties
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据属性
- en: 'When we add a variable to our data object, we''re essentially creating a reactive
    property that updates the view any time it changes. This means that, if we had
    a data object with a property named `firstName`, that property would be re-rendered
    on the screen each time the value changes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向数据对象添加变量时，实质上是创建了一个在任何更改时更新视图的响应式属性。这意味着，如果我们有一个名为`firstName`的属性的数据对象，每次该值更改时，该属性都会在屏幕上重新渲染：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This reactivity does not extend to objects added to our Vue instance after
    the instance has been created outside of the data object. If we had another example
    of this, but this time including appending another property such as `fullName`
    to the instance itself:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种响应性不会扩展到在创建Vue实例后添加到实例之外的数据对象。如果我们有另一个示例，但这次包括向实例本身添加另一个属性，例如`fullName`：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Even though this item is on the root instance (the same as our `firstName` variable),
    `fullName` is not reactive and will not re-render upon any changes. This does
    not work because, when the Vue instance is initialized, it maps over each one
    of the properties and adds a getter and setter to each data property, thus, if
    we add a new property after initialization, it lacks this and is not reactive.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此项位于根实例上（与我们的`firstName`变量相同），但`fullName`不是响应式的，不会在任何更改时重新渲染。这是因为当Vue实例初始化时，它会遍历每个属性，并为每个数据属性添加getter和setter，因此，如果在初始化后添加新属性，则缺少此属性并且不是响应式的。
- en: 'How does Vue achieve reactive properties? Currently, it uses `Object.defineProperty`
    to define a custom getter/setter for items inside of the instance. Let''s create
    our own property on an object with standard `get`/`set` features:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Vue如何实现响应式属性？目前，它使用`Object.defineProperty`为实例内部的项目定义自定义的getter/setter。让我们在具有标准`get`/`set`功能的对象上创建自己的属性：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As the watchers are set with a custom property setter/getter, merely adding
    a property to the instance after initialization doesn't allow for reactivity.
    This is likely to change within Vue 3 as it will be using the newer ES2015+ Proxy
    API (but potentially lacking support for older browsers).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于观察者是使用自定义属性setter/getter设置的，所以在初始化之后仅仅添加一个属性到实例中并不会导致响应性。这在Vue 3中可能会发生变化，因为它将使用更新的ES2015+
    Proxy API（但可能不支持旧版浏览器）。
- en: There's more to our Vue instance than a data property! Let's use computed to
    create reactive, derived values based on items inside of our data model.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Vue实例不仅仅是一个数据属性！让我们使用计算属性来创建基于数据模型中的项目的反应性派生值。
- en: Computed properties
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算属性
- en: In this section, we'll be looking at computed properties within our Vue instance.
    This allows us to create small, declarative functions that return a singular value
    based on items inside of our data model. Why is this important? Well, if we kept
    all of our logic inside of our templates, both our team members and our future
    self would have to do more work to understand what our application does.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看看Vue实例中的计算属性。这允许我们创建小的、声明性的函数，根据数据模型中的项目返回一个单一的值。为什么这很重要呢？嗯，如果我们把所有的逻辑都放在模板里，我们的团队成员和未来的自己都需要做更多的工作来理解我们的应用程序在做什么。
- en: Therefore, we can use computed properties to vastly simplify our templates and
    create variables that we can reference instead of the logic itself. It goes further
    than an abstraction; computed properties are cached and will not be recalculated
    unless a dependency has changed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用计算属性来大大简化我们的模板，并创建我们可以引用的变量，而不是逻辑本身。它不仅仅是一个抽象；计算属性是被缓存的，除非依赖项发生变化，否则不会重新计算。
- en: 'Let''s create a simple project to see this in action:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的项目来看看它的运作方式：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Interpolation is powerful; for example, inside of our Vue.js templates we can
    take a string (for example, `firstName`) and reverse this using the `reverse()`
    method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 插值是强大的；例如，在我们的Vue.js模板中，我们可以使用`reverse()`方法来取一个字符串（例如`firstName`）并将其反转：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We'll now be showing a reversed version of our `firstName`, so Paul would become
    luaP. The issue with this is that it's not very practical to keep logic inside
    of our templates. If we'd like to reverse multiple fields, we have to then add
    another `split()`, `reverse()`, and `join()` on each property. To make this more
    declarative, we can use computed properties.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将展示我们的`firstName`的反转版本，所以Paul会变成luaP。这样做的问题是，在模板内部保持逻辑并不是很实际。如果我们想要反转多个字段，我们就必须在每个属性上添加另一个`split()`、`reverse()`和`join()`。为了使这更具声明性，我们可以使用计算属性。
- en: 'Inside of `App.vue`, we can add a new computed object, that contains a function
    named `reversedName`; this takes our logic for reversing our string and allows
    us to abstract this into a function containing logic that would otherwise pollute
    the template:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.vue`中，我们可以添加一个包含名为`reversedName`的函数的新计算对象；这个函数采用我们反转字符串的逻辑，并允许我们将其抽象成一个包含逻辑的函数，否则会污染模板：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We could then see more information about our computed properties within Vue.js
    devtools:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在Vue.js devtools中看到关于我们计算属性的更多信息：
- en: '![](assets/87c61f6b-3255-4c45-a91c-25b30ef83b86.png)Using devtools to display
    data'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用devtools显示数据
- en: In our simple example, it's important to realize that, while we could make this
    a method, there are reasons why we should keep this as a computed property. Computed
    properties are cached and are not re-rendered unless their dependency changes,
    which is especially important if we have a larger data-driven application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们简单的例子中，重要的是要意识到，虽然我们可以把这个方法做成一个方法，但是有理由让它作为一个计算属性。计算属性是被缓存的，除非它们的依赖项发生变化，否则它们不会被重新渲染，这在我们有一个更大的数据驱动应用程序时尤为重要。
- en: Watched properties
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察属性
- en: Computed properties are not always the answer to our reactive data problems,
    sometimes we need to create our own custom watched properties. Computed properties
    can only be synchronous, must be pure (for example, no observed side-effects),
    and return a value; this is in direct contrast to a watched property, which is
    often used to deal with asynchronous data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性并不总是解决我们的响应式数据问题的答案，有时我们需要创建自己的自定义监视属性。计算属性只能是同步的，必须是纯的（例如，没有观察到的副作用），并返回一个值；这与监视属性形成鲜明对比，后者通常用于处理异步数据。
- en: 'A watched property allows us to reactively execute a function whenever a piece
    of data changes. This means that we can call a function every time an item from
    our data object changes, and we''ll have access to this changed value as a parameter.
    Let''s take a look at this with a simple example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '监视属性允许我们在数据更改时反应性地执行函数。这意味着我们可以在数据对象中的每个项目更改时调用函数，并且我们将可以访问此更改后的值作为参数。让我们通过一个简单的例子来看一下： '
- en: 'Note: `Axios` is a library that will need to be added to the project. To do
    so, head to [https://github.com/axios/axios](https://github.com/axios/axios) and
    follow the installation steps provided.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：`Axios`是一个需要添加到项目中的库。要这样做，请前往[https://github.com/axios/axios](https://github.com/axios/axios)并按照提供的安装步骤进行操作。
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this example, any time our text box changes with a new `id` (1-10), we get
    information about that particular user, like so:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，每当我们的文本框以新的`id`（1-10）更改时，我们就会获得有关该特定用户的信息，如下所示：
- en: '![](assets/1224f47e-0825-4425-8944-6b071bbcb57d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1224f47e-0825-4425-8944-6b071bbcb57d.png)'
- en: This is effectively watching for any changes on the `id` and calling the `getDataForUser`
    method, retrieving new data about this user.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是在监视`id`上的任何更改，并调用`getDataForUser`方法，检索有关此用户的新数据。
- en: Although watched properties do have a lot of power, the benefits of computed
    properties on performance and ease of use should not be understated; therefore
    wherever possible, favor computed properties over watched properties.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管监视属性确实具有很大的能力，但计算属性在性能和易用性方面的优势不容小觑；因此，在可能的情况下，应优先考虑计算属性而不是监视属性。
- en: Lifecycle hooks
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生命周期钩子
- en: We have access to a variety of lifecycle hooks that fire at particular points
    during the creation of our Vue instance. These hooks range from prior to creation
    with `beforeCreate`, to after the instance is `mounted`, `destroyed`, and many
    more in between.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在创建Vue实例期间的特定时间点触发各种生命周期钩子。这些钩子从`beforeCreate`之前的创建到`mounted`之后，`destroyed`等等。
- en: As the following figure shows, the creation of a new Vue instance fires off
    functions at varying stages of the instance lifecycle.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，创建一个新的Vue实例会在实例生命周期的不同阶段触发函数。
- en: 'We''ll be looking at how we can activate these hooks within this section:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看如何在本节中激活这些钩子：
- en: '![](assets/97a8afa9-3bb9-4a72-8ee6-c4e2da52ebcc.png)Vue.js instance lifecycle
    hooks'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/97a8afa9-3bb9-4a72-8ee6-c4e2da52ebcc.png)Vue.js实例生命周期钩子'
- en: 'Taking advantage of the lifecycle hooks ([https://vuejs.org/v2/guide/instance.html](https://vuejs.org/v2/guide/instance.html))
    can be done in a similar way to any other property on our Vue instance. Let''s
    take a look at how we can interact with each one of the hooks, starting from the
    top; I''ll be creating another project based on the standard `webpack-simple`
    template:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 利用生命周期钩子（[https://vuejs.org/v2/guide/instance.html](https://vuejs.org/v2/guide/instance.html)）可以以与Vue实例上的任何其他属性类似的方式进行。让我们看看如何与每个钩子进行交互，从顶部开始；我将基于标准的`webpack-simple`模板创建另一个项目：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Notice how we''ve simply added these functions to our instance without any
    extra imports or syntax. We then get two different log statements in our console,
    one prior to the creation of our instance and one after it has been created. The
    next stage for our instance is the `beforeMounted` and `mounted` hooks; if we
    add these, we''ll be able to see a message on the console once again:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们只是简单地将这些函数添加到我们的实例中，而没有任何额外的导入或语法。然后我们在控制台中得到两个不同的日志声明，一个是在创建实例之前，另一个是在创建实例之后。我们实例的下一个阶段是`beforeMounted`和`mounted`钩子；如果我们添加这些，我们将能够再次在控制台上看到一条消息：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we then modified our template so it had a button that updated one of our
    data properties, we''d be able to fire a `beforeUpdated` and `updated` hook:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们修改我们的模板，使其有一个按钮来更新我们的数据属性，我们将能够触发`beforeUpdated`和`updated`钩子：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Whenever we select the `Update Message` button, our `beforeUpdated` and `updated`
    hooks both fire. This allows us to perform an action at this stage in the lifecycle,
    leaving us only with `beforeDestroy` and destroyed yet to cover. Let''s add a
    button and a method to our instance that call `$destroy`, allowing us to trigger
    the appropriate lifecycle hook:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们选择`Update Message`按钮时，我们的`beforeUpdated`和`updated`钩子都会触发。这使我们能够在生命周期的这个阶段执行一个操作，只留下`beforeDestroy`和`destroyed`尚未覆盖。让我们向我们的实例添加一个按钮和一个调用`$destroy`的方法，从而触发适当的生命周期钩子：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can then add the `remove` method to our instance, as well as the functions
    that allow us to capture the appropriate hooks:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以向我们的实例添加`remove`方法，以及允许我们捕获适当钩子的函数：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When we select the `destroy` instance button, the `beforeDestroy` and `destroy`
    lifecycle hooks will fire. This allows us to clean up any subscriptions or perform
    any other action(s) when destroying an instance. In a real-world scenario, lifecycle
    control should be left up to data-driven directives, such as `v-if` and `v-for`.
    We'll be looking at these directives in more detail in the next chapter.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择`destroy`实例按钮时，`beforeDestroy`和`destroy`生命周期钩子将触发。这使我们能够在销毁实例时清理任何订阅或执行任何其他操作。在现实世界的场景中，生命周期控制应该交给数据驱动的指令，比如`v-if`和`v-for`。我们将在下一章更详细地讨论这些指令。
- en: Vue.js and the Virtual DOM
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js和虚拟DOM
- en: On the topic of performance improvements, let's consider why Vue.js makes extensive
    use of the Virtual DOM to render our elements on the screen. Before looking at
    the Virtual DOM, we need to have a foundational understanding of what the DOM
    actually is.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能改进方面，让我们考虑为什么Vue.js广泛使用虚拟DOM来在屏幕上渲染我们的元素。在看虚拟DOM之前，我们需要对DOM的实际含义有一个基础的理解。
- en: DOM
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM
- en: 'The DOM is what is used to describe the structure of an HTML or XML page. It
    creates a tree-like structure that provides us with the ability to do everything
    from creating, reading, updating, and deleting nodes to traversing the tree and
    many more features, all within JavaScript. Let''s consider the following HTML
    page:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: DOM用于描述HTML或XML页面的结构。它创建了一个类似树状的结构，使我们能够在JavaScript中进行从创建、读取、更新和删除节点到遍历树等许多功能。让我们考虑以下HTML页面：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We''re able to look at the HTML and see that we have one **div**, two **p**,
    one **ul**, and **li** tags. The browser parses this HTML and produces the DOM
    Tree, which at a high level looks similar to this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够查看HTML并看到我们有一个**div**，两个**p**，一个**ul**和**li**标签。浏览器解析这个HTML并生成DOM树，从高层次上看，它看起来类似于这样：
- en: '![](assets/485fcd82-ca94-4e09-ba7e-97939f5f35bc.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/485fcd82-ca94-4e09-ba7e-97939f5f35bc.jpg)'
- en: 'We can then interact with the DOM to get access to these elements by `TagName`
    using `document.getElementsByTagName()`, returning a HTML collection. If we wanted
    to map over these collection objects, we could create an array of these elements
    using `Array.from`. The following is an example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过`document.getElementsByTagName()`与DOM交互，返回一个HTML集合。如果我们想要映射这些集合对象，我们可以使用`Array.from`创建一个这些元素的数组。以下是一个例子：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This should then log the `innerHTML` of each item to the console inside of
    our array(s), thus showing how we can access items inside of the DOM:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这样应该会在我们的数组中记录每个项目的`innerHTML`到控制台，从而展示我们如何访问DOM中的项目：
- en: '![](assets/7d4c9117-6dba-4c11-97fd-50b7cfa44e38.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7d4c9117-6dba-4c11-97fd-50b7cfa44e38.png)'
- en: Virtual DOM
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟DOM
- en: Updating DOM nodes is computationally expensive and depending on the size of
    your application, this can substantially slow down the performance of your application.
    The Virtual DOM takes the concept of the DOM and provides us an abstraction, which
    allows for a diffing algorithm to be used to update DOM nodes. To fully take advantage
    of this, these nodes are no longer accessed with the document prefix and instead
    are often represented as JavaScript objects.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 更新DOM节点在计算上是昂贵的，取决于应用程序的大小，这可能会大大降低应用程序的性能。虚拟DOM采用DOM的概念，并为我们提供了一个抽象，允许使用差异算法来更新DOM节点。为了充分利用这一点，这些节点不再使用document前缀访问，而是通常表示为JavaScript对象。
- en: This allows Vue to work out exactly *what* changed and only re-render items
    in the actual DOM that is different from the previous.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Vue能够准确地确定*什么*发生了变化，并且只重新渲染实际DOM中与之前不同的项目。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned more about the Vue instance and how we can take
    advantage of a variety of property types such as data, watchers, computed values,
    and more. We've learned about how `this` works in JavaScript and the differences
    when using it inside of a Vue instance. Furthermore, we've investigated the DOM
    and why Vue uses the Virtual DOM to create performant applications.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们更多地了解了Vue实例以及如何利用各种属性类型，如数据、watchers、计算值等。我们了解了在JavaScript中`this`的工作原理，以及在Vue实例中使用它时的区别。此外，我们调查了DOM以及为什么Vue使用虚拟DOM来创建高性能的应用程序。
- en: In summary, data properties allow for reactive properties within our templates,
    computed properties allow us to take our template and filtering logic and separate
    it into performant properties that can be accessed within our templates, and watched
    properties allow us to work with the complexities of asynchronous operations.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，数据属性允许我们在模板中使用响应式属性，计算属性允许我们将模板和过滤逻辑分离成高性能的属性，可以在模板中访问，而watched属性允许我们处理异步操作的复杂性。
- en: In the next chapter, we'll be taking an in-depth look at Vue directives, such
    as `v-if`, `v-model`, `v-for`, and how they can be used to create powerful reactive
    applications.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入了解Vue指令，比如`v-if`，`v-model`，`v-for`，以及它们如何用于创建强大的响应式应用程序。
