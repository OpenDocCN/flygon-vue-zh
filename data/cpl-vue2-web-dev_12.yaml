- en: Using Vue Dev Tools and Testing Your SPA
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue Dev Tools和测试您的SPA
- en: Over the last 11 chapters, we've been developing several **Single-Page Applications**
    (**SPAs**) using `Vue.js`. Although development is a big chunk of creating an
    SPA, testing also forms a significant part of creating any JavaScript web app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的11章中，我们使用`Vue.js`开发了几个**单页应用程序**（**SPAs**）。尽管开发是创建SPA的重要部分，但测试也是创建任何JavaScript
    Web应用程序的重要组成部分。
- en: The Vue developer tools, available in Chrome and Firefox, provide great insights
    into the components being used within a certain view or the current state of the
    Vuex store – along with any events being emitted from the JavaScript. These tools
    allow you to check and validate the data within your app while developing to ensure
    everything is as it should be.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Vue开发者工具在Chrome和Firefox中提供了对在某个视图中使用的组件或Vuex存储的当前状态的深入洞察 - 以及从JavaScript中发出的任何事件。这些工具允许您在开发过程中检查和验证应用程序中的数据，以确保一切都正常。
- en: The other side of SPA testing is with automated tests. Conditions, rules, and
    routes you write to automate tasks within your app, allow you to then specify
    what the output should be and the test runs the conditions to verify whether the
    results match.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SPA测试的另一方面是自动化测试。您编写的条件、规则和路由用于自动化应用程序中的任务，允许您指定输出应该是什么，并且测试运行条件以验证结果是否匹配。
- en: 'In this chapter, we will:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Cover the usage of the Vue developer tools with the applications we've developed
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涵盖使用我们开发的应用程序的Vue开发者工具的使用
- en: Have an overview of testing tools and applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解测试工具和应用程序的概述
- en: Using the Vue.js developer tools
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue.js开发者工具
- en: The Vue developer tools are available for Chrome and Firefox and can be downloaded
    from GitHub ([https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools)).
    Once installed, they become an extension of the browser developer tools. For example,
    in Chrome, they appear after the Audits tab.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vue开发者工具适用于Chrome和Firefox，并可以从GitHub（[https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools)）下载。安装后，它们成为浏览器开发者工具的扩展。例如，在Chrome中，它们出现在审核标签之后。
- en: '![](assets/e359dd13-20e7-4814-83e5-39484009bdff.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e359dd13-20e7-4814-83e5-39484009bdff.png)'
- en: 'The Vue developer tools will only work when you are using Vue in development
    mode. By default, the unminified version of Vue has the development mode enabled.
    However, if you are using the production version of the code, the development
    tools can be enabled by setting the `devtools` variable to `true` in your code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在使用Vue的开发模式时，Vue开发者工具才能正常工作。默认情况下，未压缩版本的Vue已启用开发模式。然而，如果您使用的是代码的生产版本，则可以通过在代码中将`devtools`变量设置为`true`来启用开发工具：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Throughout the book, we've been using the development version of Vue, so the
    dev tools should work with all three of the SPAs we have developed. Open the Dropbox
    example and open the Vue developer tools.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们一直使用的是Vue的开发版本，所以开发工具应该可以与我们开发的所有三个单页应用程序一起使用。打开Dropbox示例并打开Vue开发者工具。
- en: Inspecting Vue components data and computed values
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查Vue组件的数据和计算值
- en: The Vue developer tools give a great overview of the components in use on the
    page. You can also drill down into the components and preview the data in use
    on that particular instance. This is perfect for inspecting the properties of
    each component on the page at any given time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Vue开发者工具提供了对页面上使用的组件的很好的概述。您还可以深入到组件中，并预览该特定实例中使用的数据。这非常适合在任何给定时间检查页面上每个组件的属性。
- en: 'For example, if we inspect the Dropbox app and navigate to the Components tab,
    we can see the <Root> Vue instance and we can see the <DropboxViewer> component.
    Clicking this will reveal all of the data properties of the component – along
    with any computed properties. This lets us validate whether the structure is constructed
    correctly, along with the computed path property:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们检查Dropbox应用程序并导航到组件选项卡，我们可以看到<Root> Vue实例和<DropboxViewer>组件。点击这个将显示组件的所有数据属性
    - 以及任何计算属性。这样我们就可以验证结构是否正确构建，以及计算路径属性：
- en: '![](assets/fd41fc73-2502-42c2-b4ec-218588b0bd34.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fd41fc73-2502-42c2-b4ec-218588b0bd34.png)'
- en: Drilling down into each component, we can access individual data objects and
    computed properties.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 深入研究每个组件，我们可以访问单个数据对象和计算属性。
- en: Using the Vue developer tools for inspecting your application is a much more
    efficient way of validating data while creating your app, as it saves having to
    place several `console.log()` statements.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue开发者工具来检查应用程序是一种更高效的验证数据的方式，因为它可以避免使用多个`console.log()`语句。
- en: Viewing Vuex mutations and time-travel
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看Vuex的mutations和时间旅行
- en: Navigating to the next tab, Vuex, allows us to watch store mutations taking
    place in real time. Every time a mutation is fired, a new line is created in the
    left-hand panel. This element allows us to view what data is being sent, and what
    the Vuex store looked like before and after the data had been committed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到下一个选项卡Vuex，可以实时观察存储变化的发生。每次发生变化时，左侧面板中都会创建一行。这个元素允许我们查看发送的数据以及数据提交之前和之后的Vuex存储的样子。
- en: 'It also gives you several options to revert, commit, and time-travel to any
    point. Loading the Dropbox app, several structure mutations immediately populate
    within the left-hand panel, listing the mutation name and the time they occurred.
    This is the code pre-caching the folders in action. Clicking on each one will
    reveal the Vuex store state – along with a mutation containing the payload sent.
    The state display is *after* the payload has been sent and the mutation committed.
    To preview what the state looked like *before* that mutation, select the preceding
    option:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了几个选项来还原、提交和时间旅行到任何点。加载Dropbox应用程序后，左侧面板中立即出现几个结构变化，列出了变化的名称和发生的时间。这是预缓存文件夹的代码。点击每个变化将显示Vuex存储状态
    - 以及包含的负载的变化。状态显示是在负载发送和变化提交之后。要预览在该变化之前状态的样子，选择前面的选项：
- en: '![](assets/ea5f9e57-a1da-4dbb-bb62-aa744d97cc83.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ea5f9e57-a1da-4dbb-bb62-aa744d97cc83.png)'
- en: 'On each entry, next to the mutation name, you will notice three symbols that
    allow you to carry out several actions and directly mutate the store in your browser:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个条目旁边，您会注意到三个符号，允许您执行几个操作并直接在浏览器中改变存储：
- en: '**Commit this mutation**: This allows you to commit all the data up to that
    point. This will *remove* all of the mutations from the dev tools and update the
    Base State to this point. This is handy if there are several mutations occurring
    that you wish to keep track of.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交此变化**：这允许您提交到该点的所有数据。这将从开发工具中*删除*所有的变化，并将基本状态更新到此点。如果有多个变化发生，您希望跟踪它们，这将非常方便。'
- en: '**Revert this mutation**: This will undo the mutation and all mutations after
    this point. This allows you to carry out the same actions again and again without
    pressing refresh or losing your current place. For example, when adding a product
    to the basket in our shop app, a mutation occurs. Using this would allow you to
    remove the product from the basket and undo any following mutations without navigating
    away from the product page.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**撤销此突变**：这将撤销该突变和此点之后的所有突变。这样可以让你一遍又一遍地执行相同的操作，而无需刷新或丢失当前位置。例如，在我们的商店应用程序中将产品添加到购物篮时，会发生突变。使用此功能可以让你从购物篮中删除产品并撤销任何后续的突变，而无需离开产品页面。'
- en: '**Time-travel to this state**: This allows you to preview the app and state
    at that particular mutation, without reverting any mutations that occur after
    the selected point.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间旅行到此状态**：这允许您预览应用程序和该特定突变时的状态，而不会撤销所选点之后发生的任何突变。'
- en: The mutations tab also allows you to commit or revert all mutations at the top
    of the left-hand panel. Within the right-hand panel, you can also import and export
    a JSON encoded version of the store's state. This is particularly handy when you
    want to re-test several circumstances and instances without having to reproduce
    several steps.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 突变选项卡还允许您在左侧面板顶部提交或撤销所有突变。在右侧面板中，您还可以导入和导出存储状态的JSON编码版本。当您想要重新测试多种情况和实例而无需重现多个步骤时，这非常方便。
- en: Previewing event data
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览事件数据
- en: The Events tab of the Vue developer tools works in a similar way to the Vuex
    tab, allowing you to inspect any events emitted throughout your app. Our Dropbox
    app doesn't use events, so open up the people-filtering app we created in Chapter
    2, *Displaying, Looping, Searching, and Filtering Data*, and [Chapter 3](f611e841-86d6-4741-a792-d10f9c289358.xhtml), *Optimizing
    our App and Using Components to Display Data*, of this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Vue开发者工具的事件选项卡与Vuex选项卡的工作方式类似，允许您检查应用程序中发出的任何事件。我们的Dropbox应用程序不使用事件，因此打开我们在本书的第2章“显示、循环、搜索和过滤数据”中创建的people-filtering应用程序，以及本书的第3章“优化我们的应用程序并使用组件显示数据”。
- en: 'Changing the filters in this app emits an event each time the filter type is
    updated, along with the filter query:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 更改此应用程序中的过滤器会在每次更新过滤器类型时发出一个事件，以及过滤器查询：
- en: '![](assets/f7219298-cb16-4f17-9c40-750c9b9eeb1b.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f7219298-cb16-4f17-9c40-750c9b9eeb1b.png)'
- en: The left-hand panel again lists the name of the event and the time it occurred.
    The right panel contains information about the event, including its component
    origin and payload. This data allows you to ensure the event data is as you expected
    it to be and, if not, helps you locate where the event is being triggered.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧面板再次列出了事件的名称和发生的时间。右侧面板包含有关事件的信息，包括其组件来源和有效负载。这些数据可以确保事件数据与您预期的一样，并且如果不是，可以帮助您找到触发事件的位置。
- en: The Vue dev tools are invaluable, especially as your JavaScript application
    gets bigger and more complex. Open the shop SPA we developed and inspect the various
    components and Vuex data to get an idea of how this tool can help you create applications
    that only commit mutations they need to and emit the events they have to.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Vue开发工具是非常宝贵的，特别是当你的JavaScript应用程序变得越来越大和复杂时。打开我们开发的商店SPA，检查各个组件和Vuex数据，了解这个工具如何帮助你创建只提交所需的突变并发出所需的事件的应用程序。
- en: Testing your SPA
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的SPA
- en: The majority of Vue testing suites revolve around having command-line knowledge
    and creating a Vue application using the **CLI** (**command-line interface**).
    Along with creating applications in frontend-compatible JavaScript, Vue also has
    a CLI that allows you to create applications using component-based files. These
    are files with a `.vue` extension and contain the template HTML along with the
    JavaScript required for the component. They also allow you to create scoped CSS
    – styles that only apply to that component. If you chose to create your app using
    the CLI, all of the theory and a lot of the practical knowledge you have learned
    in this book can easily be ported across.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Vue测试套件都围绕着具备命令行知识并使用**CLI**（**命令行界面**）创建Vue应用程序。除了使用前端兼容的JavaScript创建应用程序外，Vue还有一个CLI，允许您使用基于组件的文件创建应用程序。这些文件具有`.vue`扩展名，包含模板HTML以及组件所需的JavaScript。它们还允许您创建作用域CSS-仅适用于该组件的样式。如果选择使用CLI创建应用程序，则本书中学到的所有理论和大部分实践知识都可以轻松移植过来。
- en: Command-line unit testing
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行单元测试
- en: 'Along with component files, the Vue CLI allows you to integrate with command-line
    unit tests easier, such as Jest, Mocha, Chai, and TestCafe ([https://testcafe.devexpress.com/](https://testcafe.devexpress.com/)).
    For example, TestCafe allows you to specify several different tests, including
    checking whether content exists, to clicking buttons to test functionality. An
    example of a TestCafe test checking to see if our filtering component in our first
    app contains the work *Field* would be:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了组件文件，Vue CLI还允许您更轻松地集成命令行单元测试，例如Jest、Mocha、Chai和TestCafe（[https://testcafe.devexpress.com/](https://testcafe.devexpress.com/)）。例如，TestCafe允许您指定多个不同的测试，包括检查内容是否存在，点击按钮以测试功能等。一个TestCafe测试的示例是检查我们第一个应用程序中的过滤组件是否包含单词*Field*：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This test would then equate to `true` or `false`. Unit tests are generally written
    in conjunction with components themselves, allowing components to be reused and
    tested in isolation. This allows you to check that external factors have no bearing
    on the output of your tests.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试将返回`true`或`false`。单元测试通常与组件本身一起编写，允许组件在隔离环境中被重用和测试。这样可以确保外部因素对测试结果没有影响。
- en: Most command-line JavaScript testing libraries will integrate with Vue.js; there
    is a great list available in the awesome Vue GitHub repository ([https://github.com/vuejs/awesome-vue#test](https://github.com/vuejs/awesome-vue#test)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数命令行JavaScript测试库都可以与Vue.js集成；在awesome Vue GitHub存储库（[https://github.com/vuejs/awesome-vue#test](https://github.com/vuejs/awesome-vue#test)）中有一个很棒的列表可用。
- en: Browser automation
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器自动化
- en: The alternative to using command-line unit testing is to automate your browser
    with a testing suite. This kind of testing is still triggered via the command
    line, but rather than integrating directly with your Vue application, it opens
    the page in the browser and interacts with it like a user would. A popular tool
    for doing this is `Nightwatch.js` ([http://nightwatchjs.org/](http://nightwatchjs.org/)).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行单元测试的替代方法是使用测试套件自动化浏览器。这种测试仍然通过命令行触发，但不是直接与Vue应用程序集成，而是在浏览器中打开页面并像用户一样与之交互。一个常用的工具是`Nightwatch.js`（[http://nightwatchjs.org/](http://nightwatchjs.org/)）。
- en: You may use this suite for opening your shop and interacting with the filtering
    component or product list ordering and comparing the result. The tests are written
    in very colloquial English and are not restricted to being on the same domain
    name or file network as the site to be tested. The library is also language agnostic
    – working for any website regardless of what it is built with.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这个套件来打开您的商店，并与过滤组件或产品列表排序进行交互，并比较结果。这些测试用例使用非正式的英语编写，并不限于与要测试的站点在同一域名或文件网络上。该库也是语言无关的，适用于任何网站，无论它是用什么构建的。
- en: 'The example `Nightwatch.js` gives on their website is for opening Google and
    ensuring the first result of a Google search for `rembrandt van rijn`is the Wikipedia
    entry:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`Nightwatch.js`在他们的网站上给出的示例是打开Google并确保`rembrandt van rijn`的谷歌搜索结果的第一个结果是维基百科条目：'
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: An alternative to Nightwatch is Selenium ([http://www.seleniumhq.org/](http://www.seleniumhq.org/)).
    Selenium has the advantage of having a Firefox extension that allows you to visually
    create tests and commands.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Nightwatch的替代品是Selenium（[http://www.seleniumhq.org/](http://www.seleniumhq.org/)）。
    Selenium的优点是有一个Firefox扩展，可以让您可视化地创建测试和命令。
- en: Testing, especially for big applications, is paramount – especially when deploying
    your application to a development environment. Whether you choose unit testing
    or browser automation, there is a host of articles and books available on the
    subject.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 测试，特别是对于大型应用程序来说，是至关重要的，尤其是在将应用程序部署到开发环境时。无论您选择单元测试还是浏览器自动化，都有大量关于这个主题的文章和书籍可供参考。
- en: Summary
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Till now, we created a mock shop. Using real data from Shopify CSV files, we
    created an application that allowed products to be viewed individually. We also
    created a category listing page that could be filtered and ordered, allowing the
    user to find specifically the products they wanted. To complete the experience,
    we built an editable Basket, Checkout, and Order Confirmation screen. In this
    chapter, we covered the use of the Vue dev tools, followed by how to build tests.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们创建了一个模拟商店。使用Shopify CSV文件中的真实数据，我们创建了一个允许单独查看产品的应用程序。我们还创建了一个可以进行过滤和排序的类别列表页面，使用户可以找到他们想要的特定产品。为了完善体验，我们构建了一个可编辑的购物篮、结账和订单确认屏幕。在本章中，我们介绍了Vue开发工具的使用，以及如何构建测试。
