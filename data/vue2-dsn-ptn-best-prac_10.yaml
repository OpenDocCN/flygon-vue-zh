- en: Testing Vue.js Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Vue.js应用程序
- en: In a world with tight deadliness and accelerating requirements, creating automated
    tests for our applications becomes more important than ever. An important factor
    to consider, which most developers overlook, is the fact that testing is a skill,
    and just because you may be comfortable coding up solutions, it doesn't automatically
    mean that you can write good unit tests. As you get more experience in this area,
    you'll find yourself writing tests more often and wonder what you ever did without
    them!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个紧迫和加速要求的世界中，为我们的应用程序创建自动化测试变得比以往任何时候都更加重要。一个需要考虑的重要因素，大多数开发人员忽视的是，测试是一种技能，仅仅因为你可能习惯编写解决方案，并不意味着你可以自动编写好的单元测试。随着你在这个领域的经验越来越丰富，你会发现自己更经常地编写测试，并想知道在没有它们的情况下你到底是怎么做的！
- en: 'By the end of this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将涵盖以下内容：
- en: Learning about why you should consider using automated testing tools and techniques
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解为什么应该考虑使用自动化测试工具和技术
- en: Writing your first unit test for Vue components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Vue组件编写你的第一个单元测试
- en: Writing tests that mock out particular functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写模拟特定函数的测试
- en: Writing tests that are dependent on Vue.js events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写依赖于Vue.js事件的测试
- en: Using Wallaby.js to see the results of our tests in real time
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wallaby.js实时查看我们测试的结果
- en: When we talk about testing our Vue projects, we can mean different things, depending
    on the context.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论测试我们的Vue项目时，根据上下文，我们可能指的是不同的事情。
- en: Why testing?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要测试？
- en: Automated testing tools exist for a reason. When it comes to testing the work
    that we've created manually, you'll know from experience that this is a long,
    (sometimes complex) process that does not allow for consistent results. Not only
    do we have to manually remember whether a particular component works (or otherwise
    write the results down somewhere!), but it isn't resilient to change.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试工具是有原因的。当我们手动测试我们创建的工作时，你会从经验中知道这是一个漫长（有时复杂）的过程，不允许一致的结果。我们不仅需要手动记住一个特定组件是否工作（或者在某个地方写下结果！），而且它也不具有变化的弹性。
- en: 'Here are some phrases I''ve heard over the years when testing has been brought
    up:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些年来我听到过一些关于测试的话语：
- en: '*"But Paul, if I write tests for my application it''ll take three times as
    long!"*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*“但是保罗，如果我为我的应用程序编写测试，将需要三倍的时间！”*'
- en: '*"I don''t know how to write tests..."*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*“我不知道如何编写测试...”*'
- en: '*"That''s not my job!"*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*“那不是我的工作！”*'
- en: '...and a variety of others.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '...以及其他各种。'
- en: The point is that testing is a skill in the same sense that development is a
    skill. You may not be immediately great at one or the other, but with time, practice,
    and perseverance, you should find yourself in a position where testing feels natural
    and a normal part of software development.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是测试和开发一样是一种技能。你可能不会立刻擅长其中一种，但是随着时间、练习和毅力，你应该会发现自己处于一种测试感觉自然和软件开发的正常部分的位置。
- en: Unit testing
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Automated testing tools take the manual work we'd be doing each time we want
    to verify that our feature works as expected, and give us a way to run a command
    that tests our assertions one by one. This is then shown to us in reports (or
    live in our editor, as we'll see later on), which gives us the ability to refactor
    code that isn't working as intended.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试工具取代了我们每次想要验证我们的功能是否按预期工作时所做的手动工作，并给了我们一种运行测试命令逐个测试我们的断言的方法。然后这些结果会以报告的形式呈现给我们（或者在我们的编辑器中实时显示，正如我们后面会看到的），这使我们有能力重构不按预期工作的代码。
- en: By using automated testing tools, we're saving ourselves a vast amount of effort
    when compared to manual testing.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用自动化测试工具，与手动测试相比，我们节省了大量的工作量。
- en: Unit testing can be defined as a type of testing that only tests one "unit"
    (the smallest testable part of a feature) at a time. We can then automate this
    process to continually test our features as the application gets larger. At this
    point, you may wish to follow Test-Driven Development/Behavior Driven-Development
    practices.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试可以被定义为一种只测试一个“单元”（功能的最小可测试部分）的测试类型。然后，我们可以自动化这个过程，随着应用程序变得更大，不断测试我们的功能。在这一点上，您可能希望遵循测试驱动开发/行为驱动开发的实践。
- en: In the modern JavaScript testing ecosystem, there are a variety of test suites
    available. These test suites can be thought of as applications that give us the
    ability to write assertions, run our tests, provide us with coverage reports,
    and much more. We'll be using Jest inside our project, as this is a fast and flexible
    suite created and maintained by Facebook.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代JavaScript测试生态系统中，有各种测试套件可用。这些测试套件可以被认为是给我们提供编写断言、运行测试、提供覆盖报告等功能的应用程序。我们将在项目中使用Jest，因为这是由Facebook创建和维护的快速灵活的测试套件。
- en: 'Let''s create a new playground project so that we can get familiar with Unit
    testing. We''ll be using the `webpack` template instead of the `webpack-simple`
    template, as this allows us to configure testing by default:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的游乐场项目，以便我们可以熟悉单元测试。我们将使用`webpack`模板而不是`webpack-simple`模板，因为这允许我们默认配置测试：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s start off by investigating the `test/unit/specs` directory. This is
    where we''ll be placing all of our unit/integration tests when testing our Vue
    components. Open up `HelloWorld.spec.js`, and let''s go through it line by line:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先调查`test/unit/specs`目录。这是我们在测试Vue组件时放置所有单元/集成测试的地方。打开`HelloWorld.spec.js`，让我们逐行进行：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can then run these tests by running `npm run unit` inside our Terminal (ensure
    that you''re in the project directory). This will then tell us how many tests
    have passed as well as the overall test code coverage. This metric can be used
    as a way to determine how robust an application is in 60; most circumstances;
    however, it should not be used as gospel. In the following screenshot, we can
    clearly see how many of our tests have passed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过在终端中运行`npm run unit`来运行这些测试（确保您在项目目录中）。这将告诉我们有多少个测试通过了以及整体测试代码覆盖率。这个指标可以用作确定应用程序在大多数情况下有多健壮的一种方式；但是，它不应该被当作圣经。在下面的截图中，我们可以清楚地看到有多少个测试通过了：
- en: '![](assets/86d9e86c-4b1a-405c-a910-2e40e1d5b0c6.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/86d9e86c-4b1a-405c-a910-2e40e1d5b0c6.png)'
- en: Setting up vue-test-utils
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置vue-test-utils
- en: 'For a better testing experience, it''s advised to use the `vue-test-utils`
    module as this provides us with many helpers and patterns that are exclusively
    used with the Vue framework. Let''s create a new project based on the `webpack-simple`
    template and integrate Jest and `vue-test-utils` ourselves. Run the following
    in your Terminal:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得更好的测试体验，建议使用`vue-test-utils`模块，因为这为我们提供了许多专门用于Vue框架的帮助程序和模式。让我们基于`webpack-simple`模板创建一个新项目，并自己集成Jest和`vue-test-utils`。在您的终端中运行以下命令：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we have to add some extra configuration to our project so that we can
    run Jest, our test suite. This can be configured inside our project''s `package.json`.
    Add the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须在项目中添加一些额外的配置，以便我们可以运行Jest，我们的测试套件。这可以在项目的`package.json`中配置。添加以下内容：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This means that any time we want to run our tests, we simply run `npm run test`
    inside our Terminal. This runs the local (project installed) version of Jest on
    any files that match the `*.spec.js` name.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着任何时候我们想要运行我们的测试，我们只需在终端中运行`npm run test`。这将在任何匹配`*.spec.js`名称的文件上运行Jest的本地（项目安装）版本。
- en: 'Next, we need to tell Jest how to handle Single File Components (that is, `*.vue`
    files) within our project. This requires the `vue-jest` preprocessor. We''ll also
    want to use ES2015+ syntax inside of our tests, so we''ll also need the `babel-jest`
    preprocessor. Let''s install both by running the following in the Terminal:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要告诉Jest如何处理单文件组件（即`*.vue`文件）在我们的项目中。这需要`vue-jest`预处理器。我们还希望在测试中使用ES2015+语法，因此我们还需要`babel-jest`预处理器。让我们通过在终端中运行以下命令来安装两者：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can then define the following object inside `package.json`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在`package.json`中定义以下对象：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is essentially telling Jest how to handle both JavaScript and Vue files,
    by knowing which preprocessor to use (that is, `babel-jest` or `vue-jest`), depending
    on the context.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这本质上告诉Jest如何处理JavaScript和Vue文件，通过知道要使用哪个预处理器（即`babel-jest`或`vue-jest`），具体取决于上下文。
- en: 'We can also make our tests run quicker if we tell Babel to only transpile features
    for the Node version we''re currently loading. Let''s add a separate test environment
    to our `.babelrc` file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们告诉Babel只为当前加载的Node版本转译功能，我们还可以使我们的测试运行更快。让我们在`.babelrc`文件中添加一个单独的测试环境：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we've added the appropriate configuration, let's start testing!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了适当的配置，让我们开始测试吧！
- en: Creating a TodoList
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个TodoList
- en: 'Let''s now create a `TodoList.vue` component inside `src/components` folder.
    This is the component that we will be testing, and we''ll slowly add more features
    to it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在`src/components`文件夹中创建一个`TodoList.vue`组件。这是我们将要测试的组件，我们将逐步为其添加更多功能：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see, we just have a simple application that returns an array of
    to-dos with varying items. Let''s create a router inside `src/router/index.js`
    to match our new `TodoList` component and display it as the root:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们只是一个返回具有不同项目的待办事项数组的简单应用程序。让我们在`src/router/index.js`中创建一个路由器，以匹配我们的新`TodoList`组件并将其显示为根：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As we''re using `vue-router`, we''ll also need to install it. Run the following
    in your Terminal:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用`vue-router`，我们还需要安装它。在终端中运行以下命令：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can then add the router to `main.js`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将路由器添加到`main.js`中：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'I''ve now added `router-view` and elected to remove the Vue logo from `App.vue`,
    so we have a cleaner user interface. Here''s the template for `App.vue`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在已经添加了`router-view`，并决定从`App.vue`中删除Vue标志，这样我们就有了一个更清洁的用户界面。以下是`App.vue`的模板：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we can see in our browser, it displays our template with the name of TodoList
    and the `todo` items we created as well:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在浏览器中看到的那样，它显示了我们的模板，其中包括TodoList的名称和我们创建的`todo`项目：
- en: '![](assets/4705e2e3-e78b-4168-843a-f001df506d5d.png)Let''s write some tests
    for this component'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4705e2e3-e78b-4168-843a-f001df506d5d.png)让我们为这个组件编写一些测试'
- en: Writing tests
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写测试
- en: Inside the `src/components` folder, make a new folder named `__tests__` and
    then create a file named `TodoList.spec.js`. Jest will automatically find this
    folder and subsequent tests.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中，创建一个名为`__tests__`的新文件夹，然后创建一个名为`TodoList.spec.js`的文件。Jest将自动找到此文件夹和后续的测试。
- en: 'Let''s first import our component and the `mount` method from the test utilities:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先从测试工具中导入我们的组件和`mount`方法：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `mount` method allows us to test our `TodoList` component in isolation
    and gives us the ability to mock any input props, events, and even outputs. Next,
    let''s create a describe block that we''ll use to contain our test suite:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`mount`方法允许我们在隔离中测试我们的`TodoList`组件，并且使我们能够模拟任何输入props、事件，甚至输出。接下来，让我们创建一个描述块，用于包含我们的测试套件：'
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s now mount the component and gain access to the Vue instance:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们挂载组件并访问Vue实例：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we need to define the `it` block to assert the outcome of our test case.
    Let''s make our first expectation—it should render a list of to-do items:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义`it`块来断言我们测试用例的结果。让我们做出我们的第一个期望-它应该呈现一个待办事项列表：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can watch changes for our tests by running `$ npm run test -- --watchAll`
    in the Terminal. Alternatively, we can make a new script inside `package.json`
    that does this for us:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在终端中运行`$ npm run test -- --watchAll`来观察测试的变化。或者，我们可以在`package.json`内创建一个新的脚本来代替这个操作：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, if we run `npm run test:watch` inside of the Terminal, it will watch the
    filesystem for any changes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们在终端内运行`npm run test:watch`，它将监视文件系统的任何更改。
- en: 'Here are our results:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的结果：
- en: '![](assets/d9584d12-d6b4-466b-b8ee-6f20344a45fb.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d9584d12-d6b4-466b-b8ee-6f20344a45fb.png)'
- en: That's interesting. We have a passing test! However, we have to think to ourselves
    at this point, is this test brittle? In a real-world application, we may not have
    items inside our `TodoList` at runtime by default.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有趣。我们有一个通过的测试！但是，此时我们必须考虑，这个测试是否脆弱？在实际应用中，我们可能不会在运行时默认拥有`TodoList`中的项目。
- en: We need a way to set properties on our isolated tests. This is where the ability
    to set our own Vue options comes in handy!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方法来在我们的隔离测试中设置属性。这就是设置自己的Vue选项的能力派上用场的地方！
- en: Vue options
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue选项
- en: 'We can set our own options on a Vue instance. Let''s use `vue-test-utils` to
    set our own data on the instance and see whether this data is being rendered on
    screen:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Vue实例上设置自己的选项。让我们使用`vue-test-utils`在实例上设置自己的数据，并查看这些数据是否呈现在屏幕上：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As we can see, we're now testing against the items rendered on the screen based
    on the data option within our component.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们现在是根据组件内的数据选项来测试屏幕上呈现的项目。
- en: 'Let''s add a `TodoItem` component so that we can render a component with a
    `todo` prop dynamically. We can then test this component''s output based on our
    prop:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个`TodoItem`组件，以便我们可以动态地渲染带有`todo`属性的组件。然后我们可以根据我们的属性测试这个组件的输出：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can then add it to the `TodoList` component:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将其添加到`TodoList`组件中：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Our tests still pass as expected, because the component is rendered into `li`
    at runtime. It may be a better idea to change this to find the component itself
    though:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试仍然如预期般通过，因为组件在运行时被渲染为`li`。不过，将其更改为查找组件本身可能是一个更好的主意：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s write some tests for our `TodoItem` and create a `TodoItem.spec.js`
    inside `components/__tests__`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的`TodoItem`编写一些测试，并在`components/__tests__`内创建一个`TodoItem.spec.js`：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As we''re essentially using the same logic, our test is similar. The main difference
    is that instead of having a list of `todos`, we just have one `todo` object. We''re
    mocking the props with `propsData` instead of data, essentially asserting that
    we can add properties to this component and it renders the correct data. Let''s
    take a look at whether our tests passed or failed:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们基本上使用相同的逻辑，所以我们的测试是相似的。主要区别在于，我们不是有一个`todos`列表，而是只有一个`todo`对象。我们使用`propsData`来模拟props，而不是数据，基本上断言我们可以向这个组件添加属性，并且它呈现正确的数据。让我们看一下我们的测试是否通过或失败：
- en: '![](assets/b7a2c79e-b9aa-4ad1-a0bc-ae7bd88e18df.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b7a2c79e-b9aa-4ad1-a0bc-ae7bd88e18df.png)'
- en: Adding new features
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新功能
- en: 'Let''s take a test-driven approach to adding new features to our application.
    We''ll need a way to add new items to our `todo` list, so let''s start by writing
    our tests first. Inside `TodoList.spec.js`, we''ll add another `it` assertion
    that should add an item to our `todo` list:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以测试驱动的方式向我们的应用程序添加新功能。我们需要一种方法来向我们的`todo`列表中添加新项目，所以让我们首先编写我们的测试。在`TodoList.spec.js`内，我们将添加另一个`it`断言，应该向我们的`todo`列表中添加一个项目：
- en: '[PRE22]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If we run our tests right now, we''ll get a failing test this is expected!:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行我们的测试，我们将得到一个失败的测试，这是预期的！：
- en: '![](assets/ae1c7364-7229-4b62-9446-c816ed199fc3.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ae1c7364-7229-4b62-9446-c816ed199fc3.png)'
- en: 'Let''s do the minimum possible to fix our error. We can add a method named
    `addTodo` inside our Vue instance:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尽可能少地修复我们的错误。我们可以在Vue实例内添加一个名为`addTodo`的方法：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we get a new error; this time, it states that it Cannot read property ''length''
    of undefined, essentially saying that we have no `newTodos` array:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到了一个新的错误；这次它说无法读取未定义的`length`属性，基本上是说我们没有`newTodos`数组：
- en: '![](assets/ea3aa57b-9c65-4a84-a90f-9f2b57cbc0b8.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ea3aa57b-9c65-4a84-a90f-9f2b57cbc0b8.png)'
- en: 'Let''s make our `addTodo` function return an array that combines the current
    `todos` with a new todo:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使我们的`addTodo`函数返回一个将当前的`todos`与新todo结合在一起的数组：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We get this output after running `npm test`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`npm test`后，我们得到以下输出：
- en: '![](assets/207f504d-745c-4ddc-970e-83c8a300387d.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/207f504d-745c-4ddc-970e-83c8a300387d.png)'
- en: Ta-da! Passing tests.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 塔达！测试通过。
- en: Hmm. I do remember all of our `todo` items having an appropriate `id`, but it
    looks like that's no longer the case.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯。我记得我们所有的`todo`项目都有适当的`id`，但看起来情况已经不再是这样了。
- en: 'Ideally, our server-side database should handle `id` numbers for us, but for
    now, we can work with a client-side generated `uuid` using the `uuid` package.
    Let''s install it by running the following in the Terminal:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们的服务器端数据库应该为我们处理`id`号码，但目前，我们可以使用`uuid`包生成客户端`uuid`。让我们通过在终端中运行以下命令来安装它：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can then write our test case to assert that each item added to the list
    has an `id` property:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以编写我们的测试用例，断言添加到列表中的每个项目都有一个`id`属性：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As you can see, the Terminal outputs that we have an issue, and this is caused
    because we evidently don''t have an `id` property:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，终端输出了我们有一个问题，这是因为显然我们没有`id`属性：
- en: '![](assets/b651c0c2-e3c0-4d1b-b204-fa2c3e02a57e.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b651c0c2-e3c0-4d1b-b204-fa2c3e02a57e.png)'
- en: 'Let''s use the `uuid` package we installed earlier to achieve this goal:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用之前安装的`uuid`包来实现这个目标：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We then get a passing test:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们得到了一个通过的测试：
- en: '![](assets/19d3db16-8823-471d-bd6b-047022afcf56.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/19d3db16-8823-471d-bd6b-047022afcf56.png)'
- en: 'Starting off with a failing test is beneficial for multiple reasons:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从失败的测试开始对多个原因都是有益的：
- en: It ensures that our test is actually running and we don't spend time debugging
    anything!
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它确保我们的测试实际上正在运行，我们不会花时间调试任何东西！
- en: We know what we need to implement next, as we're driven by the current error
    message
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们知道接下来需要实现什么，因为我们受当前错误消息的驱使
- en: We can then write the minimum necessary to get a green test and continue to
    refactor our code until we're satisfied with our solution. In the previous tests,
    we could have written even less to get a green result, but for brevity, I've elected
    for smaller examples.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以写入最少必要的内容来获得绿色的测试，并继续重构我们的代码，直到我们对解决方案感到满意。在以前的测试中，我们可以写得更少以获得绿色的结果，但为了简洁起见，我选择了更小的例子。
- en: Click events
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点击事件
- en: 'Great! Our method works, but that''s not how our user will be interacting with
    the application. Let''s see whether we can make our tests take into account a
    user input form and subsequent button:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们的方法有效，但这不是用户将与应用程序交互的方式。让我们看看我们是否可以使我们的测试考虑用户输入表单和随后的按钮：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can also make a small change to our `addTodo` function, ensuring that `this.todos`
    is given the value of the new `todo` items:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以对我们的`addTodo`函数进行小小的改动，确保`this.todos`被赋予新的`todo`项目的值：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The great thing is that by making this change, we can check against all of our
    previous use cases and see that nothing fails! Hurray for automated testing!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒的是，通过进行这种改变，我们可以检查所有以前的用例，并且看到没有任何失败！为自动化测试欢呼！
- en: 'Next, let''s make an `it` block that we can use to assert that whenever our
    Submit button is clicked on, an item is added:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个`it`块，我们可以用来断言每当我们点击提交按钮时，都会添加一个项目：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, we can get the form element from within the wrapper using find, and this
    allows us to then trigger an event. As we''re submitting a form, we''ll trigger
    the submit event and pass along a parameter to our `submit` function. We can then
    assert that our `todo` list should be `1`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以使用find从包装器中获取表单元素，然后触发事件。由于我们正在提交表单，我们将触发提交事件并传递参数给我们的`submit`函数。然后我们可以断言我们的`todo`列表应该是`1`：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can also check to see whether the appropriate method was called when the
    form is submitted. Let''s do that using `jest`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检查在表单提交时是否调用了适当的方法。让我们使用`jest`来做到这一点：
- en: '[PRE32]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Testing events
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试事件
- en: 'We''ve made a lot of progress, but wouldn''t it be great if we could test events
    that fire between components? Let''s take a look at this by creating a `TodoInput`,
    component and abstracting our form away into `this` component:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取得了很大的进展，但如果我们能测试组件之间触发的事件，那不是很棒吗？让我们通过创建一个`TodoInput`组件来看看这个问题，并将我们的表单抽象到`this`组件中：
- en: '[PRE33]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, our `addTodo` method inside of `this` component fires an event. Let''s
    test that event within a `TodoInput.spec.js` file:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在`this`组件中的`addTodo`方法触发了一个事件。让我们在`TodoInput.spec.js`文件中测试该事件：
- en: '[PRE34]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We're introduced to a new concept inside of this method—`mock`. This allows
    us to define our own behavior and subsequently determine what the event was called
    with.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们介绍了一个新的概念——`mock`。这允许我们定义自己的行为，并随后确定事件是如何被调用的。
- en: Whenever the `addTodo` event is fired, the `mock` function is called instead.
    This allows us to see whether our event is being called and also ensures that
    the event can take a payload.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 每当`addTodo`事件被触发时，`mock`函数就会被调用。这使我们能够看到我们的事件是否被调用，并确保事件可以携带有效负载。
- en: 'We can also ensure that the `TodoList` handles `this` event, but firstly, ensure
    that you''ve updated the `TodoList` to include the `TodoInput` form:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以确保`TodoList`处理`this`事件，但首先确保您已经更新了`TodoList`以包括`TodoInput`表单：
- en: '[PRE35]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, inside our `TodoList.spec.js`, we can start off by importing `TodoInput`
    and then add the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在我们的`TodoList.spec.js`中，我们可以首先导入`TodoInput`，然后添加以下内容：
- en: '[PRE36]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Apart from that, we can also ensure that the event does what it''s supposed
    to do; so when we fire the event `it` adds an item to the array and we are testing
    for the array length:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还可以确保事件执行其预期功能；所以当我们触发事件时，它会向数组添加一个项目，我们正在测试数组的长度：
- en: '[PRE37]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Using Wallaby.js for a better testing experience
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Wallaby.js获得更好的测试体验
- en: 'We can also use Wallaby.js to see the results of our unit tests in real time
    within our editor. It''s not a free tool, but you may find it useful when creating
    test-driven Vue applications. Let''s start off by cloning/downloading a project
    that already has Wallaby set up. Run the following in your Terminal:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用Wallaby.js在编辑器中实时查看我们的单元测试结果。这不是一个免费的工具，但在创建面向测试驱动的Vue应用程序时，您可能会发现它很有用。让我们首先克隆/下载一个已经设置好Wallaby的项目。在您的终端中运行以下命令：
- en: '[PRE38]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We can then open this up inside our editor and install the Wallaby.js extension
    inside our editor. You can find a list of supported editors and instructions at
    [https://wallabyjs.com/download/](https://wallabyjs.com/download/).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在编辑器中打开它，并在编辑器中安装Wallaby.js扩展。您可以在[https://wallabyjs.com/download/](https://wallabyjs.com/download/)找到受支持的编辑器列表和说明。
- en: 'I''ll be installing this within Visual Studio Code, which starts by searching
    the extensions marketplace for Wallaby:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在Visual Studio Code中安装这个，首先在扩展市场中搜索Wallaby：
- en: '![](assets/4fe32175-7e93-4710-b862-8276517d2d16.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4fe32175-7e93-4710-b862-8276517d2d16.png)'
- en: We can then tell Wallaby about the project's configuration file (`wallaby.js`),
    by pressing *CMD* + *SHIFT + =* on Mac or *CTRL* + *SHIFT + =* on Windows. From
    the drop-down, click on Select Configuration File and subsequently, type `wallaby.js`.
    This will allow Wallaby and Vue to work together.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以按下Mac上的*CMD* + *SHIFT + =*或Windows上的*CTRL* + *SHIFT + =*，告诉Wallaby有关项目的配置文件（`wallaby.js`）。从下拉菜单中，单击“选择配置文件”，然后键入`wallaby.js`。这将允许Wallaby和Vue一起工作。
- en: 'To start Wallaby, we can open the configuration menu again and select Start.
    We can then navigate to the `tests/unit/specs/Hello.spec.js` file, and we should
    see varying blocks in the line margins of the editor:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Wallaby，我们可以再次打开配置菜单并选择“启动”。然后，我们可以导航到`tests/unit/specs/Hello.spec.js`文件，并在编辑器的行边距中看到不同的块：
- en: '![](assets/5fa8444b-706f-4426-9556-3106fa8d1712.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5fa8444b-706f-4426-9556-3106fa8d1712.png)'
- en: 'As everything is green, we know that it has passed! What if we change the implementation
    details of the test? Let''s purposely make one or more of our tests fail:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一切都是绿色的，我们知道它已经通过了！如果我们改变测试的实现细节会怎么样？让我们故意让一个或多个测试失败：
- en: '![](assets/17998166-4cf0-4664-9507-83e3d278c611.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/17998166-4cf0-4664-9507-83e3d278c611.png)'
- en: Everything stays green apart from the 'should render correct contents' block,
    which can be seen down the left-hand side. This is because we now have a failed
    assertion, but more importantly, we don't have to rerun our tests, and they're
    displayed instantly within our editor. No more Alt-Tab-ing between different windows
    to watch our test output!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 除了“应该呈现正确内容”块之外，一切都保持不变，可以在左侧看到。这是因为我们现在有一个失败的断言，但更重要的是，我们不必重新运行测试，它们会立即显示在我们的编辑器中。不再需要在不同窗口之间切换以观看我们的测试输出！
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter saw us learn about how to appropriately test our Vue components.
    We learned how to follow the fail-first approach to write tests that drive our
    development decisions as well as how to take advantage of Wallaby.js to see the
    results of our tests from within our editor!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本章让我们了解了如何适当地测试我们的Vue组件。我们学会了如何遵循先失败的方法来编写驱动我们开发决策的测试，以及如何利用Wallaby.js在编辑器中查看我们测试的结果！
- en: In the next chapter, we'll learn how we can combine our Vue.js applications
    with modern Progressive Web Application techniques, such as service workers, application
    manifests, and much more!
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何将我们的Vue.js应用与现代渐进式Web应用技术相结合，例如服务工作者、应用程序清单等等！
