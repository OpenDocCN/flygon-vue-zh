- en: Using Vue-Router Dynamic Routes to Load Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue-Router动态路由加载数据
- en: In Chapter 8, *Introducing Vue-Router and Loading URL-Based Components*, we
    explored Vue-router and its capabilities and functionality. With that knowledge,
    we can now progress on to making our shop with Vue. Before we jump into the code
    and start creating, we should first plan how our shop is going to work, what URLs
    we need, and what components we need to make. Once we've planned our app we can
    move on to creating a product page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第8章《介绍Vue-Router和加载基于URL的组件》中，我们探索了Vue-router及其功能和功能。有了这些知识，我们现在可以继续使用Vue制作我们的商店。在我们进入代码并开始创建之前，我们应该首先计划我们的商店将如何工作，我们需要哪些URL以及我们需要制作哪些组件。一旦我们计划好我们的应用程序，我们就可以继续创建一个产品页面。
- en: 'In this chapter, we are going to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Outline our components and routes, and create placeholder files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概述我们的组件和路由，并创建占位符文件
- en: Load a product CSV file, process it, and cache in Vuex
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载产品CSV文件，处理并缓存在Vuex中
- en: Create an individual product page with images and product variations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个带有图像和产品变体的单独产品页面
- en: Outline and plan your app
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述和计划您的应用程序
- en: First, let's think about the overall app and the user flow.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们考虑整个应用程序和用户流程。
- en: We are going to be creating a shop without a payment processing gateway. The
    shop homepage will display a hand-picked list of products. The user will be able
    to browse the products using categories and narrow down the selection using filters
    we've made. They will be able to select a product and view more details about
    it. The product will have variations (size, color, and such) and may have several
    product images. The user will be able to add a variation to their basket. From
    there, they can either continue browsing the products and add more to their basket,
    or proceed to checkout, where they will be asked for their name and address, and
    to pay. An order confirmation screen will be shown.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个没有支付处理网关的商店。商店首页将显示一系列精选产品。用户将能够使用类别浏览产品，并使用我们制作的筛选器缩小选择范围。他们将能够选择一个产品并查看更多详细信息。产品将具有变体（大小、颜色等），并且可能有多个产品图像。用户将能够将变体添加到购物篮中。从那里，他们可以继续浏览产品并添加更多产品到购物篮中，或者进入结账流程，在那里他们将被要求提供姓名和地址，并进行支付。将显示订单确认屏幕。
- en: The whole shop app will be created in Vue and will run client-side. This will
    not cover any server-side code needed for payment, user accounts, stock management,
    or validation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 整个商店应用程序将在Vue中创建并在客户端运行。这不涵盖任何用于付款、用户帐户、库存管理或验证的服务器端代码。
- en: The app will use Vue-router for handling URLs and Vuex for storing products,
    basket contents, and user details.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序将使用Vue-router处理URL和Vuex存储产品、购物篮内容和用户详细信息。
- en: Components
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: With a user flow outlined, we need to plan which components we need to make
    for our shop and what they will be called. This helps with developing the app,
    as we have a clear idea of what components we need to create.  We will also decide
    on the component names. Following the Vue style guide ([https://vuejs.org/v2/style-guide/index.html](https://vuejs.org/v2/style-guide/index.html)),
    all our components will consist of two names.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定用户流程后，我们需要计划我们的商店需要制作哪些组件以及它们的名称。这有助于开发应用程序，因为我们清楚地知道需要创建哪些组件。我们还将决定组件的名称。根据Vue风格指南（[https://vuejs.org/v2/style-guide/index.html](https://vuejs.org/v2/style-guide/index.html)），我们的所有组件都将由两个名称组成。
- en: Route components
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由组件
- en: 'The following components will be used in conjunction with Vue-router to form
    the pages for our app:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下组件将与Vue-router一起使用，形成我们应用程序的页面：
- en: '**Shop homepage**—`HomePage`: The shop homepage will display a list of products
    that are curated by the shop owner. This will use a pre-selected list of product
    handles to display.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商店首页**—`HomePage`：商店首页将显示由商店所有者精选的产品列表。这将使用预先选择的产品句柄列表进行显示。'
- en: '**Category page**—`CategoryPage`: This will list the products from a specific
    category. The category listing page will also have filters.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分类页面**—`CategoryPage`：这将列出特定类别的产品。类别列表页面还将具有过滤器。'
- en: '**Product page**—`ProductPage`: The product page will display product details,
    images, and variations of the product.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品页面**—`ProductPage`：产品页面将显示产品的详细信息、图片和产品的变体。'
- en: '**Basket**—`OrderBasket`: In the basket, the user will be able to review the
    products they''ve added, remove unwanted items, and alter the quantity of each
    item. It will also show the overall cost of the order.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**购物篮**—`OrderBasket`：在购物篮中，用户可以查看已添加的产品，删除不需要的项目，并更改每个项目的数量。它还将显示订单的总成本。'
- en: '**Checkout**—`OrderCheckout`: The checkout will lock down the basket – taking
    away the ability to remove and update products, and will have a form for the user
    to enter their address.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结账**—`OrderCheckout`：结账将锁定购物篮，禁止删除和更新产品，并提供一个表单供用户输入地址。'
- en: '**Order confirmation**—`OrderConfirmation`: This component will be displayed
    after the order has been placed, confirming the products purchased, the delivery
    address, and the total price.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订单确认**—`OrderConfirmation`：下单后将显示此组件，确认购买的产品、交付地址和总价格。'
- en: '`404` **page**—`PageNotFound`: An error page when an incorrect URL is entered.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`404` **页面**—`PageNotFound`：当输入错误的URL时显示的错误页面。'
- en: HTML components
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML组件
- en: 'The HTML components will be used within the page components to help reduce
    repetition in our code for recurring layouts:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: HTML组件将在页面组件中使用，以帮助减少我们的代码中的重复布局。
- en: '**Product in a list**—`ListProducts`: This will display a paginated list of
    products when viewing in a list view – such as in the `HomePage` or `CategoryPage`
    components.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品列表**—`ListProducts`：在列表视图中查看时，将显示产品的分页列表，例如在`HomePage`或`CategoryPage`组件中。'
- en: '**Category listing**—`ListCategories`: This will create a list of categories
    for navigation.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别列表**—`ListCategories`：这将创建一个用于导航的类别列表。'
- en: '**List of Purchases**—`ListPurchases`: This component will appear in the basket,
    checkout, and order confirmation page; it will list the products in a table form
    – detailing the variation, price, and quantity. It will also feature the total
    price of all the products in the basket.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**购买列表**—`ListPurchases`：此组件将出现在购物篮、结账和订单确认页面中；它将以表格形式列出产品的变体、价格和数量。它还将显示购物篮中所有产品的总价格。'
- en: '**Filtering**—`ProductFiltering`: A component used on the side of a category
    page will offer the user the ability to filter and will update the URL, using
    the GET parameters we covered in [Chapter 8](https://cdp.packtpub.com/vue_js_by_example/wp-admin/post.php?post=103&action=edit#post_93), *Introducing
    Vue-Router and Loading URL-Based Components.*'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤**—`ProductFiltering`：在类别页面的侧边使用的组件将提供用户过滤的能力，并且将使用我们在[第8章](https://cdp.packtpub.com/vue_js_by_example/wp-admin/post.php?post=103&action=edit#post_93)中介绍的GET参数更新URL，*介绍Vue-Router和加载基于URL的组件*。'
- en: Paths
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路径
- en: 'With our components outlined, we can plan the paths and URLs to our shop, and
    which components or actions they are going to take. We also need to consider erroneous
    URLs and whether we should redirect the user to a suitable place or display an
    error message:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们概述了组件之后，我们可以规划商店的路径和URL，以及它们将采取的组件或操作。我们还需要考虑错误的URL以及是否应该将用户重定向到适当的位置或显示错误消息：
- en: '`/`: `Home`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/`：`Home`'
- en: '`/category/:slug`: `CategoryPage`, using the `:slug` unique identifier to identify
    which products to show'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/category/:slug`：`CategoryPage`，使用`:slug`唯一标识符来确定要显示的产品'
- en: '`/category`: This will redirect to `/`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/category`：这将重定向到`/`'
- en: '`/product/:slug`: `ProductPage` – once again, using the `:slug` to identify
    the product'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/product/:slug`：`ProductPage` - 再次使用`:slug`来标识产品'
- en: '`/product`: This will redirect to `/`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/product`：这将重定向到`/`'
- en: '`/basket`: `OrderBasket`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/basket`：`OrderBasket`'
- en: '`/checkout`: `OrderCheckout` – if there are no products, however, it will redirect
    the user to `/basket`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/checkout`：`OrderCheckout` - 如果没有产品，它将重定向用户到`/basket`'
- en: '`/complete`: `OrderConfirmation` – if the user did not come from the `OrderCheckout`
    component, then they will be redirected to ``/basket``'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/complete`：`OrderConfirmation` - 如果用户没有从`OrderCheckout`组件进入，则会重定向到`/basket`'
- en: '`*`: `PageNotFound` – this will catch any unspecified routes'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`：`PageNotFound` - 这将捕获任何未指定的路由'
- en: With our routes and components decided upon, we can begin to create our app.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们确定了路由和组件，我们可以开始创建我们的应用程序。
- en: Create initial files
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建初始文件
- en: With the app outlined in the preceding section, we can create the skeletons
    for our file structure and components. With this app being a large-scale app,
    we are going to split our files into individual files for each component. This
    means our files are much more manageable and our main app JavaScript file does
    not grow out of control.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中概述的应用程序中，我们可以为文件结构和组件创建框架。由于这个应用程序是一个大型应用程序，我们将把文件拆分为每个组件的单独文件。这意味着我们的文件更易管理，我们的主应用程序JavaScript文件不会变得无法控制。
- en: Although acceptable for development, deploying an app with this number of files
    could potentially increase your load times depending on how your server is set
    up. With the traditional HTTP/1.1, browsers have to request and load each file
    – which is a hindrance if there are multiple files. However, with HTTP/2, you
    are able to push several files to the user at the same time – in which case, multiple
    files can somewhat improve the performance of your app.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在开发过程中可以接受，但是部署具有这么多文件的应用程序可能会增加加载时间，这取决于服务器的设置方式。使用传统的HTTP/1.1，浏览器必须请求和加载每个文件
    - 如果有多个文件，这将是一个阻碍。然而，使用HTTP/2，您可以同时向用户推送多个文件 - 在这种情况下，多个文件可以在一定程度上提高应用程序的性能。
- en: 'Whichever method you choose to use with your deployment, it is highly advised
    you minify your JavaScript when deploying the code to a production environment.
    This ensures your code is as small as possible when being served up to your user:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择使用哪种部署方法，强烈建议在将代码部署到生产环境时对JavaScript进行缩小。这样可以确保在为用户提供服务时，代码尽可能小：
- en: '![](assets/f936b8d6-368f-45a4-92c7-4d7b63d1104d.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f936b8d6-368f-45a4-92c7-4d7b63d1104d.png)'
- en: Create a file for each component, view, and library, such as Vue, Vuex, and
    Vue-router. Then, create a folder for each type of file. Finally, add an `app.js`—which
    is where the libraries will be initialized.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个组件、视图和库（如Vue、Vuex和Vue-router）创建一个文件。然后，为每种类型的文件创建一个文件夹。最后，添加一个`app.js` -
    这是初始化库的地方。
- en: You may also consider using the vue-cli [(https://github.com/vuejs/vue-cli)](https://github.com/vuejs/vue-cli)
    for building your app. Beyond the scope of this book, as we only cover building
    a Vue app using the included JavaScript files, the vue-cli application allows
    you to develop your app in a more modular way and, once developed, deploy it in
    a similar fashion to how we have been developing the app.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以考虑使用vue-cli [(https://github.com/vuejs/vue-cli)](https://github.com/vuejs/vue-cli)来构建您的应用程序。超出了本书的范围，因为我们只涵盖了使用包含的JavaScript文件构建Vue应用程序，vue-cli应用程序允许您以更模块化的方式开发应用程序，并在开发完成后以类似我们一直在开发应用程序的方式部署它。
- en: 'Create an `index.html` and include your JavaScript files, ensuring Vue is loaded
    first and your app''s JavaScript last. Add a container for your app to form the
    view of our shop:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`index.html`文件，并包含您的JavaScript文件，确保首先加载Vue，最后加载您的应用程序的JavaScript。添加一个容器来形成我们商店的视图：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Ensure the `PageNotFound` component is loaded first, as we are going to be utilizing
    it within other components, as well as specifying it as the 404 page in our routes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 确保首先加载`PageNotFound`组件，因为我们将在其他组件中使用它，并将其指定为我们的404页面。
- en: Within each file, initialize the type of component it's going to be by either
    declaring a variable or using `Vue.component`. For the views, add a `name` attribute
    too – to help with debugging later on.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个文件中，通过声明变量或使用`Vue.component`来初始化组件的类型。对于视图，还要添加一个`name`属性，以便以后调试时使用。
- en: 'For example, all of the files located in the `js/components/` folder should
    be initialized like the following. Make sure these components are lowercase and
    are hyphenated:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，位于`js/components/`文件夹中的所有文件应该像下面这样初始化。确保这些组件是小写的，并且使用连字符分隔：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Whereas the components for the routes and views, located in `js/views`, should
    look like the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 而位于`js/views`中的路由和视图组件应该如下所示：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The last step is to initialize our Vuex store, Vue-router, and Vue application.
    Open `app.js` and initialize the libraries:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是初始化我们的Vuex存储、Vue-router和Vue应用程序。打开`app.js`并初始化这些库：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With the Vue components and routes ready to go, our store, route, and app initialized,
    let's look at setting up a server (if required) and loading in data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好Vue组件和路由，初始化我们的存储、路由和应用程序后，让我们来看看如何设置服务器（如果需要）并加载数据。
- en: Server setup
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器设置
- en: With our shop, we are going to be loading in a CSV of products on page load.
    This will simulate gathering stock and product data from a database or API from
    a point-of-sale system, something online shops with a physical shop might have
    to deal with.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的商店中，我们将在页面加载时加载一个产品的CSV文件。这将模拟从数据库或API中收集库存和产品数据的过程，这是在线商店与实体店可能需要处理的事情。
- en: In a similar way to our Dropbox app earlier in the book, we will be loading
    external data and saving it into the Vuex store. The issue we will face, however,
    is when loading a resource via JavaScript; the browsers demand the protocol for
    the file being requested is via HTTP, HTTPS, or is a CORS request.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书前面的Dropbox应用程序类似，我们将加载外部数据并将其保存到Vuex存储中。然而，我们将面临一个问题，即在通过JavaScript加载资源时，浏览器要求请求的文件的协议必须是HTTP、HTTPS或CORS请求。
- en: This means that we are unable to load a *local* file using the `fetch()` technique
    we used with the Dropbox API as, when viewing our app in the browser, we are loading
    local assets over the `file://` protocol.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们无法使用我们在Dropbox API中使用的`fetch()`技术来加载*本地*文件，因为在浏览器中查看我们的应用程序时，我们是通过`file://`协议加载本地资源的。
- en: 'We can resolve this issue in a few different ways – which one you choose depends
    on your circumstance. We are going to be loading a CSV file and, using two plugins,
    converting it into a useable JSON object. The three options you have are:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过几种不同的方式解决这个问题-你选择哪种方式取决于你的情况。我们将加载一个CSV文件，并使用两个插件将其转换为可用的JSON对象。你有三个选项：
- en: Storing the file locally
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件存储在本地
- en: Using a remote server or
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用远程服务器或
- en: Using a local server
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用本地服务器
- en: Let's run through each option, with the advantages and disadvantages for each.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个讨论每个选项的优缺点。
- en: Storing the file locally
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将文件存储在本地
- en: 'The first option is to convert the CSV to JSON appropriately once, and then
    save the output in a file. You''ll need to assign it to a variable in the file
    and load the JSON before your libraries. An example might be creating a `data.json`
    and updating it to be assigned to a variable:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种选择是将CSV适当地转换为JSON，然后将输出保存在文件中。您需要将其分配给文件中的变量，并在加载库之前加载JSON。一个示例可能是创建一个`data.json`并将其更新为分配给变量：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can then load the JSON file in your HTML:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以在您的HTML中加载JSON文件：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You then have the `products` variable available to you in your `app.js`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在您的`app.js`中可以使用`products`变量。
- en: 'Advantages:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 优点：
- en: Less load in your code
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码负载较少
- en: No need to load the extra files required for processing the CSV
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需加载处理CSV所需的额外文件
- en: No extra steps required
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要额外的步骤
- en: 'Disadvantages:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点：
- en: Does not simulate the real world
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法模拟真实世界
- en: If you want to update the CSV data, you need to convert, save, and assign to
    a variable
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果要更新CSV数据，需要进行转换、保存并分配给变量
- en: Using a remote server
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用远程服务器
- en: Another option is to upload the files to a remote, existing server and develop
    your app there.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是将文件上传到远程现有服务器并在那里开发您的应用程序。
- en: 'Advantages:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 优点：
- en: Simulates real-world development of loading CSV
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟真实世界中加载CSV的开发
- en: Can be developed anywhere, with any machine
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在任何地方、任何机器上开发
- en: 'Disadvantages:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点：
- en: Can be slow
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会很慢
- en: Needs to be connected to the internet
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要连接到互联网
- en: Needs to either set up a deployment process or edit files on a live server
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要设置部署过程或在实时服务器上编辑文件
- en: Setting up local server
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置本地服务器
- en: The last option is to set up a local server on your machine. There are several
    small, lightweight, zero configuration modules, and applications, or there are
    bigger, beefier applications too. If you have npm installed on your machine, the
    node HTTP server is recommended. If not, there are other options available.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种选择是在您的计算机上设置本地服务器。有几个小型、轻量级、零配置模块和应用程序，也有更大、更强大的应用程序。如果您的计算机上安装了npm，则建议使用Node
    HTTP服务器。如果没有，还有其他选项可用。
- en: The other option would be to use a more heavyweight application, which can provide
    you with an SQL database and the ability to run PHP applications. An example of
    this would be MAMP or XAMPP.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是使用更重量级的应用程序，它可以为您提供SQL数据库和运行PHP应用程序的能力。这种情况的一个例子是MAMP或XAMPP。
- en: 'Advantages:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 优点：
- en: Simulates real-world development of loading CSV
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟真实世界中加载CSV的开发
- en: Quick, instant updates
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速、即时更新
- en: Can be developed offline
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以离线开发
- en: 'Disadvantages:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点：
- en: Requires installing software
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要安装软件
- en: May require some configuration and/or command-line knowledge
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能需要一些配置和/或命令行知识
- en: The option we are going to choose is the last one, using an HTTP server. Let's
    load and process the CSV so we can start creating our shop.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将选择的选项是使用HTTP服务器。让我们加载和处理CSV文件，以便开始创建我们的商店。
- en: Loading CSV
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载CSV
- en: 'To simulate gathering data from a shop database or point-of-sale, our app is
    going to load product data from a CSV. CSV, or Comma Separated Values, is a file
    format often used for sharing data in a database-style way. Think of how you would
    lay out a list of products in excel or numbers: that is how a CSV file is formatted.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟从商店数据库或销售点收集数据，我们的应用程序将从CSV加载产品数据。CSV（逗号分隔值）是一种常用的文件格式，用于以数据库样式的方式共享数据。想象一下如何在Excel或Numbers中布置产品列表：这就是CSV文件的格式。
- en: This next step is going to require downloading and including a couple more JavaScript
    files. If you chose option 1 in the *Server setup* section – to have your files
    stored in a JSON file locally – you can skip this step.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步需要下载并包含几个JavaScript文件。如果您在“服务器设置”部分选择了选项1-将文件存储在本地的JSON文件中-则可以跳过此步骤。
- en: The data we're going to be using is example shop data from Shopify. These CSVs
    have a wide selection of product types and different data, which will test our
    Vue skills. Shopify has made their example data available for download from a
    GitHub repository ([https://github.com/shopifypartners/shopify-product-csvs-and-images](https://github.com/shopifypartners/shopify-product-csvs-and-images)).
    Download any CSV file that takes your interest and save it in a `data/` folder
    in your file system. For this app, I will be using the `bicycles.csv` file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Shopify的示例商店数据。这些CSV文件有各种产品类型和不同的数据，这将测试我们的Vue技能。Shopify已经将他们的示例数据放在了一个GitHub仓库中（[https://github.com/shopifypartners/shopify-product-csvs-and-images](https://github.com/shopifypartners/shopify-product-csvs-and-images)）。下载任何你感兴趣的CSV文件，并将其保存在你的文件系统中的`data/`文件夹中。对于这个应用程序，我将使用`bicycles.csv`文件。
- en: JavaScript cannot natively load and process CSV files without a significant
    amount of coding and processing of comma-separated and quote-encapsulated values.
    To save this book digressing into how to load, parse, and process CSV files, we
    are going to use a library to do the heavy lifting for us. There are two noteworthy
    libraries, CSV Parser ([https://github.com/okfn/csv.js](https://github.com/okfn/csv.js))
    and d3 ([https://d3js.org/](https://d3js.org/)). CSV Parser simply does CSV parsing
    and nothing else, while d3 has the ability to generate charts and data visualizations.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript不能本地加载和处理CSV文件，除非进行大量的编码和处理逗号分隔和引号封装的值。为了避免本书偏离主题，介绍如何加载、解析和处理CSV文件，我们将使用一个库来完成这些繁重的工作。有两个值得注意的库，CSV解析器（[https://github.com/okfn/csv.js](https://github.com/okfn/csv.js)）和d3（[https://d3js.org/](https://d3js.org/)）。CSV解析器只做CSV解析，而d3有生成图表和数据可视化的能力。
- en: It is worth considering which one suits you best; CSV Parser only adds just
    over 3 KB of weight to your app, whereas d3 is around 60 KB. Unless you anticipate
    adding visualizations later, it is recommended you go to the smaller library –
    especially as they execute the same function. However, we'll run through examples
    for both libraries.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 值得考虑哪个适合你；CSV解析器只会给你的应用程序增加3KB多的负担，而d3大约是60KB。除非你预计以后会添加可视化效果，否则建议你选择更小的库-尤其是它们执行相同的功能。然而，我们将为两个库运行示例。
- en: We want to load our product data when the app loads, so our CSV will be loaded
    and parsed by the time our components require the data. Because of this, we will
    be loading our data in the `created()` method of Vue.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在应用程序加载时加载我们的产品数据，这样我们的组件在需要数据时就可以加载和解析CSV。因此，我们将在Vue的`created()`方法中加载数据。
- en: Loading a CSV with d3
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用d3加载CSV
- en: Both plugins load the data in a very similar way, but the data returned varies
    somewhat – however, we'll deal with that once we have loaded our data.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个插件以非常相似的方式加载数据，但返回的数据有所不同-然而，我们将在加载数据后处理这个问题。
- en: 'Load the d3 library – if you want to try it out, you can use the hosted version:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 加载d3库-如果你想尝试一下，你可以使用托管的版本：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Using d3, we use a function on the `d3` object of `csv()`, which accepts one
    parameter – the path to the CSV file. Add the `created()` function to your Vue
    instance and initialize the CSV loader:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用d3，我们使用`d3`对象上的`csv()`函数，它接受一个参数-CSV文件的路径。将`created()`函数添加到你的Vue实例中，并初始化CSV加载器：
- en: '[PRE7]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember the path to your file is relative to the HTML file which is including
    your JavaScript file – in this case, `index.html`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，文件的路径是相对于包含JavaScript文件的HTML文件的路径-在这种情况下是`index.html`。
- en: 'Opening the file in your browser will not render any output. However, if you
    open the Javascript console and expand the object being output, you will see something
    similar to this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开文件不会显示任何输出。然而，如果你打开Javascript控制台并展开输出的对象，你会看到类似于这样的内容：
- en: '![](assets/c4cf6826-0321-44d9-a5f2-d14f3a370b05.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c4cf6826-0321-44d9-a5f2-d14f3a370b05.png)'
- en: 'This gives you a breakdown of all of the properties available on each product
    in a `key: value` format. This allows us to access each `value` in red, using
    a consistent `key` found on each product. For example, if we wanted `15mm-combo-wrench`
    from the product above, we could use the `Handle` key. More on this will be covered
    later'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '这将以`key: value`的格式为每个产品提供所有可用属性的详细信息。这使我们可以使用每个产品上的一致的`key`来访问每个`value`。例如，如果我们想要获取上面产品的`15mm-combo-wrench`，我们可以使用`Handle`键。稍后将详细介绍这个。'
- en: Loading a CSV with CSV Parser
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSV解析器加载CSV文件
- en: 'CSV Parser works in a slightly different way, in that it can accept many different
    parameters and the library contains several different methods and functions. The
    data output is also in a different format, providing a table/CSV style structure
    in return, with a `headers` and `fields` object:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: CSV解析器的工作方式略有不同，它可以接受许多不同的参数，并且库包含几种不同的方法和函数。数据输出也是以不同的格式，以表格/CSV样式的结构返回，包含`headers`和`fields`对象：
- en: '[PRE8]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Viewing the output this time will reveal a much different structure and will
    require matching up the `key` of the fields, with the index of the `headers` object.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这次查看输出将显示一个非常不同的结构，并需要将字段的`key`与`headers`对象的索引进行匹配。
- en: Unifying Shopify CSV data
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统一Shopify CSV数据
- en: Before we can save and utilize the Shopify data, we need to unify the data and
    manipulate it into a more manageable state. If you inspect the data being output
    by either library, you will notice there is an entry for each variation or additional
    image of a product, with the handle being the linking factor between each entry.
    For example, there are around 12 entries with the handle of `pure-fix-bar-tape`,
    each one a different color. Ideally, we would like each variation grouped under
    the same item, also showing the images as a list of one product.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存和使用Shopify数据之前，我们需要统一数据并将其转换为更易处理的状态。如果检查任一库输出的数据，您会注意到每个变体或产品的附加图像都有一个条目，而链接因子是handle。例如，有大约12个handle为`pure-fix-bar-tape`的条目，每个条目都是不同的颜色。理想情况下，我们希望将每个变体分组到同一项下，并将图像显示为一个产品的列表。
- en: The other issue with the Shopify CSV data is that the punctuation and grammar
    of the field headings do not make great object keys. Ideally object keys would
    be like URL slugs, lowercase and contain no spaces. For example, `Variant Inventory
    Qty` should ideally be `variant-inventory-qty`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Shopify CSV数据的另一个问题是字段标题的标点符号和语法不适合作为对象键。理想情况下，对象键应该像URL的slug一样，小写且不包含空格。例如，`Variant
    Inventory Qty`理想情况下应该是`variant-inventory-qty`。
- en: 'To save manually processing the data ourselves and updating the keys, we can
    use a Vue plugin to process the output from either loading library and return
    an object of products formatted exactly how we want. The plugin is `vue-shopify-products`
    and is available from unpkg:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免手动处理数据并更新键，我们可以使用一个Vue插件来处理加载库的输出，并返回一个格式完全符合我们要求的产品对象。该插件是`vue-shopify-products`，可以从unpkg获取：
- en: '[PRE9]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Download and include the library into your `index.html` file. The next step
    is to tell Vue to use this plugin – at the top of your `app.js` file, include
    the following line:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并将该库包含到您的`index.html`文件中。下一步是告诉Vue使用这个插件 - 在您的`app.js`文件的顶部，包含以下行：
- en: '[PRE10]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This now exposes a new method on the Vue instance of `$formatProducts()`, which
    allows us to pass in the output of our CSV loading library and get a more useful
    collection of objects:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在Vue实例的`$formatProducts()`上暴露一个新的方法，允许我们传入CSV加载库的输出，并获得一个更有用的对象集合：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Inspecting the output now reveals a collection grouped by `handle`, with variations
    and images as objects:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在检查输出，可以看到按`handle`分组的集合，其中变体和图像作为对象：
- en: '![](assets/3796f088-bf51-4dfc-a9cb-d0d895d0e2a0.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3796f088-bf51-4dfc-a9cb-d0d895d0e2a0.png)'
- en: With our products grouped more effectively, we can proceed with storing and
    recalling as desired.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更有效地分组我们的产品，我们可以按需存储和调用。
- en: Storing the products
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储产品
- en: Once we have retrieved and formatted the CSV data, we can cache the contents
    in the Vuex store. This will be done via a simple mutation that takes a payload
    and stores it without any modifications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们检索和格式化了CSV数据，我们就可以将内容缓存到Vuex store中。这将通过一个简单的mutation来完成，该mutation接受一个payload并将其存储在不进行任何修改的情况下。
- en: 'Create a `state` and `mutations` object in your store. Add a key of `products` as
    an object in the `state`, and create a function in the `mutations` object, also
    titled `products`. The mutation should accept two parameters – the state and a
    payload:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的store中创建一个`state`和`mutations`对象。在`state`中添加一个`products`键作为一个对象，并在`mutations`对象中创建一个名为`products`的函数。该mutation应该接受两个参数
    - state和payload：
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Update the `state.products` object to the contents of the `payload`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`state.products`对象为`payload`的内容：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Replace the `console.log` in the main Vue instance with a commit function,
    calling the new mutation and passing in the formatted product data:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 用一个commit函数替换主Vue实例中的`console.log`，调用新的mutation并传入格式化的产品数据：
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This can be reduced somewhat, by passing the `$formatProducts` function directly
    into the store `commit()` function, rather than storing it as a variable:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过直接将`$formatProducts`函数传递给store的`commit()`函数来减少一些代码，而不是将其存储为一个变量：
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Displaying a single product
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示单个产品
- en: With our data stored, we can now begin making our components and displaying
    content on the frontend. We're going to start by making a product view – displaying
    product details, variations, and images. We'll move on to creating the category listing
    page in Chapter 10, *Building an E-Commerce Store – Browsing Products*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的数据已经存储好了，我们可以开始制作组件并在前端显示内容了。我们将从制作产品视图开始 - 显示产品详情、变体和图片。接下来我们将在第10章中创建分类列表页面，*构建电子商务商店
    - 浏览产品*。
- en: The first step in making our product view is to create the route, to allow the
    component to be displayed via a URL. Referring back to our notes at the beginning
    of the chapter, the product component is to be loaded on the `/product/:slug`
    path.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 创建产品视图的第一步是创建路由，以允许通过URL显示组件。回顾一下本章开头的笔记，产品组件将加载在`/product/:slug`路径上。
- en: 'Create a `routes` array in your Vue-router, with the path and component specified:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Vue-router中创建一个`routes`数组，指定路径和组件：
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With the layout of the `products` object explained, we can start to understand
    how the route and products link. We will pass the handle of the product into the
    URL. This will select the product with that handle and display the data. This
    means we do not need to explicitly link `slug` with `products`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解释`products`对象的布局，我们可以开始理解路由和产品之间的关联。我们将把产品的句柄传递到URL中。这将选择具有该句柄的产品并显示数据。这意味着我们不需要显式地将`slug`与`products`关联起来。
- en: Page Not Found
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面未找到
- en: With our first route created, we should also create our `PageNotFound` route,
    to catch any URLs that are non-existent. We can also redirect to this page when
    there is no product that matches.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 创建第一个路由后，我们还应该创建我们的`PageNotFound`路由，以捕获任何不存在的URL。当没有与之匹配的产品时，我们也可以重定向到此页面。
- en: We're going to create the `PageNotFound` component in a slightly different way
    than we did before. Rather than having the component on `*`, we're going to create
    a `/404` path as a named route. This allows us to alias and redirect several different
    routes as required.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以稍微不同的方式创建`PageNotFound`组件。我们将创建一个`/404`路径作为一个命名路由，而不是将组件放在`*`上。这样可以根据需要对多个不同的路由进行别名和重定向。
- en: Add a new object to the routes array, with  `/404` as the path, the `PageNotFound`
    component as the specified component. Add a name to your route, so we can utilize
    if required, and lastly, add an `alias` attribute, which contains our global,
    catchall route.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 向路由数组添加一个新对象，将`/404`作为路径，将`PageNotFound`组件作为指定的组件。为您的路由添加一个名称，以便在需要时使用，并最后添加一个`alias`属性，其中包含我们的全局捕获所有路由。
- en: 'Don''t forget to put this *at the end* of the routes array – to catch any previously
    unspecified route. When adding new routes, always remember to put them before
    the `PageNotFound` route:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将此放在路由数组的末尾，以捕获任何先前未指定的路由。添加新路由时，始终记得将它们放在`PageNotFound`路由之前：
- en: '[PRE17]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add a template to your `PageNotFound` component. For now, give it some basic
    content – we can improve it later, once we have the rest of our app set out:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的`PageNotFound`组件添加一个模板。现在，给它一些基本内容 - 一旦我们设置好应用程序的其余部分，我们可以稍后改进它：
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Note the use of the router link in the content. The last thing we need to do
    to get our app started is to add the `<router-view>` element inside our app. Head
    to the view, and include it in the app space:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 注意内容中使用的路由链接。让我们启动应用程序的最后一件事是在我们的应用程序中添加`<router-view>`元素。转到视图，并将其包含在应用程序空间中：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Load up the app in your browser, not forgetting to start the HTTP server if
    required. You should be, at first, presented with your `PageNotFound` component
    contents. Navigating to the following product URL should result in a JavaScript
    error instead of the `404` page. This shows the route is correctly picking up
    the URL but the error is because our `ProductPage` component does not contain
    a template:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中加载应用程序，不要忘记在需要时启动HTTP服务器。首先，您应该看到`PageNotFound`组件的内容。导航到以下产品URL应该导致JavaScript错误，而不是`404`页面。这表明路由正确地捕获了URL，但错误是因为我们的`ProductPage`组件不包含模板：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you are presented with the `PageNotFound` component, check your route's code,
    as it means the `ProductPage` route is not being picked up.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到`PageNotFound`组件，请检查您的路由代码，因为这意味着`ProductPage`路由没有被捕获。
- en: Selecting the right product
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择正确的产品
- en: 'With our initial routes set up, we can now proceed with loading the desired
    product and displaying the information from the store. Open `views/Product.js`
    and create a template key. To begin with, create a simple `<div>` container that
    displays the title of the product:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 设置初始路由后，我们现在可以继续加载所需的产品并显示存储中的信息。打开`views/Product.js`并创建一个模板键。首先，创建一个简单的`<div>`容器，显示产品的标题：
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Viewing this in the browser will instantly throw a JavaScript error as Vue is
    expecting the `product` variable to be an object – but it is currently undefined
    as we have yet to declare it. Although the fix for this seems fairly simple at
    the moment, we need to consider the case where the product is not yet defined.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看此内容将立即引发JavaScript错误，因为Vue期望`product`变量是一个对象 - 但由于我们尚未声明它，它目前是未定义的。尽管此问题的修复目前似乎非常简单，但我们需要考虑产品尚未定义的情况。
- en: Our shop app loads the data CSV asynchronously. This means that the execution
    of the rest of the app does not stop while the products are being loaded. Overall,
    this increases the speed of our app at the moment we have the products, we can
    start manipulating and displaying the list, without waiting for the rest of the
    app to start.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的商店应用程序异步加载数据CSV。这意味着在产品加载时，应用程序的其余部分不会停止执行。总体而言，这增加了我们应用程序的速度，一旦我们有了产品，我们就可以开始操作和显示列表，而不需要等待应用程序的其余部分启动。
- en: Because of this, there is a distinct possibility that the user could visit the
    product details page, be it from a link that was shared or a search result, without
    the product list being loaded. To prevent the app trying to display the product
    data without being fully initialized, add a conditional attribute to the template
    to check if the product variable exists before trying to display any of its attributes.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有可能用户在没有加载产品列表的情况下访问产品详情页面，无论是通过共享的链接还是搜索结果。为了防止应用程序在没有完全初始化的情况下尝试显示产品数据，可以在模板中添加一个条件属性，检查产品变量是否存在，然后再尝试显示其任何属性。
- en: 'When loading our product data, we can then ensure the product variable is set
    to `false`, until everything is fully loaded. Add the `v-if` attribute to the
    containing element in your template:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载产品数据时，可以确保产品变量设置为`false`，直到所有内容都加载完成。在模板中的包含元素上添加`v-if`属性：
- en: '[PRE22]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We can now start loading the correct product from the store and assign it to
    a variable.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从存储中加载正确的产品并将其赋值给一个变量。
- en: 'Create a `computed` object with a `product()` function inside. Within that,
    create a blank variable of the product, and return it afterward. This now defaults
    to returning `false`, which means our template will not generate the `<div>`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个带有`product()`函数的`computed`对象。在函数内部，创建一个空的变量来存储产品，并在之后返回它。现在默认返回`false`，这意味着我们的模板不会生成`<div>`标签：
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Selecting the product is now a fairly simple procedure, thanks to our helpfully-formatted
    product store and the `slug` variable, available to us within the `Product` component.
    The `products` object in the store is formatted with the handle as the key and
    the `product details` object as the value. With this in mind, we can select the
    desired product using the square bracket format. For example:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有格式良好的产品存储和可在`Product`组件中使用的`slug`变量的帮助，选择产品现在变得相当简单。存储中的`products`对象以句柄作为键，以`product
    details`对象作为值进行格式化。有了这个想法，我们可以使用方括号格式来选择所需的产品。例如：
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Using the router `params` object, load the desired product from the store and
    assign it to the `product` variable to be returned:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用路由器的`params`对象，从存储中加载所需的产品并将其赋值给`product`变量以返回：
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The reason we don't assign the value of `product` straightaway is so we can
    add some conditional statements. To ensure we are only loading the product if
    the store has the data available, we can add an `if()` statement to make sure
    the product's object has keys available; in other words, has the data loaded?
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不直接赋值给`product`的原因是我们可以添加一些条件语句。为了确保只有在存储中有可用数据时才加载产品，我们可以添加一个`if()`语句来确保产品对象有可用的键；换句话说，是否已加载数据？
- en: 'Add an `if` statement checking the length of the store product keys. If they
    exist, assign the data from the store to the `product` variable to be returned:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个`if`语句来检查存储产品键的长度。如果它们存在，则将存储中的数据赋值给`product`变量以返回。
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Viewing the app in the browser now, you will be presented with the title of
    the product – once the data has loaded. This should only take a split second to
    load and should be gracefully handled by our `if` statement.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在浏览器中查看应用程序，一旦数据加载完成，您将看到产品的标题。这应该只需要一瞬间就能加载完成，并且应该由我们的`if`语句优雅地处理。
- en: Before proceeding with displaying all our product data, we need to handle the
    situation where a product does not exist with the handle in the URL. Because our
    `ProductPage` route is picking up anything after `/product` in the URL, the `PageNotFound`
    wildcard path will not be able to be used – as it is our `ProductPage` component
    that is loading the data and determining whether the product exists.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续显示所有产品数据之前，我们需要处理URL中不存在产品句柄的情况。因为我们的`ProductPage`路由会捕捉URL中`/product`之后的任何内容，所以无法使用`PageNotFound`通配符路径
    - 因为我们的`ProductPage`组件正在加载数据并确定产品是否存在。
- en: Catching products not found
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕捉找不到的产品
- en: In order to show the `PageNotFound` page when a product is not available, we
    are going to load the component with our `ProductPage` component and display it
    conditionally.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在产品不可用时显示`PageNotFound`页面，我们将使用我们的`ProductPage`组件加载组件并有条件地显示它。
- en: To do this, we need to register the component so we can use it in our template.
    We need to register it since our `PageNotFound` component currently lives as an
    object and not a Vue component (for example, when we use `Vue.component`).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要注册组件，以便在模板中使用它。我们需要注册它，因为我们的`PageNotFound`组件当前是一个对象，而不是一个Vue组件（例如，当我们使用`Vue.component`时）。
- en: 'Add a `components` object to your `ProductPage` component and include `PageNotFound`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ProductPage`组件中添加一个`components`对象，并包含`PageNotFound`：
- en: '[PRE27]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This now gives us a new HTML element to use in the form of `<page-not-found>`.
    Add this element to your template after the existing `<div>`. As our templates
    need a single root element, wrap both of them in an extra container:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了一个新的HTML元素可以在模板中使用，即`<page-not-found>`。在现有的`<div>`之后，在模板中添加此元素。由于我们的模板需要一个根元素，所以将它们都包装在一个额外的容器中：
- en: '[PRE28]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Viewing this in the browser will render the `404`page template and, once the
    data has loaded, the product title above that. We now need to update the component
    to only show the `PageNotFound` component when there is no data to show. We could
    use the existing product variable with a `v-if` attribute and, if false, show
    the error message like so:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看时，将呈现`404`页面模板，一旦数据加载完成，就会显示在其上方的产品标题。现在我们需要更新组件，只有在没有数据可显示时才显示`PageNotFound`组件。我们可以使用现有的产品变量和`v-if`属性，如果为false，则显示错误消息，如下所示：
- en: '[PRE29]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: However, this would mean that if the user visited the product page without the
    product data loading yet, they would see a flash of the 404 information before
    being replaced with the product information. This isn't a very good user experience,
    so we should only show the error if we are sure the product data has loaded and
    that there isn't a matching item.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这意味着如果用户在产品数据加载之前访问产品页面，他们会先看到404信息，然后再被替换为产品信息。这不是一个很好的用户体验，所以我们应该只在确定产品数据已加载并且没有匹配项时显示错误。
- en: 'To combat this, we will create a new variable which will determine if the component
    displays. Create a data function in the `ProductPage` component that returns an
    object with a key of `productNotFound`, set to false. Add a `v-if` condition to
    the `<page-not-found>` element, checking against the new `productNotFound` variable:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将创建一个新的变量来确定组件是否显示。在`ProductPage`组件中创建一个数据函数，返回一个键为`productNotFound`的对象，将其设置为false。在`<page-not-found>`元素中添加一个`v-if`条件，检查新的`productNotFound`变量：
- en: '[PRE30]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The last step is to set the variable to `true` if a product doesn''t exist.
    As we only want to do this once the data has loaded, add the code to the `$store.state.products`
    check. We are already assigning the data to the `product` variable, so we can
    add a check to see if this variable exists – if not, change the polarity of our
    `productNotFound` variable:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将变量设置为“true”，如果产品不存在。由于我们只想在数据加载完成后执行此操作，因此将代码添加到“$store.state.products”检查中。我们已经将数据分配给了“product”变量，因此我们可以添加一个检查以查看此变量是否存在-如果不存在，则更改我们的“productNotFound”变量的极性：
- en: '[PRE31]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Try entering an erroneous string at the end of the URL – you should be faced
    with our, now familiar, `404`error page.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在URL末尾输入一个错误的字符串-您应该看到我们现在熟悉的“404”错误页面。
- en: Displaying product information
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示产品信息
- en: With our product loading, filtering, and error-catching in place, we can proceed
    with displaying the information we need for our product. Each product could contain
    one or many images, and one or many variations and any combination in-between
    – so we need to make sure we cater for each of these scenarios.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的产品加载、过滤和错误捕捉，我们可以继续显示我们所需的产品信息。每个产品可能包含一个或多个图像，一个或多个变体以及任何组合之间的任何组合-因此我们需要确保我们为每种情况提供支持。
- en: 'To see the data available to us, add a `console.log(product)` just before the
    `return`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在“return”之前添加一个“console.log(product)”以查看我们可用的数据：
- en: '[PRE32]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Open up the JavaScript console and inspect the object that should now be there.
    Familiarize yourself with the keys and values available to you. Take note that
    the `images` key is an array and the `variations` an object, containing a string
    and a further array.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 打开JavaScript控制台并检查应该存在的对象。熟悉可用的键和值。请注意，“images”键是一个数组，而“variations”是一个对象，包含一个字符串和一个进一步的数组。
- en: Before we tackle the variations and images – let's output the simple stuff.
    What we need to remember is that every field we output might not exist on every
    product – so it's best to wrap it in conditional tags where necessary.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理变体和图像之前-让我们输出简单的内容。我们需要记住的是，我们输出的每个字段可能不会存在于每个产品上-因此最好在必要时将其包装在条件标签中。
- en: 'Output the `body`, `type`, and `vendor.title` from the product details. Prepend
    both the `vendor.title` and `type` with a description of what they are, but make
    sure you only render that text if it exists in the product details:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 从产品详细信息中输出“body”，“type”和“vendor.title”。在供应商标题和类型之前添加它们的描述，但请确保仅在产品详细信息中存在时才呈现该文本：
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Notice we've got the flexibility to prepend the type and vendor with more user-friendly
    names. Once we have our categories and filtering set up, we can link both the
    vendor and type to appropriate product listing.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以在类型和供应商之前添加更友好的名称。一旦我们设置好了我们的类别和过滤器，我们就可以将供应商和类型链接到适当的产品列表。
- en: 'Viewing this in the browser will reveal the body outputting all HTML tags as
    text – meaning we can see them on the page. If you cast your mind back to the
    beginning of the book where we were discussing output types, we need to use `v-html`
    to tell Vue to render the block as raw HTML:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看此内容将显示将所有HTML标签输出为文本-这意味着我们可以在页面上看到它们。如果你回想起我们在本书开头讨论输出类型时，我们需要使用“v-html”告诉Vue将该块呈现为原始HTML：
- en: '[PRE34]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Product images
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品图像
- en: The next step is to output the images for our product. If you are using the bicycles
    CSV file, a good product to test with is `650c-micro-wheelset` – navigate to this
    product as it has four images. Don't forget to go back to your original product
    to check that it works with one image.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是输出我们产品的图像。如果您使用的是自行车的CSV文件，则可以使用“650c-micro-wheelset”进行测试-导航到此产品，因为它有四个图像。不要忘记返回到原始产品以检查它是否适用于一个图像。
- en: The images value will always be an array, whether there is one image or 100,
    so to display them, we will always need to do a `v-for`. Add a new container and
    loop through the images. Add a width to each image so it doesn't take over your
    page.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是一个图像还是100个图像，images的值始终是一个数组，因此要显示它们，我们始终需要使用`v-for`。添加一个新的容器并循环遍历图像。为每个图像添加一个宽度，以免占用整个页面。
- en: 'The images array contains an object for each image. This has an `alt` and `source`
    key that can be input directly into your HTML. There are some instances, however,
    where the `alt` value is missing – if it is, insert the product title instead:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: images数组包含每个图像的对象。该对象具有`alt`和`source`键，可以直接输入到HTML中。然而，有些情况下`alt`值是缺失的 - 如果缺失，将产品标题插入其中：
- en: '[PRE35]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: With our images displaying, it would be a nice addition to create a gallery.
    Shops often show one big image, with a set of thumbnails underneath. Clicking
    each thumbnail then replaces the main image so the user can get a better look
    at the bigger image. Let's recreate that functionality. We also need to ensure
    we don't show the thumbnails if there is only one image.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示图像的同时，创建一个画廊会是一个不错的补充。商店通常会显示一张大图像，下面是一组缩略图。点击每个缩略图，然后替换主图像，以便用户可以更好地查看更大的图像。让我们重新创建这个功能。我们还需要确保如果只有一个图像，不显示缩略图。
- en: We do this, by setting an image variable to the first image in the images array,
    this is the one that will form the big image. If there is more than one image
    in the array, we will show the thumbnails. We will then create a click method
    that updates the image variable with the selected image.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将图像变量设置为images数组中的第一个图像来实现这一点，这是将形成大图像的图像。如果数组中有多个图像，我们将显示缩略图。然后，我们将创建一个点击方法，用选定的图像更新图像变量。
- en: 'Create a new variable in your data object and update it with the first item
    from the images array when the product has loaded. It''s good practice to ensure
    the `images` key is, in fact, an array of items before trying to assign a value:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据对象中创建一个新变量，并在产品加载完成时使用images数组的第一项进行更新。在尝试分配值之前，确保`images`键实际上是一个项目数组是一个好的做法：
- en: '[PRE36]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, update your existing images loop in your template to only display when
    there is more than one image in the array. Also, add the first image as the main
    image in your template – not forgetting to check whether it exists first:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在模板中更新现有的图像循环，只有在数组中有多个图像时才显示。还要将第一个图像添加为模板中的主图像 - 不要忘记先检查它是否存在：
- en: '[PRE37]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The last step is to add a click handler to each of the thumbnail images, to
    update the image variable when interacted with. As the images will not natively
    have the `cursor: pointer` CSS attribute, it might be worth considering adding
    this.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '最后一步是为每个缩略图像添加一个点击处理程序，以在与之交互时更新图像变量。由于图像本身不会具有`cursor: pointer`的CSS属性，因此考虑添加这个属性可能是值得的。'
- en: 'The click handler will be a method that accepts each image in the thumbnail
    loop as a parameter. On click, it will simply update the image variable with the
    object passed through:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 点击处理程序将是一个接受缩略图循环中的每个图像作为参数的方法。点击时，它将简单地使用传递的对象更新图像变量：
- en: '[PRE38]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Load the product up in your browser and try clicking on any of the thumbnails
    - you should be able to update the main image. Don't forget to validate your code
    on a product with one image or even zero images, to make sure the user isn't going
    to encounter any errors.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中加载产品，并尝试点击任何缩略图 - 您应该能够更新主图像。不要忘记在只有一个图像甚至零个图像的产品上验证您的代码，以确保用户不会遇到任何错误。
- en: Don't be afraid of whitespace and adding new lines for readability. Being able
    to easily understand your code is better than the few bytes you would have saved
    on file load. When deploying to production, files should be minified, but during
    development white space takes precedence.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 不要害怕使用空格和添加新行以提高可读性。能够轻松理解您的代码比在文件加载时节省几个字节更重要。在部署到生产环境时，文件应该被压缩，但在开发过程中，空白占据主导地位。
- en: Product variations
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品变体
- en: With this particular dataset, each of our products contains at least one variation
    but can contain several. This normally goes hand-in-hand with the number of images
    but does not always correlate. Variations can be things such as color or size.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的数据集，我们的每个产品至少包含一个变体，但可以包含多个变体。这通常与图像数量相对应，但并不总是相关的。变体可以是颜色或尺寸等。
- en: On our `Product` object, we have two keys which are going to help us display
    the variations. These are `variationTypes`, which list the names of the variations
    such as size and color, and `variationProducts`,which contains all of the variations.
    Each product within the `variationProducts` object has a further object of `variant`,
    which lists all of the changeable properties. For example, if a jacket came in
    two colors and each color had three sizes, there would be six `variationProducts`,
    each with two `variant` properties.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`Product`对象上，我们有两个键将帮助我们显示变体。它们是`variationTypes`，列出了变体的名称，如尺寸和颜色，以及`variationProducts`，其中包含所有的变体。`variationProducts`对象中的每个产品都有一个更进一步的`variant`对象，列出了所有可变的属性。例如，如果一件夹克有两种颜色，每种颜色有三种尺寸，那么将有六个`variationProducts`，每个产品都有两个`variant`属性。
- en: Every product will contain at least one variation, although if there is only
    one variation, we may need to consider the UX of the product page.  We are going
    to display our product variations in both a table and drop-down, so you can experience
    creating both elements.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 每个产品都将包含至少一个变体，尽管如果只有一个变体，我们可能需要考虑产品页面的用户体验。我们将在表格和下拉菜单中显示产品的变体，这样您就可以体验创建这两个元素。
- en: Variations display table
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变体显示表格
- en: Create a new container in your product template that will display the variations.
    Within this container, we can create a table to display the different variations
    of the product. This will be achieved with a `v-for` declaration. However, now
    that you are more familiar with the functionality, we can introduce a new attribute.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在产品模板中创建一个新的容器，用于显示变体。在此容器中，我们可以创建一个表格来显示产品的不同变体。这将通过`v-for`声明来实现。然而，现在您对功能更加熟悉，我们可以引入一个新的属性。
- en: Using a key with loops
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用循环键
- en: 'When using loops in Vue, it is advised you use an extra attribute to identify
    each item, `:key`. This helps Vue identify the elements of the array when re-ordering,
    sorting, or filtering. An example of `:key` use would be:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中使用循环时，建议您使用额外的属性来标识每个项，即`:key`。这有助于Vue在重新排序、排序或过滤时识别数组的元素。使用`:key`的示例如下：
- en: '[PRE39]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The key attribute should be a unique attribute of the item itself and not the
    index of the item in the array, to help Vue identify the specific object. More
    information about using a key with a loop is available in the [official Vue documentation](https://vuejs.org/v2/guide/list.html#key).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 键属性应该是项本身的唯一属性，而不是数组中的项的索引，以帮助Vue识别特定的对象。有关使用循环键的更多信息，请参阅[官方Vue文档](https://vuejs.org/v2/guide/list.html#key)。
- en: We'll be utilizing the `key` attribute when displaying our variations, but using
    the `barcode` attribute.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示变体时，我们将使用`key`属性，但使用`barcode`属性。
- en: Displaying the variations in a table
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表格中显示变体
- en: Add a table element to your variations container and loop through the `items`
    array. For now, display the `title`, `quantity` and `price`. Add an additional
    cell that contains a button with the value of Add to basket. We'll configure that
    in Chapter 11, *Building an E-commerce Store – Adding a Checkout.* Don't forget
    to add a `$` currency symbol in front of your price, as it's currently just a
    "raw" number.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的变体容器中添加一个表格元素，并循环遍历`items`数组。现在，显示`title`、`quantity`和`price`。添加一个包含值为“添加到购物篮”的按钮的额外单元格。我们将在第11章“构建电子商务商店
    - 添加结账”中进行配置。不要忘记在价格前面添加`$`货币符号，因为它目前只是一个“原始”数字。
- en: 'Watch out – when using the `$` sign within the template literals, JavaScript
    will try and interpret it, along with the curly brackets, as a JavaScript variable.
    To counteract this, prepend the currency with a backslash – this tells JavaScript
    that the next character is literal, and should not be interpreted in any other
    way:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 - 当在模板文字中使用`$`符号时，JavaScript将尝试解释它，以及花括号，作为JavaScript变量。为了抵消这一点，用反斜杠在货币前面
    - 这告诉JavaScript下一个字符是字面的，不应以任何其他方式解释：
- en: '[PRE40]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Although we're displaying the price and quantity, we aren't outputting the actual
    variant properties of the variation (such as color). To do this, we are going
    to need to do some processing on our variation with a method.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们显示了价格和数量，但我们没有输出变体的实际属性（如颜色）。为了做到这一点，我们需要对变体进行一些处理，使用一个方法。
- en: 'The variant object contains a child object for each variation type, with a
    name and a value for each type. They are also stored with a slug-converted key
    within the object. See the following screenshot for more details:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 变体对象包含每个变体类型的子对象，每个类型都有一个名称和一个值。它们还以slug转换后的键存储在对象中。有关更多详细信息，请参见以下屏幕截图：
- en: '![](assets/28be9090-e8ff-4446-a407-dc2a0dad9ded.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/28be9090-e8ff-4446-a407-dc2a0dad9ded.png)'
- en: 'Add a new cell at the beginning of the table that passes the variation to a
    method titled `variantTitle()`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在表格开头添加一个新的单元格，将变体传递给名为`variantTitle()`的方法：
- en: '[PRE41]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create the new method within your `methods` object:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在`methods`对象中创建新的方法：
- en: '[PRE42]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We now need to construct a string with the title of the variant, displaying
    all available options. To do this, we are going to construct an array of each
    of the types and then join them into a string.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要构建一个包含变体标题的字符串，显示所有可用选项。为此，我们将构建一个包含每个类型的数组，然后将它们连接成一个字符串。
- en: 'Store the `variants` as a variable and create an empty array. We can now loop
    through the keys available within the `variants` object and create a string to
    output. If you decide to add HTML into the string, as shown in the following example,
    we will need to update our template to output HTML instead of a raw string:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 将`variants`存储为一个变量，并创建一个空数组。现在我们可以循环遍历`variants`对象中可用的键，并创建一个输出字符串。如果您决定在字符串中添加HTML，如下面的示例所示，我们需要更新模板以输出HTML而不是原始字符串：
- en: '[PRE43]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Our output array will have an item for each variant, formatted like the following:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的输出数组将有一个项目，格式如下：
- en: '[PRE44]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We can now join each one together, which transforms the output from an array
    to a string. The character, string, or HTML you choose to join it with is up to
    you. For now, use a `/` with spaces on either side. Alternatively, you could use
    `</td><td>` tags to create a new table cell. Add the `join()` function and update
    the template to use `v-html`:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将它们连接在一起，将输出从数组转换为字符串。您可以选择使用的字符、字符串或HTML取决于您。现在，使用两边带有空格的`/`。或者，您可以使用`</td><td>`标签创建一个新的表格单元格。添加`join()`函数并更新模板以使用`v-html`：
- en: '[PRE45]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Attach a click event to the Add to basket button and create a new method on
    the component. This method will require the `variation` object to be passed in,
    so the correct one could be added to the basket. For now, add a JavaScript `alert()` to
    confirm you have the right one:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 将点击事件附加到“添加到购物篮”按钮，并在组件上创建一个新的方法。此方法将需要传入`variation`对象，以便将正确的对象添加到购物篮中。现在，添加一个JavaScript
    `alert()`来确认您是否选择了正确的对象：
- en: '[PRE46]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note the template literals used within the alert box – this allows us to use
    Javascript variables without having to use string concatenation techniques. Clicking
    on the Add to basket button will now generate a popup listing of the name of the
    product and the variation clicked.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在警告框中使用的模板字面量-这允许我们使用JavaScript变量，而无需使用字符串连接技术。现在，点击“添加到购物篮”按钮将生成一个弹出窗口，列出产品的名称和所点击的变体。
- en: Displaying variations in a select box
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在选择框中显示变体
- en: A more common interface pattern on product pages is to have a drop-down list,
    or select box, with your variations displayed and available for selecting.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 产品页面上更常见的界面模式是在下拉列表或选择框中显示和选择您的变体。
- en: When using a select box, we will have a variation which has either been selected
    by default or that the user has interacted with and chosen specifically. Because
    of this, we can change the image when the user changes the select box and display
    other pieces of information about the variant on the product page, including price
    and quantity.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 使用选择框时，我们将有一个变体，它要么是默认选择的，要么是用户已经与之交互并专门选择的。因此，当用户更改选择框时，我们可以更改图像，并在产品页面上显示有关变体的其他信息，包括价格和数量。
- en: We won't be relying on passing through the variant to the `addToBasket` method,
    as it will exist as an object on the product component.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会依赖于将变体传递给`addToBasket`方法，因为它将作为产品组件上的一个对象存在。
- en: 'Update your `<table>` element to be a `<select>`,  and the `<tr>` to an `<option>`.
    Move the button *outside* of this element and remove the parameter from the `click`
    event. Remove any HTML from the `variantTitle()` method. Because it is now inside
    a select box it is not required:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的`<table>`元素更新为`<select>`，将`<tr>`更新为`<option>`。将按钮移动到此元素之外，并从`click`事件中删除参数。从`variantTitle()`方法中删除任何HTML。因为它现在在选择框内，所以不需要它。
- en: '[PRE47]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The next step is to create a new variable available to use on the component.
    In a similar vein to the images, this will be completed with the first item of
    the `variationProducts` array and updated when the select box changes.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个新的变量，可供组件使用。与图片类似，这将在`variationProducts`数组的第一项完成，并在选择框更改时进行更新。
- en: 'Create a new item in the data object, titled `variation`. Populate this variable
    when the data is loaded into the `product` computed variable:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据对象中创建一个名为`variation`的新项。在数据加载到`product`计算变量中时填充此变量：
- en: '[PRE48]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Update the `addToBasket` method to use the `variation` variable of the `ProductPage`
    component and not rely on a parameter:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`addToBasket`方法，使用`ProductPage`组件的`variation`变量，而不是依赖于参数：
- en: '[PRE49]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Try clicking the Add to basket button – it should add the first variation, regardless
    of what is selected in the dropdown. To update the variable on change, we can
    bind the `variations` variable to the select box – in the same way, that we did
    our textbox filtering at the beginning of this book.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试点击“添加到购物篮”按钮-它应该添加第一个变体，而不管在下拉列表中选择了什么。为了在更改时更新变量，我们可以将`variations`变量绑定到选择框上-就像我们在本书开始时对文本框进行过滤一样。
- en: 'Add a `v-model` attribute to the `select` element. We will also need to tell
    Vue what to bind to this variable when selecting. By default, it will do the contents
    of the `<option>`, which is currently our custom variant title. However, we want
    to bind the whole `variation` object. Add a `:value` property to the `<option>`
    element:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在`select`元素上添加`v-model`属性。当选择时，我们还需要告诉Vue要绑定到此变量的内容。默认情况下，它将使用`<option>`的内容，即我们当前的自定义变体标题。但是，我们希望绑定整个`variation`对象。在`<option>`元素上添加一个`:value`属性：
- en: '[PRE50]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Changing the select box and clicking the Add to basket button will now produce
    the correct variation. This method gives us much more flexibility over displaying
    the variations in a table.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 更改选择框并单击“添加到购物篮”按钮现在将生成正确的变体。这种方法使我们在表格中显示变体更加灵活。
- en: 'It allows us to display variation data in other places on the product. Try
    adding the price next to the product title and the quantity within the `meta`
    container:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许我们在产品的其他位置显示变体数据。尝试在产品标题旁边添加价格，并在`meta`容器中显示数量：
- en: '[PRE51]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'These two new attributes will update when changing the variation. We can also
    update the image to the selected variation if it has one. To do this, add a `watch`
    object to your component, which watches the variation variable. When updated,
    we can check if the variation has an image and, if so, update the image variable
    with this property:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个新属性将在更改变体时更新。如果有选择的变体，则还可以更新图像。为此，请在组件中添加一个`watch`对象，该对象监视变体变量。更新后，我们可以检查变体是否有图像，如果有，则使用此属性更新图像变量：
- en: '[PRE52]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: When using `watch`, the function passes the new item as the first parameter.
    Rather than referring to the one on the component, we can use this to gather the
    image information.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`watch`时，函数将新项作为第一个参数传递。我们可以使用此参数来收集图像信息，而不是引用组件上的参数。
- en: Another enhancement we can make is to disable the Add to basket button and add
    a note in the dropdown if the variation is out of stock. This information is gathered
    from the variation `quantity` key.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进行的另一个改进是，如果变体缺货，则禁用“添加到购物篮”按钮并在下拉菜单中添加注释。此信息从变体的`quantity`键中获取。
- en: 'Check the quantity and, if less than one, display an out of stock message in
    the select box and disable the Add to basket button using the `disabled` HTML
    attribute. We can also update the value of the button:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数量，如果小于1，则在选择框中显示缺货消息，并使用`disabled` HTML属性禁用“添加到购物篮”按钮。我们还可以更新按钮的值：
- en: '[PRE53]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: If using the `bicycles.csv` dataset, the Keirin Pro Track Frameset product (`/#/product/keirin-pro-track-frame`)
    contains several variations, some without stock. This allows you to test the `out
    of stock` functionality along with the image changing.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`bicycles.csv`数据集，则Keirin Pro Track Frameset产品（`/#/product/keirin-pro-track-frame`）包含几种变体，其中一些没有库存。这样可以测试“缺货”功能以及图像更改。
- en: Another thing we can do to the product page is only show the dropdown when there
    is more than one variation. An example of a product with only one is the 15 mm
    Combo Wrench (`#/product/15mm-combo-wrench`). In this instance, it is not worth
    showing the `<select>` box. As we are setting the `variation` variable on the
    `Product` component on load, we are not relying on the selection to initially
    set the variable. Because of this, we can completely remove the select box with
    a `v-if=""` when there is only one alternate product.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对产品页面进行的另一项操作是仅在存在多个变体时显示下拉菜单。一个只有一个变体的产品的示例是15 mm Combo扳手（`#/product/15mm-combo-wrench`）。在这种情况下，显示`<select>`框没有意义。由于我们在加载时在`Product`组件上设置了`variation`变量，因此我们不依赖于选择来最初设置变量。因此，当只有一个备选产品时，我们可以使用`v-if=""`完全删除选择框。
- en: 'Like we did with the images, check if the length of the array is more than
    one, this time the `variationProducts` array:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 与图像一样，检查数组的长度是否大于1，这次是`variationProducts`数组：
- en: '[PRE54]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: By removing elements when they are not needed, we now have a less cluttered
    interface.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在不需要时删除元素，我们现在有了一个更简洁的界面。
- en: Updating the product details when switching URLs
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在切换URL时更新产品详细信息
- en: While navigating through the different product URLs to check variations, you
    may have noticed that clicking back and forward doesn't update the product data
    on the page.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览不同的产品URL以检查变体时，您可能已经注意到点击后退和前进不会更新页面上的产品数据。
- en: This is because `Vue-router` realizes the same component is being used between
    the pages, and so, rather than destroying and creating a new instance, it reuses
    the component. The downside to this is that the data does not get updated; we
    need to trigger a function to include the new product data. The upside is that
    the code is more efficient.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为`Vue-router`意识到在页面之间使用相同的组件，所以它不会销毁和创建一个新实例，而是重用组件。这样做的缺点是数据不会更新；我们需要触发一个函数来包含新的产品数据。好处是代码更高效。
- en: To tell Vue to retrieve the new data, we need to create a `watch` function;
    instead of watching a variable, we are going to watch the `$route` variable. When
    this gets updated, we can load new data.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 为了告诉Vue检索新数据，我们需要创建一个`watch`函数；而不是观察一个变量，我们将观察`$route`变量。当它更新时，我们可以加载新数据。
- en: 'Create a new variable in the data instance of `slug`, and set the default to
    be the route parameter. Update the `product` computed function to use this variable
    instead of the route:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据实例的`slug`中创建一个新变量，并将默认值设置为路由参数。更新`product`计算函数以使用此变量而不是路由：
- en: '[PRE55]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: We can now create a `watch` function, keeping an eye on the `$route` variable.
    When this changes, we can update the `slug` variable, which in turn will update
    the data being displayed.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个`watch`函数，监视`$route`变量。当它改变时，我们可以更新`slug`变量，从而更新显示的数据。
- en: When watching a route, the function has two parameters passed to it: `to` and
    `from`. The `to` variable contains everything about the route we are going to,
    including parameters and the component used. The `from` variable contains everything
    about the current route.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在观察路由时，函数有两个参数传递给它：`to`和`from`。`to`变量包含有关我们要去的路由的所有内容，包括参数和使用的组件。`from`变量包含有关当前路由的所有内容。
- en: 'By updating the `slug` variable to the new parameter when the route changes,
    we are forcing the component to redraw with new data from the store:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在路由更改时将`slug`变量更新为新参数，我们强制组件使用来自存储的新数据重新绘制：
- en: '[PRE56]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: With our product page completed, we can move on to creating a category listing
    for both the `type` and `vendor` variables. Remove any `console.log()` calls you
    have in your code, too, to keep it clean.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 完成产品页面后，我们可以继续创建一个类别列表，包括`type`和`vendor`变量。还要删除代码中的任何`console.log()`调用，以保持代码整洁。
- en: Summary
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has covered a lot. We loaded and stored a CSV file of products
    into our Vuex store. From there, we created a product detail page that used a
    dynamic variable in the URL to load a specific product. We have created a product
    detail view that allows the user to look through a gallery of images and choose
    a variation from a drop-down list. If the variation has an associated image, the
    main image updates.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了很多内容。我们将产品的CSV文件加载并存储到Vuex存储中。从那里，我们创建了一个产品详细页面，该页面使用URL中的动态变量加载特定产品。我们创建了一个产品详细视图，允许用户浏览图库并从下拉列表中选择变体。如果变体有关联的图像，主图像会更新。
- en: In Chapter 10, *Building an E-Commerce Store – Browsing Products*,
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在第10章《构建电子商务商店-浏览产品》中，
- en: we will create a category page, creating filtering and ordering functions –
    helping the user to find the product they want.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个分类页面，创建过滤和排序功能，帮助用户找到他们想要的产品。
