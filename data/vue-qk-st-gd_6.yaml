- en: Transitions and Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡和动画
- en: In this chapter, we'll look at how to use transitions and animations in Vue.
    This is a large topic that would take a lot more than a chapter to cover. Hence,
    we will deal with some fundamental concepts that we can build upon in the future.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将看看如何在Vue中使用过渡和动画。这是一个很大的主题，需要更多的章节来覆盖。因此，我们将处理一些基本概念，以便在将来构建。
- en: 'We will focus on the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点关注以下主题：
- en: Understanding CSS transitions and animations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解CSS过渡和动画
- en: Implementing transitions with the `transition` component
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`transition`组件实现过渡
- en: Working with CSS transitions and animations in Vue
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Vue中使用CSS过渡和动画
- en: Integrating with third-party CSS and JS libraries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与第三方CSS和JS库集成
- en: Binding CSS styles
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定CSS样式
- en: Working with transition groups
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与过渡组一起工作
- en: JavaScript animation hooks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript动画钩子
- en: After reading this chapter, you should have a solid understanding of how transitions
    and animations are used in Vue.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您应该对Vue中如何使用过渡和动画有扎实的理解。
- en: Transitions and animations in CSS
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS中的过渡和动画
- en: To understand how Vue.js deals with transitions and animations, we will first
    need to have a quick refresher on how they work in CSS. We will focus on the bare
    basics, with the goal of revisiting the principles that govern transitions and
    animations. We will also look at their differences. The goal is to be able to
    understand better how Vue helps, rather than dive deep into the nuances of transitions
    and animations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Vue.js如何处理过渡和动画，我们首先需要快速复习一下它们在CSS中的工作原理。我们将专注于基础知识，目标是重新审视管理过渡和动画的原则。我们还将看看它们的区别。目标是更好地理解Vue如何帮助，而不是深入了解过渡和动画的细微差别。
- en: How CSS transitions work
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS过渡的工作原理
- en: When we hover over an element, we put that element in a hover state. When the
    user triggers a hover state through their interaction with our web page, we might
    want to *emphasize* that this change of state has occurred.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们悬停在一个元素上时，我们将该元素置于悬停状态。当用户通过与我们的网页进行交互触发悬停状态时，我们可能希望*强调*这种状态的变化已经发生。
- en: To emphasize that change of state, we could, for example, change the CSS `background-color`
    property on that element when the user hovers over it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了强调状态的变化，我们可以例如在用户悬停在元素上时改变该元素的CSS `background-color`属性。
- en: This is where CSS transitions come in. When we write code for CSS transitions,
    we *instruct* the browser on how it will display changes made to that specific
    CSS property—in our example, the `background-color` property.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是CSS过渡发挥作用的地方。当我们为CSS过渡编写代码时，我们*指示*浏览器如何显示对该特定CSS属性所做的更改-在我们的例子中是`background-color`属性。
- en: 'Let''s say we have an HTML `button` element. This element has its CSS property
    of `background-color`  set to `red`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个HTML `button`元素。该元素的CSS属性`background-color`设置为`red`：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When a user hovers over the button, we want to change the value of the `background-color`
    property from `red` to `blue`. We''ll do that like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户悬停在按钮上时，我们希望将`background-color`属性的值从`red`更改为`blue`。我们可以这样做：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The sample code is available here: [https://codepen.io/AjdinImsirovic/pen/LJKJYY](https://codepen.io/AjdinImsirovic/pen/LJKJYY).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码在这里可用：[https://codepen.io/AjdinImsirovic/pen/LJKJYY](https://codepen.io/AjdinImsirovic/pen/LJKJYY)。
- en: However, this change of color is sudden. To *smoothly transition* a CSS property
    of an HTML element from one value to the other, we use the CSS `transition` property.
    The `transition` property is a shorthand CSS property. It is just another CSS
    property we specify on the targeted element—the one to which we want to apply
    this smooth transition.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种颜色的变化是突然的。为了*平滑过渡*HTML元素的CSS属性从一个值到另一个值，我们使用CSS的`transition`属性。`transition`属性是一个简写的CSS属性。它只是另一个我们在目标元素上指定的CSS属性，我们希望对其应用这种平滑过渡。
- en: 'In our case, we want to smoothly transition our button from the red background
    to the blue background. We will simply add the shorthand `transition` property
    on the button element, and set two values on this `transition` property:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们希望平滑地将按钮从红色背景过渡到蓝色背景。我们只需在按钮元素上添加简写的`transition`属性，并在这个`transition`属性上设置两个值：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is the formula:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是公式：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In our example, we're specifying the duration for only one property, but we
    can add more, as needed. The previous example can be found at [https://codepen.io/AjdinImsirovic/pen/rqBqYN](https://codepen.io/AjdinImsirovic/pen/rqBqYN).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们只为一个属性指定了持续时间，但我们可以根据需要添加更多。
- en: How CSS animations work
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS动画的工作原理
- en: 'In the previous example, we saw a simple transition. In this example, we will
    convert the transition into an animation. The updated CSS code will look like
    this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们看到了一个简单的过渡。在这个例子中，我们将把过渡转换为动画。更新后的CSS代码将如下所示：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous code, we have converted our simple CSS transition into a CSS
    animation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码中，我们已经将我们简单的CSS过渡转换为了CSS动画。
- en: 'This example can be found at this link: [https://codepen.io/AjdinImsirovic/pen/WaNePm](https://codepen.io/AjdinImsirovic/pen/WaNePm).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例可在此链接找到：[https://codepen.io/AjdinImsirovic/pen/WaNePm](https://codepen.io/AjdinImsirovic/pen/WaNePm)。
- en: However, it does not work 100% the same. When we hover over the button, we don't get
    the exact same behavior we had in the transition example. The reason is that we
    have specified the initial state (as `0%`) and the final state (as `100%`) of
    our animation. So, we are effectively mapping over the behavior we had in the
    transition example, to behavior in the animation example.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它并不完全相同。当我们悬停在按钮上时，我们并没有得到与过渡示例中相同的行为。原因是我们已经指定了动画的初始状态（为`0%`）和最终状态（为`100%`）。因此，我们实际上是将我们在过渡示例中的行为映射到动画示例中的行为。
- en: However, when we remove the mouse pointer from the button, the animation does
    not rewind to the initial state, but rather abruptly cuts back to the original
    background color of red. In CSS, there is no `mouseout` property.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们将鼠标指针从按钮上移开时，动画并不会倒回到初始状态，而是突然切换回原始的红色背景颜色。在CSS中，没有`mouseout`属性。
- en: 'We could, however, add additional steps in between. For example, we could set
    the background color to green at 50% of our change animation. The result can be
    seen at this URL: [https://codepen.io/AjdinImsirovic/pen/QZWWje](https://codepen.io/AjdinImsirovic/pen/QZWWje).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以在中间添加额外的步骤。例如，我们可以在变化动画的50%处将背景颜色设置为绿色。结果可以在此URL中看到：[https://codepen.io/AjdinImsirovic/pen/QZWWje](https://codepen.io/AjdinImsirovic/pen/QZWWje)。
- en: Before we dive into how Vue implements transitions and animations, let's look
    at the differences between them in CSS.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解Vue如何实现过渡和动画之前，让我们先看看它们在CSS中的区别。
- en: Differences between transitions and animations in CSS
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS中过渡和动画的区别
- en: Here are two quick, incomplete lists of the differences between transitions
    and animations in CSS.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CSS中过渡和动画之间的两个快速、不完整的区别列表。
- en: Rules for CSS transitions
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS过渡的规则
- en: 'Here are some important rules of CSS transitions:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CSS过渡的一些重要规则：
- en: Transitions only have implied start and end states
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡只有暗示的开始和结束状态
- en: The way that a transition will be performed is decided by the browser; in other
    words, the browser decides how it will perform the in-between steps of the transition
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器决定了过渡的执行方式；换句话说，浏览器决定了过渡的中间步骤如何执行
- en: We can only point the browser to the exact CSS property we want transitioned,
    and the duration, easing, and so on
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们只能指定要过渡的确切CSS属性，以及持续时间、缓动等
- en: Transitions are *triggered; t*he trigger can be a hover or an element appearing
    on the page (via JavaScript)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡是*被触发的；*触发可以是悬停或页面上元素的出现（通过JavaScript）
- en: Transitions can't be looped
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡不能循环
- en: Transitions are played in reverse when the trigger state (the hover state) is
    reverted, that is, when the mouse is *unhovered*
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当触发状态（悬停状态）被恢复时，过渡会以相反的方式播放，也就是当鼠标*取消悬停*时
- en: Transition syntax is simpler than the syntax for animations
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡语法比动画的语法更简单
- en: Next, let's list the important concepts of CSS animations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们列出CSS动画的重要概念。
- en: Rules for CSS animations
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS动画规则
- en: 'What follows is an incomplete list of rules for CSS animations:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CSS动画的不完整规则列表：
- en: Animations allow us to specify initial state, in-between state(s), and end state
    of our CSS properties
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画允许我们指定CSS属性的初始状态、中间状态和结束状态
- en: There can be as many steps as we need in our CSS animations
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的CSS动画中可以有尽可能多的步骤
- en: We can delay animations, play them *x* number of times (to infinity), or play
    them in the opposite direction
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以延迟动画，播放*x*次（无限次），或者以相反的方向播放它们
- en: Animations don't have to be triggered, but they can be
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画不一定要被触发，但它们可以被触发
- en: With these basic distinctions out of the way, let's next look at how to deal
    with transitions and animations in Vue.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在弄清楚这些基本区别之后，让我们接下来看看如何在Vue中处理过渡和动画。
- en: The transition element in Vue
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue中的过渡元素
- en: 'Let''s look at the previous example of CSS-only transitions, ported into Vue.
    In the following example, the first button is wrapped inside a custom component,
    while the second button is just the regular HTML button element. They still both
    share the same styles, as specified in the app''s CSS:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看之前的纯CSS过渡的示例，转换成Vue。在下面的示例中，第一个按钮包裹在一个自定义组件中，而第二个按钮只是常规的HTML按钮元素。它们仍然共享相同的样式，如应用程序的CSS中指定的那样：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The previous code can be found here: [https://codepen.io/AjdinImsirovic/pen/vVYERO](https://codepen.io/AjdinImsirovic/pen/vVYERO)[.](https://codepen.io/AjdinImsirovic/pen/vVYERO) As
    can be seen in the example, in this case, Vue does not diverge from the way that
    transitions and animations work in plain HTML and CSS.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码可以在这里找到：[https://codepen.io/AjdinImsirovic/pen/vVYERO](https://codepen.io/AjdinImsirovic/pen/vVYERO)[.](https://codepen.io/AjdinImsirovic/pen/vVYERO) 如例所示，在这种情况下，Vue并没有偏离纯HTML和CSS中过渡和动画的工作方式。
- en: 'Vue is not designed to override the normal use case for CSS transitions and
    animations, but rather to work alongside them with one specific goal: to transition
    the appearance and removal of its *components* on the screen. This addition and
    removal of components is done with the help of Vue''s `transition` element.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Vue并不是为了覆盖CSS过渡和动画的正常用例而设计的，而是为了与它们一起工作，有一个特定的目标：在屏幕上过渡其*组件*的出现和移除。这些组件的添加和移除是通过Vue的`transition`元素来完成的。
- en: 'For example, when you want to have an event in one component to affect the
    addition and removal of another component, you simply wrap that other component
    in a `transition` element. To build from the previous examples with plain CSS,
    here is a simple implementation in Vue:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当您希望一个组件中的事件影响另一个组件的添加和移除时，您只需将另一个组件包裹在`transition`元素中。从之前的纯CSS示例构建，这是Vue中的一个简单实现：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The example code is available here: [https://codepen.io/AjdinImsirovic/pen/ZqExJO](https://codepen.io/AjdinImsirovic/pen/ZqExJO).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码可以在这里找到：[https://codepen.io/AjdinImsirovic/pen/ZqExJO](https://codepen.io/AjdinImsirovic/pen/ZqExJO)。
- en: 'If you need the element to appear smoothly on the initial page load, without
    conditions, then you can use the `appear` attribute on your transition wrapper,
    like this: `<transition appear>`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要元素在初始页面加载时平滑出现，而不受条件限制，那么您可以在转换包装器上使用`appear`属性，就像这样：`<transition appear>`。
- en: What is happening in the previous code is that we are conditionally toggling
    the mounting of the `custom-component` element based on whether the user has clicked
    the first button or not. Note that the original CSS transition is still behaving
    the exact same way in both buttons. When we hover over either of them, we still
    get the four-second transition of background color from red to blue. The browser
    still takes care of the *inverted* transition of a button's background when we
    hover away from either of the buttons.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中发生的是，我们有条件地切换`custom-component`元素的挂载，这取决于用户是否点击了第一个按钮。请注意，原始的CSS转换在两个按钮中仍然以完全相同的方式工作。当我们悬停在它们中的任何一个上时，我们仍然会得到从红色到蓝色的四秒过渡背景颜色。当我们从任何一个按钮悬停离开时，浏览器仍然会处理按钮背景的*反向*过渡。
- en: However, the mounting of the second button on the screen comes without any transitions.
    The second button simply appears and disappears upon clicking the first, without
    any easing in or out.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，第二个按钮在屏幕上的挂载是没有任何转换的。第二个按钮简单地在点击第一个按钮时出现和消失，没有任何缓入或缓出。
- en: To achieve this gradual appearance and removal, the `transition` element comes
    with built-in CSS class names. These built-in transition class names are also
    called **animation hooks**. These animation hooks describe the beginning state,
    the end state, and the in-between state for component(s) wrapped inside that `transition`
    element; that is, they describe in what way the affected components will toggle
    on and off the screen.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这种逐渐出现和消失的效果，`transition`元素带有内置的CSS类名。这些内置的转换类名也被称为**动画钩子**。这些动画钩子描述了包裹在`transition`元素内的组件的起始状态、结束状态和中间状态；也就是说，它们描述了受影响的组件将如何在屏幕上切换开和关闭。
- en: We can add animation hooks to either *enter* transitions or to *leave* transitions.
    Enter transition classes are `v-enter`, `v-enter-active`, and `v-enter-to`. Leave
    transition classes are `v-leave`, `v-leave-active`, and `v-leave-to`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将动画钩子添加到*进入*转换或*离开*转换。进入转换类是`v-enter`，`v-enter-active`和`v-enter-to`。离开转换类是`v-leave`，`v-leave-active`和`v-leave-to`。
- en: Setting up the enter transition
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置进入转换
- en: 'To build on the previous example, we will employ these animation hooks to make
    the second button''s appearance and disappearance smoother. The only difference
    between the previous example and this one is the addition of animation hooks in
    our CSS:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在上一个例子的基础上进行扩展，我们将利用这些动画钩子使第二个按钮的出现和消失更加平滑。上一个例子和这个例子之间唯一的区别是在我们的CSS中添加了动画钩子：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The code for this example can be found at the following link: [https://codepen.io/AjdinImsirovic/pen/MPWVNm](https://codepen.io/AjdinImsirovic/pen/MPWVNm).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的代码可以在以下链接找到：[https://codepen.io/AjdinImsirovic/pen/MPWVNm](https://codepen.io/AjdinImsirovic/pen/MPWVNm)。
- en: If we imagine the appearance of the second button as a regular CSS transition,
    then the `.v-enter` animation hook would be the initial transition state, `.v-enter-active`
    would be the in-between steps, and `.v-enter-to` would be the final transition
    state, that is, what the element will transition *to*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将第二个按钮的外观想象成一个常规的CSS转换，那么`.v-enter`动画钩子将是初始转换状态，`.v-enter-active`将是中间步骤，`.v-enter-to`将是最终转换状态，也就是元素将要转换*到*的状态。
- en: 'Because we have not used the `.v-enter-to` animation hook in our example, the
    behavior we get is as follows: when the first button is clicked, the second button
    takes three seconds to change (transition) its opacity from the initial value
    of zero to the implied value of one. This takes care of our enter transition.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在示例中没有使用`.v-enter-to`动画钩子，所以我们得到的行为如下：当点击第一个按钮时，第二个按钮需要三秒钟才能从初始值零过渡到暗示的值一（不透明度）。这就完成了我们的进入过渡。
- en: Setting up the leave transition
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置离开过渡
- en: 'There is a slight issue with our previous example: when we click the first
    button again, the second button will disappear instantly, because its opacity
    value will be reset to zero without any transition. The reason for this is simple:
    we have not specified any *leave* transition hooks, so the button just disappears.
    We''ll fix that in the next example, by simply specifying the leave transitions,
    like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的示例有一个小问题：当我们再次点击第一个按钮时，第二个按钮会立即消失，因为它的不透明度值会在没有任何过渡的情况下重置为零。原因很简单：我们没有指定任何*离开*过渡钩子，所以按钮就会消失。我们将在下一个示例中修复这个问题，只需简单地指定离开过渡，就像这样：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The full code can be found here: [https://codepen.io/AjdinImsirovic/pen/XxWqOy](https://codepen.io/AjdinImsirovic/pen/XxWqOy).
    What we are doing in this code is this: when the component needs to be animated
    out, our transition''s initial state is `.v-leave`. The CSS declaration in the `.v-leave` animation
    hook is `opacity: 1`. Next, we specify the in-between steps: the CSS property
    to be transitioned, namely `opacity`, and the duration of the transition: `3s`.
    Finally, we specify the finished state for our transition, where `opacity` gets
    set to the value of zero.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '完整的代码可以在这里找到：[https://codepen.io/AjdinImsirovic/pen/XxWqOy](https://codepen.io/AjdinImsirovic/pen/XxWqOy)。在这段代码中，我们做的是：当组件需要被动画移出时，我们过渡的初始状态是`.v-leave`。在`.v-leave`动画钩子中的CSS声明是`opacity:
    1`。接下来，我们指定中间步骤：要过渡的CSS属性，即`opacity`，以及过渡的持续时间：`3s`。最后，我们指定过渡的完成状态，其中`opacity`被设置为零的值。'
- en: What we can conclude from these examples is that the *leave* transitions' animation
    hooks (`v-leave`, `v-leave-active`, and `v-leave-to`) should be *a mirror image—*figuratively
    speaking—in comparison to the enter transitions' animation hooks (`v-enter`, `v-enter-active`,
    and `v-enter-to`).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些示例中我们可以得出结论，*离开*过渡的动画钩子（`v-leave`，`v-leave-active`和`v-leave-to`）应该是*镜像的*，就像进入过渡的动画钩子（`v-enter`，`v-enter-active`和`v-enter-to`）一样。
- en: 'We can also conclude that the transition component and the animation hooks
    that come along with it are to be used for mounting and unmounting the components
    on the screen. When transitioning a component on and off the screen, the animation
    hooks'' natural progression is this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以得出结论，过渡组件和随之而来的动画钩子用于在屏幕上挂载和卸载组件。当在屏幕上过渡组件时，动画钩子的自然进展是这样的：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can also group certain CSS selectors that share the same values, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将共享相同值的某些CSS选择器分组，如下所示：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This example can be found at the following web address: [https://codepen.io/AjdinImsirovic/pen/dgyKMG](https://codepen.io/AjdinImsirovic/pen/dgyKMG).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例可以在以下网址找到：[https://codepen.io/AjdinImsirovic/pen/dgyKMG](https://codepen.io/AjdinImsirovic/pen/dgyKMG)。
- en: As can be seen here, `.v-enter` (the initial enter animation hook) gets combined
    with `.v-leave-to` (the last leave animation hook) precisely because the transition
    must be played in reverse to get the most expected behavior. Similarly, we are
    grouping the in-between steps, the `-active` hooks, to have the same `transition`
    CSS property. Finally, the enter animation's final hook needs to share the CSS
    declaration with the initial leave animation hook. Also, since the `.v-enter-to`
    and the `.v-leave` values are implied by default, we can even omit them and still
    have a working component transition, similar to the one described in the official
    documentation: [https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components](https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在这里所看到的，`.v-enter`（初始进入动画钩子）与`.v-leave-to`（最后离开动画钩子）被合并在一起，这是因为过渡必须以相反的方式播放，以获得最符合预期的行为。同样，我们将中间步骤，即`-active`钩子分组，以具有相同的`transition`
    CSS属性。最后，进入动画的最终钩子需要与初始离开动画钩子共享CSS声明。此外，由于`.v-enter-to`和`.v-leave`的值默认情况下是隐含的，我们甚至可以省略它们，仍然可以拥有一个正常工作的组件过渡，类似于官方文档中描述的过渡。
- en: To make things simpler to reason about, in our most recent example we have also
    changed the `data` option's `show` key to the value of `false`. That way, initially
    the component is not mounted to the DOM. Only when the user clicks on the first
    button will the second button's enter animation hooks kick in and smoothly transition
    the component in. On another click, the second button's leave animation hook will
    kick in and transition the component out in reverse. This is important, since
    initially we had the enter animation transition the unmounting of the component
    and the leave animation transition the mounting of it back into the page, which
    possibly makes things slightly more difficult to reason about.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化推理，我们在最近的示例中还将`data`选项的`show`键更改为`false`的值。这样，最初组件不会挂载到DOM上。只有当用户点击第一个按钮时，第二个按钮的进入动画钩子才会启动，并平滑地过渡组件。再次点击时，第二个按钮的离开动画钩子将启动，并以相反的方式过渡组件。这很重要，因为最初我们让进入动画过渡组件的卸载，而离开动画过渡组件重新挂载到页面上，这可能会使事情变得更加复杂。
- en: Naming transition components
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名过渡组件
- en: We can give our transition elements the `name` attribute. Doing this changes
    the naming convention for animation hooks. For example, if we give our transition
    the name of `named`, then the animation hooks will need to be renamed as follows.
    For every transition class, we'll replace the beginning `v-`  with the value of
    the `name` attribute. Hence, `v-enter` will become `named-enter`, `v-leave` will
    become `named-leave`, and so on.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以给过渡元素添加`name`属性。这样做会改变动画钩子的命名约定。例如，如果我们给过渡命名为`named`，那么动画钩子将需要按照以下方式重新命名。对于每个过渡类，我们将用`name`属性的值替换`v-`的开头。因此，`v-enter`将变成`named-enter`，`v-leave`将变成`named-leave`，依此类推。
- en: 'Let''s rewrite the previous example with a named transition:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个命名过渡来重写前面的例子：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The code for this example is available in this CodePen: [https://codepen.io/AjdinImsirovic/pen/MPWqgm](https://codepen.io/AjdinImsirovic/pen/MPWqgm).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码可在此CodePen中找到：[https://codepen.io/AjdinImsirovic/pen/MPWqgm](https://codepen.io/AjdinImsirovic/pen/MPWqgm)。
- en: CSS animations with transition component
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过渡组件的CSS动画
- en: 'CSS animations are also employed with the help of the transition component.
    Here is an example of the previous example with CSS transition, converted into
    using a CSS animation. We''ll begin with HTML:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: CSS动画也可以通过过渡组件来实现。以下是将以CSS过渡为例的先前示例转换为使用CSS动画的示例。我们将从HTML开始：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we''ll add the following JavaScript code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加以下JavaScript代码：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We''ll add a few simple styles too:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也会添加一些简单的样式：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The code for this example is available here: [https://codepen.io/AjdinImsirovic/pen/vVEXEv](https://codepen.io/AjdinImsirovic/pen/vVEXEv).
    The converted animation is exactly the same as the previous example with CSS transitions,
    save for the change in animation behavior at 35% and 65% of animation completion.
    The effect that we get is sort of like a border color effect, even though we are
    changing the `background-color` property of this element. This confirms a few
    conclusions we already discussed, namely the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码在此处可用：[https://codepen.io/AjdinImsirovic/pen/vVEXEv](https://codepen.io/AjdinImsirovic/pen/vVEXEv)。转换后的动画与以前使用CSS过渡的示例完全相同，只是在动画完成的35%和65%处改变了动画行为。我们得到的效果有点像边框颜色效果，即使我们正在改变此元素的`background-color`属性。这证实了我们已经讨论过的一些结论，即以下内容：
- en: The `transition` element in Vue affects the appearance and disappearance of
    the entire `<transition>` component, rather than its contents
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue中的`transition`元素影响整个`<transition>`组件的出现和消失，而不是其内容
- en: The actual animation can have as many steps as needed; in other words, to get
    the exact same effect as we had in the CSS transition example, it would be enough
    to simply remove the steps we specified at 35% and 65% of animation completion
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际动画可以有许多步骤；换句话说，要获得与CSS过渡示例中相同的效果，只需简单地删除我们在动画完成的35%和65%处指定的步骤即可。
- en: In the next section, we'll discuss custom transition classes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论自定义过渡类。
- en: Custom transition classes
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义过渡类
- en: 'Custom transition classes are great when we want to add functionality from
    a third-party CSS animation library. In this example, we''ll be using the `Animate.CSS`
    animation library, available here: [https://daneden.github.io/animate.css/](https://daneden.github.io/animate.css/).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义过渡类在我们想要从第三方CSS动画库中添加功能时非常有用。在这个例子中，我们将使用`Animate.CSS`动画库，可以在这里找到：[https://daneden.github.io/animate.css/](https://daneden.github.io/animate.css/)。
- en: 'The official documentation covers the use of custom transition classes sufficiently
    at this URL: [https://vuejs.org/v2/guide/transitions.html#Custom-Transition-Classes](https://vuejs.org/v2/guide/transitions.html#Custom-Transition-Classes).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档在此URL上充分涵盖了自定义过渡类的使用：[https://vuejs.org/v2/guide/transitions.html#Custom-Transition-Classes](https://vuejs.org/v2/guide/transitions.html#Custom-Transition-Classes)。
- en: 'The only thing to add is the example we have been building on, available here:
    [https://codepen.io/AjdinImsirovic/pen/rqazXZ](https://codepen.io/AjdinImsirovic/pen/rqazXZ).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一需要添加的是我们一直在构建的示例，可以在这里找到：[https://codepen.io/AjdinImsirovic/pen/rqazXZ](https://codepen.io/AjdinImsirovic/pen/rqazXZ)。
- en: 'The code for the example is as follows. First, we''ll start with the HTML:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 示例的代码如下。首先，我们将从HTML开始：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, let''s see the JavaScript:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看JavaScript：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, inside our styles, we''ll set up some basic CSS declarations:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的样式中，我们将设置一些基本的CSS声明：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Basically, we specify attributes that have the same names as animation hooks,
    plus the additional `-class` at the end of the attribute name. Hence, the default
    `v-enter-active` CSS class becomes the custom `enter-active-class` HTML attribute.
    We then give this custom HTML attribute a value we choose. The value we give it
    is the class name of the effect we want to use from our CSS animation library
    we previously picked—in this case, the `Animate.CSS` library. In the previous
    code, we have also set the `:duration` prop, specifying the duration of the transition
    to be exactly 4000 miliseconds. Practically, in our example, this will only have
    an effect if the `:duration` prop we set is shorter than the duration of animations
    we provided from the third-party library. For example, try setting the `:duration`
    prop to 100 milliseconds and see the animation chopped off. This can create some
    interesting effects.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们指定了与动画钩子相同名称的属性，以及属性名称末尾的额外`-class`。因此，默认的`v-enter-active` CSS类变成了自定义的`enter-active-class`
    HTML属性。然后我们给这个自定义的HTML属性赋予我们选择的值。我们给它的值是我们之前选择的CSS动画库中要使用的效果的类名——在这种情况下是`Animate.CSS`库。在之前的代码中，我们还设置了`:duration`属性，指定过渡的持续时间为4000毫秒。在我们的示例中，如果我们设置的`:duration`属性比我们从第三方库提供的动画的持续时间短，这实际上只会产生效果。例如，尝试将`:duration`属性设置为100毫秒，看看动画被截断。这可能会产生一些有趣的效果。
- en: Combining transition modes, duration, keys, and v-if
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结合过渡模式、持续时间、键和v-if。
- en: 'Transition modes are used when we want to smoothly remove one element from
    the screen and seamlessly replace it with another one. The default transition
    mode that the `<transition>` component comes with, without any tweaks needed,
    is the simultaneous transition: one element is removed at the same time that another
    is added.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡模式用于在屏幕上平滑地移除一个元素，并无缝地替换为另一个元素。`<transition>`组件默认的过渡模式是同时过渡：一个元素被移除的同时另一个元素被添加。
- en: 'However, there are some transitions is which it would be better to have the
    new element appear, and only when this transition is complete does the old element
    get removed. This transition mode is referred to as the `in-out` transition mode.
    To add it, we simply use the custom mode HTML attribute, and give it the value
    of `in-out`, like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在某些过渡中，最好让新元素出现，只有当这个过渡完成时，旧元素才被移除。这种过渡模式被称为`in-out`过渡模式。要添加它，我们只需使用自定义模式HTML属性，并给它赋值`in-out`，就像这样：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Alternatively, we might want to use the `out-in` transition mode, where we first
    have the old element transition out, and only then, when the transition is complete,
    the new element transitions in.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可能想要使用`out-in`过渡模式，首先让旧元素过渡出去，然后，当过渡完成时，新元素才过渡进来。
- en: 'Let''s see this in practice. The example is available at this pen: [https://codepen.io/AjdinImsirovic/pen/yRyPed](https://codepen.io/AjdinImsirovic/pen/yRyPed).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看实际操作。示例可在此处找到：[https://codepen.io/AjdinImsirovic/pen/yRyPed](https://codepen.io/AjdinImsirovic/pen/yRyPed)。
- en: 'Here is the HTML:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HTML代码：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We are still using the same JS:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然使用相同的JS：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'There are some changes in our CSS:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的CSS发生了一些变化：
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We are switching on and off between two `button` elements inside our transition.
    Since these two have the same tag name, we need to give them different `key` attributes
    so Vue can distinguish them.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在转换过渡中在两个`button`元素之间切换开关。由于这两个元素具有相同的标签名称，我们需要给它们不同的`key`属性，以便Vue可以区分它们。
- en: Also, we are rendering our buttons conditionally. While we are keeping the check
    of `v-if="show"` in the first button, in the second button we are simply using
    the `v-else` directive, without giving it a value to check against.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们有条件地渲染我们的按钮。虽然我们在第一个按钮中保留了`v-if="show"`的检查，但在第二个按钮中，我们只是使用了`v-else`指令，而没有给它一个要检查的值。
- en: Binding CSS styles in Vue
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Vue中绑定CSS样式
- en: In this section, we'll discuss how to animate other parts of the page when a
    component is mounted or removed. For that, we will use the `v-bind` directive,
    and as we have seen in the previous chapters, we can use this directive to bind
    to HTML attributes. Once bound, these attributes can then be manipulated from
    our Vue instance.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论如何在组件挂载或移除时，对页面的其他部分进行动画处理。为此，我们将使用`v-bind`指令，正如我们在前几章中所看到的，我们可以使用这个指令来绑定HTML属性。一旦绑定，这些属性就可以从我们的Vue实例中进行操作。
- en: The example for which we will demonstrate CSS style binding is a simple onboarding
    demo. Onboarding, in terms of web page usability, is the practice of showing new
    users of a web app the overall functionality that a web page has, which is achieved
    by highlighting a certain section of a page and showing a popover with some information
    that further describes the functionality at that specific step of the onboarding
    process.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示CSS样式绑定的示例是一个简单的入职演示。在网页可用性方面，入职是向Web应用的新用户展示网页的整体功能的做法，这是通过突出显示页面的某个部分并显示一个包含一些信息的气泡窗口来实现的，进一步描述了入职过程中特定步骤的功能。
- en: 'To begin with, we need to understand that we can statically bind CSS classes
    by passing the value of the `v-bind:class` directive as an object, as in the following
    example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要了解，我们可以通过将`v-bind:class`指令的值作为对象来静态地绑定CSS类，就像下面的例子一样：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Inside the object, we can simply add CSS classes as keys, and Boolean `true`
    and `false` as values. CSS values that are set to `true` will be used, otherwise,
    they won''t, as in the following example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象内部，我们可以简单地将CSS类添加为键，将布尔值`true`和`false`作为值。设置为`true`的CSS值将被使用，否则将不会被使用，就像下面的例子一样：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this example, we are using the Bootstrap framework's CSS classes. We are
    setting the button to the class of `btn-primary`, as it is set to `true`, rather
    than the `btn-secondary`, which is set to false.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了Bootstrap框架的CSS类。我们将按钮设置为`btn-primary`类，因为它被设置为`true`，而不是`btn-secondary`，它被设置为false。
- en: 'Because the `v-bind` directive allows us to programatically control HTML attributes,
    we might make our app switch CSS classes on a click. For example, in a basic Vue
    app, we might do this in our HTML:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`v-bind`指令允许我们以编程方式控制HTML属性，所以我们可能会在点击时使我们的应用切换CSS类。例如，在一个基本的Vue应用中，我们可能会在我们的HTML中这样做：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the previous code, we are setting the classes of `btn`, `btn-lg`, and `btn-primary`
    to `true`, and we are setting the value of `btn-secondary` to `btnClicked`. Next,
    we''re going to set the value of `btnClicked` to `false` in our JavaScript:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们将`btn`、`btn-lg`和`btn-primary`的类设置为`true`，并将`btn-secondary`的值设置为`btnClicked`。接下来，我们将在JavaScript中将`btnClicked`的值设置为`false`：
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, we''ll add the click event to our button, so when it''s clicked, the
    value of `btnClicked` will be toggled from `true` to `false`, and vice versa.
    Here is the code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将为我们的按钮添加点击事件，因此当点击时，`btnClicked`的值将从`true`切换到`false`，反之亦然。以下是代码：
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This example is available at this URL: [https://codepen.io/AjdinImsirovic/pen/KGVvML](https://codepen.io/AjdinImsirovic/pen/KGVvML).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例可在以下网址找到：[https://codepen.io/AjdinImsirovic/pen/KGVvML](https://codepen.io/AjdinImsirovic/pen/KGVvML)。
- en: 'We can further expand on this example by using the `data` property to store
    groups of CSS classes, and a JavaScript ternary expression to check whether the
    `btnClicked` value is currently set to `true` or `false`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步扩展这个示例，使用`data`属性来存储一组CSS类，并使用JavaScript三元表达式来检查`btnClicked`值当前是否设置为`true`或`false`：
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The code for the previous example is available at [https://codepen.io/AjdinImsirovic/pen/wYMEJQ](https://codepen.io/AjdinImsirovic/pen/wYMEJQ).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个示例的代码可以在[https://codepen.io/AjdinImsirovic/pen/wYMEJQ](https://codepen.io/AjdinImsirovic/pen/wYMEJQ)找到。
- en: Animating a button on click with dynamic CSS classes
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动态CSS类在单击时为按钮添加动画
- en: 'Now, we are ready to add animations by virtue of simply adding additional CSS
    classes from the aforementioned Animate.CSS animation library. The updates to
    the previous example''s code are minimal. We are only adding two CSS classes here:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过简单地添加来自上述Animate.CSS动画库的额外CSS类来添加动画。对于前一个示例代码的更新很少。我们只在这里添加了两个CSS类：
- en: '[PRE28]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Of course, we also had to include the Animate.CSS library, as can be seen here: [https://codepen.io/AjdinImsirovic/pen/RerEyy](https://codepen.io/AjdinImsirovic/pen/RerEyy).
    To add the animation on both clicks, we simply alter the entry for `btnSecondary`
    to this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们还必须包括Animate.CSS库，如下所示：[https://codepen.io/AjdinImsirovic/pen/RerEyy](https://codepen.io/AjdinImsirovic/pen/RerEyy)。要在两次点击时添加动画，我们只需将`btnSecondary`的条目更改为：
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now, the button will be animated on every click.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按钮将在每次点击时都会有动画。
- en: Working with transition groups
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过渡组
- en: 'While a single transition component is used to wrap around a single element,
    transition groups are used for animating multiple elements. They come with an
    additional animation hook: `v-move`.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然单个过渡组件用于包装单个元素，但过渡组用于为多个元素添加动画。它们带有额外的动画钩子：`v-move`。
- en: 'In the example that follows, we''ll build simple functionality where users
    can award a piece of content online with an **applause***,* a concept similar
    to the clap feature of [https://medium.com/](https://medium.com/), which works
    as follows: if a visitor to the website likes a piece of content, they can award
    it with *claps*, by clicking the clap button up to 50 times. hence, the claps
    feature works like a kind of a counter of how much a piece of content is appreciated
    by the website visitors.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将构建一个简单的功能，用户可以在线奖励一段内容，类似于[https://medium.com/](https://medium.com/)的鼓掌功能，工作原理如下：如果网站的访问者喜欢一段内容，他们可以通过点击鼓掌按钮最多50次来奖励它。因此，鼓掌功能就像是网站访问者对一段内容的欣赏程度的计数器。
- en: 'In our implementation, we will combine the features we have already covered.
    The difference is, instead of a transition, we will use the `transition-group`
    component. This is the HTML code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实现中，我们将结合我们已经介绍的功能。不同之处在于，我们将使用`transition-group`组件而不是过渡。这是HTML代码：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here is the JS code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是JS代码：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And here is the CSS code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CSS代码：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The previous code is available as a pen at this URL: [https://codepen.io/AjdinImsirovic/pen/JmXJgd](https://codepen.io/AjdinImsirovic/pen/JmXJgd).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码可以在此URL作为笔记本使用：[https://codepen.io/AjdinImsirovic/pen/JmXJgd](https://codepen.io/AjdinImsirovic/pen/JmXJgd)。
- en: There are several things happening in this code. In HTML, we are using the `transition-group`
    component to work with two buttons. In JS, we set up the logic for the behavior
    of our claps. We begin the `clapCount` set to `false`, which coerces to zero.
    In CSS, we style the buttons and we employ the animation hooks. The `transform`
    and `transition` values have been set to extreme values, to be able to understand
    better how they work by playing around with the values (for instance, `1000 px`
    for the translate on the *X* axis, and `500 px` for the translate on the *Y* axis).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中发生了几件事情。在HTML中，我们使用`transition-group`组件来处理两个按钮。在JS中，我们设置了我们掌声行为的逻辑。我们开始将`clapCount`设置为`false`，这将强制转换为零。在CSS中，我们为按钮设置样式，并使用动画钩子。`transform`和`transition`的值已经设置为极端值，以便通过调整这些值来更好地理解它们的工作方式（例如，在*X*轴上的平移为`1000
    px`，在*Y*轴上的平移为`500 px`）。
- en: JavaScript animation hooks
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript动画钩子
- en: 'We can use Vue''s `transition` classes as JavaScript methods. Just like lifecycle
    hooks, we don''t have to access any of them. Or we can cherry-pick those that
    we want to use. To begin, inside our Vue constructor''s `methods` option, we could
    specify what to do with all of them:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将Vue的`transition`类用作JavaScript方法。就像生命周期钩子一样，我们不必访问它们中的任何一个。或者我们可以挑选出我们想要使用的那些。首先，在我们的Vue构造函数的`methods`选项中，我们可以指定要对所有这些方法做什么：
- en: '[PRE33]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As we can see, we have four methods for enter transitions and another four methods
    for leave transitions. All of the methods take in the `el` argument and the `enter`
    and `leave` methods also take in the `done` argument to signify the completion
    of an animation. If the `done` argument was not used, the hooks would be called
    without waiting for the `done` callback to complete, and the transition would
    be completed at once.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们有四种进入过渡的方法，另外还有四种离开过渡的方法。所有的方法都接受`el`参数，而`enter`和`leave`方法还接受`done`参数，表示动画完成。如果没有使用`done`参数，钩子将在不等待`done`回调完成的情况下被调用，过渡将立即完成。
- en: Let's rewrite the previous example using these JavaScript animation hooks. To
    keep things easy to understand, we will integrate the official documentation's
    example into our example, so that we can see how this example works when the animation
    hooks are called via JavaScript only.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这些JavaScript动画钩子来重写前面的例子。为了保持易于理解，我们将把官方文档的例子整合到我们的例子中，这样我们就可以看到当动画钩子仅通过JavaScript调用时，这个例子是如何工作的。
- en: 'This is the code we will use in our HTML:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将在HTML中使用的代码：
- en: '[PRE34]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This is the code we will use in our JS:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将在JS中使用的代码：
- en: '[PRE35]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here is the CSS:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是CSS：
- en: '[PRE36]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The example is available here: [https://codepen.io/AjdinImsirovic/pen/PyzqxM](https://codepen.io/AjdinImsirovic/pen/PyzqxM).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 示例在这里：[https://codepen.io/AjdinImsirovic/pen/PyzqxM](https://codepen.io/AjdinImsirovic/pen/PyzqxM)。
- en: With this understanding, it is easy to change parameters in the specific methods
    inside our Vue constructor to achieve the desired effect for our JavaScript-powered
    animations.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种理解，很容易在我们的Vue构造函数中更改特定方法中的参数，以实现我们JavaScript动画的期望效果。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at working with transitions and animations in Vue.js.
    Specifically, we examined how transitions and animations work in CSS. We examined
    the differences between transitions and animations in CSS and established the
    rules for both. We worked with the transition and transition-group elements in
    Vue, and we discussed animation hooks and their grouping into enter and leave
    transitions. We saw how transition components can be named and, given key values
    and how we can assign custom transition classes for easier integration with third-party
    animation libraries.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们讨论了在Vue.js中使用过渡和动画。具体来说，我们研究了CSS中过渡和动画的工作原理。我们分析了CSS中过渡和动画的区别，并建立了它们的规则。我们使用了Vue中的过渡和过渡组件，并讨论了动画钩子及其分组进入和离开过渡。我们看到了过渡组件如何命名，并给定了键值，以及如何分配自定义过渡类，以便更轻松地与第三方动画库集成。
- en: We explained when to use transition modes and how to further tweak our animations
    with `:duration` and `conditional` directives. We mentioned the importance of
    binding CSS styles in Vue and how this approach can be used for adding animations
    to our web apps. Finally, we saw how to convert CSS class-based transitions into
    JavaScript-based animation hooks.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解释了何时使用过渡模式，以及如何使用`:duration`和`conditional`指令进一步调整我们的动画。我们提到了在Vue中绑定CSS样式的重要性，以及这种方法如何用于为我们的Web应用程序添加动画。最后，我们看到了如何将基于CSS类的过渡转换为基于JavaScript的动画钩子。
- en: In the next chapter, we will discuss how to use Vuex.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何使用Vuex。
