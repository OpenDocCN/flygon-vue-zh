- en: '*Chapter 9*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*'
- en: Snapshot Testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快照测试
- en: So far, you've seen how you can test the structure, styles, methods, computed
    properties, events, watchers, and more of Vue.js components. And you've learned
    to do this by using a variety of techniques and methods.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到了如何测试Vue.js组件的结构、样式、方法、计算属性、事件、观察者等等。你已经学会了通过使用各种技术和方法来做到这一点。
- en: But what if I tell you that you can test most of it by simply using snapshot
    testing?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我告诉你，你可以通过简单地使用快照测试来测试大部分内容呢？
- en: You've already seen snapshot testing being used in *Chapter 1, Write the first
    Vue.js Component Unit Test in Jest* and *Chapter 2*, *Test Deeply Rendered Vue.js
    Components* but those chapters focused more on explaining shallow and deep rendering,
    so I haven't yet explained it in detail.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在*第1章，使用Jest编写第一个Vue.js组件单元测试*和*第2章，深度测试Vue.js组件*中看到了快照测试的使用，但这些章节更多地侧重于解释浅渲染和深渲染，所以我还没有详细解释过它。
- en: '**Snapshot testing** is the technique of assertion by comparing two different
    outputs.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 快照测试是通过比较两个不同的输出来进行断言的技术。
- en: 'Think of it as something similar to the screenshot technique used in end-to-end
    tests to check regressions: the first test run takes a screenshot of a part of
    the screen (for instance, a button), and, from that moment on, all the following
    runs of the same test will compare a new screenshot with the original one. If
    they''re the same, the test passes; otherwise, there is a regression.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 把它想象成类似于端到端测试中用于检查回归的屏幕截图技术：第一次测试运行时会对屏幕的一部分（例如一个按钮）进行截图，从那一刻起，同一个测试的所有后续运行都会将新的截图与原始截图进行比较。如果它们相同，测试通过；否则就会有回归。
- en: Snapshot testing works in the same way, but instead of comparing images, it
    compares serializable output, such as JSON and HTML, or just strings.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 快照测试的工作方式类似，但它不是比较图像，而是比较可序列化的输出，比如JSON和HTML，或者只是字符串。
- en: Since Vue.js renders HTML, you can use snapshot testing to assert the rendered
    HTML, given different states of a component.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Vue.js渲染HTML，你可以使用快照测试来断言组件在不同状态下渲染的HTML。
- en: Rethinking in Snapshots
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新思考快照
- en: 'For this example, let''s consider the following `ContactBox.vue` component:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，让我们考虑以下的`ContactBox.vue`组件：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this case, we can test several aspects of this component:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以测试这个组件的几个方面：
- en: '`fullName` is the combination of `name` + `surname`.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fullName`是`name` + `surname`的组合。'
- en: It has a `selected` class when the component is selected.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当组件被选中时，它具有`selected`类。
- en: It emits a `contact-click` event.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它会触发`contact-click`事件。
- en: One way to create tests that validate these specifications would be to check
    everything separately – the classes attached to the DOM elements, the HTML structure,
    the computed properties, and the state.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建验证这些规范的测试的一种方法是分别检查所有内容 - 附加到DOM元素的类、HTML结构、计算属性和状态。
- en: 'As you''ve seen in other chapters, you could perform these tests as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在其他章节中看到的，你可以按照以下方式执行这些测试：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But now, let's think about how snapshot testing can help us here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，让我们想一想快照测试如何帮助我们。
- en: If you think about it, the component renders according to its state. Let's refer
    to this as the **rendering state**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细想想，组件会根据它的状态进行渲染。让我们把这称为**渲染状态**。
- en: With snapshot testing, instead of worrying about checking for specific things,
    such as attributes, classes, methods, and computed properties, we can instead
    check the rendering state, as this is the projected result of the component state.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过快照测试，我们可以不用担心检查特定的东西，比如属性、类、方法和计算属性，而是可以检查渲染状态，因为这是组件状态的预期结果。
- en: 'For this, you can use snapshot testing for the previous test as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你可以按照以下方式对先前的测试使用快照测试：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, instead of now checking things separately, I'm just asserting
    the snapshot of `cmp.element`, this being the rendered HTML of the component.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，现在不再单独检查事物，我只是断言`cmp.element`的快照，这是组件的呈现HTML。
- en: 'If you run the test suite now, a `ContactBox.test.js.snap` file should have
    been created and you''ll see a message in the console output as well:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在运行测试套件，应该已经创建了一个`ContactBox.test.js.snap`文件，并且您还会在控制台输出中看到一条消息：
- en: '![Figure 9.1'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1'
- en: '](image/Image56419.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Image56419.jpg)'
- en: Figure 9.1
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1
- en: 'Let''s analyze the snapshot generated:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析生成的快照：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The purpose of this test is to check that the computed property, `fullName`,
    combines both the name and surname, separated by a space. Looking at the snapshot,
    you can see that this is happening and that *John Doe* is there, so you may consider
    this test valid.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试的目的是检查计算属性`fullName`是否将名字和姓氏结合起来，用空格分隔。从快照中可以看出，这是发生的，*John Doe*在那里，所以您可以认为这个测试是有效的。
- en: 'In the same way, you can write the second test using snapshot testing:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您也可以使用快照测试编写第二个测试：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that the only aspect that changes between this test and the previous
    one is the setting of the `selected` property to `true`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个测试和上一个测试之间唯一改变的方面是将`selected`属性设置为`true`。
- en: 'That''s the power of snapshot testing: you play with *different states of the
    components*, while you just need to assert the rendering state.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是快照测试的威力：您可以玩弄*组件的不同状态*，而只需断言呈现状态。
- en: 'The purpose of this test is to validate that it has a `selected` class when
    the property is `true`. Now, let''s run the test suite again, and if you check
    `ContactBox.test.js.snap` again, you''ll see that another snapshot has been added:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试的目的是验证当属性为`true`时它是否具有`selected`类。现在，让我们再次运行测试套件，如果再次检查`ContactBox.test.js.snap`，您会看到另一个快照已经被添加：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And the selected class is there, as expected, so we can consider this one to
    also be valid.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 并且所选的类在那里，正如预期的那样，所以我们可以认为这个也是有效的。
- en: When Snapshot Testing Doesn't Help
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当快照测试无法帮助时
- en: 'Have you noticed that I didn''t mention anything about the third test? To recall
    this test, let''s check it again:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否注意到我没有提及第三个测试？为了回忆这个测试，让我们再次检查它：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this case, when the component is clicked, it doesn't perform any action that
    changes the component state, which means that the rendering state won't change.
    We're just testing behavior here that has no effect on the rendering of the component.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当组件被点击时，它不执行任何改变组件状态的操作，这意味着呈现状态不会改变。我们在这里只是测试对组件呈现没有影响的行为。
- en: For that reason, we can say that *snapshot testing is useful for checking changes
    in the rendering state*. If the rendering state doesn't change, there is no way
    that snapshot testing can help us.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以说*快照测试对于检查呈现状态的变化是有用的*。如果呈现状态不改变，快照测试就无法帮助我们。
- en: When a Test Fails
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当测试失败时
- en: The snapshots generated are the source of truth when it comes to deciding whether
    a test is valid. That's the way regressions are checked, and, ultimately, that
    depends on your criteria.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的快照是决定测试是否有效的真相来源。这就是检查回归的方式，最终取决于您的标准。
- en: 'For example, go to the `ContactBox.vue` component and change the `fullName`
    computed property to be separated by a comma:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，转到`ContactBox.vue`组件，并将`fullName`计算属性更改为用逗号分隔：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you run the tests again, some of them will fail since the rendering result
    is different from before. You''ll get an error along the lines of the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您再次运行测试，其中一些测试将失败，因为呈现结果与以前不同。您将收到以下类似的错误：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'From that point on, as it''s usually in relation to testing, you must decide
    whether that''s an intentional change or whether it''s a regression. You can press
    *''u''* in order to update the snapshots:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，通常与测试相关，你必须决定这是一个有意的变化还是一个回归。你可以按下*'u'*来更新快照：
- en: '![Figure 9.2'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2'
- en: '](image/Image56429.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Image56429.jpg)'
- en: Figure 9.2
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2
- en: 'It would be convenient when applying TDD to use the watch mode, `npm run test
    -- --watch`. This would be very convenient since Jest gives you a number of options
    for updating snapshots:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用TDD时使用观察模式`npm run test -- --watch`会很方便。这将非常方便，因为Jest为更新快照提供了许多选项：
- en: Press **'u'** to update all snapshots.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下**'u'**以更新所有快照。
- en: Press **'i'** to update snapshots interactively, one by one.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下**'i'**以交互方式逐个更新快照。
- en: Conclusion
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Snapshot testing **saves you a lot of time**. This example was basic, but imagine
    testing a more complex component with many different rendering states...
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 快照测试**节省了大量时间**。这个例子很基础，但想象一下测试一个具有许多不同渲染状态的更复杂的组件...
- en: Sure, you can assert in relation to specific things, but that's much more cumbersome
    than asserting how the component is rendered depending on the state, since, most
    of the time, if you change the code, you have to change the assertions in relation
    to the tests, while, with snapshot testing, you don't need to.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以针对特定事物进行断言，但这比根据状态断言组件的渲染方式要麻烦得多，因为大多数情况下，如果你改变了代码，就必须根据测试改变断言，而使用快照测试则不需要。
- en: Additionally, you can **find regressions** that you didn't take into account,
    perhaps something you didn't consider in your tests, or something that has changed
    the rendering of the component, but the snapshots will alert you to this.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以**发现**你没有考虑到的**回归**，也许是你在测试中没有考虑到的东西，或者是改变了组件的渲染，但快照会提醒你这一点。
- en: 'I would now like to mention a number of **caveats** that you should remember:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在想提到一些你应该记住的**注意事项**：
- en: Snapshot testing doesn't replace specific assertions. While it can do so most
    of the time, both ways of testing are totally combinable.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照测试并不取代特定的断言。虽然大多数情况下可以这样做，但两种测试方式完全可以结合使用。
- en: Don't update snapshots too easily. If you see that a test fails because it doesn't
    match a snapshot, take an in-depth look at it before updating it too quickly.
    I've been there as well.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要太轻易地更新快照。如果你发现一个测试失败是因为它与快照不匹配，那么在太快更新之前，仔细研究一下。我也有过这样的经历。
- en: If you want to try it yourself, you can find the full example used in this chapter
    on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/chapter-9](https://github.com/alexjoverm/vue-testing-series/tree/chapter-9)).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想自己尝试一下，你可以在**GitHub**上找到本章中使用的完整示例（[https://github.com/alexjoverm/vue-testing-series/tree/chapter-9](https://github.com/alexjoverm/vue-testing-series/tree/chapter-9)）。
