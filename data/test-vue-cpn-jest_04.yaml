- en: '*Chapter 4*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第四章*'
- en: Test Properties and Custom Events
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试属性和自定义事件
- en: There are different ways to test properties, events, and custom events.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的方法来测试属性、事件和自定义事件。
- en: 'Properties are custom attributes that are passed down from parent components
    to child components. Custom events do just the opposite: they send data out to
    the direct parent via an event. When they are combined, they are the wires of
    interaction and communication in Vue.js components.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 属性是从父组件传递到子组件的自定义属性。自定义事件则恰恰相反：它们通过事件将数据发送到直接父级。当它们结合在一起时，它们是Vue.js组件中交互和通信的线路。
- en: In unit testing, testing the ins and outs (properties and custom events) means
    testing how a component behaves when it receives and sends out data in isolation.
    So, let's get our hands dirty.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在单元测试中，测试内部和外部（属性和自定义事件）意味着测试组件在隔离状态下接收和发送数据的行为。所以，让我们动手吧。
- en: Properties
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性
- en: 'When we are testing component properties, we can test how the component behaves
    when we pass it certain properties. However, before going on, consider this important
    note:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们测试组件属性时，我们可以测试当我们传递某些属性时组件的行为。然而，在继续之前，请考虑这个重要的注意事项：
- en: To pass properties to components, use `propsData` and not `props`. The latter
    is used to define properties, not to pass data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要将属性传递给组件，请使用`propsData`而不是`props`。后者用于定义属性，而不是传递数据。
- en: 'First, create a `Message.test.js` file and add the following code:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个`Message.test.js`文件并添加以下代码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We group test cases within a `describe` expression, and they can be nested.
    So, we can use this strategy to group the tests for properties and events separately.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`describe`表达式中对测试用例进行分组，它们可以被嵌套。因此，我们可以使用这种策略来分别对属性和事件进行分组测试。
- en: 'Then, we''ll create a helper factory function to create a message component,
    and give it some properties:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个辅助工厂函数来创建一个消息组件，并给它一些属性：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Testing Property Existence
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试属性的存在性
- en: 'The most obvious thing that we can test is whether or not a property exists.
    Remember that the `Message.vue` component has a `message` property, so let''s
    assume it receives that property correctly. vue-test-utils comes with a `hasProp(prop,
    value)` function, which is very handy for this case:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以测试的最明显的事情是属性是否存在。记住`Message.vue`组件有一个`message`属性，所以让我们假设它正确接收了该属性。vue-test-utils带有一个`hasProp(prop,
    value)`函数，对于这种情况非常方便：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Properties behave in such a way that they will only be received if they''re
    declared in the component. This means that if we pass a **property that is not
    defined, then it won''t be received**. Therefore, to check for the non-existence
    of a property, you could use a non-existing property:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 属性的行为是这样的，只有在组件中声明了它们才会被接收。这意味着如果我们传递了一个未定义的属性，那么它就不会被接收。因此，要检查属性的不存在，可以使用一个不存在的属性：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, in this case, the test will fail because Vue has **non-props attributes**
    ([https://vuejs.org/v2/guide/components.html#Non-Prop-Attributes](https://vuejs.org/v2/guide/components.html#Non-Prop-Attributes)).
    This sets it to the root of the `Message` component, thus being recognized as
    a prop, so the test will then return `true`. Changing it to `toBeTruty` will make
    it pass for this example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这种情况下，测试将失败，因为Vue具有非props属性。这将其设置为`Message`组件的根部，因此被识别为一个prop，因此测试将返回`true`。将其更改为`toBeTruty`将使其通过此示例：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can test the **default value** as well. Go to `Message.vue` and change the
    `props` as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以测试**默认值**。转到`Message.vue`并将`props`更改如下：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, the test could be as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，测试可以如下所示：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Asserting Properties Validation
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言属性验证
- en: 'Properties can have validation rules, ensuring that a property is required
    or that it is of a determined type. Let''s write the `message` property as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 属性可以具有验证规则，确保属性是必需的或者是确定类型的。让我们将`message`属性编写如下：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Going further, you could use custom constructors types or custom validation
    rules, as you can see in `the documentation` ([https://vuejs.org/v2/guide/components.html#Prop-Validation](https://vuejs.org/v2/guide/components.html#Prop-Validation)).
    Don''t do this right now; I''m just showing it as an example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步，您可以使用自定义构造函数类型或自定义验证规则，如您可以在`文档`中看到的（[https://vuejs.org/v2/guide/components.html#Prop-Validation](https://vuejs.org/v2/guide/components.html#Prop-Validation)）。现在不要这样做；我只是举个例子：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Whenever a validation rule is not fulfilled, Vue shows a `console.error`. For
    example, for `createCmp({ message: 1 })`, the error would be as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '每当验证规则不满足时，Vue会显示`console.error`。例如，对于`createCmp({ message: 1 })`，错误将如下所示：'
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'At the time of writing, `vue-test-utils` doesn''t have a utility to test this.
    We could use `jest.spyOn` to test it instead:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`vue-test-utils`没有用于测试这一点的实用程序。我们可以使用`jest.spyOn`来代替测试：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we're spying on the `console.error` function, and checking that it shows
    a message containing a specific string. This is not an ideal way to check it since
    we're spying on global objects and relying on side effects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在监视`console.error`函数，并检查它是否显示包含特定字符串的消息。这不是检查它的理想方式，因为我们正在监视全局对象并依赖副作用。
- en: 'Fortunately, there is an easier way to do it, which is by checking `vm.$options`.
    Here''s where Vue stores the component options expanded. By expanded, I mean that
    you can define your properties in different ways:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一种更简单的方法来做到这一点，那就是通过检查`vm.$options`。这是Vue存储的组件选项的扩展。通过扩展，我的意思是您可以以不同的方式定义属性：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'But they all will end up in the most expanded object form (such as the last
    one). So, if we check the `cmp.vm.$option.props.message` for the first case, they
    all will be in `{ type: X }` format (although, for the first example, it will
    be `{ type: null}`).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '但它们最终都会以最扩展的对象形式结束（例如最后一个）。因此，如果我们检查第一个案例的`cmp.vm.$option.props.message`，它们都将以`{
    type: X }`格式存在（尽管对于第一个示例，它将是`{ type: null}`）。'
- en: 'With this in mind, we could write a test suite to test that the `message` property
    has the expected validation rules:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们可以编写一个测试套件来测试`message`属性是否具有预期的验证规则：
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Custom Events
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义事件
- en: 'We can test at least two things in custom events:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在自定义事件中测试至少两件事：
- en: Asserting that an event gets triggered after an action
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断言在动作之后触发了事件
- en: Checking that an event listener calls when it gets triggered
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查事件监听器在触发时是否调用
- en: 'This, in the case of the `MessageList.vue` and `Message.vue` components example,
    gets translated to the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MessageList.vue`和`Message.vue`组件示例中，这被翻译为以下内容：
- en: Assert that the `Message` components trigger a `message-clicked` when a message
    is clicked.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断言`Message`组件在单击消息时触发`message-clicked`。
- en: Check `MessageList` to ensure that when a `message-clicked` is triggered, a
    `handleMessageClick` function is called
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查`MessageList`以确保当触发`message-clicked`时，会调用`handleMessageClick`函数
- en: 'First, go to `Message.vue` and use `$emit` to trigger that custom event:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，转到`Message.vue`并使用`$emit`来触发自定义事件：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, in `MessageList.vue`, handle the event using `@message-clicked`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`MessageList.vue`中，使用`@message-clicked`处理事件：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now it''s time to write a unit test. Create a nested `describe` within the
    `test/Message.spec.js` file and prepare the bare bones of the *"Assert that the*
    `Message` *components trigger a* `message-clicked` *when a message gets clicked"*
    that we mentioned before:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候编写单元测试了。在`test/Message.spec.js`文件中创建一个嵌套的`describe`，并准备前面提到的*"断言`Message`组件在单击消息时触发`message-clicked`"*的基本内容：
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Testing that the Event Click Calls a Method Handler
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试事件点击是否调用了方法处理程序
- en: 'The first thing we can test is that when clicking a message, the `handleClick`
    function gets called. For that, we can use a `trigger` of the wrapper component,
    and a Jest spy using the `spyOn` function:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以测试的第一件事是，当点击消息时，`handleClick`函数是否被调用。为此，我们可以使用包装组件的`trigger`和使用`spyOn`函数的Jest间谍：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See the `cmp.update()`. When we change things that are used in the template
    – `handleClick`, in this case – and we want the template to apply the changes,
    we need to use the `update` function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`cmp.update()`。当我们更改模板中使用的内容 - 在这种情况下是`handleClick` - 并且我们希望模板应用这些更改时，我们需要使用`update`函数。
- en: 'Bear in mind that, by using a spy, the original `handleClick` method will be
    called. You will probably intentionally want that; however, normally, we want
    to avoid it and just check that on click, the method is indeed called. For that,
    we can use a Jest Mock function:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，通过使用间谍，将调用原始的`handleClick`方法。你可能有意想要这样做；然而，通常情况下，我们希望避免这种情况，只需检查点击时是否确实调用了该方法。为此，我们可以使用Jest
    Mock函数：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, we're totally replacing the `handleClick` method, which is accessible
    on the `vm` of the wrapper component returned by the `mount` function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们完全替换了`vm`的`mount`函数返回的包装组件上可访问的`handleClick`方法。
- en: 'We can make it even easier by using the `setMethods` helper that the official
    tools provide us with:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用官方工具提供的`setMethods`助手来使其更加简单：
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using `setMethods` is the suggested way to do it, since it is an abstraction
    that official tools give us in case the Vue internals change.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`setMethods`是建议的方法，因为它是官方工具在Vue内部发生变化时提供给我们的抽象。
- en: Testing that the Custom Event message-clicked Is Emitted
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试自定义事件message-clicked是否被触发
- en: 'We''ve tested that the click method calls its handler, but we haven''t tested
    whether the handler emits the `message-clicked` event itself. We can directly
    call the `handleClick` method, and use a Jest Mock function in combination with
    the Vue `vm` `$on` method:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经测试了点击方法是否调用了其处理程序，但我们还没有测试处理程序是否发出了`message-clicked`事件。我们可以直接调用`handleClick`方法，并结合Vue的`vm`
    `$on`方法使用Jest Mock函数：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See that, here, we're using `toBeCalledWith`, so we can assert exactly which
    parameters we expect, making the test even more robust. That's not to say we're
    not using `cmp.update()` here since we're making no changes that need to propagate
    to the template.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里我们使用了`toBeCalledWith`，因此我们可以确切断言我们期望的参数，使测试更加健壮。这并不是说我们在这里没有使用`cmp.update()`，因为我们没有进行需要传播到模板的更改。
- en: Testing that @message-clicked Triggers an Event
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试@message-clicked是否触发了事件
- en: 'For custom events, we cannot use the `trigger` method, since it''s just for
    DOM events. However, we can emit the event ourselves, by getting the `Message`
    component and using its `vm.$emit` method. So, add the following test to `MessageList.test.js`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自定义事件，我们不能使用`trigger`方法，因为它只适用于DOM事件。但是，我们可以通过获取`Message`组件并使用其`vm.$emit`方法来自己发出事件。因此，在`MessageList.test.js`中添加以下测试：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: I'll leave it up to you to test what `handleMessageClicked` does.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把测试`handleMessageClicked`的工作留给你。
- en: Wrapping Up
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've explored several cases of testing properties and events.
    `vue-test-utils`, the official Vue testing tool, makes this much easier indeed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了测试属性和事件的几种情况。`vue-test-utils`，官方的Vue测试工具，确实使这变得更加容易。
- en: You can find the working code we've used here on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/Test-Properties-and-Custom-Events-in-Vue-js-Components-with-Jest](https://github.com/alexjoverm/vue-testing-series/tree/Test-Properties-and-Custom-Events-in-Vue-js-Components-with-Jest)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在**GitHub**上找到我们使用的工作代码（[https://github.com/alexjoverm/vue-testing-series/tree/Test-Properties-and-Custom-Events-in-Vue-js-Components-with-Jest](https://github.com/alexjoverm/vue-testing-series/tree/Test-Properties-and-Custom-Events-in-Vue-js-Components-with-Jest)）。
