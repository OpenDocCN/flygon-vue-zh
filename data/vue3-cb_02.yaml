- en: Introducing TypeScript and the Vue Ecosystem
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍TypeScript和Vue生态系统
- en: TypeScript is a new Vue-based language, fully supported on **Vue 3**. It is
    now possible to use typed JSX (also know as TSX), type annotation, static verification
    of the code, and much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是一种基于Vue的新语言，在**Vue 3**上得到了充分支持。现在可以使用类型化的JSX（也称为TSX），类型注解，代码的静态验证等等。
- en: The Vue ecosystem is getting bigger each day, so to help us, the Vue team has
    developed some tools to improve project handling and management. Those tools are
    Vue CLI and Vue UI, which today are the main tools for local Vue development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Vue生态系统每天都在变得更加庞大，为了帮助我们，Vue团队开发了一些工具来改善项目处理和管理。这些工具是Vue CLI和Vue UI，它们是本地Vue开发的主要工具。
- en: The Vue CLI tool is the beginning of every project; with it, you will be able
    to select the basic features or just a preset you had made, to create a new Vue
    project. After a project is created, you can use Vue UI to manage the project,
    add new features, check the status of the project, and do almost everything you
    previously needed to do in the command-line interface (CLI), with the addition
    of more features.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Vue CLI工具是每个项目的开始；通过它，你可以选择基本功能或者你之前创建的预设，来创建一个新的Vue项目。项目创建后，你可以使用Vue UI来管理项目，添加新功能，检查项目的状态，以及几乎可以在命令行界面（CLI）中做的所有事情，还有更多功能。
- en: In these chapters, you learn more about TypeScript as a superset on JavaScript
    and how to use the power of the Vue CLI tool and Vue UI together to get a whole
    application up and running.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些章节中，你将更多地了解TypeScript作为JavaScript的扩展，以及如何使用Vue CLI工具和Vue UI一起来启动和运行整个应用程序。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating a TypeScript project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个TypeScript项目
- en: Understanding TypeScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解TypeScript
- en: Creating your first TypeScript class
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个TypeScript类
- en: Creating your first project with Vue CLI
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue CLI创建你的第一个项目
- en: Adding plugins to a Vue CLI project with Vue UI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue UI向Vue CLI项目添加插件
- en: Adding TypeScript to a Vue CLI project
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将TypeScript添加到Vue CLI项目中
- en: Creating your first TypeScript Vue component with `vue-class-component`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`vue-class-component`创建你的第一个TypeScript Vue组件
- en: Creating a custom mixin with `vue-class-component`
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`vue-class-component`创建自定义mixin
- en: Creating a custom function decorator with `vue-class-component`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`vue-class-component`创建自定义函数装饰器
- en: Adding custom hooks to `vue-class-component`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将自定义钩子添加到`vue-class-component`
- en: Adding `vue-property-decorator` to `vue-class-component`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`vue-property-decorator`添加到`vue-class-component`
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using **Node.js**, **Vue CLI**, and **TypeScript**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用**Node.js**，**Vue CLI**和**TypeScript**。
- en: 'Attention, Windows users—you need to install an `npm` package called `windows-build-tools` to
    be able to install the following required packages. To do it, open PowerShell
    as administrator and execute the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Windows用户需要安装一个名为`windows-build-tools`的npm包，以便安装以下所需的包。要做到这一点，以管理员身份打开PowerShell并执行以下命令：
- en: '`> npm install -g windows-build-tools`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`。'
- en: 'To install the **Vue CLI** tool, open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**Vue CLI**工具，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），执行以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install **TypeScript**, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**TypeScript**，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），执行以下命令：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating a TypeScript project
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个TypeScript项目
- en: TypeScript is a typed superset of JavaScript that, when compiled, gives us plain
    JavaScript code. It seems like a new language, but in the end, it's still JavaScript.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是JavaScript的类型扩展，在编译时会生成纯JavaScript代码。它看起来像是一种新语言，但最终还是JavaScript。
- en: What is the advantage of using TypeScript? The main advantage is the typed syntax,
    which helps with static checking and code refactoring. You can still use all the
    JavaScript libraries and program with the latest ECMAScript features out of the
    box.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript的优势是什么？主要优势在于类型化的语法，有助于静态检查和代码重构。您仍然可以使用所有JavaScript库，并且可以直接使用最新的ECMAScript功能进行编程。
- en: When compiled, TypeScript will deliver a pure JavaScript file that can run on
    any browser, Node.js, or any JavaScript engine that is capable of executing ECMAScript
    3 or newer versions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后，TypeScript将生成一个纯JavaScript文件，可以在任何浏览器、Node.js或任何能够执行ECMAScript 3或更新版本的JavaScript引擎上运行。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To start our project, we will need to create an `npm` project. Open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的项目，我们需要创建一个`npm`项目。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You also need to install TypeScript, so open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要安装TypeScript，因此打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With our environment ready, we will need to start our TypeScript project. Let''s
    create a `.ts` file and compile it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 环境准备就绪后，我们需要启动我们的TypeScript项目。让我们创建一个`.ts`文件并进行编译：
- en: 'To start our TypeScript project, open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动我们的TypeScript项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will create a `tsconfig.json` file inside our folder. This is a compiler
    settings file. Here, you can define the target, which JavaScript libraries will
    be available on the development, the target ECMAScript version, the module generation,
    and much more.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在我们的文件夹中创建一个`tsconfig.json`文件。这是一个编译器设置文件。在这里，您可以定义目标，开发中可用的JavaScript库，目标ECMAScript版本，模块生成等等。
- en: When developing for the web, don't forget to add the **Document Object Model**
    (**DOM**) to the libraries on the `compilerOption` property inside the `tsconfig.json` file
    so that you can have access to the window and document object when developing.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在为Web开发时，不要忘记在`tsconfig.json`文件的`compilerOption`属性中添加**文档对象模型**（**DOM**）库，这样在开发时就可以访问window和document对象。
- en: 'Now, we need to create our `index.ts` file. Let''s create some simple code
    inside the `index.ts` file that will log a math calculation in your terminal:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建我们的`index.ts`文件。让我们在`index.ts`文件中创建一些简单的代码，以便在终端中记录一个数学计算：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This function receives two parameters, `a` and `b`, which both have their type
    set to `number`, and the function is expected to return a `number`. We made two
    variables, `firstNumber`and `secondNumber`, which in this case are both set to
    a `number` type—`10` and `20` respectively—so, it's valid to pass to the function.
    If we had set it to any other type such as a string, Boolean, float, or an array,
    the compiler would have thrown an error about the static type checking on the
    variable and the function execution.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接收两个参数，`a`和`b`，它们的类型都设置为`number`，并且函数预计返回一个`number`。我们创建了两个变量，`firstNumber`和`secondNumber`，在这种情况下都设置为`number`类型——分别是`10`和`20`，因此，将它们传递给函数是有效的。如果我们将它们设置为其他类型，比如字符串、布尔值、浮点数或数组，编译器会在变量和函数执行的静态类型检查方面抛出错误。
- en: 'Now, we need to compile this code to a JavaScript file. Open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将这段代码编译成JavaScript文件。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After the compilation, we can see the final file in `index.js`. If we look
    inside the file, the final code will be similar to this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后，我们可以在`index.js`中看到最终文件。如果我们查看文件内部，最终代码将类似于这样：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You may be wondering: *where are my types?* As ECMAScript is a dynamic language,
    the types of TypeScript exist only at the superset level, and won''t be passed
    down to the JavaScript file.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：“我的类型在哪里？”由于ECMAScript是一种动态语言，TypeScript的类型只存在于超集级别，并不会传递到JavaScript文件中。
- en: Your final JavaScript will be in the form of a transpiled file, with the configurations
    defined in the `tsconfig.json` file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你的最终JavaScript文件将以转译文件的形式存在，其中包含在`tsconfig.json`文件中定义的配置。
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we create our TypeScript project, a file named `tsconfig.json` is created
    inside our folder. This file coordinates all the rules on the compiler and the
    static type checking during the development process. All developments are based
    on the rules defined in this file. Each environment depends on specific rules
    and libraries that need to be imported.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建TypeScript项目时，一个名为`tsconfig.json`的文件会在我们的文件夹中创建。这个文件协调了编译器和开发过程中的静态类型检查的所有规则。所有的开发都基于这个文件中定义的规则。每个环境都依赖于需要导入的特定规则和库。
- en: When developing, we can assign types directly to constants, variables, function
    parameters, returns, and much more. These types of definitions can prevent basic
    type errors and code refactoring.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，我们可以直接为常量、变量、函数参数、返回值等分配类型。这些类型定义可以防止基本类型错误和代码重构。
- en: After the development is done and we compile the project, the final product
    will be a pure JavaScript file. This file won't have any type of checking, due
    to the dynamic type of JavaScript.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 开发完成并编译项目后，最终产品将是一个纯JavaScript文件。由于JavaScript的动态类型，这个文件不会有任何类型检查。
- en: This JavaScript file gets transpiled to the target model and defined on the
    configuration file, so we can execute it without any problems.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个JavaScript文件被转译成目标模型，并在配置文件中定义，所以我们可以无问题地执行它。
- en: See also
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about TypeScript at [https://www.typescriptlang.org/docs/home.html](https://www.typescriptlang.org/docs/home.html).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.typescriptlang.org/docs/home.html](https://www.typescriptlang.org/docs/home.html)找到有关TypeScript的更多信息。
- en: There is a guide to migrating from JavaScript at [https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html](https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个关于从JavaScript迁移的指南在[https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html](https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html)。
- en: A 5-minute lesson for TypeScript can be found at [https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html)找到一个关于TypeScript的5分钟课程。
- en: Understanding TypeScript
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解TypeScript
- en: TypeScript is a type-based language. Much of its power comes with the ability
    to use static code analysis with JavaScript. This is possible thanks to the tools
    that exist inside the TypeScript environment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是一种基于类型的语言。它的很多功能来自于能够使用静态代码分析与JavaScript。这得益于存在于TypeScript环境内的工具。
- en: These tools include the compiler, which can provide static analysis during development
    and after compilation, and the ECMAScript transpiler, which can make your code
    available to run on almost any JavaScript engine.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具包括编译器，在开发过程中和编译后可以提供静态分析，以及ECMAScript转译器，可以使您的代码在几乎任何JavaScript引擎上运行。
- en: Let's get to know more about the language, and how it works.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更多地了解这种语言，以及它是如何工作的。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好了吗？
- en: 'To start, we will need to create an `npm` project. Open Terminal (macOS or
    Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个`npm`项目。打开Terminal（macOS或Linux）或Command Prompt/PowerShell（Windows）并执行以下命令：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You also need to install TypeScript, so open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要安装TypeScript，因此打开Terminal（macOS或Linux）或Command Prompt/PowerShell（Windows）并执行以下命令：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Types
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: The main feature we get from using TypeScript is the **types**. In this section,
    we will learn about types, how to declare them, and how to use them.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript的主要特性是**类型**。在本节中，我们将学习有关类型的知识，如何声明它们以及如何使用它们。
- en: 'These are some of the basic types in a statically typed language:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是静态类型语言中的一些基本类型：
- en: String
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Number
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: Boolean
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔
- en: Arrays
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Tuple
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组
- en: Enum
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举
- en: Any
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意
- en: Void
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空
- en: Objects
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象
- en: Let's talk about some of these types and show how they can be used in TypeScript.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈其中一些类型，并展示它们在TypeScript中的使用方式。
- en: String
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串
- en: All the textual data on JavaScript will be treated as a **string**. To declare
    a string, we always need to surround it with double `(")` or single `(')` quotes,
    or the `(`)` grave accent, commonly known as a template string.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的所有文本数据都将被视为**字符串**。要声明一个字符串，我们总是需要用双引号`(")`或单引号`(')`括起来，或者用反引号`(`)`，通常称为模板字符串。
- en: 'Declaring template strings inside text is not a problem with TypeScript. Template
    strings are a feature in ECMAScript that made it possible to add a variable inside
    a string without the need for concatenation:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本中声明模板字符串对TypeScript来说不是问题。模板字符串是ECMAScript中的一个功能，它使得可以在字符串中添加变量而无需进行连接：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Number
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字
- en: 'In JavaScript, all numbers are floating-point values. In TypeScript, it''s
    the same. Those numbers get a **number** type. In addition to the hexadecimal
    and decimal numbers, the binary and octal literals that were introduced in ECMAScript
    2015 are treated like numbers too:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，所有数字都是浮点值。在TypeScript中也是如此。这些数字得到了**数字**类型。除了十六进制和十进制数字外，ECMAScript
    2015中引入的二进制和八进制字面量也被视为数字：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Boolean
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔
- en: 'The most basic type in the programming languages is the **boolean** values—a
    simple 1 or 0, and true or false. This is called a **boolean**:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言中最基本的类型是**布尔**值——简单的1或0，true或false。这被称为**布尔**：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Arrays
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组
- en: A group of elements in most of the languages is commonly called an **array**.
    In TypeScript, we can declare it in two different ways.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数语言中的一组元素通常被称为**数组**。在TypeScript中，我们可以以两种不同的方式声明它。
- en: 'The most simple way is just to declare the type of the element followed by
    `[]` *(*square brackets*)* to denote that it is an **array** of the declared type:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法就是声明元素的类型，后面跟着`[]`（方括号）来表示它是一个声明类型的**数组**：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or, you can declare generically, using the `Array<type>` declaration. This
    is not the most common way used, but, depending on the code you are developing,
    you may need to use it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用`Array<type>`声明进行通用声明。这不是最常用的方式，但根据您正在开发的代码，您可能需要使用它：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tuple
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组
- en: '**Tuples** are a type of variable that has a specific structure. Structurally,
    a tuple is an array of two elements; both are a known type by the compiler and
    the user, but those elements don''t need to have the same type:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**元组**是一种具有特定结构的变量类型。在结构上，元组是一个包含两个元素的数组；这两个元素由编译器和用户知道其类型，但这些元素不需要具有相同的类型：'
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you try to access an element outside of the known indices, you will get an
    error.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试访问已知索引之外的元素，将会收到错误。
- en: Enum
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举
- en: '**Enums** are similar to JavaScript objects, but they have some special attributes
    that help in the development of your application. You can have a friendly name
    for numeric values or a more controlled environment for the constants on the variables
    a function can accept.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**枚举**类似于JavaScript对象，但它们具有一些特殊的属性，可以帮助开发应用程序。您可以为数字值设置友好的名称，或者为函数可以接受的变量的常量提供更受控制的环境。'
- en: 'A numeric enum can be created without any declaration. By doing this, it will
    start with the initial values of `0` and finish with the value of the final index
    number; or, you can get the name of the enum, passing the index of the enum value:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 可以创建一个数字枚举而不需要任何声明。通过这样做，它将从`0`的初始值开始，并以最终索引号的值结束；或者，您可以通过传递枚举值的索引来获取枚举的名称：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Or, an enum can be declared with values. It can be an initial declaration that
    the TypeScript compiler will interpret the rest of the elements as an increment
    of the first one, or an individual declaration:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以声明一个带有值的枚举。它可以是TypeScript编译器将解释其余元素作为第一个元素的增量，或者是一个单独的声明：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Any
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任意
- en: 'As JavaScript is a dynamic language, TypeScript needed to implement a type
    that has no defined value, so it implemented the **any** type. The most used case
    for the any type any is when using values that came from a third-party library.
    In that case, we know that we are dropping the type checking:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript是一种动态语言，TypeScript需要实现一个没有定义值的类型，因此它实现了**any**类型。any类型最常用的情况是在使用来自第三方库的值时。在这种情况下，我们知道我们正在放弃类型检查：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The main use of the any type is when you are upgrading a legacy JavaScript project
    to TypeScript, and you can gradually add the types and validations to the variables
    and functions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 任何类型的主要用途是当您将传统JavaScript项目升级到TypeScript时，您可以逐渐向变量和函数添加类型和验证。
- en: Void
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空
- en: 'As the opposite of any, **void** is the absence of the type at all. The most
    used case is with functions that won''t return any values:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与any相反，**void**是完全没有类型的。最常用的情况是在不返回任何值的函数中：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Using void to type a variable is useless because it only can be assigned to
    undefined and null.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用void来对变量进行类型设置是没有意义的，因为它只能被赋值为undefined和null。
- en: Objects
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象
- en: An **object** in TypeScripts has a special form of declaring because it can
    be declared as an interface, as a direct **object,** or as a type of its own.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScripts中的**对象**有一种特殊的声明形式，因为它可以声明为接口，作为直接的**对象**，或者作为自己的类型。
- en: 'Declaring an object as an interface, you have to declare the interface before
    using it, all the attributes must be passed, and the types need to be set:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象声明为接口时，您必须在使用之前声明接口，必须传递所有属性，并且需要设置类型：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Using objects as direct inputs is sometimes common when passing to a function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在将对象作为直接输入传递给函数时，有时是常见的：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And finally, they are used for declaring a type of object and reusing it:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，它们用于声明对象的类型并重用它：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Functions
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数
- en: In TypeScript, one of the most difficult types to declare is a **function**.
    It can get very complex in a just simple concatenation of the functional chain.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，最难声明的类型之一是**函数**。它可以在一个简单的函数链的连接中变得非常复杂。
- en: Declaring a function in TypeScript is a composition of the parameters that the
    function will receive and the final type that the function will return.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中声明函数是函数将接收的参数和函数将返回的最终类型的组合。
- en: 'You can declare a simple function inside a constant, like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在常量内声明一个简单的函数，就像这样：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A more complex function declared inside a constant can be declared like this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更复杂的函数在常量内声明可以像这样声明：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When declaring a function as a normal function, the way to type it is almost
    the same as in a constant way, but you don''t need to declare that the functions
    are a function. Here is an example:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当声明一个函数作为普通函数时，其类型方式几乎与常量方式相同，但你不需要声明这些函数是一个函数。以下是一个例子：
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Interfaces
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口
- en: TypeScript checks that the values of variables are the correct type and the
    same principle is applied to classes, objects, or contracts between your code.
    This is commonly known as "duck typing" or "structural sub-typing". Interfaces
    exist to fill this space and define these contracts or types.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript检查变量的值是否是正确的类型，同样的原则也适用于类、对象或代码之间的合同。这通常被称为“鸭子类型”或“结构子类型”。接口存在是为了填补这个空间并定义这些合同或类型。
- en: 'Let''s try to understand an **interface** with this example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过这个例子来理解一个**接口**：
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The function will know that the object has the property name on it and that
    it's valid to call it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将知道对象上有一个名为name的属性，并且可以调用它是有效的。
- en: 'We can rewrite it with the interface type for better code management:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用接口类型来重写它，以便更好地管理代码：
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As you can see, we have a new property called `course` that has a `?` declared
    on it. This symbolizes that this property can be nulled or undefined. It's called
    an optional property.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们有一个新的属性叫做`course`，在它上面声明了一个`?`。这表示这个属性可以是null或undefined。这被称为可选属性。
- en: There is a property with a read-only attribute declared. If we try to change
    after it's declared on the variable creation, we will receive a compile error
    because it makes the property read-only.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个声明为只读属性的属性。如果我们在变量创建后尝试更改它，我们将收到一个编译错误，因为它使属性变为只读。
- en: Decorators
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装饰器
- en: A new feature was introduced in ECMAScript 6—classes. With the introduction
    of these, the usage of decorators was made possible on the JavaScript engine.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 6引入了一个新特性——类。随着这些特性的引入，装饰器的使用也成为了JavaScript引擎上的可能。
- en: '**Decorators** provide a way to add both annotations and meta-programming syntax
    to class declarations and its members. As it''s in a final state of approval on
    the TC-39 committee (where **TC** stands for **Technical Committee**), the TypeScript
    compiler already has this available to be used.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**装饰器**提供了一种在类声明及其成员上添加注解和元编程语法的方式。由于它已经在TC-39委员会（其中**TC**代表**技术委员会**）上处于最终批准状态，TypeScript编译器已经可以使用它。'
- en: 'To enable it, you can set the flags on the `tsconfig.json` file:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用它，你可以在`tsconfig.json`文件中设置标志：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Decorators are a special kind of declaration that can be attached to a class,
    method, accessor property, or parameter. They are used in the form of `@expression`,
    where the expression is a function that will be called at runtime.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器是一种特殊的声明，可以附加到类、方法、存取器属性或参数上。它们以`@expression`的形式使用，其中表达式是一个在运行时将被调用的函数。
- en: 'An example of a decorator that can be applied to a class can be seen in the
    following code snippet:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以应用于类的装饰器的例子可以在以下代码片段中看到：
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When you create this function, you are saying that the object of the constructor
    and the prototype of it will be sealed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建这个函数时，你是在说构造函数的对象和它的原型将被封闭。
- en: 'To use it inside a class is very simple:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在类内部使用它非常简单：
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: These are just some examples of decorators and their powers to help you with
    the development of **object-oriented programming** (**OOP**) with TypeScript.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些装饰器及其功能的例子，可以帮助你使用TypeScript进行**面向对象编程**（**OOP**）的开发。
- en: In conclusion
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In summary, types are just a way to make our life easier in the process of development
    with TypeScript and JavaScript.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，类型只是在使用TypeScript和JavaScript进行开发过程中让我们的生活变得更加轻松的一种方式。
- en: Because JavaScript is a dynamic language and doesn't have a static type, all
    the types and interfaces declared in TypeScript are strictly used just by TypeScript.
    This helps the compiler catch errors, warnings, and the language server to help
    the **integrated development environment** (**IDE**) on the development process
    to analyze your code as it is being written.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 因为JavaScript是一种动态语言，没有静态类型，TypeScript中声明的所有类型和接口都严格地只被TypeScript使用。这有助于编译器捕捉错误、警告，并且语言服务器可以帮助**集成开发环境**（**IDE**）在开发过程中分析你的代码。
- en: This is a basic introduction to TypeScript, covering the basics of the typed
    language, and how to understand and use it. There is much more to learn about
    its use, such as generics, modules, namespaces, and so on.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是TypeScript的基本介绍，涵盖了有关这种类型语言的基础知识，以及如何理解和使用它。关于它的使用还有很多要学习，比如泛型、模块、命名空间等等。
- en: With this introduction, you can understand how the new **Vue 3** core works
    and how to use the basics of TypeScript in your project, and take advantage of
    the typed language on your project.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个介绍，你可以了解新的**Vue 3**核心是如何工作的，以及如何在项目中使用TypeScript的基础知识，并利用项目中的类型语言。
- en: There is always more knowledge to find on TypeScript, as it is a growing "language"
    on top of JavaScript and has a growing community.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 关于TypeScript，总是有更多的知识可以获取，因为它是建立在JavaScript之上的一种不断发展的“语言”，并且拥有一个不断增长的社区。
- en: Don't forget to look at the TypeScript documentation to find out more about
    it and how it can improve your code from now on.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记查看TypeScript文档，以了解更多信息，以及它如何从现在开始改进你的代码。
- en: See also
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about TypeScript basic types at [https://www.typescriptlang.org/docs/handbook/basic-types.html](https://www.typescriptlang.org/docs/handbook/basic-types.html).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.typescriptlang.org/docs/handbook/basic-types.html](https://www.typescriptlang.org/docs/handbook/basic-types.html)找到有关TypeScript基本类型的更多信息。
- en: You can find more information about TypeScript functions at [https://www.typescriptlang.org/docs/handbook/functions.html](https://www.typescriptlang.org/docs/handbook/functions.html).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.typescriptlang.org/docs/handbook/functions.html](https://www.typescriptlang.org/docs/handbook/functions.html)找到有关TypeScript函数的更多信息。
- en: You can find more information about TypeScript enums at [https://www.typescriptlang.org/docs/handbook/enums.html](https://www.typescriptlang.org/docs/handbook/enums.html).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.typescriptlang.org/docs/handbook/enums.html](https://www.typescriptlang.org/docs/handbook/enums.html)找到有关TypeScript枚举的更多信息。
- en: You can find more information about TypeScript advanced types at [https://www.typescriptlang.org/docs/handbook/advanced-types.html](https://www.typescriptlang.org/docs/handbook/advanced-types.html).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.typescriptlang.org/docs/handbook/advanced-types.html](https://www.typescriptlang.org/docs/handbook/advanced-types.html)找到有关TypeScript高级类型的更多信息。
- en: You can find more information about TypeScript decorators at [https://www.typescriptlang.org/docs/handbook/decorators.html](https://www.typescriptlang.org/docs/handbook/decorators.html).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.typescriptlang.org/docs/handbook/decorators.html](https://www.typescriptlang.org/docs/handbook/decorators.html)找到有关TypeScript装饰器的更多信息。
- en: View a cheatsheet on TypeScript types at [https://rmolinamir.github.io/typescript-cheatsheet/#types](https://rmolinamir.github.io/typescript-cheatsheet/#types).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://rmolinamir.github.io/typescript-cheatsheet/#types](https://rmolinamir.github.io/typescript-cheatsheet/#types)上查看TypeScript类型的速查表。
- en: Creating your first TypeScript class
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个TypeScript类
- en: In TypeScript, there is no main paradigm in which you write your program. You
    can choose between object-oriented, structural, or event functional.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，没有一种主要的范式来编写程序。你可以选择面向对象的、结构化的，甚至是函数式的。
- en: In most cases, you will see an OOP paradigm being used. In this recipe, we will
    learn about creating a class inside TypeScript, its inheritance, the interface,
    and other properties that can be used inside the code.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我们会看到使用面向对象编程范例。在这个配方中，我们将学习如何在TypeScript中创建一个类，它的继承，接口，以及代码中可以使用的其他属性。
- en: Getting ready
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: 'To start our project, we will need to create an `npm` project. To do this,
    open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows) and execute the
    following command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的项目，我们需要创建一个`npm`项目。要做到这一点，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You also need to install TypeScript**. **To do this, open Terminal (macOS or
    Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要安装TypeScript**。**要做到这一点，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How to do it...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: When writing a class inside a TypeScript file, we first need to have in mind
    what this class will do, what this class can be for, how it can be extended by
    another class through inheritance, and how it can be affected in the process.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript文件中编写类时，我们首先需要考虑这个类将做什么，这个类可以是什么，它如何通过继承被另一个类扩展，以及它如何在这个过程中受到影响。
- en: Imagine that we have a basic `Animal` class. This class can have some basic
    properties such as its `name`, whether it produces a `sound`, its `family`, and
    the basic `food chain` this animal eats.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，我们有一个基本的`Animal`类。这个类可以有一些基本属性，比如它的`name`，它是否发出`sound`，它的`family`，以及这种动物所吃的基本`food
    chain`。
- en: 'Let''s start with the basics of the process, the `food chain`. We need to make
    sure that it''s an innumerable list, and that each file that is using it will
    have the same value at the end. We just need to call a constant variable:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从过程的基础开始，`food chain`。我们需要确保它是一个不可枚举的列表，并且每个使用它的文件最终都有相同的值。我们只需要调用一个常量变量：
- en: '[PRE33]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, we want to make the basic `interface` for our animal. We know that our
    animal has a `name`, can produce a `sound`, can be part of a `family`, and be
    in a `food chain` category. Using an interface in a class, we make a contract
    between the class and what will be exposed, helping in the development process:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们想为我们的动物制作基本的`interface`。我们知道我们的动物有一个`name`，可以发出一个`sound`，可以成为一个`family`的一部分，并且属于`food
    chain`类别。在类中使用接口，我们在类和将要暴露的内容之间建立了一个合同，有助于开发过程：
- en: '[PRE34]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'With all that settled, we can make our `Animal` class. Each class can have
    its constructor. The class constructor can be simple, containing just some variables
    as arguments, or can be more complex and have an object as an argument. If your
    constructor will have any parameters, an interface or declaring the type of each
    parameter is needed. In this case, our constructor will be an object and will
    have only one parameter that is the same as the `Animal`, so it will extend the
    `IAnimal` interface:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了这一切，我们可以制作我们的`Animal`类。每个类都可以有它的构造函数。类构造函数可以很简单，只包含一些变量作为参数，也可以更复杂，有一个对象作为参数。如果你的构造函数将有任何参数，需要一个接口或声明每个参数的类型。在这种情况下，我们的构造函数将是一个对象，只有一个参数，与`Animal`相同，所以它将扩展`IAnimal`接口：
- en: '[PRE35]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, to make our class, we have declared the interfaces and enums that will
    be used. We will start by declaring that the class will implement the `IBasicAnimal` interface.
    To do this, we need to add some public elements that our class will have and declare
    those too. We will need to implement the functions to show what animal it is and
    what sound it makes. Now, we have a basic class that includes all the attributes
    for our animal. It has separate interfaces for the class and the constructors.
    The enum for the food chain is declared in a human-readable way, so the JavaScript
    imports of this library can execute without any problems:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了创建我们的类，我们声明了将要使用的接口和枚举。我们将首先声明该类将实现`IBasicAnimal`接口。为此，我们需要添加一些我们的类将具有的公共元素，并也声明这些元素。我们需要实现函数来显示它是什么动物以及它发出什么声音。现在，我们有了一个包含所有动物属性的基本类。它具有类和构造函数的单独接口。食物链的枚举以一种易于阅读的方式声明，因此该库的JavaScript导入可以无问题执行：
- en: '[PRE36]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s extend this class with a few lines of code and transform this `Animal`
    into a `Dog`:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用几行代码扩展这个类，将这个`Animal`转换成`Dog`：
- en: '[PRE37]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This is a simple way of extending a parent class and using the parent's definition
    of the child to compose a new class with almost the same interface as the parent.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简单的方式，通过扩展父类并使用父类的子类定义来组成一个几乎与父类具有相同接口的新类。
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Classes in TypeScript work the same as other classes in languages such as Java
    or C#. The compiler evaluates these common principles during development and compilation.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript中的类与Java或C#等语言中的其他类一样工作。编译器在开发和编译过程中评估这些共同的原则。
- en: In this case, we made a simple class that had some public properties that were
    inherent by the children's classes. These variables were all readable and can
    be mutated.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们创建了一个简单的类，其中有一些公共属性是子类固有的。这些变量都是可读的，可以被改变。
- en: There's more...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In TypeScript, we have a wide range of possible uses for classes, such as abstract
    classes, special modifiers, and using classes as interfaces. We've just covered
    the basics of the classes here to give us a good starting knowledge base. If you
    want to go deeper, the TypeScript documentation is very helpful and has a lot
    of examples that can help in the process of learning.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，我们有各种可能的类的用法，比如抽象类、特殊修饰符，以及将类用作接口。我们在这里只是涵盖了类的基础知识，为我们提供了一个良好的起点。如果你想深入了解，TypeScript文档非常有帮助，并且有很多例子可以帮助学习过程。
- en: See also
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about TypeScript classes at [https://www.typescriptlang.org/docs/handbook/classes.html](https://www.typescriptlang.org/docs/handbook/classes.html).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.typescriptlang.org/docs/handbook/classes.html](https://www.typescriptlang.org/docs/handbook/classes.html)找到有关TypeScript类的更多信息。
- en: View a cheatsheet on TypeScript classes at [https://rmolinamir.github.io/typescript-cheatsheet/#classes](https://rmolinamir.github.io/typescript-cheatsheet/#classes).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://rmolinamir.github.io/typescript-cheatsheet/#classes](https://rmolinamir.github.io/typescript-cheatsheet/#classes)上查看TypeScript类的速查表。
- en: Creating your first project with Vue CLI
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue CLI创建您的第一个项目
- en: When the Vue team realized that developers were having problems creating and
    managing their applications, they saw an opportunity to create a tool that could
    help developers around the world. The Vue CLI project was born.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当Vue团队意识到开发人员在创建和管理他们的应用程序时遇到问题时，他们看到了一个机会，可以创建一个工具来帮助全世界的开发人员。Vue CLI项目诞生了。
- en: The Vue CLI tool is a CLI tool that is used in terminal commands, such as Windows
    PowerShell, Linux Bash, or macOS Terminal. It was created as a starting point
    for the development of Vue, where developers can start a project and manage and
    build it smoothly. The focus of the Vue CLI team when developing was to give developers
    the opportunity to have more time to think about the code and spend less time
    on the tooling needed to put their code into production, adding new plugins or
    a simple `hot-module-reload`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Vue CLI工具是一个在终端命令中使用的CLI工具，如Windows PowerShell、Linux Bash或macOS Terminal。它被创建为Vue开发的起点，开发人员可以开始一个项目并顺利地管理和构建它。Vue
    CLI团队在开发时的重点是为开发人员提供更多时间来思考代码，花费更少的时间在工具上，以将他们的代码投入生产，添加新的插件或简单的`热模块重载`。
- en: The Vue CLI tool is tweaked in such a way that there is no need to eject your
    tooling code outside the CLI before putting it into production.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Vue CLI工具被调整得无需在将其投入生产之前将您的工具代码弹出CLI之外。
- en: When version 3 was released, the Vue UI project was added to the CLI as the
    main function, transforming the CLI commands into a more complete visual solution
    with lots of new additions and improvements.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当版本3发布时，Vue UI项目被添加到CLI作为主要功能，将CLI命令转换为更完整的可视解决方案，并增加了许多新的功能和改进。
- en: Getting ready
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To create a Vue CLI project, follow these steps:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建Vue CLI项目，请按照以下步骤进行：
- en: 'We need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要打开Terminal（macOS或Linux）或Command Prompt/PowerShell（Windows）并执行以下命令：
- en: '[PRE38]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键进行导航，*Enter*键继续，*Spacebar*键选择选项：
- en: '[PRE39]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: There are two methods for starting a new project. The default method is a basic
    `babel` and `eslint` project without any plugin or configuration, and the `Manually`
    mode, where you can select more modes, plugins, linters, and options. We will
    go for `Manually`.‌
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两种方法可以启动一个新项目。默认方法是一个基本的`babel`和`eslint`项目，没有任何插件或配置，还有`手动`模式，您可以选择更多的模式、插件、linters和选项。我们将选择`手动`。
- en: 'Now, we are asked about the features that we will want on the project. Those
    features are some Vue plugins such as Vuex or Router (Vue-Router), testers, linters,
    and more:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们被问及我们将在项目中需要的功能。这些功能是一些Vue插件，如Vuex或Router（Vue-Router）、测试工具、linters等：
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'For this project, we will choose  `CSS Pre-processors` and press *Enter* to
    continue:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将选择`CSS预处理器`并按*Enter*继续：
- en: '[PRE41]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'It''s possible to choose the main **Cascading Style Sheets** (**CSS**) preprocessors
    to be used with Vue—`Sass`, `Less`, and `Stylus`. It''s up to you to choose which
    fits the most and is best for you:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以选择要与Vue一起使用的主要**层叠样式表**（**CSS**）预处理器——`Sass`、`Less`和`Stylus`。由您选择哪种最适合您：
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'It''s time to format your code. You can choose between `AirBnB`, `Standard`,
    and `Prettier` with a basic config. Those rules that are imported inside the `ESLint`
    can be always customized without any problem and there is a perfect one for your
    needs. You know what is best for you:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是格式化您的代码的时候了。您可以在`AirBnB`、`Standard`和`Prettier`之间进行选择，并使用基本配置。那些在`ESLint`中导入的规则可以随时进行自定义，没有任何问题，并且有一个完美的规则适合您的需求。您知道什么对您最好：
- en: '[PRE43]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied on save or fixed on commit:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置完linting规则后，我们需要定义它们何时应用于您的代码。它们可以在保存时应用，也可以在提交时进行修复：
- en: '[PRE44]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is on
    a dedicated file, but it is also possible to store then on the `package.json`
    file:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义所有这些插件、linters和处理器之后，我们需要选择设置和配置存储的位置。存储它们的最佳位置是在一个专用文件中，但也可以将它们存储在`package.json`文件中：
- en: '[PRE45]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, you can choose if you want to make this selection a preset for future
    projects so that you don''t need to reselect everything again:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以选择是否要将此选择设置为将来项目的预设，以便您无需再次重新选择所有内容：
- en: '[PRE46]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The CLI will automatically create the folder with the name you set in the first
    step, install everything, and configure the project.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将自动创建具有您在第一步中设置的名称的文件夹，安装所有内容并配置项目。
- en: 'You are now able to navigate and run the project. The basic commands on Vue
    CLI projects are as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以浏览和运行项目了。Vue CLI项目的基本命令如下：
- en: '`npm run serve`—For running a development server locally'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run serve`—用于在本地运行开发服务器'
- en: '`npm run build`—For building and minifying the application for deployment'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build`—用于构建和缩小应用程序以进行部署'
- en: '`npm run lint`—To execute the lint on the code'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run lint`—对代码执行lint'
- en: You can execute those commands via the Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过Terminal（macOS或Linux）或Command Prompt/PowerShell（Windows）执行这些命令。
- en: There's more...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The CLI has a tool inside it called Vue UI that helps in the process of managing
    your Vue projects. This tool will take care of the project dependencies, plugins,
    and configurations.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: CLI内部有一个名为Vue UI的工具，可帮助管理Vue项目的过程。该工具将处理项目的依赖关系、插件和配置。
- en: Each `npm` script in the Vue UI tool is named as Tasks, and on those tasks,
    you can get real-time statistics such as—for example—the size of the assets, modules,
    and dependencies; numbers of errors or warnings; and more deep networking data
    for fine-tuning your application.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Vue UI工具中的每个`npm`脚本都被命名为任务，在这些任务中，您可以获得实时统计数据，例如资产、模块和依赖项的大小；错误或警告的数量；以及更深入的网络数据，以微调您的应用程序。
- en: 'To enter the Vue UI interface, you need to open Terminal (macOS or Linux) or
    Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要进入Vue UI界面，您需要在Terminal（macOS或Linux）或Command Prompt/PowerShell（Windows）中执行以下命令：
- en: '[PRE47]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: See also
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about the Vue CLI project at [https://cli.vuejs.org/guide/](https://cli.vuejs.org/guide/).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://cli.vuejs.org/guide/](https://cli.vuejs.org/guide/)找到有关Vue CLI项目的更多信息。
- en: Find more information about the development of Vue CLI plugins at [https://cli.vuejs.org/dev-guide/plugin-dev.html](https://cli.vuejs.org/dev-guide/plugin-dev.html).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 请在[https://cli.vuejs.org/dev-guide/plugin-dev.html](https://cli.vuejs.org/dev-guide/plugin-dev.html)找到有关Vue
    CLI插件开发的更多信息。
- en: Adding plugins to a Vue CLI project with Vue UI
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue UI向Vue CLI项目添加插件
- en: The Vue UI **t**ool is one of the most powerful additional tools for Vue development.
    It makes a developer's life easier, and at the same time can help manage the Vue
    projects.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Vue UI工具是Vue开发中最强大的附加工具之一。它可以让开发人员的生活更轻松，同时可以帮助管理Vue项目。
- en: Getting ready
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'First, we need to create our Vue CLI project. To find how to create a Vue CLI
    project, please check the ''Creating your first project with Vue CLI'' recipe. We
    can use the one we created in the last recipe or start a new one. Now, follow
    the instructions to add a plugin:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建我们的Vue CLI项目。要找到如何创建Vue CLI项目，请查看“使用Vue CLI创建您的第一个项目”食谱。我们可以使用上一个食谱中创建的项目，也可以开始一个新项目。现在，按照说明添加插件：
- en: 'Open the Vue UI interface. Open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Vue UI界面。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE48]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'A new browser window will appear, with the **Vue UI** interface:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会出现一个新的浏览器窗口，其中包含**Vue UI**界面：
- en: '![](assets/d3a3cfad-348f-4b99-972b-20e8b4a17da9.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d3a3cfad-348f-4b99-972b-20e8b4a17da9.png)'
- en: Here, you can list your projects, create a new project, or import an existing
    one.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以列出您的项目，创建一个新项目，或导入一个现有项目。
- en: 'Now, we will import the one we created:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将导入我们创建的插件：
- en: '![](assets/cbac28b4-9fc3-48bb-8ef2-3e12936b53a2.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cbac28b4-9fc3-48bb-8ef2-3e12936b53a2.png)'
- en: You need to find the folder that you created and click on Import this folder.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要找到您创建的文件夹，然后单击“导入此文件夹”。
- en: 'After the folder is imported, the default Dashboard of the project will appear:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件夹导入后，项目的默认仪表板将出现：
- en: '![](assets/6ae2b814-b9ef-4075-aef8-80c1269a3df3.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6ae2b814-b9ef-4075-aef8-80c1269a3df3.png)'
- en: 'Here, it''s possible to customize your Dashboard, adding new widgets, by clicking
    on the Customize button on the top:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，可以通过点击顶部的“自定义”按钮来自定义您的仪表板，添加新的小部件：
- en: '![](assets/d3ce5759-4e4b-4b90-8670-6f06c3fda5b6.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d3ce5759-4e4b-4b90-8670-6f06c3fda5b6.png)'
- en: 'To add a new plugin, you must click on the Plugins menu in the left-hand sidebar:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加新插件，必须单击左侧边栏中的“插件”菜单：
- en: '![](assets/ac05cafd-3d9e-4954-941e-0ea1cd682c0f.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ac05cafd-3d9e-4954-941e-0ea1cd682c0f.png)'
- en: The base plugins that you added on the Vue CLI tool will be already listed here.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您在Vue CLI工具中添加的基本插件将已列在此处。
- en: 'Now, we will add the base Vue ecosystem plugins—**vuex **and **vue-router**:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加基本的Vue生态系统插件—**vuex **和 **vue-router**：
- en: '**![](assets/dd4f6c07-9065-4bd2-b501-a8cde63ce9f4.png)**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](assets/dd4f6c07-9065-4bd2-b501-a8cde63ce9f4.png)**'
- en: 'If you check your code, you will see that the `main.js` file was changed, and
    the `vuex (store)` and `vue-router (router)` plugins are now imported and injected
    to the Vue instance:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您检查您的代码，您将看到`main.js`文件已更改，并且`vuex（store）`和`vue-router（router）`插件现在已导入并注入到Vue实例中：
- en: '![](assets/224ff0ce-2ab6-4940-9384-b76e880e4e97.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/224ff0ce-2ab6-4940-9384-b76e880e4e97.png)'
- en: How it works...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The Vue UI plugins work in conjunction with `npm` or `yarn` to automatically
    install the packages on your project, and then inject—when possible—the necessary
    conditions on the Vue instance.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Vue UI插件与`npm`或`yarn`配合使用，自动安装项目中的软件包，然后在可能的情况下注入Vue实例所需的条件。
- en: If a plugin is a visual, directive, or a non-direct instantiated plugin, the
    Vue UI will install it and manage it, but you need to import it for use on your
    application.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果插件是一个可视化、指令或非直接实例化的插件，Vue UI将安装并管理它，但您需要导入它以在应用程序中使用。
- en: Adding TypeScript to a Vue CLI project
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Vue CLI项目添加TypeScript
- en: Using TypeScript in a JavaScript project, even for static type checking, is
    good practice. It helps minimize the chance of errors and Object problems inside
    your project.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript项目中使用TypeScript，即使是用于静态类型检查，也是一个好的做法。它有助于最小化项目内部的错误和对象问题。
- en: Adding TypeScript to a Vue project with the help of the Vue UI is very simple,
    and you will be able to use JavaScript code with TypeScript.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Vue UI的帮助向Vue项目添加TypeScript非常简单，您将能够使用TypeScript的JavaScript代码。
- en: Getting ready
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: The Node.js global objects that are required are as follows
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下
- en: '`@vue/cli`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we need to create our Vue CLI project. To find how to create a Vue CLI
    project, please check the 'Creating your first project with Vue CLI' recipe. We
    can use the one we created in the last recipe or start a new one.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建我们的Vue CLI项目。要了解如何创建Vue CLI项目，请查看“使用Vue CLI创建您的第一个项目”食谱。我们可以使用上一个食谱中创建的项目，或者开始一个新项目。
- en: 'To add TypeScript to a Vue CLI project, follow these steps:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 要将TypeScript添加到Vue CLI项目中，请按照以下步骤进行：
- en: 'Open the Vue UI interface. Open the Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Vue UI界面。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE49]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'On your project, go to the Plugins manager, click on + Add plugin, and search
    for `@vue/cli-plugin-typescript`:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目中，转到插件管理器，点击+添加插件，然后搜索`@vue/cli-plugin-typescript`：
- en: '**![](assets/5e9f0beb-adf6-49ea-a689-c99b5ef8598f.png)**'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](assets/5e9f0beb-adf6-49ea-a689-c99b5ef8598f.png)**'
- en: 'Now, click on the Install @vue/cli-plugin-typescript button at the bottom of
    the page:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击页面底部的安装@vue/cli-plugin-typescript按钮：
- en: '![](assets/6bd694d2-d2f2-4b02-859a-2666ea0aba88.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6bd694d2-d2f2-4b02-859a-2666ea0aba88.png)'
- en: 'You will be asked for some configuration settings after the plugin is downloaded,
    before the final installation:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件下载完成之后，在最终安装之前，会要求您进行一些配置设置：
- en: '**Use class-style component syntax? **Use the `vue-class-component` plugin
    with TypeScript.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用类样式组件语法？**使用TypeScript的`vue-class-component`插件。'
- en: '**Use Babel alongside TypeScript (required for modern mode, auto-detected polyfills,
    transpiling JSX)? **Activate Babel to transpile TypeScript in addition to the
    TypeScript compiler.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与TypeScript一起使用Babel（现代模式所需，自动检测的polyfill，转译JSX）？**激活Babel以在TypeScript编译器之外转译TypeScript。'
- en: '**Use ESLint? **Use ESLint as a linter for the `.ts` and `.tsx` files.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用ESLint？**将ESLint用作`.ts`和`.tsx`文件的检查器。'
- en: '**Convert all .js files to .ts? **Automatically convert all your `.js` files
    to `.ts` files in the installation process.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将所有.js文件转换为.ts文件？**在安装过程中自动将所有`.js`文件转换为`.ts`文件。'
- en: '**Allow .js files to be compiled? **Activate the `tsconfig.json` flag to accept
    `.js` files in the compiler.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许编译.js文件？**激活`tsconfig.json`标志以接受编译器中的`.js`文件。'
- en: After choosing your options, click on Finish the installation.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的选项后，点击完成安装。
- en: 'Now, your project is a TypeScript Vue project, with all the files configured
    and ready to be coded:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的项目是一个TypeScript Vue项目，所有文件都已配置好，准备好进行编码：
- en: '![](assets/b809b9f4-90dc-47fb-b188-896995149b1c.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b809b9f4-90dc-47fb-b188-896995149b1c.png)'
- en: How it works...
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Vue UI as a plugin manager will download the TypeScript package made for
    Vue, and install and configure it for you with the settings you choose.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Vue UI作为插件管理器将为您下载为Vue制作的TypeScript包，并安装和配置它以符合您选择的设置。
- en: Your project will be changed and modified according to your specifications,
    and will then be ready for development.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目将根据您的规格进行更改和修改，然后准备好进行开发。
- en: See also
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about TypeScript ESLint at [https://github.com/typescript-eslint/typescript-eslint](https://github.com/typescript-eslint/typescript-eslint)
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://github.com/typescript-eslint/typescript-eslint](https://github.com/typescript-eslint/typescript-eslint)找到有关TypeScript
    ESLint的更多信息
- en: Find more information about `vue-class-component` at [https://github.com/vuejs/vue-class-component](https://github.com/vuejs/vue-class-component).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://github.com/vuejs/vue-class-component](https://github.com/vuejs/vue-class-component)找到有关`vue-class-component`的更多信息。
- en: Creating your first TypeScript Vue component with vue-class-component
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vue-class-component创建您的第一个TypeScript Vue组件
- en: As Vue components are object-based and have a strong relationship with the `this`
    keyword of the JavaScript object, it gets a little bit confusing to develop a
    TypeScript component.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Vue组件是基于对象的，并且与JavaScript对象的`this`关键字有着密切的关系，因此开发TypeScript组件会有点混乱。
- en: The `vue-class-component` plugin uses the ECMAScript decorators proposal to
    pass the statically typed values directly to the Vue component and makes the process
    of the compiler understand what is happening more easily.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue-class-component`插件使用ECMAScript装饰器提案将静态类型的值直接传递给Vue组件，并使编译器更容易理解发生了什么。'
- en: Getting ready
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的前提条件如下：
- en: Node.js 12+
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we need to create our Vue CLI project. We can use the one we created
    in the last recipe or start a new one. To find how to create a Vue CLI project
    with TypeScript, please check the '*Adding TypeScript to a Vue CLI project*' recipe.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建我们的Vue CLI项目。我们可以使用上一个配方中创建的项目，或者开始一个新的项目。要了解如何在Vue CLI项目中添加TypeScript，请查看'*向Vue
    CLI项目添加TypeScript*'配方。
- en: 'Follow the instructions to create your first Vue component with Typescript
    and `vue-class-component`:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 按照说明使用Typescript和`vue-class-component`创建你的第一个Vue组件：
- en: Create a new file inside the `src/components` folder, called `Counter.vue`.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹内创建一个名为`Counter.vue`的新文件。
- en: 'Now, let''s start making the script part of the Vue component. We will make
    a class that will have data with a number, two methods—one for increasing and
    another for decreasing—and, finally, a computed property to format the final data:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始制作Vue组件的脚本部分。我们将创建一个包含数字数据的类，两个方法——一个用于增加，另一个用于减少——最后，一个计算属性来格式化最终数据：
- en: '[PRE50]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'It''s time to create the template and rendering for this component. The process
    is the same as a JavaScript Vue file. We will add the buttons for increasing and
    decreasing the value and showing the formatted text:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候为这个组件创建模板和渲染了。这个过程与JavaScript Vue文件相同。我们将添加增加和减少数值的按钮，并显示格式化的文本：
- en: '[PRE51]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the `App.vue` file, we need to import the component we just created:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们需要导入刚刚创建的组件：
- en: '[PRE52]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, when you run the `npm run serve` command on Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows), you will see your component running and
    executing on screen:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当你在终端(macOS或Linux)或命令提示符/PowerShell(Windows)上运行`npm run serve`命令时，你将看到你的组件在屏幕上运行和执行：
- en: '![](assets/949d26cc-b0dc-4c6c-b2e7-0797000fc14a.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/949d26cc-b0dc-4c6c-b2e7-0797000fc14a.png)'
- en: How it works...
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `vue-class-component` plugin makes use of the new proposal of decorators
    to inject and pass some attributes to the classes on TypeScript.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue-class-component`插件利用装饰器的新提案来向TypeScript类注入和传递一些属性。'
- en: This injection helps in the process of simplifying the development of a component
    with a syntax more aligned with TypeScript than with the Vue common object.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 这种注入有助于简化使用与Vue常见对象相比更符合TypeScript语法的组件开发过程。
- en: See also
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about `vue-class-component` at [https://github.com/vuejs/vue-class-component](https://github.com/vuejs/vue-class-component).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://github.com/vuejs/vue-class-component](https://github.com/vuejs/vue-class-component)找到更多关于`vue-class-component`的信息。
- en: Creating a custom mixin with vue-class-component
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vue-class-component创建自定义mixin
- en: In Vue, a `mixin` is a way to reuse the same code in other Vue objects, like
    mixing all the property of the `mixin` inside the component.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中，`mixin`是一种在其他Vue对象中重用相同代码的方式，就像将`mixin`的所有属性混合到组件中一样。
- en: When using a mixin, Vue first declares the `mixin` property and then the component
    values, so the components will be always the last and valid values. This merge
    occurs in a deep mode and has a specific way already declared inside the framework,
    but it can be changed by a special config.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用mixin时，Vue首先声明`mixin`属性，然后是组件值，因此组件始终是最后且有效的值。此合并以深度模式进行，并且已在框架内声明了特定的方式，但可以通过特殊配置进行更改。
- en: With the use of mixins, developers can write tiny pieces of code and reuse them
    in lots of components.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用mixin，开发人员可以编写小段的代码并在许多组件中重用它们。
- en: This approach simplifies your work and allows you to complete tasks quicker.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法简化了您的工作，并允许您更快地完成任务。
- en: Getting ready
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we need to create our Vue CLI project. We can use the one we created
    in the last recipe or start a new one. To find how to create a Vue CLI project
    with TypeScript, please check the '*Creating your first TypeScript Vue component
    with vue-class-component*'recipe.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建我们的Vue CLI项目。我们可以使用上一个食谱中创建的项目，或者开始一个新项目。要了解如何使用TypeScript创建Vue CLI项目，请查看'*使用vue-class-component创建您的第一个TypeScript
    Vue组件*'食谱。
- en: In this recipe, we will split it into two separate parts. First, we will create
    the counter component, and then we will use the code that is shared to create
    the mixin.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将其分为两个独立的部分。首先，我们将创建计数器组件，然后我们将使用共享的代码来创建mixin。
- en: Creating the Counter component
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建计数器组件
- en: 'Now, follow the instructions to create a custom mixin with `vue-class-component`:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下说明使用`vue-class-component`创建自定义mixin：
- en: We need to make a new component called `CounterByTen.vue` in the `src/components`
    folder.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在`src/components`文件夹中创建一个名为`CounterByTen.vue`的新组件。
- en: 'Now, let''s start making the script part of the Vue component. We will make
    a class that will have a variable with the type of a number and a default value
    of `0`; two methods, one for increasing by `10` and another for decreasing by
    `10`; and, finally, a computed property to format the final data:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始制作Vue组件的脚本部分。我们将创建一个类，其中将有一个类型为数字的变量和默认值为`0`；两种方法，一种是增加`10`，另一种是减少`10`；最后，一个计算属性来格式化最终数据：
- en: '[PRE53]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'It''s time to create the template and rendering for this component. The process
    is the same as for a JavaScript Vue file. We will add the buttons for increasing
    and decreasing the value and for showing the formatted text:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候为这个组件创建模板和渲染了。该过程与JavaScript Vue文件相同。我们将添加增加和减少值的按钮以及显示格式化文本的按钮：
- en: '[PRE54]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In the `App.vue` file, we need to import the component we just created:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们需要导入刚刚创建的组件：
- en: '[PRE55]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Extracting similar code for the mixin
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取相似的代码以用于mixin
- en: 'With both of the components having similar code, we can extract this similar
    code and create a mixin. This mixin can be imported in both of the components
    and their behavior will be the same:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这两个组件具有相似的代码，我们可以提取这些相似的代码并创建一个mixin。这个mixin可以在这两个组件中导入，它们的行为将是相同的：
- en: Create a file called `defaultNumber.ts` in the `src/mixins` folder.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/mixins`文件夹中创建一个名为`defaultNumber.ts`的文件。
- en: 'To code our mixin, we will import the `Component` and `Vue` decorators from
    the `vue-class-component` plugin, to be the base of the mixin. We will need to
    take a similar code and place it inside the mixin:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了编写我们的mixin，我们将从`vue-class-component`插件中导入`Component`和`Vue`修饰符，作为mixin的基础。我们需要采用类似的代码并将其放入mixin中：
- en: '[PRE56]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'With the mixin ready, open the `Counter.vue` component on the `src/components`
    folder and import it. To do this, we need to import a special export from the
    `vue-class-component` called `mixins` and extend it with the mixin we want to
    extend. This will remove the `Vue` and `Component` decorators because they are already
    declared on the mixin:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备好mixin后，打开`src/components`文件夹中的`Counter.vue`组件并导入它。为此，我们需要从`vue-class-component`中导入一个特殊的导出，称为`mixins`，并将其与我们想要扩展的mixin扩展。这将删除`Vue`和`Component`装饰器，因为它们已经在mixin上声明了：
- en: '[PRE57]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, when you run the `npm run serve` command on Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows), you will see your component running and
    executing on screen:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当您在终端（macOS或Linux）上运行`npm run serve`命令或在命令提示符/PowerShell（Windows）上运行时，您将看到您的组件在屏幕上运行和执行：
- en: '![](assets/0d752567-7437-4e71-8ef5-4371d4a6f9a4.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0d752567-7437-4e71-8ef5-4371d4a6f9a4.png)'
- en: How it works...
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The process of using mixins with TypeScript is the same as with the Vue objects.
    The code that is shared can be split into smaller files and called in the components
    for easier coding.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript使用mixins的过程与使用Vue对象的过程相同。共享的代码可以拆分成更小的文件，并在组件中调用，以便更轻松地编码。
- en: When using TypeScript and `vue-class-component`, the `Vue` and `Component` decorators
    need to be declared on the mixins because the class that will be using the mixin
    will already have this extension, as it extends this mixin.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用TypeScript和`vue-class-component`时，需要在mixins上声明`Vue`和`Component`装饰器，因为将使用mixin的类已经具有此扩展，因为它扩展了此mixin。
- en: We took the same piece of code that works the same on both the components and
    placed it in a new file that is then called in both of the components.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将相同的代码片段放在两个组件中，然后将其放在一个新文件中，然后在两个组件中调用它。
- en: See also
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more about `vue-class-component` mixins at [https://github.com/vuejs/vue-class-component#using-mixins](https://github.com/vuejs/vue-class-component#using-mixins).
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 了解有关`vue-class-component` mixins的更多信息，请访问[https://github.com/vuejs/vue-class-component#using-mixins](https://github.com/vuejs/vue-class-component#using-mixins)。
- en: Find more about Vue mixins at [https://v3.vuejs.org/guide/mixins.html](https://v3.vuejs.org/guide/mixins.html)
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 了解有关Vue mixins的更多信息，请访问[https://v3.vuejs.org/guide/mixins.html](https://v3.vuejs.org/guide/mixins.html)
- en: Creating a custom function decorator with vue-class-component
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vue-class-component创建自定义函数装饰器
- en: Decorators were introduced in ECMAScript 2015\. A decorator is a kind of high-order
    function that wraps a function with another function.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器是在ECMAScript 2015中引入的。装饰器是一种高阶函数，它用另一个函数包装一个函数。
- en: This brings a lot of new improvements to the code—along with greater productivity—because
    it takes the principle of functional programming and simplifies it.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 这为代码带来了许多新的改进，以及更大的生产力，因为它采用了函数式编程的原则并简化了它。
- en: Getting ready
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的先决条件如下：
- en: Node.js 12+
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-381
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we need to create our Vue CLI project. To find how to create a Vue CLI
    project, please check the '*Creating your first project with Vue CLI*' recipe. We
    can use the one we created in the last recipe or start a new one.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建我们的Vue CLI项目。要了解如何创建Vue CLI项目，请查看“*使用Vue CLI创建您的第一个项目*”食谱。我们可以使用上一个食谱中创建的项目，或者开始一个新项目。
- en: 'Follow these steps to create your custom function decorator with `vue-class-component`:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用`vue-class-component`创建自定义函数装饰器：
- en: Create a file called `componentMount.js` inside the `src/decorators` folder.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/decorators`文件夹中创建一个名为`componentMount.js`的文件。
- en: 'We need to import the `createDecorator` function from the `vue-class-component` to
    be able to use it on a `vue-class-component` based component, and to start coding
    our decorator:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要从`vue-class-component`中导入`createDecorator`函数，以便在基于`vue-class-component`的组件上使用它，并开始编写我们的装饰器：
- en: '[PRE58]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: A `createDecorator` function is like an extension of the Vue vm *(View-Model)*,
    so it won't have the property of an ECMAScript decorator but will function as
    a Vue decorator.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`createDecorator`函数就像Vue vm *(View-Model)*的扩展，因此它不会有ECMAScript装饰器的属性，但会作为Vue装饰器的功能。'
- en: 'We need to use the `componentLogger.js` file in our decorator. This function
    will take all the data values that are set in the `"decorated" component` and
    add a watcher to it. This watcher will log the new and old values whenever it
    changes. This function will only be executed with a debug data set to `true`:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在我们的装饰器中使用`componentLogger.js`文件。这个函数将获取在“装饰”组件中设置的所有数据值，并对其添加一个监视器。每当它改变时，这个监视器将记录新值和旧值。这个函数只有在调试数据设置为`true`时才会执行：
- en: '[PRE59]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now, we need to import the decorator to our `Counter.vue` component file located
    in the `src/components` folder and add the debugger data to it:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将装饰器导入到位于`src/components`文件夹中的`Counter.vue`组件文件中，并向其添加调试器数据：
- en: '[PRE60]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: How it works...
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `createDecorator` function is a factory function that extends the Vue vm
    (View Model), which produces an extension of the Vue component, such as a Vue mixin.
    A Vue mixin is a property of the Vue component that can be used to share and reuse
    code between components.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`createDecorator`函数是一个工厂函数，它扩展了Vue vm（View Model），产生了Vue组件的扩展，比如一个Vue mixin。Vue
    mixin是Vue组件的一个属性，可以用来在组件之间共享和重用代码。'
- en: When we call the mixin, it takes the current component as an option of the first
    argument (the key if it was attached to a property), and the index of it.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用mixin时，它将当前组件作为第一个参数的选项（如果它附加到属性，则为键），以及它的索引。
- en: We added a dynamic debugger that is only attached when debug data exists and
    is set to `true`. This debugger will log the current data and set watchers for
    the changes in the data, showing the logs on the console each time the data is
    changed.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个动态调试器，只有在存在调试数据并且设置为`true`时才会附加。这个调试器将记录当前数据，并为数据的更改设置监视器，每次数据更改时都会在控制台上显示日志。
- en: There's more...
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When using linters, some rules can be a problem with decorators. So, it's wise
    to disable them only on the files that are having problems with the rules that
    are required for the code to work.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用linters时，一些规则可能会成为装饰器的问题。因此，明智的做法是仅在出现规则问题的文件上禁用它们，这些规则是代码正常工作所必需的。
- en: In an AirBnB style, for example, the `no-param-reassign` rule is required because
    the decorator uses the option as a reference to pass the value.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在AirBnB风格中，`no-param-reassign`规则是必需的，因为装饰器使用选项作为传递值的引用。
- en: See also
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about creating custom decorators with `vue-class-component`
    at [https://github.com/vuejs/vue-class-component#create-custom-decorators](https://github.com/vuejs/vue-class-component#create-custom-decorators).
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://github.com/vuejs/vue-class-component#create-custom-decorators](https://github.com/vuejs/vue-class-component#create-custom-decorators)找到有关使用`vue-class-component`创建自定义装饰器的更多信息。
- en: Find more information about decorators on ECMAScript at [https://www.typescriptlang.org/docs/handbook/decorators.html](https://www.typescriptlang.org/docs/handbook/decorators.html).
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://www.typescriptlang.org/docs/handbook/decorators.html](https://www.typescriptlang.org/docs/handbook/decorators.html)找到有关ECMAScript装饰器的更多信息。
- en: Adding custom hooks to vue-class-component
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向vue-class-component添加自定义钩子
- en: On Vue, it's possible to add hooks to its life cycle through the Plugins **application
    programming interface (API)**. The most basic example is the `vue-router` with
    the navigation guards, such as the `beforeRouterEnter` and `beforeRouterLeave`
    functions hooks.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中，可以通过插件**应用程序编程接口（API）**向其生命周期添加钩子。最基本的例子是`vue-router`与导航守卫，例如`beforeRouterEnter`和`beforeRouterLeave`函数钩子。
- en: The hooks, as the name implies, are little functions that are called each time
    something will happen.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 钩子，顾名思义，是每次发生某事时调用的小函数。
- en: You can take advantage of the hooks and make them more powerful, adding new
    functionalities to your components, such as checking for special security access,
    adding meta **search engine optimization** (**SEO**), or even pre-fetching data.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以利用这些钩子，使它们更加强大，为您的组件添加新的功能，例如检查特殊安全访问、添加**搜索引擎优化**（**SEO**）甚至预取数据。
- en: Getting ready
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we need to create our Vue CLI project. We can use the one we created
    in the last recipe or start a new one. To find how to create a Vue CLI project
    with TypeScript, please check the '*Adding TypeScript to a Vue CLI project*' recipe.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建我们的Vue CLI项目。我们可以使用上一个配方中创建的项目，也可以开始一个新项目。要了解如何在Vue CLI项目中添加TypeScript，请查看'*向Vue
    CLI项目添加TypeScript*'配方。
- en: 'Now, follow these steps to add custom hooks to your Vue project using TypeScript
    and `vue-class-component`:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤，使用TypeScript和`vue-class-component`为您的Vue项目添加自定义钩子：
- en: We need to add `vue-router` to the project. This can be done with the Vue CLI
    project creation or in the Vue UI interface after the project has been created.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将`vue-router`添加到项目中。这可以在创建Vue CLI项目时完成，也可以在创建项目后的Vue UI界面中完成。
- en: If prompted about the mode, the `vue-router` should run. Take note that selecting
    the **History** option will require special server configuration when it's time
    to deploy.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提示选择模式，应该运行`vue-router`。请注意，选择**History**选项将在部署时需要特殊的服务器配置。
- en: 'Open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows) and execute the `npm
    run serve` command, and you will see that the `vue-router` is working and that
    there are two working routers: `home` and `about`.'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），执行`npm run serve`命令，您将看到`vue-router`正在工作，并且有两个工作路由器：`home`和`about`。
- en: 'Let''s start creating and naming our hooks to register on the main application.
    To do this, we need to create a `vue-router.js` file inside the `src/classComponentsHooks`
    folder:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始创建并命名我们的钩子以注册到主应用程序。为此，我们需要在`src/classComponentsHooks`文件夹中创建一个`vue-router.js`文件：
- en: '[PRE61]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We need to import this file to the `main.ts` file as it needs to be called
    before the application final build:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将这个文件导入到`main.ts`文件中，因为它需要在应用程序最终构建之前被调用：
- en: '[PRE62]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: We now have the hooks registered on the `vue-class-component` and they can be
    used inside the TypeScript components.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经在`vue-class-component`中注册了这些钩子，并且它们可以在TypeScript组件中使用。
- en: 'We need to create a new router location called `Secure.vue` in the `src/views`
    folder. The secure page will have a password to enter, `vuejs`. When the user
    enters this password, the router guard will grant permission, and the user can
    see the page. If the password is wrong, the user will be taken back to the home
    page. When they leave the page, an alert will show a message to the user:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在`src/views`文件夹中创建一个名为`Secure.vue`的新路由位置。安全页面将有一个输入密码，`vuejs`。当用户输入此密码时，路由守卫将授予权限，用户可以看到页面。如果密码错误，用户将被带回到主页。当他们离开页面时，警报将向用户显示一条消息：
- en: '[PRE63]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now with our page done, we need to add it to the `router.ts` file to be able
    to call it in the Vue application:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的页面已经完成，我们需要将其添加到`router.ts`文件中，以便在Vue应用程序中调用它：
- en: '[PRE64]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'With the route added and the view created, the final step is to add the link
    to the main `App.vue` file, and we will have a component with an integrated hook
    on it:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由添加完成并创建视图后，最后一步是将链接添加到主`App.vue`文件中，这样我们就会得到一个集成了钩子的组件：
- en: '[PRE65]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: How it works...
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The class component needs to understand what are the navigation guards that
    are being added to the Vue prototype before executing the Vue application. Because
    of this, we needed to import the custom hooks on the first line of the `main.ts`
    file.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行Vue应用程序之前，类组件需要了解被添加到Vue原型的导航守卫是什么。因此，我们需要在`main.ts`文件的第一行导入自定义钩子。
- en: In the component, with the hooks registered, it's possible to add them as methods
    because the `vue-class-component` has made all those custom imports into base
    methods for the component decorator.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件中，通过注册钩子，可以将它们添加为方法，因为`vue-class-component`已经将所有这些自定义导入转换为组件装饰器的基本方法。
- en: We used two of the `vue-router` navigation guards' hooks. Those hooks are called
    each time a route will enter or leave. The first two parameters we didn't use,
    the `to` and `from` parameters, are the ones that carry information about the
    future route and the past route.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了两个`vue-router`导航守卫的钩子。这些钩子在每次路由进入或离开时都会被调用。我们没有使用的前两个参数`to`和`from`是携带有关未来路由和过去路由的信息的参数。
- en: The `next` function is always required because it executes a route change. If
    no argument is passed in the function, the route will continue with the one that
    was called, but if you want to change the route on the fly, it is possible to
    pass an argument to change where the user will go.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`next`函数总是必需的，因为它执行路由更改。如果在函数中没有传递参数，路由将继续使用被调用的路由，但如果想要即时更改路由，可以传递参数来改变用户将要前往的位置。'
- en: See also
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more about vue-router navigation guards at [https://router.vuejs.org/guide/advanced/navigation-guards.html](https://router.vuejs.org/guide/advanced/navigation-guards.html).
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://router.vuejs.org/guide/advanced/navigation-guards.html](https://router.vuejs.org/guide/advanced/navigation-guards.html)中了解更多关于vue-router导航守卫的信息。
- en: Find more about the vue-class-component hooks at [https://github.com/vuejs/vue-class-component#adding-custom-hooks](https://github.com/vuejs/vue-class-component#adding-custom-hooks).
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://github.com/vuejs/vue-class-component#adding-custom-hooks](https://github.com/vuejs/vue-class-component#adding-custom-hooks)中了解更多关于vue-class-component钩子的信息。
- en: Adding vue-property-decorator to vue-class-component
  id: totrans-437
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将vue-property-decorator添加到vue-class-component
- en: Some of the most important parts of Vue are missing in the `vue-class-component`
    in the form of TypeScript decorators. So, the community made a library called
    `vue-property-decorator` that is fully endorsed by the Vue core team.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: Vue中一些最重要的部分在`vue-class-component`中以TypeScript装饰器的形式缺失。因此，社区制作了一个名为`vue-property-decorator`的库，这个库得到了Vue核心团队的全力支持。
- en: This library brings some of the missing parts as ECMAScript proposal decorators,
    such as `props`, `watch`, `model`, `inject`, and so on.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库引入了一些缺失的部分，如ECMAScript提案装饰器，比如`props`、`watch`、`model`、`inject`等。
- en: Getting ready
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程的先决条件如下：
- en: Node.js 12+
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-446
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we need to create our Vue CLI project. We can use the one we created
    in the last recipe or start a new one. To find how to create a Vue CLI project
    with TypeScript, please check the '*Creating a custom mixin with vue-class-component*'
    recipe.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建Vue CLI项目。我们可以使用上一个示例中创建的项目，也可以开始一个新项目。要了解如何使用TypeScript创建Vue CLI项目，请查看'*使用vue-class-component创建自定义mixin*'示例。
- en: 'Follow these steps to add `vue-property-decorator` to a Vue `class-based component`:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将`vue-property-decorator`添加到Vue`基于类的组件`中：
- en: 'We need to add the `vue-property-decorator` to our project. Open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将`vue-property-decorator`添加到我们的项目中。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE66]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'In the components mixin, we will add a decorator for receiving a prop, which
    will be a value for our number that is calculated:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件的mixin中，我们将添加一个装饰器来接收一个prop，这将是我们计算的数字的值：
- en: '[PRE67]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'With that number, we need to make the watchers emit the event to the parent
    component when the value changes, and update the value inside when the value is
    changed within the parent component. To do this, we need to create a new file
    called `numberWatcher.ts` inside the `src/mixins` folder:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了这个数字，当值发生变化时，我们需要使观察者向父组件发出事件，并在父组件内部值发生变化时更新值。为此，我们需要在`src/mixins`文件夹内创建一个名为`numberWatcher.ts`的新文件：
- en: '[PRE68]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: In Vue, the `v-model` directive works like a sugar syntax, as a combination
    of the Vue `$emit` function and the Vue `props` function. When the value is changed,
    the component needs to `$emit` with the `'input'` name, and the component needs
    to have in the `props` function a `value` key, which will be the value that will
    be passed down from the parent component to the child component.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中，`v-model`指令的工作原理类似于糖语法，它是Vue `$emit`函数和Vue `props`函数的组合。当值发生变化时，组件需要使用`'input'`名称进行`$emit`，并且组件需要在`props`函数中有一个`value`键，这将是从父组件传递到子组件的值。
- en: 'With our mixin updated, our components need to be updated too. First, we will
    update the `Counter.vue` component, changing the imported mixin from the `defaultNumber.ts` file
    to `numberWatcher.ts`:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随着我们的mixin更新，我们的组件也需要更新。首先，我们将更新`Counter.vue`组件，将导入的mixin从`defaultNumber.ts`文件更改为`numberWatcher.ts`：
- en: '[PRE69]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now, we will update the `CounterByTen.vue` component, and add the newly created
    mixin:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将更新`CounterByTen.vue`组件，并添加新创建的mixin：
- en: '[PRE70]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'With everything settled, we just need to update the `App.vue` component. This
    time, we will store a variable in the component that will be passed down to both
    of the child components, and when the components emit the update events, this
    variable will change automatically, updating the other components too:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切就绪后，我们只需要更新`App.vue`组件。这一次，我们将在组件中存储一个变量，该变量将传递给两个子组件，当组件发出更新事件时，此变量将自动更改，也会更新其他组件：
- en: '[PRE71]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: How it works...
  id: totrans-462
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: By injecting the decorators at the `vue-class-components`, the `vue-property-decorator`
    helps the TypeScript compiler check for the types and static analysis of your
    Vue code.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`vue-class-components`中注入装饰器，`vue-property-decorator`帮助TypeScript编译器检查Vue代码的类型和静态分析。
- en: We used two of the decorators available, the `@Watch` and `@Prop` decorators.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了两个可用的装饰器，`@Watch`和`@Prop`装饰器。
- en: As we took apart the common parts of our code in the form of mixins, the process
    implementation became easier.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将代码的常见部分拆分成mixin的形式时，流程实现变得更加容易。
- en: The parent component passed down a property to the child component, passing
    the initial value and the subsequently updated value.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 父组件向子组件传递了一个属性，传递了初始值和随后更新的值。
- en: This value is checked and updated inside the child component, which is used
    to update a local variable used by the calculation functions. When the calculation
    is done and the value is changed, the watcher emits an event that is passed to
    the parent component, which updates the main variable, and the loop goes on.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值在子组件内部进行检查和更新，用于更新计算函数使用的本地变量。当计算完成并且值发生变化时，watcher会发出一个事件，传递给父组件，父组件更新主变量，循环继续。
- en: There's more...
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is another library that works the same as the `vue-property-decorator`,
    but for the `vuex` plugin, called `vuex-class`.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个库，它与`vue-property-decorator`相同，但用于`vuex`插件，名为`vuex-class`。
- en: This library uses the same process as `vue-property-decorator`. It creates an
    inject decorator in the component. Those decorators help the TypeScript compiler
    to check for types in the development process.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库使用与`vue-property-decorator`相同的过程。它在组件中创建一个inject装饰器。这些装饰器帮助TypeScript编译器在开发过程中检查类型。
- en: You can find more information about this library at [https://github.com/ktsn/vuex-class/](https://github.com/ktsn/vuex-class/)
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/ktsn/vuex-class/](https://github.com/ktsn/vuex-class/)找到有关这个库的更多信息。
- en: See also
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about the `vue-property-decorator` at [https://github.com/kaorun343/vue-property-decorator](https://github.com/kaorun343/vue-property-decorator)
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/kaorun343/vue-property-decorator](https://github.com/kaorun343/vue-property-decorator)找到有关`vue-property-decorator`的更多信息。
