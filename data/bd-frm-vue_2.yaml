- en: A Form in its Simplest Form
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最简单的表单
- en: All right! Let's dive into this headfirst (with a little detour on the way to
    make it look pretty). We will create a very simple page with a form. This form
    will ask for some basic personal data from our user, and the second part of the
    form will be used for more specific questions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！让我们毫不犹豫地开始（在美化之前稍作一些绕路）。我们将创建一个非常简单的带有表单的页面。这个表单将向用户询问一些基本的个人数据，表单的第二部分将用于更具体的问题。
- en: By the end of this chapter, you will have a solid understanding of how to build
    basic forms in Vue, plus you'll get a quick refresher on basic Vue concepts such
    as `v-model`, events, and properties.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将对如何在Vue中构建基本表单有扎实的理解，而且您还将快速复习基本的Vue概念，如`v-model`、事件和属性。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting started using Bootstrap
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bootstrap入门
- en: Actually writing some code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际编写一些代码
- en: Binding the inputs to local state
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将输入绑定到本地状态
- en: Submitting the form's data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交表单数据
- en: Bringing in Axios
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入Axios
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code for this chapter can be found in the following GitHub repository:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在以下GitHub存储库中找到：
- en: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter02](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter02).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter02](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter02)。'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/35F6340](http://bit.ly/35F6340)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/35F6340](http://bit.ly/35F6340)'
- en: Getting started using Bootstrap
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bootstrap入门
- en: Let's begin by adding Bootstrap 4 as a dependency to our project, so we won't
    have to think about design and can focus on the functionality of our forms.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将Bootstrap 4作为项目的依赖项添加到我们的项目中，这样我们就不必考虑设计，可以专注于我们表单的功能。
- en: Bootstrap is a popular open source toolkit that gives us some predefined classes
    and styles so that we can make our app look nice without having to worry much
    about styles.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap是一个流行的开源工具包，它为我们提供了一些预定义的类和样式，这样我们就可以让我们的应用程序看起来漂亮，而不必太担心样式。
- en: 'To get Bootstrap installed and set up for our project, follow these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Bootstrap并为我们的项目设置，请按照以下步骤进行：
- en: 'Open up the Terminal to your project''s folder, and install the dependency
    with the following command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目文件夹的终端，并使用以下命令安装依赖项：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Awesome! This adds the package to our `node_modules` folder and `package.json`.
    Now, go ahead and import the necessary styles into `src/main.js`. Use the following
    command to do so:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太棒了！这将把包添加到我们的`node_modules`文件夹和`package.json`中。现在，继续并将必要的样式导入到`src/main.js`中。使用以下命令来执行：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We're not going to be using any of Bootstrap's scripts, so we can live with
    only the minified CSS.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会使用Bootstrap的脚本，所以我们只需要最小化的CSS就可以了。
- en: 'Let''s do a little cleaning on our `App.vue` file because, right now, we only
    have some boilerplate code—but we want to start fresh! So, let''s begin the cleaning:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对我们的`App.vue`文件进行一些清理，因为现在我们只有一些样板代码，但我们想要重新开始！所以，让我们开始清理：
- en: 'Replace everything inside `App.vue` with the following code:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换`App.vue`中的所有内容：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Go ahead and start up your development server by running the following on your
    Terminal:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端上运行以下命令来启动开发服务器：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Open up the link that the Terminal shows you (the one that says local) and you
    should see a blank screen in your browser.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端显示的链接（显示为本地）并在浏览器中应该看到一个空白屏幕。
- en: Behold the blank canvas of the first steps to form greatness and stuff! Yaaas!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧，这是伟大和重要的第一步的空白画布！耶！
- en: Let's move on and get working on the actual form. It's time for some code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并开始着手实际的表单工作。现在是写一些代码的时候了。
- en: Actually writing some code
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际编写一些代码
- en: All right, enough setup—let's write some code! We will start with a very simple
    form so that our users can fill out their personal information. Nothing crazy,
    just baby steps.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，够了设置——让我们写一些代码！我们将从一个非常简单的表单开始，这样我们的用户可以填写他们的个人信息。没什么疯狂的，只是小步走。
- en: We are going to add three fields to our form. A `firstName` input, a `lastName`
    input, and an `email` input. Finally, we will add a `Submit` button.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的表单添加三个字段。一个`firstName`输入，一个`lastName`输入和一个`email`输入。最后，我们将添加一个`Submit`按钮。
- en: Remember back when we installed Bootstrap? This is where it comes out to shine.
    All of the classes that we are going to add to our markup will get magically styled
    by Bootstrap.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们安装Bootstrap吗？这就是它发挥作用的地方。我们要添加到标记中的所有类都将由Bootstrap自动样式化。
- en: 'Make these changes to your `App.vue` file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对您的`App.vue`文件进行以下更改：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous code example, we have set up a container with `row`. Inside
    this `row`, we have populated it with three different inputs, two `text` types
    (one for the first and one for the last name), and an `email` type input. Finally,
    we added `<button>`, which will serve as the main way to submit the form.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码示例中，我们设置了一个带有`row`的容器。在这个`row`中，我们用三个不同的输入填充了它，两个`text`类型（一个用于名字，一个用于姓氏），以及一个`email`类型的输入。最后，我们添加了`<button>`，它将作为提交表单的主要方式。
- en: Save your file and check out your browser. If you still have the server running,
    you should see the changes reflected automatically. Okay, I agree it's a little
    underwhelming, but I did say we're starting with a simple example, and this is
    as simple as it gets!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 保存您的文件并检查您的浏览器。如果服务器仍在运行，您应该会自动看到更改。好吧，我同意这有点令人失望，但我确实说过我们从一个简单的例子开始，这就是最简单的例子！
- en: The form is fully functional, and you can even click the Submit button for it
    to submit to itself and accomplish absolutely nothing. Neat! But let's spice this
    up with some Vue.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表单是完全功能的，甚至可以单击提交按钮使其提交给自身并实现绝对没有任何作用。很棒！但让我们用一些Vue来调味一下。
- en: Binding the inputs to local state
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将输入绑定到本地状态
- en: The purpose of forms in a web application is to capture some user input and
    be able to do something with it. In our example, we still don't have any way to
    access the user's input with JavaScript for our Vuetiful plans—so, let's start
    with that.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序中表单的目的是捕获一些用户输入并能够对其进行操作。在我们的示例中，我们仍然没有任何方法使用JavaScript访问用户的输入以进行我们美好的Vuetiful计划，所以让我们从那里开始。
- en: Please note that you do not necessarily have to wrap up your form's data inside
    a secondary object, but, I have found it to be cleaner—especially when you start
    adding other data properties to your component, which may not necessarily be related
    to your form.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您不一定要将表单数据包装在次要对象中，但我发现这样更清晰——特别是当您开始向组件添加其他数据属性时，这些属性可能与您的表单无关。
- en: 'Create a new `data` property on the instance of your `App.vue` file. Inside
    of it, we''re going to declare a `form` object, which will, in turn, hold a property
    for each one of our inputs:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`App.vue`文件的实例上创建一个新的`data`属性。在其中，我们将声明一个`form`对象，它将依次包含每个输入的属性：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For us to bind our inputs' values to our internal state, we need to make use
    of Vue's `v-model` attribute. So, let's add `v-model` to each of our inputs. That
    way, whenever the user types in or deletes information, the value of the input
    element will be bound to our `data` property.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的输入值绑定到内部状态，我们需要使用Vue的`v-model`属性。因此，让我们为每个输入添加`v-model`。这样，每当用户输入或删除信息时，输入元素的值将绑定到我们的`data`属性。
- en: 'Remember that `v-model` is not a *magical* attribute. It is a shorthand for
    two things:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`v-model`不是一个*神奇*的属性。它是两件事的简写：
- en: 'It binds the `input` event of our input boxes:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它绑定了我们输入框的`input`事件：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It binds the `value` attribute to our `data` property:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将`value`属性绑定到我们的`data`属性：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Go ahead and add `v-model` to all of our inputs:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 继续在所有输入中添加`v-model`：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows the Vue developer tools displaying the two-way
    data binding between our form and the internal state in our data:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了Vue开发者工具显示我们的表单与数据内部状态之间的双向数据绑定：
- en: '![](assets/3de882c9-f5d0-4299-8ec2-c0c7c3852100.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3de882c9-f5d0-4299-8ec2-c0c7c3852100.png)'
- en: Great job! Now, this isn't super impressive, but we are building the foundations
    for things to come.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在，这并不是非常令人印象深刻，但我们正在为未来打下基础。
- en: In the following section, we're going to look at how to handle the form being
    submitted and sent to an API endpoint.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看看如何处理表单提交并发送到API端点。
- en: Submitting the form's data
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交表单数据
- en: As it currently is, the form is getting submitted to the same URL when you click
    the Submit button. This is not Vue magic—this is just default `<form>` behavior,
    especially since we didn't specify an action attribute on the tag.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当单击提交按钮时，表单将提交到相同的URL。这不是Vue的魔法 - 这只是默认的`<form>`行为，特别是因为我们没有在标签上指定`action`属性。
- en: In most real-world scenarios, you'll want to perform a couple of operations
    before submitting a form. The most common would be validating some inputs, or
    perhaps even overriding the default submit behavior with an asynchronous call
    using a library such as Axios.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数实际场景中，您希望在提交表单之前执行一些操作。最常见的操作可能是验证一些输入，或者甚至使用诸如Axios之类的库进行异步调用来覆盖默认的提交行为。
- en: First, we need to make sure that, when the user clicks the Submit button, we
    prevent the form from going out on its own. We also want to bind a new method
    to it being clicked.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保当用户单击提交按钮时，我们阻止表单自行提交。我们还希望绑定一个新的方法来处理点击。
- en: 'Let''s bind to the form''s `submit` event first. Remember that we want to add
    the `.prevent` modifier to the event so that, when the form is submitted, the
    default behavior doesn''t trigger, and our function will run as expected:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先绑定表单的`submit`事件。请记住，我们希望为事件添加`.prevent`修饰符，以便在提交表单时，不会触发默认行为，而我们的函数将按预期运行：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Sweet! Now we need to create this new `onSubmit` method on the configuration
    of our `App.vue` file. Let's use `console.log` inside the `click` method handler
    to verify that it works before going into more detail.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们需要在`App.vue`文件的配置中创建这个新的`onSubmit`方法。在进一步详细说明之前，让我们在`click`方法处理程序内使用`console.log`来验证它是否有效。
- en: 'Add this code as a property inside the export default declaration:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码作为`export default`声明内的属性添加：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Just to verify that everything is working, go ahead and open up your browser
    and click the Submit button a few times. Check the console; the log should say
    click. So far, so good—we've managed to take control of the form's behavior.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了验证一切是否正常工作，继续打开浏览器，点击几次提交按钮。检查控制台；日志应该显示点击。到目前为止，一切都很好 - 我们已经成功控制了表单的行为。
- en: Let's make a *very* basic validation method as an example. We will verify that
    the input's length is `> 0` (not empty) for the three fields. In a later chapter,
    we will go into Vuelidate, which will provide more deep and powerful validation
    to our forms.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个*非常*基本的验证方法作为示例。我们将验证三个字段的输入长度是否`> 0`（不为空）。在后面的章节中，我们将介绍Vuelidate，它将为我们的表单提供更深入和强大的验证。
- en: 'Let''s make a new computed property called `formIsValid`, which will check
    for the conditions we just discussed. Add the following to `App.vue`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`formIsValid`的新计算属性，它将检查我们刚刚讨论的条件。将以下内容添加到`App.vue`中：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we have a computed property checking the state of our form, let's actually
    use it on the `onSubmit` method. We will verify that `this.formIsValid` is `true`,
    and if it isn't we will simply return and prevent the form from being submitted.
    For now, we will only use `console.log` for a confirmation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个计算属性来检查我们表单的状态，让我们在`onSubmit`方法中实际使用它。我们将验证`this.formIsValid`是否为`true`，如果不是，我们将简单地返回并阻止表单提交。现在，我们将仅使用`console.log`进行确认。
- en: 'Adjust the `onSubmit` method to the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将`onSubmit`方法调整为以下内容：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Go ahead and test this on your browser. If you are missing any fields, you will
    not get `console.log` as the validation will fail. If you fill them up and hit
    the Submit button, you will get the message in your console.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器上进行测试。如果您缺少任何字段，您将无法得到`console.log`，因为验证将失败。如果您填写它们并点击提交按钮，您将在控制台中收到消息。
- en: In the next block, we will incorporate a third-party library, Axios, to help
    us to send the data.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个块中，我们将引入第三方库Axios，以帮助我们发送数据。
- en: Bringing in Axios
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入Axios
- en: The next step in our form is to actually have the form send the user's data
    to our servers. For the sake of example, the data is not going to be actually
    stored anywhere, but we will look at the steps of creating the POST call that
    most forms will use for transferring the data to an API or server endpoint.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们表单的下一步是实际上让表单将用户的数据发送到我们的服务器。举例来说，数据实际上不会被存储在任何地方，但我们将看一下创建POST调用的步骤，大多数表单将用于将数据传输到API或服务器端点。
- en: Axios is a fantastic and popular library for sending and receiving data from
    servers. I personally recommend it as a go-to whenever you need to make any HTTP
    calls from your Vue apps. You can find the official GitHub page here: [github.com/axios/axios](http://github.com/axios/axios).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Axios是一个非常棒和流行的库，用于向服务器发送和接收数据。我个人推荐它作为您的Vue应用程序中进行任何HTTP调用时的首选。您可以在这里找到官方的GitHub页面：[github.com/axios/axios](http://github.com/axios/axios)。
- en: 'Follow the next set of steps to get Axios ready on your project:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤准备好您的项目中的Axios：
- en: 'Fire up your Terminal and run the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并运行以下命令：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are going to need an API endpoint to make our calls to. Since we don't have
    any servers at hand—and to keep things really simple—we are going to use an app
    called Mockoon. Head over to [mockoon.com/#download](http://mockoon.com/#download) and
    download the app for your OS. Once you have it installed, launch it.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个API端点来进行调用。由于我们手头没有任何服务器，为了保持简单，我们将使用一个名为Mockoon的应用程序。前往[mockoon.com/#download](http://mockoon.com/#download)下载适用于您操作系统的应用程序。安装完成后，启动它。
- en: In the second column, you are going to see two example routes; the one that
    we are interested in is the POST route to /dolphins (frankly, I'm more of a sea
    otter kind of girl, but I'm rolling with the punches). Go ahead and click the
    green play triangle on the very top; this will start a server on `localhost:3000`
    as default, but you can change the port if the default doesn't work for you for
    whatever reason.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二列中，您将看到两个示例路由；我们感兴趣的是POST路由到/dolphins（坦白说，我更喜欢海獭，但我会接受这个）。继续点击顶部的绿色播放三角形；这将在`localhost:3000`上启动一个服务器，默认情况下，但如果默认设置不适用于您，您可以更改端口。
- en: Now that Axios has been added as a dependency to the project, we can import
    it into `App.vue` to make use of its different methods.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Axios已经作为项目的依赖项添加，我们可以将其导入到`App.vue`中，以利用其不同的方法。
- en: 'Add the import statement to the top of the `App.vue` file, right after the
    opening `<script>` tag, and before the `export default {` line:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件的顶部添加导入语句，就在开头的`<script>`标签之后，在`export default {`行之前：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Thanks to this import, we now have Axios available anywhere in this component.
    Please keep in mind that if, later on, we want to use it on another component
    or file, we will have to import it again.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个导入，我们现在可以在这个组件的任何地方使用Axios。请记住，如果以后我们想在另一个组件或文件中使用它，我们将不得不再次导入它。
- en: 'Let''s update the `onSubmit` button once more. This time, we will get rid of `console.log`
    and then make an `async` call with Axios:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再次更新`onSubmit`按钮。这一次，我们将摆脱`console.log`，然后用Axios进行`async`调用：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Every Axios method returns a promise, which is a vanilla JavaScript object.
    The `then` block is called whenever this promise resolves, in other words, when
    the actual HTTP request is completed! For more information about promises, MDN
    has a great resource at [developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Axios方法都返回一个promise，这是一个原始的JavaScript对象。当这个promise解析时，也就是说，当实际的HTTP请求完成时，`then`块就会被调用！关于promises的更多信息，MDN在[developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)上有一个很好的资源。
- en: If you go to your browser now and try it out, you will see that, when the Submit
    button is clicked, our `onSubmit` method is triggered and `console.log` is successfully
    executed. At this point, we can say we have a very basic (but sadly useless) form!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在去浏览器尝试一下，你会发现，当点击提交按钮时，我们的`onSubmit`方法被触发，`console.log`成功执行。在这一点上，我们可以说我们有一个非常基本的（但可悲的无用）表单！
- en: Let's take it a little bit further and actually disable the input button until
    the form is valid. (Remember that our validation is very weak right now, but we
    will work on it later on.)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再走一步，实际上在表单有效之前禁用输入按钮。（请记住，我们的验证现在非常薄弱，但我们以后会加强它。）
- en: 'Go back to your template, and let''s hook up the `:disabled` attribute of the
    button to our computed property, `formIsValid`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 回到你的模板，让我们将按钮的`:disabled`属性与我们的计算属性`formIsValid`关联起来：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once again, test this out in your browser and you will see that the input button
    is grayed out until the form is actually filled out. Neat!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 再次在浏览器中测试一下，你会发现在表单实际填写之前，输入按钮是灰色的。很整洁！
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have taken the first steps to create a simple data-gathering
    form. We styled it using Bootstrap and we hooked into the `<form>` events. Finally,
    we used Axios and Mockoon to send the data to a dummy backend for testing.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经迈出了创建一个简单数据收集表单的第一步。我们使用Bootstrap对其进行了样式化，并钩入了`<form>`事件。最后，我们使用Axios和Mockoon将数据发送到一个虚拟后端进行测试。
- en: In the next chapter, we will take a look into building reusable form components
    harnessing the power of Vue.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨利用Vue的强大功能来构建可重用的表单组件。
