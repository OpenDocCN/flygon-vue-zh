- en: Creating the User Vuex Module, Pages, and Routes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户Vuex模块、页面和路由
- en: Now, it's time to start giving the application a recognizable face. In this
    chapter, we will start developing the interaction between the user and the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候给应用程序一个可识别的面孔了。在本章中，我们将开始开发用户与应用程序之间的交互。
- en: We will use the knowledge we've gathered from the preceding chapters to bring
    this application to life by using custom business rules, Vuex data stores, special
    application layouts, and pages that your user will be able to interact with.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用我们从前面章节中收集的知识，通过使用自定义业务规则、Vuex数据存储、特殊应用程序布局和用户可以交互的页面，将这个应用程序变得生动起来。
- en: In this chapter, we will learn how to create the User Vuex module so that we
    can store and manage everything related to the user and the user registration,
    login, validation, and edit pages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何创建用户Vuex模块，以便我们可以存储和管理与用户、用户注册、登录、验证和编辑页面相关的一切。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Creating the User Vuex module in your application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的应用程序中创建用户Vuex模块
- en: Creating User pages and routes for your application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的应用程序创建用户页面和路由
- en: Let's get started!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using **Node.js**, **AWS Amplify**,and **Quasar
    Framework**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用**Node.js**、**AWS Amplify**和**Quasar Framework**。
- en: '**Attention, Windows users!** You need to install an `npm` package called `windows-build-tools`
    to be able to install the required packages. To do this, open PowerShell as administrator
    and execute the `> npm install -g windows-build-tools` command.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意，Windows用户！** 您需要安装一个名为`windows-build-tools`的`npm`包，以便能够安装所需的软件包。要做到这一点，以管理员身份打开PowerShell并执行`>
    npm install -g windows-build-tools`命令。'
- en: 'To install **Quasar Framework****,** you need to open a Terminal (macOS or
    Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**Quasar Framework**，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install **AWS Amplify****,** you need to open a Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**AWS Amplify**，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating the User Vuex module in your application
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的应用程序中创建用户Vuex模块
- en: Now, it's time to start storing data in our application state manager or Vuex.
    In the application context, all the data that is stored is saved within namespaces.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候开始在我们的应用状态管理器或Vuex中存储数据了。在应用上下文中，存储的所有数据都保存在命名空间中。
- en: In this recipe, we will learn how to create the user Vuex module. Using our
    knowledge from the previous chapter, we will then create actions to create a new
    user, update their data, validate the user, sign in the user on Amplify, and list
    all the users on the application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何创建用户Vuex模块。利用我们从上一章中获得的知识，然后创建动作来创建新用户、更新他们的数据、验证用户、在Amplify上登录用户，并列出应用程序中的所有用户。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所需的Node.js全局对象如下：
- en: '`@aws-amplify/cli`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@aws-amplify/cli`'
- en: '`@quasar/cli`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@quasar/cli`'
- en: To start our User Vuex store module, we will continue with the project that
    we created in [Chapter 4](ee24c1a0-5838-4f12-8056-a86f07c8af40.xhtml), *Creating
    Custom Application Components and Layouts*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的用户Vuex存储模块，我们将继续使用我们在[第4章](ee24c1a0-5838-4f12-8056-a86f07c8af40.xhtml)中创建的项目，即*创建自定义应用程序组件和布局*。
- en: This recipe will be completed using GraphQL queries and mutations, as well as
    their drivers, which were written in the *Creating your first GraphQL API* and *Creating
    the AWS Amplify driver for your application* recipes of [Chapter 3](6748f2ed-6fa0-4925-8a71-199269fae4ae.xhtml),
    *Setting Up Our Chat App - AWS Amplify Environment and GraphQL*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将使用GraphQL查询和突变完成，以及它们的驱动程序，这些驱动程序是在[第3章](6748f2ed-6fa0-4925-8a71-199269fae4ae.xhtml)的*创建您的第一个GraphQL
    API*和*为您的应用程序创建AWS Amplify驱动程序*食谱中编写的。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will split the creation of the User Vuex module into five parts: creating
    the **state**, **mutations**, **getters**, and **actions**, and then adding the
    module to Vuex.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把用户的Vuex模块的创建分为五个部分：创建**state**，**mutations**，**getters**和**actions**，然后将模块添加到Vuex中。
- en: Creating the User Vuex state
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户的Vuex状态
- en: 'To store data on a Vuex module, we need a state that will store it for us.
    Follow these steps to create the User state:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Vuex模块上存储数据，我们需要一个将为我们存储数据的状态。按照以下步骤创建用户状态：
- en: In the `store` folder, create a new folder called `user`. Inside, create a new
    file called `state.js` and open it.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`store`文件夹中，创建一个名为`user`的新文件夹。在内部，创建一个名为`state.js`的新文件并打开它。
- en: 'Create a new function called `createState`, which returns a JavaScript object
    that provides the `id`, `username`, `email`, `name`, `avatar`, `password`, `loading`, `validated`,
    and `error` properties. The `id`, `username`, `email`, `name`, and `password` properties
    will be defined as an empty `string`, while the `loading` and `validated` properties
    will be defined as `false`. `error` will be defined as `undefined` and `avatar` is
    a JavaScript object with three properties – `key`, `bucket`, and `region`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`createState`的新函数，它返回一个JavaScript对象，提供`id`，`username`，`email`，`name`，`avatar`，`password`，`loading`，`validated`和`error`属性。`id`，`username`，`email`，`name`和`password`属性将被定义为空字符串，而`loading`和`validated`属性将被定义为`false`。`error`将被定义为`undefined`，`avatar`是一个具有三个属性的JavaScript对象-`key`，`bucket`和`region`：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, in order to export the state as a singleton and make it available
    as a JavaScript object, we need to `export default` the execution of the `createState` function:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了将状态导出为单例并将其作为JavaScript对象可用，我们需要`export default`执行`createState`函数：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating the User Vuex mutations
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户的Vuex mutations
- en: 'To save any data on a state, Vuex needs a mutation. Follow these steps to create
    the User mutation that will manage the mutations for this module:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要在状态上保存任何数据，Vuex需要一个mutation。按照以下步骤创建将管理此模块的mutations的用户mutation：
- en: Create a new file called `types.js` inside the `store/user` folder and open
    it.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`store/user`文件夹内创建一个名为`types.js`的新文件并打开它。
- en: 'In the file, export a default JavaScript object that provides the `CREATE_USER`, `SET_USER_DATA`, `CLEAR_USER`, `USER_VALIDATED`, `LOADING`,
    and `ERROR` properties. The values are the same as the properties, but they are
    formatted as strings:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中，导出一个默认的JavaScript对象，提供`CREATE_USER`，`SET_USER_DATA`，`CLEAR_USER`，`USER_VALIDATED`，`LOADING`和`ERROR`属性。值与属性相同，但格式为字符串。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Create a new file called `mutations.js` inside the `store/user` folder and open
    it.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`store/user`文件夹内创建一个名为`mutations.js`的新文件并打开它。
- en: 'Import the newly created `types.js` file and the `createState` JavaScript object from `state.js`:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入新创建的`types.js`文件和`state.js`中的`createState`JavaScript对象：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a new function called `setLoading`, with the state as the first argument.
    Inside, we will set `state.loading` to `true`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`setLoading`的新函数，状态作为第一个参数。在内部，我们将设置`state.loading`为`true`：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a new function called `setError`, with `state` as the first argument
    and `error` as the second with a default value of `new Error()`. Inside, we will
    set `state.error` to `error` and `state.loading` to `false`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“setError”的新函数，以“state”作为第一个参数，并以“error”作为第二个参数，其默认值为“new Error()”。在内部，我们将将“state.error”设置为“error”，将“state.loading”设置为“false”：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a new function called `createUser`, with `state` as the first argument
    and a JavaScript object as the second. This JavaScript object will provide the `id`, `email`, `password`, `name`,
    and `username` properties. All of the properties will be empty strings. Inside the
    function, we will define the `state` properties as the ones we received in the
    argument of the function:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“createUser”的新函数，以“state”作为第一个参数，并以JavaScript对象作为第二个参数。这个JavaScript对象将提供“id”、“email”、“password”、“name”和“username”属性。所有属性都将是空字符串。在函数内部，我们将定义“state”属性为函数参数中收到的属性：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a new function called `validateUser` with `state` as the first argument.
    Inside it, we will set the `state.validated` property to `true`, delete the `state.password` property,
    and set the `state.loading` property to `false`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“validateUser”的新函数，以“state”作为第一个参数。在其中，我们将将“state.validated”属性设置为“true”，删除“state.password”属性，并将“state.loading”属性设置为“false”：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a new function called `setUserData`, with `state` as the first argument
    and a JavaScript object as the second arguments. This object will provide the `id`, `email`, `password`, `name`,
    and `username` properties. All of them will be empty strings. `avatar` is a JavaScript
    object with three properties: `key`, `bucket`, and `region`. Inside the function,
    we will define the `state` properties as the ones we received in the argument
    of the function:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“setUserData”的新函数，以“state”作为第一个参数，并以JavaScript对象作为第二个参数。这个对象将提供“id”、“email”、“password”、“name”和“username”属性。它们都将是空字符串。“avatar”是一个具有三个属性的JavaScript对象：“key”、“bucket”和“region”。在函数内部，我们将定义“state”属性为函数参数中收到的属性：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a new function called `clearUser` with `state` as the first argument.
    Then, in the function of it, we will get a new clean `state` from the `createState` function
    and iterate over the current `state`, defining the values of the `state` properties
    back to the default values:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“clearUser”的新函数，以“state”作为第一个参数。然后，在其中的函数中，我们将从“createState”函数获取一个新的干净的“state”，并迭代当前的“state”，将“state”属性的值重新定义为默认值：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, export a default JavaScript object, with the keys as the imported
    mutation types and the value as the functions that correspond to each type:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，导出一个默认的JavaScript对象，其中键是导入的变异类型，值是对应于每种类型的函数：
- en: Set `MT.LOADING` to `setLoading`
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“MT.LOADING”设置为“setLoading”
- en: Set `MT.ERROR` to `setError`
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“MT.ERROR”设置为“setError”
- en: Set `MT.CREATE_USER` to `createUser`
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“MT.CREATE_USER”设置为“createUser”
- en: Set `MT.USER_VALIDATED` to `validateUser`
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“MT.USER_VALIDATED”设置为“validateUser”
- en: Set `MT.SET_USER_DATA` to `setUserData`
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“MT.SET_USER_DATA”设置为“setUserData”
- en: 'Set `MT.CLEAR_USER` to `clearUser`:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“MT.CLEAR_USER”设置为“clearUser”
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating the User Vuex getters
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户Vuex getter
- en: 'To access the data stored on the state, we need to create some `getters`. Follow
    these steps to create `getters` for the user module:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问存储在状态中的数据，我们需要创建一些“getter”。按照以下步骤为用户模块创建“getter”：
- en: In a `getter` function, the first argument that that function will receive will
    always be the current `state` of the Vuex `store`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在“getter”函数中，该函数将始终接收到Vuex“store”的当前“state”作为第一个参数。
- en: Create a new file called `getters.js` inside the `store/user` folder.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“store/user”文件夹内创建一个名为“getters.js”的新文件。
- en: 'Create a new function called `getUserId` that returns `state.id`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“getUserId”的新函数，返回“state.id”：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a new function called `getUserEmail` that returns `state.email`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“getUserEmail”的新函数，返回“state.email”：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a new function called `getUserUsername` that returns `state.username`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getUserUsername`的新函数，返回`state.username`：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a new function called `getUserAvatar` that returns `state.avatar`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getUserAvatar`的新函数，返回`state.avatar`：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a new function called `getUser` that returns a JavaScript object that
    provides the `id`, `name`, `username`, `avatar`, and `email` properties. The values
    of these properties will correspond to `state`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getUser`的新函数，返回一个提供`id`、`name`、`username`、`avatar`和`email`属性的JavaScript对象。这些属性的值将对应于`state`：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a new function called `isLoading` that returns `state.loading`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`isLoading`的新函数，返回`state.loading`：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a new function called `hasError` that returns `state.error`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`hasError`的新函数，返回`state.error`：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, export a `default` JavaScript object with the created functions (`getUserId`, `getUserEmail`, `getUserUsername`, `getUserAvatar`, `getUser`, `isLoading`, and `hasError`)
    as properties:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，导出一个带有创建的函数（`getUserId`、`getUserEmail`、`getUserUsername`、`getUserAvatar`、`getUser`、`isLoading`和`hasError`）作为属性的`default`JavaScript对象：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating the User Vuex actions
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户Vuex操作
- en: 'Follow these steps to create the User Vuex actions:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建用户Vuex操作：
- en: Create a file called `actions.js` inside the `store/user` folder and open it.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`store/user`文件夹内创建一个名为`actions.js`的文件并打开它。
- en: 'First, we need to import the functions, enums, and classes that we will be
    using here:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要导入这里将要使用的函数、枚举和类。
- en: Import `graphqlOperation` from the `aws-amplify` npm package.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`aws-amplify`npm包中导入`graphqlOperation`。
- en: Import `getUser` and `listUsers` from the GraphQL queries.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GraphQL查询中导入`getUser`和`listUsers`。
- en: Import `createUser` and `updateUser` from the GraphQL mutations.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GraphQL变异中导入`createUser`和`updateUser`。
- en: Import the `signUp`, `validateUser`, `signIn`, `getCurrentAuthUser`, and `changePassword`
    functions from `driver/auth.js`.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`driver/auth.js`中导入`signUp`、`validateUser`、`signIn`、`getCurrentAuthUser`和`changePassword`函数。
- en: Import `AuthAPI` from `driver/appsync`.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`driver/appsync`导入`AuthAPI`。
- en: 'Import the Vuex mutation types from `./types.js`:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`./types.js`导入Vuex变异类型：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a new asynchronous function called `initialLogin`. This function will
    receive a JavaScript object as the first argument. This will provide a `commit` property.
    In this function, we will get the currently authenticated user, get their data
    from the GraphQL API, and commit the user data to the Vuex store:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`initialLogin`的新异步函数。此函数将接收一个JavaScript对象作为第一个参数。这将提供一个`commit`属性。在这个函数中，我们将获取当前认证的用户，从GraphQL
    API获取他们的数据，并将用户数据提交到Vuex存储中：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a new asynchronous function called `signUpNewUser`. This function will
    receive a JavaScript object with a `commit` property as the first argument. The
    second argument is also a JavaScript object but has the `email`, `name`, and `password` properties.
    In this function, we will execute the `signUp` function from the `auth.js` driver
    to sign up and create the user in the AWS Cognito user pool, and then commit the
    user data to the Vuex store:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`signUpNewUser`的新异步函数。此函数将接收一个带有`commit`属性的JavaScript对象作为第一个参数。第二个参数也是一个JavaScript对象，但具有`email`、`name`和`password`属性。在这个函数中，我们将执行`auth.js`驱动器中的`signUp`函数来注册并在AWS
    Cognito用户池中创建用户，然后将用户数据提交到Vuex存储中：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a new asynchronous function called `createNewUser`. This function will
    receive a JavaScript object with the `commit` and `state` properties as the first
    argument. For the second argument, the function will receive a `code` string.
    In this function, we will fetch the user data from `state` and execute the `validateUser` function
    from the `auth.js` driver to check if the user is a valid user in the AWS Cognito user
    pool. Then we will execute the `signIn` function from `auth.js`, passing `email` and `password` as
    parameters `password` needs to be converted into an encrypted base64 string before
    we send it to the function. After that, we will fetch the authenticated user data
    and send it to the GraphQL API to create a new user:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`createNewUser`的新异步函数。这个函数将接收一个JavaScript对象作为第一个参数，其中包含`commit`和`state`属性。对于第二个参数，函数将接收一个`code`字符串。在这个函数中，我们将从`state`中获取用户数据，并执行`auth.js`驱动器中的`validateUser`函数，以检查用户是否是AWS
    Cognito用户池中的有效用户。然后，我们将执行`auth.js`中的`signIn`函数，将`email`和`password`作为参数传递，需要将`password`转换为加密的base64字符串，然后发送到函数。之后，我们将获取经过身份验证的用户数据，并将其发送到GraphQL
    API以创建一个新用户：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a new asynchronous function called `signInUser`. This function will
    receive a JavaScript object with the `commit` and `dispatch` properties as the
    first argument. The second argument, which is also a JavaScript object, will have
    the `email` and `password` properties. Inside this function, we will execute the `signIn` function
    from the `auth.js` driver, pass `email` and `password` as parameters, and then
    dispatch the `initialLogin` Vuex action:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`signInUser`的新异步函数。这个函数将接收一个JavaScript对象作为第一个参数，其中包含`commit`和`dispatch`属性。第二个参数也是一个JavaScript对象，包含`email`和`password`属性。在这个函数内部，我们将执行`auth.js`驱动器中的`signIn`函数，将`email`和`password`作为参数传递，然后触发`initialLogin`
    Vuex动作：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a new asynchronous function called `editUser`. This function will receive
    a JavaScript object with the `commit` and `state` properties as the first argument.
    The second argument, which is also a JavaScript object, will have the `username`, `name`, `avatar`, `password`,
    and `newPassword` properties. Inside this function, we will merge the `state` values
    with the new ones that we received as arguments. We will then send them to the
    GraphQL API to update the user information. Then, we will check if we have both
    the `password` and `newPasssword` properties filled in. If so, we will execute
    the `changePassword` function from the `auth.js` driver to change the user''s
    password in the AWS Cognito user pool:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`editUser`的新异步函数。这个函数将接收一个JavaScript对象作为第一个参数，其中包含`commit`和`state`属性。第二个参数也是一个JavaScript对象，包含`username`、`name`、`avatar`、`password`和`newPassword`属性。在这个函数内部，我们将合并`state`的值和作为参数接收到的新值。然后将它们发送到GraphQL
    API以更新用户信息。然后，我们将检查是否`password`和`newPasssword`属性都填写了。如果是，我们将执行`auth.js`驱动器中的`changePassword`函数，以在AWS
    Cognito用户池中更改用户的密码：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a new asynchronous function called `listAllUsers`. This function will
    fetch all the users on the database and return a list:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`listAllUsers`的新异步函数。这个函数将获取数据库中的所有用户并返回一个列表：
- en: '[PRE27]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, we will export all the default created functions:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将导出所有默认创建的函数：
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Adding the User module to Vuex
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将用户模块添加到Vuex
- en: 'Follow these steps to import the created User module into the Vuex state:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将创建的用户模块导入到Vuex状态中：
- en: Create a new file called `index.js` inside the `store/user` folder.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`store/user`文件夹内创建一个名为`index.js`的新文件。
- en: 'Import the `state.js`, `actions.js`, `mutation.js`, and `getters.js` files
    that we just created:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入我们刚刚创建的`state.js`、`actions.js`、`mutation.js`和`getters.js`文件：
- en: '[PRE29]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create an `export default` with a JavaScript object that provides the `state`, `actions`, `mutations`, `getters`,
    and `namespaced` (set to `true`) properties:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有JavaScript对象的`export default`，提供`state`、`actions`、`mutations`、`getters`和`namespaced`（设置为`true`）属性：
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Open the `index.js` file inside the `store `folder.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`store`文件夹中的`index.js`文件。
- en: 'Import the newly created `index.js` inside the `store/user` folder:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`store/user`文件夹中导入新创建的`index.js`：
- en: '[PRE31]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the new Vuex class instantiation, we need to add a new property called `modules` and
    define it as a JavaScript object. Then, we need to add a new `user` property – this
    will be automatically used as the value because it has the same name as the imported
    User module from the previous step:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的Vuex类实例化中，我们需要添加一个名为`modules`的新属性，并将其定义为JavaScript对象。然后，我们需要添加一个新的`user`属性-这将自动用作值，因为它与上一步中导入的User模块具有相同的名称：
- en: '[PRE32]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When you declare your Vuex store, you need to create three main properties: `state`,
    `mutations`, and `actions`. These properties act as a single structure, bound
    to the Vue application through the injected `$store` prototype or the exported
    `store` variable.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当声明你的Vuex存储时，你需要创建三个主要属性：`state`、`mutations`和`actions`。这些属性作为一个单一的结构，通过注入的`$store`原型或导出的`store`变量绑定到Vue应用程序。
- en: A `state` is a centralized object that holds your information and makes it available
    to be used by `mutations`, `actions`, or `components`. Changing `state` always
    requires that a synchronous function is executed through a `mutation`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`state`是一个集中的对象，保存着你的信息，并使其可以被`mutations`、`actions`或`components`使用。改变`state`总是需要通过`mutation`执行同步函数。'
- en: A `mutation` is a synchronous function that can change `state` and be traced.
    This means that when you're developing, you can time travel through all the executed
    `mutations` in the Vuex store.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`mutation`是一个同步函数，可以改变`state`并被追踪。这意味着在开发时，你可以在Vuex存储中时间旅行通过所有执行的`mutations`。'
- en: An `action` is an asynchronous function that can be used to hold business logic,
    API calls, dispatch other `actions`, and execute `mutations`. These functions
    are the common entry points when you need to make changes to a Vuex store.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`action`是一个异步函数，可以用来保存业务逻辑、API调用、分发其他`actions`和执行`mutations`。这些函数是当你需要对Vuex存储进行更改时的常见入口点。'
- en: 'A simple representation of a Vuex store can be seen in the following diagram:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex存储的简单表示可以在以下图表中看到：
- en: '![](assets/f7d5f47b-8fd3-4f9e-99e2-1d7df4243318.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f7d5f47b-8fd3-4f9e-99e2-1d7df4243318.png)'
- en: In this recipe, we created the User Vuex module. This module includes all the
    business logic that will help us manage the user in our application, from creating
    a new user to updating it.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了User Vuex模块。该模块包括了所有的业务逻辑，将帮助我们在应用程序中管理用户，从创建新用户到更新用户。
- en: When we looked at the Vuex actions, we used the AppSync API client to fetch
    the data and send it to our GraphQL API. We did this using the queries and mutations
    that were created by the Amplify CLI. To be able to communicate with the GraphQL
    API so that we could update the user, we fetched the data we used in the Auth
    Driver from the *Creating the AWS Amplify driver for your application* recipein [Chapter
    3](6748f2ed-6fa0-4925-8a71-199269fae4ae.xhtml), *Setting Up Our Chat App - AWS
    Amplify Environment and GraphQL*.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看Vuex actions时，我们使用AppSync API客户端来获取数据并将其发送到我们的GraphQL API。我们使用了由Amplify
    CLI创建的查询和mutations。为了能够与GraphQL API通信，以便我们可以更新用户，我们从*为应用程序创建AWS Amplify driver*配方中获取了我们在Auth
    Driver中使用的数据，[第3章](6748f2ed-6fa0-4925-8a71-199269fae4ae.xhtml)，*设置我们的聊天应用程序 -
    AWS Amplify环境和GraphQL*。
- en: Those API requests are manipulated by the Vuex mutations and stored in the Vuex
    state, which we can access through the Vuex getter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这些API请求由Vuex mutations操纵，并存储在Vuex状态中，我们可以通过Vuex getter访问。
- en: See also
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find out more information about Amplify's AppSync GraphQL client at [https://aws-amplify.github.io/docs/js/api#amplify-graphql-client](https://aws-amplify.github.io/docs/js/api#amplify-graphql-client).
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://aws-amplify.github.io/docs/js/api#amplify-graphql-client](https://aws-amplify.github.io/docs/js/api#amplify-graphql-client)找到有关Amplify的AppSync
    GraphQL客户端的更多信息。
- en: You can find out more information about Vuex at [https:/​/​vuex.​vuejs.​org/​](https://vuex.vuejs.org/).
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https:/​/​vuex.​vuejs.​org/​](https://vuex.vuejs.org/)找到有关Vuex的更多信息。
- en: You can find out more information about Vuex modules at [https://vuex.vuejs.org/guide/modules.html](https://vuex.vuejs.org/guide/modules.html)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://vuex.vuejs.org/guide/modules.html](https://vuex.vuejs.org/guide/modules.html)找到有关Vuex模块的更多信息
- en: Creating User pages and routes for your application
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的应用程序创建用户页面和路由
- en: When working with a Vue application, you will need a way to manage the location
    of your users. You can handle this using a dynamic component, but the best way
    to do this is through route management.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Vue应用程序时，您需要一种管理用户位置的方法。您可以使用动态组件来处理这个问题，但最好的方法是通过路由管理。
- en: In this recipe, we will learn how to create our application pages with the business
    rules required for each route. We will then use route management to handle everything.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何创建我们的应用程序页面，其中包含每个路由所需的业务规则。然后，我们将使用路由管理来处理一切。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisites for this recipe are as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: The project we created in the previous recipe
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在上一个食谱中创建的项目
- en: Node.js 12+
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱所需的Node.js全局对象如下：
- en: '`@aws-amplify/cli`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@aws-amplify/cli`'
- en: '`@quasar/cli`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@quasar/cli`'
- en: To start our User page and routes, we will continue with the project that we
    created in the *Creating the User Vuex module on your application *recipe.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的用户页面和路由，我们将继续使用在*在应用程序上创建用户Vuex模块*食谱中创建的项目。
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will create all the pages that we will need for our user
    in our application: the login page, the signup page, and the user edit page.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将为我们的应用程序创建所有我们需要的用户页面：登录页面、注册页面和用户编辑页面。
- en: Adding the Dialog plugin to Quasar
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将对话框插件添加到Quasar
- en: To use the Quasar Dialog plugin, we need to add it to the configuration file.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Quasar对话框插件，我们需要将其添加到配置文件中。
- en: 'Open the `quasar.conf.js` file inside the project root folder and find the `framework` property.
    Then, in the `plugins` property, add the `''Dialog''` string to the array so that
    Quasar loads the `Dialog` plugin when it boots the application:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 打开项目根文件夹内的`quasar.conf.js`文件，并找到`framework`属性。然后，在`plugins`属性中，将`'Dialog'`字符串添加到数组中，以便Quasar在启动应用程序时加载`Dialog`插件：
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Creating the User login page
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户登录页面
- en: For the User login page, we will use two of the components that we created previously: `PasswordInput` and `EmailInput`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户登录页面，我们将使用之前创建的两个组件：`PasswordInput`和`EmailInput`。
- en: Single-file component <script> section
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'It''s time to create the `<script>` section of the User login page:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建用户登录页面的`<script>`部分的时候了：
- en: In the `src/pages` folder, open the `Index.vue` file.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/pages`文件夹中，打开`Index.vue`文件。
- en: 'Import the `mapActions` and `mapGetters` functions from the `vuex` package:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`vuex`包中导入`mapActions`和`mapGetters`函数：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create an `export default` JavaScript object with five properties; that is, `name` (defined
    as `''Index''`), `components`, `data`, `computed`, and `methods`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有五个属性的`export default` JavaScript对象；即`name`（定义为`'Index'`），`components`，`data`，`computed`和`methods`：
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the `components` property, add two new properties called `PasswordInput` and `EmailInput`.
    Define `PasswordInput` as an anonymous function with a return value of `import(''components/PasswordInput'')` and `EmailInput` as
    an anonymous function with a return value of `import(''components/EmailInput'')`:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`components`属性中，添加两个名为`PasswordInput`和`EmailInput`的新属性。将`PasswordInput`定义为一个匿名函数，其返回值为`import('components/PasswordInput')`，并将`EmailInput`定义为一个匿名函数，其返回值为`import('components/EmailInput')`：
- en: '[PRE36]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In the `data` property, we will return a JavaScript object that provides two
    properties, `email` and `password`, both of which will be empty strings:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性中，我们将返回一个提供两个属性`email`和`password`的JavaScript对象，它们都将是空字符串：
- en: '[PRE37]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the `computed` property, we will destruct the `mapGetters` function, passing
    the namespace of what module we want as the first parameter (in this case, `''user''`).
    We will pass an array of `getters` we want to import (in this case, `isLoading`)
    as the second parameter:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`computed`属性中，我们将解构`mapGetters`函数，将我们想要的模块的命名空间作为第一个参数（在本例中为`'user'`）。我们将把我们想要导入的`getters`数组（在本例中为`isLoading`）作为第二个参数传递进去：
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: On the `beforeMount` lifecycle hook, we will add an `if` statement, checking
    if the `getUserId` is truthy, and then redirect the user to the `Contacts` route.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`beforeMount`生命周期钩子上，我们将添加一个`if`语句，检查`getUserId`是否为真，并将用户重定向到`Contacts`路由。
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Finally, for the `methods` property, we will destruct the `mapActions` function,
    passing the namespace of the module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will use an array of `actions` we
    want to import – in this scenario, this is `signInUser`. Next, we need to add
    the asynchronous `onSubmit` method, which will dispatch `signInUser` and send
    the user to the `Contacts` route, and the `createAccount` method, which will send
    the user to the `SignUp` route:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`methods`属性中，我们将解构`mapActions`函数，将我们想要的模块的命名空间（在本例中为`'user'`）作为第一个参数传递进去。对于第二个参数，我们将使用一个包含我们想要导入的`actions`的数组（在这种情况下，这是`signInUser`）。接下来，我们需要添加异步的`onSubmit`方法，该方法将调度`signInUser`并将用户发送到`Contacts`路由，以及`createAccount`方法，该方法将用户发送到`SignUp`路由：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Single-file component <template> section
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'Now, we need to add the `<template>` section to finish our page:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加`<template>`部分来完成我们的页面：
- en: 'Create a component called `QPage` with the `class` attribute defined as `"bg-grey-1
    flex flex-center"`:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`QPage`的组件，其`class`属性定义为`"bg-grey-1 flex flex-center"`：
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Inside the `QPage` component, create a `QCard` component with the `style` attribute
    defined as `"width: 350px"`:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`QPage`组件内部，创建一个`QCard`组件，其`style`属性定义为`"width: 350px"`：'
- en: '[PRE42]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Inside the `QCard` component, create a `QCardSection` with an `h6` child component that
    has the `class` attribute defined as `no-margin`:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QCard`组件内部，创建一个带有`class`属性定义为`no-margin`的`QCardSection`和一个`h6`子组件：
- en: '[PRE43]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, create a `QCardSection` with a `QForm` child component that has the class
    attribute defined as `q-gutter-md`. Inside the `QForm` component, create an `EmailInput` component,
    with the `v-model` directive bound to the `data.email`, and a `PasswordInput` component,
    with the `v-model` directive bound to the `data.password` property:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个`QCardSection`，其中包含一个`QForm`子组件，其class属性定义为`q-gutter-md`。在`QForm`组件内部，创建一个`EmailInput`组件，其`v-model`指令绑定到`data.email`，以及一个`PasswordInput`组件，其`v-model`指令绑定到`data.password`属性：
- en: '[PRE44]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, create a `QCardActions` component with an `align` attribute defined as `right`.
    Inside, add a `QBtn` with the `label` attribute set to `"Create new Account"`, `color` set
    to `primary`, `class` set to `q-ml-sm`, `flat` set to `true`, and the `@click` event
    listener bound to the `createAccount` method. Next, create another `QBtn` component
    with the `label` attribute set to `"Login"`, `type` set to `"submit"`, `color` set
    to `primary`, and the `@click` event listener bound to the `onSubmit` method:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个 `QCardActions` 组件，其中定义了一个 `align` 属性为 `right`。在内部，添加一个 `QBtn`，`label`
    属性设置为 `"Create new Account"`，`color` 设置为 `primary`，`class` 设置为 `q-ml-sm`，`flat`
    设置为 `true`，并且 `@click` 事件监听器绑定到 `createAccount` 方法。接下来，创建另一个 `QBtn` 组件，`label`
    属性设置为 `"Login"`，`type` 设置为 `"submit"`，`color` 设置为 `primary`，并且 `@click` 事件监听器绑定到
    `onSubmit` 方法：
- en: '[PRE45]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally, create a `QInnerLoading` component with the `:showing` attribute bound
    to `computed.isLoading`. This will need to have a `QSpinner` child component that
    provides the `size` attribute. Set this to `50px` and `color` to `primary`:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个 `QInnerLoading` 组件，将 `:showing` 属性绑定到 `computed.isLoading`。这将需要有一个 `QSpinner`
    子组件，提供 `size` 属性。将其设置为 `50px`，`color` 设置为 `primary`：
- en: '[PRE46]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To run the server and see your progress, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的进度，您需要打开终端（macOS 或 Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE47]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住始终执行命令 `npm run lint --fix`，以自动修复任何代码 lint 错误。
- en: 'Here is a preview of what the page will look like:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这是页面预览的样子：
- en: '![](assets/24406191-9d75-4c7f-80f1-f28a74bb3517.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/24406191-9d75-4c7f-80f1-f28a74bb3517.png)'
- en: Creating the User signup page
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户注册页面
- en: For the User signup page, we will use four components that we've already created: `NameInput`, `UsernameInput`, `PasswordInput`,
    and `EmailInput`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户注册页面，我们将使用已经创建的四个组件：`NameInput`，`UsernameInput`，`PasswordInput` 和 `EmailInput`。
- en: Single-file component <script> section
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件 <script> 部分
- en: 'Here, we will create the `<script>` section of the User signup page:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建用户注册页面的 `<script>` 部分：
- en: Inside the **`src/pages` **folder, create a new file called `SignUp.vue` and
    open it.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **`src/pages` ** 文件夹中，创建一个名为 `SignUp.vue` 的新文件并打开它。
- en: 'Import the `mapActions` and `mapGetters` functions from the `vuex` package:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `vuex` 包中导入 `mapActions` 和 `mapGetters` 函数：
- en: '[PRE48]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create an `export default` JavaScript object that provides five properties: `name` (defined
    as `''SignUp''`), `components`, `data`, `computed`, and `methods`:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `export default` JavaScript 对象，提供五个属性：`name`（定义为 `'SignUp'`），`components`，`data`，`computed`
    和 `methods`：
- en: '[PRE49]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In the `components` property, add four new properties: `NameInput`, `UsernameInput`, `PasswordInput`,
    and `EmailInput`. Define them like so:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `components` 属性中，添加四个新属性：`NameInput`，`UsernameInput`，`PasswordInput` 和 `EmailInput`。像这样定义它们：
- en: '`NameInput` as an anonymous function with a return value of `import(''components/NameInput'')`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NameInput` 作为一个匿名函数，返回值为 `import(''components/NameInput'')`'
- en: '`UsernameInput` as an anonymous function with a return value of `import(''components/UsernameInput'')`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UsernameInput` 作为一个匿名函数，返回值为 `import(''components/UsernameInput'')`'
- en: '`PasswordInput` as an anonymous function with a return value of `import(''components/PasswordInput'') `'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PasswordInput` 作为一个匿名函数，返回值为 `import(''components/PasswordInput'')`'
- en: '`EmailInput` as an anonymous function with a return value of `import(''components/EmailInput'')`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmailInput` 作为一个匿名函数，返回值为 `import(''components/EmailInput'')`'
- en: 'This can be seen in the following code:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在以下代码中看到：
- en: '[PRE50]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In the `data` property, we will return a JavaScript object that provides four
    properties – `name`, `username`,  `email`, and `password` – all of which will
    be empty strings:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `data` 属性中，我们将返回一个提供四个属性的 JavaScript 对象 - `name`，`username`，`email` 和 `password`
    - 其中所有属性都将是空字符串：
- en: '[PRE51]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the `computed` property, we will destruct the `mapGetters` function, passing
    the namespace of what module we want – in this case, `''user''` – as the first
    parameter. For the second parameter, we will use an array of `getters` we want
    to import – in this scenario, this is `isLoading`:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`computed`属性中，我们将解构`mapGetters`函数，将我们想要的模块的命名空间（在本例中为`'user'`）作为第一个参数传递。对于第二个参数，我们将使用一个要导入的`getters`数组，这种情况下是`isLoading`：
- en: '[PRE52]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Finally, for the `methods` property, first, we will destruct the `mapActions` function,
    passing the namespace of what module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will pass an array of `actions` we
    want to import – in this scenario, this is `signUpNewUser`. Next, we need to add
    the asynchronous `onSubmit` method, which will dispatch `signUpNewUser` and then
    send the user to the `Validate` route, and the `onReset` method, which will clear
    the data:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于`methods`属性，首先，我们将解构`mapActions`函数，将我们想要的模块的命名空间（在本例中为`'user'`）作为第一个参数传递。对于第二个参数，我们将传递一个要导入的`actions`数组，这种情况下是`signUpNewUser`。接下来，我们需要添加异步的`onSubmit`方法，它将分发`signUpNewUser`，然后将用户发送到`Validate`路由，以及`onReset`方法，它将清除数据：
- en: '[PRE53]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Single-file component <template> section
  id: totrans-210
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'To finish the page, we need to add the `<template>` section:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成页面，我们需要添加`<template>`部分：
- en: 'Create a `QPage` component with the `class` attribute defined as `"bg-grey-1
    flex flex-center"`:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`QPage`组件，`class`属性定义为`"bg-grey-1 flex flex-center"`：
- en: '[PRE54]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Inside the `QPage` component, create a `QCard` component with the `style` attribute
    defined as `"width: 350px"`:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`QPage`组件内部，创建一个`QCard`组件，`style`属性定义为`"width: 350px"`：'
- en: '[PRE55]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Inside the `QCard` component, create a `QCardSection` with a `h6` child component
    where the `class` attribute is defined as `no-margin`:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QCard`组件内部，创建一个`QCardSection`，其中包含一个`h6`子组件，其中`class`属性定义为`no-margin`：
- en: '[PRE56]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'After that, create a `QCardSection` with a `QForm` child component where the
    `class` attribute is defined as `q-gutter-md`. Inside the `QForm` component, create
    a `NameInput` component with the `v-model` directive bound to `data.name`, a `UsernameInput` component
    with the `v-model` directive bound to `data.username`, an `EmailInput` component
    with the `v-model` directive bound to `data.email`, and a `PasswordInput` component
    with the `v-model` directive bound to the `data.password` property:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，创建一个`QCardSection`，其中包含一个`QForm`子组件，其中`class`属性定义为`q-gutter-md`。在`QForm`组件内部，创建一个`NameInput`组件，`v-model`指令绑定到`data.name`，一个`UsernameInput`组件，`v-model`指令绑定到`data.username`，一个`EmailInput`组件，`v-model`指令绑定到`data.email`，以及一个`PasswordInput`组件，`v-model`指令绑定到`data.password`属性：
- en: '[PRE57]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, create a `QCardActions` component with the `align` attribute set to `right`.
    Inside, add a `QBtn` with the `label` attribute set to `"Reset"`, `color` set
    to `primary`, `class` set to `q-ml-sm`, `flat` set to `true`, and the `@click` event
    listener bound to the `onReset` method. Then, create another `QBtn` component
    with the `label` attribute set to `"Create"`, `type` set to `"submit"`, `color` set
    to `primary`, and the `@click` event listener bound to the `onSubmit` method:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个`QCardActions`组件，`align`属性设置为`right`。在内部，添加一个`QBtn`，`label`属性设置为`"Reset"`，`color`设置为`primary`，`class`设置为`q-ml-sm`，`flat`设置为`true`，`@click`事件监听器绑定到`onReset`方法。然后，创建另一个`QBtn`组件，`label`属性设置为`"Create"`，`type`设置为`"submit"`，`color`设置为`primary`，`@click`事件监听器绑定到`onSubmit`方法：
- en: '[PRE58]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Finally, create a `QInnerLoading` component with the `:showing` attribute bound
    to `computed.isLoading`. This will need to have a `QSpinner` child component.
    The `size` attribute needs to be set to `50px` and `color` needs to be set to `primary`:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个`QInnerLoading`组件，`:showing`属性绑定到`computed.isLoading`。这将需要一个`QSpinner`子组件。`size`属性需要设置为`50px`，`color`需要设置为`primary`：
- en: '[PRE59]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'To run the server and see your progress, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的进度，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE60]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 记得始终执行命令`npm run lint --fix`，自动修复任何代码lint错误。
- en: 'Here is a preview of what the page will look like:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这是页面的预览：
- en: '![](assets/11952d7a-f53c-4afb-b56b-fd669409c0e8.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/11952d7a-f53c-4afb-b56b-fd669409c0e8.png)'
- en: Creating the User validation page
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户验证页面。
- en: Once the user has created an account, AWS Amplify will send an email with a
    validation pin-code that we will need to be sent back for validation purposes.
    This page will be the validation page.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 用户创建了一个账户后，AWS Amplify将发送一封带有验证pin码的电子邮件，我们需要将其发送回来进行验证。这个页面将是验证页面。
- en: Single-file component <script> section
  id: totrans-231
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'Follow these steps to create the `<script>` section for the User validation
    page:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建用户验证页面的`<script>`部分：
- en: Inside the `src/pages` folder, create a new file called `Validate.vue` and open
    it.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/pages`文件夹内，创建一个名为`Validate.vue`的新文件并打开它。
- en: 'Import the `mapActions` and `mapGetters` functions from the `vuex` package,
    and `resendValidationCode` from `src/driver/auth`:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`vuex`包中导入`mapActions`和`mapGetters`函数，以及从`src/driver/auth`导入`resendValidationCode`：
- en: '[PRE61]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Create an `export default` JavaScript object that provides four properties: `name` (defined
    as `''Validate''`), `data`, `computed`, and `methods`:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`export default`的JavaScript对象，提供四个属性：`name`（定义为`'Validate'`）、`data`、`computed`和`methods`：
- en: '[PRE62]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Inside the `data` property, we will return a JavaScript object with a `code` property
    as an empty string:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性内，我们将返回一个具有空字符串`code`属性的JavaScript对象：
- en: '[PRE63]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Inside the `computed` property, we will destruct the `mapGetters` function,
    passing the namespace of what module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will pass an array of `getters` we
    want to import – in this scenario, `isLoading` and `getUserEmail`:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`computed`属性内，我们将解构`mapGetters`函数，传递我们想要的模块的命名空间作为第一个参数，例如`'user'`。对于第二个参数，我们将传递一个要导入的`getters`数组，例如`isLoading`和`getUserEmail`：
- en: '[PRE64]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Finally, for the `methods` property we will destruct the `mapActions` function,
    passing the namespace of what module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will pass an array of `actions` we
    want to import – in this scenario, `createNewUser`. Next, we need to add the asynchronous `onSubmit` method,
    which will dispatch `createNewUser` and send the user to the `Index` route; the `resendCode` method,
    which will resend the user another validation code; and the `onReset` method,
    which will reset the data:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`methods`属性中，我们将解构`mapActions`函数，传递我们想要的模块的命名空间作为第一个参数，例如`'user'`。对于第二个参数，我们将传递一个要导入的`actions`数组，例如`createNewUser`。接下来，我们需要添加异步的`onSubmit`方法，它将分发`createNewUser`并将用户发送到`Index`路由；`resendCode`方法，它将重新发送用户另一个验证代码；以及`onReset`方法，它将重置数据：
- en: '[PRE65]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Single-file component <template> section
  id: totrans-244
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'Follow these steps to create the `<template>` section of the User validation
    page:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建用户验证页面的`<template>`部分：
- en: 'Create a `QPage` component with the `class` attribute defined as `"bg-grey-1
    flex flex-center"`:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`QPage`组件，定义`class`属性为`"bg-grey-1 flex flex-center"`：
- en: '[PRE66]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Inside the `QPage` component, create a `QCard` component with the `style` attribute
    defined as `"width: 350px"`:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`QPage`组件内部，创建一个`QCard`组件，定义`style`属性为`"width: 350px"`：'
- en: '[PRE67]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Inside the `QCard` component, create a `QCardSection` with an `h6` child component and
    the `class` attribute defined as `no-margin`. Then, create a sibling element with
    the `class` attribute defined as `text-subtitle2`:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `QCard` 组件内，创建一个带有 `h6` 子组件和定义为 `no-margin` 的 `class` 属性的 `QCardSection`。然后，创建一个兄弟元素，其
    `class` 属性定义为 `text-subtitle2`：
- en: '[PRE68]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Create a `QCardSection` with two children components. These will be HTML elements, `P`:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有两个子组件的 `QCardSection`。这些将是 HTML 元素 `P`：
- en: '[PRE69]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'After that, create a `QCardSection` with a `QForm` child component and the
    `class` attribute defined as `q-gutter-md`. Inside the `QForm` component, add
    the `QInput` component as a child element. Then, inside the `QInput` component,
    bind the `v-model` directive to `data.code`. Inside the `QInput` `rules` attribute,
    define the `rules` value as an array of validation that will check if any code
    has been typed in. Enable `lazy-rules` so that it will only validate after a while:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，创建一个带有 `QForm` 子组件和定义为 `q-gutter-md` 的 `class` 属性的 `QCardSection`。在 `QForm`
    组件内，添加 `QInput` 组件作为子元素。然后，在 `QInput` 组件内，将 `v-model` 指令绑定到 `data.code`。在 `QInput`
    的 `rules` 属性内，将 `rules` 值定义为一个验证数组，用于检查是否已输入任何代码。启用 `lazy-rules`，以便它只在一段时间后进行验证：
- en: '[PRE70]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Now, create a `QCardActions` component with the `align` attribute set to `right`.
    Inside, add a `QBtn` with the `label` attribute set to `"Reset"`, `color` set
    to `primary`, `class` set to `q-ml-sm`, `flat` set to `true`, and the `@click` event
    listener bound to the `onReset` method. Create another `QBtn` with the `label` attribute
    set to `"Re-send code"`, `color` set to `secondary`, `class` set to `q-ml-sm`, `flat` set
    to `true`, and the `@click` event listener bound to the `resendCode` method. Finally,
    create a `QBtn` component with the `label` attribute set to `"Validate"`, `type` set
    to `"submit"`, `color` set to `primary`, and the `@click` event listener bound to
    the `onSubmit` method:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个带有 `align` 属性设置为 `right` 的 `QCardActions` 组件。在内部，添加一个 `label` 属性设置为 `"Reset"`、`color`
    设置为 `primary`、`class` 设置为 `q-ml-sm`、`flat` 设置为 `true`，并且 `@click` 事件监听器绑定到 `onReset`
    方法的 `QBtn`。创建另一个 `label` 属性设置为 `"Re-send code"`、`color` 设置为 `secondary`、`class`
    设置为 `q-ml-sm`、`flat` 设置为 `true`，并且 `@click` 事件监听器绑定到 `resendCode` 方法的 `QBtn`。最后，创建一个带有
    `label` 属性设置为 `"Validate"`、`type` 设置为 `"submit"`、`color` 设置为 `primary`，并且 `@click`
    事件监听器绑定到 `onSubmit` 方法的 `QBtn` 组件：
- en: '[PRE71]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Finally, create a `QInnerLoading` component with the `:showing` attribute bound to `computed.isLoading`.
    It should have `QSpinner` child component with `size` set to `50px` and `color` set
    to `primary`:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个带有 `:showing` 属性绑定到 `computed.isLoading` 的 `QInnerLoading` 组件。它应该有一个
    `size` 设置为 `50px` 和 `color` 设置为 `primary` 的 `QSpinner` 子组件：
- en: '[PRE72]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'To run the server and see your progress, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的进度，您需要打开终端（macOS 或 Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE73]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 记得始终执行命令 `npm run lint --fix`，自动修复任何代码 lint 错误。
- en: 'Here is a preview of what the page will look like:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这是页面的预览：
- en: '![](assets/b8f80c2c-f928-4240-9622-205a135d67b7.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b8f80c2c-f928-4240-9622-205a135d67b7.png)'
- en: Creating the User edit page
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户编辑页面
- en: For the User edit page, we will use four components that we've already created: `NameInput`, `UsernameInput`, `AvatarInput`,
    and `PasswordInput`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户编辑页面，我们将使用我们已经创建的四个组件：`NameInput`、`UsernameInput`、`AvatarInput` 和 `PasswordInput`。
- en: Single-file component <script> section
  id: totrans-267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件 <script> 部分
- en: 'Follow these steps to start developing the `<script>` section of the User edit
    page:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开始开发用户编辑页面的 `<script>` 部分：
- en: Inside the `src/pages` folder, create a new file called `Edit.vue` and open
    it.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/pages` 文件夹内，创建一个名为 `Edit.vue` 的新文件并打开它。
- en: 'Import the `mapActions` and `mapGetters` functions from the `vuex` package:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`vuex`包中导入`mapActions`和`mapGetters`函数：
- en: '[PRE74]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Create an `export default` JavaScript object that provides four properties: `name` (defined
    as `''SignUp''`), `data`, `computed`, and `methods`:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`export default`的JavaScript对象，提供四个属性：`name`（定义为`'SignUp'`）、`data`、`computed`和`methods`：
- en: '[PRE75]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Inside the `components` property, add four new properties called `NameInput`, `UsernameInput`, `PasswordInput`,
    `AvatarInput`. Set them like so:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`components`属性中，添加四个名为`NameInput`、`UsernameInput`、`PasswordInput`、`AvatarInput`的新属性。设置它们如下：
- en: '`NameInput` as an anonymous function with a return value of `import(''components/NameInput'')`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`NameInput`作为一个匿名函数，返回值为`import(''components/NameInput'')`'
- en: '`UsernameInput` as an anonymous function with a return value of `import(''components/UsernameInput'')`'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`UsernameInput`作为一个匿名函数，返回值为`import(''components/UsernameInput'')`'
- en: '`PasswordInput` as an anonymous function with a return value of `import(''components/PasswordInput'') `'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`PasswordInput`作为一个匿名函数，返回值为`import(''components/PasswordInput'')`'
- en: '`AvatarInput` as an anonymous function with a return value of `import(''components/AvatarInput'')`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`AvatarInput`作为一个匿名函数，返回值为`import(''components/AvatarInput'')`：'
- en: '[PRE76]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Inside the `data` property, we will return a JavaScript object that provides
    five properties: `name`, `username`, `avatar`,  `email`, and `password`. All of
    these will be empty strings:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性中，我们将返回一个提供五个属性的JavaScript对象：`name`、`username`、`avatar`、`email`和`password`。所有这些都将是空字符串：
- en: '[PRE77]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Inside the `created` life cycle hook, define `data.name` as `getUser.name`, `data.username` as `getUser.username`, and `data.avatar` as `getUser.avatar`:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`created`生命周期钩子中，将`data.name`定义为`getUser.name`，`data.username`定义为`getUser.username`，以及`data.avatar`定义为`getUser.avatar`：
- en: '[PRE78]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Inside the `computed` property, we will destruct the `mapGetters` function,
    passing the namespace of what module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will pass an array of `getters` we
    want to import – in this scenario, `isLoading`:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`computed`属性中，我们将解构`mapGetters`函数，传递我们想要的模块的命名空间作为第一个参数，这里是`'user'`。对于第二个参数，我们将传递一个要导入的`getters`数组，这种情况下是`isLoading`：
- en: '[PRE79]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Finally, for the `methods` property, we will destruct the `mapActions` function,
    passing the namespace of what module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will pass an array of `actions` we
    want to import – in this scenario, `editUser`. Next, we need to add the asynchronous `onSubmit` method,
    which will dispatch `$refs.avatar.uploadFile()` and then dispatch `editUser` to
    send the user to the `Chat` route, and the `onReset` method, which will clear
    the data:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`methods`属性中，我们将解构`mapActions`函数，传递我们想要的模块的命名空间作为第一个参数，这里是`'user'`。对于第二个参数，我们将传递一个要导入的`actions`数组，这种情况下是`editUser`。接下来，我们需要添加异步的`onSubmit`方法，它将调度`$refs.avatar.uploadFile()`，然后调度`editUser`发送用户到`Chat`路由，以及`onReset`方法，它将清除数据：
- en: '[PRE80]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Single-file component <template> section
  id: totrans-288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'Follow these steps to create the `<template>` section of the User edit page:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建用户编辑页面的`<template>`部分：
- en: 'Create a `QPage` component with the `class` attribute defined as `"bg-grey-1
    flex flex-center"`:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`class`属性定义为`"bg-grey-1 flex flex-center"`的`QPage`组件：
- en: '[PRE81]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Inside the `QPage` component, create a `QCard` component with the `style` attribute
    defined as `"width: 350px"`:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`QPage`组件内部，创建一个带有`style`属性定义为`"width: 350px"`的`QCard`组件：'
- en: '[PRE82]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Inside the `QCard` component, create a `QCardSection` with an `h6` child component and with
    the `class` attribute defined as `no-margin`:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QCard`组件内部，创建一个带有`h6`子组件的`QCardSection`，并且`class`属性定义为`no-margin`：
- en: '[PRE83]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'After that, create a `QCardSection` with a `QForm` child component with the
    class attribute defined as `q-gutter-md`. Inside the `QForm` component, create
    an `AvatarInput` component with a `reference` directive defined as `avatar` and
    the `v-model` directive bound to `data.avatar`, a `NameInput` component with the `v-model` directive
    bound to `data.name`, a `UsernameInput` component with the `v-model` directive
    bound to `data.username`, an `EmailInput` component with the `v-model` directive
    bound to `data.email`, and a `PasswordInput` component with the `v-model` directive
    bound to the `data.password` property:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，创建一个带有`class`属性定义为`q-gutter-md`的`QCardSection`，其中包含一个`QForm`子组件。在`QForm`组件内部，创建一个`AvatarInput`组件，其中`reference`指令定义为`avatar`，`v-model`指令绑定到`data.avatar`，一个`NameInput`组件，其中`v-model`指令绑定到`data.name`，一个`UsernameInput`组件，其中`v-model`指令绑定到`data.username`，一个`EmailInput`组件，其中`v-model`指令绑定到`data.email`，以及一个`PasswordInput`组件，其中`v-model`指令绑定到`data.password`属性：
- en: '[PRE84]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Now, create a `QCardActions` component with the `align` attribute set to `right`.
    Inside, add a `QBtn` with the `label` attribute set to `"Reset"`, `color` set
    to `primary`, `class` set to `q-ml-sm`, `flat` set to `true`, and the `@click` event
    listener bound to the `onReset` method. Then, create another `QBtn` component
    with the `label` attribute set to `"Create"`, `type` set to `"submit"`, `color` set
    to `primary`, and the `@click` event listener bound to the `onSubmit` method:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个带有`align`属性设置为`right`的`QCardActions`组件。在内部，添加一个`label`属性设置为`"Reset"`，`color`设置为`primary`，`class`设置为`q-ml-sm`，`flat`设置为`true`，并且`@click`事件监听器绑定到`onReset`方法的`QBtn`。然后，创建另一个`QBtn`组件，其中`label`属性设置为`"Create"`，`type`设置为`"submit"`，`color`设置为`primary`，并且`@click`事件监听器绑定到`onSubmit`方法：
- en: '[PRE85]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Finally, create a `QInnerLoading` component with the `:showing` attribute bound to `computed.isLoading`.
    It should have a `QSpinner` child component with `size` set to `50px` and `color` set
    to `primary`:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个`QInnerLoading`组件，其中`:showing`属性绑定到`computed.isLoading`。它应该有一个`QSpinner`子组件，`size`设置为`50px`，`color`设置为`primary`：
- en: '[PRE86]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'To run the server and see your progress, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的进度，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE87]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: 'Here is a preview of what the page will look like:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这是页面的预览：
- en: '![](assets/2ede7f2f-961d-49d4-89d9-be1b0d4cc045.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ede7f2f-961d-49d4-89d9-be1b0d4cc045.png)'
- en: Creating application routes
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建应用程序路由
- en: 'Now that we''ve created the user pages, components, and layout, we need to
    bind everything together so that it can be accessed by the user. To do this, we
    need to create the routes and make them available so that the user can navigate
    between the pages. Follow these steps to do this:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了用户页面、组件和布局，我们需要将它们绑定在一起，以便用户可以访问。为此，我们需要创建路由并使其可用，以便用户可以在页面之间导航。按照以下步骤进行操作：
- en: Open the `routes.js` file inside the `router` folder.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`router`文件夹内的`routes.js`文件。
- en: 'Make the `routes` constant an empty array:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`routes`常量设置为空数组：
- en: '[PRE88]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Add a JavaScript object with three properties, `path`, `component`, and `children`,
    to this array. The `path` property is a string and will be a static URL, the `component` property
    is an anonymous function that will return a WebPack `import` function with the
    component that will be rendered, and the `children` property is an array of components
    that will be rendered inside `path`. Each of the children components is a JavaScript
    object with the same properties, plus a new one called `name`:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向该数组添加一个具有三个属性`path`、`component`和`children`的JavaScript对象。`path`属性是一个字符串，将是一个静态URL，`component`属性是一个匿名函数，将返回一个带有将要渲染的组件的WebPack`import`函数，`children`属性是一个将在`path`内渲染的组件数组。每个子组件都是一个具有相同属性的JavaScript对象，另外还有一个叫做`name`的新属性。
- en: '[PRE89]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Now, for the `/chat` URL, we need to create two new placeholder pages inside
    the `pages` folder: `Contacts.vue` and `Messages.vue`. Inside these files, create
    an empty component with the following template:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对于`/chat`URL，我们需要在`pages`文件夹内创建两个新的占位符页面：`Contacts.vue`和`Messages.vue`。在这些文件内，创建一个带有以下模板的空组件：
- en: '[PRE90]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Inside the `message` route, we need to add two special parameters: `:id` and `path`.
    These parameters will be used to fetch a specific message between users:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`message`路由内，我们需要添加两个特殊参数：`:id`和`path`。这些参数将用于在用户之间获取特定的消息。
- en: '[PRE91]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'For the `/user` URL, we will create just one child route, the `edit` route.
    Inside this route, we are using the `alias` property since `vue-router` needs
    to have a child with `path` empty for the first child rendering. We will have
    also have a `/user/edit` route available inside our application:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`/user`URL，我们将只创建一个子路由，即`edit`路由。在这个路由内，我们使用`alias`属性，因为`vue-router`需要有一个`path`为空的子路由进行首次子路由渲染。我们还将在我们的应用程序内有一个`/user/edit`路由可用。
- en: '[PRE92]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Finally, for creating new users, we need to add the `/register` URL with two
    children: `SignUp `and `Validate`. The `SignUp` route will be the main route on
    the registered URL and will be called directly when the user enters this URL.
    The `Validate` route will only be called when the user is redirected to the `/register/validate` URL:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于创建新用户，我们需要添加`/register`URL，其中包括两个子路由：`SignUp`和`Validate`。`SignUp`路由将是注册URL上的主要路由，并且当用户进入此URL时将直接调用。`Validate`路由只有在用户被重定向到`/register/validate`URL时才会被调用。
- en: '[PRE93]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Adding the authentication guard
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加身份验证守卫
- en: 'To validate the user authentication token every time the user enters your application,
    if the token is valid, or if the user is trying to access a route without access,
    we need to create an authentication guard for our application:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在用户进入应用程序时验证用户身份令牌，如果令牌有效，或者用户试图访问无权限的路由，我们需要为我们的应用程序创建一个身份验证守卫。
- en: Create a new file called `routeGuard.js` inside the `src/boot` folder.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/boot`文件夹内创建一个名为`routeGuard.js`的新文件。
- en: 'Create a `default` export asynchronous function. Inside this parameter, add
    a JavaScript object with a property named `app`. Inside the function, create a
    constant with an object restructuring of `app` that gets the `store` property.
    Then, create a `try/catch` block. In the `try` part, check if the `''user/getUserId''` gather
    isn''t present and dispatch `''user/initialLogin''`. Finally, inside the `catch`
    block, redirect the user to the `Index` route:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个默认的导出异步函数。在这个参数内，添加一个名为`app`的JavaScript对象属性。在函数内部，创建一个常量，使用`app`的对象重构获取`store`属性。然后，创建一个`try/catch`块。在`try`部分，检查`'user/getUserId'`是否存在，如果不存在则调度`'user/initialLogin'`。最后，在`catch`块内，将用户重定向到`Index`路由。
- en: '[PRE94]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Finally, open the `quasar.conf.js` file inside the root folder of your project
    and find the `boot` property. Add the `''routerGuard''` item to the array:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开项目根文件夹内的`quasar.conf.js`文件，并找到`boot`属性。将`'routerGuard'`项添加到数组中。
- en: '[PRE95]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: How it works...
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this chapter, we developed micro components such as `NameInput`, `EmailInput`, and
    so on to simplify the process of developing macro components or containers, such
    as pages.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开发了微组件，如`NameInput`，`EmailInput`等，以简化开发宏组件或容器（如页面）的过程。
- en: In this recipe, we used the components we developed in the previous recipe to
    create a complete page, such as the User login, User edit, and User registration
    pages.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们使用了在上一个配方中开发的组件来创建完整的页面，例如用户登录、用户编辑和用户注册页面。
- en: Using `vue-router` to manage the parent-child process of wrapping a page with
    a custom layout, we used the layouts we created in the previous recipes of this
    book to create the routes for our application. We made them available so that
    we can access the application as a normal web application, with custom URLs and
    routes.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`vue-router`来管理使用自定义布局包装页面的父子过程，我们使用了本书先前配方中创建的布局来为我们的应用程序创建路由。我们使它们可用，以便我们可以像正常的Web应用程序一样访问应用程序，具有自定义URL和路由。
- en: Finally, we added some authentication middleware to our main initialization
    Vue file so that we could redirect an already authenticated user. This means that
    they don't need to authenticate again when they enter the application for a second
    time.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在我们的主初始化Vue文件中添加了一些身份验证中间件，以便我们可以重定向已经经过身份验证的用户。这意味着当他们第二次进入应用程序时，他们不需要再次进行身份验证。
- en: There's more...
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有...
- en: Now, your application is ready for user registration and login. It's possible
    to navigate through the user registration pages and receive an email from Amazon
    with a verification code so that you can verify the user on the server.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的应用程序已准备好进行用户注册和登录。可以浏览用户注册页面，并从亚马逊收到一封带有验证代码的电子邮件，以便您可以在服务器上验证用户。
- en: 'To check your process and see it running on your local environment, open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查您的进程并在本地环境中运行它，请打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE96]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: See also
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find out more information about `vue-router` nested routes at [https://router.vuejs.org/guide/essentials/nested-routes.html](https://router.vuejs.org/guide/essentials/nested-routes.html).
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/guide/essentials/nested-routes.html](https://router.vuejs.org/guide/essentials/nested-routes.html)找到有关`vue-router`嵌套路由的更多信息。
- en: You can find out more information about `vue-router` lazy loading at [https://router.vuejs.org/guide/advanced/lazy-loading.html](https://router.vuejs.org/guide/advanced/lazy-loading.html).
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/guide/advanced/lazy-loading.html](https://router.vuejs.org/guide/advanced/lazy-loading.html)找到有关`vue-router`懒加载的更多信息。
- en: You can find out more information about the Quasar framework's `QInnerLoading`
    component at [https://quasar.dev/vue-components/inner-loading](https://quasar.dev/vue-components/inner-loading).
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[https://quasar.dev/vue-components/inner-loading](https://quasar.dev/vue-components/inner-loading)找到有关Quasar框架的`QInnerLoading`组件的更多信息。
