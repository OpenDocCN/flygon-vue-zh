- en: Animating Your Application with Transitions and CSS
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 使用过渡和CSS为您的应用程序添加动画
- en: To have a more dynamic application and have the full attention of the user,
    using animation is crucial. Today, CSS animations are present in toasts, banners,
    notifications, and even input fields.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使应用程序更加动态并吸引用户的全部注意力，使用动画是至关重要的。如今，CSS动画出现在提示、横幅、通知甚至输入字段中。
- en: There are some cases where you need to create special animations, known as transitions,
    and have full control of what is happening on your page. To do this, you must
    use custom components and have the framework to help you with rendering your application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，您需要创建特殊的动画，称为过渡，并完全控制页面上发生的事情。为此，您必须使用自定义组件，并让框架帮助您渲染应用程序。
- en: With Vue, we can use two custom components that can help us create animations
    and transitions in our application with the help of CSS classes. Those components
    are `Transition` and `TransitionGroup`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue，我们可以使用两个自定义组件来帮助我们在应用程序中创建动画和过渡，这些组件是`Transition`和`TransitionGroup`。
- en: In this chapter, we will learn how to create a CSS animation, use the Animate.css
    framework to create a custom transition, use the `Transition` component hook to
    execute custom functions, create animations that execute on the render of the
    component, create animations and transitions for groups and lists, create reusable
    custom transition components, and create seamless transitions between components.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将学习如何创建CSS动画，使用Animate.css框架创建自定义过渡，使用`Transition`组件钩子执行自定义函数，创建在组件渲染时执行的动画，为组和列表创建动画和过渡，创建可重用的自定义过渡组件，并在组件之间创建无缝过渡。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下内容：
- en: Creating your first CSS animation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个CSS动画
- en: Creating a custom transition class with Animate.css
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Animate.css创建自定义过渡类
- en: Creating transactions with custom hooks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义钩子创建交易
- en: Creating animations on page render
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面渲染时创建动画
- en: Creating animations for lists and groups
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为列表和组创建动画
- en: Creating a custom transition component
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义过渡组件
- en: Creating a seamless transition between elements
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在元素之间创建无缝过渡
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using **Node.js** and **Vue-CLI****.**
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用**Node.js**和**Vue-CLI**。
- en: Attention Windows users! You need to install an NPM package called `windows-build-tools` to
    be able to install the following required packages. To do so, open PowerShell
    as an Administrator and execute the
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意Windows用户！您需要安装一个名为`windows-build-tools`的NPM包，以便能够安装以下所需的包。为此，请以管理员身份打开PowerShell并执行
- en: '`> npm install -g windows-build-tools` command.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools` 命令。'
- en: 'To install **Vue-CLI**, you need to open Terminal (macOS or Linux) or a Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**Vue-CLI**，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating the base project
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基础项目
- en: 'In this chapter, we will use this project as the base for each recipe. Here,
    I will guide you through how to create the base project:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用此项目作为每个配方的基础。在这里，我将指导您如何创建基础项目：
- en: 'Open Terminal (macOS or Linux) or a Command Prompt/PowerShell(Windows) and
    execute the following command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Vue-CLI will ask for you to choose a preset; select `Manually select features` using
    the *spacebar*:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vue-CLI将要求您选择预设；使用*空格键*选择`手动选择功能`：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, Vue-CLI will ask for what features you wish to install. You will need
    to select `CSS Pre-processors` as an additional feature on top of the default
    ones:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Vue-CLI将询问您希望安装哪些功能。您需要选择`CSS预处理器`作为默认功能之外的附加功能：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select `ESLint + Airbnb config`:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续这个过程，选择一个linter和formatter。在我们的情况下，我们将选择“ESLint + Airbnb配置”：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Choose the additional features of the linter. In our case, select the `Lint
    on save` and `Lint and fix on commit`:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择linter的附加功能。在我们的情况下，选择“保存时进行lint”和“提交时进行lint和修复”：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Select where you want to place the linter and formatter configuration files.
    In our case, we will select `In dedicated config files`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要放置linter和formatter配置文件的位置。在我们的情况下，我们将选择“在专用配置文件中”：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, the CLI will ask you whether you want to save the settings for future
    projects; select `N`. After that, Vue-CLI will create the folder and install the
    dependencies for you:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，CLI会询问您是否要保存未来项目的设置；选择`N`。之后，Vue-CLI将为您创建文件夹并安装依赖项：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'From the created project, open the `App.vue` file, which is located in the
    `src` folder. In the `<script>` section of the single file component, remove the
    `HelloWorld` component. Add a `data` property and define it as a singleton function
    that''s returning a JavaScript object with a property named `display`, and with
    a default value of `true`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从创建的项目中，打开位于`src`文件夹中的`App.vue`文件。在单文件组件的`<script>`部分，删除`HelloWorld`组件。添加一个`data`属性，并将其定义为一个返回具有名为`display`的属性和默认值为`true`的JavaScript对象的单例函数：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `<template>` section of the single file component, remove the `HelloWorld`
    component and add a `button` HTML element with the text `Toggle`*.* In the `img`
    HTML element, add a `v-if` directive bounded to the `display` variable. Finally,
    in the `button` HTML element, add a `click` event. In the event listener, define
    the value as an anonymous function that sets the `display` variable as the negation
    of the `display` variable:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<template>`部分，删除`HelloWorld`组件，并添加一个带有文本“Toggle”的`button` HTML元素。在`img`
    HTML元素中，添加一个绑定到`display`变量的`v-if`指令。最后，在`button` HTML元素中，添加一个`click`事件。在事件监听器中，将值定义为一个将`display`变量设置为`display`变量的否定的匿名函数：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With these instructions, we can create a base project for each recipe in this
    chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些说明，我们可以为本章中的每个示例创建一个基础项目。
- en: Creating your first CSS animation
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个CSS动画
- en: With the help of CSS, we can animate our application without the need to manually
    program the changes of DOM elements through JavaScript. Using special CSS properties
    dedicated exclusively to controlling animations, we can achieve beautiful animations
    and transitions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 借助CSS，我们可以在不需要手动通过JavaScript编程DOM元素的更改的情况下为我们的应用程序添加动画。使用专门用于控制动画的特殊CSS属性，我们可以实现美丽的动画和过渡效果。
- en: To use the animations that are available in Vue, we need to use a component
    called `Transition` when an animation is being applied to a single element or
    a component called `TransitionGroup` when dealing with a list of components.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Vue中可用的动画，当将动画应用于单个元素时，我们需要使用一个名为`Transition`的组件，或者当处理组件列表时，需要使用一个名为`TransitionGroup`的组件。
- en: In this recipe, we will learn how to create a CSS animation and apply this animation
    to a single element on the Vue application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何创建一个CSS动画，并将此动画应用于Vue应用程序中的单个元素。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following are the prerequisites for this recipe:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此示例的先决条件：
- en: Node.js 12+
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: A Vue-CLI base project called `cssanimation`
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为“cssanimation”的Vue-CLI基础项目
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Using the base project, create a new project for this recipe called `cssanimation` and
    open the project folder. Now, follow these steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基础项目，为这个示例创建一个名为“cssanimation”的新项目，并打开项目文件夹。现在，按照以下步骤进行操作：
- en: 'Open the `App.vue` file. In the `<template>` section of the single file component,
    wrap the `img` HTML element with a `Transaction` component. In the `Transaction` component,
    add a `name` attribute with a value of `"image"`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App.vue`文件。在单文件组件的`<template>`部分中，使用`Transaction`组件包装`img` HTML元素。在`Transaction`组件中，添加一个`name`属性，其值为`"image"`：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `<style>` section of the single file component, create an `.image-enter-active`
    class with an `animation` property that has a value of `bounce-in .5s`. Then,
    create an `.image-leave-active` class with an `animation` property that has a
    value of `bounce-in .5s reverse`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<style>`部分中，创建一个`.image-enter-active`类，其中包含一个值为`bounce-in .5s`的`animation`属性。然后，创建一个`.image-leave-active`类，其中包含一个值为`bounce-in
    .5s reverse`的`animation`属性：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, create a `@keyframes bounce-in` CSS rule. Inside it, do the following:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个`@keyframes bounce-in` CSS规则。在其中，执行以下操作：
- en: Create a `0%` rule with a property transform and a value of `scale(0)`.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`0%`规则，其中包含属性变换和值为`scale(0)`。
- en: Create a `50%` rule with a property transform and a value of `scale(1.5)`.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`50%`规则，其中包含属性变换和值为`scale(1.5)`。
- en: 'Create a `100%` rule with a property transform and a value of `scale(1)`:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`100%`规则，其中包含属性变换和值为`scale(1)`：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After doing this, your image will scale up and disappear when the toggle button
    is pressed for the first time. When pressed again, it will scale up and stay in
    the correct scale after the animation has finished:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，当第一次按下切换按钮时，您的图像将放大并消失。再次按下时，动画完成后，图像将放大并保持正确的比例：
- en: '![](assets/ac24a78e-c253-4148-a39c-b17db2938711.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ac24a78e-c253-4148-a39c-b17db2938711.png)'
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we added the Vue animation wrapper to the element we wanted to add the
    transition to, and then added the name of the CSS class that will be used on the
    transition.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将Vue动画包装器添加到我们想要添加过渡效果的元素上，然后添加将在过渡中使用的CSS类的名称。
- en: The `Transition` component uses pre-made namespaces for the CSS class that are
    required to be present. These are `-enter-active`, for when the component enters
    the screen, and `-leave-active`, for when the component leaves the screen.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transition`组件使用预先制作的命名空间来要求必须存在的CSS类。这些是`-enter-active`，用于组件进入屏幕时，以及`-leave-active`，用于组件离开屏幕时。'
- en: Then, we create the CSS classes in `<style>` for the transition of the element
    to leave and enter the screen, and the `keyframe` ruleset for the `bounce-in`
    animation in order to define how it will behave.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`<style>`中创建CSS类，用于元素离开和进入屏幕的过渡，以及`bounce-in`动画的`keyframe`规则集，以定义其行为方式。
- en: See also
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about class-based animation and transitions with
    Vue classes at [https://v3.vuejs.org/guide/transitions-overview.html#class-based-animations-transitions](https://v3.vuejs.org/guide/transitions-overview.html#class-based-animations-transitions).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/transitions-overview.html#class-based-animations-transitions](https://v3.vuejs.org/guide/transitions-overview.html#class-based-animations-transitions)找到有关使用Vue类进行基于类的动画和过渡的更多信息。
- en: You can find more information about CSS keyframes at [https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes)找到有关CSS关键帧的更多信息。
- en: Creating a custom transition class with Animate.css
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Animate.css创建自定义过渡类
- en: In the `Transition` component, it is possible to define the CSS classes that
    will be used in each transition step. By using this property, we can make the
    `Transition` component use Animate.css in the transition animations.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Transition`组件中，可以定义在每个过渡步骤中使用的CSS类。通过使用此属性，我们可以使`Transition`组件在过渡动画中使用Animate.css。
- en: In this recipe, we will learn how to use the Animate.css classes with the `Transition`
    component in order to create custom transitions in our components.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何在组件中使用Animate.css类与`Transition`组件，以创建自定义过渡效果。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following are the prerequisites for this recipe:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此示例的先决条件：
- en: Node.js 12+
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: A Vue-CLI base project called `animatecss`
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`animatecss`的Vue-CLI基础项目
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Using the base project, create a new project for this recipe called `animatecss` and
    open the project folder. Now, follow these steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基础项目，为此示例创建一个名为`animatecss`的新项目，并打开项目文件夹。现在，按照以下步骤进行操作：
- en: 'Inside the project folder, open Terminal (macOS or Linux) or a Command Prompt/PowerShell (Windows)
    and execute the following command to install the Animate.css framework:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹中，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令安装Animate.css框架：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open the `main.js` file in the `src` folder and import the Animate.css framework:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src`文件夹中的`main.js`文件并导入Animate.css框架：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open the `App.vue` file in the `src` folder and add a `Transition` component
    as a wrapper for the `img` HTML element. In the `Transition` component, add an
    attribute called `enter-active-class` and define it as `"animated bounceInLeft"`.
    Then, add another attribute called `leave-active-class` and define it as `"animated
    bounceOutLeft"`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src`文件夹中的`App.vue`文件，并将`Transition`组件添加为`img` HTML元素的包装器。在`Transition`组件中，添加一个名为`enter-active-class`的属性，并将其定义为`"animated
    bounceInLeft"`。然后，添加另一个名为`leave-active-class`的属性，并将其定义为`"animated bounceOutLeft"`：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After doing this, your image will slide out to the left and disappear when
    the toggle button is pressed for the first time. When pressed again, it will slide
    in from the left:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，当第一次按下切换按钮时，您的图像将向左滑出并消失。再次按下时，它将从左侧滑入：
- en: '![](assets/9ecf9f7a-2cc3-4af8-b067-fc4aedcb7388.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9ecf9f7a-2cc3-4af8-b067-fc4aedcb7388.png)'
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Transition` component can receive up to six props that can set up custom
    classes for each step of the transaction. Those props are `enter-class`, `enter-active-class`,
    `enter-to-class`, `leave-class`, `leave-active-class`, and `leave-to-class`. In
    this recipe, we used `enter-active-class` and `leave-active-class`; these props
    defined the custom classes for when the element is visible on the screen or leaves
    the screen.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transition`组件最多可以接收六个属性，可以为交易的每个步骤设置自定义类。这些属性是`enter-class`、`enter-active-class`、`enter-to-class`、`leave-class`、`leave-active-class`和`leave-to-class`。在这个示例中，我们使用了`enter-active-class`和`leave-active-class`；这些属性定义了元素在屏幕上可见或离开屏幕时的自定义类。'
- en: To use custom animations, we used the Animate.css framework, which provides
    custom CSS animations that have been pre-made and ready for use. We used `bounceInLeft`
    and `bounceOutLeft` in order to make the element slide in and out from the screen.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用自定义动画，我们使用了Animate.css框架，该框架提供了预先制作并准备好供使用的自定义CSS动画。我们使用了`bounceInLeft`和`bounceOutLeft`来使元素从屏幕中滑入和滑出。
- en: There's more...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can try to change the classes of the `enter-active-class` and `leave-active-class`
    props for any of the props available on Animate.css and see how the CSS animation
    behaves on the browser.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试更改`enter-active-class`和`leave-active-class`属性的类，以查看CSS动画在浏览器上的行为。
- en: You can find the full list of available classes in the Animate.css documentation
    at [https://animate.style/](https://animate.style/).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Animate.css文档中找到可用类的完整列表[https://animate.style/](https://animate.style/)。
- en: See also
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about class-based animation and transitions with
    Vue classes at [https://v3.vuejs.org/guide/transitions-overview.html#class-based-animations-transitions](https://v3.vuejs.org/guide/transitions-overview.html#class-based-animations-transitions).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/transitions-overview.html#class-based-animations-transitions](https://v3.vuejs.org/guide/transitions-overview.html#class-based-animations-transitions)找到有关基于类的动画和Vue类的过渡的更多信息。
- en: You can find more information about Animate.css at [https://animate.style/](https://animate.style/).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://animate.style/](https://animate.style/)找到有关Animate.css的更多信息。
- en: Creating transactions with custom hooks
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义钩子创建交易
- en: The `Transaction` component has custom event emitters for each animation life
    cycle. These can be used to attach custom functions and methods to be executed
    when the animations cycle is completed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transaction`组件具有每个动画生命周期的自定义事件发射器。这些可以用于附加自定义函数和方法，以在动画周期完成时执行。'
- en: We can use these methods to execute data fetches after the page transaction
    completes or a button animation ends, thus chaining animations in a specific order
    that need to be executed one after another based on dynamic data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这些方法在页面交易完成或按钮动画结束后执行数据获取，从而按特定顺序链接动画，这些动画需要根据动态数据依次执行。
- en: In this recipe, we will learn how to use the custom event emitters of the `Transaction`
    component to execute custom methods.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何使用`Transaction`组件的自定义事件发射器来执行自定义方法。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The following are the prerequisites for this recipe:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此配方的先决条件：
- en: Node.js 12+
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: A Vue-CLI base project called `transactionhooks`
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`transactionhooks`的Vue-CLI基础项目
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Using the base project, create a new project for this recipe called `transactionhooks` and
    open the project folder. Now, follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基础项目，为此配方创建一个名为`transactionhooks`的新项目，并打开项目文件夹。现在，按照以下步骤：
- en: 'Inside the project folder, open Terminal (macOS or Linux) or a Command Prompt/PowerShell (Windows)
    and execute the following command to install the Animate.css framework:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹中，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令以安装Animate.css框架：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the `main.js` file in the `src` folder and import the Animate.css framework:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`main.js`文件并导入Animate.css框架：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open the `App.vue` file in the `src` folder. In the `<script>` section of the
    single file component, in the data property, in the singleton function, add a
    new property called `status` with the value defined as `"appeared"`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`App.vue`文件。在单文件组件的`<script>`部分，在数据属性中，在单例函数中，添加一个名为`status`的新属性，并将其值定义为`"appeared"`：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a `methods` property and define it as a JavaScript object. Inside the
    object, add two properties called `onEnter` and `onLeave`. In the `onEnter` property,
    define it as a function, and inside of it, set the data `status` variable to`"appeared"`*.* In
    the `onLeave` property, define it as a function, and inside of it set the data `status` variable
    to `"disappeared"`:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`methods`属性，并将其定义为JavaScript对象。在对象内部，添加两个名为`onEnter`和`onLeave`的属性。在`onEnter`属性中，将其定义为一个函数，并在其中将数据`status`变量设置为`"appeared"`。在`onLeave`属性中，将其定义为一个函数，并在其中将数据`status`变量设置为`"disappeared"`：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `<template>` section of the single file component, add a `Transition` component
    as a wrapper for the `img` HTML element. In the `Transition` component, do the
    following:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<template>`部分，添加一个`Transition`组件作为`img`HTML元素的包装器。在`Transition`组件中，执行以下操作：
- en: Add an attribute called `enter-active-class` and define it as `"animated rotateIn"`.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个名为`enter-active-class`的属性，并将其定义为`"animated rotateIn"`。
- en: Add another attribute called `leave-active-class` and define it as `"animated
    rotateOut"`.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加另一个名为`leave-active-class`的属性，并将其定义为`"animated rotateOut"`。
- en: Add an event listener `after-enter` bind and attach it to the `onEnter` method.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加事件监听器`after-enter`绑定并将其附加到`onEnter`方法。
- en: 'Add an event listener `after-leave` bind and attach it to the `onLeave` method:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加事件监听器`after-leave`绑定并将其附加到`onLeave`方法：
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create an `h1` HTML element as a sibling of the `Transition` component and
    add the text `The image {{ status }}`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`h1` HTML元素作为`Transition`组件的兄弟元素，并添加文本`The image {{ status }}`：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, when the button is clicked, the text will change when the animation finishes.
    It will show The image appeared when the animation finishes entering and The image
    disappeared when the animation has finished leaving:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当点击按钮时，文本将在动画完成时更改。 它将显示动画完成后出现的图像和动画完成后消失的图像：
- en: '![](assets/db9d8f36-4b7d-4c65-8a22-2d4e9a8f0ce8.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/db9d8f36-4b7d-4c65-8a22-2d4e9a8f0ce8.png)'
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Transition` component has eight custom hooks. These hooks are triggered
    by the CSS animations and when they are triggered, they emit custom events, which
    can be used by the parent component. These custom events are `before-enter`, `enter`,
    `after-enter`, `enter-cancelled`, `before-leave`, `leave`, `after-leave`, and
    `leave-cancelled`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transition`组件有八个自定义钩子。 这些钩子由CSS动画触发，当它们被触发时，它们会发出自定义事件，可以被父组件使用。 这些自定义事件是`before-enter`，`enter`，`after-enter`，`enter-cancelled`，`before-leave`，`leave`，`after-leave`和`leave-cancelled`。'
- en: When using the `after-enter` and `after-leave` hooks, when the CSS animations
    have finished, the text on the screen changes accordingly to the functions that
    have been defined on the event listeners for each hook.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`after-enter`和`after-leave`钩子时，当CSS动画完成时，屏幕上的文本会相应地更改为每个钩子的事件监听器上定义的函数。
- en: See also
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about transition hooks at [https://v3.vuejs.org/guide/transitions-enterleave.html#javascript-hooks](https://v3.vuejs.org/guide/transitions-enterleave.html#javascript-hooks).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/transitions-enterleave.html#javascript-hooks](https://v3.vuejs.org/guide/transitions-enterleave.html#javascript-hooks)找到有关转换钩子的更多信息。
- en: You can find more information about Animate.css at [https://animate.style/](https://animate.style/).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以在[https://animate.style/](https://animate.style/)找到有关Animate.css的更多信息。 '
- en: Creating animations on page render
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在页面渲染时创建动画
- en: Using page transition animations or custom animations that are displayed on
    the render of a page is common and sometimes needed to catch the attention of
    the user of an application.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面渲染时使用页面转换动画或自定义动画是常见的，有时需要引起应用程序用户的注意。
- en: It's possible to create this effect in a Vue application without the need to
    refresh the page or re-render all the elements on the screen. You can do this
    using the `Transition` component or the `TransitionGroup` component.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue应用程序中可以创建此效果，无需刷新页面或重新渲染屏幕上的所有元素。 您可以使用`Transition`组件或`TransitionGroup`组件来实现这一点。
- en: In this recipe, we will learn how to use the `Transition` component so that
    the animation is triggered when the page is being rendered.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用`Transition`组件，以便在页面渲染时触发动画。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following are the prerequisites for this recipe:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档的先决条件如下：
- en: Node.js 12+
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: A Vue-CLI base project called `transactionappear`
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`transactionappear`的Vue-CLI基础项目
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Using the base project, create a new project for this recipe called `transactionappear` and
    open the project folder. Now, follow these steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基础项目，为本教程创建一个名为`transactionappear`的新项目，并打开项目文件夹。 现在，按照以下步骤：
- en: 'Inside the project folder, open Terminal (macOS or Linux) or a Command Prompt/PowerShell (Windows)
    and execute the following command to install the Animate.css framework:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹中，打开Terminal（macOS或Linux）或Command Prompt/PowerShell（Windows），并执行以下命令以安装Animate.css框架：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open the `main.js` file in the `src` folder and import the Animate.css framework:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中的`main.js`文件中导入Animate.css框架：
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Open the `App.vue` file in the `src` folder and add a `Transition` component
    as a wrapper for the `img` HTML element. In the `Transition` component, do the
    following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中的`App.vue`文件中，为`img` HTML元素添加一个`Transition`组件作为包装器。在`Transition`组件中，执行以下操作：
- en: Add an attribute called `appear-active-class` and define it as `"animated jackInTheBox"`.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个名为`appear-active-class`的属性，并将其定义为`"animated jackInTheBox"`.
- en: Add an attribute called `enter-active-class` and define it as `"animated jackInTheBox"`.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个名为`enter-active-class`的属性，并将其定义为`"animated jackInTheBox"`。
- en: Add another attribute called `leave-active-class` and define it as `"animated
    rollOut"`.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加另一个名为`leave-active-class`的属性，并将其定义为`"animated rollOut"`。
- en: 'Add the `appear` attribute and define it as `true`:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`appear`属性并将其定义为`true`：
- en: '[PRE24]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When the page opens, the Vue logo will shake like a jack-in-the-box and will
    be static after the animation has finished running:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 页面打开时，Vue标志将像一个爆米花盒一样摇晃，并在动画完成后保持静止：
- en: '![](assets/82c607c2-9644-4610-b9e7-a00d9cc01133.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/82c607c2-9644-4610-b9e7-a00d9cc01133.png)'
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Transition` component has a special property called `appear` that, when
    enabled, makes the element trigger an animation when it is rendered on the screen.
    This property comes with three properties for controlling the animation CSS classes,
    which are called `appear-class`, `appear-to-class`, and `appear-active-class`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transition`组件有一个特殊属性叫做`appear`，当启用时，使元素在屏幕上呈现时触发动画。该属性带有三个控制动画CSS类的属性，分别为`appear-class`、`appear-to-class`和`appear-active-class`。'
- en: There are four custom hooks that are executed with this property as well, which
    are called `before-appear`, `appear`, `after-appear`, and `appear-cancelled`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 还有四个与此属性一起执行的自定义钩子，分别为`before-appear`、`appear`、`after-appear`和`appear-cancelled`。
- en: In our case, we made the component execute the `jackInTheBox` animation from
    the Animate.css framework when the component gets rendered on-screen.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，当组件在屏幕上呈现时，我们使组件执行Animate.css框架中的`jackInTheBox`动画。
- en: See also
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about transitions on initial render at [https://v3.vuejs.org/guide/transitions-enterleave.html#transitions-on-initial-render](https://v3.vuejs.org/guide/transitions-enterleave.html#transitions-on-initial-render).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/transitions-enterleave.html#transitions-on-initial-render](https://v3.vuejs.org/guide/transitions-enterleave.html#transitions-on-initial-render)找到有关初始渲染过渡的更多信息。
- en: You can find more information about Animate.css at [https://animate.style/](https://animate.style/).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://animate.style/](https://animate.style/)找到有关Animate.css的更多信息。
- en: Creating animations for lists and groups
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为列表和组创建动画
- en: There are some animations that need to be executed within a group of elements
    or a list. These animations need to be wrapped in a `TransitionGroup` element
    in order to work.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些动画需要在一组元素或列表中执行。这些动画需要包装在`TransitionGroup`元素中才能工作。
- en: This component has some properties that are the same as the ones in the `Transition`
    component, but to get it working, you have to define a set of special instructions
    for the child elements and the components that are specific to this component.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件具有一些与`Transition`组件中相同的属性，但要使其工作，您必须为子元素和特定于该组件的组件定义一组特殊指令。
- en: In this recipe, we will create a dynamic list of images that will be added when
    the user clicks on the respective button. This will execute the animation when
    the image appears on the screen.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将创建一个动态图像列表，当用户点击相应按钮时将添加图像。这将在图像出现在屏幕上时执行动画。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following are the prerequisites for this recipe:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此示例的先决条件：
- en: Node.js 12+
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: A Vue-CLI base project called `transactiongroup`
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`transactiongroup`的Vue-CLI基础项目
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Using the base project, create a new project for this recipe called `transactiongroup` and
    open the project folder. Now, follow these steps:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基础项目，为此示例创建一个名为`transactiongroup`的新项目并打开项目文件夹。现在，按照以下步骤进行：
- en: 'Inside the project folder, open Terminal (macOS or Linux) or a Command Prompt/PowerShell (Windows)
    and execute the following command to install the Animate.css framework:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹中，打开Terminal（macOS或Linux）或Command Prompt/PowerShell（Windows），并执行以下命令来安装Animate.css框架：
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the `main.js` file in the `src` folder and import the Animate.css framework:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src`文件夹中的`main.js`文件并导入Animate.css框架：
- en: '[PRE26]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open the `App.vue` file in the `src` folder. In the `<script>` section of the
    single file component, on the `data` singleton, return a property called `count`
    with a value of `0`:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src`文件夹中的`App.vue`文件。在单文件组件的`<script>`部分中，在`data`单例上返回一个名为`count`且值为`0`的属性：
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `<template>` section of the single file component, remove everything
    inside the `div#app` HTML element. Then, as a child of the `div#app` HTML element,
    create a `TransitionGroup` component with an attribute called `tag` defined as
    `"ul"` and an attribute called `enter-active-class` defined as `"animated zoomIn"`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<template>`部分中，删除`div#app` HTML元素内的所有内容。然后，作为`div#app` HTML元素的子元素，创建一个带有`tag`属性定义为`"ul"`和`enter-active-class`属性定义为`"animated
    zoomIn"`的`TransitionGroup`组件：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As a child of the `TransitionGroup` component, create a `li` HTML element with
    the `v-for` directive, iterating over the `count` variable as `i in count`. Add
    a variable attribute called `key` defined as `i` and a `style` attribute defined
    as `"float: left"`*.* As a child of the `li` HTML component, create an `img` HTML
    component with the `src` attribute defined as `"https://picsum.photos/100"`:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '作为`TransitionGroup`组件的子元素，创建一个带有`v-for`指令的`li` HTML元素，对`count`变量进行迭代，定义一个名为`key`的变量属性，其值为`i`，并定义一个`style`属性，其值为`"float:
    left"`。作为`li` HTML组件的子元素，创建一个带有`src`属性定义为`"https://picsum.photos/100"`的`img` HTML组件：'
- en: '[PRE29]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, as a sibling element of the `TransitionGroup` component, create a `hr`
    HTML element with the `style` attribute defined as `"clear: both"`:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '然后，作为`TransitionGroup`组件的兄弟元素，创建一个带有`style`属性定义为`"clear: both"`的`hr` HTML元素：'
- en: '[PRE30]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, as a sibling of the `hr` HTML element, create a `button` HTML element
    with the `click` event, adding `1` to the current `count` variable and setting
    the text to `Increase`:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，作为`hr` HTML元素的兄弟，创建一个带有`click`事件的`button` HTML元素，将`1`添加到当前的`count`变量，并将文本设置为`Increase`：
- en: '[PRE31]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, when the user clicks the respective button to increase the list, it will
    add a new item to the list and the zooming in animation will trigger:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当用户点击相应的按钮以增加列表时，它将向列表添加一个新项目，并触发放大动画：
- en: '![](assets/8fb8866e-08b9-40aa-a89f-0be48f10ee0d.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8fb8866e-08b9-40aa-a89f-0be48f10ee0d.png)'
- en: How it works...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `TransitionGroup` element creates a wrapper element with the tag you declared
    in the `tag` property. This will manage the custom elements that will trigger
    the animation by checking the unique identity of the child elements by their unique
    keys. Because of this, all the child elements inside the `TransitionGroup` component
    need to have a `key` declared and have to be unique.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`TransitionGroup`元素通过`tag`属性中声明的标记创建一个包装器元素。这将通过检查子元素的唯一键来管理将触发动画的自定义元素。因此，`TransitionGroup`组件内的所有子元素都需要声明一个`key`并且必须是唯一的。'
- en: In our case, we created an HTML list using a combination of `ul` and `li` HTML
    elements, where `TransitionGroup` was defined with the `ul` tag and the child
    elements were defined with the `li` HTML elements. Then, we created a virtual
    iteration over a number. This means there will be a list of items and display
    images on-screen according to the number of items on that list.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们使用`ul`和`li` HTML元素创建了一个HTML列表，其中`TransitionGroup`是使用`ul`标签定义的，子元素是使用`li`
    HTML元素定义的。然后，我们对数字进行了虚拟迭代。这意味着将有一个项目列表，并根据该列表上的项目数量在屏幕上显示图像。
- en: To increase our list, we created a `button` HTML element that increased the
    count of the `count` variable by one each time it was pressed.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加我们的列表，我们创建了一个`button` HTML元素，每次按下时都会将`count`变量的计数增加一。
- en: See also
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about transition groups at [https://v3.vuejs.org/guide/transitions-list.html#reusable-transitions](https://v3.vuejs.org/guide/transitions-list.html#reusable-transitions).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/transitions-list.html#reusable-transitions](https://v3.vuejs.org/guide/transitions-list.html#reusable-transitions)找到有关转换组的更多信息。
- en: You can find more information about Animate.css at [https://animate.style/](https://animate.style/).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://animate.style/](https://animate.style/)找到有关Animate.css的更多信息。
- en: Creating a custom transition component
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义过渡组件
- en: Using a framework to create an application is good because you can make reusable
    components and shareable code. Using this pattern is great for simplifying the
    development of the application.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用框架创建应用程序很好，因为您可以创建可重用的组件和可共享的代码。使用这种模式对简化应用程序的开发非常有帮助。
- en: Creating a reusable transition component is the same as creating a reusable
    component and can have a simpler approach as it can be used with functional rendering
    instead of the normal rendering method.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 创建可重用的过渡组件与创建可重用组件相同，可以使用更简单的方法，因为它可以与函数渲染一起使用，而不是正常的渲染方法。
- en: In this recipe, we will learn how to create a reusable functional component
    that can be used in our application.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何创建一个可在我们的应用程序中使用的可重用的函数组件。
- en: Getting ready
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的先决条件如下：
- en: Node.js 12+
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: A Vue-CLI base project called `customtransition`
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`customtransition`的Vue-CLI基本项目
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Using the base project, create a new project for this recipe called `customtransition` and
    open the project folder. Now, follow these steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基本项目，为本教程创建一个名为`customtransition`的新项目，并打开项目文件夹。现在，按照以下步骤进行操作：
- en: 'Inside the project folder, open Terminal (macOS or Linux) or a Command Prompt/PowerShell (Windows)
    and execute the following command to install the Animate.css framework:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹中，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令来安装Animate.css框架：
- en: '[PRE32]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Open the `main.js` file in the `src` folder and import the Animate.css framework:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中的`main.js`文件中导入Animate.css框架：
- en: '[PRE33]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a new file named `CustomTransition.vue` in the `src/components` folder
    and open it. In the `<template>` section of the single file component, add the
    `functional` attribute to enable the functional rendering of the component. Then,
    create a `Transition` component, with the `appear` variable attribute defined
    as `props.appear`. Define the `enter-active-class` attribute as `"animated slideInLeft"` and
    the `leave-active-class` attribute as `"animated slideOutRight"`. Finally, inside
    the `Transition` component, add a `<slot>` placeholder:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个名为`CustomTransition.vue`的新文件，并打开它。在单文件组件的`<template>`部分，添加`functional`属性以启用组件的函数渲染。然后，创建一个`Transition`组件，将`appear`变量属性定义为`props.appear`。将`enter-active-class`属性定义为`"animated
    slideInLeft"`，将`leave-active-class`属性定义为`"animated slideOutRight"`。最后，在`Transition`组件内部，添加一个`<slot>`占位符：
- en: '[PRE34]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Open the `App.vue` file in the `src` folder. In the `<script>` section of the
    single file component, import the newly created `CustomTransition` component.
    On the Vue object, add a new property called `components`, define it as a JavaScript
    object, and add the imported `CustomTransition` component:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中的`App.vue`文件中打开。在单文件组件的`<script>`部分，导入新创建的`CustomTransition`组件。在Vue对象上，添加一个名为`components`的新属性，将其定义为JavaScript对象，并添加导入的`CustomTransition`组件：
- en: '[PRE35]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, in the `<template>` section of the single file component, wrap the
    `img` HTML element with the `CustomTransition` component:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在单文件组件的`<template>`部分，使用`CustomTransition`组件包装`img` HTML元素：
- en: '[PRE36]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'With this custom component, it''s possible to reuse the transition without
    the need to redeclare the `Transition` component and the transition CSS classes
    on the component:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个自定义组件，可以在不需要在组件上重新声明`Transition`组件和过渡CSS类的情况下重用过渡：
- en: '![](assets/5d4d098e-2b25-4bc7-ac51-8a5d7ff00517.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5d4d098e-2b25-4bc7-ac51-8a5d7ff00517.png)'
- en: How it works...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we created a custom component using the functional component method,
    where there is no need to declare the `<script>` section of the single file component.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用函数组件方法创建了一个自定义组件，不需要声明单文件组件的`<script>`部分。
- en: In this custom component, we used the `Transaction` component as the base component.
    Then, we defined the `appear` attribute with the injected functional context, `prop.appear`,
    and added the animations classes for the transition to slide in from the left
    when the component is rendered and slide out from the right when it's destroyed.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个自定义组件中，我们使用`Transaction`组件作为基础组件。然后，我们使用注入的函数上下文`prop.appear`定义了`appear`属性，并为过渡添加了动画类，使其在组件呈现时从左侧滑入，销毁时从右侧滑出。
- en: Then, in the main application, we used this custom component to wrap the `img`
    HTML element and make it work as the `Transition` component.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在主应用程序中，我们使用这个自定义组件来包装`img` HTML元素，并使其作为`Transition`组件工作。
- en: See also
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about reusable transition components at [https://v3.vuejs.org/guide/transitions-list.html#reusable-transitions](https://v3.vuejs.org/guide/transitions-list.html#reusable-transitions).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/transitions-list.html#reusable-transitions](https://v3.vuejs.org/guide/transitions-list.html#reusable-transitions)找到有关可重用过渡组件的更多信息。
- en: You can find more information about Animate.css at [https://animate.style/](https://animate.style/).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://animate.style/](https://animate.style/)找到有关Animate.css的更多信息。
- en: Creating a seamless transition between elements
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在元素之间创建无缝过渡
- en: When there are animations and transitions between two components, they need
    to be seamless so that the user won't see the DOM shaking and redrawing itself
    when the components are being placed on the screen. To achieve this, we can use
    the `Transition` component and the transition mode property to define how the
    transition will occur.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个组件之间有动画和过渡时，它们需要是无缝的，这样用户在将组件放置在屏幕上时就看不到DOM抖动和重绘。为了实现这一点，我们可以使用`Transition`组件和过渡模式属性来定义过渡的方式。
- en: In this recipe, we will create a transition between images using the `Transition`
    component and the transition mode attribute to create a seamless animation.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用`Transition`组件和过渡模式属性来创建图像之间的过渡动画。
- en: Getting ready
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的先决条件如下：
- en: Node.js 12+
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: A Vue-CLI base project called `seamlesstransition`
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`seamlesstransition`的Vue-CLI基础项目
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Using the base project, create a new project for this recipe called `seamlesstransition` and
    open the project folder. Now, follow these steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基础项目，为这个示例创建一个名为`seamlesstransition`的新项目，并打开项目文件夹。现在，按照以下步骤进行操作：
- en: 'Open the `App.vue` file in the `src` folder. In the `<style>` section of the
    single file component, create a property called `.rotate-enter-active,.rotate-leave-active`
    and define the `transition` CSS style property as `transform .8s ease-in-out;`.
    Then, create a property called `.rotate-enter,.rotate-leave-active` and define
    the `transform` CSS style property as `rotate( -180deg );` and `transition` as `.8s
    ease-in-out;`:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`App.vue`文件。在单文件组件的`<style>`部分，创建一个名为`.rotate-enter-active,.rotate-leave-active`的属性，并将`transition`
    CSS样式属性定义为`transform .8s ease-in-out;`。然后，创建一个名为`.rotate-enter,.rotate-leave-active`的属性，并将`transform`
    CSS样式属性定义为`rotate( -180deg );`，并将`transition`定义为`.8s ease-in-out;`：
- en: '[PRE37]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the `<template>` section of the single file component, wrap the `img` HTML
    element with a `Transition` component. Then, define the `name` attribute as `rotate`
    and the `mode` attribute as `out-in`:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<template>`部分，用`Transition`组件包裹`img` HTML元素。然后，将`name`属性定义为`rotate`，`mode`属性定义为`out-in`：
- en: '[PRE38]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Inside the `Transition` component, in the `img` HTML element, add a `key` attribute
    and define it as `up`. Then, add another `img` HTML element and add a `v-else`
    directive. Add a `key` attribute and define it as `down`, add an `src` attribute
    and define it as `"./assets/logo.png"`, and finally add a `style` attribute and
    define it as `"transform: rotate(180deg)"`:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`Transition`组件中，对`img` HTML元素添加一个`key`属性，并将其定义为`up`。然后，添加另一个`img` HTML元素并添加一个`v-else`指令。添加一个`key`属性并将其定义为`down`，添加一个`src`属性并将其定义为`"./assets/logo.png"`，最后添加一个`style`属性并将其定义为`"transform:
    rotate(180deg)"`：'
- en: '[PRE39]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'When the user toggles the element, the leaving animation will be executed,
    and then after it has finished, the entering animation will start with no delay.
    This makes for a seamless transition between the old element and the new one:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户切换元素时，将执行离开动画，然后在完成后，进入动画将立即开始。这样就可以实现旧元素和新元素之间的无缝过渡：
- en: '![](assets/73ca085d-cca2-4228-af9a-c895b177ac7d.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/73ca085d-cca2-4228-af9a-c895b177ac7d.png)'
- en: How it works...
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `Transition` component has a special attribute called `mode`, where it
    is possible to define the behavior of the element''s transition animation. This
    behavior will create a set of rules that controls how the animation steps will
    occur inside the `Transition` component. It''s possible to use `"in-out"` or `"out-in"`
    mode in the component:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transition`组件有一个特殊的属性叫做`mode`，在这里可以定义元素过渡动画的行为。这种行为将创建一组规则，控制动画步骤在`Transition`组件内部的发生方式。在组件中可以使用“in-out”或“out-in”模式：'
- en: In the `"in-out"` behavior, the new element transition will occur first, and
    when it's finished, the old element transition will start.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“in-out”行为中，新元素的过渡将首先发生，当它完成后，旧元素的过渡将开始。
- en: In the `"out-in"` behavior, the old element transition will occur first, and
    then the new element transition will start.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“out-in”行为中，旧元素的过渡将首先发生，然后新元素的过渡将开始。
- en: In our case, we created an animation that rotates the Vue logo upside down.
    Then, to handle this seamless change, we used `"out-in"` mode so that the new
    element will only show up after the old one has finished the transition.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们创建了一个动画，将Vue标志旋转到倒置状态。然后，为了处理这个无缝的变化，我们使用了“out-in”模式，这样新元素只会在旧元素完成过渡后才会显示出来。
- en: See also
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about transition modes at [https://v3.vuejs.org/guide/transitions-enterleave.html](https://v3.vuejs.org/guide/transitions-enterleave.html).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/transitions-enterleave.html](https://v3.vuejs.org/guide/transitions-enterleave.html)找到有关过渡模式的更多信息。
