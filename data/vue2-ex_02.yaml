- en: Displaying, Looping, Searching, and Filtering Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示、循环、搜索和过滤数据
- en: 'In [Chapter 1](part0023.html#LTSU0-985bf4ae118d4f62b18ae64204cb251c), *Getting
    Started with Vue.js*, we covered the `data`, `computed`, and `method` objects
    within Vue and how to display static data values. In this chapter, were are going
    to cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](part0023.html#LTSU0-985bf4ae118d4f62b18ae64204cb251c)中，我们介绍了Vue中的`data`，`computed`和`method`对象以及如何显示静态数据值。在本章中，我们将介绍以下内容：
- en: Displaying lists and more complex data with Vue using `v-if`, `v-else`, and `v-for`
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`v-if`，`v-else`和`v-for`显示列表和更复杂的数据
- en: Filtering the lists using form elements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用表单元素过滤列表
- en: Applying conditional CSS classes based on the data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据数据应用条件性的CSS类
- en: 'The data we are going to be using is going to be randomly generated by the
    JSON generator service ([http://www.json-generator.com/](http://www.json-generator.com/)).
    This website allows us to get dummy data to practice with. The following template
    was used to generate the data we will be using. Copy the following into the left-hand
    side to generate data of the same format so the attributes match with the code
    examples, as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用JSON生成器服务（[http://www.json-generator.com/](http://www.json-generator.com/)）随机生成要使用的数据。这个网站允许我们获取虚拟数据进行练习。以下模板用于生成我们将使用的数据。将以下内容复制到左侧以生成具有相同格式的数据，以便属性与代码示例匹配，如下所示：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Before we get into building our simple app and displaying our users, we'll cover
    some more of the features of Vue and the HTML-specific attributes available in
    your view. These range from dynamically rendering content to looping through arrays.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建我们的简单应用程序并显示用户之前，我们将介绍Vue的更多功能和视图中可用的HTML特定属性。这些功能从动态渲染内容到循环遍历数组等。
- en: HTML declarations
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML声明
- en: Vue allows you to use HTML tags and attributes to control and alter the view
    of your application. This involves setting attributes dynamically, such as `alt`
    and `href`. It also allows you to render tags and components based on data in
    the application. These attributes begin with a `v-` and, as mentioned at the beginning
    of this book, get removed from the HTML on render. Before we start outputting
    and filtering our data, we'll run through a few of the common declarations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Vue允许您使用HTML标签和属性来控制和修改应用程序的视图。这包括动态设置属性，如`alt`和`href`。它还允许您根据应用程序中的数据来渲染标签和组件。这些属性以`v-`开头，并且如本书开头所提到的，在渲染时会从HTML中删除。在我们开始输出和过滤数据之前，我们将介绍一些常见的声明。
- en: v-html
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-html
- en: 'The `v-html` directive allows you to output content without using the mustache-style
    curly bracket syntax. It can also be used if your output contains HTML tags –
    it will render the output as HTML instead of plain text. The value of the HTML
    attribute is that of the data key or computed function name:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-html`指令允许您输出内容而不使用花括号语法。如果输出包含HTML标签，它也可以用于将输出呈现为HTML而不是纯文本。HTML属性的值是数据键或计算函数名称的值：'
- en: '**View**:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**View**:'
- en: 'In your view app space, add the `v-html` attribute to an element:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的视图应用空间中，将`v-html`属性添加到一个元素中：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**JavaScript**:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript**:'
- en: 'In the JavaScript, set the `message` variable to a string which contains some
    HTML elements:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，将`message`变量设置为包含一些HTML元素的字符串：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should try and avoid adding HTML to your Vue instance, as it starts to mix
    up the View in the ViewModel and Model of our MVVM structure. There is also the
    danger you output an invalid HTML tag inside another. You should only use `v-html`
    with data you trust, because using it with an external API could be a security
    concern as it would allow the API to have control over your application. A potentially
    malicious API could use `v-html` to inject undesired content and HTML. Only use
    `v-html` with data you can fully trust.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该尽量避免将HTML添加到Vue实例中，因为这会混淆我们的MVVM结构中的视图和ViewModel和Model。还有一个危险，你可能会在另一个HTML标签中输出一个无效的HTML标签。只有在你信任的数据上使用`v-html`，因为在外部API上使用它可能会带来安全问题，因为它允许API控制你的应用程序。一个潜在的恶意API可以使用`v-html`来注入不需要的内容和HTML。只有在你完全信任的数据上使用`v-html`。
- en: Declarative rendering
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明式渲染
- en: Regular HTML attributes, such as the `src` of the `<img>` tag, can be dynamically
    populated with Vue using the `v-bind:` attribute. This allows you to populate
    any existing attribute with data from your Vue application. This might be an image
    source or element ID.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue，可以使用`v-bind:`属性动态填充常规HTML属性，例如`<img>`标签的`src`。这允许你使用Vue应用程序中的数据填充任何现有属性。这可能是图像源或元素ID。
- en: 'The `bind` option gets used by prepending the attribute you wish to populate.
    For example, if you wished to populate an image source with the value of a data
    key called `imageSource`, you would do the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`bind`选项通过在要填充的属性前面添加属性来使用。例如，如果你想使用名为`imageSource`的数据键的值填充图像源，你可以这样做：'
- en: '**View**:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**视图**：'
- en: Create an img tag in your view app space, with a dynamic `src` attribute, using
    `v-bind` and a variable called `imageSource`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图应用空间中创建一个带有动态`src`属性的img标签，使用`v-bind`和一个名为`imageSource`的变量。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**JavaScript**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript**：'
- en: 'Create a variable in your Vue JavaScript code called `imageSource`. Add the
    URL to the desired image:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue的JavaScript代码中创建一个名为`imageSource`的变量。添加所需图像的URL：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `v-bind:` attribute can be shortened to just `:`, so, for example, `v-bind:src`
    would become `:src`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-bind:`属性可以缩写为`:`，所以，例如，`v-bind:src`将变为`:src`。'
- en: Conditional rendering
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件渲染
- en: Using custom HTML declarations, Vue allows you to render elements and contents
    conditionally based on data attributes or JavaScript declarations. These include
    `v-if`, for showing a container whether a declaration equates to true, and `v-else`,
    to show an alternative.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义HTML声明，Vue允许你根据数据属性或JavaScript声明有条件地渲染元素和内容。这些包括`v-if`，用于在声明等于true时显示容器，以及`v-else`，用于显示替代内容。
- en: v-if
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-if
- en: The most basic example of this would be the `v-if` directive – determining a
    value or function if the block should be displayed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的例子是`v-if`指令-根据条件确定是否显示块的值或函数。
- en: Create a Vue instance with a single `div` inside the view and a data key, `isVisible`,
    set to `false`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中创建一个带有单个`div`的Vue实例，并设置一个名为`isVisible`的数据键，值为`false`。
- en: '**View**:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**视图**：'
- en: 'Start off with the view code as the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下视图代码开始：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**JavaScript**:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript**：'
- en: 'In the JavaScript, initialize Vue and create an `isVisible` data property:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，初始化Vue并创建一个`isVisible`数据属性：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Right now, your Vue app would be displaying the contents of your element. Now
    add the `v-if` directive to your HTML element with the value of `isVisible`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的Vue应用程序将显示元素的内容。现在在HTML元素中添加`v-if`指令，值为`isVisible`：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Upon pressing save, your text should disappear. That is because the tag is
    being conditionally rendered based on the value, which is currently `false`. If
    you open up your JavaScript console and run the following code, your element should
    reappear:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，你的文本应该消失。这是因为标签根据值进行条件渲染，而当前值为`false`。如果你打开JavaScript控制台并运行以下代码，你的元素应该重新出现：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`v-if` doesn''t just work with Boolean true/false values. You can check whether
    a data property is equal to a specific string:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-if`不仅适用于布尔值true/false。您可以检查数据属性是否等于特定字符串：'
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For example, the preceding code checks whether a selected data property is equal
    to the value of `yes`. The `v-if` attribute accepts JavaScript operators, so can
    check not equals, bigger, or less than.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，上述代码检查所选数据属性是否等于`yes`的值。`v-if`属性接受JavaScript运算符，因此可以检查不等于、大于或小于。
- en: The danger here is that your logic starts to creep into your View away from
    your ViewModel. To combat this, the attribute also takes functions as a value.
    The method can be as complicated as required but ultimately must return a `true`
    if you wish to show the code and a `false` if not. Bear in mind that if the function
    returns anything other than a false value (such as `0` or `false`) then the result
    will be interpreted as true.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 危险在于您的逻辑开始从ViewModel中渗入到View中。为了解决这个问题，该属性还可以将函数作为值。该方法可以是复杂的，但最终必须返回`true`以显示代码和`false`以隐藏代码。请记住，如果函数返回除false值（例如`0`或`false`）之外的任何值，则结果将被解释为true。
- en: 'This would look something like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将看起来像这样：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And your method could be as this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您的方法可以是这样的：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you don't wish to completely remove the element and only hide it, there is
    a more appropriate directive, `v-show`. This applies a CSS display property rather
    than manipulating the DOM – `v-show` is covered later in the chapter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望完全删除元素，只是隐藏它，那么有一个更合适的指令`v-show`。这将应用CSS显示属性而不是操作DOM - `v-show`将在本章后面介绍。
- en: v-else
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-else
- en: '`v-else` allows you to render an alternative element based on the opposite
    of the `v-if` statement. If that results in `true`, the first element will be
    displayed; otherwise, the element containing `v-else` will.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-else`允许您根据`v-if`语句的相反情况渲染替代元素。如果结果为true，则显示第一个元素；否则，显示包含`v-else`的元素。'
- en: The element with `v-else` needs to directly follow the one containing `v-if`; otherwise,
    your application will throw an error.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`v-else`的元素需要直接跟在包含`v-if`的元素后面；否则，您的应用程序将抛出错误。
- en: '`v-else` has no value and is placed within the element tag.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-else`没有值，并且放置在元素标签内部。'
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Adding the preceding HTML to your app space will only show one of the `<div>`
    elements – toggling the value in your console as we did earlier will reveal the
    other container. You can also use `v-else-if` should you wish to chain your conditions.
    An example of `v-else-if` is as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述HTML添加到您的应用程序空间将只显示一个`<div>`元素 - 在控制台中切换值，就像我们之前做的那样，将显示另一个容器。如果您希望链接您的条件，您还可以使用`v-else-if`。`v-else-if`的示例如下：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You might see me will be displayed if the `isVisible` variable equates to `false`,
    but the `otherVisible` variable equates to `true`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`isVisible`变量等于`false`，则可能会看到`me`，但`otherVisible`变量等于`true`。
- en: '`v-else` should be used sparingly as can be ambiguous and might lead to false
    positive situation.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 应谨慎使用`v-else`，因为它可能会产生歧义，并可能导致错误的情况。
- en: v-for and displaying our data
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-for和显示我们的数据
- en: The next HTML declaration means we can start displaying our data and putting
    some of these attributes into practice. As our data is an array, we will need
    to loop through it to display each element. To do this, we will use the `v-for`
    directive.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个HTML声明意味着我们可以开始显示数据并将其中一些属性应用到实践中。由于我们的数据是一个数组，我们需要循环遍历它以显示每个元素。为此，我们将使用`v-for`指令。
- en: 'Generate your JSON and assign it to a variable called `people`. During these
    examples, the generated JSON loop will be displayed in the code blocks as `[...]`.
    Your Vue app should look like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 生成您的JSON并将其分配给名为`people`的变量。在这些示例中，生成的JSON循环将显示在代码块中，如`[...]`。您的Vue应用程序应如下所示：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We now need to start displaying each person''s name in our View as a bulleted
    list. This is where the `v-for` directive comes in:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要将每个人的姓名显示为项目符号列表。这就是`v-for`指令的作用：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `v-for` loops through the JSON list and for every entry temporarily assigns
    it the `person` variable. We can then output the value or attributes of the variable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-for`循环遍历JSON列表，并临时将其分配给`person`变量。然后，我们可以输出变量的值或属性。'
- en: 'The `v-for` loop needs to be applied to the HTML element you want to be repeated,
    in this case, `<li>`. If you don''t have a wrapping element or don''t wish to
    use the HTML you can use the Vue `<template>` elements. These get removed at runtime
    while still creating a container for you to output the data with:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-for`循环需要应用于要重复的HTML元素，例如`<li>`。如果您没有包装元素或不希望使用HTML，可以使用Vue的`<template>`元素。这些元素在运行时被移除，同时仍然为您创建一个容器来输出数据：'
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The template tag also hides the contents until the app has initialized, which
    may be handy if your network is slow or your JavaScript takes a while to fire.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 模板标签还可以隐藏内容，直到应用程序初始化完成，这在您的网络速度较慢或JavaScript需要一段时间才能触发时可能很有用。
- en: 'Just leaving our view to output `{{ person }}` will create a long string of
    information, without any use to us. Update the output to target the `name` property
    of the `person` object:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只是让我们的视图输出`{{ person }}`，将会创建一个长字符串的信息，对我们没有任何用处。更新输出以定位`person`对象的`name`属性：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Viewing the result in the browser should reveal a list of the user''s names.
    Update the HTML to list the users in a table showing their names, email addresses,
    and balance. Apply the `v-for` to the `<tr>` element:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看结果应该会显示一个用户姓名的列表。更新HTML以在表格中列出用户的姓名、电子邮件地址和余额。将`v-for`应用于`<tr>`元素：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Add an extra cell to your table. This is going to display Active if they are
    active and Inactive if not, using the `isActive` property on the `person` object.
    This can be achieved in two ways – using the `v-if` directive or alternatively
    using a ternary `if`. Ternary ifs are in-line `if` statements that can be placed
    within the curly brackets of your View. We would use the `v-if` if we wanted to
    use HTML elements to apply some styling.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的表格中添加一个额外的单元格。这将使用`person`对象上的`isActive`属性显示Active（活动）或Inactive（非活动）。这可以通过两种方式实现
    - 使用`v-if`指令或使用三元`if`。三元if是内联的`if`语句，可以放置在视图的花括号中。如果我们想要使用HTML元素来应用一些样式，我们将使用`v-if`。
- en: 'If we were using a ternary ''if'', the cell would look like the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用三元'if'，单元格将如下所示：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And if we opted for the `v-if` option with `v-else`, allowing us to use the
    HTML we wish, it would look like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们选择使用带有`v-else`的`v-if`选项，允许我们使用所需的HTML，它将如下所示：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This active element is a perfect example of where a Vue Component would be
    ideal – we''ll cover that in [Chapter 3](part0051.html#1GKCM0-985bf4ae118d4f62b18ae64204cb251c),
    *Optimizing our App and Using Components to Display Data*. As an alternative that
    is more in keeping with our MVVM methodology, we could create a method, which
    returns the status text. This would tidy up our view and moves the logic to our
    app:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动元素是Vue组件非常理想的一个例子 - 我们将在[第3章](part0051.html#1GKCM0-985bf4ae118d4f62b18ae64204cb251c)中介绍，*优化我们的应用程序并使用组件显示数据*。作为符合我们的MVVM方法论的替代方案，我们可以创建一个方法，该方法返回状态文本。这将整理我们的视图并将逻辑移动到我们的应用程序中：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Our method would then carry out the same logic as our view was:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的方法将执行与我们的视图相同的逻辑：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Our table will now look like the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表格现在将如下所示：
- en: '![](img/00006.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: Creating links using v-html
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`v-html`创建链接
- en: The next step is to link the email address so that it is clickable for users
    viewing the list of people. In this instance, we need to concatenate strings by
    adding a `mailto:` before the email address.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将电子邮件地址链接起来，以便用户在查看人员列表时可以点击。在这种情况下，我们需要在电子邮件地址之前添加`mailto:`来连接字符串。
- en: 'The first instinct is to do the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第一反应是执行以下操作：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'But Vue doesn''t allow interpolation inside attributes. Instead, we must use
    the `v-bind` directive on the `href` attribute. This turns the attribute into
    a JavaScript variable, so any raw text must be written in quotes, and the concatenated
    with the desired variable:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但是Vue不允许在属性内插值。相反，我们必须在`href`属性上使用`v-bind`指令。这将属性转换为JavaScript变量，因此任何原始文本必须用引号括起来，并与所需的变量连接起来：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note the addition of `v-bind:`, the single quotes and concatenation `+` identifier.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意添加了`v-bind:`、单引号和连接符`+`。
- en: Format balance
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化余额
- en: 'Before we move on to filtering the users, add a method to correctly format
    the balance, prepending a currency symbol defined in the data object and ensuring
    there are two numbers after the decimal point. We can adapt our method from [Chapter
    1](part0023.html#LTSU0-985bf4ae118d4f62b18ae64204cb251c), *Getting Started with
    Vue.js*,  to achieve this. Our Vue application should now look like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行用户过滤之前，添加一个方法来正确格式化余额，在数据对象中定义一个货币符号，并确保小数点后有两个数字。我们可以从[第1章](part0023.html#LTSU0-985bf4ae118d4f62b18ae64204cb251c)中调整我们的方法，以实现这一点。我们的Vue应用程序现在应该是这样的：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can utilize this new method in our View:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在视图中利用这个新方法：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Format registered date
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化注册日期
- en: The registered date field in the data is computer friendly, which is not very
    human-friendly to read. Create a new method titled `formatDate` that takes one
    parameter — similar to the `formatBalance` method previously.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 数据中的注册日期字段对计算机友好，但对人类来说不太友好。创建一个名为`formatDate`的新方法，它接受一个参数，类似于之前的`formatBalance`方法。
- en: 'If you want full customization of the display of your date, there are several
    libraries available, such as `moment.js`, that give you much more flexibility
    over the output of any date and time-based data. For this method, we are going
    to use a native JavaScript function, to `LocaleString()`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要完全自定义日期的显示，有几个可用的库，比如`moment.js`，可以在任何日期和时间数据的输出上提供更大的灵活性。对于这个方法，我们将使用一个原生的JavaScript函数`toLocaleString()`：
- en: '[PRE27]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With the registered date, we pass it to the native `Date()` function so JavaScript
    knows to interpret the string as a date. Once stored in the registered variable,
    we return the object as a string with the `toLocaleString()` function. This function
    accepts a huge array of options (as outlined on MDN) to customize the output of
    your date. For now, we''ll pass it the locale we wish to display and use the defaults
    for that location. We can now utilize our method in the view:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于注册日期，我们将其传递给原生的`Date()`函数，以便JavaScript知道将字符串解释为日期。一旦存储在注册变量中，我们使用`toLocaleString()`函数将对象返回为字符串。该函数接受一个巨大的选项数组（如MDN中所述），用于自定义日期的输出。目前，我们将传递所希望显示的区域设置，并使用该位置的默认设置。现在我们可以在视图中利用我们的方法：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Each table row should now look like the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表格行现在应该如下所示：
- en: '![](img/00007.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: Filtering our data
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤我们的数据
- en: With our data being listed out, we are now going to build filtering ability.
    This will allow a user to select a field to filter by and a text field to enter
    their query. The Vue application will then filter the rows as the user types.
    To do this, we are going to bind some form inputs to various values in the `data`
    object, create a new method, and use a new directive on the table rows; `v-show`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在列出数据后，我们现在要构建过滤功能。这将允许用户选择要过滤的字段和输入查询的文本字段。Vue应用程序将在用户输入时过滤行。为此，我们将绑定一些表单输入到`data`对象中的各个值，创建一个新的方法，并在表格行上使用一个新的指令`v-show`。
- en: Building the form
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建表单
- en: Start off by creating the HTML in your view. Create a `<select>` box with an
    `<option>` for each field you want to filter, an `<input>` for the query, and
    a pair of radio buttons – we'll use these to filter active and non-active users.
    Make sure the value attribute of each `<option>` reflects the key in the user
    data – this will save on code required and will make the purpose of the select
    box more obvious.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在视图中创建HTML。创建一个`<select>`框，每个要过滤的字段都有一个`<option>`，一个用于查询的`<input>`，以及一对单选按钮
    - 我们将使用这些按钮来过滤活动和非活动用户。确保每个`<option>`的value属性反映了用户数据中的键 - 这将减少所需的代码并使选择框的目的更明显。
- en: The data you are filtering by does not need to be displayed for our filtering
    to work, although a user experience consideration needs to come into play here.
    Would it make sense if a table row was being displayed without the data you're
    filtering it on?
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们过滤的数据不需要显示出来，但是在这里需要考虑用户体验。如果显示一个表格行，但没有你要过滤的数据，这是否有意义？
- en: 'Create the form that will be used for filtering:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用于过滤的表单：
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This form includes a select box for selecting a field a filter by, an input
    box that would allow the user to enter a query to filter on, and a pair of radio
    buttons for when we wish to filter by active and non-active users. The imagined
    user flow is this: the user would select the field they wish to filter the data
    by and either enter their query or select the radio buttons. When the `isActive` (Active
    user) option is selected in the select box, the radio buttons will be displayed
    and the input box will be hidden. We have ensured the first radio button is selected
    by default to help.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该表单包括一个选择框，用于选择要过滤的字段，一个输入框，允许用户输入要过滤的查询，以及一对单选按钮，用于当我们希望按活动和非活动用户进行过滤时。想象中的用户流程是这样的：用户将选择他们希望按数据进行过滤的字段，并输入查询或选择单选按钮。当在选择框中选择`isActive`（活动用户）选项时，将显示单选按钮，并隐藏输入框。我们已经确保默认选择了第一个单选按钮以帮助用户。
- en: The filtering inputs do not need to be included in a form to work; however,
    it is good practice to retain semantic HTML, even in a JavaScript application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤输入不需要包含在表单中才能工作；然而，即使在JavaScript应用程序中，保留语义化的HTML也是一个好的实践。
- en: Binding the inputs
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定输入
- en: 'To bind inputs to a variable that can be accessed through your Vue instance
    requires an HTML attribute to be added to the fields and a corresponding key added
    to the `data` object. Create a variable in the `data` object for each of the fields
    so we can bind the form elements to them:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要将输入绑定到可以通过Vue实例访问的变量，需要在字段中添加一个HTML属性，并在`data`对象中添加一个相应的键。为每个字段在`data`对象中创建一个变量，以便我们可以将表单元素绑定到它们：
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The data object now has three additional keys: `filterField`, which will be
    used for storing the value of the dropdown; `filterQuery`, the placeholder for
    data entered into the textbox; and `filterUserState`, which allows us to store
    the radio button checkboxes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 数据对象现在有三个额外的键：`filterField`，用于存储下拉框的值；`filterQuery`，用于存储输入到文本框中的数据的占位符；以及`filterUserState`，允许我们存储单选按钮的复选框。
- en: Now there are data keys to utilize, we are able to bind form elements to them.
    Apply a `v-model=""` attribute to each form field, with the value of the data
    key.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有了可利用的数据键，我们可以将表单元素绑定到它们上。为每个表单字段应用一个`v-model=""`属性，其值为数据键。
- en: 'Here''s an example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个例子：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Make sure the two radio buttons have exactly the same `v-model=""` attribute:
    this is so they can update the same value. To verify that it has worked, you can
    now output the data variables and get the value of the fields.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 确保两个单选按钮具有完全相同的`v-model=""`属性：这样它们才能更新相同的值。为了验证它是否起作用，现在可以输出数据变量并获取字段的值。
- en: Try outputting `filterField` or `filterQuery` and changing the fields.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试输出`filterField`或`filterQuery`并更改字段。
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: One thing you may notice if you were to output the `filterUserState` variable
    is it appears to be in working, But, it is not getting the actual results desired.
    The output of the variable would be `true` and `false`as set in the value attributes.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你输出`filterUserState`变量，你可能会注意到它似乎在工作，但实际上它没有得到期望的结果。变量的输出将是根据value属性设置的`true`和`false`。
- en: 'On closer inspection, the values are actually strings, rather than a Boolean
    value. A Boolean value is a hard `true` or `false`, `1` or `0`, which you can
    easily compare against, whereas a string would require exact checking on a hardcoded
    string. This can be verified by outputting the `typeof` variable that it is:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查后，实际上这些值是字符串，而不是布尔值。布尔值是`true`或`false`、`1`或`0`，你可以轻松地进行比较，而字符串则需要对硬编码的字符串进行精确检查。可以通过输出`typeof`变量来验证它是什么类型：
- en: '[PRE33]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This can be resolved by binding the values of the radio buttons with the `v-bind:value` attribute.
    This attribute allows you to specify the value for Vue to interpret and can take
    Boolean, string, or object values. For now, we''ll pass it `true` and `false`,
    as we were already doing with the standard value attribute, but Vue will know
    to interpret it as Boolean:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将单选按钮的值绑定到`v-bind:value`属性来解决这个问题。该属性允许您指定Vue要解释的值，并且可以接受布尔值、字符串或对象值。现在，我们将传递`true`和`false`，就像我们已经在标准值属性中做的那样，但是Vue将知道将其解释为布尔值：
- en: '[PRE34]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The next step is to show and hide the table rows based on these filters.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是根据这些过滤器显示和隐藏表格行。
- en: Showing and hiding Vue content
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示和隐藏Vue内容
- en: Along with `v-if` for showing and hiding content, you can also use the `v-show=""`
    directive. `v-show` is very similar to `v-if`; they both get added to the HTML
    wrapper and can both accept the same parameters, including a function.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`v-if`来显示和隐藏内容外，还可以使用`v-show=""`指令。`v-show`与`v-if`非常相似；它们都会添加到HTML包装器中，并且都可以接受相同的参数，包括一个函数。
- en: The difference between the two is `v-if` alters the markup, removing and adding
    HTML elements as required, whereas `v-show` renders the element regardless, hiding
    and showing the element with inline CSS styles. `v-if` is much more suited to
    runtime renders or infrequent user interactivities as it could potentially be
    restructuring the whole page. `v-show` is favorable when lots of elements are
    quickly coming in and out of view, for example, when filtering!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 两者之间的区别是，`v-if`会改变标记，根据需要删除和添加HTML元素，而`v-show`无论如何都会渲染元素，通过内联CSS样式隐藏和显示元素。`v-if`更适合运行时渲染或不频繁的用户交互，因为它有可能重构整个页面。当大量元素快速进入和退出视图时，例如进行过滤时，`v-show`更可取！
- en: When using `v-show` with a method, the function needs to return just a `true`
    or `false`. The function has no concept of where it is being used, so we need
    to pass in the current person being rendered to calculate if it should be shown.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用带有方法的`v-show`时，函数需要返回一个`true`或`false`。函数没有概念知道它在哪里被使用，所以我们需要传入当前正在渲染的人来计算是否应该显示它。
- en: 'Create a method on your Vue instance titled `filterRow()` and inside, set it
    to `return true`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Vue实例上创建一个名为`filterRow()`的方法，并在内部将其设置为`return true`：
- en: '[PRE35]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The function takes one parameter, which is the person will we pass in from
    though from the HTML. In your view, add the `v-show` attribute to the `<tr>` element
    with `filterRow` as the value while passing in the person object:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受一个参数，这个参数是我们从HTML中传递进来的人。在你的视图中，给`<tr>`元素添加`v-show`属性，值为`filterRow`，同时传入人物对象：
- en: '[PRE36]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'As a simple test, return the `isActive` value to the person. This should instantly
    filter out anyone who is inactive, as their value will return `false`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个简单的测试，将`isActive`的值返回给人物。这应该立即过滤掉任何不活跃的人，因为他们的值将返回`false`：
- en: '[PRE37]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Filtering our content
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤我们的内容
- en: Now we have control over our people rows and some filter controls in our view,
    we need to make our filters work. We are already filtering by our `isActive` key,
    so the radio buttons will be the first to be wired up. We already have the value
    in a Boolean form for both the radio buttons values and the key we will be filtering
    by. For this filter to work, we need to compare the `isActive` key with the radio
    button's value.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以控制我们的人员行和视图中的一些过滤器控件，我们需要让我们的过滤器起作用。我们已经通过`isActive`键进行了过滤，所以单选按钮将是第一个被连接的。我们已经以布尔形式拥有了单选按钮的值和我们将进行过滤的键的值。为了使这个过滤器起作用，我们需要将`isActive`键与单选按钮的值进行比较。
- en: If the `filterUserState` value is `true`, show users where `isActive` is `true`
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`filterUserState`的值为`true`，则显示`isActive`为`true`的用户
- en: If the `filterUserState` value is `false`, however, only show users where their
    `isActive` value is `false` as well
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，如果`filterUserState`的值为`false`，则只显示`isActive`值也为`false`的用户
- en: 'This can be written in one line by comparing the two variables:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过比较这两个变量来写成一行：
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: On page load, no users will be shown as the `filterUserState` key is set to
    neither `true` nor `false`. Clicking one of the radio buttons will reveal the
    corresponding users.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面加载时，不会显示任何用户，因为`filterUserState`键既不设置为`true`也不设置为`false`。点击其中一个单选按钮将显示相应的用户。
- en: 'Let''s make the filter work only if the active user option is selected in the
    dropdown:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让过滤器只在下拉菜单中选择了活跃用户选项时起作用：
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This code sets a variable to `true` as a default. We can then return the variable
    immediately and our row will show. Before returning, however, it checks the value
    of the select box and if is the desired value, will then filter by our radio buttons.
    As our select box is bound to the `filterField` value, as with the `filterUserState`
    variable, it updates while we interact with the app. Try selecting the Active
    user option in the select box and changing the radio buttons.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将一个变量设置为`true`作为默认值。然后我们可以立即返回这个变量，这样我们的行就会显示出来。然而，在返回之前，它会检查选择框的值，如果是期望的值，那么就会按照我们的单选按钮进行过滤。由于我们的选择框与`filterField`值绑定，就像`filterUserState`变量一样，它会在我们与应用程序交互时更新。尝试在选择框中选择“活跃用户”选项并更改单选按钮。
- en: 'The next step is to use the input query box when the active user option is
    not selected. We also want our query to be a *fuzzy* search — for example, to
    match words containing the search query rather than matching exactly. We also
    want it to be case insensitive:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在未选择活跃用户选项时使用输入查询框。我们还希望我们的查询是一个模糊搜索 - 例如，匹配包含搜索查询的单词，而不是完全匹配。我们还希望它是不区分大小写的：
- en: '[PRE40]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: There are a few things we had to add to this method in order to work. The first
    step is to check that our select field has a value to begin the filtering. As
    the first option in our select field has a `value=""`, this equates to `false`.
    If this is the case, the method returns the default of `true`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个方法起作用，我们需要添加一些东西。第一步是检查我们的选择字段是否有一个值来开始过滤。由于我们的选择字段中的第一个选项的`value=""`，这等于`false`。如果是这种情况，该方法返回默认值`true`。
- en: If it does have a value, it then goes to our original `if` statement. This checks
    on the specific value to see whether it matches `isActive` – if it does, it runs
    the code we wrote previously. If not, we start our alternate filtering. A new
    variable of `query` is established, which takes the value of the input and converts
    it to lowercase.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它有一个值，它将进入我们原来的`if`语句。这将检查特定值是否与`isActive`匹配 - 如果匹配，则运行我们之前编写的代码。如果不匹配，则开始我们的备用过滤。建立一个名为`query`的新变量，它获取输入的值并转换为小写。
- en: The second variable is the data we are going to be filtering against. This uses
    the value of the select box, which is the field key on the person, to extract
    the value to filter with. This value is converted to a string (in the case of
    the date or balance), converted to lowercase and stored as the `field` variable.
    Lastly, we then use the `includes` function to check whether the field includes
    the query entered. If it does, we return `true` and the row is shown if; not,
    the row is hidden.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个变量是我们要进行过滤的数据。这使用选择框的值，即人员的字段键，提取要过滤的值。该值被转换为字符串（在日期或余额的情况下），转换为小写并存储为`field`变量。最后，我们使用`includes`函数来检查字段是否包含输入的查询。如果是，则返回`true`并显示行；否则，隐藏行。
- en: The next issue we can address is when filtering with numbers. It is not intuitive
    for the user to enter the exact balance of the user they are after — a much more
    natural way of searching is to find users with a balance under or over a certain
    amount, for example, `< 2000`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以解决的下一个问题是使用数字进行过滤时。对于用户来说，输入他们想要的用户的确切余额并不直观 - 更自然的搜索方式是找到余额低于或高于某个特定金额的用户，例如，`<
    2000`。
- en: The first step in doing this is to only apply this type of filtering when it
    is the `balance` field. We can approach this two ways – we can either check that
    the field name is `balance`, similar to how we check the `isActive` field, or
    we can check the type of data we are filtering on.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的第一步是只在`balance`字段上应用这种类型的过滤。我们可以有两种方法来处理这个问题 - 我们可以检查字段名是否为`balance`，类似于我们检查`isActive`字段的方式，或者我们可以检查我们正在过滤的数据的类型。
- en: Checking against the field name is simpler. We can do an `else if()`  in our
    method or even migrate to a `switch` statement for easier reading and expansion.
    The alternative of checking the field type, however, is more scalable. It means
    we can expand our dataset with more numeric fields without having to extend or
    change our code. It does mean, however, that there will be further `if` statements
    in our code.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 检查字段名更简单。我们可以在我们的方法中使用`else if()`，或者甚至迁移到`switch`语句以便更容易阅读和扩展。然而，检查字段类型的替代方法更具可扩展性。这意味着我们可以通过添加更多的数字字段来扩展我们的数据集，而无需扩展或更改我们的代码。然而，这也意味着我们的代码中将有进一步的`if`语句。
- en: 'What we will do first is alter our storing method, as we don''t want to necessarily
    lowercase the field or query:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是修改我们的存储方法，因为我们不想将字段或查询转换为小写：
- en: '[PRE41]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The next step is to establish the type of data in the field variable. This
    can be established by, once again, using the `typeof` operator. This can be used
    in an `if` statement, to check whether the type of field is a number:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是确定字段变量中的数据类型。这可以通过再次使用`typeof`运算符来确定。可以在`if`语句中使用它来检查字段的类型是否为数字：
- en: '[PRE42]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Once our check is complete, we can default back to our original query code.
    It will use this if the select option *is not* `isActive` and the data were are
    filtering on *is not* a number. If this is the case, then it will lowercase the
    field and see if it includes what has been written in the query box when converted
    to lowercase as before.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的检查完成，我们可以回到我们原来的查询代码。如果选择选项不是`isActive`，并且我们正在过滤的数据不是数字，它将使用这个代码。如果是这种情况，它将将字段转换为小写，并查看在转换为小写之前在查询框中输入的内容是否包含在内。
- en: The next stage is to actually compare our numbered data against what has been
    written in the query box. To do this, we are going to use the native JavaScript
    `eval` function.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 下一阶段是实际比较我们的数字数据与查询框中的内容。为此，我们将使用原生的JavaScript `eval`函数。
- en: 'The `eval` function can be a potentially dangerous function and should not
    be used in production code without some serious input sanitizing checks, plus,
    it is less performant than lengthier alternatives. It runs everything inside as
    native JavaScript and so can be open to abuse. However, as we are using this for
    a dummy application, with the focus being on Vue itself rather than creating a
    fully web-safe application, it is fine in this instance. You can read more about
    `eval` in 24 ways:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval`函数可能是一个潜在的危险函数，在没有一些严格的输入消毒检查的情况下不应在生产代码中使用，而且它的性能比较低。它会将所有内容作为原生JavaScript运行，因此可能会被滥用。然而，由于我们将其用于一个虚拟应用程序，重点是Vue本身而不是创建一个完全安全的Web应用程序，在这种情况下是可以接受的。您可以在24种方式中了解更多关于`eval`的信息：'
- en: '[PRE43]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This passes both the field and the query to the `eval()` function and passes
    the result (either `true` or `false`) to our `result` variable to determine the
    visibility of the row. The `eval` function literally evaluates the expression
    and determines if it is `true` or `false`. Here''s an example:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这将字段和查询都传递给`eval()`函数，并将结果（`true`或`false`）传递给我们的`result`变量，以确定行的可见性。`eval`函数会直接评估表达式，并确定其是否为`true`或`false`。以下是一个示例：
- en: '[PRE44]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In this example, the number `500` is our field, or in this specific example,
    `balance`. Anything that is after that is what is written by our user. Your filtering
    code is now ready to go. Try selecting the balance from the dropdown and filtering
    for users with a balance higher than `2000`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，数字`500`是我们的字段，或者在这个具体的例子中是`balance`。任何在此之后的内容都是由用户输入的。您的过滤代码现在已经准备就绪。尝试从下拉菜单中选择余额，并过滤出余额大于`2000`的用户。
- en: Before we move on, we need to add some error checking. If you have your JavaScript
    console open, you may have noticed an error when you typed the first greater or
    less than. This was because the `eval` function is unable to evaluate `X >` (where
    `X` is the balance). You may have also been tempted to type `*$2000*` with the
    currency and realized this doesn't work. This is because the currency is applied
    while rendering the view, whereas we are filtering the data before this is rendered.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要添加一些错误检查。如果你打开了JavaScript控制台，你可能会注意到在输入第一个大于或小于符号时出现了一个错误。这是因为`eval`函数无法评估`X
    >`（其中`X`是余额）。你可能也想输入`*$2000*`与货币一起使用，并意识到这不起作用。这是因为货币是在渲染视图时应用的，而我们是在渲染之前过滤数据。
- en: In order to combat these two errors, we must remove any currency symbols typed
    in the query and test our `eval` function before relying on it to return the results.
    Remove the currency symbol with the native JavaScript `replace()` function. If
    it changes, uses the currency symbol stored in the app, rather than hardcoding
    the currently used one.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这两个错误，我们必须删除查询中输入的任何货币符号，并在依赖它返回结果之前测试我们的`eval`函数。使用原生的JavaScript `replace()`函数来删除货币符号。如果它发生变化，使用应用程序中存储的货币符号，而不是硬编码当前使用的货币符号。
- en: '[PRE45]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We now need to test the `eval` function so it does not throw an error with
    every key pressed. To do this, we use a `try...catch` statement:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要测试`eval`函数，以便它在每次按键时不会抛出错误。为此，我们使用`try...catch`语句：
- en: '[PRE46]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'As we don''t want to output anything when an error is entered, we can leave
    the `catch` statement empty. We could put the `field.includes(query)` statement
    in here, so it falls back to the default functionality. Our full `filterRow()`
    method now looks like this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不希望在输入错误时输出任何内容，所以可以将`catch`语句留空。我们可以将`field.includes(query)`语句放在这里，这样它就会回退到默认功能。我们的完整的`filterRow()`方法现在看起来是这样的：
- en: '[PRE47]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Filtering our filters
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤我们的过滤器
- en: Now we have our filtering in place, we need to only show the radio buttons when
    the `isActive` option is selected in our dropdown. Using the knowledge we've learned,
    this should be relatively straightforward.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了过滤，我们只需要在下拉菜单中选择`isActive`选项时才显示单选按钮。根据我们所学的知识，这应该相对简单。
- en: 'Create a new method that checks the select box value and returns `true` when
    Active User is selected in our dropdown:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的方法，检查选择框的值，并在我们的下拉菜单中选择“Active User”时返回`true`：
- en: '[PRE48]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We can now use `v-show` for both the input and radio buttons, reversing the
    effect when on the query box:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在查询框上使用`v-show`，并在查询框上反转效果：
- en: '[PRE49]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Take note of the exclamation point before the method call on the input field.
    This means not, and effectively reverses the result of the function, for example
    not true is the same as false and vice versa.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意输入字段上方法调用之前的感叹号。这表示否定，并有效地颠倒了函数的结果，例如`not true`等同于`false`，反之亦然。
- en: 'To improve user experience, we can also check that the filtering is active
    at all before showing either of the inputs. This can be added by including a secondary
    check in our `v-show` attribute:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改进用户体验，我们还可以在显示任何输入之前检查过滤是否处于活动状态。这可以通过在我们的`v-show`属性中包含一个次要检查来实现：
- en: '[PRE50]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This now checks that `filterField` has a value and that the select box is not
    set to `isActive`. Make sure you add this to the radio buttons too.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这将检查`filterField`是否有值，并且选择框是否未设置为`isActive`。确保将此添加到单选按钮中。
- en: 'A further user experience enhancement would be to ensure all the users don''t
    disappear when the `isActive` option is chosen. This currently happens because
    the default is set to a string, which does not match with either the `true` or
    `false` values of the field. Before filtering in this field, we should check that
    the `filterUserState` variable is either `true` or `false`, that is a Boolean.
    We can do this by using `typeof` once more:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步改进用户体验的方法是，确保在选择`isActive`选项时，所有用户都不会消失。这是因为默认设置为字符串，与字段的`true`或`false`值不匹配。在对该字段进行过滤之前，我们应该检查`filterUserState`变量是否为`true`或`false`，即布尔值。我们可以再次使用`typeof`来实现这一点：
- en: '[PRE51]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: We are using a ternary operator to check that the result to filter on is `boolean`.
    If it is, then filter as we were; if it is not then simply show the row.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用三元运算符来检查要过滤的结果是否为布尔值。如果是，那么就像我们之前一样进行过滤；如果不是，则只显示该行。
- en: Changing CSS classes
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改CSS类
- en: As with any HTML attribute, Vue is able to manipulate CSS classes. As with everything
    in Vue, this can be done in a myriad of ways ranging from attributes on the object
    itself to utilizing methods. We'll start off adding a class if the user is active.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何HTML属性一样，Vue能够操作CSS类。与Vue中的其他所有内容一样，可以通过多种方式实现，从对象本身的属性到利用方法。我们将首先添加一个类，如果用户处于活动状态。
- en: Binding a CSS class is similar to other attributes. The value takes an object
    that can calculate logic from within the view or be abstracted out into our Vue
    instance. This all depends on the complexity of the operation.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定CSS类与其他属性类似。该值接受一个对象，可以在视图中计算逻辑或抽象到我们的Vue实例中。这完全取决于操作的复杂性。
- en: 'First, let''s add a class to the cell containing the `isActive` variable if
    the user is active:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果用户处于活动状态，让我们给包含`isActive`变量的单元格添加一个类：
- en: '[PRE52]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The class HTML attribute is first prepended by `v-bind:` to let Vue know it
    needs to process the attribute. The value is then an object, with the CSS class
    as the key and the condition as the value. This code toggles the `active` class
    on the table cell if the `person.isActive` variable equates to `true`. If we wanted
    to add an `inactive` class if the user was not active, we could add it to the
    object:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 类HTML属性首先由`v-bind:`前缀，以让Vue知道它需要处理该属性。然后，值是一个对象，CSS类作为键，条件作为值。此代码在表格单元格上切换`active`类，如果`person.isActive`变量等于`true`。如果我们想在用户不活动时添加一个`inactive`类，我们可以将其添加到对象中：
- en: '[PRE53]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Here's we've used the exclamation point again to reverse the status. If you
    run this app, you should find the CSS classes applied as expected.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们再次使用感叹号来反转状态。如果您运行此应用程序，您应该会发现CSS类按预期应用。
- en: 'If we''re just applying two classes based on one condition, a ternary `if`
    statement can be used inside of the class attribute:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只是根据一个条件应用两个类，可以在类属性内部使用三元`if`语句：
- en: '[PRE54]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Note the single quotes around the class names. Once again, however, logic has
    started to creep into our View and, should we wish to also use this class elsewhere,
    is not very scalable.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意类名周围的单引号。然而，逻辑又开始渗入我们的视图中，如果我们希望在其他地方也使用这个类，它就不太可扩展了。
- en: 'Create a new method on our Vue instance called `activeClass` and abstract the
    logic into that — not forgetting to pass the person object in:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Vue实例上创建一个名为`activeClass`的新方法，并将逻辑抽象到其中 - 不要忘记传递person对象：
- en: '[PRE55]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We can now call that method in our view:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在视图中调用该方法：
- en: '[PRE56]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: I appreciate this is quite a simple execution; let's try a slightly more complex
    one. We want to add a conditional class to the balance cell depending on the value.
    If their balance is under $2000, we will add an `error` class. If it is between
    $2000 and $3000, a `warning` class will be applied and if it is over $3000 a `success`
    class will be added.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这是一个相当简单的执行过程；让我们尝试一个稍微复杂一点的。我们想根据余额单元格的值添加一个条件类。如果他们的余额低于$2000，我们将添加一个`error`类。如果在$2000和$3000之间，将应用一个`warning`类，如果超过$3000，将添加一个`success`类。
- en: Along with the `error`, `warning` and `success` classes, a class of `increasing`
    will be added if the balance is over $500\. For example, a balance of $2,600 will
    get both the `warning`, and `increasing` classes, whereas $2,400 would only receive
    the `warning` class.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`error`、`warning`和`success`类之外，如果余额超过$500，还会添加一个`increasing`类。例如，$2,600的余额将同时获得`warning`和`increasing`类，而$2,400只会获得`warning`类。
- en: As this contains several bits of logic, we will create a use a method in our
    instance. Create a `balanceClass` method and bind it to the class HTML attribute
    of the cell containing the balance. To begin with, we'll add the `error`, `warning`
    and `success` classes.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这里包含了几个逻辑部分，我们将在实例中创建一个方法。创建一个`balanceClass`方法，并将其绑定到包含余额的单元格的类HTML属性上。首先，我们将添加`error`、`warning`和`success`类。
- en: '[PRE57]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'In the method, we need to access the `balance` property of the person passed
    in and return the name of the class we wish to add. For now, we''ll return a fixed
    result to verify that it''s working:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在该方法中，我们需要访问传入的person的`balance`属性，并返回我们希望添加的类的名称。现在，我们将返回一个固定的结果来验证它是否工作：
- en: '[PRE58]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We now need to evaluate our balance. As it''s already a number, comparing it
    against our criteria won''t involve any conversions:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要评估我们的余额。由于它已经是一个数字，与我们的条件进行比较不需要进行任何转换：
- en: '[PRE59]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In the preceding method, the class output gets set to `success` by default,
    as we only need to change the output if it is less than `3000`. The first `if`
    checks whether the balance is below our first threshold – if it does, it sets
    the output to `error`. If not, it tries the second condition, which is to check
    whether the balance is below `3000`. If successful, the class applied becomes
    `warning`. Lastly, it outputs the chosen class, which applies directly to the
    element.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述方法中，类输出默认设置为`success`，因为我们只需要在小于`3000`时更改输出。第一个`if`检查余额是否低于我们的第一个阈值-如果是，则将输出设置为`error`。如果不是，则尝试第二个条件，即检查余额是否低于`3000`。如果成功，则应用的类变为`warning`。最后，它输出所选的类，直接应用于元素。
- en: 'We now need to consider how we can do the `increasing` class. To get it to
    output alongside the existing `balanceLevel` class, we need to convert the output
    from a single variable to an array. To verify that this works, hardcode the extra
    class to the output:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要考虑如何使用`increasing`类。为了使其与现有的`balanceLevel`类一起输出，我们需要将输出从单个变量转换为数组。为了验证这是否有效，将额外的类硬编码到输出中：
- en: '[PRE60]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This adds the two classes to the element. Convert the string to a variable and
    set to `false` by default. Vue won't output anything for a `false` value passed
    in the array.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向元素添加两个类。将字符串转换为变量，并默认设置为`false`。Vue不会为传入数组的`false`值输出任何内容。
- en: 'To work out if we need the increasing class, we need to do some calculations
    on the balance. As we want the increasing class if the balance is above 500 no
    matter what range it is in, we need to round the number and compare:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定我们是否需要增加的类，我们需要对余额进行一些计算。因为我们希望如果余额超过500，无论在哪个范围内，都需要增加的类，所以我们需要四舍五入并进行比较：
- en: '[PRE61]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Initially, we set the `increasing` variable to `false` as a default. We also
    store a version of the balance divided by `1000`. The means our balances turn
    out to be 2.45643 instead of 2456.42\. From there, we compare the number after
    it has been rounded by JavaScript (For example 2.5 becomes 3, whereas 2.4 becomes
    2) to the number that has been forced to round up (example 2.1 becomes 3, along
    with 2.9).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我们将`increasing`变量默认设置为`false`。我们还存储了余额除以`1000`的版本。这意味着我们的余额变成了2.45643，而不是2456.42。从那里，我们将通过JavaScript将数字四舍五入后（例如2.5变成3，而2.4变成2）与强制四舍五入后的数字（例如2.1变成3，以及2.9）进行比较。
- en: 'If the number output is the same, the `increasing` variable is set to the string
    of the class we want to set. We can then pass this variable along with the `balanceLevel`
    variable out as an array. The full method now looks like the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输出的数字相同，则将`increasing`变量设置为我们想要设置的类的字符串。然后，我们可以将此变量与`balanceLevel`变量一起作为数组传递出去。完整的方法现在看起来如下：
- en: '[PRE62]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Filtering and custom classes
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 筛选和自定义类
- en: 'We now have a fully fledged user list/register that has filtering on selected
    fields and custom CSS classes depending on the criteria. To recap, this is what
    our view looks like now we have the filter in place:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个完整的用户列表/注册表，可以根据选定的字段进行筛选，并根据条件设置自定义CSS类。回顾一下，我们的视图现在是这样的：
- en: '[PRE63]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'And the JavaScript for our Vue app should look something like this:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们Vue应用的JavaScript应该如下所示：
- en: '[PRE64]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'With a small amount of CSS, our people filtering app now looks like the following:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通过少量的CSS，我们的人员筛选应用现在看起来如下：
- en: '![](img/00008.jpeg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at Vue HTML declarations, conditionally rendering
    our HTML and showing an alternative if required. We also put into practice what
    we learned about methods. Lastly, we built a filtering component for our table,
    allowing us to show active and inactive users, find users with specific names
    and emails, and filter out rows based on the balance.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Vue的HTML声明，根据需要有条件地渲染我们的HTML并显示替代内容。我们还实践了关于方法的知识。最后，我们为表格构建了一个过滤组件，允许我们显示活动和非活动用户，查找具有特定名称和电子邮件的用户，并根据余额过滤行。
- en: Now we've got to a good point in our app, it's a good opportunity to take a
    look at our code to see if it can be optimized in any way. By optimizations, I
    mean reducing repetition, making the code simpler if possible, and abstracting
    logic out into smaller, readable, and reusable chunks.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序已经达到了一个很好的点，这是一个很好的机会来检查我们的代码，看看是否可以进行任何优化。通过优化，我指的是减少重复，尽可能简化代码，并将逻辑抽象成更小、可读和可重用的部分。
- en: In [Chapter 3](part0051.html#1GKCM0-985bf4ae118d4f62b18ae64204cb251c), *Optimizing
    Our App and Using Components to Display Data*, we will optimize our code and look
    at Vue components as a way of separating out logic into separate segments and
    sections.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](part0051.html#1GKCM0-985bf4ae118d4f62b18ae64204cb251c)中，我们将优化我们的代码，并将Vue组件作为将逻辑分离到单独的段落和部分的一种方式。
