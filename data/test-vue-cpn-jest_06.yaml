- en: '*Chapter 6*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*'
- en: Test Methods and Mock Dependencies
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试方法和模拟依赖
- en: What should we test in methods? That's a question that we had when we started
    doing unit tests. Everything comes down to *testing what that method does and
    only that*. This means we need to *avoid calls to any dependency*, so we'll need
    to mock them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法中我们应该测试什么？这是我们开始进行单元测试时遇到的问题。一切归结为*测试该方法做了什么，只有那个*。这意味着我们需要*避免调用任何依赖项*，因此我们需要对它们进行模拟。
- en: 'Let''s add a `submit` event to the form in the `Form.vue` component that we
    created in the previous chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在上一章中创建的`Form.vue`组件中的表单中添加一个`submit`事件：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `.prevent` modifier is just a convenient way to call `event.preventDefault()`
    so that it doesn''t reload the page. Now, make some modifications to call an API,
    and then store the result by adding a `results` array to the data as well as an
    `onSubmit` method:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`.prevent`修饰符只是一种方便的方式来调用`event.preventDefault()`，以便它不会重新加载页面。现在，进行一些修改来调用API，然后通过向数据添加一个`results`数组和一个`onSubmit`方法来存储结果：'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the method is using `axios` to perform an HTTP call to the **posts** endpoint
    of `jsonplaceholder`, which is just a RESTful API for this kind of example. Additionally,
    with the `q` query parameter, we can search for posts using the `value` provided
    as a parameter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，该方法使用`axios`执行对`jsonplaceholder`的**posts**端点的HTTP调用，这只是这种示例的RESTful API。另外，通过`q`查询参数，我们可以使用提供的`value`参数搜索帖子。
- en: 'For testing the `onSubmit` method:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 用于测试`onSubmit`方法：
- en: We don't want to call `axios.get` actual method.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不希望调用`axios.get`实际方法。
- en: We want to check it is calling axios (but not the real one) and that it returns
    a `promise`.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望检查它是否调用了axios（但不是真正的axios），并且它返回一个`promise`。
- en: That `promise` callback should set `this.results` to the promised result.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该`promise`回调应将`this.results`设置为承诺的结果。
- en: This is probably one of the hardest things to test when you have external dependencies,
    plus those return promises that do things inside. What we need to do is to **mock
    the external dependencies**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有外部依赖项以及返回承诺并在其中执行操作时，这可能是最难测试的事情之一。我们需要做的是**模拟外部依赖项**。
- en: Mocking External Module Dependencies
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟外部模块依赖
- en: Jest provides a really great mocking system that allows you to mock everything
    in quite a convenient way. In fact, you don't need any extra libraries to do it.
    We have seen already `jest.spyOn` and `jest.fn` for spying and creating stub functions,
    although that's not enough for this case.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Jest提供了一个非常好的模拟系统，可以让您以非常方便的方式模拟所有内容。事实上，您不需要任何额外的库来做到这一点。我们已经看到了`jest.spyOn`和`jest.fn`用于监视和创建存根函数，尽管这对于这种情况还不够。
- en: 'Here, we need to mock the whole `axios` module. That''s where `jest.mock` comes
    into play. It allows us to easily mock module dependencies by writing at the top
    of your file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要模拟整个`axios`模块。这就是`jest.mock`发挥作用的地方。它允许我们通过在文件顶部编写来轻松模拟模块依赖项：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You must know that `jest.mock` *is hoisted*, which means it will be placed
    at the top:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须知道`jest.mock`*是被提升的*，这意味着它将被放置在顶部：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So, the preceding code is equivalent to this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，前面的代码等效于这个：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At the time of writing, I still haven't found much information about how to
    do in Jest what we're going to do here on the internet. Luckily, you don't have
    to go through the same struggle.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，我仍然没有在互联网上找到有关如何在Jest中执行我们将在这里执行的操作的信息。幸运的是，您不必经历同样的挣扎。
- en: 'Let''s write the mock for `axios` at the top of the `Form.test.js` test file
    and the corresponding test case:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`Form.test.js`测试文件的顶部编写`axios`的模拟和相应的测试用例：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is great. We''re indeed mocking `axios`, so the original axios is not
    called and neither is any HTTP called. And we''re even checking, by using `toBeCalledWith`,
    that it''s been called with the correct parameters. However, we''re still missing
    something: *we''re not checking whether it returns a* `promise`.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒。我们确实在模拟`axios`，所以原始的axios没有被调用，也没有任何HTTP被调用。而且我们甚至通过使用`toBeCalledWith`来检查它是否被正确地调用了。然而，我们仍然缺少一些东西：*我们没有检查它是否返回了*
    `promise`。
- en: 'First, we need to make our mocked `axios.get` method to return a `promise`.
    `jest.fn` accepts a factory function as a parameter, so we can use it to define
    its implementation:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要让我们模拟的`axios.get`方法返回一个`promise`。`jest.fn`接受一个工厂函数作为参数，所以我们可以用它来定义它的实现：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, we still cannot access the `promise` because we''re not returning
    it. In testing, it is a good practice to return something from a function when
    possible, as it makes testing much easier. So, let''s now do this in the `onSubmit`
    method of the `Form.vue` component:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们仍然无法访问`promise`，因为我们没有返回它。在测试中，尽可能从函数中返回一些东西是一个好习惯，因为这样测试会更容易。所以，现在让我们在`Form.vue`组件的`onSubmit`方法中做这个：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, we can use the very clean ES2017 `async/await` syntax in the test to
    check the promise result:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在测试中使用非常干净的ES2017 `async/await`语法来检查promise的结果：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, you can see that we don't just check the promised result, but also that
    the `results` internal state of the component is updated, as expected, by doing
    `expect(cmp.vm.results).toEqual([3])`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到我们不仅检查了promise的结果，还检查了组件的`results`内部状态是否按预期更新，通过`expect(cmp.vm.results).toEqual([3])`。
- en: Keeping Mocks Externalized
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持模拟外部化
- en: Jest allows us to have all our mocks separated into their own JavaScript file
    by placing them under a `__mocks__` folder and keeping the tests as clean as possible.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Jest允许我们将所有的模拟分开放在自己的JavaScript文件中，将它们放在`__mocks__`文件夹下，并尽可能保持测试的干净。
- en: 'So, we can take the `jest.mock...` block from the top of the `Form.test.js`
    file out to its own file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将`Form.test.js`文件顶部的`jest.mock...`块移到自己的文件中：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Just like this, and with no extra effort, Jest automatically applies the mock
    in all our tests so that we don't have to do anything extra, or manually mock
    it in every test. Notice that the module name must match the filename. If you
    run the tests again, they should still pass.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这样，而且不需要额外的努力，Jest会自动在所有的测试中应用模拟，这样我们就不必做任何额外的事情，或者在每个测试中手动模拟它。请注意，模块名称必须与文件名匹配。如果再次运行测试，它们应该仍然通过。
- en: 'Keep in mind that the modules registry and the mocks state are kept as they
    are, so, if you write another test afterward, you may get undesirable results:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，模块注册表和模拟状态保持不变，因此，如果之后再编写另一个测试，可能会得到不良的结果：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The second test should fail, but it doesn't. That's because `axios.get` was
    called on the test before.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个测试应该失败，但它没有。那是因为在测试之前调用了`axios.get`。
- en: 'For that reason, it''s good practice to clean the module registry and the mocks,
    since they''re manipulated by Jest in order to make mocking happen. For that,
    you can add in your `beforeEach`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，清理模块注册表和模拟是一个好习惯，因为它们是由Jest操纵的，以便进行模拟。为此，你可以在`beforeEach`中添加：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will ensure that each test starts with clean mocks and modules, as it should
    be in unit testing.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保每个测试都从干净的模拟和模块开始，这在单元测试中应该是这样的。
- en: Wrapping Up
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The Jest mocking feature, along with snapshot testing, are the two things I
    love most about Jest. That's because they make what is usually quite hard to test
    very easy, allowing you to focus on writing faster and better-isolated tests and
    keeping your code base bulletproof.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Jest的模拟功能，以及快照测试，是我最喜欢的两个功能。因为它们使通常很难测试的东西变得非常容易，让你可以专注于编写更快速和更好隔离的测试，保持你的代码库无懈可击。
- en: You can find all the code for this chapter on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/Test-State-Computed-Properties-and-Methods-in-Vue-js-Components-with-Jest](https://github.com/alexjoverm/vue-testing-series/tree/Test-State-Computed-Properties-and-Methods-in-Vue-js-Components-with-Jest)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在**GitHub**上找到本章的所有代码（[https://github.com/alexjoverm/vue-testing-series/tree/Test-State-Computed-Properties-and-Methods-in-Vue-js-Components-with-Jest](https://github.com/alexjoverm/vue-testing-series/tree/Test-State-Computed-Properties-and-Methods-in-Vue-js-Components-with-Jest)）。
