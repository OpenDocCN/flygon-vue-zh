- en: Input Masks with v-mask
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用v-mask进行输入掩码
- en: One of the key aspects of any successful form is clarity. If the user finds
    the form easy to use and easy to understand, they are more likely to fill it in
    and submit it. In this chapter, we are going to be looking at input masking. You
    will learn how to quickly and easily apply masks to your form inputs, and to configure
    them to your needs with real-life examples, such as telephone numbers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任何成功表单的关键方面之一是清晰度。如果用户发现表单易于使用和理解，他们更有可能填写并提交表单。在本章中，我们将研究输入掩码。您将学习如何快速轻松地将掩码应用于表单输入，并使用真实示例（如电话号码）根据您的需求进行配置。
- en: What exactly are input masks? They are pre-defined structures that display the
    data for an input. For example, if you were going to mask a telephone input, you'd
    probably want it to display as **(123) 234-5555**, instead of simply, **1232345555**.
    You can clearly see that the first example is not only easier to read but it also
    conveys meaning about what the field is trying to accomplish.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 究竟什么是输入掩码？它们是预定义的结构，用于显示输入的数据。例如，如果您要对电话输入进行掩码处理，您可能希望它显示为**(123) 234-5555**，而不仅仅是**1232345555**。您可以清楚地看到，第一个示例不仅更容易阅读，而且还传达了字段试图实现的含义。
- en: Input masks are a nice feature to take your UX to another level, and they are
    very easy to implement, thanks to open source libraries such as `v-mask`. The
    GitHub repository page can be found at the following link: [https://github.com/probil/v-mask](https://github.com/probil/v-mask).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 输入掩码是一个很好的功能，可以将您的UX提升到另一个水平，而且非常容易实现，这要归功于开源库，如`v-mask`。GitHub存储库页面可以在以下链接找到：[https://github.com/probil/v-mask](https://github.com/probil/v-mask)。
- en: In this chapter, we will take a quick look at implementing this library on top
    of our existing project.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将快速了解如何在现有项目的基础上实现此库。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing the `v-mask` library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`v-mask`库
- en: Exploring the `v-mask` directive
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索`v-mask`指令
- en: Enhancing our custom inputs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强我们的自定义输入
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code for this chapter can be found in the following GitHub repository:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在以下GitHub存储库中找到：
- en: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter04](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter04).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter04](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter04)。'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/31jFmyH](http://bit.ly/31jFmyH)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/31jFmyH](http://bit.ly/31jFmyH)'
- en: Installing the v-mask library
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装v-mask库
- en: 'Let''s get started with the installation of the `v-mask` library. In order
    for our project to use what it has to offer, we first need to add it to our project
    dependencies. Follow these steps in order to do this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始安装`v-mask`库。为了让我们的项目使用它所提供的功能，我们首先需要将其添加到我们的项目依赖项中。按照以下步骤执行此操作：
- en: 'Open up your Terminal and type in the following command to add the library
    to our dependencies:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并输入以下命令将库添加到我们的依赖项中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We need to add it to Vue as a plugin, so head to `main.js`, and let''s both
    import it and let Vue know that we want to register it as a plugin for all of
    our apps. Add the following code, after the `import App` line:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将其添加到Vue作为插件，因此转到`main.js`，让我们导入它并让Vue知道我们要将其注册为所有应用程序的插件。在`import App`行之后添加以下代码：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we have registered our plugin, we have access to a new directive:
    `v-mask`. We can add this new directive directly onto our `<input>` elements,
    and the library will handle the masking behind the scenes by reading the user''s
    input, and adjusting the display of the field.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经注册了我们的插件，我们可以访问一个新的指令：`v-mask`。我们可以直接将这个新指令添加到我们的`<input>`元素上，该库将通过读取用户的输入并调整字段的显示来处理幕后的掩码。
- en: 'Let''s try this on a regular input first, then we will add some props to our
    project''s component:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们在常规输入上尝试一下，然后我们将向我们项目的组件添加一些属性：
- en: 'Go to `App.vue`, and create a new `<input>` element after the email input:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`App.vue`，在电子邮件输入后创建一个新的`<input>`元素：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we were to type a phone number in this field as it is, we would get the default
    input behavior. Anything goes. So, let's apply a `telephone` number mask to it.
    Our new `v-mask` library has a requirement that every field that we apply it to
    needs to be v-modeled, so let's get that done first.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在此字段中输入电话号码，我们将获得默认的输入行为。什么都可以。因此，让我们对其应用`telephone`号码掩码。我们的新`v-mask`库要求我们将其应用到的每个字段都需要进行v模型化，因此让我们首先完成这项工作。
- en: 'Add a new `telephone` prop to our `data()` inside of the `form` object:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`form`对象的`data()`中添加一个新的`telephone`属性：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, go back to our new `<input>` element and apply `v-model`. We are also
    going to now add the `v-mask` directive, shown as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到我们的新`<input>`元素并应用`v-model`。我们现在还将添加`v-mask`指令，如下所示：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Go back to your browser and try the input once again. As you type, you will
    see that you are actually getting it nicely formatted to what we would expect
    for a telephone number.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 返回浏览器，再次尝试输入。当您输入时，您将看到它被很好地格式化为我们期望的电话号码。
- en: In five simple steps, we have added input masking to one of our form fields.
    In the next section, we will go into more depth about what the `v-mask` directive
    does for us.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在五个简单的步骤中，我们已经为我们的一个表单字段添加了输入掩码。在下一节中，我们将更深入地了解`v-mask`指令为我们做了什么。
- en: Exploring the v-mask directive
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索v-mask指令
- en: When we added the `v-mask` library to our project, and added the plugin within
    `main.js`, the library created a new directive for us, `v-mask`. What exactly
    is a directive, though? We know it looks like an HTML attribute, but what else?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`v-mask`库添加到我们的项目中，并在`main.js`中添加了插件时，该库为我们创建了一个新的指令`v-mask`。但是，指令到底是什么？我们知道它看起来像HTML属性，但还有什么？
- en: 'A directive can be defined as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 指令可以定义如下：
- en: <q>"Directives are special attributes with the `v-` prefix. Directive attribute
    values are expected to be a *single JavaScript expression* (with the exception
    of `v-for […]`). A directive's job is to reactively apply side effects to the
    DOM, when the value of its expression changes". - Official Vue documentation.</q>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: “指令是带有`v-`前缀的特殊属性。指令属性值预期是*单个JavaScript表达式*（除了`v-for […]`之外）。指令的作用是在其表达式的值发生变化时，对DOM应用响应式的副作用。”-
    官方Vue文档。
- en: Okay, so it looks like we have a special attribute that can modify the element.
    That sounds exactly like what we saw happen when we applied to the input element.
    But, how does the actual expression or value that we are putting into this directive
    work?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，看起来我们有一个特殊的属性可以修改元素。这听起来就像我们在应用到输入元素时看到的情况。但是，我们放入此指令的实际表达式或值是如何工作的呢？
- en: We know from the example that we are passing in a string, and you can see that
    inside the double quotes that make up the `v-mask=""` attribute, we are setting
    a new pair of single quotes (`'`). This means that the expression inside this
    attribute is JavaScript, and that we are passing it a string value.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从示例中知道我们正在传递一个字符串，并且您可以看到在组成`v-mask=""`属性的双引号内，我们设置了一对新的单引号（`'`）。这意味着此属性内的表达式是JavaScript，并且我们正在传递给它一个字符串值。
- en: 'From looking at the `v-mask` library documentation, we know that we have a
    few *special* placeholder characters that we can use inside our masks. The table
    for those is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从查看`v-mask`库文档，我们知道我们有一些*特殊*的占位符字符，可以在我们的掩码中使用。这些特殊字符如下表所示：
- en: '| `#` | Number (0-9) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `#` | 数字（0-9） |'
- en: '| `A` | Letter in any case (a-z, A-Z) |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `A` | 任何大小写字母（a-z，A-Z） |'
- en: '| `N` | Number or letter |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `N` | 数字或字母 |'
- en: '| `X` | Any symbol |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `X` | 任何符号 |'
- en: '| `?` | Optional (next character) |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `?` | 可选的（下一个字符）|'
- en: 'Take for example a mask that will display the time of the day; you could define
    it as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以显示一天中的时间为例；您可以将其定义如下：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This means that this input will take two numbers, from 0 to 9 (`##`), followed
    by a `:` character, followed by another two numbers (`##`).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着此输入将接受两个数字，从0到9（`##`），后跟一个`:`字符，然后是另外两个数字（`##`）。
- en: Anything that does not match this pattern will be ignored by the input.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 任何不符合此模式的内容都将被输入忽略。
- en: '`v-mask` is a very powerful library that allows us to customize exactly how
    we want our input to be displayed, by combining these simple rules. In the next
    section, we are going to modify our custom inputs, in order to be able to leverage
    the power of the input masks.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-mask`是一个非常强大的库，它允许我们通过组合这些简单的规则来自定义我们希望输入如何显示。在下一节中，我们将修改我们的自定义输入，以便能够利用输入掩码的功能。'
- en: Enhancing our custom inputs
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强我们的自定义输入
- en: We have put in a lot of work to create our awesome custom `BaseInput`, so we
    definitely want to keep using it!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经付出了很多工作来创建我们的令人敬畏的自定义`BaseInput`，所以我们肯定希望继续使用它！
- en: 'Follow these steps in order to modify `BaseInput` and to allow for input masking:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤修改`BaseInput`并允许输入掩码：
- en: 'Go back to `App.vue` and switch the `<input>` element for a `<BaseInput>` component:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`App.vue`并将`<input>`元素切换为`<BaseInput>`组件：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's go into `BaseInput.vue` now and create a new prop; we will call it `mask`,
    and it will default to an empty string. It is important that we default it to
    an empty string, or else the directive will try to match it, and we won't be able
    to type into the fields if they don't have a declared mask!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进入`BaseInput.vue`并创建一个新的prop；我们将称其为`mask`，并将其默认为一个空字符串。重要的是将其默认为一个空字符串，否则指令将尝试匹配它，如果没有声明掩码，我们将无法在字段中输入！
- en: 'Add it to your `props` object:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其添加到您的`props`对象中：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, go back to `App.vue` and update our telephone `BaseInput` to use the `mask`
    attribute:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到`App.vue`并更新我们的电话`BaseInput`以使用`mask`属性：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: All done! Return to your browser, and add some numbers in the field and you
    should have a nice-looking telephone mask working with your custom component!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 全部完成！返回到您的浏览器，并在字段中添加一些数字，您应该可以看到一个漂亮的电话掩码与您的自定义组件一起工作！
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to leverage the power of the `v-mask` library
    in order to apply input masking to our forms. Input masking is a powerful, yet
    easy way to grant our users a better experience, and it should not be overlooked
    when building even the simplest forms!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学会了如何利用`v-mask`库的强大功能来对我们的表单应用输入掩码。输入掩码是一种强大而简单的方式，可以为用户提供更好的体验，在构建甚至是最简单的表单时，不应忽视它！
- en: 'In the next chapter, we are going to take it up a notch and look at form validation
    with a powerful library: `Vuelidate`!'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步学习并查看如何使用强大的库`Vuelidate`进行表单验证！
