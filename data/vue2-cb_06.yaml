- en: Single Page Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页应用程序
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下内容：
- en: Creating an SPA with vue-router
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用vue-router创建SPA
- en: Fetching data before switching route
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在切换路由之前获取数据
- en: Using named dynamic routes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命名动态路由
- en: Having more than one router-view in your page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面中使用多个router-view
- en: Composing your routes hierarchically
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按层次组织路由
- en: Using route aliases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用路由别名
- en: Adding transitions between your routes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在路由之间添加过渡效果
- en: Managing errors for your routes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理路由错误
- en: Adding a progress bar to load pages
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在加载页面时添加进度条
- en: How to redirect to another route
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何重定向到另一个路由
- en: Saving scrolling position when hitting back
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在返回时保存滚动位置
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Many modern applications are based on the **SPA** or **Single Page Application**
     model. From the users perspective, this means that the whole website looks similar
    to an application in a single page.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代应用程序都基于SPA（单页应用程序）模型。从用户的角度来看，这意味着整个网站在单个页面上看起来类似于一个应用程序。
- en: This is good because, if done correctly, it enhances the user experience, mainly
    reducing waiting times, because there are no new pages to load--the whole website
    is on a single page. This is how Facebook, Medium, Google, and many other websites
    work.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是好的，因为如果做得正确，它可以增强用户体验，主要是减少等待时间，因为没有新页面需要加载-整个网站都在一个页面上。这就是Facebook、Medium、Google和许多其他网站的工作方式。
- en: URLs don't point to HTML pages anymore, but to particular states of your application
    (that most often look like different pages). In practice, on a server, assuming
    that your application is inside the `index.html`  page, this is implemented by
    redirecting the user that is requesting ,say, about me to `index.html` .
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: URL不再指向HTML页面，而是指向应用程序的特定状态（通常看起来像不同的页面）。在实践中，在服务器上，假设您的应用程序位于`index.html`页面中，这是通过将请求“关于我”的用户重定向到`index.html`来实现的。
- en: The latter page will take the suffix of the URL and will interpret it as a **route**
    , which in turn will create a page-like component with biographical information.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 后者页面将采用URL的后缀，并将其解释为**路由**，而路由将创建一个类似页面的组件，其中包含个人简介信息。
- en: Creating an SPA with vue-router
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vue-router创建SPA
- en: Vue.js implements the SPA pattern through its core plugin, vue-router. To vue-router,
    every route URL corresponds to a component. This means that we will tell vue-router
    how to behave when the user goes to a particular URL in terms of its component.
    In other words, every component in this new system is a page in the old system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js通过其核心插件vue-router实现了SPA模式。对于vue-router，每个路由URL对应一个组件。这意味着我们将告诉vue-router当用户访问特定URL时如何行为，以其组件为基础。换句话说，在这个新系统中，每个组件都是旧系统中的一个页面。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will only need to install vue-router and have some knowledge
    about Vue components.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您只需要安装vue-router并对Vue组件有一些了解。
- en: To install vue-router, follow the instructions at  [https://router.vuejs.org/en/installation.html](https://router.vuejs.org/en/installation.html)
    .
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装vue-router，请按照以下说明操作：[https://router.vuejs.org/en/installation.html](https://router.vuejs.org/en/installation.html)。
- en: If you are using JSFiddle to follow along, you can add a link similar to [https://unpkg.com/vue-router/dist/vue-router.js](https://unpkg.com/vue-router/dist/vue-router.js)
    .
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用JSFiddle进行跟随，可以添加类似于[https://unpkg.com/vue-router/dist/vue-router.js](https://unpkg.com/vue-router/dist/vue-router.js)的链接。
- en: How to do it…
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: We are preparing a modern website for a restaurant and we will use the SPA pattern.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在为一家餐厅准备一个现代化的网站，并将使用SPA模式。
- en: 'The website will consist of three pages: a home page, the restaurant menu,
    and the bar menu.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该网站将包括三个页面：主页、餐厅菜单和酒吧菜单。
- en: 'The whole HTML code will be like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 整个HTML代码将如下所示：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `<router-view>` component is the entry point for vue-router. It's where
    the components are displayed as pages.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`<router-view>`组件是vue-router的入口点。它是组件显示为页面的地方。'
- en: 'The list elements will become the link. For now, they are only list elements;
    to turn them into links, we can use two different syntaxes. Wrap the first link
    as in the following line:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列表元素将变成链接。目前，它们只是列表元素；要将它们转换为链接，我们可以使用两种不同的语法。将第一个链接包装在以下行中：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another example is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例如下：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Another syntax we can use is the following (for the Bar link):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的另一种语法是以下内容（用于Bar链接）：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This, more verbose but more explicit, syntax can be used to bind a custom event
    to a particular routing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种更冗长但更明确的语法可以用于将自定义事件绑定到特定的路由。
- en: 'To instruct Vue that we want to use the vue-router plugin, write the following
    in the JavaScript:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉Vue我们要使用vue-router插件，请在JavaScript中写入以下内容：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The part of three pages we listed at the beginning will be played by these
    three dummy components (add them to the JavaScript):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在开始时列出的三个页面的部分将由这三个虚拟组件扮演（将它们添加到JavaScript中）：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, you can finally create the router. The code for it is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您终于可以创建路由器了。其代码如下：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This router doesn''t do much; we have to add routes (which correspond to URLs)
    and their associated components:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个路由器没有做太多事情；我们必须添加路由（对应于URL）及其关联的组件：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now our application is almost complete; we only need to declare a simple `Vue`
    instance:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序几乎完成了；我们只需要声明一个简单的`Vue`实例：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Our application will now work; before launching it, add this CSS rule to have
    slightly better feedback:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在可以工作了；在启动之前，添加此CSS规则以获得稍微更好的反馈：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you open your app and click on the Bar link, you should see something
    similar to the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开应用程序并点击Bar链接时，您应该看到类似以下屏幕截图的内容：
- en: '![](img/Image00116.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00116.jpg)'
- en: How it works…
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first thing your program does is to register vue-router as a plugin. The
    vue-router, in turn, registers the routes (which are parts of URLs) and connects
    components to each of them.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您的程序首先要做的是将vue-router注册为插件。vue-router反过来注册路由（它们是URL的一部分）并将组件连接到每个路由。
- en: When we visit the application for the first time, the URL on the browser (you
    won't be able to see it changing inside JSFiddle because it is inside an iframe)
    will end with  `index.html/#/` . Everything after the hash symbol is a route for
    the vue-router. In this case, it is only a slash (`/` ) and so it matches the
    first home route.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们首次访问应用程序时，浏览器上的URL（您无法在JSFiddle中看到它在更改，因为它在iframe中）将以`index.html/#/`结尾。井号后面的所有内容都是vue-router的路由。在这种情况下，它只是一个斜杠（`/`），因此它与第一个主页路由匹配。
- en: When we click on the links, the content of the `<router-view>` changes according
    to the component we associated with that route.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击链接时，`<router-view>`的内容会根据我们与该路由关联的组件而更改。
- en: There's more…
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The astute reader will certainly find what can be interpreted as a bug--we added
    a couple of CSS styles before running the application. The  `.router-link-active`
    class is automatically injected in the `<router-link>` component whenever the
    page corresponds to the link actually pointed to.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 敏锐的读者肯定会发现可以解释为错误的问题-在运行应用程序之前，我们添加了一些CSS样式。`.router-link-active`类会在`<router-link>`组件中自动注入，每当页面对应于实际指向的链接时。
- en: When we click on Menu and Bar , the background color changes but it seems that
    it remains stuck to be selected for the Home  link. This is because the matching
    performed by the `<router-link>` component is not **exact** . In other words, 
    `/bar` and `/menu` contain the `/` string and, for this reason, `/` is always
    matched.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击“菜单”和“栏目”时，背景颜色会发生变化，但似乎仍然会停留在“主页”链接上。这是因为`<router-link>`组件执行的匹配不是**精确**的。换句话说，`/bar`和`/menu`包含`/`字符串，因此`/`总是匹配的。
- en: 'A quick fix for this is to add the attribute exactly the same as  the first
    `<router-link>` :'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一个快速修复的方法是添加与第一个`<router-link>`完全相同的属性：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, the `Home` link is highlighted only when the route exactly matches the
    home page link.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只有当路由完全匹配主页链接时，“主页”链接才会被突出显示。
- en: 'Another thing to note is the rule itself:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意的一点是规则本身：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Why do we match two different things? It depends on how you wrote the router
    link.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们要匹配两个不同的东西？这取决于你如何编写路由链接。
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code will be translated in the following DOM portion:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将被翻译为以下DOM部分：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'While:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 而：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Becomes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 变成：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note how in the first case, the class is applied to the child anchor element;
    in the second case, it is applied to the parent element.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在第一种情况下，类被应用于子锚点元素；在第二种情况下，它被应用于父元素。
- en: Fetching data before switching route
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在切换路由之前获取数据
- en: In the previous version of Vue, we had a dedicated method to fetch data from
    the Internet before changing the route. With Vue 2, we have a more general method
    that will take care of this and possibly other things before switching route.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue的早期版本中，我们有一个专门的方法来从互联网上获取数据，然后再切换路由。在Vue 2中，我们有一个更通用的方法来处理这个问题，以及在切换路由之前可能需要处理的其他事情。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you are expected to already know the basics of vue-router
    and how to make AJAX requests (more on this in the last chapter).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个示例，您需要已经了解vue-router的基础知识以及如何进行AJAX请求（在最后一章中会详细介绍）。
- en: How to do it…
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We will write a simple web portfolio composed of two pages: a home page and
    an about me page.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个由两个页面组成的简单网页作品集：一个主页和一个关于我页面。
- en: For this recipe, we will need to add Axios as a dependency.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个示例，我们需要将Axios添加为依赖项。
- en: 'The basic layout is clear from the following HTML code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 基本布局可以从以下HTML代码中清楚地看出：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the JavaScript, you can start building your `AboutMe` component:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，您可以开始构建您的`AboutMe`组件：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It will display only a name and a telephone number. Let''s declare the two
    variables in the `data` option of the component, as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 它只显示一个姓名和一个电话号码。让我们在组件的`data`选项中声明这两个变量，如下所示：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The vue-router, before actually loading the component onto the scene, will
    look for an option in our object, called `beforeRouteEnter` ; we will use this
    to load the name and phone from a server. The server we are using will provide
    fake data just for the purpose of displaying something, which is as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际加载组件到场景之前，vue-router将在我们的对象中查找一个名为`beforeRouteEnter`的选项；我们将使用它来从服务器加载姓名和电话号码。我们使用的服务器将提供一些虚假数据，仅用于显示，如下所示：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For the other component, the home page, we will just write a small component
    as a placeholder:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于另一个组件，主页，我们只需编写一个小组件作为占位符：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next thing is that you have to register the `router` and its `paths` :'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要注册`router`及其`paths`：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Also, of course, you have to register a `Vue` root instance, which is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您还需要注册一个`Vue`根实例，如下所示：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When you launch your application and click on the About Me  link, you should
    see something similar to this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动应用程序并点击“关于我”链接时，您应该看到类似于以下内容的东西：
- en: '![](img/Image00117.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00117.jpg)'
- en: You will note that there is no page reload when you click on the link, but it
    still takes quite some time to display the bio. This is because it is fetching
    the data from the Internet.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当您点击链接时，页面不会重新加载，但显示个人简介仍然需要一些时间。这是因为它正在从互联网获取数据。
- en: How it works…
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理如下：
- en: 'The `beforeRouteEnter` hook takes three parameters:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`beforeRouteEnter`钩子函数接受三个参数：'
- en: '`to` : This is a `Route` object that represents the route requested by the
    user.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to`：这是一个表示用户请求的路由的`Route`对象。'
- en: 'from:  This is also a Route object that represents the current route. This
    is the route the user will be kept at in case of errors.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: from：这也是一个表示当前路由的`Route`对象。在出现错误时，用户将保留在该路由上。
- en: '`next` : This is a function we can use when we are ready to go on with the
    switching of the route. Calling this function with false will prevent the route
    from being changed, and it is useful in case of errors.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next`：这是一个函数，当我们准备继续切换路由时可以使用它。如果使用false调用此函数，将阻止路由的更改，在出现错误时非常有用。'
- en: When the preceding functions are called, we made a call with Axios to a web
    service that provided a string for a name and a string for a phone number.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用上述函数时，我们使用Axios调用了一个Web服务，该服务提供了一个名称字符串和一个电话号码字符串。
- en: When we are inside this hook, it's important to remember that we don't have
    access to this . It's because this hook runs before the component is actually
    instantiated, so there is no `this` to refer to.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在此钩子函数内部时，重要的是要记住我们无法访问`this`。这是因为此钩子函数在组件实际实例化之前运行，因此没有`this`可供引用。
- en: 'When the server responds, we are inside the `then` function and want to assign
    the name and phone returned from the server but, as said, we don''t have access
    to this . The next function receives a reference to our component as an argument.
    We use this to set the variables to the received value:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器响应时，我们在`then`函数内部，并且希望将服务器返回的名称和电话赋值给变量，但是正如前面所说，我们无法访问`this`。next函数接收到我们的组件的引用作为参数。我们使用它来将变量设置为接收到的值：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Using named dynamic routes
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命名动态路由
- en: Registering all the routes by hand can be time consuming and, when the routes
    are not known in advance, it is impossible. vue-router lets you register routes
    with an argument so that you can have links for all the objects in a database
    and cover other use-cases where the user chooses a route, following some pattern
    that will result in too many routes to be registered by hand.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 手动注册所有路由可能会耗费时间，并且当路由事先未知时，这是不可能的。vue-router允许您使用参数注册路由，以便您可以为数据库中的所有对象创建链接，并覆盖其他用户选择路由的用例，遵循某种模式，这将导致需要手动注册太多的路由。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Except for the basics on vue-router (refer to the *Creating an SPA with vue-router*
     recipe), you won't need any additional information to complete this recipe.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 除了vue-router的基础知识（参考“使用vue-router创建单页应用程序”配方），您不需要任何其他信息来完成此配方。
- en: How to do it…
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤如下：
- en: We will open an online restaurant with ten different dishes. We will create
    a route for every dish.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开设一个在线餐厅，提供十种不同的菜肴。我们将为每道菜创建一个路由。
- en: 'The HTML layout of our website is the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们网站的HTML布局如下：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will create 11 links, one for the home page and ten for the dishes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建11个链接，一个用于主页，十个用于菜肴。
- en: 'After registering the `VueRouter` in the JavaScript part, the code is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript部分注册`VueRouter`之后，代码如下：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create two components; one will be a placeholder for the home page:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 创建两个组件；一个将作为主页的占位符：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The other routes will be connected to a `Menu` component:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 其他路由将连接到一个`Menu`组件：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding component, we refer to the global router object with `$route`
    , and we take the `id` parameter from the URL. `Lorempixel.com` is a website that
    provides sample images. We are connecting a different image for every `id` .
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的组件中，我们使用`$route`引用全局路由对象，并从URL中获取`id`参数。`Lorempixel.com`是一个提供示例图片的网站。我们为每个`id`连接不同的图片。
- en: 'Finally, create the router itself using the following code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下代码创建路由本身：
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can see that the path for the menu contains `/:id` , which is a placeholder
    for the `id` parameter that will appear in the URL.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到菜单的路径包含`/:id`，这是一个占位符，用于表示URL中的`id`参数。
- en: 'At last, write a root `Vue` instance:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编写一个根`Vue`实例：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can launch the application now and should be able to see all the menu items.
    Clicking on any one of them should order a different dish:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以启动应用程序，应该能够看到所有的菜单项。点击其中任何一个应该会点菜：
- en: '![](img/Image00118.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00118.jpg)'
- en: How it works…
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: There are two main parts of the code that contribute to creating the routes
    for the different dishes.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中有两个主要部分贡献于创建不同菜品的路由。
- en: 'First, we registered a generic route using the colon syntax and assigned a
    name to it, which is as follows code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用冒号语法注册了一个通用路由，并为其指定了一个名称，代码如下：
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This means that we can have a URL that ends in `/menu/82` , and the `Menu`
    component will be displayed with the `$route.params.id` variable set to `82` .
    So, the following line should be changed as per the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以有一个以`/menu/82`结尾的URL，`Menu`组件将显示，并且`$route.params.id`变量将设置为`82`。所以，以下行应该根据以下内容进行更改：
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The preceding line will be replaced by the following line in the rendered DOM:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染的DOM中，上述行将被以下行替换：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Never mind the fact that there is no such image in real life.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在现实生活中寻找这样的图片。
- en: 'Note that we also gave a name to this route. This is not strictly necessary,
    but it enabled us to write the second main part of the code, as shown:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还为此路由指定了一个名称。这并不是必需的，但它使我们能够编写代码的第二个主要部分，如下所示：
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Instead of writing a string, we can pass an object to the `to` prop and specify
    the `params` . In our case, the `param` is given by the `v-for` wrapping. This
    means that, for example, at the fourth cycle of the `v-for` :'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以传递一个对象给`to`属性，而不是写一个字符串，并指定`params`。在我们的例子中，参数由`v-for`包装给出。这意味着，例如，在`v-for`的第四个循环中：
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will result in the DOM as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致DOM如下所示：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Having more than one router-view in your page
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在页面中有多个`<router-view>`时
- en: Having multiple `<router-view>` enables you to have pages that can be organized
    with more complex layouts. For example, you can have a sidebar and the main view.
    This recipe is all about that.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有多个`<router-view>`可以让您拥有可以使用更复杂布局组织的页面。例如，您可以拥有侧边栏和主视图。本篇介绍了这方面的内容。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe doesn't use any advanced concept. You are advised to familiarize
    yourself with the vue-router and learn how to install it, though. Go to the first
    recipe in the chapter to find out more.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 本篇不使用任何高级概念。但建议您熟悉vue-router并学习如何安装它。请参阅本章的第一篇文章以了解更多信息。
- en: How to do it…
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: This recipe will use a lot of code to drive the point home. Don't be discouraged
    though, the mechanism is really simple.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本篇将使用大量代码来说明问题。但是，机制非常简单。
- en: We will build a second-hand hardware store. We will have a main view and a sidebar;
    these will be our router-view s. The sidebar will contain our shopping list so
    that we always know what we are shopping for and will have no distractions.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个二手硬件商店。我们将拥有一个主视图和一个侧边栏；这些将是我们的`router-view`。侧边栏将包含我们的购物清单，以便我们始终知道我们要购买的物品，并且没有干扰。
- en: 'The whole HTML code is quite short because it only contains a title and the
    two `router-view` components:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 整个HTML代码非常简短，因为它只包含一个标题和两个`router-view`组件：
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In this case, the list is named `router-view` . The second one does not have
    a name; thus, it gets named as  `Vue`  by default.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，列表被命名为`router-view`。第二个没有名称，因此默认命名为`Vue`。
- en: 'Register the `vue-router` in the JavaScript:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中注册`vue-router`：
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'After that, register the routes:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，注册路由：
- en: '[PRE38]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Components is not a single object anymore; it''s become an object with two
    components inside it: one for the `list` and the other for the default `router-view`
    .'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 组件不再是一个单独的对象，而是一个包含两个组件的对象：一个用于`list`，另一个用于默认的`router-view`。
- en: 'Write the `list` component, as illustrated, before the router code:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 按照示例编写`list`组件，放在路由代码之前：
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This will display just the computer as an item we ought to remember to buy.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这将只显示计算机作为我们应该记得购买的项目。
- en: 'The parts component is the following; write it before the `router` code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 部件组件如下所示；在路由代码之前编写它：
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This contains a link to see more about the computer on sale; the next component
    is bound to that page, so write it before the `router` code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含一个链接，用于查看有关正在销售的计算机的更多信息；下一个组件绑定到该页面，因此在路由代码之前编写它：
- en: '[PRE41]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Of course, don''t forget to add the `Vue` instance:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，不要忘记添加`Vue`实例：
- en: '[PRE42]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'When you launch the app, you should see the two router views one above the
    other. If you want them side by side, you can add some CSS styles:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序时，您应该看到两个路由视图一个在另一个上方。如果您希望它们并排显示，可以添加一些CSS样式：
- en: '![](img/Image00119.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00119.jpg)'
- en: How it works…
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'When adding the `<router-view>` components to the page, you just have to remember
    to add a name to refer to it later during route registration:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在将`<router-view>`组件添加到页面时，您只需记住为其添加一个名称以便在路由注册期间引用：
- en: '[PRE43]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If you don''t specify a name, the route will be referred to as default:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不指定名称，路由将被称为默认路由：
- en: '[PRE44]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This way, the components will be displayed in their respective `router-view`
    elements.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，组件将显示在各自的`router-view`元素中。
- en: If you don't specify one or more components for a named view, the `router-view`
    associated with that name will be empty.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未为命名视图指定一个或多个组件，则与该名称关联的`router-view`将为空。
- en: Compose your routes hierarchically
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按层次组织您的路由
- en: In many cases, the organization tree of your website may be complex. In some
    cases, there is a clear hierarchical organization that you can follow and with
    nested routes, vue-routes helps you keep everything orderly. The best situation
    is if there is an exact correspondence with how URLs are organized and how components
    are nested.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，您的网站的组织树可能很复杂。在某些情况下，可能存在明确的分层组织，您可以遵循并使用嵌套路由，vue-routes可以帮助您保持一切井然有序。最好的情况是，URL的组织方式与组件的嵌套方式完全对应。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, you will use components and other basic features of Vue. You
    will also use dynamic routes. Go to the *Using named dynamic routes* recipe to
    find out more about them.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将使用Vue的组件和其他基本功能。您还将使用动态路由。请参阅*使用命名动态路由*示例以了解更多信息。
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: In this recipe, you will build an online accounting website for an imaginary
    world. We will have two users--`Stark` and `Lannister` --and we will be able to
    see how much gold and how many soldier these two have.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将为一个虚构的世界构建一个在线会计网站。我们将有两个用户-`Stark`和`Lannister`-我们将能够看到这两个用户拥有多少黄金和士兵。
- en: 'The HTML layout of our website is as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们网站的HTML布局如下：
- en: '[PRE45]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We have a title and two links--one for `Stark` and one for `Lannister` --and,
    finally, the `router-view` element.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个标题和两个链接-一个用于`Stark`，一个用于`Lannister`-最后是`router-view`元素。
- en: 'We add the `VueRouter` to the plugins:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`VueRouter`添加到插件中：
- en: '[PRE46]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then, we register the `routes` :'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们注册路由：
- en: '[PRE47]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: What we've said is to register a dynamic route,  `/user/:id` , and inside the
    `User`  component, there will be another router-view that will have the nested
    paths for gold and soldiers.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所说的是注册一个动态路由`/user/:id`，在`User`组件内部，将有另一个`router-view`，其中包含金币和士兵的嵌套路径。
- en: 'The three components just mentioned are written as shown; add them before the
    routing code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 刚才提到的三个组件按照所示编写，在路由代码之前添加它们：
- en: '[PRE48]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: As anticipated, there is another router-view entry point inside the `User` component
    that will contain the nested `routes` components.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，在`User`组件内部还有另一个`router-view`入口，其中包含嵌套的`routes`组件。
- en: 'Then, write the `Soldiers` and `Gold` components, always before the routing
    code:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在路由代码之前编写`Soldiers`和`Gold`组件：
- en: '[PRE49]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: These components will just display as many emojis as the gold or soldiers variable
    inside the Vue root instance data option.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件将根据Vue根实例数据选项中的金币或士兵变量显示相应数量的表情符号。
- en: 'This is what the `Vue` root instance looks like:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Vue根实例的样子：
- en: '[PRE50]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Launching the application will enable you to have a visual representation of
    the gold and the number of soldiers of the two users:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序将使您能够直观地表示两个用户的金币和士兵数量：
- en: '![](img/Image00122.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00122.jpg)'
- en: How it works…
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'To understand how nested routes work better, it''s useful to take a look at
    the following diagram:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解嵌套路由的工作原理，可以看一下以下图表：
- en: '![](img/Image00123.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00123.jpg)'
- en: There are only two levels in our recipe. The first level, which is the top level,
    is represented by the the big wrapping rectangle that corresponds to the  `/user/:id`
      route, meaning that every potential matching ID  will be on the same level.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例中只有两个级别。第一个级别是顶级，由大的包裹矩形表示，对应于`/user/:id`路由，意味着每个可能匹配的ID都在同一级别上。
- en: The inner rectangle instead is a nested route and a nested component. It corresponds
    to the route gold and to the Gold component.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 而内部矩形则是一个嵌套路由和嵌套组件。它对应于金币路由和Gold组件。
- en: When nested `routes` correspond to nested components, this is the right choice.
    There are two other cases to consider.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当嵌套路由对应于嵌套组件时，这是正确的选择。还有两种其他情况需要考虑。
- en: When we have nested components but don't have nested routes, we can just prefix
    the nested route with a slash,  `/` . This will make it behave like a top-level
    route.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有嵌套组件但没有嵌套路由时，我们只需在嵌套路由前加上斜杠`/`。这将使其表现得像顶级路由。
- en: 'For example, consider that we change our code to the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑将我们的代码更改为以下内容：
- en: '[PRE51]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Prefixing the `/gold` route will make the `Gold` component appear when we point
    the browser to the `/gold` URL instead of `/user/Lannister/gold` (which will result
    in an error and an empty page in this case because the user is not specified).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/gold`路由前加上斜杠将使`Gold`组件在我们将浏览器指向`/gold`URL时出现，而不是`/user/Lannister/gold`（在这种情况下将导致错误和空白页面，因为未指定用户）。
- en: The other, opposite, case is when having nested `routes` but no components on
    the same level. In this case, just use the regular syntax to register routes.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种相反的情况是有嵌套路由但没有相同级别的组件。在这种情况下，只需使用常规语法注册路由。
- en: Using route aliases
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由别名
- en: Sometimes it's necessary to have multiple URLs that point to the same page.
    This may be because the page has changed name or because the page is referred
    to differently in different parts of the site.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要有多个指向同一页的URL。这可能是因为页面更改了名称，或者因为页面在站点的不同部分中有不同的引用方式。
- en: In particular, when a page changes its name, it is very important to also leave
    the former name in many settings. Links may break and the page may become unreachable
    from some parts of the website. In this recipe, you will prevent exactly that.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是当页面更改名称时，也非常重要在许多设置中保留以前的名称。链接可能会断开，页面可能无法从网站的某些部分访问。在这个示例中，您将防止出现这种情况。
- en: Getting ready
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you are only required to have some knowledge of the vue-router
    component (how to install it and basic operations). More information about vue-router
    will start from the *Creating a SPA with vue-router*  recipe.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您只需要对vue-router组件有一些了解（如何安装和基本操作）。有关vue-router的更多信息将从“使用vue-router创建SPA”示例开始。
- en: How to do it…
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s imagine that we have a fashion website and Lisa, the employee responsible
    for giving titles to dresses, creates two new links for two pieces of clothing:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个时尚网站，负责给服装命名的员工Lisa为两件衣服创建了两个新链接：
- en: '[PRE52]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The developers create the corresponding routes in the vue-router:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员在vue-router中创建了相应的路由：
- en: '[PRE53]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Later, it is discovered that the two items are not green but red. Lisa is not
    to blame since she is color-blind.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 后来发现这两件衣服不是绿色的，而是红色的。Lisa并不怪罪，因为她是色盲。
- en: 'You are now in charge of changing all the links to reflect the true color of
    the listing. The first thing you do is change the links themselves. Here''s what
    the HTML layout looks like after you edit it:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您负责更改所有链接以反映列表的真实颜色。首先要做的是更改链接本身。在您编辑后，HTML布局如下所示：
- en: '[PRE54]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'You add the `VueRouter` plugin to `Vue` :'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您将`VueRouter`插件添加到`Vue`中：
- en: '[PRE55]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Then, register the new `routes` as well as aliases for the old ones:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，注册新的`routes`以及旧路由的别名：
- en: '[PRE56]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Here''s what the mentioned components look like:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是所提到的组件的样子：
- en: '[PRE57]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Before launching the app, remember to instantiate a `Vue` instance:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动应用程序之前，请记得实例化一个`Vue`实例：
- en: '[PRE58]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'You can add a CSS rule to make the emojis look like images, as shown in the
    following screenshot:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以添加一个CSS规则，使表情符号看起来像图片，如下面的屏幕截图所示：
- en: '[PRE59]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '![](img/Image00126.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00126.jpg)'
- en: How it works…
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: Even if we changed all of our links, we cannot control how other entities are
    linked to our page. For search engines, such as Google, there is no way to tell
    them to remove their link to the old page and use the new one. This means that
    if we weren't to use aliases, we may have a lot of bad publicity in the form of
    broken links and 404 pages; in some cases, even from advertisers we are paying
    to link to a non-existent page.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们更改了所有链接，我们也无法控制其他实体如何链接到我们的页面。对于搜索引擎（如Google），没有办法告诉它们删除对旧页面的链接并使用新页面。这意味着如果我们不使用别名，我们可能会遇到大量的破损链接和404页面，甚至可能来自我们支付费用链接到不存在页面的广告商的负面宣传。
- en: Adding transitions between your routes
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在路由之间添加过渡效果
- en: We explored transitions in detail in *[Chapter 3](text00140.html)* , *Transitions
    and Animations.* Here, we will use them when changing routes instead of changing
    elements or components. The same observations apply here as well.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在“第3章”中详细探讨了过渡效果和动画。在这里，我们将在更改路由时使用它们，而不是更改元素或组件。同样的观察也适用于这里。
- en: Getting ready
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before trying this recipe, I highly suggest that you complete some recipes in
    [*Chapter 3*](text00140.html) , *Transitions and Animations* , as well as this
    one. This recipe is a mixture of concepts learned up to now.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试这个示例之前，我强烈建议您完成“第3章”中的一些示例，即“过渡和动画”，以及本示例。这个示例是到目前为止学到的概念的混合体。
- en: How to do it…
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: In this recipe, we will build a website for a restaurant for ghosts. It won't
    be much different from the website of a regular restaurant, except for the requirements
    that the pages must fade instead of appearing instantly.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将为一个餐厅的网站建立一个鬼魂餐厅的网站。除了页面必须淡出而不是立即出现的要求外，它与普通餐厅的网站没有太大的区别。
- en: 'Let''s put down some HTML layout, shall we:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来布置一些HTML布局：
- en: '[PRE60]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Note how we wrapped the main router display port with a `transition` tag. The
    mode `out-in` is set because we want the animation for the disappearing component
    to finish before the other component appears. If we hadn't we set that, the two
    fading components would be stacked for a brief time. For a more detailed discussion,
    you can refer to the *Letting an element leave before the enter phase in a transition*
     recipe.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何用`transition`标签包裹了主路由显示端口。设置`out-in`模式是因为我们希望消失的组件的动画在其他组件出现之前完成。如果我们没有设置这个，两个淡出的组件会在短暂的时间内叠加在一起。有关更详细的讨论，您可以参考*在过渡中让元素在进入阶段之前离开*的教程。
- en: 'Let''s create the two pages/components:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建两个页面/组件：
- en: '[PRE61]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now, let''s register `routes` :'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们注册`routes`：
- en: '[PRE62]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Before launching the application, instantiate a `Vue` object:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动应用程序之前，实例化一个`Vue`对象：
- en: '[PRE63]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'For the transition to work, you have to add a few CSS rules:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使过渡效果生效，您需要添加一些CSS规则：
- en: '[PRE64]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Launch your application now. You successfully added a fade transition between
    page changes.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动您的应用程序。您成功地在页面切换之间添加了淡入淡出的过渡效果。
- en: How it works…
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Wrapping the whole `<router-view>` inside a transition tag will perform the
    same transition for all the components.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 将整个`<router-view>`包装在一个过渡标签中将为所有组件执行相同的过渡效果。
- en: 'If we want a different transition for every component, we have an alternate
    option: we have to wrap the individual components inside transitions themselves.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想为每个组件设置不同的过渡效果，我们有另一种选择：我们必须将各个组件自己包装在过渡中。
- en: 'Let''s say, for example, that we have two transitions: spooky and delicious
    . We want to apply the first when the `Home` component appears, and the second
    when the `Menu` component appears.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有两个过渡效果：spooky和delicious。我们希望在`Home`组件出现时应用第一个过渡效果，在`Menu`组件出现时应用第二个过渡效果。
- en: 'We need to modify our components, as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改我们的组件，如下所示：
- en: '[PRE65]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Managing errors for your routes
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理路由错误
- en: It does not make much sense to go to a link if the page we go to is not found
    or is not working. Traditionally, we are presented with an error page when this
    happens. In an SPA, we are more powerful and we can prevent the user from going
    there altogether, displaying a little courtesy message stating that the page is
    not available. This greatly enhances the UX since the user can immediately take
    another action without the need to go back.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问的页面不存在或无法正常工作，那么前往链接就没有太多意义。传统上，当发生这种情况时，我们会看到一个错误页面。在SPA中，我们更强大，我们可以完全阻止用户前往那里，并显示一个礼貌的消息，说明页面不可用。这极大地增强了用户体验，因为用户可以立即采取其他操作，而无需返回。
- en: Getting ready
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to follow along, you should complete the *Fetching data before switching
    route*  recipe.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟上，您应该完成*在切换路由之前获取数据*的教程。
- en: This recipe will build up on top of it and I'll assume that you already have
    all the relevant code in place.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将在此基础上进行构建，并假设您已经将所有相关代码放置在适当的位置。
- en: How to do it…
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: As said, we will edit the resulting code from the *Fetching data before switching
    route* recipe to manage errors. Just so you remember, when going to the `/aboutme`
    page, we were loading information from the Internet. We want to avoid going to
    that page in case the information is not available.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所说，我们将编辑*在切换路由之前获取数据*教程的结果代码来管理错误。只是为了提醒您，当我们转到`/aboutme`页面时，我们正在从互联网上加载信息。我们希望在信息不可用的情况下避免转到该页面。
- en: For this recipe, add Axios as a dependency, as done in the previous recipes.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，像之前的示例一样将Axios添加为依赖项。
- en: 'First, enrich the HTML layout with the highlighted code:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用下面的代码来丰富HTML布局：
- en: '[PRE66]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This is a toast message that will appear on the screen whenever there is an
    error. Add some style to it with this CSS rule:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个弹出消息，每当出现错误时都会显示在屏幕上。使用以下CSS规则为其添加一些样式：
- en: '[PRE67]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The next thing you want to do is have a global mechanism to set `showError`
    to `true` . At the top of the JavaScript code, declare the `vm`  variable:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的是有一个全局机制将`showError`设置为`true`。在JavaScript代码的顶部，声明`vm`变量：
- en: '[PRE68]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Then, assign our `Vue` root instance to it:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将我们的`Vue`根实例分配给它：
- en: '[PRE69]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: We also added the `showError` variable to the data option.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将`showError`变量添加到数据选项中。
- en: The last thing to do is actually manage the error on the retrieval of our data,
    before displaying the bio information.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要做的是在显示个人简介信息之前，实际上管理数据检索时的错误。
- en: 'Add the highlighted code to the `beforeRouteEnter` hook:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 将下面的代码添加到`beforeRouteEnter`钩子中：
- en: '[PRE70]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The next (false) command will make the user stay where they are, and we also
    edited the endpoint to `example.com` , which will return an error code on a `POST`
    request:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的（false）命令将使用户停留在原地，我们还将端点编辑为`example.com`，这将在`POST`请求上返回错误代码：
- en: '![](img/Image00127.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00127.jpg)'
- en: How it works…
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Axios will receive an error from `example.com` and this will trigger a rejection
    of the promise created when we called post. The rejection of a promise will, in
    turn, trigger the function passed inside the catch .
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Axios将从`example.com`接收到一个错误，这将触发对我们调用post时创建的promise的拒绝。promise的拒绝将反过来触发传递给catch的函数。
- en: It's worth noting that at this point in the code,  `vm` is referring to the
    root `Vue` instance; this is because the code is always executed after the `Vue`
    instance is initialized and assigned to `vm` .
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在代码的这一点上，`vm`指的是根`Vue`实例；这是因为该代码总是在`Vue`实例初始化并分配给`vm`之后执行的。
- en: Adding a progress bar to load pages
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为页面添加进度条以加载页面
- en: It's true that with an SPA the user does not have to wait for a new page to
    load, but he still has to wait for the data to load. In the *Fetching data before
    switching route* recipe, we had to wait a while longer after we clicked on the
    button to the `/aboutme` page. There was nothing to suggest that the data was
    loading, and then suddenly the page appeared. Wouldn't it be great if the user
    had at least some feedback that the page is loading?
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，使用SPA，用户不必等待新页面加载，但他仍然需要等待数据加载。在*在切换路由之前获取数据*示例中，我们在点击按钮进入`/aboutme`页面后还需要等待一段时间。没有任何提示数据正在加载，然后突然页面出现了。如果用户至少有一些反馈页面正在加载，那不是很好吗？
- en: Getting ready
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to follow along, you should complete the *Fetching data before switching
    route*  recipe.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟上，您应该完成*在切换路由之前获取数据*示例。
- en: This recipe will build up on top of it and I'll assume that you have all the
    relevant code in place already.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将在此基础上构建，并假设您已经有了所有相关的代码。
- en: How to do it…
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: As stated earlier, I will assume that you have all the code resulting from the *Fetching
    data before switching route* recipe in place and working.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我假设您已经有了从*在切换路由之前获取数据*示例中得到的所有代码，并且已经正常工作。
- en: For this recipe, we will use an additional dependency--`NProgress` , a small
    utility to display a loading bar on top of the screen.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用一个额外的依赖项--`NProgress`，一个在屏幕顶部显示加载进度条的小工具。
- en: 'Add the following two lines inside the head of your page or the list of dependencies
    in JSFiddle (there is also a package for npm):'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下两行代码添加到页面的头部或JSFiddle的依赖项列表中（也有一个npm包）：
- en: '[PRE71]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Here,  `X` is the version of `NProgress` . At writing time it was 0.2.0, but
    you can look it up online.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`X`是`NProgress`的版本。在编写时，版本号为0.2.0，但你可以在网上查找。
- en: After we've done this, the next step is to define the behavior we want from
    the progress bar.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步后，下一步是定义我们希望进度条具有的行为。
- en: 'First, we''d like the progress bar to appear as soon as we click on the link.
    For this, we can add an event listener to the click event, but it will be a poor
    design if we had, say, a hundred links. A much more sustainable and clean way
    to do it is by creating a new hook for the router and connecting the appearance
    of the progress bar with the switching of the route. This will also have the advantage
    of offering a consistent experience throughout the application:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们希望在点击链接后立即显示进度条。为此，我们可以为点击事件添加一个事件监听器，但如果有一百个链接，这将是一个很差的设计。一个更可持续和清晰的方法是通过为路由创建一个新的钩子，并将进度条的出现与路由的切换连接起来。这也将具有提供一致的应用体验的优势：
- en: '[PRE72]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In a similar fashion, we want the bar to disappear when loading is completed
    successfully. This means that we want to do it inside the callback:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们希望在加载成功后进度条消失。这意味着我们希望在回调函数中执行这个操作：
- en: '[PRE73]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'You can now launch the application and your progress bar should already work:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以启动应用程序，你的进度条应该已经工作了：
- en: '![](img/Image00128.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00128.jpg)'
- en: How it works…
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe also demonstrates that it is not at all difficult to leverage external
    libraries, provided they are easy to install.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例还证明了利用外部库并不难，只要它们易于安装。
- en: 'Since the `NProgress` component is so simple and useful, I report its API as
    a reference here:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`NProgress`组件如此简单且有用，我在这里报告它的API作为参考：
- en: '`NProgress.start()` : Shows the progress bar'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NProgress.start()`：显示进度条'
- en: '`NProgress.set(0.4)` : Sets a percentage of the progress bar'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NProgress.set(0.4)`：设置进度条的百分比'
- en: '`NProgress.inc()` : Increments the progress bar by a little'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NProgress.inc()`：稍微增加进度条'
- en: '`NProgress.done()` : Completes the progress'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NProgress.done()`：完成进度'
- en: We have used two of the preceding functions.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了前面两个函数。
- en: As a precaution, I would also suggest not relying on the `done()` function being
    called by the individual components. We are calling it in the `then` function,
    but what if the next developer forgets? After all, we are starting the progress
    bar before *any* switch in route.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 作为预防措施，我还建议不要依赖于各个组件调用`done()`函数。我们在`then`函数中调用它，但如果下一个开发人员忘记了呢？毕竟，我们在*任何*路由切换之前都会启动进度条。
- en: 'It would be better to add a new hook to the `router` :'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 最好是在`router`中添加一个新的钩子：
- en: '[PRE74]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Since the `done` function is idempotent, we can call it as many times as we
    want. This will, therefore, not modify the behavior of our application and will
    ensure that even if future developers forget to close the progress bar, it will
    disappear by itself once the route has changed.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`done`函数是幂等的，我们可以随意调用它多次。因此，这不会修改我们应用程序的行为，并且将确保即使将来的开发人员忘记关闭进度条，它也会在路由改变后自动消失。
- en: How to redirect to another route
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何重定向到另一个路由
- en: There are infinite reasons you may wish to redirect the user. You may want the
    user to log in before accessing a page, or maybe a page has moved and you want
    your user to take note of the new link. In this recipe, you will redirect the
    user to a new home page as a way to quickly modify the website.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能有无数个原因希望重定向用户。你可能希望用户在访问页面之前先登录，或者页面已经移动，你希望用户注意到新的链接。在这个示例中，你将重定向用户到一个新的主页，作为快速修改网站的一种方式。
- en: Getting ready
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will only use basic knowledge about vue-router. If you have completed
    the *Creating a SPA with vue-router* recipe, you are good to go.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例只会使用关于vue-router的基本知识。如果你已经完成了*使用vue-router创建单页应用*的示例，你就可以开始了。
- en: How to do it…
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Suppose that we have an online clothing shop.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个在线服装店。
- en: 'This will be the HTML layout of the site:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是网站的HTML布局：
- en: '[PRE75]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: It's just a page with a link to a clothes listing.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 它只是一个带有指向服装列表的链接的页面。
- en: 'Let''s register the `VueRouter` :'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们注册`VueRouter`：
- en: '[PRE76]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'We have three pages in our website, represented by the following components:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网站有三个页面，分别由以下组件表示：
- en: '[PRE77]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: They represent the home page, the clothes listing, and a page we used last year
    with some discounts.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 它们代表主页、服装列表和去年使用的带有一些折扣的页面。
- en: 'Let''s register some `routes` :'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们注册一些`routes`：
- en: '[PRE78]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Finally, we add a root `Vue` instance:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加一个根`Vue`实例：
- en: '[PRE79]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: You can launch the application, and it should work without any problems.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以启动应用程序，它应该可以正常工作，没有任何问题。
- en: Black Friday is tomorrow and we forgot that it's the biggest event in fashion
    around the world. We don't have time to rewrite the home page, but there's that
    page from last year's sales that can do the trick. What we will do is redirect
    users who visit our home page to that page.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 黑色星期五明天就要到了，我们忘记了这是全球时尚界最大的活动。我们没有时间重写主页，但去年销售的那个页面可以解决问题。我们将把访问我们主页的用户重定向到那个页面。
- en: 'To implement this, we need to modify how we registered our `routes` :'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们需要修改我们注册的`routes`：
- en: '[PRE80]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Only by adding that redirect we did save the day. Now, you will be presented
    with the sales page whenever you visit the home page.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 只需添加该重定向，我们就能挽救这一天。现在，每当您访问主页时，都会显示销售页面。
- en: How it works…
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the root route is matched, the `Home` component won''t be loaded. The
    path of `/last-year-sales` will be matched instead. We can also omit the component
    altogether since it will never be loaded:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 当匹配到根路由时，`Home`组件将不会被加载。而是匹配到`/last-year-sales`路径。我们也可以完全省略组件，因为它永远不会被加载：
- en: '[PRE81]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: There's more…
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Redirecting in vue-router is more powerful than what we just saw. Here, I will
    try to enrich the application we just created with more functionality from redirecting.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在vue-router中，重定向比我们刚才看到的更强大。在这里，我将尝试通过重定向为刚刚创建的应用程序增加更多功能。
- en: Redirecting to 404s
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向到404页面
- en: 'Redirecting not found pages is done by adding a catch-all as the last route.
    It will match everything that is not matched by the other routes:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在最后一个路由中添加一个捕获所有路由，可以重定向找不到的页面。它将匹配到其他路由未匹配到的所有内容：
- en: '[PRE82]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Named redirecting
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名重定向
- en: 'Redirection can be combined with named routes (refer to the *Using named dynamic
    routes*  recipe). We can specify the destination by name:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 重定向可以与命名路由结合使用（参考“使用命名动态路由”配方）。我们可以通过名称指定目标：
- en: '[PRE83]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Redirecting with parameters
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带参数的重定向
- en: 'You can also retain the parameters while redirecting:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在重定向时，您还可以保留参数：
- en: '[PRE84]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Dynamic redirecting
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态重定向
- en: 'This is the ultimate redirect. You can access the route the user is trying
    to access and decide where you want to redirect him (you can''t cancel the redirection
    though):'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终的重定向。您可以访问用户尝试访问的路由，并决定要将其重定向到何处（但无法取消重定向）：
- en: '[PRE85]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Saving scrolling position when hitting back
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在返回时保存滚动位置
- en: 'In vue-router, there are two modes of navigation: `hash`  and `history` . The
    default mode and the one used in the previous recipes is `previouslye.` Traditionally,
    when you visit a website, scroll down a bit and click on a link to another page;
    the new page displays from the top. When you click on the browser''s back button,
    the page displays from the previous scrolled height and the link you just clicked
    on is visible.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在vue-router中，有两种导航模式：`hash`和`history`。默认模式和前面的示例中使用的模式是`history`。传统上，当您访问一个网站，向下滚动一点并点击链接到另一个页面时，新页面从顶部显示。当您点击浏览器的返回按钮时，页面从先前滚动的高度显示，并且您刚刚点击的链接可见。
- en: This is not true when you are in an SPA, or at least is not automatic. The vue-router
    history mode lets you simulate this or, even better, have fine-grained control
    of what happens to your scrolling.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在SPA（单页应用）中时，这并不是真实的，或者至少不是自动的。vue-router的历史模式可以让你模拟这一点，甚至更好的是，可以对滚动行为进行精细控制。
- en: Getting ready
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: To complete this recipe, we will need to switch to history mode. History mode
    only works when the app is running on a properly configured server. How to configure
    a server for SPA is out of the scope of this book (but the principle is that every
    route gets redirected from the server side to `index.html` ).
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个步骤，我们需要切换到历史模式。历史模式只在应用程序在正确配置的服务器上运行时才有效。如何为SPA配置服务器超出了本书的范围（但原则是每个路由都从服务器端重定向到`index.html`）。
- en: We will use an npm program to launch a small server; you are expected to have
    npm installed (you can take a look at the *Choosing a development environment*
    recipe to find out more about npm).
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个npm程序来启动一个小型服务器；我们期望您已经安装了npm（您可以查看“选择开发环境”这个教程来了解更多关于npm的信息）。
- en: How to do it…
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: First, you'll install a compact server for SPAs so that history mode will work.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将安装一个紧凑的服务器用于单页应用程序，以便历史模式能够正常工作。
- en: 'In your favorite command line, go inside the directory that will contain your
    application. Then, type the following commands:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在您喜欢的命令行中，进入包含您的应用程序的目录。然后，输入以下命令：
- en: '[PRE86]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: After the server is run, you will have to point your browser to `http://localhost:8080`
    and if you have a file called `index.html` in your directory, it will be shown;
    otherwise you won't see much.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 运行服务器后，您需要将浏览器指向`http://localhost:8080`，如果您的目录中有一个名为`index.html`的文件，它将被显示出来；否则您将看不到太多内容。
- en: 'Create a file called `index.html` and fill in some boilerplate, like in the *Choosing
    a development environment*  recipe. We want an empty page with only `Vue` and
    `vue-router` as dependencies. Our empty canvas should look like this:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`index.html`的文件，并填写一些样板内容，就像在“选择开发环境”一节中所示。我们希望得到一个只有`Vue`和`vue-router`作为依赖项的空白页面。我们的空白画布应该如下所示：
- en: '[PRE87]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'As HTML layout, put this in the body:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 作为HTML布局，将以下内容放在`body`中：
- en: '[PRE88]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'We have a heading with three links and a router-view entry point. We will create
    two long pages for the sports and fashion pages:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个带有三个链接和一个`router-view`入口点的标题。我们将为体育和时尚页面创建两个长页面：
- en: '[PRE89]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'We only need a stub for the home page component:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 对于主页组件，我们只需要一个存根：
- en: '[PRE90]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Write a reasonable router for this news website:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个新闻网站编写一个合理的路由器：
- en: '[PRE91]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: If you go with your browser now to the address specified earlier, you should
    see the site live.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在使用浏览器访问之前指定的地址，您应该能看到网站正在运行。
- en: Go to the sports page, scroll down until you see the link, and click on it.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 转到体育页面，向下滚动直到看到链接，然后点击它。
- en: Note how the page you are visiting is not displayed from the beginning. This
    will not happen with a traditional website and is not desirable.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 注意您正在访问的页面不是从开始显示的。这在传统网站中不会发生，也是不可取的。
- en: Click on the back button and note how we are where we last left the page; we
    want to retain this behavior.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 点击返回按钮，注意我们回到了上次离开页面的位置；我们希望保留这种行为。
- en: 'Lastly, note how the URL of the page does not look natural but has the hash
    symbol inside; we would like the URL to look better:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，注意页面的URL看起来不太自然，而是带有哈希符号；我们希望URL看起来更好：
- en: '![](img/Image00129.jpg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00129.jpg)'
- en: 'To accomplish this, let''s modify our router code to the following:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，让我们将路由器代码修改为以下内容：
- en: '[PRE92]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: We added a line that specifies the new mode to be history (no hash in the link)
    and we defined the `scrollBehavior` function to go back to the last position if
    present; if it's a new page, it should scroll to the top-left corner.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一行指定新模式为history（链接中没有哈希），并定义了`scrollBehavior`函数以返回到上次位置（如果存在）；如果是新页面，它应该滚动到左上角。
- en: You can try this by refreshing the browser and going back to the home page.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过刷新浏览器并返回到主页来尝试此操作。
- en: Open the sports page and click on the link in the middle of the page. The new
    page now displays from the beginning.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 打开体育页面，并点击页面中间的链接。新页面现在从开始显示。
- en: Click on back and the `savedPosition` gets restored.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 点击返回，`savedPosition`被恢复。
- en: 'Note how the URL looks much nicer now:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 注意现在URL看起来更好了：
- en: '![](img/Image00130.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00130.jpg)'
- en: How it works…
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'When you use a URL that contains the hash symbol in the browser, the browser
    will send a request for the URL without the suffix after the hash, that is, when
    you have an event inside a page that goes to the same page but with a different
    hash suffix:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在浏览器中使用包含哈希符号的URL时，浏览器将发送一个不包含哈希后缀的URL的请求，也就是说，当您在页面内部有一个事件，该事件转到相同页面但具有不同的哈希后缀时：
- en: '[PRE93]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: The browser will not reload the page; this is why vue-router can modify the
    content of the page when the user clicks on a link that only modifies the hash,
    without the page being reloaded.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器不会重新加载页面；这就是为什么当用户点击一个只修改哈希而不重新加载页面的链接时，vue-router可以修改页面的内容。
- en: When you change the mode from `hash`  to `history` , vue-router will drop the
    hash notation and will leverage the  `history.pushState()` function.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将模式从“hash”更改为“history”时，vue-router将删除哈希符号，并利用“history.pushState（）”函数。
- en: 'This function adds another virtual page and changes the URL to something else:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数添加了另一个虚拟页面并将URL更改为其他内容：
- en: '[PRE94]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The browser will not send a `GET` request to look for `page2` though; in fact,
    it won't do anything.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器不会发送GET请求来查找“page2”；实际上，它什么都不会做。
- en: When you press the back button, the browser reverts the URL and vue-router receives
    an event. It will then read the URL (which is now `page1 )` and match the associated
    route.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 当您按下返回按钮时，浏览器会恢复URL，并且vue-router会接收到一个事件。然后它将读取URL（现在是“page1”）并匹配相关的路由。
- en: The role of our compact history server is to redirect every GET request to the
    `index.html`  page. This is why when we try to go to `http://localhost:8080/fashion`
    directly, we don't get a *404*  error.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 我们紧凑的历史服务器的作用是将每个GET请求重定向到“index.html”页面。这就是为什么当我们尝试直接访问“http://localhost:8080/fashion”时，我们不会得到404错误的原因。
