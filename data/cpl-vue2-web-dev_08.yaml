- en: Introducing Vue-Router and Loading URL-Based Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Vue-Router和加载基于URL的组件
- en: In the next few chapters, we are going to be creating a shop interface. This
    shop is going to combine everything we have learned so far while introducing some
    more techniques, plugins, and functionality. We are going to look at retrieving
    a list of products from a CSV file, displaying them and their variations, and
    filtering the products by manufacturer or tags. We will also look at creating
    a product detail view and allowing the user to add and remove products and product
    variations, such as size or color, to their online shopping basket.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将创建一个商店界面。这个商店将结合我们迄今为止学到的所有知识，同时引入一些更多的技术、插件和功能。我们将学习如何从CSV文件中获取产品列表，显示它们及其变体，并按制造商或标签对产品进行过滤。我们还将学习如何创建产品详细视图，并允许用户向其在线购物篮中添加和删除产品和产品变体，例如尺寸或颜色。
- en: All of this will be achieved using Vue, Vuex, and a new Vue plugin, Vue-router.
    Vue-router is used for building **Single Page Applications** (**SPAs**) and allows
    you to map components to URLs, or in `VueRouter` terms, routes, and paths. This
    is an extremely powerful plugin and handles a lot of the intricate details required
    for the processing of URLs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都将使用Vue、Vuex和一个新的Vue插件Vue-router来实现。Vue-router用于构建单页应用程序（SPA），它允许您将组件映射到URL，或者在VueRouter术语中称为路由和路径。这是一个非常强大的插件，处理了许多处理URL所需的复杂细节。
- en: 'This chapter is going to cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Initializing Vue-router and its options
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化Vue-router及其选项
- en: Creating links with Vue-router
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue-router创建链接
- en: Making dynamic routes to update the View based on URL
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建动态路由以根据URL更新视图
- en: Using props with URLs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在URL中使用props
- en: Nesting and naming routes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套和命名路由
- en: How to navigate programmatically with Vue-router
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Vue-router进行编程导航
- en: Installing and initializing Vue-router
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和初始化Vue-router
- en: 'Similar to how we added Vue and Vuex to our applications, you can either directly
    include the library from unpkg, or head to the following URL and download a local
    copy for yourself: [https://unpkg.com/Vue-router](https://unpkg.com/vue-router).
    Add the JavaScript to a new HTML document, along with Vue, and your application''s
    JavaScript. Create an application container element, your view, as well. In the
    following example, I have saved the Vue-router JavaScript file as `router.js`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们向应用程序添加Vue和Vuex的方式类似，您可以直接从unpkg中包含该库，或者转到以下URL并下载一个本地副本：[https://unpkg.com/Vue-router](https://unpkg.com/vue-router)。将JavaScript添加到新的HTML文档中，以及Vue和应用程序的JavaScript。还要创建一个应用程序容器元素作为您的视图。在下面的示例中，我将Vue-router的JavaScript文件保存为`router.js`：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Initialize a new Vue instance in your application JavaScript:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的JavaScript中初始化一个新的Vue实例：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We are now ready to add `VueRouter` and utilize its power. Before we do that,
    however, we need to create some very simple components which we can load and display
    based on the URL. As we are going to be loading the components with the router,
    we don't need to register them with `Vue.component`, but instead create JavaScript
    objects with the same properties as we would a Vue component.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好添加VueRouter并利用其功能了。然而，在此之前，我们需要创建一些非常简单的组件，根据URL加载和显示它们。由于我们将使用路由器加载组件，因此不需要使用`Vue.component`注册它们，而是创建具有与Vue组件相同属性的JavaScript对象。
- en: 'For this first exercise, we are going to create two pages—Home and About pages.
    Found on most websites, these should help give you context as to what is loading
    where and when. Create two templates in your HTML page for us to use:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个练习中，我们将创建两个页面——主页和关于页面。在大多数网站上都可以找到这些页面，它们应该帮助您了解加载的内容以及何时加载。在您的HTML页面中创建两个模板供我们使用：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Don't forget to encapsulate all your content in one "root" element (represented
    here by the wrapping `<div>` tags). You also need to ensure you declare the templates
    *before* your application JavaScript is loaded.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将所有内容封装在一个“根”元素中（在这里用包裹的`<div>`标签表示）。您还需要确保在加载应用程序JavaScript之前声明模板。
- en: 'We''ve created a Home page template, with the `id` of `homepage`, and an About
    page, containing some placeholder text from *lorem ipsum*, with the `id` of `about`.
    Create two components in your JavaScript which reference these two templates:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个Home页面模板，其`id`为`homepage`，以及一个About页面，其中包含一些来自*lorem ipsum*的占位文本，其`id`为`about`。在您的JavaScript中创建两个引用这两个模板的组件：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The next step is to give the router a placeholder to render the components in
    the view. This is done by using a custom `<router-view>` HTML element. Using this
    element gives you control over where your content will render. It allows us to
    have a header and footer right in the app view, without needing to deal with messy
    templates or includes the components themselves.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为路由器提供一个占位符来渲染视图中的组件。这可以通过使用自定义的`<router-view>` HTML元素来完成。使用此元素可以控制内容的渲染位置。它允许我们在应用程序视图中拥有一个头部和页脚，而无需处理混乱的模板或包含组件本身。
- en: 'Add a `header`, `main`, and `footer` element to your app. Give yourself a logo
    in the header and credits in the footer; in the `main` HTML element, place the
    `router-view` placeholder:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序中添加一个`header`、`main`和`footer`元素。在header中放置一个logo，在footer中放置credits；在`main`
    HTML元素中，放置`router-view`占位符：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Everything in the app view is optional, except the `router-view`, but it gives
    you an idea of how the router HTML element can be implemented into a site structure.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序视图中的所有内容都是可选的，除了`router-view`之外，但它可以让您了解如何将路由器HTML元素实现到站点结构中。
- en: 'The next stage is to initialize the Vue-router and instruct Vue to use it.
    Create a new instance of `VueRouter` and add it to the `Vue` instance—similar
    to how we added `Vuex` in the previous section:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是初始化Vue-router并指示Vue使用它。创建一个`VueRouter`的新实例并将其添加到`Vue`实例中，类似于我们在前一节中添加`Vuex`的方式：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We now need to tell the router about our routes (or paths), and what component
    it should load when it encounters each one. Create an object inside the Vue-router
    instance with a key of `routes` and an array as the value. This array needs to
    include an object for each route:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要告诉路由器我们的路由（或路径）以及在遇到每个路由时应加载的组件。在Vue-router实例内部创建一个具有`routes`键和数组值的对象。此数组需要为每个路由包含一个对象：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Each route object contains a `path` and `component` key. The `path` is a string
    of the URL that you want to load the `component` on. Vue-router serves up components
    based on a first-come-first-served basis. For example, if there are several routes
    with the same path, the first one encountered is used. Ensure each route has the
    beginning slash—this tells the router it is a root page and not a sub-page, we
    will cover sub-pages later on in the chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个路由对象都包含一个`path`和`component`键。`path`是您要在其上加载`component`的URL字符串。Vue-router根据先到先得的原则提供组件。例如，如果有多个具有相同路径的路由，则使用遇到的第一个路由。确保每个路由都有开始斜杠-这告诉路由器它是一个根页面而不是子页面，我们将在本章后面介绍子页面。
- en: Press save and view your app in the browser. You should be presented with the
    content of the `Home` template component. If you observe the URL, you will notice
    that on page load a hash and forward slash (`#/`) is appended to the path. This
    is the router creating a method for browsing the components and utilizing the
    address bar. If you change this to the path of your second route, `#/about`, you
    will see the contents of the `About` component.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 按下保存并在浏览器中查看你的应用程序。你应该看到`Home`模板组件的内容。如果你观察URL，你会注意到在页面加载时，路径后面会添加一个哈希和斜杠(`#/`)。这是路由器创建的一种浏览组件和利用地址栏的方法。如果你将其更改为第二个路由的路径，`#/about`，你将看到`About`组件的内容。
- en: 'Vue-router is also able to use the JavaScript history API to create prettier
    URLs. For example, `yourdomain.com/index.html#about` would become `yourdomain.com/about`.
    This is activated by adding `mode: ''history''` to your `VueRouter` instance:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'Vue-router还可以使用JavaScript历史API来创建更漂亮的URL。例如，`yourdomain.com/index.html#about`将变成`yourdomain.com/about`。这是通过在你的`VueRouter`实例中添加`mode:
    ''history''`来激活的：'
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: However, it also requires some server configuration to catch all requests and
    redirect them to your `index.html` page, which is beyond the scope of this book
    but is fully outlined in the Vue-router documentation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这也需要一些服务器配置来捕获所有请求并将它们重定向到你的`index.html`页面，这超出了本书的范围，但在Vue-router文档中有详细说明。
- en: Changing the folder for Vue-router
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改Vue-router的文件夹
- en: There may be scenarios where you want to host your Vue app in a sub-folder of
    your website. In this instance, you will need to declare the base folder of your
    project so Vue-router can construct, and listen out for, the correct URLs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能想要将Vue应用程序托管在网站的子文件夹中。在这种情况下，你需要声明项目的基本文件夹，以便Vue-router可以构建和监听正确的URL。
- en: 'For example, if your app was based on a `/shop/` folder, you would declare
    it using the `base` parameter on the Vue-router instance:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的应用程序基于一个`/shop/`文件夹，你可以使用Vue-router实例上的`base`参数来声明它：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The value of this needs the slash at both the beginning and end.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值需要在开头和结尾都有斜杠。
- en: Along with `base`, there are several other configuration options available for
    Vue-router—it is well worth being familiar with them, as they may solve a problem
    you have later on.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`base`之外，Vue-router还有其他几个配置选项可用，值得熟悉它们，因为它们可能会解决你以后遇到的问题。
- en: Linking to the different routes
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接到不同的路由
- en: 'With the router working as expected, we can now proceed with adding links into
    our application, allowing the user to navigate around the website. Links can be
    achieved in two ways: we can use a conventional `<a href="#/about">` tag, or alternatively
    we can utilize a new HTML element provided with the router of `<router-link to="/about">`.
    When using the router-link element, it works the same as an `<a>` tag, and in
    fact gets converted to one when running in the browser, but allows a lot more
    customization and integration with the router.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器正常工作后，我们现在可以继续向应用程序中添加链接，允许用户在网站中导航。链接可以通过两种方式实现：我们可以使用传统的`<a href="#/about">`标签，或者我们可以利用路由器提供的新的HTML元素`<router-link
    to="/about">`。当使用`router-link`元素时，它的工作方式与`<a>`标签相同，在浏览器中运行时实际上会被转换为`<a>`标签，但允许更多的自定义和与路由器的集成。
- en: 'It is highly advised to use the `router-link` element wherever possible, as
    it carries several advantages over the standard link:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议在可能的情况下使用`router-link`元素，因为它比标准链接具有几个优点：
- en: '**Mode changes**: The first advantage is linked to the `mode` of the router.
    Using the router link allows you to change the mode of your router, say from hash
    to history, and not have to change every single link in your app.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式更改**：第一个优点与路由器的`mode`相关。使用路由链接可以更改路由器的模式，例如从哈希模式更改为历史模式，而不必更改应用程序中的每个链接。'
- en: '**CSS classes**: Another advantage that comes with using the router link is
    a CSS class that gets applied to links active in the "tree" and pages which are
    currently being viewed. Links in the tree are parent pages which also include
    the root page (for example, any links to "`/`" will always have the active class).
    This is one of the big benefits of using the router, as adding and removing these
    classes manually would require complex coding. These classes can be customized
    and we will do that later.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSS类**：使用路由链接的另一个优点是应用于“树”中活动链接和当前正在查看的页面的CSS类。树中的链接是父页面，也包括根页面（例如，任何链接到“/”的链接将始终具有活动类）。这是使用路由的一个重要优势，因为手动添加和删除这些类将需要复杂的编码。这些类可以进行自定义，我们将在稍后进行。'
- en: '**URL parameters and named routes**: The other advantage to using the router
    element is the power it gives you over using named routes and passing URL parameters.
    This further allows you to have one source of truth for the URL of a page and
    use names and shortcuts to reference a route. More on this will be covered later
    in the chapter.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL参数和命名路由**：使用路由元素的另一个优点是它使您能够使用命名路由和传递URL参数。这进一步允许您在页面的URL上拥有一个真实的来源，并使用名称和快捷方式引用路由。关于这一点，稍后在本章中将进行更详细的介绍。'
- en: 'Add the links to your pages within your view so you can navigate between pages.
    Within the `<header>` of your website, create a new `<nav>` element that contains
    an unordered list. For each page, add a new list item with a `router-link` element
    inside. Add a `to` attribute to the link path:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中添加页面链接，以便您可以在页面之间导航。在您的网站的`<header>`中，创建一个新的`<nav>`元素，其中包含一个无序列表。对于每个页面，添加一个包含`router-link`元素的新列表项。在链接路径上添加一个`to`属性：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Viewing the app in the browser should show your two links, allowing you to switch
    between the two content pages. You will also notice that, by clicking the link,
    the URL updates too.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看应用程序应该显示两个链接，允许您在两个内容页面之间切换。您还会注意到，通过点击链接，URL也会更新。
- en: If you inspect the links with the browser's HTML inspector, you will notice
    the change in CSS classes. The Home link will always have a class of `router-link-active—`this
    is because it is either active itself, or it has an active child, such as the
    About page. There is another CSS class which gets added and removed as you navigate
    between the two pages—`router-link-exact-active`. This *only* gets applied to
    the links on the currently active page.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用浏览器的HTML检查器检查链接，您会注意到CSS类的变化。主页链接始终具有`router-link-active`类 - 这是因为它本身处于活动状态，或者它有一个活动的子页面，例如关于页面。当您在两个页面之间导航时，还会添加和删除另一个CSS类
    - `router-link-exact-active`。这个类仅适用于当前活动页面上的链接。
- en: 'Let''s customize the classes that get applied to the view. Head to the initialization
    of the router in your JavaScript and add two new keys to the object - `linkActiveClass`
    and `linkExactActiveClass`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们自定义应用于视图的类。在JavaScript中的路由初始化部分，向对象添加两个新键 - `linkActiveClass`和`linkExactActiveClass`：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The keys should be fairly self-explanatory, but `linkExactActiveClass` gets
    applied to the current page, the one being viewed, while `linkActiveClass` is
    the class that gets applied when the page, or one of its children, is active.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些键应该相当容易理解，但是`linkExactActiveClass`应用于当前页面，即正在查看的页面，而`linkActiveClass`是当页面或其子页面之一处于活动状态时应用的类。
- en: Linking to sub-routes
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接到子路由
- en: 'There may be times you want to have links to children pages. For example `/about/meet-the-team`.
    Fortunately, there is not much work required to get this working. Create a new
    object in the `routes` array, pointing to a new component with a template:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能希望链接到子页面。例如`/about/meet-the-team`。幸运的是，不需要太多工作来实现这个功能。在`routes`数组中创建一个指向具有模板的新组件的新对象：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When navigating to this page, you will notice both the Home and About links
    have the `active` class and neither have the `current` class we created. If you
    were to create a link in your navigation to this page, a `current` class would
    be applied to that.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当导航到这个页面时，你会注意到Home和About链接都有`active`类，而没有我们创建的`current`类。如果你在导航中创建一个链接到这个页面，那么一个`current`类将被应用到它上面。
- en: Dynamic routes with parameters
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带参数的动态路由
- en: Vue router easily allows you to have dynamic URLs. A dynamic URL allows you
    to use the same component to display different data while using the same template.
    An example of this would be for a shop, where all the category pages look the
    same but display different data based on the URL. Another example would be a product
    detail page—you don't want to have to create a component for every product, so
    instead, you use one component with a URL parameter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Vue路由器很容易让你拥有动态URL。动态URL允许你使用相同的组件来显示不同的数据，同时使用相同的模板。一个例子是商店，所有的类别页面看起来都一样，但根据URL显示不同的数据。另一个例子是产品详情页面，你不想为每个产品都创建一个组件，所以你可以使用一个带有URL参数的组件。
- en: URL parameters can appear anywhere in the path, and there can be one or many.
    Each parameter gets assigned a key, so it can be created and accessed consistently.
    We'll go into dynamic routes and parameters in more detail during Chapter 9, *Using
    Vue-Router Dynamic Routes to Load Data*. For now, we'll build a basic example.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: URL参数可以出现在路径的任何位置，可以有一个或多个。每个参数都被分配一个键，因此可以一致地创建和访问它们。我们将在第9章“使用Vue-Router动态路由加载数据”中更详细地介绍动态路由和参数。现在，我们将构建一个基本的示例。
- en: Before we head into creating the component, let's examine a new variable available
    to us—`this.$route`.  In a similar way to how we accessed the global store with
    Vuex, this variable allows us to access a lot of information about the routes,
    URLs, and parameters.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建组件之前，让我们来看一下一个新的可用变量——`this.$route`。类似于我们如何使用Vuex访问全局存储一样，这个变量允许我们访问关于路由、URL和参数的许多信息。
- en: 'In your Vue instance, as a test, add a `mounted()` function. Inside `console.log`,
    insert the `this.$route` parameter:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Vue实例中，作为一个测试，添加一个`mounted()`函数。在`console.log`中插入`this.$route`参数：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you open up your browser and look at the developer tools, you should see
    an object being output. Viewing this object will reveal several bits of information,
    such as the path and the components which match the current path. Heading to the
    `/about` URL will reveal different information about the object:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开浏览器并查看开发者工具，你应该会看到一个对象被输出。查看这个对象将显示一些信息，比如路径和与当前路径匹配的组件。前往`/about` URL将显示关于该对象的不同信息：
- en: '![](assets/7dc8379e-4c58-4733-b535-4ba77c32c3a3.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7dc8379e-4c58-4733-b535-4ba77c32c3a3.png)'
- en: 'Let''s create a component that uses the parameters from this object. Create
    a new object in your routes array:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个使用这个对象参数的组件。在你的路由数组中创建一个新对象：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The thing you'll notice that is different with this path is the colon preceding
    the `name` in the path. This tells Vue-router that this part of the URL is dynamic,
    but the variable name for that section is `name`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到这个路径与之前的路径不同的地方是在路径中`name`之前有一个冒号。这告诉Vue-router这个URL的这部分是动态的，但该部分的变量名是`name`。
- en: 'Now create a new component called `User`, and create a template for it. For
    this example, our template will be inline and we will be using the ES2015 template
    syntax. This uses backticks and allows the passing of variables and new lines
    directly into the template without the need to escape them:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个名为`User`的新组件，并为其创建一个模板。在这个例子中，我们的模板将是内联的，并且我们将使用ES2015模板语法。这种语法使用反引号，可以直接将变量和换行符传递到模板中，而无需对它们进行转义：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The variable being output within the template is from the global router instance
    and is the `name` variable within the parameters object. The variable `name` references
    the variable preceded by the colon in the route path, within the `routes` array.
    Within the component template, we can also omit `this` variable from the `$route`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 模板中输出的变量来自全局路由实例，并且是参数对象中的`name`变量。变量`name`引用路由路径中冒号前面的变量，在`routes`数组中。在组件模板中，我们还可以省略`$route`中的`this`变量。
- en: 'Head back to your browser and enter `#/user/sarah` at the end of your URL.
    You should see Hello sarah in the main body of your web page. Viewing the JavaScript
    browser console, you should see the `params` object has a key/value pair of `name:
    sarah` within it:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '返回浏览器，然后在URL末尾输入`#/user/sarah`。您应该在网页的主体中看到Hello sarah。查看JavaScript浏览器控制台，您应该看到`params`对象中有一个键/值对`name:
    sarah`：'
- en: '![](assets/4a642ae5-1ec3-4b35-9d77-815766ecf654.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/4a642ae5-1ec3-4b35-9d77-815766ecf654.png)
- en: 'This variable is also available to us within the component itself. For example,
    if we wanted to capitalize the first letter of our user''s name, we could make
    a computed variable which takes the route parameter and transforms it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此变量也可在组件本身中使用。例如，如果我们想要将用户姓名的第一个字母大写，我们可以创建一个计算变量，该变量接受路由参数并进行转换：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you're not familiar with what the preceding code is doing, it takes the first
    character of the string and makes it uppercase. It then splits the string after
    the first character (that is, the rest of the word) and appends it on the uppercase
    letter.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉前面的代码在做什么，它会获取字符串的第一个字符并将其大写。然后，它在大写字母后拆分字符串（即，单词的其余部分）并将其附加到大写字母上。
- en: Adding this `computed` function and refreshing the app will yield Hello sarah.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此`computed`函数并刷新应用程序将产生Hello sarah。
- en: As mentioned, the route can accept as many parameters as you want and can be
    separated by static or dynamic variables.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，路由可以接受任意数量的参数，并且可以由静态或动态变量分隔。
- en: 'Changing the path to the following (while keeping the component name the same):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将路径更改为以下内容（保持组件名称相同）：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Would mean you would need to go to `/sarah/user/happy` to see the user component.
    You would, however, have access to a new parameter titled `emotion`, which means
    you could use the following template to render sarah is happy!:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您需要转到`/sarah/user/happy`才能看到用户组件。但是，您将可以访问一个名为`emotion`的新参数，这意味着您可以使用以下模板来呈现sarah
    is happy！：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Dynamic routes will come in handy when we come to build our shop over the next
    few chapters, as we'll be using it for both products and categories.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，当我们构建商店时，动态路由将非常有用，因为我们将同时用于产品和类别。
- en: GET parameters
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET参数
- en: 'Along with the dynamic routes, Vue-router handles GET parameters in a really
    simple way. GET parameters are extra URL parameters you can pass to a web page
    that appear as key/value pairs. With GET parameters, the first one is preceded
    by a `?`—this tells the browser to expect parameters. Any further parameters are
    separated by an ampersand. An example would be:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了动态路由，Vue-router还以一种非常简单的方式处理GET参数。GET参数是您可以传递给网页的额外URL参数，它们显示为键/值对。使用GET参数，第一个参数前面有一个`?`-这告诉浏览器要期望参数。任何其他参数都由和号分隔。例如：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This URL would yield `sarah` as the value of `name` and `happy` as the value
    for `emotion`. They are normally used for filtering or search—next time you search
    for something on Google, take a look at the URL and you will notice `?q=Your+search+query`
    in the address bar.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此URL将返回`name`的值为`sarah`，`emotion`的值为`happy`。它们通常用于过滤或搜索-下次在Google上搜索时，请查看URL，您会注意到地址栏中的`?q=Your+search+query`。
- en: 'Vue router makes these parameters available to the developer within the `query`
    object in the `this.$route` variable. Try adding `?name=sarah` to the end of your
    URL and opening the JavaScript developer tool. Inspecting the query object will
    reveal an object with `name` as the key and `sarah` as the value:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Vue路由器将这些参数在`this.$route`变量的`query`对象中提供给开发者。尝试在URL末尾添加`?name=sarah`并打开JavaScript开发者工具。检查查询对象将显示一个以`name`为键，`sarah`为值的对象：
- en: '![](assets/456ca4d1-ec7e-4ea7-9dc1-9016bb558e65.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/456ca4d1-ec7e-4ea7-9dc1-9016bb558e65.png)'
- en: We'll be using the query object when we build the filtering in our shop categories.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建商店类别的过滤器时，我们将使用查询对象。
- en: Using props
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用props
- en: Although using router parameters directly within the component works perfectly
    fine, it is not good practice as it ties the component directly to the route.
    Instead, `props` should be used—in the same way, we used them earlier in the book
    for HTML components. When enabled and declared, the parameter passed in via the
    URL becomes available to use as though it had been passed in via an HTML attribute.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管直接在组件中使用路由参数完全可以正常工作，但这不是一个好的做法，因为它将组件直接与路由绑定在一起。相反，应该使用`props`，就像我们在本书中之前为HTML组件使用它们一样。当启用和声明后，通过URL传递的参数可以像通过HTML属性传递的参数一样使用。
- en: Using props for your route component is a better way to pass options and parameters
    into your route, as it has many benefits. Firstly, it decouples the component
    from a specific URL structure—as you'll see, we can pass props straight to the
    component itself. It also helps make your route component clearer; the incoming
    parameters are clearly laid out within the component itself, and the code is cleaner
    throughout the component.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用props作为路由组件传递选项和参数是一种更好的方式，因为它有很多好处。首先，它将组件与特定的URL结构解耦-正如您将看到的，我们可以直接将props传递给组件本身。它还有助于使您的路由组件更清晰；传入的参数在组件本身中清晰地列出，并且整个组件的代码更清晰。
- en: Props only work with the dynamic routes—GET parameters would still be accessed
    with the preceding technique.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: props仅适用于动态路由-GET参数仍然可以通过前面的技术访问。
- en: 'Using the preceding example, declare the `props` for both the `name` and `emotion`
    parameters. When using props with a URL-based variable, you will want to use the
    `String` data type:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的示例，为`name`和`emotion`参数声明`props`。当使用基于URL的变量时，您将希望使用`String`数据类型：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We now have `this.name` available to us twice—through the `props` and through
    the computed value. However, as we have `this.name` and `this.emotion` via the
    `props`, we can update our component to use these variables, rather than the `$route`
    parameters.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了`this.name`可以通过`props`和计算值两次使用。然而，由于我们通过`props`有了`this.name`和`this.emotion`，我们可以更新我们的组件来使用这些变量，而不是`$route`参数。
- en: 'To avoid conflicts with the prop, update the computed function to be called
    `formattedName()`. We can also remove the variable declaration from the function,
    as the new variable is a lot more readable:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免与prop冲突，将计算函数更新为`formattedName()`。我们还可以从函数中删除变量声明，因为新变量更易读：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Before the `props` work, Vue-router needs to be told to use them with a particular
    route. This is enabled within the `routes` array, on a route-by-route basis and,
    initially, is set with a `props: true` value:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '在`props`起作用之前，需要告诉Vue-router在特定路由中使用它们。这在`routes`数组中启用，逐个路由设置，并且最初设置为`props:
    true`：'
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Setting prop defaults
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置prop默认值
- en: With the route parameters now available as `props`, this gives us the flexibility
    of easily creating a default. If we had wanted to make a parameter optional, we
    would have needed to add several `if()` statements to check the existence of the
    variables.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于路由参数可用作`props`，这使我们可以轻松创建默认值。如果我们想要使参数可选，我们需要添加几个`if()`语句来检查变量的存在。
- en: 'With props, however, we can declare defaults as we did earlier. Add a default
    for the emotion variable:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用props，我们可以像之前一样声明默认值。为情感变量添加一个默认值：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can now create a new route within our router, which uses the same component
    without the final variable. Don''t forget to enable `props` for the new route
    too:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在路由器中创建一个新的路由，该路由使用相同的组件，但没有最后的变量。不要忘记为新路由启用`props`：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, by visiting `/sarah/user`, we should be presented with text that declares
    sarah is happy.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过访问`/sarah/user`，我们应该看到声明sarah很开心的文本。
- en: Using static props
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用静态props
- en: Along with a Boolean value, the props parameter in the route can also accept
    an object with a list of the props to pass. This allows you to utilize the same
    component and alter its state based on the URL, without requiring the variables
    to be passed via the path for example, if you want to activate or deactivate part
    of the template.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 除了布尔值之外，路由中的props参数还可以接受一个带有要传递的props列表的对象。这使您可以使用相同的组件并根据URL更改其状态，而无需通过路径传递变量，例如，如果您想要激活或停用模板的一部分。
- en: When passing the props object in via the URL, it overwrites the whole props
    object, meaning you either have to declare none or all of them. The props variables
    will also take priority over the dynamic, URL-based variables.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过URL传递props对象时，它会覆盖整个props对象，这意味着您必须声明全部或全部。props变量也将优先于动态的基于URL的变量。
- en: 'Update your new `/:name/user` path to include the `props` in the route - remove
    the `:name` variable from the path so it becomes just `/user`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的新的`/:name/user`路径更新为在路由中包含`props` - 从路径中删除`:name`变量，使其变为`/user`：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Navigating to `/user` should reveal the same sentence as we had before. Passing
    `props` "behind the scenes" (not using the URL) is ideal in some scenarios where
    you may not want the user to share the specific URL or alter the app's state based
    on easily altered parameters.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`/user`应该显示与之前相同的句子。在某些情况下，通过“幕后”传递`props`（而不是使用URL）是理想的，因为您可能不希望用户共享特定的URL或根据易于更改的参数更改应用程序的状态。
- en: Nested routes
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套路由
- en: Nested routes differ from sub-routes as they exist *within* a component already
    matching the beginning part of a route. This allows you to show different content
    within an existing view.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套路由与子路由不同，因为它们存在于已经匹配路由开始部分的组件中。这使您可以在现有视图中显示不同的内容。
- en: 'A good example of this would be Twitter. If you visit a Twitter user''s profile
    page, you are able to view who they are following, who follows them, and what
    lists they''ve created. If you observe the URL while you navigate through the
    pages, you will notice a recurring pattern: the username followed by the different
    page. The difference between nested routes and sub-routes is that nested routes
    allow you to keep components the same throughout the different sub-pages (for
    example, the header and sidebar).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是Twitter。如果您访问Twitter用户的个人资料页面，您可以查看他们关注的人，关注他们的人以及他们创建的列表。如果您在浏览页面时观察URL，您会注意到一个重复的模式：用户名后跟不同的页面。嵌套路由和子路由之间的区别在于，嵌套路由允许您在不同的子页面中保持组件相同（例如，标题和侧边栏）。
- en: The advantages of this are that the user can bookmark and share the link, it
    makes the page more accessible, and is good for SEO reasons. None of these advantages
    could be easily achieved using simple toggle or tab boxes to show different content
    in the view.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的优点是用户可以收藏和分享链接，使页面更易访问，并且有利于SEO。使用简单的切换或选项卡框来在视图中显示不同内容，很难实现这些优点。
- en: 'To reproduce the Twitter pattern into a Vue route, it would look like the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Twitter模式复制到Vue路由中，可以按照以下方式进行设置：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If we were to create this with the previous route method, we would have to build
    components for each page which contain the header and user information in the
    sidebar in their templates—that would be a pain if you needed to update the code!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用之前的路由方法来创建这个，我们将不得不为每个页面构建组件，在它们的模板中包含侧边栏中的标题和用户信息——如果您需要更新代码，这将是一件麻烦的事情！
- en: Let's make some nested routes for our About page. We won't be using nested routes
    in our shop app, but it's important to understand the capabilities of Vue router.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的About页面创建一些嵌套路由。我们不会在我们的购物应用程序中使用嵌套路由，但了解Vue路由的功能是很重要的。
- en: 'Create two new components—`AboutContact`, which will display contact information,
    and `AboutFood`, a component that will detail the food you like to eat! Although
    not required, it''s a good idea to keep a reference to the parent component (in
    this case, About) in the component name—this ties together the components when
    you come to look at them later on! Give each component a template with some fixed
    content:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 创建两个新组件——`AboutContact`，用于显示联系信息，以及`AboutFood`，用于详细介绍您喜欢吃的食物！虽然不是必需的，但在组件名称中保留对父组件（在本例中为About）的引用是一个好主意——这样可以在以后查看它们时将组件联系在一起！为每个组件添加一个带有一些固定内容的模板：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The next step is to create the placeholder in your `#about` template for the
    nested routes to render in. The element is exactly the same as one we''ve seen
    before—the `<router-view>` element. To demonstrate that this can be placed anywhere,
    add it between two paragraphs in your template:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在您的`#about`模板中创建用于渲染嵌套路由的占位符。该元素与我们之前看到的元素完全相同——`<router-view>`元素。为了证明它可以放置在任何位置，在模板的两个段落之间添加它：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Viewing the About page in the browser won't render anything, nor will it break
    the app. The next step is to add the nested routes for these components to the
    router. Rather than adding them to the top level `routes` array, we create an
    array inside the `/about` route—with the key of `children`. The syntax of this
    array is an exact replica of the main array—that is, an array of route objects.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看About页面不会渲染任何内容，也不会破坏应用程序。下一步是为这些组件添加嵌套路由到路由器中。我们不是将它们添加到顶级`routes`数组中，而是在`/about`路由内创建一个数组，键为`children`。该数组的语法与主数组完全相同，即路由对象的数组。
- en: Add an object for each of the `routes` containing the `path` and `component`
    keys. The thing to note about the path is that it shouldn't start with a `/` if
    you want the path to be added to the end of the parent.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个`routes`添加一个包含`path`和`component`键的对象。需要注意的是，如果希望路径添加到父路径的末尾，路径不应以`/`开头。
- en: 'For example, if you wanted the URL to be `/about/contact` to render the `AboutContact`
    component, you would make the route component like the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您希望URL为`/about/contact`来渲染`AboutContact`组件，您可以将路由组件设置如下：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'However, if you wanted the URL to be simply `/contact`, but still render the
    `AboutContact` component inside the `About` component, you could add the preceding
    slash. Try viewing the app without the slash, and then with it added, to see the
    difference it makes. If you wanted a sub-route to show when the parent is loaded
    without a second part of the URL, you would use an empty path—`path: ''''`.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，如果你希望URL只是简单地为`/contact`，但仍然在`About`组件内渲染`AboutContact`组件，你可以添加前导斜杠。尝试在没有斜杠的情况下查看应用程序，然后添加斜杠，看看它所产生的差异。如果你希望在父级加载时显示一个子路由，而URL没有第二部分，你可以使用空路径——`path:
    ''''`。'
- en: For now, leave it without the slash and add the preceding `children` array.
    Head to your browser and navigate to the About page. Add `/contact` or `/food`
    to the end of the URL, and notice the new content appear in place of the `<router-link>`
    element you added to the template earlier.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保留没有斜杠，并添加前导的`children`数组。转到浏览器并导航到About页面。在URL的末尾添加`/contact`或`/food`，注意新内容出现在您之前添加到模板中的`<router-link>`元素的位置。
- en: Links can be created to these components from anywhere, in the same fashion
    that you linked the Home and About pages. You can either add them to the `about`
    template, so they only appear when that page has been navigated to, or add them
    to the main navigation in your app view.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从任何地方创建到这些组件的链接，方式与您链接Home和About页面的方式相同。您可以将它们添加到`about`模板中，这样它们只会在导航到该页面时出现，或者将它们添加到应用程序视图中的主导航中。
- en: Creating a 404 page
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个404页面
- en: When building an app or website, despite all good intentions, problems, issues,
    and mistakes do happen. For this reason, it's a good idea to have error pages
    in place. The most common page would be a 404 page—a message displayed when a
    link is incorrect or a page has moved. 404 is the official HTTP code for page
    not found.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建应用程序或网站时，尽管有着良好的意图，问题、错误和失误仍然会发生。因此，设置错误页面是一个好主意。最常见的页面是404页面——当链接不正确或页面已移动时显示的消息。404是页面未找到的官方HTTP代码。
- en: As mentioned earlier, Vue-router will match the routes based on a first-come-first-served
    principle. We can use this to our advantage by using a wildcard (`*`) character
    as the last route. As the wildcard matches *every *route, only URLs which have
    not matched a previous route will be caught by this one.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Vue-router将根据先到先得的原则匹配路由。我们可以利用这一点，将通配符（`*`）字符作为最后一个路由。由于通配符匹配*每个*路由，只有未匹配到先前路由的URL才会被此路由捕获。
- en: 'Create a new component titled `PageNotFound` with a simple template, and add
    a new route which uses the wildcard character as the path:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`PageNotFound`的新组件，使用简单的模板，并添加一个新的路由，使用通配符作为路径：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Open the app up in the browser and type anything at the end of the URL (except
    `about`) and press *Enter*—you should be presented with the 404 heading.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开应用程序，输入URL的末尾的任何内容（除了`about`），然后按下*Enter*键，您应该看到404标题。
- en: Although this is simulating a page not found request, it is not actually sending
    the correct HTTP code to the browser. If you are using a Vue web app in production
    it is a good idea to set up server-side error checking, so in the instance of
    an incorrect URL the browser can be correctly notified.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是模拟一个页面未找到的请求，但它实际上没有向浏览器发送正确的HTTP代码。如果您在生产中使用Vue Web应用程序，建议设置服务器端错误检查，以便在URL不正确的情况下可以正确通知浏览器。
- en: Naming components, routes, and views
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名组件、路由和视图
- en: Adding names to your routes and components is not required when using `Vue-router`,
    but is good practice to do so and a good habit to get into.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`Vue-router`时，不需要为路由和组件添加名称，但这是一个好的实践和一个好习惯。
- en: Naming components
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名组件
- en: Components with names allow you to debug your errors more easily. In Vue, when
    a JavaScript error is thrown from a component, it will give you the name of that
    component, rather than listing `Anonymous` as the component.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 具有名称的组件使您能够更轻松地调试错误。在Vue中，当从组件中抛出JavaScript错误时，它将给出该组件的名称，而不是将`Anonymous`列为组件。
- en: 'An example of this would be if you tried to output a variable of `{{ test }}`
    in the food component—one that isn''t available. By default, a JavaScript console
    error would look like the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您尝试在食品组件中输出一个不可用的变量`{{ test }}`，默认情况下，JavaScript控制台错误将如下所示：
- en: '![](assets/347a8709-6e4e-4b4a-9355-8d11bcbb4002.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/347a8709-6e4e-4b4a-9355-8d11bcbb4002.png)'
- en: Note the two `<Anonymous>` components in the stack.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意堆栈中的两个`<Anonymous>`组件。
- en: 'By adding names to our components, we can easily identify where the problem
    lies. Names have been added to both the `About` and `AboutFood` components in
    the following example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为我们的组件添加名称，我们可以轻松地确定问题所在。在下面的示例中，已经为`About`和`AboutFood`组件添加了名称：
- en: '![](assets/143646ff-e373-42ac-ace2-b2e48a68ae04.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/143646ff-e373-42ac-ace2-b2e48a68ae04.png)'
- en: You can easily see the error is in the `<AboutFood>` component.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地看到错误在`<AboutFood>`组件中。
- en: 'Adding a name to a component is as simple as adding a key of name to your object,
    with the name as the value. These names adhere to the same rules as to when we
    were creating our HTML element components: no spaces, but hyphens and letters
    are allowed. To allow me to quickly identify the code, I chose to name my component
    the same as the variable defining it:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为组件添加名称就像在对象中添加一个名为`name`的键，并将名称作为值一样简单。这些名称遵循与创建HTML元素组件时相同的规则：不允许空格，但允许连字符和字母。为了让我能够快速识别代码，我选择将组件命名为与定义它的变量相同：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Naming routes
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名路由
- en: Another object you are able to name when using `VueRouter` is the route itself.
    This gives you the ability to simplify a route's location and update the path,
    without needing to find and replace all the instances in the app.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`VueRouter`时，您还可以为路由本身命名。这使您能够简化路由的位置并更新路径，而无需在应用程序中查找和替换所有实例。
- en: 'Add the `name` key to your `routes`, as shown in the following example:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下示例将`name`键添加到您的`routes`中：
- en: '[PRE32]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You can now use that name when creating your `router-link` component, like
    so:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在创建`router-link`组件时使用该名称，如下所示：
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Note the colon before the `to` attribute. This ensures the contents are parsed
    as an object, not a literal string. Another advantage of using named routes is
    being able to pass specific attributes to our dynamic paths. Using the example
    from earlier in this chapter, we can build the URL in a programmatic way, abstracting
    the data away from the path construction. This is where named `routes` really
    come into their own. Say we had the following path:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`to`属性前面的冒号。这确保内容被解析为对象，而不是字面字符串。使用命名路由的另一个优点是能够向我们的动态路径传递特定属性。使用本章前面的示例，我们可以以编程方式构建URL，将数据从路径构建中抽象出来。这就是命名路由真正发挥作用的地方。假设我们有以下路径：
- en: '[PRE34]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We need to pass in a name and emotion variable to the URL for the component
    to render. We can pass in as we did before, directly to the URL or, alternatively,
    use the `to` object notation with a named route:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向URL传递一个名称和情感变量以供组件渲染。我们可以像之前那样直接传递给URL，或者使用带有命名路由的`to`对象表示法：
- en: '[PRE35]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Viewing this in the browser will show the anchor link has been generated correctly:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看将显示生成的锚链接：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This gives us the flexibility to rearrange the URL, using the variables, without
    needing to update the rest of the app. If you wanted to pass parameters at the
    end of the URL (for example, `?name=sarah`), the `params` key can be changed to
    `query`, as it follows the same format:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够重新排列URL，使用变量，而无需更新应用的其余部分。如果您想在URL末尾传递参数（例如`?name=sarah`），则可以将`params`键更改为`query`，因为它遵循相同的格式：
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'With the path reconfigured not to accept parameters, it will generate the following
    link:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重新配置路径以不接受参数，将生成以下链接：
- en: '[PRE38]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Be careful when interchanging `params` and `query` - as they can affect whether
    you use `path` or `name`. When using `path`, the `params` object will be ignored,
    whereas the `query` one will not. To use the `params` object, you need to use
    a named route. Alternatively, pass the parameters into the `path` with the `$`
    variable.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在交换`params`和`query`时要小心-它们可能会影响您使用`path`还是`name`。当使用`path`时，`params`对象将被忽略，而`query`对象不会被忽略。要使用`params`对象，您需要使用命名路由。或者，使用`$`变量将参数传递到`path`中。
- en: Named views
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名视图
- en: Vue router also allows you to name the views, letting you pass in different
    components to different sections of the app. An example of this might be a shop,
    where you have a sidebar and main content area. Different pages may utilize these
    areas in different ways.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Vue路由还允许您为视图命名，从而可以将不同的组件传递给应用程序的不同部分。一个例子是商店，其中有侧边栏和主要内容区域。不同的页面可以以不同的方式利用这些区域。
- en: The About page may use the main content to show the About content while using
    the sidebar to show contact details. The shop page, however, will use the main
    content to list the products and the sidebar for displaying the filters.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: About页面可以使用主要内容显示关于内容，同时使用侧边栏显示联系方式。然而，商店页面将使用主要内容列出产品，并使用侧边栏显示过滤器。
- en: 'To do this, create a second `router-view` element as a sibling to your original
    one. Leave the original one in place, but add a `name` attribute to the second,
    with an appropriate title:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请创建第二个`router-view`元素作为原始元素的兄弟元素。保留原始元素的位置，但是给第二个元素添加一个`name`属性，并给它一个适当的标题：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: When declaring your routes in the router instance, we are now going to use a
    new key, `components`, and remove the previous singular `component` key. This
    accepts an object with key-value pairs of the name of the view and the name of
    the component.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由实例中声明路由时，我们现在将使用一个新的键`components`，并删除之前的单数`component`键。这个键接受一个对象，其中包含视图的名称和组件的名称的键值对。
- en: It's advisable to leave your main route unnamed, so you don't need to update
    every route. If you decide to name your main route, you would be required to do
    this next step for every route in your app.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 建议将主路由保持未命名，这样您就不需要更新每个路由。如果您决定给主路由命名，那么您需要为应用中的每个路由执行下一步操作。
- en: Update the `About` route to use this new key and make it into an object. The
    next step is to tell the code where each component will go.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`About`路由以使用这个新的键，并将其转换为一个对象。下一步是告诉代码每个组件将放在哪里。
- en: 'Using default as the key, set the `About` component as the value. This puts
    the content from the About component in your unnamed `router-view`, the main one.
    This is also what using the singular `component` key is shorthand for:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`default`作为键，将`About`组件设置为值。这将把About组件的内容放在未命名的`router-view`中，即主要的那个。这也是使用单数`component`键的简写方式：
- en: '[PRE40]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, add a second key-value, specifying the name of the second router-view,
    `sidebar`. Name the component you want to populate this area when the `/about` URL is
    navigated to. For this, we will use the `AboutContact` component:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加第二个键值对，指定第二个`router-view`的名称为`sidebar`。当导航到`/about` URL时，将使用您想要填充此区域的组件，我们将使用`AboutContact`组件：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Running the app in your browser will render both components, with the contents
    of the contact component appearing in the sidebar.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行应用程序将呈现两个组件，联系组件的内容将显示在侧边栏中。
- en: Programmatically navigating with, redirecting, and adding an alias
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以编程方式导航、重定向和添加别名
- en: While building your app, there may be situations that require some different
    navigation techniques. These may be navigating programmatically, for example in
    a component or the main Vue instance, redirecting users when they hit a specific
    URL, or loading the same component with various URLs.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建应用程序时，可能会遇到一些需要不同导航技术的情况。这些可能是以编程方式导航，例如在组件或主Vue实例中，当用户访问特定URL时重定向用户，或者使用不同的URL加载相同的组件。
- en: Navigating programmatically
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以编程方式导航
- en: You may want to alter the path, URL, or user flow from the code, a component,
    or action. An example of this might be sending the user to the basket after they've
    added an item.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望从代码、组件或操作中更改路径、URL或用户流程。一个例子是在用户添加了一个项目后将其发送到购物篮。
- en: 'To do this, you use a `push()` function on the router instance. The value of
    push can either be a string for a direct URL or it can accept an object to pass
    named routes or route parameters. The allowed contents of the `push` function
    are exactly the same as the `to=""` attribute on the `router-link` element. For
    example:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您可以在路由器实例上使用`push()`函数。push的值可以是直接URL的字符串，也可以是接受命名路由或路由参数的对象。`push`函数的允许内容与`router-link`元素上的`to=""`属性完全相同。例如：
- en: '[PRE42]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Alternatively, you could direct to a named route with parameters:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用带参数的命名路由进行重定向：
- en: '[PRE43]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Redirecting
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向
- en: Redirecting using `VueRouter` is fairly straightforward. An example of a redirect
    might be if you move your `/about` page to the `/about-us` URL. You will want
    to redirect the first URL to the second, in case anyone has shared or bookmarked
    your link, or in case a search engine has cached the URL.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`VueRouter`进行重定向非常简单。重定向的一个例子可能是将您的`/about`页面移动到`/about-us` URL。您将希望将第一个URL重定向到第二个URL，以防有人分享或收藏了您的链接，或者搜索引擎缓存了URL。
- en: You may be tempted to create a basic component which, when created, uses the
    `router.push()` function to send the user to the new URL.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想要创建一个基本组件，当创建时使用`router.push()`函数将用户发送到新的URL。
- en: 'Instead, you can add a route and specify the redirect within that:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，您可以添加一个路由并在其中指定重定向：
- en: '[PRE44]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Once again, the contents of the redirect key can be a literal string or an object—much
    like the `push()` function. With the preceding, if the user visits `/about`, they
    will instantly be redirected to `/about-us` and the `About` component shown.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，重定向键的内容可以是一个字面字符串或一个对象，就像`push()`函数一样。在上述示例中，如果用户访问`/about`，他们将立即重定向到`/about-us`并显示`About`组件。
- en: Alias routes
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 别名路由
- en: There may be circumstances where you want to show the same component under two
    URLs. Although not recommended as standard practice, there are some edge cases
    where this is required.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有一些情况下，您希望在两个URL下显示相同的组件。虽然不推荐作为标准做法，但在某些边缘情况下，这是必需的。
- en: 'The alias key gets added to an existing route and accepts just a string of
    the path. Using the preceding example, the following will show the `About` component,
    whether the user visits `/about` or `/about-us`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 别名键会添加到现有路由中，并接受一个路径的字符串。使用上述示例，无论用户访问`/about`还是`/about-us`，都将显示`About`组件：
- en: '[PRE45]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be familiar with Vue-router, how to initialize it, what options
    are available, and how to create new routes—both static and dynamic. In the next
    few chapters, we'll begin creating our shop, starting with loading some shop data
    and creating a product page.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该熟悉Vue-router，知道如何初始化它，了解可用的选项，以及如何创建静态和动态的新路由。在接下来的几章中，我们将开始创建我们的商店，首先加载一些商店数据并创建一个产品页面。
