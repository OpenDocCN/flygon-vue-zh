- en: Data Binding, Events, and Computed Properties
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据绑定、事件和计算属性
- en: '**Data** is the most valuable asset in the world right now, and knowing how
    to manage it is a must. In Vue, we have the power to choose how we can gather
    this data, manipulate it as we want, and deliver it to the server.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据**是当今世界上最有价值的资产，知道如何管理它是必须的。在Vue中，我们有权利选择如何收集这些数据，按照我们的意愿进行操作，并将其传递到服务器。'
- en: In this chapter, we will learn more about the process of data manipulation and
    data handling, form validations, data filtering, how to display this data to the
    user, and how to present it in a way that is different from what we have inside
    our application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更多地了解数据处理和数据处理过程，表单验证，数据过滤，如何向用户显示这些数据，以及如何以与应用程序内部不同的方式呈现它。
- en: We will learn how to use various `vue-devtools` so that we can go deep inside
    the Vue components and see what is happening to our data and application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何使用各种`vue-devtools`，以便我们可以深入了解Vue组件并查看我们的数据和应用程序发生了什么。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Creating your first project with the Vue CLI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue CLI创建您的第一个项目
- en: Creating the hello world component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建hello world组件
- en: Creating an input form with two-way data binding
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有双向数据绑定的输入表单
- en: Adding an event listener to an element
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在元素上添加事件监听器
- en: Removing the `v-model` directive from the input
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从输入中删除`v-model`指令
- en: Creating a dynamic to-do list
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建动态待办事项列表
- en: Creating computed properties and understanding how they work
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建计算属性并了解它们的工作原理
- en: Displaying cleaner data and text with custom filters
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义过滤器显示更清洁的数据和文本
- en: Creating filters and sorters for a list
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为列表创建过滤器和排序器
- en: Creating conditional filters to sort list data
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建条件过滤器以对列表数据进行排序
- en: Adding custom styles and transitions
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自定义样式和过渡
- en: Using `vue-devtools` to debug your application
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`vue-devtools`调试您的应用程序
- en: Let's get started!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using **Node.js** and **Vue CLI****.**
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用**Node.js**和**Vue CLI**。
- en: Attention, Windows users – you need to install an `npm` package called `windows-build-tools` to
    be able to install the following required packages. To do this, open PowerShell
    as administrator and execute the
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Windows用户 - 您需要安装一个名为`windows-build-tools`的`npm`包，以便能够安装以下所需的包。要做到这一点，以管理员身份打开PowerShell并执行
- en: '`> npm install -g windows-build-tools` command.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`命令。'
- en: 'To install the **Vue CLI**, you need to open a Terminal (macOS or Linux) or
    Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**Vue CLI**，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating your first project with the Vue CLI
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue CLI创建您的第一个项目
- en: When the Vue team realized that developers were having problems creating and
    managing their applications, they saw an opportunity to create a tool that could help developers
    around the world. With this, the Vue CLI project was born.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当Vue团队意识到开发人员在创建和管理他们的应用程序时遇到问题时，他们看到了一个机会，可以创建一个工具来帮助世界各地的开发人员。有了这个，Vue CLI项目诞生了。
- en: The Vue CLI tool is a CLI tool that is used in terminal command lines, such
    as Windows PowerShell, Linux Bash, or macOS Terminal. It was created as a starting
    point for the development of Vue, where developers can start a project and manage
    and build it smoothly. The focus of the Vue CLI team was to give developers the
    opportunity to have more time to think about the code and spend less time on the
    tooling needed to put their code into production, adding new plugins or a simple `hot-module-reload`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Vue CLI 工具是一个在 terminal 命令行中使用的 CLI 工具，如 Windows PowerShell、Linux Bash 或 macOS
    Terminal。它被创建为 Vue 开发的起点，开发人员可以启动一个项目并顺利地管理和构建它。Vue CLI 团队的重点是为开发人员提供更多时间思考代码，花费更少的时间在工具上，将他们的代码投入生产，添加新的插件或简单的 `hot-module-reload`。
- en: The Vue CLI tool has been tweaked in such a way that there is no need to eject
    your tooling code outside the CLI before putting it into production.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Vue CLI 工具已经进行了调整，无需在将其投入生产之前将工具代码弹出 CLI。
- en: When version 3 was released, the Vue UI project was added to the CLI as the
    main function, transforming the CLI commands into a more complete visual solution
    with lots of new additions and improvements.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当版本 3 发布时，Vue UI 项目被添加到 CLI 中作为主要功能，将 CLI 命令转换为更完整的可视解决方案，并增加了许多新的功能和改进。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件是 Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方所需的 Node.js 全局对象如下：
- en: '`@vue/cli`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To create a Vue CLI project, follow these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 Vue CLI 项目，请按照以下步骤进行：
- en: 'We need to open a Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在 Terminal (macOS 或 Linux) 或 Command Prompt/PowerShell (Windows) 中执行以下命令：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The CLI will ask some questions that will help you create the project. You
    can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar* to
    select an option:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI 会询问一些问题，这些问题将帮助你创建项目。你可以使用箭头键进行导航，*Enter* 键继续，*Spacebar* 选择选项：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are two methods for starting a new project. The default method is a basic `babel` and `eslint` project
    without any plugin or configuration, but there's also `Manually` mode, where you
    can select more modes, plugins, linters, and options. We will go for `Manually`.‌
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两种方法可以启动一个新项目。默认方法是一个基本的 `babel` 和 `eslint` 项目，没有任何插件或配置，但也有 `手动` 模式，你可以选择更多模式、插件、linters
    和选项。我们将选择 `手动` 模式。
- en: 'At this point, we will be asked about the features that we will want for our
    project. These features are some Vue plugins such as Vuex or Router (Vue-Router),
    testers, linters, and more. For this project, we will choose `CSS Pre-processors` and
    press *Enter* to continue:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，我们将被询问关于我们希望为我们的项目选择的功能。这些功能是一些 Vue 插件，如 Vuex 或 Router (Vue-Router)、测试器、linters
    等。对于这个项目，我们将选择 `CSS 预处理器` 并按 *Enter* 继续：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The CLI will ask you to choose a Vue version to use to start your application.
    We will choose `3.x (Preview)` here. Press *Enter* to continue:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI 会要求你选择一个 Vue 版本来启动你的应用程序。我们将在这里选择 `3.x (Preview)`。按 *Enter* 继续：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It''s possible to choose the main **Cascading Style Sheets** (**CSS**) preprocessors
    to be used with Vue; that is, `Sass`, `Less`, and `Stylus`. It''s up to you to choose which
    fits your design the most and is best for you:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以选择与 Vue 一起使用的主要 **层叠样式表** (**CSS**) 预处理器，即 `Sass`、`Less` 和 `Stylus`。由你选择哪种最适合你的设计并且最适合你：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It''s time to format your code. You can choose between `AirBnB`, `Standard`,
    and `Prettier` with a basic config. Those rules that are imported inside `ESLint` can
    always be customized without any problem, and there is a perfect one for your
    needs. You find out what is best for you, do the following:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候格式化您的代码了。您可以在`AirBnB`、`Standard`和`Prettier`之间进行选择，并使用基本配置。在`ESLint`中导入的这些规则总是可以自定义，没有任何问题，并且有一个完美的规则适合您的需求。找出对您来说最好的方法，然后执行以下操作：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the linting rules have been set, we need to define when they are applied
    to our code. They can either be applied on save or fixed on commit:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦代码检查规则被设置，我们需要定义它们何时应用于我们的代码。它们可以在保存时应用，或者在提交时进行修复：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once all those plugins, linters, and processors have been defined, we need
    to choose where the settings and configs will be stored. The best place to store
    them is in a dedicated file, but it is also possible to store them in the `package.json` file:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有这些插件、代码检查器和处理器都被定义，我们需要选择设置和配置存储的位置。最好的存储位置是在一个专用文件中，但也可以将它们存储在`package.json`文件中：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, you can choose if you want to make this selection a preset for future
    projects so that you don''t need to reselect everything again:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以选择是否将此选择作为将来项目的预设，这样您就不需要再次重新选择所有内容。
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The CLI will automatically create the folder with the name you set in *step
    1*, install everything, and configure the project.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将自动创建以*步骤1*中设置的名称命名的文件夹，安装所有内容并配置项目。
- en: 'With that, you can now navigate and run the project. The basic commands of
    Vue CLI projects are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，现在您可以导航并运行项目了。Vue CLI项目的基本命令如下：
- en: '`npm run serve`: For running a development server locally'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run serve`：在本地运行开发服务器'
- en: '`npm run build`: For building and minifying the application for deployment'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build`：用于构建和缩小应用程序以进行部署'
- en: '`npm run lint`: To execute the lint on the code'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run lint`：对代码执行lint'
- en: You can execute these commands via the Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过终端（macOS或Linux）或命令提示符/PowerShell（Windows）执行这些命令。
- en: There's more...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The CLI has a tool inside it called Vue UI that helps you manage your Vue projects. This
    tool will take care of the project's dependencies, plugins, and configurations.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: CLI内部有一个名为Vue UI的工具，可帮助您管理Vue项目。这个工具将负责项目的依赖关系、插件和配置。
- en: Each `npm` script in the Vue UI tool is known as a Task, and on those tasks,
    you can gather real-time statistics such as the size of the assets, modules, and
    dependencies; the numbers of errors or warnings; and more deep networking data
    for fine-tuning your application.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Vue UI工具中的每个`npm`脚本都被称为一个任务，在这些任务中，您可以收集实时统计数据，如资产、模块和依赖项的大小；错误或警告的数量；以及更深入的网络数据，以微调您的应用程序。
- en: 'To enter the Vue UI interface, you need to open a Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要进入Vue UI界面，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See also
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about the Vue CLI project at [https://cli.vuejs.org/guide/](https://cli.vuejs.org/guide/).
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://cli.vuejs.org/guide/](https://cli.vuejs.org/guide/)找到有关Vue CLI项目的更多信息。
- en: You can find more information about the development of Vue CLI plugins at [https://cli.vuejs.org/dev-guide/plugin-dev.html](https://cli.vuejs.org/dev-guide/plugin-dev.html).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[https://cli.vuejs.org/dev-guide/plugin-dev.html](https://cli.vuejs.org/dev-guide/plugin-dev.html)找到有关Vue
    CLI插件开发的更多信息。
- en: Creating the hello world component
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建hello world组件
- en: A Vue application is a combination of various components, bound together and
    orchestrated by the Vue framework. Knowing how to make your component is important. Each
    component is like a brick in the wall and needs to be made in a way that, when
    placed, doesn't end up needing other bricks to be reshaped in different ways around
    it. In this recipe, we are going to learn how to make a base component while following
    some important principles that focus on organization and clean code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Vue应用程序是由各种组件组合在一起，并由Vue框架编排的。知道如何制作您的组件是很重要的。每个组件就像墙上的一块砖，需要以一种方式制作，当放置时，不需要其他砖块以不同的方式重新塑造。在这个教程中，我们将学习如何制作一个基础组件，同时遵循一些重要的原则，重点放在组织和清晰的代码上。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: To start our component, we can create our Vue project with the Vue CLI, as we
    learned in the *Creating your first project with the Vue CLI* recipe, or start
    a new one.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的组件，我们可以使用Vue CLI创建我们的Vue项目，就像我们在*使用Vue CLI创建你的第一个项目*中学到的那样，或者开始一个新的项目。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'To start a new component, open a Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的组件，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The **Command-Line Interface** (**CLI**) will ask some questions that will
    help you create the project. You can use the arrow keys to navigate, the *Enter* key
    to continue, and the *Spacebar* to select an option. Choose the **`default`** option:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令行界面**（**CLI**）将询问一些问题，这些问题将帮助您创建项目。您可以使用箭头键导航，使用*Enter*键继续，使用*Spacebar*选择选项。选择**`default`**选项：'
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s create our first `hello world` component by following these steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤创建我们的第一个`hello world`组件：
- en: Let's create a new file called `CurrentTime.vue` file in the `src/components` folder.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`src/components`文件夹中创建一个名为`CurrentTime.vue`的新文件。
- en: 'In this file, we will start with the `<template>` part of our component. It
    will be a shadowed-box card that will display the current date, formatted:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将从组件的`<template>`部分开始。它将是一个阴影框卡片，显示当前日期，格式化：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we need to create the `<script>` part. We will start with the `name` property.
    This will be used when debugging our application with `vue-devtools` to identify
    our component and helps the **Integrated Development Environment** (**IDE**) too.
    For the `getCurrentDate` computed property, we will create a `computed` property
    that will return the current date, formatted by the `Intl` browser function:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建`<script>`部分。我们将从`name`属性开始。这将在使用`vue-devtools`调试我们的应用程序时使用，以识别我们的组件，并帮助**集成开发环境**（**IDE**）。对于`getCurrentDate`计算属性，我们将创建一个`computed`属性，它将返回当前日期，由`Intl`浏览器函数格式化：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For styling our box, we need to create a `style.css` file in the `src` folder,
    then add the `cardBox` style to it:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了为我们的盒子设置样式，我们需要在`src`文件夹中创建一个`style.css`文件，然后将`cardBox`样式添加到其中：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `App.vue` file, we need to import our component so that we can see it:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们需要导入我们的组件，这样我们才能看到它：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `main.js` file, we need to import the `style.css` file so that it''s
    included in the Vue application:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.js`文件中，我们需要导入`style.css`文件，以便它包含在Vue应用程序中：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 记住始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: 'Here is the component rendered and running:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染和运行的组件：
- en: '![](assets/e36e209b-3257-4c7f-9aaa-203af1535c44.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e36e209b-3257-4c7f-9aaa-203af1535c44.png)'
- en: How it works...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Vue component works almost like the Node.js packages. To use it in your
    code, you need to import the component and then declare it inside the `components` property
    on the component you want to use.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Vue组件几乎与Node.js包一样工作。要在代码中使用它，您需要导入组件，然后在要使用的组件的`components`属性中声明它。
- en: Like a wall of bricks, a Vue application is made of components that call and
    use other components.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一堵砖墙，Vue应用程序由调用和使用其他组件的组件组成。
- en: For our component, we used the `Intl.DateTimeFormat` function, a native function
    that can be used to format and parse dates to declared locations. To get the local
    format, we used the navigator global variable.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的组件，我们使用了`Intl.DateTimeFormat`函数，这是一个本机函数，可用于将日期格式化和解析为声明的位置。为了获得本地格式，我们使用了navigator全局变量。
- en: See also
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find out more information about `Intl.DateTimeFormat` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat)找到有关`Intl.DateTimeFormat`的更多信息。
- en: You can find out more information about Vue components at [https://v3.vuejs.org/guide/single-file-component.html](https://v3.vuejs.org/guide/single-file-component.html).
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/single-file-component.html](https://v3.vuejs.org/guide/single-file-component.html)找到有关Vue组件的更多信息。
- en: Creating an input form with two-way data binding
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用双向数据绑定创建输入表单
- en: To gather data on the web, we use HTML form inputs. In Vue, it's possible to
    use a two-way data binding method, where the value of the input on the **Document
    Object Model** (**DOM**) is passed to the JavaScript – or vice versa.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在网上收集数据，我们使用HTML表单输入。在Vue中，可以使用双向数据绑定方法，其中DOM上输入的值传递给JavaScript，反之亦然。
- en: This makes the web form more dynamic, giving you the possibility to manage,
    format, and validate the data before saving or sending the data back to the server.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Web表单更加动态，使您有可能在保存或将数据发送回服务器之前管理、格式化和验证数据。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: To start our component, we can create our Vue project with the Vue CLI, as we
    learned in the *Creating your first project with the Vue CLI* recipe, or use the project from
    the *Creating the hello world component* recipe.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用Vue CLI创建我们的Vue项目，就像我们在*使用Vue CLI创建您的第一个项目*配方中学到的那样，或者使用*创建hello
    world组件*配方中的项目。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create an input form with a two-way data binding:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建具有双向数据绑定的输入表单：
- en: Let's create a new file called `TaskInput.vue` in the `src/components` folder.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`src/components`文件夹中创建一个名为`TaskInput.vue`的新文件。
- en: 'In this file, we''re going to create a component that will have a text input
    and some display text. This text will be based on what is typed in as the text
    input. At the `<template>` part of the component, we need to create an HTML input
    and a `mustache` variable that will receive and render the data:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将创建一个组件，它将有一个文本输入和一些显示文本。这个文本将基于文本输入中键入的内容。在组件的`<template>`部分，我们需要创建一个HTML输入和一个`mustache`变量，用于接收和呈现数据：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, on the `<script>` part of the component, we will name it and add the task
    to the `data` property. Since the data always needs to be a returned `Object`,
    we will use an arrow function to return an `Object` directly:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在组件的`<script>`部分，我们将对其命名并将任务添加到`data`属性中。由于数据始终需要返回一个`Object`，我们将使用箭头函数直接返回一个`Object`：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We need to add some style to this component. In the `<style>` part of the component,
    we need to add the `scoped` attribute so that the style only remains bound to
    the component and won''t mix with other **Cascading Style Sheets** (**CSS**) rules:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为这个组件添加一些样式。在组件的`<style>`部分，我们需要添加`scoped`属性，以便样式仅保持在组件中，不会与其他**层叠样式表**（**CSS**）规则混合：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we need to import this component into our `App.vue` file:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将这个组件导入到我们的`App.vue`文件中：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: 'Here is the component rendered and running:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染和运行的组件：
- en: '![](assets/87548754-ee45-4945-b465-041190016424.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/87548754-ee45-4945-b465-041190016424.png)'
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you create an HTML `input` element and add a `v-model` to it, you are passing
    a directive, built into Vue, that checks the input type and gives us sugar syntax
    for the input. This handles updating the value of the variable and the DOM.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个HTML`input`元素并为其添加`v-model`时，您正在传递一个内置到Vue中的指令，该指令检查输入类型并为输入提供糖语法。这处理更新变量和DOM的值。
- en: This model is what is called **two-way data binding**. If the variable is changed by
    the code, the DOM will rerender, and if it's changed by the DOM via user input,
    such as `input-form`, the JavaScript code can then execute a function.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型被称为**双向数据绑定**。如果变量被代码更改，DOM将重新渲染，如果它被DOM通过用户输入更改，比如`input-form`，那么JavaScript代码可以执行一个函数。
- en: See also
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find out more information about the form input bindings at [https://v3.vuejs.org/guide/forms.html](https://v3.vuejs.org/guide/forms.html).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/forms.html](https://v3.vuejs.org/guide/forms.html)找到有关表单输入绑定的更多信息。
- en: Adding an event listener to an element
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向元素添加事件侦听器
- en: The most common method of parent-child communication in Vue is through props
    and events. In JavaScript, it's common to add event listeners to elements of the
    DOM tree to execute functions on specific events. In Vue, it's possible to add
    listeners and name them as you wish, rather than sticking to the names that exist
    on the JavaScript engine.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中，父子通信的最常见方法是通过props和events。在JavaScript中，通常会向DOM树的元素添加事件侦听器，以在特定事件上执行函数。在Vue中，可以添加监听器并根据需要命名，而不是坚持JavaScript引擎上存在的名称。
- en: In this recipe, we are going to learn how to create custom events and how to
    emit then.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何创建自定义事件以及如何发出它们。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: To start our component, we can create our Vue project with the Vue CLI, as we
    learned in the *Creating your first project with the Vue CLI* recipe, or use the
    project from the *Creating an input form with two-way data binding* recipe.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用Vue CLI创建我们的Vue项目，就像我们在*使用Vue CLI创建您的第一个项目*配方中学到的那样，或者使用*使用双向数据绑定创建输入表单*配方中的项目。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to add an event listener to an element in Vue:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为Vue中的元素添加事件监听器：
- en: Create a new component or open the `TaskInput.vue` file.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新组件或打开`TaskInput.vue`文件。
- en: 'At the `<template>` part, we are going to add a button element and add an event
    listener to the button click event with the `v-on` directive. We will remove the `{{
    task }}` variable from the component because from now on, it will be emitted and
    won''t be displayed on the component anymore:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，我们将添加一个按钮元素，并使用`v-on`指令为按钮点击事件添加一个事件监听器。我们将从组件中删除`{{ task }}`变量，因为从现在开始，它将被发出并且不再显示在组件上：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'On the `<script>` part of the component, we need to add a method that will
    handle the click event. This method will be named `addTask`. It will emit an event
    called `add-task` and send the task to the data. After that, the task on the component
    will be reset:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件的`<script>`部分，我们需要添加一个处理点击事件的方法。这个方法将被命名为`addTask`。它将发出一个名为`add-task`的事件，并将任务发送到数据中。之后，组件上的任务将被重置：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `App.vue` file, we need to add an event listener bind to the component.
    This listener will be attached to the `add-task` event. We will use the shortened
    version of the `v-on` directive, `@`. When it''s fired, the event will call the
    `addNewTask` method, which will send an alert stating that a new task was added:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们需要为组件添加一个事件监听器绑定。这个监听器将附加到`add-task`事件上。我们将使用`v-on`指令的缩写版本`@`。当它被触发时，事件将调用`addNewTask`方法，该方法将发送一个警报，说明已添加了一个新任务：
- en: '[PRE26]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, let''s create the `addNewTask` method. This will receive the task as a
    parameter and show an alert to the user, stating that the task was added:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建`addNewTask`方法。这将接收任务作为参数，并向用户显示一个警报，说明已添加了任务：
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE28]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: 'Here is the component rendered and running:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是渲染和运行的组件：
- en: '![](assets/10282a27-e2db-4efe-8182-9e896614c2e7.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/10282a27-e2db-4efe-8182-9e896614c2e7.png)'
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The HTML events are read by Vue with the `v-on` event handling directive. When
    we attached the `v-on:click` directive to the button, we added a listener to the
    button so that a function will be executed when the user clicks on it.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Vue使用`v-on`事件处理指令来读取HTML事件。当我们将`v-on:click`指令附加到按钮时，我们为按钮添加了一个监听器，以便在用户单击按钮时执行一个函数。
- en: The function is declared on the component methods. This function, when called,
    will emit an event, denoting that any component using this component as a child
    can listen to it with the `v-on` directive.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数在组件方法中声明。当调用此函数时，将发出一个事件，表示任何使用此组件作为子组件的组件都可以使用`v-on`指令监听它。
- en: See also
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find out more information about event handling at [https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html)找到有关事件处理的更多信息。
- en: Removing the v-model directive from the input
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从输入中删除v-model指令
- en: What if I told you that behind the magic of `v-model`, there is a lot of code
    that makes our magic sugar syntax happen? What if I told you that the rabbit hole
    can go deep enough that you can control everything that can happen with the events
    and values of the inputs?
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我告诉你，在`v-model`的魔术背后，有很多代码使我们的魔术糖语法发生？如果我告诉你，兔子洞可以深入到足以控制输入的事件和值的一切？
- en: In this recipe, we will learn how to extract the sugar syntax of the `v-model` directive
    and transform it into the base syntax behind it.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何提取`v-model`指令的糖语法，并将其转换为其背后的基本语法。
- en: Getting ready
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: To start our component, we can create our Vue project with the Vue CLI, as we
    learned in the *Creating your first project with the Vue CLI* recipe, or use the
    project from the *Adding an event listener to an element* recipe.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用Vue CLI创建我们的Vue项目，就像我们在*使用Vue CLI创建您的第一个项目*配方中学到的那样，或者使用*向元素添加事件监听器*配方中的项目。
- en: How to do it...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'By performing the following steps, we will remove the `v-model` directive sugar
    syntax from the input:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤，我们将从输入中删除`v-model`指令的糖语法：
- en: Open the `TaskInput.vue` file.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`TaskInput.vue`文件。
- en: 'At the `<template>` block of the component, find the `v-model` directive. We
    need to remove the `v-model` directive. Then, we need to add a new bind to the
    input called `v-bind:value` or the shortened version, `:value`, and an event listener
    to the HTML `input` element. We need to add an event listener to the `input` event
    with the `v-on:input` directive or the shortened version, `@input`. The input
    bind will receive the task value as a parameter and the event listener will receive
    a value attribution, where it will make the task variable equal to the value of
    the event value:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件的`<template>`块中，找到`v-model`指令。我们需要删除`v-model`指令。然后，我们需要向输入添加一个新的绑定，称为`v-bind:value`或缩写版本`:value`，以及一个事件监听器到HTML`input`元素。我们需要在`input`事件上添加一个事件监听器，使用`v-on:input`指令或缩写版本`@input`。输入绑定将接收任务值作为参数，事件监听器将接收一个值赋值，其中它将使任务变量等于事件值的值：
- en: '[PRE29]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE30]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 记得始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As a syntactic sugar syntax, the `v-model` directive does the magic of automatically
    declaring the bind and the event listener to the element for you. However, the
    side effect is that you don't have full control over what can be achieved.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种语法糖，`v-model`指令可以自动声明绑定和事件监听器到元素中。然而，副作用是你无法完全控制可以实现什么。
- en: As we've seen, the bound value can be a variable, a method, a computed property,
    or a Vuex getter, for example. In terms of the event listener, it can be a function
    or a direct declaration of a variable assignment. When an event is emitted and
    passed to Vue, the `$event` variable is used to pass the event. In this case,
    as in normal JavaScript, to catch the value of an input, we need to use the `event.target.value`
    value.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，绑定的值可以是变量、方法、计算属性或Vuex getter等。在事件监听器方面，它可以是一个函数或直接声明一个变量赋值。当事件被触发并传递给Vue时，`$event`变量用于传递事件。在这种情况下，与普通JavaScript一样，要捕获输入的值，我们需要使用`event.target.value`值。
- en: See also
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find out more information about event handling at [https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html)找到有关事件处理的更多信息。
- en: Creating a dynamic to-do list
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个动态的待办事项列表
- en: One of the first projects every programmer creates when learning a new language
    is a to-do list. Doing this allows us to learn more about the language process
    that's followed when it comes to manipulating states and data.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序员在学习一门新语言时创建的第一个项目之一就是待办事项列表。这样做可以让我们更多地了解在处理状态和数据时遵循的语言流程。
- en: We are going to make our to-do list using Vue. We'll use what we have learned
    and created in the previous recipes.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Vue制作我们的待办事项列表。我们将使用之前教程中学到的知识和创建的内容。
- en: Getting ready
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: To start our component, we can create our Vue project with the Vue CLI, as we
    learned in the *Creating your first project with Vue CLI* recipe, or use the project
    from the *Removing the v-model directive from the input* recipe.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用Vue CLI创建Vue项目，就像我们在*使用Vue CLI创建第一个项目*这个教程中学到的那样，或者使用*从输入中删除v-model指令*这个教程中的项目。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: There are some basic principles involved in making a to-do application – it
    must contain a list of tasks, the tasks can be marked as done and undone, and
    the list can be filtered and sorted. Now, we are going to learn how to take the
    tasks and add them to the task list.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 制作待办事项应用程序涉及一些基本原则-它必须包含一个任务列表，任务可以标记为已完成和未完成，并且列表可以进行过滤和排序。现在，我们将学习如何将任务添加到任务列表中。
- en: 'Follow these steps to create a dynamic to-do list with Vue and the information
    you''ve gained from the previous recipes:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用Vue和从之前教程中获得的信息创建一个动态的待办事项列表：
- en: 'In the `App.vue` file, we will create our array of tasks. This task will be
    filled every time the `TaskInput.vue` component emits a message. We will add an
    object to this array with the task, as well as the current date when the task
    was created. The date when the task was finished will be left undefined for now.
    To do this, in the `<script>` part of the component, we need to create a method
    that receives a task and add this task, along with the current date, to the `taskList` array:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们将创建我们的任务数组。每当`TaskInput.vue`组件发出消息时，这个任务将被填充。我们将向这个数组添加一个包含任务以及任务创建的当前日期的对象。目前，任务完成的日期将被留空。为了做到这一点，在组件的`<script>`部分，我们需要创建一个接收任务并将任务与当前日期添加到`taskList`数组中的方法：
- en: '[PRE31]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, we need to render this list on the `<template>` part. We will iterate
    the list of tasks using the `v-for` directive of Vue. This directive, when we
    use it with an array, gives us access to two properties – the item itself and
    the index of the item. We will use the item to render it and the index to make
    the key of the element for the rendering process. We need to add a checkbox that,
    when marked, calls a function that changes the status of the task and displays
    when the task was done:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在`<template>`部分渲染这个列表。我们将使用Vue的`v-for`指令来遍历任务列表。当我们将这个指令与数组一起使用时，它会给我们访问两个属性-项目本身和项目的索引。我们将使用项目本身进行渲染，使用索引来创建元素的键以进行渲染过程。我们需要添加一个复选框，当选中时，调用一个改变任务状态的函数，并显示任务完成的时间：
- en: '[PRE32]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It's always important to remember that the key in the iterator needs to be unique.
    This is because the `render` function needs to knows which elements were changed.
    In this example, we added the `Math.random()` function to the index to generate
    a unique key, because the index of the first elements of the array is always the
    same number when the number of elements is reduced.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 始终重要的是要记住迭代器中的键必须是唯一的。这是因为`render`函数需要知道哪些元素已更改。在此示例中，我们添加了`Math.random()`函数到索引中以生成唯一键，因为当减少元素数量时，数组的第一个元素的索引始终是相同的数字。
- en: 'We need to create the `changeStatus` function on the `methods` property of
    the `App.vue` file. This function will receive the index of the task as a parameter,
    then go to the array of tasks and change the `finishedAt` property, which is our marker for
    when a task is complete:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在`App.vue`文件的`methods`属性上创建`changeStatus`函数。此函数将接收任务的索引作为参数，然后转到任务数组并更改`finishedAt`属性，这是我们标记任务完成的标记。
- en: '[PRE33]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, we need to add the task text to the left-hand side of the screen. On the `<style>` part
    of the component, we will make it scoped and add the custom class:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将任务文本添加到屏幕左侧。在组件的`<style>`部分，我们将使其具有作用域并添加自定义类：
- en: '[PRE34]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE35]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: 'Here is the component rendered and running:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染和运行的组件：
- en: '![](assets/8ea10da5-7222-4bc8-9f5b-55f65fdabe55.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8ea10da5-7222-4bc8-9f5b-55f65fdabe55.png)'
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we received the emitted message from the component, we hydrated the message
    with more data and pushed it to a local array variable.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从组件接收到发射的消息时，我们使用更多数据对消息进行了处理，并将其推送到本地数组变量中。
- en: In the template, we iterate this array, turning it into a list of tasks. This
    displays the tasks we need to complete, the checkbox to mark when the task is
    complete, and the time that a task was completed by.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，我们迭代此数组，将其转换为任务列表。这显示了我们需要完成的任务、标记任务完成的复选框以及任务完成的时间。
- en: When the user clicks on the checkbox, it executes a function, which marks the
    current task as done. If the task is already done, the function will set the `finishedAt` property
    to `undefined`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户单击复选框时，它会执行一个函数，该函数将当前任务标记为已完成。如果任务已经完成，该函数将将`finishedAt`属性设置为`undefined`。
- en: See also
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find out more information about list rendering at [https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for](https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for).
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for](https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for)找到有关列表渲染的更多信息。
- en: You can find out more information about conditional rendering at [https://v3.vuejs.org/guide/conditional.html#v-if](https://v3.vuejs.org/guide/conditional.html#v-if).
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/conditional.html#v-if](https://v3.vuejs.org/guide/conditional.html#v-if)找到有关条件渲染的更多信息。
- en: You can find out more information about `Math.random` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random).
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)找到有关`Math.random`的更多信息。
- en: Creating computed properties and understanding how they work
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建计算属性并了解其工作原理
- en: Imagine that every time you have to fetch manipulated data, you need to execute a
    function. Imagine that you need to get specific data that needs to go through some
    process and you need to execute it through a function every time. This type of
    work would not be easy to maintain. Computed properties exist to solve these problems. Using
    computed properties makes it easier to obtain data that needs preprocessing or
    even caching without executing any other external memorizing function.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，每次您需要获取处理过的数据时，您都需要执行一个函数。想象一下，您需要获取需要经过一些处理的特定数据，并且您需要每次通过函数执行它。这种类型的工作不容易维护。计算属性存在是为了解决这些问题。使用计算属性使得更容易获取需要预处理甚至缓存的数据，而无需执行任何其他外部记忆函数。
- en: Getting ready
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 此处所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: You can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with the Vue CLI* recipe.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以继续进行我们的待办事项项目，或者按照我们在*使用Vue CLI创建您的第一个项目*中学到的内容创建一个新的Vue项目。
- en: How to do it...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Follow these steps to create a computed property and understand how it works:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个计算属性并了解它的工作原理：
- en: 'In the `App.vue` file, at the `<script>` part, we will add a new property between `data` and `method`,
    called `computed`. This is where the `computed` properties will be placed. We
    will create a new computed property called `displayList`, which will be used to
    render the final list on the template:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件的`<script>`部分，我们将在`data`和`method`之间添加一个新属性，称为`computed`。这是`computed`属性将被放置的地方。我们将创建一个名为`displayList`的新计算属性，用于在模板上呈现最终列表：
- en: '[PRE36]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: For now, the `displayList` property is just returning a cached value of the
    variable, and not the direct variable itself.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`displayList`属性只是返回变量的缓存值，而不是直接的变量本身。
- en: 'Now, for the `<template>` part, we need to change where the list is being fetched:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对于`<template>`部分，我们需要改变列表的获取位置：
- en: '[PRE37]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShel*l* (Windows) and execute the following command:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE38]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 记得始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: When using the `computed` property to pass a value to the template, this value
    is now cached. This means we will only trigger the rendering process when the
    value is updated. At the same time, we made sure that the template doesn't use
    the variable for rendering so that it can't be changed on the template, as it
    is a cached copy of the variable.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`computed`属性将一个值传递给模板时，这个值现在被缓存。这意味着只有在值更新时才会触发渲染过程。同时，我们确保模板不使用变量进行渲染，以便它不能在模板上更改，因为它是变量的缓存副本。
- en: Using this process, we get the best performance because we won't waste processing
    time rerendering the DOM tree for changes that have no effect on the data being
    displayed. This is because if something changes and the result is the same, the `computed` property
    caches the result and won't update the final result.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个过程，我们可以获得最佳的性能，因为我们不会浪费处理时间重新渲染对数据显示没有影响的更改的DOM树。这是因为如果有什么变化，结果是一样的，`computed`属性会缓存结果，并且不会更新最终结果。
- en: See also
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find out more information about computed properties at [https://v3.vuejs.org/guide/computed.html](https://v3.vuejs.org/guide/computed.html).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://v3.vuejs.org/guide/computed.html](https://v3.vuejs.org/guide/computed.html)找到更多关于计算属性的信息。
- en: Displaying cleaner data and text with custom filters
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义过滤器显示更清晰的数据和文本
- en: Sometimes, you may find that the user, or even you, cannot read the Unix timestamp or
    other `DateTime` formats. How can we solve this problem? When rendering the data
    in Vue, it's possible to use what we call filters.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能会发现用户，甚至您自己，无法阅读Unix时间戳或其他`DateTime`格式。我们如何解决这个问题？在Vue中呈现数据时，可以使用我们称之为过滤器的东西。
- en: Imagine a series of pipes that data flows through. Data enters each pipe in
    one shape and exits in another. This is what filters in Vue look like. You can
    place a series of filters on the same variable so that it gets formatted, reshaped,
    and ultimately displayed with different data while the code remains the same.
    The code of the initial variable is immutable in those pipes.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一系列数据通过的管道。数据以一种形式进入每个管道，以另一种形式退出。这就是Vue中的过滤器的样子。您可以在同一个变量上放置一系列过滤器，以便对其进行格式化、重塑，并最终以不同的数据显示，而代码保持不变。在这些管道中，初始变量的代码是不可变的。
- en: Getting ready
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: We can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with Vue CLI* recipe.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行我们的待办事项项目，或者按照我们在*使用Vue CLI创建您的第一个项目*教程中学到的内容创建一个新的Vue项目。
- en: How to do it...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create your first custom Vue filter:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建您的第一个自定义Vue过滤器：
- en: 'In the `App.vue` file, at the `<script>` part, in the methods, create a `formatDate` function
    inside this property. This function will receive `value` as a parameter and enter
    the filter pipe. We can check if the value is a number because we know that our
    time is based on the Unix timestamp format. If it''s a number, we will format
    based on the current browser location and return that formatted value. If the
    value is not a number, we just return the passed value:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，在`<script>`部分，在方法中，创建一个`formatDate`函数。这个函数将接收`value`作为参数并输入过滤器管道。我们可以检查`value`是否是一个数字，因为我们知道我们的时间是基于Unix时间戳格式的。如果它是一个数字，我们将根据当前浏览器位置进行格式化，并返回该格式化的值。如果值不是一个数字，我们只是返回传递的值。
- en: '[PRE39]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'For the `<template>` part of the component, we need to pass the variable to
    the filter method. To do this, we need to find the `taskItem.finishedAt` property
    and make it the parameter of the `formatDate` method. We will add some text to
    denote that the task was `Done at:` at the beginning of the date:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于组件的`<template>`部分，我们需要将变量传递给过滤器方法。为了做到这一点，我们需要找到`taskItem.finishedAt`属性，并将其作为`formatDate`方法的参数。我们将添加一些文本来表示任务是在日期的开头“完成于：”。
- en: '[PRE40]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'To run the server and see your component, open a Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，请打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE41]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: 'Here is the component rendered and running:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染和运行的组件：
- en: '![](assets/8ea29522-f5dc-41bb-9162-747cec4936b3.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8ea29522-f5dc-41bb-9162-747cec4936b3.png)'
- en: How it works...
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Filters are methods that receive a value and must return a value to be displayed
    in the `<template>` section of the file, or used in a Vue property.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器是接收一个值并必须返回一个值以在文件的`<template>`部分中显示或在Vue属性中使用的方法。
- en: When we pass the value to the `formatDate` method, we know that it's a valid
    Unix timestamp, so it's possible to invoke a new `Date` class constructor, passing
    `value` as a parameter because the Unix timestamp is a valid date constructor.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将值传递给`formatDate`方法时，我们知道它是一个有效的Unix时间戳，因此可以调用一个新的`Date`类构造函数，将`value`作为参数传递，因为Unix时间戳是一个有效的日期构造函数。
- en: The code behind our filter is the `Intl.DateTimeFormat` function, a native function
    that can be used to format and parse dates to declared locations. To get the local format,
    we can use the `navigator` global variable.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们过滤器背后的代码是`Intl.DateTimeFormat`函数，这是一个本地函数，可用于格式化和解析日期到指定的位置。要获取本地格式，我们可以使用全局变量`navigator`。
- en: See also
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find out more information about `Intl.DateTimeFormat` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat)找到有关`Intl.DateTimeFormat`的更多信息。
- en: Creating filters and sorters for a list
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为列表创建过滤器和排序器
- en: When working with lists, it's common to find yourself with raw data. Sometimes,
    you need to get this data filtered so that it can be read by the user. To do this,
    we need a combination of computed properties to form a final set of filters and
    sorters.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理列表时，通常会遇到原始数据。有时，您需要对这些数据进行过滤，以便用户可以阅读。为此，我们需要一组计算属性来形成最终的过滤器和排序器。
- en: In this recipe, we will learn how to create a simple filter and sorter that
    will control our initial to-do task list.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何创建一个简单的过滤器和排序器，来控制我们最初的待办任务列表。
- en: Getting ready
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: We can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with Vue CLI* recipe.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行待办事项列表项目，或者按照我们在*使用Vue CLI创建您的第一个项目*教程中学到的内容，创建一个新的Vue项目。
- en: How to do it...
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to add a set of filters and sorts to your list:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为您的列表添加一组过滤器和排序器：
- en: 'In the `App.vue` file, at the `<script>` part, we will add new computed properties;
    these will be for sorting and filtering. We will add three new computed properties: `baseList`, `filteredList`,
    and `sortedList`. The `baseList` property will be our first manipulation. We will
    add an `id` property to the task list via `Array.map`. Since JavaScript arrays
    start at zero, we will add `1` to the index of the array. The `filteredList` property
    will filter the `baseList` property and return just the unfinished tasks, while
    the `sortedList` property will sort the `filteredList` property so that the last
    added `id` property will be the first that''s displayed to the user:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件的`<script>`部分，我们将添加新的计算属性；这些将用于排序和过滤。我们将添加三个新的计算属性：`baseList`，`filteredList`和`sortedList`。`baseList`属性将是我们的第一个操作。我们将通过`Array.map`向任务列表添加一个`id`属性。由于JavaScript数组从零开始，我们将在数组的索引上添加`1`。`filteredList`属性将过滤`baseList`属性，并返回未完成的任务，而`sortedList`属性将对`filteredList`属性进行排序，以便最后添加的`id`属性将首先显示给用户：
- en: '[PRE42]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'For the `<template>` part, we will add `Task ID` and change how the `changeStatus` method
    sends the argument. Because the index is now mutable, we can''t use it as a variable;
    it''s just a temporary index on the array. We need to use the task `id`:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，我们将添加`Task ID`并更改`changeStatus`方法发送参数的方式。因为索引现在是可变的，我们不能将其用作变量；它只是数组上的临时索引。我们需要使用任务的`id`：
- en: '[PRE43]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We also need to update our function inside the `changeStatus` method. Since
    the index now starts at `1`, we need to decrease the index of the array by one to
    get the real index of the element before we can update it:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要更新`changeStatus`方法中的函数。由于索引现在从`1`开始，我们需要将数组的索引减一，以便在更新之前获得元素的真实索引：
- en: '[PRE44]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE45]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 记得始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: 'Here is the component rendered and running:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染和运行的组件：
- en: '![](assets/b8319597-b627-4f82-b44f-7109c197afac.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b8319597-b627-4f82-b44f-7109c197afac.png)'
- en: How it works...
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `computed` properties worked together as a cache for the list and made
    sure there were no side effects when it came to manipulating the elements:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`computed`属性一起工作，作为列表的缓存，并确保在操作元素时没有副作用：'
- en: For the `baseList` property, we created a new array with the same tasks but
    added a new `id` property to the task.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`baseList`属性，我们创建了一个具有相同任务的新数组，但为任务添加了一个新的`id`属性。
- en: For the `filteredList` property, we took the `baseList` property and only returned
    the tasks that weren't finished.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`filteredList`属性，我们使用`baseList`属性，只返回未完成的任务。
- en: For the `sortedList` property, we sorted the tasks on the `filteredList` property
    by their ID, in descending order.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`sortedList`属性，我们按照它们的ID，按降序对`filteredList`属性上的任务进行排序。
- en: When all the manipulation was done, the `displayList` property returned the
    result of the data that was manipulated.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有操作完成时，`displayList`属性返回了被操作的数据的结果。
- en: See also
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `Array.prototype.map` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)找到有关`Array.prototype.map`的更多信息。
- en: You can find more information about `Array.prototype.filter` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)找到有关`Array.prototype.filter`的更多信息。
- en: You can find more information about `Array.prototype.sort` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)找到有关`Array.prototype.sort`的更多信息。
- en: Creating conditional filters to sort list data
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建条件过滤器以对列表数据进行排序
- en: Now that you've completed the previous recipe, your data should be filtered
    and sorted, but you might need to check the filtered data or need to change how
    it was sorted. In this recipe, you will learn how to create conditional filters
    and sort the data on a list.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了上一个食谱，您的数据应该被过滤和排序，但您可能需要检查过滤后的数据或需要更改排序方式。在这个食谱中，您将学习如何创建条件过滤器并对列表上的数据进行排序。
- en: Using some basic principles, it's possible to gather information and display
    it in many different ways.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一些基本原则，可以收集信息并以许多不同的方式显示它。
- en: Getting ready
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: We can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with the Vue CLI* recipe.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行我们的待办事项列表项目，或者按照我们在 *使用Vue CLI创建您的第一个项目* 食谱中学到的内容创建一个新的Vue项目。
- en: How to do it...
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to add a conditional filter to sort your list data:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加条件过滤器以对列表数据进行排序：
- en: 'In the `App.vue` file, at the `<script>` part, we will update the `computed` properties;
    that is, `filteredList`, `sortedList`, and `displayList`. We need to add three
    new variables to our project: `hideDone`, `reverse`, and `sortById`. All three
    are going to be Boolean variables and will start with a default value of `false`.
    The `filteredList` property will check if the `hideDone` variable is `true`. If
    it is, it will have the same behavior, but if not, it will show the whole list
    with no filter. The `sortedList` property will check if the `sortById`variableis `true`.
    If it is, it will have the same behavior, but if not, it will sort the list by
    the finished date of the task. Finally, the `displayList`propertywill check if
    the `reverse` variable is `true`. If it is, it will reverse the displayed list,
    but if not, it will have the same behavior:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.vue` 文件的 `<script>` 部分，我们将更新 `computed` 属性；即 `filteredList`、`sortedList`
    和 `displayList`。我们需要向我们的项目添加三个新变量：`hideDone`、`reverse` 和 `sortById`。所有三个变量都将是布尔变量，并且将以默认值
    `false` 开始。`filteredList` 属性将检查 `hideDone` 变量是否为 `true`。如果是，它将具有相同的行为，但如果不是，它将显示完整的列表而不进行过滤。`sortedList`
    属性将检查 `sortById` 变量是否为 `true`。如果是，它将具有相同的行为，但如果不是，它将按任务的完成日期对列表进行排序。最后，`displayList`
    属性将检查 `reverse` 变量是否为 `true`。如果是，它将颠倒显示的列表，但如果不是，它将具有相同的行为：
- en: '[PRE46]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'For the `<template>` part, we need to add the controllers for those variables.
    We will create three checkboxes, linked directly to the variables via the `v-model` directive:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `<template>` 部分，我们需要为这些变量添加控制器。我们将创建三个复选框，直接通过 `v-model` 指令与变量链接：
- en: '[PRE47]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE48]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住始终执行命令 `npm run lint --fix`，以自动修复任何代码lint错误。
- en: 'Here is the component rendered and running:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 组件已呈现并运行：
- en: '![](assets/0015cb11-98a7-418f-82fb-6c2a80859358.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0015cb11-98a7-418f-82fb-6c2a80859358.png)'
- en: How it works...
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The `computed` properties worked together as a cache for the list and made
    sure there weren''t any side effects when it came to manipulating the elements.
    With the conditional process, it was possible to change the rules for the filtering
    and sorting processes through a variable, and the display was updated in real
    time:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`computed` 属性一起作为列表的缓存，并确保在操作元素时没有任何副作用。通过条件过程，可以通过变量更改过滤和排序过程的规则，并且显示会实时更新：'
- en: For the `filteredList` property, we took the `baseList` property and returned
    just the tasks that weren't finished. When the `hideDone` variable was `false`,
    we returned the whole list without any filter.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `filteredList` 属性，我们取 `baseList` 属性并仅返回未完成的任务。当 `hideDone` 变量为 `false` 时，我们返回完整的列表而不进行任何过滤。
- en: For the `sortedList` property, we sorted the tasks on the `filteredList` property.
    When the `sortById` variable was `true`, the list was sorted by ID in descending
    order; when it was `false`, the sorting was done by the task's finish time in
    ascending order.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`sortedList`属性，我们对`filteredList`属性上的任务进行了排序。当`sortById`变量为`true`时，列表按ID降序排序；当为`false`时，按任务的完成时间升序排序。
- en: For the `displayList` property, when the `reverse` variable was `true`, the
    final list was reversed.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`displayList`属性，当`reverse`变量为`true`时，最终列表被反转。
- en: When all the manipulation was done, the `displayList`property returned the result
    of the data that was manipulated.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有操作完成时，`displayList`属性将返回被操作的数据的结果。
- en: These `computed` properties were controlled by the checkboxes on the user screen,
    so the user had total control of what they could see and how they could see it.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`computed`属性由用户屏幕上的复选框控制，因此用户可以完全控制他们可以看到什么以及如何看到它。
- en: See also
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `Array.prototype.map` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)找到有关`Array.prototype.map`的更多信息。
- en: You can find more information about `Array.prototype.filter` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)找到有关`Array.prototype.filter`的更多信息。
- en: You can find more information about `Array.prototype.sort` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)找到有关`Array.prototype.sort`的更多信息。
- en: Adding custom styles and transitions
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义样式和过渡效果
- en: Adding styles to your components is a good practice as it allows you to show
    your user what is happening more clearly. By doing this, you can show a visual
    response to the user and also give them a better experience of your application.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 向您的组件添加样式是一个很好的做法，因为它可以让您更清楚地向用户展示发生了什么。通过这样做，您可以向用户显示视觉响应，并为他们提供更好的应用体验。
- en: In this recipe, we will learn how to add a new kind of conditional class binding.
    We will use CSS effects mixed with the rerendering that comes with each new Vue
    update.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何添加一种新的条件类绑定。我们将使用混合了CSS效果和每个新的Vue更新带来的重新渲染。
- en: Getting ready
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 此处所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: We can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with the Vue CLI* recipe.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行待办事项列表项目，或者使用Vue CLI创建一个新的Vue项目，就像我们在*使用Vue CLI创建您的第一个项目*中学到的那样。
- en: How to do it...
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to add custom styles and transitions to your component:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为您的组件添加自定义样式和过渡效果：
- en: 'In the `App.vue` file, we will add a conditional class to the list items for
    the tasks that have been completed:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们将为已完成的任务的列表项添加一个条件类：
- en: '[PRE49]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'For the `<style>` part of the component, we will create the CSS style sheet
    classes for the `taskDone` CSS class. We need to make the list have a separator between the
    items; then, we will make the list have a striped style. When they get marked
    as done, the background will change with an effect. To add the separator between
    the lines and the striped list or zebra style, we need to add a CSS rule that
    applies to each `even nth-child`of our list:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于组件的`<style>`部分，我们将为`taskDone` CSS类创建CSS样式表类。我们需要使列表在项目之间有一个分隔符；然后，我们将使列表具有条纹样式。当它们被标记为已完成时，背景将带有一个效果。为了在行和条纹列表或斑马样式之间添加分隔符，我们需要添加一个CSS规则，该规则适用于我们列表的每个`even
    nth-child`：
- en: '[PRE50]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To add the effect to the background when the task has been completed, at the
    end of the `<style>` part, we will add a CSS animation keyframe that indicates
    the background color change and applies this animation to the `.taskDone` CSS
    class:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在任务完成时将效果添加到背景中，在`<style>`部分的末尾，我们将添加一个CSS动画关键帧，指示背景颜色的变化，并将此动画应用于`.taskDone`
    CSS类：
- en: '[PRE51]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE52]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住始终执行命令`npm run lint --fix`，以自动修复任何代码lint错误。
- en: 'Here is the component rendered and running:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染和运行的组件：
- en: '![](assets/03cbe64b-7a4b-465b-aea8-1cacbc764f87.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03cbe64b-7a4b-465b-aea8-1cacbc764f87.png)'
- en: How it works...
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Each time a new item in our application is marked as done, the `displayList` property
    gets updated and triggers the rerendering of the component.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们的应用程序中的新项目被标记为已完成时，`displayList`属性都会更新并触发组件的重新渲染。
- en: Because of this, our `taskDone` CSS class has an animation attached to it that
    is executed on rendering, showing a green background.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的`taskDone` CSS类附加了一个动画，该动画在渲染时执行，显示绿色背景。
- en: See also
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: You can find more information about CSS animations at [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations).
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)找到有关CSS动画的更多信息。
- en: You can find more information about class and style bindings at [https://v3.vuejs.org/guide/class-and-style.html](https://v3.vuejs.org/guide/class-and-style.html)
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://v3.vuejs.org/guide/class-and-style.html](https://v3.vuejs.org/guide/class-and-style.html)找到有关类和样式绑定的更多信息
- en: Using vue-devtools to debug your application
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vue-devtools调试您的应用程序
- en: '`vue-devtools` is a must for every Vue developer. This tool shows us the depths
    of the Vue components, routes, events, and Vuex.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue-devtools`对于每个Vue开发人员都是必不可少的。这个工具向我们展示了Vue组件、路由、事件和Vuex的深度。'
- en: With the help of the `vue-devtools` extension, it's possible to debug our application,
    try new data before changing our code, execute functions without needing to call
    them in our code directly, and so much more.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 借助`vue-devtools`扩展，可以调试我们的应用程序，在更改代码之前尝试新数据，执行函数而无需直接在代码中调用它们，等等。
- en: In this recipe, we will learn more about how to use various devtools to find
    out more about our application and how they can be used to help with our debug
    process.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用各种开发工具来了解我们的应用程序，并了解它们如何帮助我们的调试过程。
- en: Getting ready
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: 'You will need to install the `vue-devtools` extension in your browser:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在浏览器中安装`vue-devtools`扩展程序：
- en: 'Chrome extension: [http://bit.ly/chrome-vue-devtools](http://bit.ly/chrome-vue-devtools)'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome扩展程序：[http://bit.ly/chrome-vue-devtools](http://bit.ly/chrome-vue-devtools)
- en: Firefox extension: [http://bit.ly/firefox-vue-devtools](http://bit.ly/firefox-vue-devtools)
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox扩展程序：[http://bit.ly/firefox-vue-devtools](http://bit.ly/firefox-vue-devtools)
- en: We can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with the Vue CLI* recipe.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行我们的待办事项列表项目，或者使用Vue CLI创建一个新的Vue项目，就像我们在*使用Vue CLI创建您的第一个项目*中学到的那样。
- en: How to do it...
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: When developing any Vue application, it's always a good practice to develop
    with `vue-devtools` at hand.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发任何Vue应用程序时，始终将`vue-devtools`作为良好的实践进行开发。
- en: 'Follow these steps to understand how to use `vue-devtools` and how to properly
    debug a Vue application:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤了解如何使用`vue-devtools`以及如何正确调试Vue应用程序：
- en: 'To enter `vue-devtools`, you need to have it installed in your browser, so
    check the *Getting ready* section of this recipe for the links to the extension
    for Chrome or Firefox. In your Vue development application, enter the Browser
    developer inspector mode. A new tab called Vue will appear:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进入`vue-devtools`，您需要在浏览器中安装它，因此请查看本教程的*准备就绪*部分，获取Chrome或Firefox扩展程序的链接。在您的Vue开发应用程序中，进入浏览器开发者检查器模式。将出现一个名为Vue的新标签页：
- en: '![](assets/c08fd0d0-ff90-4257-933d-b53c85b29b28.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c08fd0d0-ff90-4257-933d-b53c85b29b28.png)'
- en: 'The first tab that you will be presented with is the Components tab. This tab
    shows your application component tree. If you click on a component, you will be
    able to see all the available data, the computed property, and extra data that''s
    been injected by plugins such as `vuelidate`, `vue-router`, or `vuex`. You can
    edit this data to see the changes in the application in real time:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到的第一个标签页是组件标签页。此标签显示应用程序组件树。如果单击组件，您将能够查看所有可用数据，计算属性以及插件（如`vuelidate`，`vue-router`或`vuex`）注入的额外数据。您可以编辑此数据以实时查看应用程序中的更改：
- en: '![](assets/fbab0838-bec5-4d25-8106-38bd57b51ebd.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fbab0838-bec5-4d25-8106-38bd57b51ebd.png)'
- en: 'The second tab is for Vuex development. This tab will show the history of the
    mutations, the current state, and the getters. It''s possible to check on the
    passed payload for each mutation and do time-travel mutations, to *go back in
    time* and look at the Vuex changes in the states:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个标签页用于Vuex开发。此标签将显示变化的历史记录，当前状态和获取器。可以检查每个变化的传递负载，并进行时间旅行变化，以*回到过去*并查看状态中的Vuex更改：
- en: '![](assets/450a5c02-da10-4793-9290-996b13cc3845.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/450a5c02-da10-4793-9290-996b13cc3845.png)'
- en: 'The third tab is dedicated to Event emitters in the application. All events
    that are emitted in the application will be shown here. You can check the event
    that was emitted by clicking on it. By doing this, you can see the name of the
    event, the type, who was the source of the event (in this case, it was a component),
    and the payload:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个标签页专门用于应用程序中的事件发射器。在此处显示应用程序中发射的所有事件。您可以通过单击事件来检查发射的事件。通过这样做，您可以看到事件的名称，类型，事件源（在本例中是组件）以及负载：
- en: '![](assets/88c382ae-8d0a-44ce-9e50-6ae3e9c24f06.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/88c382ae-8d0a-44ce-9e50-6ae3e9c24f06.png)'
- en: 'The fourth tab is dedicated to the vue-router plugin. There, you can view its
    navigation history, along with all the metadata that was passed to the new route.
    This is where you can check all the available routes in your application:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四个标签页专门用于vue-router插件。在那里，您可以查看其导航历史，以及传递给新路由的所有元数据。这是您可以检查应用程序中所有可用路由的地方：
- en: '![](assets/5431685c-f94f-4bf8-8eba-6e0ca4fcd486.png)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5431685c-f94f-4bf8-8eba-6e0ca4fcd486.png)'
- en: 'The fifth tab is the Performance tab. Here, you can check your component''s
    loading time and the frames per second that your application is running at for
    the events that are happening in real time. The following screenshot shows the
    current frames per second of the current application, and for the selected component:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第五个选项卡是性能选项卡。在这里，您可以检查组件的加载时间以及应用程序实时运行的每秒帧数。以下屏幕截图显示了当前应用程序的每秒帧数，以及所选组件的每秒帧数：
- en: '![](assets/833ad7aa-88bb-49d0-9522-fbba99d168c5.png)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/833ad7aa-88bb-49d0-9522-fbba99d168c5.png)
- en: 'The following screenshot shows the component''s life cycle hook performance
    and the time it took to execute each hook:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了组件的生命周期钩子性能以及执行每个钩子所需的时间：
- en: '![](assets/c539f0f6-7f06-4dba-95a6-dbc587b1702e.png)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/c539f0f6-7f06-4dba-95a6-dbc587b1702e.png)
- en: 'The sixth tab is your Settings tab. Here, you can manage the extension and
    change how it looks, how it behaves internally, and how it will behave within
    the Vue plugins:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第六个选项卡是您的设置选项卡。在这里，您可以管理扩展程序并更改其外观，内部行为以及在Vue插件中的行为：
- en: '![](assets/5ded148d-1d5b-4239-9746-9a4ac0fc912e.png)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/5ded148d-1d5b-4239-9746-9a4ac0fc912e.png)
- en: The last tab is a refresh button for `vue-devtools`. Sometimes, when `hot-module-reload` occurs
    or when some complex events occur in your application component tree, the extension
    can lose track of what is happening. This button forces the extension to reload
    and read the Vue application state again.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个选项卡是`vue-devtools`的刷新按钮。有时，当发生`热模块重新加载`或当应用程序组件树中发生一些复杂事件时，扩展程序可能会丢失对发生情况的跟踪。此按钮强制扩展程序重新加载并再次读取Vue应用程序状态。
- en: See also
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `vue-devtools` at [https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools).
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools)找到有关`vue-devtools`的更多信息。
