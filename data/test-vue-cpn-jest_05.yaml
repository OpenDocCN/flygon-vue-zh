- en: '*Chapter 5*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章
- en: Test Computed Properties and Watchers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试计算属性和观察者
- en: Computed properties and watchers are the reactive parts of the logic of Vue.js
    components. They each serve totally different purposes, that is, one is synchronous
    and the other is asynchronous, which makes them behave slightly differently.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性和观察者是Vue.js组件逻辑的响应式部分。它们各自具有完全不同的目的，即一个是同步的，另一个是异步的，这使它们的行为略有不同。
- en: In this chapter, we'll go through the process of testing them, and we'll see
    what different cases we can find along the way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍测试它们的过程，并看看在这一过程中我们可以找到哪些不同的情况。
- en: Computed Properties
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算属性
- en: 'Computed properties are simple reactive functions that return data in another
    form. They behave exactly like the language-standard `get/set` properties:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性是简单的响应式函数，以另一种形式返回数据。它们的行为与语言标准的`get/set`属性完全相同：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you''re using plain objects, then it''d be as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用普通对象时，情况如下：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can even add the `set` property as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以添加`set`属性如下：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Testing Computed Properties
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试计算属性
- en: Testing a computed property is very simple. Sometimes, you probably won't test
    a computed property exclusively, but instead, you'll test it as part of other
    tests. However, most of the time it's good to have a test for it; whether that
    computed property is cleaning up an input or combining data, we want to make sure
    things work as intended. So, let's begin.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 测试计算属性非常简单。有时，您可能不会单独测试计算属性，而是将其作为其他测试的一部分进行测试。但是，大多数情况下最好为其编写测试；无论该计算属性是清理输入还是组合数据，我们都希望确保它按预期工作。所以，让我们开始吧。
- en: 'First of all, create a `Form.vue` component:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个`Form.vue`组件：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It will show an input and, next to it, you'll see the same string but reversed.
    It's just a silly example, but enough to test it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它将显示一个输入框，旁边是相同的字符串但是反转的。这只是一个愚蠢的例子，但足够测试了。
- en: 'Now, add it to `App.vue`, then put it after the `MessageList` component, and
    remember to import it and include it within the `components` component option.
    Then, create a `test/Form.test.js` file with the usual bare bones we''ve used
    in other tests:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将其添加到`App.vue`，然后将其放在`MessageList`组件之后，并记得导入它并在`components`组件选项中包含它。然后，创建一个带有我们在其他测试中使用过的基本结构的`test/Form.test.js`文件：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, create a test suite with two test cases:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个包含两个测试用例的测试套件：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can access the component instance within `cmp.vm` so that we can access the
    internal state, computed properties, and methods. Then, to test it is just about
    changing the value and making sure it returns the same string when `reversed`
    is `false`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`cmp.vm`中访问组件实例，以便访问内部状态、计算属性和方法。然后，测试就是改变值并确保在`reversed`为`false`时返回相同的字符串。
- en: 'For the second case, it is almost the same, with the only difference being
    that we must set the `reversed` property to `true`. We could navigate through
    `cmp.vm...` to change it, but `vue-test-utils` give us a helper method, `setProps({
    property: value, ... })`, that makes it very easy.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '对于第二种情况，几乎相同，唯一的区别是我们必须将`reversed`属性设置为`true`。我们可以通过`cmp.vm...`进行导航来更改它，但`vue-test-utils`给了我们一个辅助方法`setProps({
    property: value, ... })`，这使得它非常容易。'
- en: That's it; depending on the computed property, it may need more test cases.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样；根据计算属性的不同，可能需要更多的测试用例。
- en: Watchers
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察者
- en: Honestly, I haven't come across any test case where I really need to use watchers
    that my computed properties couldn't solve. I've seen them misused as well, leading
    to a very unclear data workflow among components and messing everything up. So,
    don't rush into using them, and think beforehand.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，我还没有遇到过真正需要使用观察者的测试用例，而我的计算属性无法解决的。我也看到它们被滥用，导致组件之间的数据工作流非常不清晰，搞乱了一切。因此，不要急着使用它们，事先考虑一下。
- en: As you can see in the **Vue.js docs** ([https://vuejs.org/v2/guide/computed.html#Watchers](https://vuejs.org/v2/guide/computed.html#Watchers)),
    watchers are often used to react to data changes and perform asynchronous operations,
    such as performing an ajax request.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在Vue.js文档中所看到的（[https://vuejs.org/v2/guide/computed.html#Watchers](https://vuejs.org/v2/guide/computed.html#Watchers)），观察者经常用于对数据变化做出反应并执行异步操作，比如执行ajax请求。
- en: Testing Watchers
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试观察者
- en: 'Let''s say that we want to do something when the `inputValue` from the state
    change. We could perform an ajax request, but since that''s more complicated (and
    we''ll cover it in more detail in the next lesson), let''s just use a `console.log
    function`. Add a `watch` property to the `Form.vue` component options:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望在状态中的`inputValue`发生变化时执行某些操作。我们可以执行ajax请求，但由于那更复杂（我们将在下一课中更详细地介绍），所以让我们只使用`console.log`函数。在`Form.vue`组件选项中添加一个`watch`属性：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice the `inputValue` watch function matches the state variable name. By convention,
    Vue will look it up in both the `properties` and `data` states by using the watch
    function name, in this case, `inputValue`, and since it will find it in `data`,
    it will add the watcher there.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`inputValue`观察者函数与状态变量名称匹配。按照惯例，Vue将通过使用观察者函数名称，在这种情况下是`inputValue`，在`properties`和`data`状态中查找它，并且由于它将在`data`中找到它，它将在那里添加观察者。
- en: Note that a watch function takes the new value as the first parameter and the
    old one as the second. In this case, we've chosen to log only when it's not empty
    and the values are different. Usually, we'd like to write a test for each case,
    depending on the time you have and how critical that code is.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，观察者函数将新值作为第一个参数，旧值作为第二个参数。在这种情况下，我们选择仅在值不为空且值不同的情况下记录。通常，我们会根据您的时间和代码的重要性来为每种情况编写测试。
- en: 'So, what should we test about the watch function? Well, that''s something we''ll
    also discuss further in the next lesson when we talk about testing methods, but
    let''s say we just want to know that it calls `console.log` when it should. So,
    let''s add the bare-bones of the Watchers test suite within `Form.test.js`, as
    follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该测试观察者函数的什么内容呢？嗯，这也是我们在下一课中讨论测试方法时会进一步讨论的内容，但让我们假设我们只想知道它在应该调用`console.log`时是否调用。因此，让我们在`Form.test.js`中添加观察者测试套件的基本内容，如下所示：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we're using a spy on the `console.log` method, initializing it before
    starting any test, and then resetting its state after each of them so that they
    start from a clean spy.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`console.log`方法的spy，在开始任何测试之前对其进行初始化，然后在每个测试之后重置其状态，以便它们从一个干净的spy开始。
- en: 'To test a watch function, we just need to change the value of what''s being
    watched, in this case, the `inputValue` state. But there is something curious...
    let''s start from the last test:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试观察者函数，我们只需要改变被观察的值，这种情况下就是`inputValue`状态。但有一件有趣的事情...让我们从最后一个测试开始：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we changed the `inputValue`, so the `console.log` spy should be called,
    right? Well, it won''t. But wait, there is an explanation for this: unlike computed
    properties, watchers are *deferred to the next update cycle* that Vue uses to
    look for changes. So, basically, what''s happening here is that `console.log`
    is indeed called, but after the test has finished.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们改变了`inputValue`，所以`console.log` spy应该被调用，对吗？嗯，它不会被调用。但等等，这有一个解释：与计算属性不同，观察者被*延迟到下一个更新周期*，Vue用它来查找变化。因此，基本上这里发生的是`console.log`确实被调用，但在测试结束后才被调用。
- en: 'Notice that we''re changing `inputValue` in the *raw* way by accessing the
    `vm` property. If we wanted to do it this way, we''d need to use the `vm.$nextTick`
    ([https://vuejs.org/v2/api/#vm-nextTick](https://vuejs.org/v2/api/#vm-nextTick))
    function to defer code to the next update cycle:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们通过访问`vm`属性以*原始*方式改变了`inputValue`。如果我们想以这种方式做，我们需要使用`vm.$nextTick`（[https://vuejs.org/v2/api/#vm-nextTick](https://vuejs.org/v2/api/#vm-nextTick)）函数将代码推迟到下一个更新周期：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Notice here that we called a* `done` *function that we received as a parameter.
    That''s* **one way Jest** *(*[https://jestjs.io/docs/en/asynchronous.html](https://jestjs.io/docs/en/asynchronous.html)*)
    can test asynchronous code.*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意这里我们调用了*作为参数接收到的`done` *函数。这是* **Jest的一种方式** *（[https://jestjs.io/docs/en/asynchronous.html](https://jestjs.io/docs/en/asynchronous.html)）可以测试异步代码。*'
- en: 'However, there is a **much better way**. The methods that `vue-test-utils`
    give us, such as `emitted` or `setData`, take care of that under the hood. This
    means that the last test can be written in a cleaner way just by using `setData`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有**更好的方法**。`vue-test-utils`给我们的方法，比如`emitted`或`setData`，在幕后处理了这个问题。这意味着最后一个测试可以通过简单地使用`setData`来更清晰地编写：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can also apply the same strategy for the next one, with the only difference
    being that the spy shouldn''t be called:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以对下一个测试应用相同的策略，唯一的区别是间谍不应该被调用：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finally, testing that it *is not called if the values are the same* is a bit
    more complex. The default internal state is empty; so, first, we need to change
    it, wait for the next tick, then clear the mock to reset the call count, and change
    it again. Then, after the second tick, we can check the spy and finish the test.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，测试*如果值相同则不调用*的情况会更复杂一些。默认的内部状态是空的；因此，首先，我们需要改变它，等待下一个时刻，然后清除模拟以重置调用计数，并再次改变它。然后，在第二个时刻之后，我们可以检查间谍并完成测试。
- en: 'This would be much simpler if we recreated the component at the beginning,
    overriding the `data` property. Remember, we can override any component option
    by using the second parameter of the `mount` or `shallowMount` functions:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在开始时重新创建组件，覆盖`data`属性，这将简单得多。请记住，我们可以通过使用`mount`或`shallowMount`函数的第二个参数来覆盖任何组件选项：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Wrapping Up
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you''ve learned how to test part of the logic of Vue components:
    computed properties and watchers. We''ve gone through different example test cases
    that we could come across while testing both of them. You''ve also learned about
    some of the Vue internals, such as the `nextTick` update cycle.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学会了如何测试Vue组件的一部分逻辑：计算属性和观察者。我们已经经历了不同的示例测试用例，这些测试用例在测试它们两者时可能会遇到。您还了解了一些Vue内部知识，比如`nextTick`更新周期。
- en: You can find the code for this chapter on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/Test-State-Computed-Properties-and-Methods-in-Vue-js-Components-with-Jest](https://github.com/alexjoverm/vue-testing-series/tree/Test-State-Computed-Properties-and-Methods-in-Vue-js-Components-with-Jest)).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在**GitHub**上找到本章的代码（[https://github.com/alexjoverm/vue-testing-series/tree/Test-State-Computed-Properties-and-Methods-in-Vue-js-Components-with-Jest](https://github.com/alexjoverm/vue-testing-series/tree/Test-State-Computed-Properties-and-Methods-in-Vue-js-Components-with-Jest)）。
