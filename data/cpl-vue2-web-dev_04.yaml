- en: Getting a List of Files Using the Dropbox API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Dropbox API获取文件列表
- en: Over the next few chapters, we are going to be building a Vue-based Dropbox
    browser. This app will take your Dropbox API key and allow you to navigate to
    folders and download files. You will learn about interacting with an API within
    a Vue app, the Vue life cycle hooks, including the `created()` method, and finally
    we will introduce a library called `Vuex` to handle the caching and state of the
    app. The app will have shareable URLs and retrieve the contents of the folder
    passed in via the `#` URL parameter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将构建一个基于Vue的Dropbox浏览器。这个应用程序将使用你的Dropbox API密钥，允许你浏览文件夹并下载文件。你将学习如何在Vue应用程序中与API进行交互，了解Vue的生命周期钩子，包括`created()`方法，最后我们将介绍一个名为`Vuex`的库来处理应用程序的缓存和状态。该应用程序将具有可共享的URL，并通过`#`URL参数检索文件夹的内容。
- en: This kind of app would be useful if you wanted to give users access to the contents
    of your Dropbox without giving out a username and password. Be warned, however,
    a tech-savvy user could find your API key in the code and abuse it, so don't publish
    this code to the World Wide Web.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让用户访问你的Dropbox内容而不提供用户名和密码，这种应用程序将非常有用。但要注意，一个精通技术的用户可能会在代码中找到你的API密钥并滥用它，所以不要将这段代码发布到互联网上。
- en: 'This chapter is going to cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Loading and querying the Dropbox API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载和查询Dropbox API
- en: Listing the directories and files from your Dropbox account
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出你的Dropbox账户中的目录和文件
- en: Adding a loading state to your app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的应用程序添加加载状态
- en: Using Vue animations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue动画
- en: You will need a Dropbox account to follow these next few chapters. If you don't
    have one, sign up and add a few dummy files and folders. The contents of the Dropbox
    don't matter, but having folders to navigate through will help with understanding
    the code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，你将需要一个Dropbox账户。如果你没有账户，请注册并添加一些虚拟文件和文件夹。Dropbox的内容并不重要，但有文件夹可以帮助你理解代码。
- en: Getting started—loading the libraries
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始加载库
- en: 'Create a new HTML page for your app to run in. Create the HTML structure required
    for a web page and include your app view wrapper:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的应用程序创建一个新的HTML页面运行。创建一个网页所需的HTML结构，并包含你的应用程序视图包装器：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It's called `#app` here, but call it whatever you want - just remember to update
    the JavaScript.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里称之为`#app`，但你可以随意命名 - 只需记得更新JavaScript。
- en: As our app code is going to get quite chunky, make a separate JavaScript file
    and include it at the bottom of the document. You will also need to include Vue
    and the Dropbox API SDK.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序代码将变得相当庞大，所以创建一个单独的JavaScript文件，并将其包含在文档底部。你还需要包含Vue和Dropbox API SDK。
- en: 'As with before, you can either reference the remote files or download a local
    copy of the library files. Download a local copy for both speed and compatibility reasons.
    Include your three JavaScript files at the bottom of your HTML file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，你可以引用远程文件或下载库文件的本地副本。出于速度和兼容性的原因，下载一个本地副本。在HTML文件的底部包含你的三个JavaScript文件：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create your `app.js` and initialize a new Vue instance, using the `el` tag to
    mount the instance onto the ID in your view.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建你的`app.js`并初始化一个新的Vue实例，使用`el`标签将实例挂载到视图中的ID上。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating a Dropbox app and initializing the SDK
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Dropbox应用程序并初始化SDK
- en: Before we interact with the Vue instance, we need to connect to the Dropbox
    API through the SDK. This is done via an API key that is generated by Dropbox
    itself to keep track of what is connecting to your account and where Dropbox requires
    you to make a custom Dropbox app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在与Vue实例交互之前，我们需要通过SDK连接到Dropbox API。这是通过Dropbox自动生成的API密钥来完成的，用于跟踪连接到你的账户的内容和位置，Dropbox要求你创建一个自定义的Dropbox应用程序。
- en: Head to the Dropbox developers area and select Create your app. Choose Dropbox
    API and select either a restricted folder *or *full access. This depends on your
    needs, but for testing, choose Full Dropbox. Give your app a name and click the
    button Create app.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 前往Dropbox开发者区域并选择创建你的应用。选择Dropbox API并选择一个受限文件夹或完全访问权限。这取决于你的需求，但是为了测试，选择完全访问权限。给你的应用取一个名字并点击创建应用按钮。
- en: 'Generate an access token to your app. To do so, when viewing the app details
    page, click the Generate button under the Generated access token. This will give
    you a long string of numbers and letters - copy and paste that into your editor
    and store it as a variable at the top of your JavaScript. In this book, the API
    key will be referred to as `XXXX`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的应用生成一个访问令牌。要这样做，在查看应用详情页面时，点击“生成访问令牌”下的“生成”按钮。这将给你一个由数字和字母组成的长字符串 - 将其复制并粘贴到你的编辑器中，并将其作为一个变量存储在你的JavaScript的顶部。在本书中，API密钥将被称为`XXXX`：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that we have our API key, we can access the files and folders from our
    Dropbox. Initialize the API and pass in your `accessToken` variable to the `accessToken` property
    of the Dropbox API:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了API密钥，我们可以访问我们Dropbox中的文件和文件夹。初始化API并将你的`accessToken`变量传递给Dropbox API的`accessToken`属性：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We now have access to Dropbox via the `dbx` variable. We can verify our connection
    to Dropbox is working by connecting and outputting the contents of the root path:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过`dbx`变量访问Dropbox。我们可以通过连接并输出根路径的内容来验证我们与Dropbox的连接是否正常：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code uses JavaScript promises, which are a way of adding actions to code
    without requiring callback functions. If you are unfamiliar with promises, check
    out this blog post from Google ([https://developers.google.com/web/fundamentals/primers/promises](https://developers.google.com/web/fundamentals/primers/promises)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了JavaScript的Promise，它是一种在代码中添加操作而不需要回调函数的方法。如果你对Promise不熟悉，可以查看Google的这篇博文（[https://developers.google.com/web/fundamentals/primers/promises](https://developers.google.com/web/fundamentals/primers/promises)）。
- en: Take a note of the first line, particularly the `path` variable. This lets us
    pass in a folder path to list the files and folders within that directory. For
    example, if you had a folder called `images` in your Dropbox, you could change
    the parameter value to `/images` and the file list returned would be the files
    and folders within that directory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意第一行，特别是`path`变量。这使我们可以传递一个文件夹路径来列出该目录中的文件和文件夹。例如，如果你的Dropbox中有一个名为`images`的文件夹，你可以将参数值更改为`/images`，返回的文件列表将是该目录中的文件和文件夹。
- en: Open your JavaScript console and check the output; you should get an array containing
    several objects - one for each file or folder in the root of your Dropbox.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的JavaScript控制台并检查输出；你应该得到一个包含多个对象的数组 - 每个对象对应你Dropbox根目录中的一个文件或文件夹。
- en: Displaying your data and using Vue to get it
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示你的数据并使用Vue获取它
- en: Now that we can retrieve our data using the Dropbox API, it's time to retrieve
    it within our Vue instance and display in our view. This app is going to be entirely
    built using components so we can take advantage of the compartmentalized data
    and methods. It will also mean the code is modular and shareable, should you want
    to integrate into other apps.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用Dropbox API检索我们的数据了，是时候在我们的Vue实例中检索它并在我们的视图中显示了。这个应用将完全使用组件构建，这样我们就可以利用分隔的数据和方法。这也意味着代码是模块化和可共享的，如果你想将其集成到其他应用中。
- en: We are also going to take advantage of the native Vue `created()` function -
    we'll cover it when it gets triggered in a bit.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将利用Vue的原生`created()`函数 - 我们将在稍后讨论它被触发的时候。
- en: Create the component
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建组件
- en: 'First off, create your custom HTML element, `<dropbox-viewer>`, in your View.
    Create a `<script>` template block at the bottom of the page for our HTML layout:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在你的视图中创建自定义的HTML元素`<dropbox-viewer>`。在页面底部创建一个`<script>`模板块，用于我们的HTML布局：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Initialize your component in your `app.js` file, pointing it to the template
    ID:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.js`文件中初始化你的组件，将其指向模板ID：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Viewing the app in the browser should show the heading from the template. The
    next step is to integrate the Dropbox API into the component.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看应用程序应该显示模板中的标题。下一步是将Dropbox API集成到组件中。
- en: Retrieve the Dropbox data
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索Dropbox数据
- en: 'Create a new method called `dropbox`. In there, move the code that calls the
    Dropbox class and returns the instance. This will now give us access to the Dropbox
    API through the component by calling `this.dropbox()`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`dropbox`的新方法。在其中，将调用Dropbox类并返回实例的代码移动到这里。现在通过调用`this.dropbox()`可以通过组件访问Dropbox
    API：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We are also going to integrate our API key into the component. Create a data
    function that returns an object containing your access token. Update the Dropbox
    method to use the local version of the key:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还要将API密钥集成到组件中。创建一个返回包含你的访问令牌的对象的数据函数。更新Dropbox方法，使用本地版本的密钥：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We now need to add the ability for the component to get the directory list.
    For this, we are going to create another method that takes a single parameter—the
    path. This will give us the ability later to request the structure of a different
    path or folder if required.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为组件添加获取目录列表的功能。为此，我们将创建另一个方法，它接受一个参数-路径。这将使我们以后能够根据需要请求不同路径或文件夹的结构。
- en: 'Use the code provided earlier - changing the `dbx` variable to `this.dropbox()`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前提供的代码-将`dbx`变量更改为`this.dropbox()`：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Update the Dropbox `filesListFolder` function to accept the path parameter passed
    in, rather than a fixed value. Running this app in the browser will show the Dropbox
    heading, but won't retrieve any folders because the methods have not been called
    yet.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更新Dropbox的`filesListFolder`函数，接受传入的路径参数，而不是固定值。在浏览器中运行此应用程序将显示Dropbox标题，但不会检索任何文件夹，因为尚未调用这些方法。
- en: The Vue life cycle hooks
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue生命周期钩子
- en: 'This is where the `created()` function comes in. The `created()` function gets
    called once the Vue instance has initialized the data and methods, but has yet
    to mount the instance on the HTML component. There are several other functions
    available at various points in the life cycle; more about these can be read at Alligator.io.
    The life cycle is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`created()`函数的作用。`created()`函数在Vue实例初始化数据和方法后调用，但尚未将实例挂载到HTML组件上。在生命周期的不同阶段还有其他几个可用的函数；关于这些函数的更多信息可以在Alligator.io上阅读。生命周期如下：
- en: '![](assets/02ada895-fdcb-4485-af9c-4c0b4d76c68d.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02ada895-fdcb-4485-af9c-4c0b4d76c68d.png)'
- en: Using the `created()` function gives us access to the methods and data while
    being able to start our retrieval process as Vue is mounting the app. The time
    between these various stages is split-second, but every moment counts when it
    comes to performance and creating a quick app. There is no point waiting for the
    app to be fully mounted before processing data if we can start the task early.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`created()`函数使我们能够在Vue挂载应用程序时访问方法和数据，并能够启动我们的检索过程。这些不同阶段之间的时间是分秒必争的，但在性能和创建快速应用程序方面，每一刻都很重要。如果我们可以提前开始任务，就没有必要等待应用程序完全挂载。
- en: 'Create the `created()` function on your component and call the `getFolderStructure`
    method, passing in an empty string for the path to get the root of your Dropbox:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的组件上创建`created()`函数，并调用`getFolderStructure`方法，传入一个空字符串作为获取Dropbox根目录的路径：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Running the app now in your browser will output the folder list to your console,
    which should give the same result as before.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在浏览器中运行应用程序，将文件夹列表输出到控制台，结果应与之前相同。
- en: We now need to display our list of files in the view. To do this, we are going
    to create an empty array in our component and populate it with the result of our
    Dropbox query. This has the advantage of giving Vue a variable to loop through
    in the view, even before it has any content.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在视图中显示文件列表。为此，我们将在组件中创建一个空数组，并用我们的Dropbox查询结果填充它。这样做的好处是，即使在没有任何内容之前，Vue也可以在视图中循环遍历一个变量。
- en: Displaying the Dropbox data
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示Dropbox数据
- en: 'Create a new property in your data object titled `structure`, and assign this
    to an empty array. In the response function of the folder retrieval, assign `response.entries`
    to `this.structure`. Leave `console.log` as we will need to inspect the entries
    to work out what to output in our template:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据对象中创建一个名为`structure`的新属性，并将其赋值为空数组。在文件夹检索的响应函数中，将`response.entries`赋值给`this.structure`。保留`console.log`，因为我们需要检查条目以确定在模板中输出什么：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can now update our view to display the folders and files from your Dropbox.
    As the structure array is available in our view, create a `<ul>` with a repeatable
    `<li>` looping through the structure.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以更新视图以显示来自Dropbox的文件夹和文件。由于结构数组在视图中可用，因此创建一个可重复的`<li>`循环遍历结构的`<ul>`。
- en: 'As we are now adding a second element, Vue requires templates to have one containing
    the element, wrap your heading and list in a `<div>`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在添加了第二个元素，Vue要求模板必须包含一个包含元素的容器，所以将标题和列表包装在一个`<div>`中：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Viewing the app in the browser will show a number of empty bullet points when
    the array appears in the JavaScript console. To work out what fields and properties
    you can display, expand the array in the JavaScript console and then further for
    each object. You should notice that each object has a collection of similar properties
    and a few that vary between folders and files.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看应用程序时，当数组出现在JavaScript控制台中时，将显示一些空的项目符号。为了确定可以显示哪些字段和属性，请展开JavaScript控制台中的数组，然后进一步展开每个对象。您应该注意到每个对象都有一组相似的属性和一些在文件夹和文件之间有所不同的属性。
- en: 'The first property, `.tag`, helps us identify whether the item is a file or
    a folder. Both types then have the following properties in common:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性`.tag`帮助我们确定该项是文件还是文件夹。然后，这两种类型都具有以下共同属性：
- en: '`id`: A unique identifier to Dropbox'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`: Dropbox的唯一标识符。'
- en: '`name`: The name of the file or folder, irrespective of where the item is'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 文件或文件夹的名称，与该项所在位置无关。'
- en: '`path_display`: The full path of the item with the case matching that of the
    files and folders'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path_display`: 项目的完整路径，与文件和文件夹的大小写匹配。'
- en: '`path_lower`: Same as `path_display` but all lowercase'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path_lower`: 与`path_display`相同，但全部小写。'
- en: 'Items with a `.tag` of a file also contain several more fields for us to display:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`.tag`为文件的项还包含了一些更多的字段供我们显示：'
- en: '`client_modified`: This is the date when the file was added to Dropbox.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client_modified`: 文件添加到Dropbox的日期。'
- en: '`content_hash`: A hash of the file, used for identifying whether it is different
    from a local or remote copy. More can be read about this on the Dropbox website.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content_hash`: 文件的哈希值，用于判断它是否与本地或远程副本不同。关于此内容可以在Dropbox网站上阅读更多信息。'
- en: '`rev`: A unique identifier of the version of the file.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rev`: 文件版本的唯一标识符。'
- en: '`server_modified`: The last time the file was modified on Dropbox.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server_modified`: 文件在Dropbox上最后修改的时间。'
- en: '`size`: The size of the file in bytes.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`: 文件的大小（以字节为单位）。'
- en: 'To begin with, we are going to display the name of the item and the size, if
    present. Update the list item to show these properties:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将显示项目的名称和大小（如果有）。更新列表项以显示这些属性：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: More file meta information
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多文件元信息
- en: To make our file and folder view a bit more useful, we can add more rich content
    and metadata to files such as images. These details are available by enabling
    the `include_media_info` option in the Dropbox API.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的文件和文件夹视图更有用，我们可以为图像等文件添加更多丰富的内容和元数据。通过在Dropbox API中启用`include_media_info`选项，可以获得这些详细信息。
- en: 'Head back to your `getFolderStructure` method and add the parameter after `path`.
    Here are some new lines of readability:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到您的`getFolderStructure`方法，并在`path`之后添加该参数。以下是一些新的可读性行：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Inspecting the results from this new API call will reveal the `media_info`
    key for videos and images. Expanding this will reveal several more pieces of information
    about the file, for example, dimensions. If you want to add these, you will need
    to check that the `media_info` object exists before displaying the information:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 检查这个新API调用的结果将显示视频和图像的`media_info`键。展开它将显示有关文件的更多信息，例如尺寸。如果您想添加这些信息，您需要在显示信息之前检查`media_info`对象是否存在：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Try updating the path when retrieving the data from Dropbox. For example, if
    you have a folder called `images`, change the `this.getFolderStructure` parameter
    to `/images`. If you''re not sure what the path is, analyze the data in the JavaScript
    console and copy the value of the `path_lower` attribute of a folder, for example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在从Dropbox检索数据时更新路径。例如，如果您有一个名为`images`的文件夹，将`this.getFolderStructure`参数更改为`/images`。如果您不确定路径是什么，请在JavaScript控制台中分析数据，并复制文件夹的`path_lower`属性的值，例如：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Formatting the file sizes
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化文件大小
- en: With the file size being output in plain bytes it can be quite hard for a user
    to dechiper. To combat this, we can add a formatting method to output a file size
    which is more user-friendly, for example displaying <q>1kb</q> instead of <q>1024</q>.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文件大小以纯字节输出，对于用户来说可能很难理解。为了解决这个问题，我们可以添加一个格式化方法来输出一个更用户友好的文件大小，例如显示`<q>1kb</q>`而不是`<q>1024</q>`。
- en: 'First, create a new key on the data object that contains an array of units
    called `byteSizes`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在数据对象上创建一个包含单位数组的新键`byteSizes`：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is what will get appended to the figure, so feel free to make these properties
    either lowercase or full words, for example, *megabyte*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将附加到图形的内容，所以可以将这些属性设置为小写或全词，例如*megabyte*。
- en: 'Next, add a new method, `bytesToSize`, to your component. This will take one
    parameter of `bytes` and output a formatted string with the unit at the end:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在您的组件中添加一个新的方法`bytesToSize`。它将接受一个`bytes`参数，并输出一个带有单位的格式化字符串：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can now utilize this method in our view:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在视图中利用这个方法：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Adding a loading screen
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个加载屏幕
- en: The last step of this chapter is to make a loading screen for our app. This
    will tell the user the app is loading, should the Dropbox API be running slowly
    (or you have a lot of data to show!).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一步是为我们的应用程序创建一个加载屏幕。这将告诉用户应用程序正在加载，如果Dropbox API运行缓慢（或者您有很多数据要显示！）。
- en: The theory behind this loading screen is fairly basic. We will set a loading
    variable to `true` by default that then gets set to `false` once the data has
    loaded. Based on the result of this variable, we will utilize view attributes
    to show, and then hide, an element with the loading text or animation in and also
    reveal the loaded data list.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个加载屏幕背后的理论相当基本。我们将默认将加载变量设置为`true`，一旦数据加载完成，它将被设置为`false`。根据这个变量的结果，我们将利用视图属性来显示和隐藏带有加载文本或动画的元素，并显示加载的数据列表。
- en: 'Create a new key in the data object titled `isLoading`. Set this variable to
    `true` by default:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据对象中创建一个名为`isLoading`的新键。将这个变量默认设置为`true`：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Within the `getFolderStructure` method on your component, set the `isLoading`
    variable to `false`. This should happen within the promise after you have set
    the structure:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件的`getFolderStructure`方法中，将`isLoading`变量设置为`false`。这应该在您设置结构之后的promise中发生：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We can now utilize this variable in our view to show and hide a loading container.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在视图中利用这个变量来显示和隐藏加载容器。
- en: 'Create a new `<div>` before the unordered list containing some loading text.
    Feel free to add a CSS animation or an animated gif—anything to let the user know
    the app is retrieving data:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在无序列表之前创建一个新的`<div>`，其中包含一些加载文本。随意添加CSS动画或动画gif-任何东西都可以让用户知道应用程序正在检索数据：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We now need to only show the loading div if the app is loading and the list
    once the data has loaded. As this is just one change to the DOM, we can use the
    `v-if` directive. To give you the freedom of rearranging the HTML, add the attribute
    to both instead of using `v-else`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要在应用程序加载时显示加载div，数据加载后显示列表。由于这只是对DOM的一个更改，我们可以使用`v-if`指令。为了让您可以自由地重新排列HTML，将属性添加到两者而不是使用`v-else`。
- en: 'To show or hide, we just need to check the status of the `isLoading` variable.
    We can prepend an exclamation mark to the list to only show if the app is not
    loading:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示或隐藏，我们只需要检查`isLoading`变量的状态。我们可以在列表前面添加一个感叹号，只有在应用程序没有加载时才显示：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Our app should now show the loading container once mounted, and then it should
    show the list once the app data has been gathered. To recap, our complete component
    code now looks like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在应该在挂载后显示加载容器，然后在收集到应用程序数据后显示列表。总结一下，我们完整的组件代码现在看起来像这样：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Animating between states
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在状态之间进行动画切换
- en: As a nice enhancement for the user, we can add some transitions between components
    and states. Helpfully, Vue includes some built-in transition effects. Working
    with CSS, these transitions allow you to add fades, swipes, and other CSS animations
    easily when DOM elements are being inserted. More information about transitions
    can be found in the Vue documentation.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对用户的一个很好的增强，我们可以在组件和状态之间添加一些过渡效果。幸运的是，Vue包含了一些内置的过渡效果。通过使用CSS，这些过渡效果允许您在插入DOM元素时轻松地添加淡入淡出、滑动和其他CSS动画。有关过渡的更多信息可以在Vue文档中找到。
- en: 'The first step is to add the Vue custom HTML `<transition>` element. Wrap both
    your loading and list with separate transition elements and give it an attribute
    of `name` and a value of `fade`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是添加Vue自定义HTML `<transition>`元素。用单独的过渡元素包裹您的加载和列表，并给它一个`name`属性和一个`fade`值：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now add the following CSS to either the head of your document or a separate
    style sheet if you already have one:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下CSS添加到您的文档头部或一个单独的样式表中（如果您已经有一个）：
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With the transition element, Vue adds and removes various CSS classes based
    on the state and time of the transition. All of these begin with the name passed
    in via the attribute and are appended with the current stage of transition:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用过渡元素，Vue根据过渡的状态和时间添加和删除各种CSS类。所有这些类都以通过属性传递的名称开头，并附加有关过渡当前阶段的信息：
- en: '![](assets/e49dfffb-4158-44a3-abcb-0a1955bb862e.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e49dfffb-4158-44a3-abcb-0a1955bb862e.png)'
- en: Try the app in your browser, you should notice the loading container fading
    out and the file list fading in. Although in this basic example, the list jumps
    up once the fading has completed, it's an example to help you understand using
    transitions in Vue.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中尝试该应用程序，您应该注意到加载容器的淡出和文件列表的淡入。尽管在这个基本示例中，列表在淡出完成后会跳动一次，但这是一个示例，可以帮助您了解在Vue中使用过渡效果。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to make a Dropbox viewer, which is a single-page
    application that lists out files and folders from our Dropbox account and allows
    us to show different folder contents by updating the code. We have learned how
    to add a basic loading state to our apps and use the Vue animations for navigation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何制作一个Dropbox查看器，它是一个单页面应用程序，可以列出我们Dropbox账户中的文件和文件夹，并允许我们通过更新代码来显示不同的文件夹内容。我们学习了如何为我们的应用程序添加基本的加载状态，并使用Vue动画进行导航。
- en: In Chapter 5, *Navigating through the File Tree and Loading Folders from the
    URL*, we are going to navigate through our app folders and add download links
    to our files.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5章中，*通过文件树导航和从URL加载文件夹*，我们将浏览我们的应用程序文件夹，并为我们的文件添加下载链接。
