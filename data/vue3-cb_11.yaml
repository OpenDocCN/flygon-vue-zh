- en: Directives, Plugins, SSR, and More
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 指令，插件，SSR等
- en: Now you are in the Pro League! You are an advanced Vue developer. Let's have
    some fun and check out some great recipes that are custom made for you! Here are
    some hand-picked optimization solutions that can improve the quality of your Vue
    application and make your life easier.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经进入专业联赛！您是一个高级的Vue开发者。让我们来玩一些有趣的东西，并查看一些为您量身定制的优秀配方！以下是一些精选的优化解决方案，可以提高您的Vue应用程序的质量，并使您的生活更轻松。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Automatically loading `vue-router` routes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动加载`vue-router`路由
- en: Automatically loading `vuex` modules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动加载`vuex`模块
- en: Creating a custom directive
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义指令
- en: Creating a Vue plugin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Vue插件
- en: Creating an SSR, SPA, PWA, Cordova, and Electron application in Vue with Quasar
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Quasar在Vue中创建SSR，SPA，PWA，Cordova和Electron应用程序
- en: Creating smarter Vue watchers and computed properties
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建更智能的Vue观察者和计算属性
- en: Creating a `Nuxt.js` SSR with Python `Flask` as the API
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python `Flask`创建`Nuxt.js` SSR
- en: The dos and don'ts of Vue applications
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue应用程序的注意事项和禁忌
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using Node.js, `Vue-CLI`, `Cordova`, `Electron`, `Quasar`, `Nuxt.js`,
    and Python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Node.js，`Vue-CLI`，`Cordova`，`Electron`，`Quasar`，`Nuxt.js`和Python。
- en: 'Attention Windows users: you are required to install an `npm` package called
    `windows-build-tools` to be able to install the following required packages. To
    do so, open PowerShell as an Administrator and execute the following command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意Windows用户：您需要安装一个名为`windows-build-tools`的`npm`包，以便能够安装以下所需的包。为此，请以管理员身份打开PowerShell并执行以下命令：
- en: '`> npm install -g windows-build-tools`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`'
- en: 'To install `Vue-CLI`, you need to execute the following command in Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`Vue-CLI`，您需要在终端(macOS或Linux)或命令提示符/PowerShell(Windows)中执行以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install **`Cordova`**, you need to execute the following command in Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**`Cordova`**，您需要在终端(macOS或Linux)或命令提示符/PowerShell(Windows)中执行以下命令：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are running on a macOS and you want to run an iOS simulator, you need to
    execute the following command in Terminal (macOS):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在macOS上运行，并且想要运行iOS模拟器，您需要在终端(macOS)中执行以下命令：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To install `Electron`**,** you need to execute the following command in Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`Electron`**，您需要在终端(macOS或Linux)或命令提示符/PowerShell(Windows)中执行以下命令：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To install `Quasar`**,** you need to execute the following command in Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**`Quasar`**，您需要在终端(macOS或Linux)或命令提示符/PowerShell(Windows)中执行以下命令：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To install **`Nuxt.js`,** you need to execute the following command in Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**`Nuxt.js`**，您需要在终端(macOS或Linux)或命令提示符/PowerShell(Windows)中执行以下命令：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Automatically loading Vue routes
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动加载Vue路由
- en: In order to create maintainable code, we can use the strategy of auto-importing
    files that have the same structure in our project. Like the routes in `vue-router`,
    when the application gets larger, we find a huge amount of files being imported
    and handled manually. In this recipe, we will learn a trick to use the webpack
    `require.context` function to automatically inject files for us.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建可维护的代码，我们可以使用自动导入具有相同结构的文件的策略。就像在`vue-router`中的路由一样，当应用程序变得更大时，我们会发现大量的文件被手动导入和处理。在这个配方中，我们将学习一个技巧，使用webpack的`require.context`函数来自动为我们注入文件。
- en: This function will read the file content and add the routes to an array that
    will be exported into our file by default. You can improve this recipe by adding
    a more controlled route import or even environment-based route rules.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将读取文件内容，并将路由添加到一个数组中，默认情况下将其导出到我们的文件中。您可以通过添加更多受控的路由导入甚至基于环境的路由规则来改进此配方。
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: 'We will need to create a new Vue project with `Vue-CLI`, or use the project
    created in previous recipes:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`Vue-CLI`创建一个新的Vue项目，或者使用之前创建的项目：
- en: 'We need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the* Enter *key to continue, and the *spacebar *to
    select an option.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI会询问一些问题，这些问题将有助于创建项目。您可以使用箭头键进行导航，使用*Enter*键继续，使用*空格键*选择选项。
- en: 'There are two methods for starting a new project. The default method is a basic
    `babel` and `eslint` project without any plugins or configuration, and the `Manually` mode,
    where you can select more modes, plugins, linters, and options. We will go for `Manually`:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两种启动新项目的方法。默认方法是一个基本的`babel`和`eslint`项目，没有任何插件或配置，还有一个是`手动`模式，您可以在其中选择更多模式、插件、代码检查工具和选项。我们将选择`手动`：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we are asked about the features that we want on the project. Those features
    are some Vue plugins such as `Vuex` or `Router` (`vue-router`), testers, linters,
    and more. Select `Babel`, `Router`, and `Linter / Formatter`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们被问及我们想要在项目中使用的功能。这些功能包括一些Vue插件，如`Vuex`或`Router`（`vue-router`），测试工具，代码检查工具等。选择`Babel`、`Router`和`Linter
    / Formatter`：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select the `ESLint + Airbnb` config:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择一个代码检查工具和格式化工具来继续这个过程。在我们的情况下，我们将选择`ESLint + Airbnb`配置：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied `on save` or fixed `on commit`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置了代码检查规则后，我们需要定义它们何时应用于您的代码。它们可以在保存时应用，也可以在提交时修复：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is in
    a dedicated file, but it is also possible to store them in `package.json`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义了所有这些插件、代码检查工具和处理器之后，我们需要选择设置和配置的存储位置。最佳存储位置是专用文件，但也可以将它们存储在`package.json`中：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now you can choose whether you want to make this selection a preset for future
    projects so that you don''t need to reselect everything:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以选择是否要将此选择设置为将来项目的预设，这样您就不需要重新选择所有内容：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Vue-CLI` will create the project, and automatically install the packages for
    us.‌'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vue-CLI`将创建项目，并自动为我们安装包。'
- en: 'If you want to check the project on `vue-ui` when the installation has finished,
    open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在安装完成后在`vue-ui`上检查项目，请打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or you can run the built-in `npm` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute one of the following commands:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以通过打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令来运行内置的`npm`命令：
- en: '`npm run serve` – To run a development server locally'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run serve` - 本地运行开发服务器'
- en: '`npm run build` – To build and minify the application for deployment'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build` - 用于构建和压缩应用程序以进行部署'
- en: '`npm run lint` – To execute the lint on the code'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run lint` - 对代码执行lint'
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these instructions to create an auto-import of the router files in your
    project that will handle the router files inside a specific folder:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些说明，在项目中创建路由文件的自动导入，它将处理特定文件夹内的路由文件：
- en: 'With our route files created and placed inside the `routes` folder, we need
    to make sure that every route file has a default `export` object in it. In the
    `index.js` file, inside the `src/router` folder, remove the default array of `routes` that
    is present in the file:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并放置在`routes`文件夹内的路由文件后，我们需要确保每个路由文件中都有一个默认的`export`对象。在`src/router`文件夹内的`index.js`文件中，删除文件中存在的默认`routes`数组：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now create an empty array of `routes` that will be populated by the imported
    ones from the folder, and start the import. With that, `requireRoutes` will be
    an object with the keys being the filename and the values being the ID of the
    file:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个空的`routes`数组，它将由从文件夹中导入的路由填充，并开始导入。这样，`requireRoutes`将成为一个对象，其键是文件名，值是文件的ID：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To push those files inside the `routes` array, we need to add the following
    code and create a folder named `routes` inside the `router` folder:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将这些文件推送到`routes`数组中，我们需要添加以下代码，并在`router`文件夹内创建一个名为`routes`的文件夹：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now you have your routes loaded on your application automatically as you create
    a new `.js` file inside the `routes` folder.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只要在`routes`文件夹内创建一个新的`.js`文件，你的路由就会自动加载到应用程序中。
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`require.context` is a webpack built-in function that allows you to pass in
    a directory to search, a flag indicating whether subdirectories should be examined
    too, and a regular expression to match files.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`require.context`是webpack内置的函数，允许您传入要搜索的目录、一个指示是否应该检查子目录的标志，以及一个匹配文件的正则表达式。'
- en: When the building process starts, webpack will search for all the `require.context`
    functions and will pre-execute them, so the files needed on the import will be
    there for the final build.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建过程开始时，webpack将搜索所有`require.context`函数，并对其进行预执行，因此导入所需的文件将在最终构建中存在。
- en: 'We pass three arguments to the function: the first is the folder where it will
    start the search, the second asks whether the search will go to descending folders,
    and finally, the third is a regular expression for filename matching.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向函数传递了三个参数：第一个是它将开始搜索的文件夹，第二个询问搜索是否会进入下降的文件夹，最后，第三个是用于文件名匹配的正则表达式。
- en: In this recipe, to automatically load the routes as the first argument of the
    function, we define `./routes` for the folder. As the second argument of the function,
    we define `false` to not search in subdirectories. Finally, as the third argument,
    we define `/^(?!.*test).*\.js$/is` as the Regex to search for `.js` files and
    ignore the files that have `.test` in their names.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将`./routes`定义为文件夹，作为函数的第一个参数自动加载路由。作为函数的第二个参数，我们定义`false`，不搜索子目录。最后，作为第三个参数，我们定义`/^(?!.*test).*\.js$/is`作为正则表达式，用于搜索`.js`文件并忽略文件名中包含`.test`的文件。
- en: There's more...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: With this recipe, it's possible to take your application to the next level by
    using the subdirectories for router modules and environments for router control.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个配方，可以通过使用子目录进行路由模块和环境进行路由控制，将应用程序提升到下一个级别。
- en: With those increments, the function may be extracted to another file, but in
    `router.js`, it still needs to be imported into the `main.js` file. Or, you can
    obtain the `import` function, and pass the array of `routes` to `router.js`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些增量，函数可以被提取到另一个文件中，但在`router.js`中，它仍然需要被导入到`main.js`文件中。或者，您可以获取`import`函数，并将`routes`数组传递给`router.js`。
- en: See also
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Read more about webpack dependency management and `require.context` in the webpack
    documentation at [https://webpack.js.org/guides/dependency-management/.](https://webpack.js.org/guides/dependency-management/)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在webpack文档中阅读有关webpack依赖管理和`require.context`的更多信息：[https://webpack.js.org/guides/dependency-management/.](https://webpack.js.org/guides/dependency-management/)
- en: Automatically loading Vuex modules
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动加载Vuex模块
- en: Sometimes, when we are working on a big project, we need to manage a lot of
    imported `Vuex` modules and stores. To handle those modules, we always need to
    import them by creating a file that will have all the files imported and then
    export those to the Vuex store creation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当我们在一个大项目上工作时，我们需要管理许多导入的`Vuex`模块和存储。为了处理这些模块，我们总是需要通过创建一个包含所有导入文件的文件来导入它们，然后将其导出到Vuex存储创建中。
- en: In this recipe, we will learn about a function that uses the webpack `require.context` function
    to automatically load and inject those files into the Vuex store creation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习一个使用webpack的`require.context`函数的函数，以自动加载并将这些文件注入到Vuex存储创建中。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: 'We will need to create a new Vue project with `Vue-CLI`, or use the project
    created in previous recipes:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`Vue-CLI`创建一个新的Vue项目，或者使用之前创建的项目：
- en: 'We need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the* Enter* key to continue, and the* spacebar *to
    select an option.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键导航，*Enter*键继续，*空格键*选择选项。
- en: 'There are two methods for starting a new project. The default method is a basic `babel`
    and `eslint` project without any plugins or configuration, and the `Manually` mode,
    where you can select more modes, plugins, linters, and options. We will go for `Manually`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两种启动新项目的方法。默认方法是一个基本的`babel`和`eslint`项目，没有任何插件或配置，还有一个`手动`模式，您可以在其中选择更多模式、插件、检查器和选项。我们将选择`手动`：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we are asked about the features that we will want on the project. Those
    features are some Vue plugins such as `Vuex` or `Router` (`vue-router`), testers,
    linters, and more. Select `Babel`, `Vuex`, and `Linter / Formatter`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们被问及我们将在项目中需要哪些功能。这些功能包括一些Vue插件，如`Vuex`或`Router`（`vue-router`），测试器，检查器等。选择`Babel`，`Vuex`和`Linter
    / Formatter`：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select the `ESLint + Airbnb` config:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择一个检查器和格式化程序来继续此过程。在我们的情况下，我们将选择`ESLint + Airbnb`配置：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied `on save` or fixed `on commit`:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置好检查规则后，我们需要定义它们何时应用于您的代码。它们可以在保存时应用，也可以在提交时修复：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is in
    a dedicated file, but it is also possible to store them in `package.json`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义了所有这些插件、检查器和处理器之后，我们需要选择设置和配置的存储位置。将它们存储在专用文件中是最好的地方，但也可以将它们存储在`package.json`中：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now you can choose whether you want to make this selection a preset for future
    projects, so you don''t need to reselect everything:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以选择是否要将此选择作为将来项目的预设，这样您就不需要重新选择所有内容：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`Vue-CLI` will create the project, and automatically install the packages for
    us.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vue-CLI`将创建项目，并为我们自动安装包。'
- en: 'If you want to check the project on `vue-ui` when the installation has finished,
    open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在安装完成后在`vue-ui`上检查项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Or you can run the built-in `npm` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following
    commands:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以通过打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令来运行内置的`npm`命令：
- en: '`npm run serve` – To run a development server locally'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run serve` – 本地运行开发服务器'
- en: '`npm run build  ` – To build and minify the application for deployment'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build` – 为部署构建和压缩应用程序'
- en: '`npm run lint ` – To execute the lint on the code'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run lint` – 执行代码的lint'
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these instructions to create an auto-import of the `vuex` modules in
    your project that will handle the router files inside a specific folder:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明，在项目中创建`vuex`模块的自动导入，以处理特定文件夹内的路由文件：
- en: 'With our route files created and placed inside the `store` folder, we need
    to make sure that every `store` file has a default `export` object in it. In the `index.js` file,
    inside the `src/store` folder, we will need to extract the array of `stores` or `modules`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`store`文件夹中创建并放置路由文件后，我们需要确保每个`store`文件都有一个默认的`export`对象。在`src/store`文件夹中的`index.js`文件中，我们需要提取`stores`或`modules`的数组：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create another file named `loader.js` in the `src/store` folder (which will
    be our `module` loader). It''s important to remember that when using this recipe,
    you will use `vuex` namespaced because all the `stores` need to be used as a module
    and need to be exported in a single JavaScript object. Each filename will be used
    as a reference to a namespace, and it will be parsed to a camelCase text style:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/store`文件夹中创建另一个名为`loader.js`的文件（它将是我们的`module`加载器）。重要的是要记住，当使用这个方法时，你将使用`vuex`的命名空间，因为所有的`stores`都需要作为一个模块使用，并且需要导出为一个单一的JavaScript对象。每个文件名将被用作命名空间的引用，并且将被解析为驼峰式文本风格：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As we will be importing by default each file inside the `modules` folder, a
    good practice is to create a file for each module. For example, as you will be
    creating a module named `user`, you need to create a file named `user.js` that
    imports all the `stores` actions, mutations, getters, and state. Those can be
    placed inside a folder that has the same name as the module. The `modules` folder
    will have a structure similar to this:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们将默认导入`modules`文件夹中的每个文件，一个好的做法是为每个模块创建一个文件。例如，当你创建一个名为`user`的模块时，你需要创建一个名为`user.js`的文件，它导入所有的`stores`操作、mutations、getters和state。这些可以放在一个与模块同名的文件夹中。`modules`文件夹的结构将类似于这样：
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `user.js` file inside the `src/store/modules` folder will look like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/store/modules`文件夹中的`user.js`文件将如下所示：'
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `index.js` file in the `src/store` folder, we need to add the imported
    modules that were automatically loaded:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/store`文件夹中的`index.js`文件中，我们需要添加自动加载的导入模块：
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now you have your `vuex` modules loaded on your application automatically as
    you create a new `.js` file inside the `src/store/modules` folder.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只要在`src/store/modules`文件夹中创建一个新的`.js`文件，你的`vuex`模块就会自动加载到你的应用程序中。
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`require.context` is a webpack built-in function that receives a directory
    to execute a search, a Boolean flag indicating whether subdirectories are included
    in this search, and a regular expression for the pattern matching for the filename
    (all as arguments).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`require.context`是webpack的内置函数，它接收一个目录来执行搜索，一个布尔标志，指示是否在此搜索中包括子目录，以及用于文件名模式匹配的正则表达式（作为参数）。'
- en: When the building process starts, webpack will search for all the `require.context` functions,
    and will pre-execute them, so the files needed on the import will be there for
    the final build.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建过程开始时，webpack将搜索所有`require.context`函数，并预先执行它们，以便导入所需的文件在最终构建中存在。
- en: In our case, we passed `./modules` for the folder, `false` to not search in
    subdirectories, and `/^(?!.*test).*\.js$/is` as the Regex to search for `.js` files
    and ignore the files that have `.test` in their names.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们传递了`./modules`作为文件夹，`false`表示不搜索子目录，`/^(?!.*test).*\.js$/is`作为正则表达式来搜索`.js`文件并忽略文件名中包含`.test`的文件。
- en: Then, the function will search for the files and will pass the result through
    a `for` loop to add the content of the files in the array of `vuex` modules.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，该函数将搜索文件，并通过`for`循环将结果添加到`vuex`模块的数组中。
- en: See also
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Read more about webpack dependency management and `require.context` in the webpack
    documentation at [https://webpack.js.org/guides/dependency-management/.](https://webpack.js.org/guides/dependency-management/)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在webpack文档中阅读有关webpack依赖管理和`require.context`的更多信息[https://webpack.js.org/guides/dependency-management/.](https://webpack.js.org/guides/dependency-management/)
- en: Creating a custom directive
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义指令
- en: Talking about visual frameworks such as Vue, we always think about components,
    rendering, and visual elements, and we forget that there are a lot of things besides
    the components themselves.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到Vue等视觉框架，我们总是想到组件、渲染和视觉元素，而忘记了除了组件本身之外还有很多东西。
- en: There are the directives that make the components work with the template engine,
    which are the binding agents between the data and the visual result. And there
    are built-in directives in the core of Vue, such as `v-if`, `v-else`, and `v-for`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令使组件与模板引擎一起工作，它们是数据和视觉结果之间的绑定代理。还有Vue核心中的内置指令，如`v-if`，`v-else`和`v-for`。
- en: In this recipe, we will learn how to make our directive.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何制作我们的指令。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: 'We will need to create a new Vue project with `Vue-CLI`, or use the project
    created in previous recipes:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`Vue-CLI`创建一个新的Vue项目，或者使用之前食谱中创建的项目：
- en: 'We need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在Terminal（macOS或Linux）或Command Prompt/PowerShell（Windows）中执行以下命令：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the* Enter* key to continue, and the s*pacebar *to
    select an option.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键导航，*Enter*键继续，*空格键*选择选项。
- en: 'There are two methods for starting a new project. The default method is a basic `babel`
    and `eslint` project without any plugins or configuration, and the `Manually` mode,
    where you can select more modes, plugins, linters, and options. We will go for `Manually`:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两种方法可以启动一个新项目。默认方法是一个基本的`babel`和`eslint`项目，没有任何插件或配置，还有一个`手动`模式，您可以在其中选择更多模式、插件、代码检查工具和选项。我们将选择`手动`：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now we are asked about the features that we want on the project. Those features
    are some Vue plugins such as `Vuex` or `Router` (`vue-router`), testers, linters,
    and more. Select `Babel` and `Linter / Formatter`:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们被问及项目中想要的功能。这些功能包括一些Vue插件，如`Vuex`或`Router`（`vue-router`），测试工具，代码检查工具等。选择`Babel`和`Linter
    / Formatter`：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select the `ESLint + Airbnb` config:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择一个代码检查工具和格式化工具来继续这个过程。在我们的情况下，我们将选择`ESLint + Airbnb`配置：
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied `on save` or fixed `on commit`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置了linting规则之后，我们需要定义它们何时应用于您的代码。它们可以在“保存时”应用，也可以在“提交时”修复：
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is in
    a dedicated file, but it is also possible to store them in `package.json`:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义了所有这些插件、linters和处理器之后，我们需要选择设置和配置存储的位置。存储它们的最佳位置是专用文件，但也可以将它们存储在`package.json`中：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now you can choose whether you want to make this selection a preset for future
    projects so you don''t need to reselect everything:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以选择是否要将此选择作为将来项目的预设，这样您就不需要重新选择所有内容。
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`Vue-CLI` will create the project, and automatically install the packages for
    us.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vue-CLI`将创建项目，并自动为我们安装软件包。'
- en: 'If you want to check the project on `vue-ui` when the installation has finished,
    open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在安装完成后在`vue-ui`上检查项目，请打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE37]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Or, you can run the built-in npm commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following
    commands:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以通过打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令之一来运行内置的npm命令：
- en: '`npm run serve` – To run a development server locally'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run serve` - 本地运行开发服务器'
- en: '`npm run build ` – To build and minify the application for deployment'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build` - 为部署构建和缩小应用程序'
- en: '`npm run lint ` – To execute the lint on the code'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run lint` - 对代码执行lint'
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤如下...
- en: 'Follow these instructions to create a directive for a masked input field:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明创建一个用于掩码输入字段的指令：
- en: Create a file named `formMaskInputDirective.js` in the `src/directives` folder,
    and a file named `tokens.js` in the same folder.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/directives`文件夹中创建名为`formMaskInputDirective.js`的文件，并在同一文件夹中创建名为`tokens.js`的文件。
- en: 'In the `tokens.js` file, we will add our mask base tokens. Those tokens will
    be used to identify the kind of value our input will accept:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tokens.js`文件中，我们将添加我们的掩码基本令牌。这些令牌将用于识别我们的输入将接受的值类型：
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We import the token from `token.js` and create our functions:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从`token.js`导入令牌并创建我们的函数：
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the `maskDirective` function, we will need to check for the binding value
    on the directive that is passed by the callee of the directive and check whether
    it''s a valid binding. To do so, we will first check whether the `value` property
    is present on the `binding` argument, and then add it to the `config` variable
    with the `tokens` that were imported:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`maskDirective`函数中，我们需要检查调用者传递的指令上的绑定值，并检查它是否是有效的绑定。为此，我们首先检查`binding`参数上是否存在`value`属性，然后将其添加到`tokens`中导入的`config`变量中：
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now we need to check for the element and validate whether it''s an `input`
    HTML element. To do so, we will check whether the element that was passed down
    by the directive has a `tagName` of `input`, and if it doesn''t, we will try to
    find an `input` HTML element in the element that was passed down:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要检查元素并验证它是否是`input` HTML元素。为此，我们将检查指令传递的元素是否具有`input`的`tagName`，如果没有，我们将尝试在传递的元素中找到`input`
    HTML元素：
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now we need to add an event listener to the input on the element. The listener
    will call two external functions, one for dispatching the events and another to
    return the masked value to the input:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要为元素添加事件侦听器。侦听器将调用两个外部函数，一个用于分派事件，另一个用于将掩码值返回到输入中：
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Let''s create the `eventDispatcher` function; this function will emit the events
    that will be listened to by the `v-on` directive:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建`eventDispatcher`函数；这个函数将发出事件，将被`v-on`指令监听到：
- en: '[PRE43]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And now the complicated part: returning the masked input value to the input.
    To do so, we will need to create the `maskerValue` function. This function receives
    the value, mask, and token as parameters. The function checks for the current
    value against the mask, to see whether the mask is complete or the value is of
    a valid token. If everything''s okay, it will pass the value to the input:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在复杂的部分：将掩码输入值返回到输入框。为此，我们需要创建`maskerValue`函数。该函数接收值、掩码和令牌作为参数。该函数检查当前值与掩码是否匹配，以查看掩码是否完整或值是否是有效令牌。如果一切正常，它将把值传递给输入框：
- en: '[PRE44]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'With our file ready, we need to import the mask directive in the `main.js` file
    and add the directive to Vue, giving the directive the name `''input-mask''`:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备好后，我们需要在`main.js`文件中导入掩码指令，并将指令添加到Vue中，给指令命名为`'input-mask'`：
- en: '[PRE45]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To use the directive on our application, we need to call the directive on an
    `input` HTML element inside a single file component `<template>` section, passing
    the `token` template `''###-###-###''` in the `v-input-mask` directive like this:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在我们的应用程序中使用该指令，我们需要在单文件组件`<template>`部分的`input` HTML元素上调用指令，将`token`模板`'###-###-###'`作为参数传递给`v-input-mask`指令，如下所示：
- en: '[PRE46]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: A Vue directive has five possible hooks. We used just one, `bind`. It's bound
    directly to the element and component. It gets three arguments: `element`, `binding`,
    and `vnode`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Vue指令有五个可能的钩子。我们只使用了一个`bind`。它直接绑定到元素和组件。它有三个参数：`element`，`binding`和`vnode`。
- en: When we add the directive in the `main.js` file to Vue, we make it available
    everywhere in our application, so the directive is already at `App.vue` to be
    used by the input.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在`main.js`文件中将指令添加到Vue中时，它将在整个应用程序中可用，因此该指令已经在`App.vue`中，可以被输入框使用。
- en: At the same time we call `v-input-mask` on the input element, we pass the first
    argument, `element`, to the directive, and the second argument, `binding`, is
    the value of the attribute.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`v-input-mask`的同时，我们将第一个参数`element`传递给指令，第二个参数`binding`是属性的值。
- en: Our directive works by checking each new character value on the input. A Regex
    test is executed and validates the character to see whether it is a valid character
    on the token list that was given on the directive instantiation. Then, it returns
    the character if it passes the test, or returns nothing if it's an invalid character.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的指令通过检查输入框上的每个新字符值来工作。执行正则表达式测试并验证字符，以查看它是否是指令实例化时给定的令牌列表中的有效字符。然后，如果通过测试，它将返回字符，如果是无效字符，则不返回任何内容。
- en: Creating a Vue plugin
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Vue插件
- en: Sometimes a new addition to your application is needed, and this addition needs
    to be shared. The best way to share it is by using a plugin. In Vue, a plugin
    is an addition to the Vue global prototype by extending the initialized application
    with new features such as directives, mixings, filters, prototype injection, or
    totally new functions.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要对应用程序进行新的添加，并且需要共享这个添加。最好的共享方式是使用插件。在Vue中，插件是通过扩展初始化应用程序的Vue全局原型来添加新功能，如指令、混合、过滤器、原型注入或全新功能。
- en: Now we will learn how to make our plugin, and how we can use it to interact
    with Vue as a whole (without messing with the prototype and breaking it).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将学习如何制作我们的插件，以及如何使用它与整个Vue进行交互（而不会干扰原型并破坏它）。
- en: Getting ready
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: 'We will need to create a new Vue project with the `Vue-CLI`, or use the project
    created in previous recipes:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`Vue-CLI`创建一个新的Vue项目，或者使用以前的配方创建的项目：
- en: 'We need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE47]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the s*pacebar *to
    select an option.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键导航，*Enter*键继续，s*pacebar*选择选项。
- en: 'There are two methods for starting a new project. The default method is a basic `babel`
    and `eslint` project without any plugins or configuration, and the `Manually` mode,
    where you can select more modes, plugins, linters, and options. We will go for `Manually`:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两种启动新项目的方法。默认方法是一个基本的`babel`和`eslint`项目，没有任何插件或配置，以及`手动`模式，您可以在其中选择更多模式、插件、linter和选项。我们将选择`手动`：
- en: '[PRE48]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now we are asked about the features that we want on the project. Those features
    are some Vue plugins such as `Vuex` or `Router` (`vue-router`), testers, linters,
    and more. Select `Babel`, and `Linter / Formatter`:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们被问及我们想要在项目中的功能。这些功能是一些Vue插件，如`Vuex`或`Router`（`vue-router`），测试器，linter等。选择`Babel`和`Linter
    / Formatter`：
- en: '[PRE49]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select the `ESLint + Airbnb` config:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择一个linter和formatter来继续此过程。在我们的情况下，我们将选择`ESLint + Airbnb`配置：
- en: '[PRE50]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied `on save` or fixed `on commit`:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置linting规则后，我们需要定义它们何时应用于您的代码。它们可以在保存时应用，也可以在提交时修复：
- en: '[PRE51]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is in
    a dedicated file, but it is also possible to store them in `package.json`:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义了所有这些插件、linter和处理器之后，我们需要选择设置和配置的存储位置。存储它们的最佳位置是专用文件，但也可以将它们存储在`package.json`中：
- en: '[PRE52]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now you can choose whether you want to make this selection a preset for future
    projects, so you don''t need to reselect everything:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以选择是否要将此选择设置为将来项目的预设，这样您就不需要重新选择所有内容：
- en: '[PRE53]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '`Vue-CLI` will create the project, and automatically install the packages for
    us.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Vue-CLI将创建项目，并自动为我们安装包。
- en: 'If you want to check the project on `vue-ui` when the installation has finished,
    open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在安装完成后在`vue-ui`上检查项目，请打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE54]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Or, you can run the built-in npm commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following
    commands:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以通过打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令之一来运行内置的npm命令：
- en: '`npm run serve` – To run a development server locally'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run serve` - 本地运行开发服务器'
- en: '`npm run build ` – To build and minify the application for deployment'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build` - 为部署构建和缩小应用程序'
- en: '`npm run lint ` – To execute the lint on the code'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run lint` - 执行代码上的lint'
- en: How to do it...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Writing a Vue plugin is simple, and there is no need to learn more about Vue
    itself. The basic concept of a plugin is an object that needs to have an `install`
    function, which will be executed when called by the `Vue.use()` method. The `install`
    function will receive two arguments: Vue, and the options that will be used to
    instantiate the plugin.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 编写Vue插件很简单，无需更多了解Vue本身。插件的基本概念是一个需要具有`install`函数的对象，当通过`Vue.use()`方法调用时将执行该函数。`install`函数将接收两个参数：Vue和将用于实例化插件的选项。
- en: 'Follow these instructions to write a plugin that adds two new functions to
    the Vue global prototype, `$localStorage` and `$sessionStorage`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明编写一个插件，向Vue全局原型添加两个新函数`$localStorage`和`$sessionStorage`：
- en: In our project, we need to create a file inside the `src/plugin` folder named
    `storageManipulator.js`.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们需要在`src/plugin`文件夹中创建一个名为`storageManipulator.js`的文件。
- en: 'In this file, we will create the plugin installation object – we''ll add the
    default plugin options and the base prototype for the functions:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将创建插件安装对象-我们将添加默认的插件选项和函数的基本原型：
- en: '[PRE55]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now we need to create the `generateStorageObject` function. This function will
    receive two arguments: the first will be the window storage object, and the second
    will be the plugin options. With this, it will be possible to generate the object
    that will be used on the prototype that will be injected into Vue:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要创建`generateStorageObject`函数。这个函数将接收两个参数：第一个是窗口存储对象，第二个是插件选项。通过这样，将可以生成将用于注入到Vue中的原型的对象：
- en: '[PRE56]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We need to import the plugin into the `main.js`, and then with the `Vue.use`
    function, install the plugin in our Vue application:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要将插件导入到`main.js`中，然后使用`Vue.use`函数在我们的Vue应用程序中安装插件：
- en: '[PRE57]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Now you can use the plugin anywhere in your Vue application, calling the `this.$localStorage` method
    or `this.$sessionStorage`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以在Vue应用程序的任何地方使用插件，调用`this.$localStorage`方法或`this.$sessionStorage`。
- en: How it works...
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The Vue plugin works by adding all the code that was instructed to be used to
    the Vue application layer (like a mixin).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Vue插件通过将所有指令要使用的代码添加到Vue应用程序层（如mixin）来工作。
- en: When we used `Vue.use()` to import our plugin, we told Vue to call the `install()`
    function on the object of the imported file and executed it. Vue will automatically
    pass the current Vue as the first argument, and the options (if you declare them)
    as the second argument.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`Vue.use()`导入我们的插件时，我们告诉Vue在导入文件的对象上调用`install()`函数并执行它。Vue将自动将当前Vue作为第一个参数传递，并将选项（如果声明了）作为第二个参数传递。
- en: In our plugin, when the `install()` function is called, we first create `baseOptions`,
    merging the default options with the passed parameter, then we inject two new
    properties into the Vue prototype. Those properties are now available everywhere
    because the `Vue` parameter that was passed is the `Vue global` being used in
    the application.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的插件中，当调用`install()`函数时，我们首先创建`baseOptions`，将默认选项与传递的参数合并，然后将两个新属性注入到Vue原型中。这些属性现在因为传递的`Vue`参数是应用程序中使用的`Vue全局`，所以在任何地方都可用。
- en: Our `generateStorageObject` is a pure abstraction of the Storage API of the
    browser. We use it as a generator for our prototypes inside the plugin.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`generateStorageObject`是浏览器的Storage API的纯抽象。我们将其用作插件内原型的生成器。
- en: See also
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: You can find more information about Vue plugins at [https://vuejs.org/v2/guide/plugins.html.](https://vuejs.org/v2/guide/plugins.html)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuejs.org/v2/guide/plugins.html](https://vuejs.org/v2/guide/plugins.html)找到有关Vue插件的更多信息。
- en: You can find a curated list of awesome Vue plugins at [https://github.com/vuejs/awesome-vue.](https://github.com/vuejs/awesome-vue)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/vuejs/awesome-vue](https://github.com/vuejs/awesome-vue)找到精选的Vue插件列表。
- en: Creating an SSR, SPA, PWA, Cordova, and Electron application in Vue with Quasar
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Quasar在Vue中创建SSR、SPA、PWA、Cordova和Electron应用程序
- en: Quasar is a framework based on Vue and Material Design that takes advantage
    of "write once, use everywhere."
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Quasar是一个基于Vue和Material Design的框架，利用“一次编写，随处使用”的优势。
- en: The CLI can deploy the same code base to different flavors, such as **Single-Page
    Application** (**SPA**), **Server-Side Rendering** (**SSR**), **Progressive Web Application** (**PWA**),
    **Mobile Application** (Cordova), and **Desktop Application** (Electron).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: CLI可以将相同的代码库部署到不同的版本，如**单页应用程序**（**SPA**）、**服务器端渲染**（**SSR**）、**渐进式Web应用程序**（**PWA**）、**移动应用程序**（Cordova）和**桌面应用程序**（Electron）。
- en: This takes some of the problems away from the developer, such as configuring
    webpack, Cordova, and Electron with **HMR** (**Hot Module Reload**) for development,
    or adding an SSR configuration in the SPA project. The framework helps the developer
    start production as soon as possible.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这减轻了开发人员的一些问题，比如为开发配置webpack、Cordova和Electron与**HMR**（**热模块重新加载**），或者在SPA项目中添加SSR配置。该框架帮助开发人员尽快开始生产。
- en: In this recipe, we will learn how to use Quasar and the CLI to create a basic
    project, and how to use the CLI to add the development targets for SPA, PWA, SSR,
    Mobile Application, and Desktop Application.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何使用Quasar和CLI来创建一个基本项目，以及如何使用CLI为SPA、PWA、SSR、移动应用和桌面应用添加开发目标。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程的先决条件如下：
- en: Node.js 12+
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global object that is required is as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@quasar/cli`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@quasar/cli`'
- en: We will need to create a new Quasar project with the Quasar CLI, or use the
    project created in previous recipes.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用Quasar CLI创建一个新的Quasar项目，或者使用之前创建的项目。
- en: 'To do it, open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE58]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now, when asked, we need to choose to manually select features:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当被询问时，我们需要选择手动选择功能：
- en: '`Quasar-CLI` will ask you for a project name. Define your project name. In
    our case, we choose `quasar_project`:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Quasar-CLI`将要求您输入项目名称。定义您的项目名称。在我们的情况下，我们选择了`quasar_project`：'
- en: '[PRE59]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Then `Quasar-CLI` will ask for a project product name. This will be used by mobile
    apps to defined their title name. In our case, we stayed with the default name
    provided:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后`Quasar-CLI`将要求输入项目产品名称。这将被移动应用程序用来定义它们的标题名称。在我们的情况下，我们使用了提供的默认名称：
- en: '[PRE60]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now `Quasar-CLI` will ask for a project description. This is used for a meta
    tag in search engines when the page is shared. In our case, we used the default
    description provided:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在`Quasar-CLI`将要求输入项目描述。这在页面被分享时用于搜索引擎的元标记。在我们的情况下，我们使用了提供的默认描述：
- en: '[PRE61]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Then `Quasar-CLI` will ask for the project author. Fill this with a `package.json`
    valid name (for example, `Heitor Ribeiro<heitor@example.com>`):'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后`Quasar-CLI`将要求输入项目作者。用`package.json`的有效名称填写（例如，`Heitor Ribeiro<heitor@example.com>`）：
- en: '[PRE62]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now it''s time to choose the CSS preprocessor. In our case, we will go with `Sass
    with indented syntax`:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是选择CSS预处理器的时候了。在我们的情况下，我们将选择`Sass with indented syntax`：
- en: '[PRE63]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then `Quasar-CLI` will ask about the import strategy for the components and
    directives. We will use the default `auto-import` strategy:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后`Quasar-CLI`将询问组件和指令的导入策略。我们将使用默认的`auto-import`策略：
- en: '[PRE64]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now we need to choose the extra features for the project. We will select `EsLint`:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要为项目选择额外的功能。我们将选择`EsLint`：
- en: '[PRE65]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'After that, `Quasar-CLI` will ask for a preset for ESLint. Choose the `Airbnb`
    preset:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，`Quasar-CLI`将要求选择ESLint的预设。选择`Airbnb`预设：
- en: '[PRE66]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Finally, `Quasar-CLI` will ask for the application you want to use to install
    the dependencies of the project. In our case, we used `yarn` because we have installed
    it already (but you can choose the one you prefer):'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，`Quasar-CLI`将要求选择要用于安装项目依赖项的应用程序。在我们的情况下，我们使用了`yarn`，因为我们已经安装了它（但您可以选择您喜欢的）：
- en: '[PRE67]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Now open the created folder in your IDE or code editor.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在您的IDE或代码编辑器中打开创建的文件夹。
- en: How to do it...
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: When using Quasar to create an application, you always need to choose a flavor
    to start, but the main code will be an SPA. Therefore, the other flavors will
    have their special treats and delicacies based on their needs, but you can personalize
    and make your build execute some code based on the build environment.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Quasar创建应用程序时，您总是需要选择一个口味来开始，但主要代码将是SPA。因此，其他口味将根据其需求具有其特殊的功能和特色，但您可以根据构建环境个性化并使您的构建执行一些代码。
- en: Developing an SPA (Single-Page Application)
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发SPA（单页应用程序）
- en: Starting the development of an SPA is an out-of-the-box solution; there is no
    need to add any new configuration.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 开始开发SPA是一个开箱即用的解决方案；不需要添加任何新的配置。
- en: 'So let''s start adding a new page to our application. Open Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    command:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们开始向我们的应用程序添加一个新页面。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE68]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '`Quasar-CLI` will automatically create the Vue page for us. We need to add
    the reference to the page in the router file, and the page will be available on
    the application:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`Quasar-CLI`将自动为我们创建Vue页面。我们需要在路由文件中添加对页面的引用，然后该页面将在应用程序中可用：'
- en: 'To do it, we need to open the `routes.js` file in the `src/router` folder,
    and add the `About` page:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要打开`src/router`文件夹中的`routes.js`文件，并添加`About`页面：
- en: '[PRE69]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Then open the `About.vue` file in the `src/pages` folder. You will find that
    the file is a single file component that has an empty `QPage` component in it,
    so we need to add a basic title and page indication in the `<template>` section:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在`src/pages`文件夹中打开`About.vue`文件。您会发现该文件是一个单文件组件，其中有一个空的`QPage`组件，因此我们需要在`<template>`部分中添加基本标题和页面指示：
- en: '[PRE70]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Now, in the `MainLayout.vue` file, in the `src/layouts` folder, to the `q-drawer`
    component, we need to add the links to the `Home` and `About` page:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`src/layouts`文件夹中的`MainLayout.vue`文件中，对于`q-drawer`组件，我们需要添加到`Home`和`About`页面的链接：
- en: '[PRE71]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: And we are finished with a simple example of an SPA running inside a Quasar
    framework.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了一个简单的SPA在Quasar框架内运行的示例。
- en: Commands
  id: totrans-287
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命令
- en: 'You can run the `Quasar-CLI` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令之一来运行`Quasar-CLI`命令：
- en: '`quasar dev` – To start development mode'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar dev` - 启动开发模式'
- en: '`quasar build` – To build the SPA'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar build` - 构建SPA'
- en: Developing a PWA (Progressive Web Application)
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发PWA（渐进式Web应用程序）
- en: 'To develop a PWA, we first need to inform Quasar that we want to add a new
    mode of development. Open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 开发PWA，我们首先需要告诉Quasar我们想要添加一个新的开发模式。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE72]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '`Quasar-CLI` will create a folder called `src-pwa` that will have our `service-workers` files,
    separated from our main code.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`Quasar-CLI`将创建一个名为`src-pwa`的文件夹，其中将包含我们的`service-workers`文件，与我们的主要代码分开。'
- en: 'To clean the newly added files, and to lint it into the Airbnb format, we need
    to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清理新添加的文件，并将其格式化为Airbnb格式，我们需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE73]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The code that we added to the SPA will still be used as our base so that we
    can add new pages, components, and other functions to it as well, which will be
    used on the PWA.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加到SPA的代码仍将被用作我们的基础，以便我们可以添加新页面、组件和其他功能，这些功能也将用于PWA。
- en: So, are you wondering why `service-worker` is not in the main `src` folder?
    This is because those files are exclusively for PWAs, and are not needed in any
    other case than this one. The same will happen in different build types, such
    as Electron, Cordova, and SSR.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，您是否想知道为什么`service-worker`不在主`src`文件夹中？这是因为这些文件专门用于PWA，并且在除此之外的任何其他情况下都不需要。在不同的构建类型中也会发生相同的情况，例如Electron，Cordova和SSR。
- en: Configuring quasar.conf on a PWA
  id: totrans-299
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在PWA上配置quasar.conf
- en: 'For PWA development, you can set some special flags on the `quasar.conf.js` file
    in the `root` folder:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PWA开发，您可以在`root`文件夹中的`quasar.conf.js`文件上设置一些特殊标志：
- en: '[PRE74]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Commands
  id: totrans-302
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命令
- en: 'You can run the `Quasar-CLI` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令之一来运行`Quasar-CLI`命令：
- en: '`quasar dev -m pwa` – To start development mode as a PWA'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar dev -m pwa` - 以PWA模式启动开发模式'
- en: '`quasar build -m pwa` – To build the code as a PWA'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar build -m pwa` - 将代码构建为PWA'
- en: Developing SSR (Server-Side Rendering)
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发SSR（服务器端渲染）
- en: 'To develop SSR, we first need to inform Quasar that we want to add a new mode
    of development. Open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发SSR，我们首先需要告诉Quasar我们想要添加一个新的开发模式。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE75]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '`Quasar-CLI` will create a folder called `src-ssr` that will have our `extension` and `server` starter
    files, separated from our main code.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`Quasar-CLI`将创建一个名为`src-ssr`的文件夹，其中包含我们的`extension`和`server`启动文件，与我们的主要代码分开。'
- en: The `extension` file is not transpiled by `babel` and runs on the Node.js context,
    so it is the same environment as an Express or `Nuxt.js` application. You can
    use server plugins, such as `database`, `fileread`, and `filewrites`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`extension`文件不会被`babel`转译，并在Node.js上下文中运行，因此与Express或`Nuxt.js`应用程序相同。您可以使用服务器插件，如`database`，`fileread`和`filewrites`。'
- en: The `server` starter files will be our `index.js` file in the `src-ssr` folder.
    As the extension, it is not transpiled by `babel` and runs on the Node.js context.
    For the HTTP server, it uses Express**,** and if you configure `quasar.conf.js` to
    pass the client a PWA, you can have an SSR with PWA at the same time.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`server`启动文件将是我们`src-ssr`文件夹中的`index.js`文件。与扩展名一样，它不会被`babel`转译，并在Node.js上下文中运行。对于HTTP服务器，它使用Express，并且如果您配置`quasar.conf.js`以向客户端传递PWA，则可以同时拥有SSR和PWA。'
- en: Configuring quasar.conf on SSR
  id: totrans-312
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在SSR上配置quasar.conf
- en: 'For SSR development, you can configure some special flags on the `quasar.conf.js` file
    in the `root` folder:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SSR开发，您可以在`root`文件夹中的`quasar.conf.js`文件上配置一些特殊标志：
- en: '[PRE76]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Commands
  id: totrans-315
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命令
- en: 'You can run the `Quasar-CLI` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令之一来运行`Quasar-CLI`命令：
- en: '`quasar dev -m ssr` – To start development mode as SSR'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar dev -m ssr` - 以SSR模式启动开发模式'
- en: '`quasar build -m ssr` – To build the code as SSR'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar build -m ssr` - 将代码构建为SSR'
- en: '`quasar serve` – To run an HTTP server (can be used in production)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar serve` - 运行HTTP服务器（可用于生产）'
- en: Developing a mobile application (Cordova)
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发移动应用程序（Cordova）
- en: 'To develop SSR, we first need to inform Quasar that we want to add a new mode
    of development. Open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发SSR，我们首先需要告诉Quasar我们想要添加一个新的开发模式。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE77]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Now the `Quasar-CLI` will ask you some configuration questions:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`Quasar-CLI`将询问您一些配置问题：
- en: '**What is the Cordova app ID?** `(org.cordova.quasar.app)`'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Cordova应用程序ID是什么？** `(org.cordova.quasar.app)`'
- en: '**May Cordova anonymously report usage statistics to improve the tool over
    time?** **(Y/N)** `N`'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Cordova是否可以匿名报告使用统计数据以随时间改进工具？** **（Y/N）** `N`'
- en: '`Quasar-CLI`will create a folder called `src-cordova`, which will have a Cordova
    project inside.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`Quasar-CLI`将创建一个名为`src-cordova`的文件夹，其中将包含一个Cordova项目。'
- en: 'The folder structure of a Cordova project looks like this:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova项目的文件夹结构如下：
- en: '[PRE78]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: As a separate project inside Quasar, to add Cordova plugins, you need to call
    `plugman` or `cordova plugin add command` inside the `src-cordova` folder.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Quasar内部的一个独立项目，要添加Cordova插件，您需要在`src-cordova`文件夹内调用`plugman`或`cordova plugin
    add`命令。
- en: Configuring quasar.conf on Cordova
  id: totrans-330
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在Cordova上配置quasar.conf
- en: 'For Cordova development, you can set some special flags on the `quasar.conf.js`
    file in the `root` folder:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Cordova开发，您可以在`root`文件夹中的`quasar.conf.js`文件上设置一些特殊标志：
- en: '[PRE79]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Commands
  id: totrans-333
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命令
- en: 'You can run the `Quasar-CLI` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令来运行`Quasar-CLI`命令：
- en: If you don't have a Cordova environment already configured on your desktop,
    you can find more information on how to set it up here: [https://quasar.dev/quasar-cli/developing-cordova-apps/preparation#Android-setup](https://quasar.dev/quasar-cli/developing-cordova-apps/preparation#Android-setup).
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的桌面上尚未配置Cordova环境，您可以在此处找到有关如何设置的更多信息：[https://quasar.dev/quasar-cli/developing-cordova-apps/preparation#Android-setup](https://quasar.dev/quasar-cli/developing-cordova-apps/preparation#Android-setup)。
- en: '`quasar dev -m cordova -T android` – To start development mode as an Android
    Device Emulator'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar dev -m cordova -T android` – 以Android设备模拟器的形式启动开发模式'
- en: '`quasar build -m cordova -T android` – To build the code as Android'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar build -m cordova -T android` – 作为Android构建代码'
- en: '`quasar dev -m cordova -T ios` – To start development mode as an iOS device
    emulator (macOS only)'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar dev -m cordova -T ios` – 以iOS设备模拟器的形式启动开发模式（仅限macOS）'
- en: '`quasar build -m cordova -T ios` – To start build mode as an iOS device emulator
    (macOS only)'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar build -m cordova -T ios` – 以iOS设备模拟器的形式启动构建模式（仅限macOS）'
- en: Developing a desktop application (Electron)
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发桌面应用程序（Electron）
- en: 'To develop an SSR, we first need to inform Quasar that we want to add a new
    mode of development. Open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发SSR，我们首先需要告诉Quasar我们想要添加一个新的开发模式。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE80]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '`Quasar-CLI` will create a folder called `src-electron`, which will have an
    Electron project inside.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`Quasar-CLI`将创建一个名为`src-electron`的文件夹，其中将包含一个Electron项目。'
- en: 'The folder structure for Electron projects looks like this:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: Electron项目的文件夹结构如下：
- en: '[PRE81]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Inside the `icons` folder, you will find the icons that `electron-packager` will
    use when building your project. In the `main-process` folder will be your main
    Electron files, spliced into two files: one that will only be called on development
    and another that will be called on development and production.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在`icons`文件夹中，您将找到`electron-packager`在构建项目时将使用的图标。在`main-process`文件夹中将是您的主要Electron文件，分成两个文件：一个仅在开发时调用，另一个在开发和生产时调用。
- en: Configuring quasar.conf on Electron
  id: totrans-347
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在Electron上配置quasar.conf
- en: 'For Electron development, you can set some special flags on the `quasar.conf.js` file
    in the root folder:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Electron开发，您可以在根文件夹的`quasar.conf.js`文件上设置一些特殊标志：
- en: '[PRE82]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The `packager` key uses the API options for the `electron-packager` module,
    and the `builder` key uses the API options for the `electron-builder` module.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`packager`键使用`electron-packager`模块的API选项，`builder`键使用`electron-builder`模块的API选项。'
- en: Commands
  id: totrans-351
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命令
- en: 'You can run the `Quasar-CLI` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令之一来运行`Quasar-CLI`命令：
- en: '`quasar dev -m electron` – To start development mode as Electron'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar dev -m electron` – 以Electron模式启动开发模式'
- en: '`quasar build -m electron` – To build the code as Electron'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quasar build -m electron` – 以Electron模式构建代码'
- en: How it works...
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is all possible because Quasar framework encapsulates the building, parsing,
    and bundling for you on the CLI. You don't need to worry about webpack and configurations
    with Electron, Cordova, or even Babel.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都是可能的，因为Quasar框架在CLI上封装了构建、解析和捆绑。您不需要担心使用Electron、Cordova甚至Babel的webpack和配置。
- en: A simple CLI command can generate an entirely new page, layout, component, store,
    route, or even a new build for you. As the CLI is just a wrapper around Vue, webpack,
    Babel, and other tools, you are not tied to using only Quasar visual components.
    If you don't want to use them, it's possible to not import them and use the power
    of the CLI for building your application.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的CLI命令可以为您生成全新的页面、布局、组件、存储、路由，甚至是一个新的构建。由于CLI只是Vue、webpack、Babel和其他工具的包装器，您不必只使用Quasar的可视组件。如果您不想使用它们，可以选择不导入它们，并利用CLI构建应用程序的功能。
- en: See also
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can check out more about Quasar framework in the documentation at [https://quasar.dev/introduction-to-quasar.](https://quasar.dev/introduction-to-quasar)
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://quasar.dev/introduction-to-quasar](https://quasar.dev/introduction-to-quasar)的文档中了解更多关于Quasar框架的信息
- en: Read more about SPA development with Quasar at [https://quasar.dev/quasar-cli/developing-spa/introduction.](https://quasar.dev/quasar-cli/developing-spa/introduction)
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://quasar.dev/quasar-cli/developing-spa/introduction](https://quasar.dev/quasar-cli/developing-spa/introduction)上阅读有关Quasar的SPA开发的更多信息
- en: Read more about PWA development with Quasar at [https://quasar.dev/quasar-cli/developing-pwa/introduction.](https://quasar.dev/quasar-cli/developing-pwa/introduction)
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://quasar.dev/quasar-cli/developing-pwa/introduction](https://quasar.dev/quasar-cli/developing-pwa/introduction)上阅读有关Quasar的PWA开发的更多信息
- en: Read more about SSR development with Quasar at [https://quasar.dev/quasar-cli/developing-ssr/introduction.](https://quasar.dev/quasar-cli/developing-ssr/introduction)
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://quasar.dev/quasar-cli/developing-ssr/introduction](https://quasar.dev/quasar-cli/developing-ssr/introduction)上阅读有关Quasar的SSR开发的更多信息
- en: Read more about mobile application development with Quasar at [https://quasar.dev/quasar-cli/developing-cordova-apps/introduction.](https://quasar.dev/quasar-cli/developing-cordova-apps/introduction)
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://quasar.dev/quasar-cli/developing-cordova-apps/introduction](https://quasar.dev/quasar-cli/developing-cordova-apps/introduction)上阅读有关Quasar的移动应用开发的更多信息
- en: Read more about the Cordova project at [https://cordova.apache.org.](https://cordova.apache.org)
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://cordova.apache.org](https://cordova.apache.org)上阅读有关Cordova项目的更多信息
- en: Read more about desktop application development with Quasar at [https://quasar.dev/quasar-cli/developing-electron-apps/introduction.](https://quasar.dev/quasar-cli/developing-electron-apps/introduction)
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://quasar.dev/quasar-cli/developing-electron-apps/introduction](https://quasar.dev/quasar-cli/developing-electron-apps/introduction)上阅读有关Quasar的桌面应用程序开发的更多信息
- en: Read more about the Electron project at [https://electronjs.org/.](https://electronjs.org/)
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://electronjs.org/](https://electronjs.org/)上阅读有关Electron项目的更多信息
- en: Read more about `electron-packager` at [https://github.com/electron/electron-packager.](https://github.com/electron/electron-packager)
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://github.com/electron/electron-packager](https://github.com/electron/electron-packager)上阅读有关`electron-packager`的更多信息
- en: Find the `electron-packager` options API at [https://electron.github.io/electron-packager/master/interfaces/electronpackager.options.html.](https://electron.github.io/electron-packager/master/interfaces/electronpackager.options.html)
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://electron.github.io/electron-packager/master/interfaces/electronpackager.options.html](https://electron.github.io/electron-packager/master/interfaces/electronpackager.options.html)找到`electron-packager`选项API。
- en: Read more about `electron-build` at [https://www.electron.build/.](https://www.electron.build/)
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://www.electron.build/](https://www.electron.build/)了解更多关于`electron-build`的信息。
- en: Find the electron-build options API at [https://www.electron.build/configuration/configuration.](https://www.electron.build/configuration/configuration)
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://www.electron.build/configuration/configuration](https://www.electron.build/configuration/configuration)找到`electron-build`选项API。
- en: Creating smarter Vue watchers and computed properties
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建更智能的Vue观察者和计算属性
- en: In Vue, using watchers and computed properties is always an excellent solution
    to check and cache your data, but sometimes that data needs some special treatment
    or needs to be manipulated differently than expected. There are some ways to give
    these Vue APIs a new life, helping your development and productivity.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中，使用观察者和计算属性总是一个很好的解决方案，可以检查和缓存您的数据，但有时这些数据需要一些特殊处理，或者需要与预期不同的方式进行操作。有一些方法可以赋予这些Vue
    API新的生命，帮助您的开发和生产力。
- en: How to do it...
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will divide this recipe into two categories: one for the watchers and another
    for the computed properties. Some methods are commonly used together, such as
    the `non-cached` computed and `deep-watched` values.'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个配方分为两类：一个是观察者，另一个是计算属性。有些方法通常一起使用，比如`non-cached`计算和`deep-watched`值。
- en: Watchers
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 观察者
- en: These three watcher recipes were selected to improve productivity and the final
    code quality. The usage of these methods can reduce code duplication and improve
    code reuse.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 选择这三个观察者配方是为了提高生产力和最终代码质量。使用这些方法可以减少代码重复，提高代码重用。
- en: Using method names
  id: totrans-377
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用方法名
- en: 'All watchers can receive a method name instead of functions, preventing you
    from writing duplicated code. This will help you avoid re-writing the same code,
    or checking for values and passing them to the functions:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 所有观察者都可以接收方法名而不是函数，从而避免编写重复的代码。这将帮助您避免重写相同的代码，或者检查值并将其传递给函数：
- en: '[PRE83]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Immediate calls and deep listening
  id: totrans-380
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 立即调用和深度监听
- en: 'You can set your watcher to execute as soon as it is created by passing a property
    immediately and make it execute no matter the value''s depth of mutation by calling
    the `deep` property:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递一个属性立即执行您的观察者，并通过调用`deep`属性使其无论值的变化深度如何都执行：
- en: '[PRE84]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Multiple handlers
  id: totrans-383
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多个处理程序
- en: 'You can make your watcher execute various handlers at the same time, without
    needing to set the watch handler to bind to a unique function:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使您的观察者同时执行多个处理程序，而无需将观察处理程序设置为绑定到唯一的函数：
- en: '[PRE85]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Computed
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算属性
- en: Sometimes computed properties are just used as simple cache-based values, but
    there is more power to them. Here are two methods that show how to extract this
    power.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 有时计算属性只是作为简单的基于缓存的值使用，但它们有更大的潜力。以下是两种显示如何提取此功能的方法。
- en: No cached value
  id: totrans-388
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 无缓存值
- en: 'You can make your computed property an always updated value, rather than a
    cached value, by setting the `cache` property to `false`:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`cache`属性设置为`false`，您可以使计算属性始终更新值，而不是缓存值：
- en: '[PRE86]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Getter and setter
  id: totrans-391
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取器和设置器
- en: You can add a setter function to your computed property and make it a fully
    complete data attribute, but not bound to the data.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向计算属性添加一个setter函数，并使其成为一个完全完整的数据属性，但不绑定到数据。
- en: 'It''s not recommended to do this, but it''s possible, and in some cases, you
    may need to do it. An example is when you have to save a date in milliseconds,
    but you need to display it in an ISO format. Using this method, you can have the
    `dateIso` property `get` and `set` the value:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议这样做，但是可能，在某些情况下，你可能需要这样做。一个例子是当你需要以毫秒保存日期，但需要以ISO格式显示它。使用这种方法，你可以让`dateIso`属性`get`和`set`值：
- en: '[PRE87]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: See also
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about the Vue `watch` API at [https://vuejs.org/v2/api/#watch.](https://vuejs.org/v2/api/#watch)
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuejs.org/v2/api/#watch](https://vuejs.org/v2/api/#watch)找到有关Vue
    `watch` API的更多信息。
- en: You can find more information about the Vue `computed` API at [https://vuejs.org/v2/api/#computed.](https://vuejs.org/v2/api/#computed)
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuejs.org/v2/api/#computed](https://vuejs.org/v2/api/#computed)找到有关Vue
    `computed` API的更多信息。
- en: Creating a Nuxt.js SSR with Python Flask as the API
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python Flask作为API创建Nuxt.js SSR
- en: '`Nuxt.js` is a server-side rendering framework that renders everything at the
    server and delivers it loaded. With this process, the page gets the power of SEO
    and fast API fetching before rendering.'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`Nuxt.js`是一个服务器端渲染框架，可以在服务器端渲染所有内容并将其加载。通过这个过程，页面获得了SEO的力量和在渲染之前快速的API获取。'
- en: Using it correctly, you can achieve a powerful SPA or PWA with other functions
    that weren't possible before.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 正确使用它，您可以实现一个功能强大的SPA或PWA，以前是不可能的。
- en: In the backend, Python is an interpreted dynamic language that is fast and stable.
    With an active user base and quick learning curve, this is perfect for server
    APIs.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，Python是一种解释性动态语言，速度快，稳定。具有活跃的用户群和快速的学习曲线，非常适合服务器API。
- en: Joining both together, it is possible to get a powerful application deployed
    as fast as possible.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 将两者结合起来，可以尽快部署一个强大的应用程序。
- en: Getting ready‌
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisites for this recipe are as follows:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件如下：
- en: Node.js 12+
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: Python
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python
- en: 'The Node.js global object that is required is as follows:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`create-nuxt-app`'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create-nuxt-app`'
- en: 'To install `create-nuxt-app`, you need to execute the following command in
    Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows):'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`create-nuxt-app`，您需要在终端（macOS或Linux）或命令提示符/PowerShell（Windows）中执行以下命令：
- en: '[PRE88]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'For the backend of this recipe, we will use **Python**. The Python global objects
    required for this recipe are as follows:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方的后端，我们将使用**Python**。这个配方所需的Python全局对象如下：
- en: '`flask`'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flask`'
- en: '`flask-restful`'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flask-restful`'
- en: '`flask-cors`'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flask-cors`'
- en: 'To install `flask`, `flask-restful`, and `flask-cors`, you need to execute the
    following command in Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows):'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`flask`，`flask-restful`和`flask-cors`，您需要在终端（macOS或Linux）或命令提示符/PowerShell（Windows）中执行以下命令：
- en: '[PRE89]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: How to do it...
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will need to split our recipe into two parts. The first part is the backend
    part (or API if you prefer), which will be done with Python and Flask. The second
    part will be the frontend part, and it will run on `Nuxt.js` in SSR mode.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将我们的配方分成两部分。第一部分是后端部分（或者如果你喜欢的话是API），将使用Python和Flask完成。第二部分将是前端部分，它将在SSR模式下运行`Nuxt.js`。
- en: Creating your Flask API
  id: totrans-419
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建您的Flask API
- en: Our API server will be based on the Python Flask framework. We will need to
    create a server folder to store our server files and start the development of
    the server.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的API服务器将基于Python Flask框架。我们需要创建一个服务器文件夹来存储我们的服务器文件并开始服务器的开发。
- en: 'You will need to install the following Python packages. To do so, open Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    commands:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要安装以下Python软件包。要这样做，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: 'To install the Flask framework, use the following command:'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要安装Flask框架，请使用以下命令：
- en: '[PRE90]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'To install the Flask RESTful extension, use the following command:'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要安装Flask RESTful扩展，使用以下命令：
- en: '[PRE91]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'To install the Flask CORS extension, use the following command:'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要安装Flask CORS扩展，使用以下命令：
- en: '[PRE92]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Initializing the application
  id: totrans-428
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 初始化应用程序
- en: 'To create our simple RESTful API, we will create a single file and use SQLite3
    as a database:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的简单RESTful API，我们将创建一个单一的文件，并使用SQLite3作为数据库：
- en: 'Create a folder named `server` and create a file named `app.py` in it:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server`的文件夹，并在其中创建一个名为`app.py`的文件：
- en: '[PRE93]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Then, we will create our `ToDo` class, and on the constructor of the class,
    we will connect to the database and select all `tasks`:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建我们的`ToDo`类，并在类的构造函数中连接到数据库并选择所有的`tasks`：
- en: '[PRE94]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'To implement the RESTful POST method, create a function that receives `task`
    as an argument, and will add an object with the `task` that was added, the `status`
    of the addition to the tasks list, and then return the list to the user:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实现RESTful POST方法，创建一个函数来接收`task`作为参数，并将带有添加的`task`、添加的`status`的对象添加到任务列表中，然后将列表返回给用户：
- en: '[PRE95]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Next, we will create the RESTful PUT method by creating a function that will
    receive the `task` and `id` as arguments of the function. Then, this function
    will update `task` with the current `id`, and return to the user the updated `task`
    and the `status` of the update:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建RESTful PUT方法，通过创建一个函数来接收`task`和`id`作为函数的参数。然后，这个函数将使用当前的`id`更新`task`，并将更新后的`task`和更新的`status`返回给用户：
- en: '[PRE96]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Then, create a RESTful DELETE method by creating a function that will receive
    the `ID` of the `task`, which will be removed, and then will return to the user
    the `ID`, `status`, and the `task` that was removed:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个RESTful DELETE方法，通过创建一个函数来接收将被移除的`task`的`ID`，然后将返回被移除的`ID`、`status`和`task`给用户：
- en: '[PRE97]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Finally, we will add the `ToDo` class as a resource to the API on the `''/''`
    route, and initialize the application:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将在`'/'`路由上将`ToDo`类作为API的资源，并初始化应用程序：
- en: '[PRE98]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Starting the server
  id: totrans-442
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启动服务器
- en: 'To start your server, you need to open Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动服务器，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE99]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Your server will be running and listening on `http://localhost:5000`.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 您的服务器将在`http://localhost:5000`上运行并监听。
- en: Creating your Nuxt.js server
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建您的Nuxt.js服务器
- en: 'To render your application, you will need to create your `Nuxt.js` application. Using
    the `Nuxt.js` `create-nuxt-app` CLI, we will create it and choose some options
    for it. Open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 要渲染您的应用程序，您需要创建您的`Nuxt.js`应用程序。使用`Nuxt.js`的`create-nuxt-app` CLI，我们将创建它并为其选择一些选项。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE100]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Then, you will be asked some questions about the installation process. We will
    use the following:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将被问及安装过程的一些问题。我们将使用以下内容：
- en: 'When you start creating your project with `Nuxt-CLI`, it will first ask for
    the project name. In our case, we will choose `client` as the name:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您使用`Nuxt-CLI`开始创建项目时，它将首先要求项目名称。在我们的情况下，我们将选择`client`作为名称：
- en: '[PRE101]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Then you need to choose the programming language that will be used in the project.
    We will select `JavaScript`:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要选择将在项目中使用的编程语言。我们将选择`JavaScript`：
- en: '[PRE102]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Next, `Nuxt-CLI` will ask for the package manager that will be used to install
    the dependencies. In our case, we choose `Yarn`, but you can choose the one you
    prefer:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，`Nuxt-CLI`将要求选择将用于安装依赖项的软件包管理器。在我们的情况下，我们选择`Yarn`，但您可以选择您喜欢的软件包管理器：
- en: '[PRE103]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Now, `Nuxt-CLI` will ask for a UI framework to be used in the project. From
    the available list, choose `Bulma`:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`Nuxt-CLI`将要求选择在项目中使用的UI框架。从可用列表中选择`Bulma`：
- en: '[PRE104]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Then, `Nuxt-CLI` will ask whether you want to select extra modules for the
    project. We will select `Axios` from the current list of modules:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，`Nuxt-CLI` 将询问您是否要为项目选择额外的模块。我们将从当前模块列表中选择 `Axios`：
- en: '[PRE105]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '`Nuxt-CLI` will ask for the linting tools we want to use on our project; we
    will choose `None`:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Nuxt-CLI` 将询问我们想要在项目上使用的 linting 工具；我们将选择 `None`：'
- en: '[PRE106]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Then, `Nuxt-CLI` will ask for the test framework we want to implement on our
    project; we will choose `None`:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，`Nuxt-CLI` 将询问我们想要在项目上实现的测试框架；我们将选择 `None`：
- en: '[PRE107]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Next, `Nuxt-CLI` will ask for the rendering mode that will be used by the project;
    we will select `Universal (SSR)`:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，`Nuxt-CLI` 将询问项目将使用的渲染模式；我们将选择 `Universal (SSR)`：
- en: '[PRE108]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '`Nuxt-CLI` will ask for the deployment target that will be used on the building
    structure; we will choose `Server (Node.js hosting)`:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Nuxt-CLI` 将询问将在构建结构上使用的部署目标；我们将选择 `Server (Node.js hosting)`：'
- en: '[PRE109]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Finally, `Nuxt-CLI` will ask for the development tool configuration that we
    want to use; we will select `jsconfig.json`:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，`Nuxt-CLI` 将询问我们想要使用的开发工具配置；我们将选择 `jsconfig.json`：
- en: '[PRE110]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: After the CLI finishes the installation process, we can open the `client` folder
    on our editor or IDE.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CLI 完成安装过程后，我们可以在编辑器或 IDE 中打开 `client` 文件夹。
- en: Adding Bulma to the global CSS
  id: totrans-471
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将 Bulma 添加到全局 CSS
- en: 'To add Bulma to the application, we need to declare it in the `nuxt` configuration
    file by doing the following:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Bulma 添加到应用程序中，我们需要在 `nuxt` 配置文件中声明它，方法如下：
- en: Open `nuxt.config.js,` in the `client` folder.
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `client` 文件夹中打开 `nuxt.config.js`。
- en: 'Then, update the CSS property and add the Bulma import, to make it available
    in the global scope of the application:'
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，更新 CSS 属性并添加 Bulma 导入，以使其在应用程序的全局范围内可用：
- en: '[PRE111]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Configuring the axios plugin
  id: totrans-476
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置 axios 插件
- en: 'To start creating our API calls, we need to add the `axios` plugin in our application:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建我们的 API 调用，我们需要在应用程序中添加 `axios` 插件：
- en: 'To do so, we will need to open the `nuxt.config.js,` file in the root folder,
    and add the `axios` property:'
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，我们需要打开根文件夹中的 `nuxt.config.js` 文件，并添加 `axios` 属性：
- en: '[PRE112]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'On the `axios` property, add the following configuration properties:'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `axios` 属性上，添加以下配置属性：
- en: '`HOST` and define it as `''127.0.0.1''`'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOST` 并将其定义为 `''127.0.0.1''`'
- en: '`PORT` and define it as `''5000''`'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PORT` 并将其定义为 `''5000''`'
- en: '`https` and define it as `false`'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https` 并将其定义为 `false`'
- en: '`debug` and define it as `true`:'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug` 并将其定义为 `true`：'
- en: '[PRE113]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Running the Nuxt.js server
  id: totrans-486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行 Nuxt.js 服务器
- en: 'Now that you have everything set, you want to run the server and start to see
    what is going on. `Nuxt.js` comes with some pre-programmed `npm` scripts out of
    the box. You can run one of the following commands by opening Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and executing the following:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经设置好了一切，想要运行服务器并开始查看发生了什么。`Nuxt.js` 自带一些预先编程的 `npm` 脚本。您可以通过打开终端（macOS 或
    Linux）或命令提示符/PowerShell（Windows）并执行以下命令之一来运行其中之一：
- en: '`npm run dev` – To run the server in development mode'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run dev` - 以开发模式运行服务器'
- en: '`npm run build` – To build the files with webpack and minify the CSS and JS
    for production'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build` - 使用 webpack 构建文件并对生产环境进行 CSS 和 JS 的最小化'
- en: '`npm run generate` – To generate static HTML pages for each route'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run generate` - 为每个路由生成静态 HTML 页面'
- en: '`npm start` – To start the server in production, after running the build command'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm start` - 在运行构建命令后，启动生产服务器'
- en: Creating the TodoList component
  id: totrans-492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 TodoList 组件
- en: For the TodoList app, we will need a component that will fetch the tasks and
    delete the tasks.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 TodoList 应用程序，我们将需要一个组件来获取任务并删除任务。
- en: Single file component <script> section
  id: totrans-494
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件的 `<script>` 部分
- en: 'Here, we will create the `<script>` section of the single file component:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建单文件组件的 `<script>` 部分：
- en: In the `client/components` folder, create a file named `TodoList.vue` and open
    it.
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`client/components`文件夹中，创建一个名为`TodoList.vue`的文件并打开它。
- en: 'Then, we will export a `default` JavaScript object, with a `name` property defined
    as `TodoList`, then define the `beforeMount` life cycle hook as an asynchronous
    function. Define the `computed` and `methods` properties as an empty JavaScript
    object. Then, create a `data` property defined as a singleton function returning
    a JavaScript object. In the `data` property, create a `taskList` property as an
    empty array:'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将导出一个`default`的JavaScript对象，其中`name`属性定义为`TodoList`，然后将`beforeMount`生命周期钩子定义为一个异步函数。将`computed`和`methods`属性定义为一个空的JavaScript对象。然后，创建一个`data`属性，定义为返回一个JavaScript对象的单例函数。在`data`属性中，创建一个`taskList`属性，定义为一个空数组：
- en: '[PRE114]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'In the `computed` property, create a new property called `taskObject`. This
    `computed` property will return the result of `Object.fromEntries(new Map(this.taskList))`:'
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`computed`属性中，创建一个名为`taskObject`的新属性。这个`computed`属性将返回`Object.fromEntries(new
    Map(this.taskList))`的结果：
- en: '[PRE115]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'In the `methods` property, create a new method called `getTask` – it will be
    an asynchronous function. This method will fetch the tasks from the server, then
    will use the response to define the `taskList` property:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性中，创建一个名为`getTask`的新方法 - 它将是一个异步函数。这个方法将从服务器获取任务，然后将使用响应来定义`taskList`属性：
- en: '[PRE116]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Then, create a `deleteTask` method. This method will be an asynchronous function
    and will receive an `id` as a parameter. Using this parameter, it will execute
    an API execution to delete the task and then execute the `getTask` method:'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个`deleteTask`方法。这个方法将是一个异步函数，并将接收一个`id`作为参数。使用这个参数，它将执行一个API执行来删除任务，然后执行`getTask`方法：
- en: '[PRE117]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Finally, in the `beforeMount` life cycle hook, we will execute the `getTask`
    method:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`beforeMount`生命周期钩子中，我们将执行`getTask`方法：
- en: '[PRE118]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Single file component <template> section
  id: totrans-507
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'It''s time to create the `<template>` section of the single file component:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建单文件组件的`<template>`部分的时候了：
- en: In the `client/components` folder, open the `TodoList.vue` file.
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`client/components`文件夹中，打开`TodoList.vue`文件。
- en: 'In the `<template>` section, create a `div` HTML element, and add the `class`
    attribute with the value `box`:'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，创建一个`div`HTML元素，并添加值为`box`的`class`属性：
- en: '[PRE119]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'As a child of the `div.box` HTML element, create a `div` HTML element, with
    the `class` attribute defined as `content`, with a child element defined as an `ol`
    HTML element and the attribute `type` defined as `1`:'
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为`div.box`HTML元素的子元素，创建一个`div`HTML元素，`class`属性定义为`content`，具有一个子元素定义为`ol`HTML元素，属性`type`定义为`1`：
- en: '[PRE120]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'As a child of the `ol` HTML element, create a `li` HTML element, with the `v-for`
    directive defined as `(task, i) in taskObject`, and the `key` attribute defined
    as a variable, `i`:'
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为`ol`HTML元素的子元素，创建一个`li`HTML元素，其中`v-for`指令定义为`(task, i) in taskObject`，`key`属性定义为一个变量`i`：
- en: '[PRE121]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Finally, as a child of the `ol` HTML element, add `{{ task }}` as the inner
    text, and as a sibling of the text, create a `button` HTML element, the `class`
    attribute defined as `delete is-small`, and the `@click` event listener defined
    as the `deleteTask` method, passing the `i` variable as an argument:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，作为`ol`HTML元素的子元素，将`{{ task }}`添加为内部文本，并作为文本的兄弟元素，创建一个`button`HTML元素，`class`属性定义为`delete
    is-small`，`@click`事件监听器定义为`deleteTask`方法，传递`i`变量作为参数：
- en: '[PRE122]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Creating the Todo form component
  id: totrans-518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Todo表单组件
- en: To send the task to the server, we will need a form. That means we need to make
    a form component that will handle this for us.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 将任务发送到服务器，我们需要一个表单。这意味着我们需要创建一个表单组件来处理这个任务。
- en: Single file component <script> section
  id: totrans-520
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'Here, we will create the `<script>` section of the single file component:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建单文件组件的`<script>`部分：
- en: In the `client/components` folder, create a file named `TodoForm.vue` and open
    it.
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`client/components`文件夹中，创建一个名为`TodoForm.vue`的文件并打开它。
- en: 'Then, we will export a `default` JavaScript object, with a `name` property defined
    as `TodoForm`, then define the `methods` property as an empty JavaScript object.
    Then, create a `data` property defined as a singleton function returning a JavaScript
    object. In the `data` property, create a `task` property as an empty array:'
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将导出一个`default` JavaScript对象，其中`name`属性定义为`TodoForm`，然后将`methods`属性定义为空的JavaScript对象。然后，创建一个`data`属性，定义为返回JavaScript对象的单例函数。在`data`属性中，创建一个`task`属性作为空数组：
- en: '[PRE123]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'In the `methods` property, create a method named `save`, which will be an asynchronous
    function. This method will send the `task` to the API, and if the API receives `Ok
    Status`, it will emit a `''new-task''` event with the `task` and clean `task`
    property:'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性中，创建一个名为`save`的方法，这将是一个异步函数。这个方法将`task`发送到API，如果API接收到`Ok状态`，它将发出一个带有`task`的`'new-task'`事件，并清除`task`属性：
- en: '[PRE124]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Single file component <template> section
  id: totrans-527
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'It''s time to create the `<template>` section of the single file component:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建单文件组件的`<template>`部分了：
- en: In the `client/components` folder, open the `TodoForm.vue` file.
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`client/components`文件夹中，打开名为`TodoForm.vue`的文件。
- en: 'In the `<template>` section, create a `div` HTML element, and add the `class` attribute
    with the value `box`:'
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分中，创建一个`div` HTML元素，并添加`class`属性，值为`box`：
- en: '[PRE125]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Inside the `div.box` HTML element, create a `div` HTML element with the `class`
    attribute defined as `field has-addons`:'
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`div.box` HTML元素内部，创建一个`div` HTML元素，`class`属性定义为`field has-addons`：
- en: '[PRE126]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Then, inside the `div.field.has-addons` HTML element, create a child `div`
    HTML element, with the `class` attribute defined as `control is-expanded`, and
    add a child input HTML element with the `v-model` directive defined as the `task`
    property. Then, define the `class` attribute as `input`, the `type` attribute
    as `text`, and `placeholder` as `ToDo Task`. Finally, in the `@keypress.enter`
    event listener, define the `save` method:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`div.field.has-addons` HTML元素内部，创建一个子`div` HTML元素，`class`属性定义为`control is-expanded`，并添加一个子输入HTML元素，`v-model`指令定义为`task`属性。然后，将`class`属性定义为`input`，`type`属性定义为`text`，`placeholder`定义为`ToDo
    Task`。最后，在`@keypress.enter`事件监听器中，定义`save`方法：
- en: '[PRE127]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Finally, as a sibling of the `div.control.is-expanded` HTML element, create
    a `div` HTML element, with the `class` attribute defined as `control`, and add
    a child `a` HTML element, with the `class` attribute defined as `button is-info`,
    and on the `@click` event listener, define it as the `save` method. As inner text
    of the `a` HTML element, add the `Save Task` text:'
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`div.control.is-expanded` HTML元素的同级位置，创建一个`div` HTML元素，`class`属性定义为`control`，并添加一个子`a`
    HTML元素，`class`属性定义为`button is-info`，在`@click`事件监听器中，将其定义为`save`方法。在`a` HTML元素的内部文本中，添加`Save
    Task`文本：
- en: '[PRE128]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Creating the layout
  id: totrans-538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建布局
- en: 'Now we need to create a new layout to wrap the application as a simple high-order
    component. In the `client/layouts` folder, open the file named `default.vue`,
    remove the `<style>` section of the file, and change the `<template>` section
    to the following:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个新的布局来包装应用程序作为一个简单的高阶组件。在`client/layouts`文件夹中，打开名为`default.vue`的文件，删除文件的`<style>`部分，并将`<template>`部分更改为以下内容：
- en: '[PRE129]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Creating the page
  id: totrans-541
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建页面
- en: Now we will create the main page of our application, where the user will be
    able to view their `TodoList` and add a new `TodoItem`.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建我们应用程序的主页面，用户将能够查看他们的`TodoList`并添加一个新的`TodoItem`。
- en: Single file component <script> section
  id: totrans-543
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'Here, we will create the `<script>` section of the single file component:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建单文件组件的`<script>`部分：
- en: Open the `index.vue` file in the `client/pages` folder.
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`client/pages`文件夹中打开`index.vue`文件。
- en: 'Import the `todo-form` and the `todo-list` component that we created, then
    we will export a `default` JavaScript object, with a `components` property with
    the imported components:'
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入我们创建的`todo-form`和`todo-list`组件，然后我们将导出一个带有`components`属性的`default` JavaScript对象，其中包含导入的组件。
- en: '[PRE130]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Single file component <template> section
  id: totrans-548
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'It''s time to create the `<template>` section of the single file component:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建单文件组件的`<template>`部分的时候了：
- en: In the `client/pages` folder, open the `index.vue` file.
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`client/pages`文件夹中，打开`index.vue`文件。
- en: 'In the `<template>` section, create a `div` HTML element, add as a child a
    `section` HTML element, with the `class` property defined as `hero is-primary`.
    Then, as a child of the `section` HTML element, create a `div` HTML element, with
    the `class` attribute defined as `hero-body`. As a child of the `div.hero-body`
    HTML element, create a `div` HTML element with the `class` attribute defined as
    `container` and add as a child an `h1` HTML element with `class` defined as `title`,
    with the inner text as `Todo App`:'
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，创建一个`div` HTML元素，作为子元素添加一个`class`属性定义为`hero is-primary`的`section`
    HTML元素。然后，作为`section` HTML元素的子元素，创建一个`class`属性定义为`hero-body`的`div` HTML元素。作为`div.hero-body`
    HTML元素的子元素，创建一个`class`属性定义为`container`的`div` HTML元素，并作为子元素添加一个`class`定义为`title`的`h1`
    HTML元素，其中内部文本为`Todo App`。
- en: '[PRE131]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'As a sibling of the `section.hero.is-primary` HTML element, create a `section`
    HTML element, with the `class` attribute defined as `section` and the `style`
    attribute defined as `padding: 1rem`. Add as a child a `div` HTML element with
    the `class` attribute defined as `container` with a child `todo-list` component
    with the `ref` attribute defined as `list`:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '作为`section.hero.is-primary` HTML元素的兄弟元素，创建一个`section` HTML元素，其中`class`属性定义为`section`，`style`属性定义为`padding:
    1rem`。作为子元素添加一个`class`属性定义为`container`的`div` HTML元素，其中包含一个`ref`属性定义为`list`的`todo-list`组件。'
- en: '[PRE132]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Finally, as a sibling of the `section.section` HTML element, create a `section` HTML
    element, with the `class` attribute defined as `section` and the `style` attribute
    defined as `padding: 1rem`. Add as a child a `div` HTML element with the `class` attribute
    defined as `container` with a child `todo-form` component, with the `@new-task`
    event listener defined as `$refs.list.getTasks()`:'
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '最后，作为`section.section` HTML元素的兄弟元素，创建一个`section` HTML元素，其中`class`属性定义为`section`，`style`属性定义为`padding:
    1rem`。作为子元素添加一个`class`属性定义为`container`的`div` HTML元素，其中包含一个`todo-form`组件，其中`@new-task`事件监听器定义为`$refs.list.getTasks()`。'
- en: '[PRE133]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: How it works...
  id: totrans-557
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe shows the integration between a local API server via Python and
    an SSR platform served via `Nuxt.js`.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例显示了通过Python的本地API服务器与通过`Nuxt.js`提供的SSR平台之间的集成。
- en: When you start the Python server first, you are opening the ports to receive
    data from clients as a passive client, just waiting for something to happen to
    start your code. With the same process, the `Nuxt.js` SSR can do a lot of stuff
    behind the scenes, but when it finishes, it goes idle, waiting for user action.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首先启动Python服务器时，您正在打开端口以接收来自客户端的数据作为被动客户端，只是等待某些事件发生以启动您的代码。通过相同的过程，`Nuxt.js`
    SSR可以在幕后执行很多操作，但完成后会变得空闲，等待用户操作。
- en: When the user interacts with the frontend, the application can send some requests
    to the server that will be handed back to the user with data, to be shown on the
    screen.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户与前端交互时，应用程序可以向服务器发送一些请求，服务器将把数据返回给用户，以在屏幕上显示。
- en: See also
  id: totrans-561
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can learn more about Flask and the HTTP project inside Python at [https://palletsprojects.com/p/flask/.](https://palletsprojects.com/p/flask/)
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://palletsprojects.com/p/flask/.](https://palletsprojects.com/p/flask/)了解有关Flask和Python内部的HTTP项目的更多信息。
- en: If you want to learn more about `Nuxt.js`, you can read the documentation at [https://nuxtjs.org/guide/.](https://nuxtjs.org/guide/)
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于`Nuxt.js`的信息，可以在[https://nuxtjs.org/guide/.](https://nuxtjs.org/guide/)阅读文档。
- en: If you want to learn more about the `Nuxt.js` implementation of Axios and how
    to configure it and use the plugin, you can read the documentation at [https://axios.nuxtjs.org/options.](https://axios.nuxtjs.org/options)
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解`Nuxt.js`对Axios的实现以及如何配置它和使用插件，可以在[https://axios.nuxtjs.org/options.](https://axios.nuxtjs.org/options)阅读文档。
- en: If you want to learn more about Bulma, the CSS framework used in this recipe,
    you can find more information at [https://bulma.io.](https://bulma.io)
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解在本教程中使用的CSS框架Bulma，可以在[https://bulma.io.](https://bulma.io)找到更多信息。
- en: The dos and don'ts of Vue applications
  id: totrans-566
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue应用程序的Dos和Don'ts
- en: Security is always something everyone is worried about, and this is no different
    for technology. You need to be aware and alert all the time. In this section,
    we'll look at how you can prevent attacks with some techniques and simple solutions.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性始终是每个人都担心的事情，对于技术也是如此。您需要时刻保持警惕。在本节中，我们将看看如何使用一些技术和简单的解决方案来防止攻击。
- en: Linters
  id: totrans-568
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查器
- en: When using ESLint, make sure you have enabled the Vue plugin, and you are following
    the strongly recommended rules. Those rules will help you with the development,
    checking for some common mistakes that can open doors to attacks such as the `v-html`
    directive.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用ESLint时，请确保已启用Vue插件，并且遵循强烈推荐的规则。这些规则将帮助您进行开发，检查一些常见的错误，这些错误可能会打开攻击的大门，比如`v-html`指令。
- en: 'In a `Vue-CLI` project, with the options for linters selected, a file named `.eslintrc.js` will
    be created along with the project files. In this file, a set of basic rules will
    be pre-determined. The following is an example of a set of good practice rules
    for an `ESLint + AirBnb` project:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Vue-CLI`项目中，选择了检查器选项后，将会创建一个名为`.eslintrc.js`的文件，以及项目文件。在这个文件中，一组基本规则将被预先确定。以下是一个`ESLint
    + AirBnb`项目的一组良好实践规则的示例：
- en: '[PRE134]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Now, if you have any code that breaks the lint rules, it won't be parsed on
    development or build.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您有任何违反检查规则的代码，它将不会在开发或构建中被解析。
- en: JavaScript
  id: totrans-573
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript
- en: JavaScript has some vulnerabilities that can be prevented by following some
    simple checklists and simple implementations. Those implementations can be in
    client-server communications or DOM manipulation, but you always need to be careful
    not to forget them.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript具有一些漏洞，可以通过遵循一些简单的清单和简单的实现来预防。这些实现可以是客户端-服务器通信或DOM操作，但您始终需要小心不要忘记它们。
- en: 'Here are some tips for using JavaScript:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些使用JavaScript的技巧：
- en: Always use an authenticated and encrypted API when possible. Remember that JWT
    isn't encrypted by itself; you need to add the layer of encryption *(JWE)* to
    have the whole JSON.
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能使用经过身份验证和加密的API。请记住，JWT本身并不是加密的；您需要添加加密层（JWE）才能拥有完整的JSON。
- en: Always use `SessionStorage` if you want to store an API token.
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想存储API令牌，请始终使用`SessionStorage`。
- en: Always sanitize the HTML input from the user before sending it to the server.
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将用户输入的HTML发送到服务器之前，始终对其进行消毒。
- en: Always sanitize the HTML before rendering it to the DOM.
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将HTML呈现到DOM之前，始终对其进行消毒。
- en: Always escape any `RegeExp` from the user; it will be executed, to prevent any
    CPU thread attack.
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远要对用户输入的`RegeExp`进行转义；它将被执行，以防止任何CPU线程攻击。
- en: Always catch errors and don't show any stack trace to the user, to prevent any
    code manipulation.
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终捕获错误，并且不要向用户显示任何堆栈跟踪，以防止任何代码操纵。
- en: 'Here are some tips on what not to do when using JavaScript:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在使用JavaScript时不要做的一些提示：
- en: Never use `eval()`; it makes your code run slowly and opens a door for malicious
    code to execute inside your code.
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要使用`eval()`；它会使您的代码运行缓慢，并为恶意代码在您的代码内执行打开一扇门。
- en: Never render any input from the user without any sanitization or escaping the
    data.
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要呈现来自用户的任何输入而没有经过消毒或转义的数据。
- en: Never render any HTML on the DOM without any sanitization.
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要在DOM上呈现任何未经过消毒的HTML。
- en: Never store an API token on `LocalStorage`.
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要将API令牌存储在`LocalStorage`中。
- en: Never store sensitive data in the JWT object.
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要在JWT对象中存储敏感数据。
- en: Vue
  id: totrans-588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue
- en: When developing a Vue application, you need to check for some basic rules that
    can help the development and won't open any doors for the external manipulation
    of your application.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发Vue应用程序时，您需要检查一些基本规则，这些规则可以帮助开发，并且不会为外部操纵您的应用程序打开任何大门。
- en: 'Here are some tips for using Vue:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些使用Vue的提示：
- en: Always add type validation to your props, and if possible, a validator check.
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终为您的props添加类型验证，并在可能的情况下进行验证检查。
- en: Avoid the global registration of components; use local components.
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免全局注册组件；使用本地组件。
- en: Always use lazy-loaded components, when possible.
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能使用延迟加载的组件。
- en: Use `$refs` instead of direct DOM manipulation.
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`$refs`而不是直接DOM操作。
- en: 'Here are some tips on what not to do when using Vue:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在使用Vue时不要做的一些提示：
- en: Never store `Vue`, `$vm`, `$store`, or any application variable on the window
    or any global scope.
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要在窗口或任何全局范围上存储`Vue`，`$vm`，`$store`或任何应用程序变量。
- en: Never modify the Vue prototype; if you need to add a new variable to the prototype,
    make a new Vue plugin.
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要修改Vue原型；如果需要向原型添加新变量，请创建一个新的Vue插件。
- en: It's not recommended to use a direct connection between components, as it will
    make the component bound to the parent or child.
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不建议直接在组件之间建立连接，因为这将使组件绑定到父级或子级。
- en: See also
  id: totrans-599
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about XSS (cross-site scripting) on OWASP CheatCheat
    at [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.md) and
    about HTML XSS at [https://html5sec.org/.](https://html5sec.org/)
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在OWASP CheatCheat的[https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.md)和[https://html5sec.org/](https://html5sec.org/)找到有关XSS（跨站点脚本）的更多信息。
- en: Find more information about `eslint-vue-plugin` at [https://eslint.vuejs.org/.](https://eslint.vuejs.org/)
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://eslint.vuejs.org/](https://eslint.vuejs.org/)找到有关`eslint-vue-plugin`的更多信息。
- en: You can read more about Node.js security best practices at [https://github.com/i0natan/nodebestpractices#6-security-best-practices.](https://github.com/i0natan/nodebestpractices#6-security-best-practices)
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/i0natan/nodebestpractices#6-security-best-practices](https://github.com/i0natan/nodebestpractices#6-security-best-practices)了解有关Node.js安全最佳实践的更多信息。
- en: Find more information about the dos and don'ts of a Vue application at [https://quasar.dev/security/dos-and-donts.](https://quasar.dev/security/dos-and-donts)
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://quasar.dev/security/dos-and-donts](https://quasar.dev/security/dos-and-donts)找到有关Vue应用程序的dos和don'ts的更多信息。
