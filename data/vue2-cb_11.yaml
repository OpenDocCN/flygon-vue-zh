- en: Integrating with Other Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他框架集成
- en: 'In this chapter, we''ll explore the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Building universal applications with Electron
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Electron构建通用应用程序
- en: Using Vue with Firebase
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue和Firebase
- en: Creating a real-time app with Feathers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Feathers创建实时应用程序
- en: Creating a reactive app with Horizon
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Horizon创建响应式应用程序
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Vue is powerful, but if you need a backend, it can't do much alone; at a minimum
    you will need a server to deploy your software. In this section, you will actually
    build small, but complete and working, applications with popular frameworks. Electron
    is used to bring Vue apps to the desktop. Firebase is a modern cloud backend and,
    finally, FeatherJS is a minimalistic but full-featured JavaScript backend. When
    you are finished with these, you will have all the tools required to interact
    with them and quickly build professional applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vue很强大，但如果你需要一个后端，它就不能独自完成太多事情；至少你需要一个服务器来部署你的软件。在本节中，您将实际上使用流行的框架构建小而完整、可工作的应用程序。Electron用于将Vue应用程序带到桌面。Firebase是一个现代化的云后端，最后，FeatherJS是一个简约但功能齐全的JavaScript后端。当您完成这些后，您将拥有与它们交互并快速构建专业应用程序所需的所有工具。
- en: Building universal applications with Electron
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Electron构建通用应用程序
- en: Electron is a framework for creating universal applications that run on Mac,
    Linux, and Windows. At it's core is a stripped down version of a web browser.
    It has been used to create widely used applications such as Slack and Visual Studio
    Code, among others. In this recipe, you'll build a simple app with Electron.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Electron是一个用于创建在Mac、Linux和Windows上运行的通用应用程序的框架。它的核心是一个简化版本的Web浏览器。它已被用于创建广泛使用的应用程序，如Slack和Visual
    Studio Code等。在这个示例中，您将使用Electron构建一个简单的应用程序。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To build this app, we will use only basic Vue functionalities. Electron is out
    of scope for this book, but for this recipe no knowledge of Electron is required;
    in fact, this is a good starting point to learn more about Electron.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建这个应用程序，我们将只使用基本的Vue功能。Electron超出了本书的范围，但对于这个示例，不需要了解Electron的知识；事实上，这是学习更多关于Electron的好起点。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: In this recipe, we will build a small but complete app--a pomodoro application.
    A pomodoro is an interval of about 25 units of time, in which you should concentrate
    on doing work. It's called this because you usually use a tomato-shaped kitchen
    timer to measure that. This app will track the time instead, so you don't have
    to buy an expensive kitchen timer.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将构建一个小而完整的应用程序——一个番茄钟应用程序。番茄钟是一个大约25个时间单位的间隔，在这个间隔中，您应该专注于工作。它被称为这个名字，因为通常使用一个番茄形状的厨房计时器来测量时间。这个应用程序将跟踪时间，这样您就不必购买一个昂贵的厨房计时器了。
- en: 'The best way to spin up a Vue project with Electron is to use the Electron-Vue
    boilerplate (you don''t say!). This can be easily achieved with the following
    command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Electron-Vue脚手架是启动一个Vue项目与Electron的最佳方式（你不说！）。可以通过以下命令轻松实现：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can answer with the default values, but when asked which plugin to install,
    just select `vue-electron` . Install all the dependencies with `npm intall` and,
    if you like, you can keep the application open with hot-reloading while you make
    the necessary modifications with `npm run dev` . You can hide the dev tools by
    just clicking on the *x* in the corner:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用默认值进行回答，但当被问及要安装哪个插件时，只需选择`vue-electron`。使用`npm intall`安装所有依赖项，如果愿意，您可以在进行必要的修改时保持应用程序处于热重载状态，使用`npm
    run dev`。您可以通过点击角落的*x*来隐藏开发工具：
- en: '![](img/Image00178.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00178.jpg)'
- en: 'First of all, we want our app to be small-ish. Let''s go to the `app/src/main/index.js`
    file; this file controls the life cycle of our application. Change the window
    size to the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们希望我们的应用程序尽可能小。让我们转到`app/src/main/index.js`文件；此文件控制我们应用程序的生命周期。将窗口大小更改为以下内容：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we don''t really want the boilerplate components in the `app/src/render/components`
     folder, so you can delete everything. Instead, create a `Pomodoro.vue` file and
    put this template inside:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们实际上不希望在`app/src/render/components`文件夹中有样板组件，所以您可以删除所有内容。相反，创建一个`Pomodoro.vue`文件并将此模板放入其中：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To make it work, we also have to write the JavaScript part, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其工作，我们还需要编写JavaScript部分，如下所示：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This way, clicking on the start button in the program will subtract 1 second
    every second. Clicking on the stop button will clear the timer and reset the remaining
    time to 1500 seconds (25 minutes). The timer object is basically the result of
    the `setInterval` operation, and `clearInterval` just stops whatever the timer
    was doing.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，点击程序中的开始按钮将每秒减少1秒。点击停止按钮将清除计时器并将剩余时间重置为1500秒（25分钟）。计时器对象基本上是`setInterval`操作的结果，而`clearInterval`只是停止计时器正在执行的任何操作。
- en: 'In our template, we want a `formattedTime`  method in the sense that we''d
    like to see the time in `mm:ss` format, which is much more human-readable than
    just the number of remaining seconds (even if that''s more geeky), so we need
    to add the computed function:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的模板中，我们希望有一个`formattedTime`方法，以便以`mm:ss`格式显示时间，这比仅剩余秒数（即使这更加极客）更易读，因此我们需要添加计算函数：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To add this component to the app, go to the `App.vue` file and edit the following
    lines, replacing the `landingPage`  placeholder element:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此组件添加到应用程序中，请转到`App.vue`文件并编辑以下行，替换`landingPage`占位符元素：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Launching the app with `npm run dev` , you should now be able to track the
    time while working or studying:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`npm run dev`启动应用程序，您现在应该能够在工作或学习时跟踪时间：
- en: '![](img/Image00179.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00179.jpg)'
- en: You can even build a distributable version of the application with the `npm
    run build`  command.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以使用`npm run build`命令构建应用程序的可分发版本。
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The way we implemented the timer is not particularly accurate for time tracking.
    Let''s review the code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现的计时器对于时间跟踪来说并不特别准确。让我们来审查一下代码：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This means that we decrease the remaining time every second. The problem is
    that the `setInterval` function itself is not 100% accurate and may fire the function
    a bit before or after 1000 milliseconds, depending on the machine's computational
    load; this way, the margin of error can accumulate and become a considerable amount.
    A better approach would be to check the clock every time the function gets called
    and adjust for the error at each loop, though we won't cover that here.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们每秒减少剩余时间。问题在于`setInterval`函数本身不是100%准确的，可能会在1000毫秒之前或之后触发函数，这取决于机器的计算负载；这样，误差的边界可以累积并成为相当大的数量。更好的方法是在每次调用函数时检查时钟并在每个循环中调整误差，尽管我们不会在这里涵盖这个问题。
- en: Using Vue with Firebase
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue和Firebase
- en: Using Vue with Firebase as a backend is very easy, thanks to VueFire--a plugin
    that contains bindings for Firebase. In this recipe, you will develop a fully
    functional database of smells.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue和Firebase作为后端非常容易，这要归功于VueFire - 一个包含Firebase绑定的插件。在这个示例中，您将开发一个完全功能的气味数据库。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Firebase is out of the scope of this book, but I will assume, for this recipe,
    that you have a familiarity with the basic concepts. Except for this, there is
    really not much you need to know, as we will build a very basic Vue application
    on top of that.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase超出了本书的范围，但是我假设您对基本概念有所了解。除此之外，您真的没有太多需要了解的，因为我们将在其上构建一个非常基本的Vue应用程序。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Before starting to write code, we need to create a new Firebase application.
    To do this, you have to log in at [https://firebase.google.com/](https://firebase.google.com/)
    and create a new application. In our case, it will be called `smell-diary` . You
    will also need to take note of your API key, which is found in the project settings:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写代码之前，我们需要创建一个新的Firebase应用程序。要做到这一点，您必须登录[https://firebase.google.com/](https://firebase.google.com/)并创建一个新的应用程序。在我们的例子中，它将被称为`smell-diary`。您还需要记下您的API密钥，该密钥可以在项目设置中找到：
- en: '![](img/Image00180.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00180.jpg)'
- en: 'Also, you will need to disable authentication; go to the Database section and,
    in the Rules tab, set both read and write to true:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您需要禁用身份验证；转到数据库部分，在规则选项卡中将读取和写入都设置为true：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We are finished with the Firebase configuration.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了Firebase的配置。
- en: 'Open a clean HTML5 boilerplate or JSFiddle, with `Vue` as a library. We will
    need the following dependencies expressed as script tags inside the head of the
    file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个干净的HTML5样板或JSFiddle，使用`Vue`作为库。我们将需要以下依赖项，以脚本标签的形式放在文件的头部：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'VueFire will automatically detect Vue (so the order is important) and install
    itself as a plugin. We will build a very simple database to keep track of the
    odor of things that surround us. The following is the HTML layout of our app:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: VueFire将自动检测到Vue（因此顺序很重要）并将其安装为插件。我们将构建一个非常简单的数据库来跟踪我们周围事物的气味。以下是我们应用程序的HTML布局：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the JavaScript part of our app, we need to specify the API key to authenticate
    with Firebase, write the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们应用的JavaScript部分，我们需要指定API密钥以与Firebase进行身份验证，写入以下内容：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, we feed the configuration to Firebase and get a hold of the database:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将配置提供给Firebase并获取数据库的控制权：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This can be done outside the `Vue` instance. The VueFire plugin installs a
    new option in the `Vue` instance, named `firebase` ; we have to specify that we
    want to access the `/items` in the Firebase app with the `item` variable:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在`Vue`实例之外完成。VueFire插件在`Vue`实例中安装了一个名为`firebase`的新选项；我们必须指定我们想要使用`item`变量访问Firebase应用中的`/items`：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `newItem` and `newSmell` variables will temporarily hold the values we
    entered in the input boxes; then, the `addItem` and `removeItem` methods will
    publish and remove data from our database:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`newItem`和`newSmell`变量将临时保存我们在输入框中输入的值；然后，`addItem`和`removeItem`方法将发布和删除我们数据库中的数据：'
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you launch your app now, you''ll already be able to add your favorite scents
    and what to sniff to find them:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在启动你的应用，你已经可以添加你最喜欢的香味和找到它们的方法了：
- en: '![](img/Image00181.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00181.jpg)'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Firebase works as a simple key value store. In our case, we are never storing
    values but always adding children; you can take a look at what you''ve created
    in the Firebase console:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase作为一个简单的键值存储。在我们的例子中，我们从来没有存储值，而是总是添加子项；你可以在Firebase控制台上查看你创建的内容。
- en: '![](img/Image00182.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00182.jpg)'
- en: The keys are created automatically and they contain empty values and 32 levels
    of nested data. We are using one level of nesting to insert the name and the smell
    for each object.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 键是自动创建的，它们包含空值和32层嵌套数据。我们使用一层嵌套来为每个对象插入名称和气味。
- en: Creating a real-time app with Feathers
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Feathers创建实时应用
- en: Most modern applications are real time, not in the traditional sense, but in
    the sense that they don't need the page to reload for them to be updated. The
    most common way to implement this is through WebSockets. In this recipe, we will
    leverage Feathers and Socket.io to build a cat database.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代应用程序是实时的，不是传统意义上的实时，而是指它们不需要重新加载页面就可以更新。实现这一点的最常见方法是通过WebSockets。在这个示例中，我们将利用Feathers和Socket.io来构建一个猫数据库。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: There is no prerequisite for this recipe, but you can complete the *Createing
    a REST client (and server!)*  recipe before starting this one if you want to have
    more context.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例没有先决条件，但是如果你想要更多的上下文，你可以在开始这个示例之前完成*创建一个REST客户端（和服务器！）*示例。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To complete this recipe, you''ll need the Feathers'' command line; install
    it with the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，你需要Feathers的命令行；使用以下命令安装它：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, run `feathers generate` , which will create all the boilerplate for you.
    When asked about the API, select Socket.io :'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行`feathers generate`，它将为你创建所有的样板代码。当被询问到API时，选择Socket.io：
- en: '![](img/Image00183.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00183.jpg)'
- en: All the other questions can be left to the default value. While still in the
    Feather console, type `generate service`  to create a new service. You can call
    it cats and leave the other questions to their default values.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 其他问题可以保持默认值。在Feather控制台中，输入`generate service`创建一个新的服务。你可以将其命名为cats，并将其他问题保持默认值。
- en: 'Inside the `public` folder, open `index.html` and delete everything except
    a HTML5 boilerplate. You will need three dependencies in the head:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`public`文件夹中，打开`index.html`并删除除了HTML5模板之外的所有内容。你需要在头部添加三个依赖项：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Write the HTML layout, as follows, in the `body` tag:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`body`标签中，按照以下方式编写HTML布局：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first `<div>`  tag is a gallery of cats. Then, build a form to add new images
    of the cats you collect.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`<div>`标签是一个猫的画廊。然后，构建一个表单来添加你收集到的猫的新图片。
- en: 'In the `body` tag, you can always configure the Feathers service with the following
    lines:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在`body`标签中，你可以使用以下代码配置Feathers服务：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is for configuring the client for the browser that will connect to the
    WebSockets. The `catService`  method is a handle to the cat database. Next, we
    write the `Vue` instance:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了配置将连接到WebSockets的浏览器的客户端。`catService`方法是对猫数据库的处理。接下来，我们编写`Vue`实例：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we need to ask for all the cats in the database on startup, while
    installing a listener in case new cats are created (even by other users):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在启动时我们需要请求数据库中的所有猫，并安装一个监听器以防其他用户创建新的猫：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you run your application with `npm start` , you can navigate to the URL
    written in the console to view your new app. Open another browser window and see
    how it changes in real-time:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`npm start`运行应用程序，你可以在控制台中看到URL，打开另一个浏览器窗口，观察它实时变化：
- en: '![](img/Image00184.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00184.jpg)'
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Seeing the cats added in real time is clearly the way to go for modern applications. Feathers
    lets you create them in a snap and with a fraction of the code, thanks to the
    underlying Socket.io, which in turn uses WebSockets.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 实时查看添加的猫显然是现代应用的发展方向。Feathers让你可以轻松创建它们，并且只需少量的代码，这要归功于底层的Socket.io，而Socket.io又使用了WebSockets。
- en: WebSockets are really not that complex and what Feathers does in this case is
    just listen for messages in the channel and associate them with actions like adding
    something to the database.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets并不复杂，Feathers在这种情况下只是监听通道中的消息，并将其与将某些内容添加到数据库的操作关联起来。
- en: The power of Feathers is visible when you can just swap database and WebSocket
    provider, or switch to REST, without even touching your Vue code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当你可以仅仅更换数据库和WebSocket提供程序，或者切换到REST而不需要修改Vue代码时，Feathers的强大之处就显现出来了。
- en: Creating a reactive app with Horizon
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Horizon创建一个响应式应用
- en: Horizon is a platform to build reactive, real-time scalable apps. It uses RethinkDB
    internally and is immediately compatible with Vue. In this recipe, you'll build
    an automatic personal diary.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Horizon是一个构建响应式、实时可扩展应用的平台。它在内部使用RethinkDB，并且与Vue完全兼容。在这个示例中，你将构建一个自动个人日记。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe just requires a bit of Vue fundamentals, but really not much else.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例只需要一些Vue的基础知识，但真的没有其他太多的东西。
- en: Before starting though, ensure that you install RethinkDB. You can find more
    info on this on their website ([https://www.rethinkdb.com/docs/install/](https://www.rethinkdb.com/docs/install/)
    ). If you have Homebrew, you can install it with `brew install rethinkdb` .
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但在开始之前，请确保您安装了RethinkDB。您可以在他们的网站上找到更多信息（[https://www.rethinkdb.com/docs/install/](https://www.rethinkdb.com/docs/install/)）。如果您有Homebrew，可以使用`brew
    install rethinkdb`来安装它。
- en: 'Also, you will need a Clarifai token. To get one for free, go to [https://developer.clarifai.com/](https://developer.clarifai.com/)
    and sign up. You''ll be presented with the code you are supposed to write in your
    application, like in the following image:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您将需要一个Clarifai令牌。要免费获取一个，请访问[https://developer.clarifai.com/](https://developer.clarifai.com/)并注册。您将看到您应该在应用程序中编写的代码，如下图所示：
- en: '![](img/Image00185.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00185.jpg)'
- en: 'In particular, you will need the `clientId` and the `clientSecret` , which
    are displayed in this fashion:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，您将需要`clientId`和`clientSecret`，它们以以下方式显示：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Take note of this code or be ready to copy and paste it in to your application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 记下这段代码，或者准备好将其复制粘贴到你的应用程序中。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Writing a journal is a difficult task, you have to write a lot every day. In
    this recipe, we'll build an automatic journal that will write for us, based on
    pictures we take during the day.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 写日志是一项困难的任务，您每天都要写很多东西。在这个示例中，我们将构建一个自动日志，它将根据我们在一天中拍摄的照片来为我们写作。
- en: 'Horizon will help us to memorize everything and to sync the diary between our
    devices. After installing RethinkDB, install Horizon with the following command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Horizon将帮助我们记住一切，并在我们的设备之间同步日记。在安装了RethinkDB之后，使用以下命令安装Horizon：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, you''ll have the new command, `hz` , available. Check it by typing `hz
    -h` ; you should see something like the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将拥有新的命令`hz`。通过输入`hz -h`来检查它；您应该会看到类似以下的内容：
- en: '![](img/Image00186.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00186.jpg)'
- en: 'To create the directory that will host our new app, type the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建将托管我们新应用程序的目录，请输入以下内容：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Then, enter the newly create `vue_app` directory and take a look at the `index.html`
    in the `dist` folder. This is the file that will be the entry point to our server,
    open it with an editor.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，进入新创建的`vue_app`目录，查看`dist`文件夹中的`index.html`。这个文件将是我们服务器的入口点，用编辑器打开它。
- en: 'You can clear everything and leave only an empty HTML5 boilerplate with an
    empty `<head>` and `<body>` . In the head section, we need to declare dependencies
    on Vue, Horizon, and Clarifai, as illustrated:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以清除所有内容，只留下一个空的HTML5样板，其中包含一个空的`<head>`和`<body>`。在头部部分，我们需要声明对Vue、Horizon和Clarifai的依赖关系，如下所示：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Just note how Horizon doesn't come from a CDN but from a local dependency.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Horizon不是来自CDN，而是来自本地依赖。
- en: 'We start by laying out a template for our journal. We have two parts. In the
    first, we will list what we did in the past. Write the following in the body of
    the HTML:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要为我们的日志制定一个模板。我们有两个部分。在第一个部分，我们将列出我们过去做过的事情。在HTML的主体中写入以下内容：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the second part, we will enter new entries:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二部分中，我们将输入新的条目：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: After this, open a `<script>` tag in which we'll write all of the following JavaScript.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，打开一个`<script>`标签，我们将在其中编写以下所有的JavaScript代码。
- en: 'First, we need to log in to Clarifai:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要登录到Clarifai：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Obviously, you want to enter your `clientId` and `clientSecret` from Clarifai.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，您需要输入您从Clarifai获取的`clientId`和`clientSecret`。
- en: 'Then, we need to spin up Horizon and have a handle to the `entries`  collection
    that we will create:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要启动Horizon并获得我们将要创建的`entries`集合的句柄：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we finally write our `Vue` instance with three state variables:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们终于可以编写我们的`Vue`实例，其中包含三个状态变量：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `tentativeEntries` array will contain a list of possible entries for the
    diary we can choose from; `data_uri` will contain the (`base64` code of the) image
    we want to use as a reference for what we did today;  `entries` are all the past
    entries.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`tentativeEntries`数组将包含我们可以从中选择的日记的可能条目列表；`data_uri`将包含我们要用作今天所做的事情的参考图像（base64编码）；`entries`是所有过去的条目。'
- en: 'When we load an image, we ask Clarifai to come up with possible entries:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们加载一张图片时，我们要求Clarifai提供可能的条目：
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then when we press the send button, we tell the Horizon collection of entries
    to store this new one:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们按下发送按钮时，我们告诉Horizon的entries集合存储这个新条目：
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, we want to ensure that we have the last ten entries on the screen
    when the page loads and that every time a new entry is added, it pops up in real
    time. Add the following hook inside the Vue instance, after the methods:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望在页面加载时在屏幕上显示最后十个条目，并且每次添加新条目时，它都会实时弹出。在Vue实例中的方法之后，添加以下钩子：
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To run the Horizon server, use the following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行Horizon服务器，请使用以下命令：
- en: '[PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output for the preceding code is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下：
- en: '![](img/Image00187.jpg)Go to the specified address (the first line, not the
    admin interface), and you will see the following:![](img/Image00188.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: 前往指定地址（第一行，而不是管理员界面），您将看到以下内容：![](img/Image00188.jpg)
- en: You will note that if you have other browser windows open, they will be updated
    in real time. Now you can finally write a journal every day without typing!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，如果您有其他浏览器窗口打开，它们将实时更新。现在，您终于可以每天写一篇日记而无需打字了！
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Our application uses a pattern called reactive. Its core can be clearly seen
    in the handle created:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序使用了一种被称为响应式的模式。它的核心可以在创建的句柄中清楚地看到：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The first line returns what is called an observable in reactive. An observable
    can be thought of as a source of events. Every time an event is fired, the subscriber
    to that source will process it. In our case, we are taking the whole entries collection
    and the events thrown are modifications to that collection. Every time we receive
    an event of this type, we update the `entries` array.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行返回的是所谓的响应式中的observable。Observable可以被视为事件的源。每当一个事件被触发时，订阅该源的订阅者将对其进行处理。在我们的例子中，我们正在获取整个entries集合，而被抛出的事件是对该集合的修改。每当我们接收到这种类型的事件时，我们会更新`entries`数组。
- en: I will not provide a deep explanation of reactive programming here, but I would
    like to highlight that this pattern is very helpful for scalability because of
    the ease with which you can implement controls for your data flow; `limit(10)`
    is an example this.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在这里提供对响应式编程的深入解释，但我想强调这种模式非常有助于可扩展性，因为你可以很容易地实现对数据流的控制；`limit(10)`就是一个例子。
