- en: Chapter 1. Going Shopping with Vue.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。使用Vue.js去购物
- en: '*"Vue.js is a JavaScript framework for building astonishing web applications.
    Vue.js is a JavaScript library for creating web interfaces. Vue.js is a tool that
    leverages the use of MVVM architecture."*'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Vue.js是一个用于构建惊人的Web应用程序的JavaScript框架。Vue.js是一个用于创建Web界面的JavaScript库。Vue.js是一种利用MVVM架构的工具。"*'
- en: Simplified JavaScript Jargon suggests that Vue.js is a JavaScript library for
    creating user interfaces (Views) based on underlying data models ( [http://jargon.js.org/_glossary/VUEJS.md](http://jargon.js.org/_glossary/VUEJS.md)
    ).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 简化的JavaScript术语建议Vue.js是一个基于底层数据模型创建用户界面（视图）的JavaScript库（[http://jargon.js.org/_glossary/VUEJS.md](http://jargon.js.org/_glossary/VUEJS.md)）。
- en: The official Vue.js website ( [https://vuejs.org/](https://vuejs.org/) ) just
    some months ago stated that Vue.js were reactive components for modern web interfaces.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的Vue.js网站（[https://vuejs.org/](https://vuejs.org/)）在几个月前表示，Vue.js是用于现代Web界面的反应式组件。
- en: '![Going Shopping with Vue.js](../Images/image00216.jpeg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![使用Vue.js去购物](../Images/image00216.jpeg)'
- en: 'Now it states that Vue.js is a progressive JavaScript framework:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它说明了Vue.js是一个渐进式的JavaScript框架：
- en: '![Going Shopping with Vue.js](../Images/image00217.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![使用Vue.js去购物](../Images/image00217.jpeg)'
- en: So what is Vue.js after all? Framework? Tool? Library? Should it be used for
    building full-stack web applications or just for adding some special functionality?
    Should I switch from my favorite framework to it? If yes, why? Can I use it alongside
    other tools in my project? What advantages it might bring?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Vue.js到底是什么？框架？工具？库？它应该用于构建全栈Web应用程序，还是仅用于添加一些特殊功能？我应该从我喜欢的框架转到它吗？如果是的话，为什么？我可以在我的项目中同时使用它和其他工具吗？它可能带来什么优势？
- en: In this chapter, we will try to find the answers to all these questions. We
    will slightly touch Vue.js and use it within some small and simple examples.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试找到所有这些问题的答案。我们将稍微涉及Vue.js，并在一些小而简单的示例中使用它。
- en: 'More specifically, we will do the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们将做以下事情：
- en: Learn what Vue.js is, its important parts, and its history
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Vue.js是什么，它的重要部分和历史
- en: Learn what projects use Vue.js
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解哪些项目使用了Vue.js
- en: Build a simple shopping list using Vue.js and compare the implementation to
    the jQuery implementation of the same application
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue.js构建一个简单的购物清单，并将其实现与相同应用程序的jQuery实现进行比较
- en: Build a simple Pomodoro timer using Vue.js
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue.js构建一个简单的番茄工作法计时器
- en: Enjoy a small and simple exercise
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 享受一个小而简单的练习
- en: Buzzwords
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流行词
- en: 'There will be lots of buzzwords, abbreviations, and other hipster combinations
    of letters in this book. Please do not be afraid of them. I can tell you more
    but, for the most part of things you need to do using Vue.js or any other framework,
    you do not need to know them all by heart! But, in any case, let us leave the
    thesaurus here so that you become confused with terminology at any point of the
    book, you can come back here and have a look:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中将会有很多流行词、缩写和其他时髦的字母组合。请不要害怕它们。我可以告诉你更多，但是，对于使用Vue.js或任何其他框架需要做的大部分事情，你不需要全部都牢记在心！但是，无论如何，让我们把词汇表放在这里，这样你在书的任何地方都会对术语感到困惑，你可以回到这里看一看：
- en: '**Application state**: This is a global centralized state of the application.
    The data in this state is initialized when the application is started. This data
    can be accessed by any application''s component; however, it cannot be changed
    easily by them. Each item of the state has an attached mutation that can be dispatched
    on special events occurring inside the application''s components.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用状态**：这是应用程序的全局集中状态。当应用程序启动时，此状态中的数据被初始化。任何应用程序组件都可以访问此数据；但是，它们不能轻易地更改它。状态的每个项目都有一个附加的变异，可以在应用程序组件内发生的特殊事件上分派。'
- en: '**Bootstrap**: This is a project that provides a set of styles and JavaScript
    tools for developing a responsive and nice application without having to think
    a lot about CSS.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap：这是一个项目，提供了一组样式和JavaScript工具，用于开发响应式和美观的应用程序，而无需过多考虑CSS。
- en: '**Content Distribution Network** (**CDN**): This is a special server whose
    aim is to deliver data to the users with high availability and high performance.
    People and companies who develop frameworks like to distribute them via CDNs because
    they allow them just to point out the CDN''s URL in the installation instructions.
    Vue.js is hosted in npmcdn ( [https://npmcdn.com/](https://npmcdn.com/) ), which
    is a reliable and global network for the things that are published to the npm.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容分发网络（CDN）：这是一个特殊的服务器，其目的是以高可用性和高性能向用户传递数据。开发框架的人和公司喜欢通过CDN分发它们，因为它们只需在安装说明中指出CDN的URL。Vue.js托管在npmcdn（[https://npmcdn.com/](https://npmcdn.com/)），这是一个可靠的全球网络，用于发布到npm的内容。
- en: '**Components**: These are the pieces of the application with their own data
    and View that can be reused through the application, acting as a brick from which
    the house is being built.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件：这些是应用程序的部分，具有自己的数据和视图，可以在整个应用程序中重复使用，就像建造房子的砖块一样。
- en: '**Cascading Style Sheets** (**CSS**): This is a set of styles to apply to the
    HTML document to make it nice and beautiful.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层叠样式表（CSS）：这是一组样式，应用于HTML文档，使其变得美观漂亮。
- en: '**Declarative Views**: These are the Views that provide a way of direct data
    binding between plain JavaScript data models and the representation.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式视图：这些是提供了一种直接数据绑定的视图，可以在普通的JavaScript数据模型和表示之间进行绑定。
- en: '**Directives**: These are special HTML elements attributes in Vue.js that allow
    data binding in different ways.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指令：这是Vue.js中的特殊HTML元素属性，允许以不同的方式进行数据绑定。
- en: '**Document Object Model** (**DOM**): This is a convention for representing
    nodes in markup languages such as HTML, XML, and XHTML. The nodes of the documents
    are organized into a DOM tree. When someone says interacting with DOM, it is just
    their fancy way of saying interacting with HTML elements.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）：这是一种表示标记语言节点的约定，例如HTML、XML和XHTML。文档的节点被组织成DOM树。当有人说与DOM交互时，这只是他们花哨地说与HTML元素交互。
- en: '**npm**: This is a package manager for JavaScript and allows searching, installing,
    and managing JavaScript packages.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm：这是JavaScript的包管理器，允许搜索、安装和管理JavaScript包。
- en: '**Markdown**: This is a human-friendly syntax that allows web writers to write
    their text without worrying about styles and HTML tags. Markdown files have a `.md`
    extension.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Markdown：这是一种人性化的语法，允许网络作者编写文本而不必担心样式和HTML标记。Markdown文件的扩展名为`.md`。
- en: '**Model View ViewModel** (**MVVM**): This is an architectural pattern whose
    central point is a ViewModel that acts as a bridge between the View and the data
    model, allowing the data flow between them.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型视图视图模型（MVVM）：这是一种架构模式，其核心是视图模型，充当视图和数据模型之间的桥梁，允许它们之间的数据流动。
- en: '**Model View Controller** (**MVC**): This is an architectural pattern. It allows
    separating Views from Models and from the way that information flows from Views
    to Models, and vice versa.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型视图控制器（MVC）：这是一种架构模式。它允许将视图与模型分离，以及信息从视图流向模型，反之亦然。
- en: '**One-way data binding**: This is the type of data binding where the changes
    in the data model are automatically propagated to the View layer, but not vice
    versa.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单向数据绑定：这是一种数据绑定类型，其中数据模型中的更改会自动传播到视图层，但反之则不会。
- en: '**Rapid prototyping**: In the Web, this is a technique of easily and rapidly
    building the mockups of the user interface, including some basic user interaction.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速原型制作：在Web中，这是一种轻松快速地构建用户界面模型的技术，包括一些基本的用户交互。
- en: '**Reactivity**: In the Web, this is actually the immediate propagation of any
    changes of data to the View layer.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应性：在Web中，这实际上是数据的任何更改立即传播到视图层。
- en: '**Two-way data binding**: This is the type of data binding where the changes
    in the data model are automatically propagated to the View layer, and the changes
    that happen in the View layer are immediately reflected in the data model.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双向数据绑定：这是一种数据绑定类型，其中数据模型的更改会自动传播到视图层，而视图层中发生的更改会立即反映在数据模型中。
- en: '**User interface** (**UI**): This is a set of visual components that allow
    the user to communicate with the application.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面（UI）：这是一组视觉组件，允许用户与应用程序进行交互。
- en: '**Vuex**: This is an architecture for Vue applications and allows simple management
    of the application state.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vuex：这是Vue应用程序的架构，允许简单地管理应用程序状态。
- en: Vue.js history
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js历史
- en: When, Evan You, Vue.js creator ( [http://evanyou.me/](http://evanyou.me/) ),
    was working at Google Creative Labs on one of the projects, they needed to fast
    prototype a rather big UI interface. Writing a lot of repeated HTML was clearly
    time- and resource-consuming, and that's why Evan started looking for some already
    existing tool for this purpose. To his surprise, he discovered that there was
    no tool, library, or framework that could fit exactly into the purpose of rapid
    prototyping! At that time, Angular was widely used, React.js was just starting,
    and frameworks such as Backbone.js were used for large-scale applications with
    MVC architecture. For the kind of project that needed something really flexible
    and lightweight just for quick UI prototyping, neither of these complex frameworks
    were adequate.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当Vue.js的创始人Evan You（[http://evanyou.me/](http://evanyou.me/)）在Google创意实验室的一个项目上工作时，他们需要快速原型制作一个相当大的UI界面。编写大量重复的HTML显然是耗时和耗资源的，这就是为什么Evan开始寻找已经存在的工具来实现这个目的。令他惊讶的是，他发现没有工具、库或框架能够完全符合快速原型制作的目的！那时，Angular被广泛使用，React.js刚刚开始，Backbone.js等框架被用于具有MVC架构的大型应用程序。对于需要非常灵活和轻量级的快速UI原型制作的项目来说，这些复杂的框架都不太合适。
- en: When you realize that something cool does not exist and you are able to create
    it—*just do it*!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你意识到某个酷炫的东西不存在，而你又能够创造它时——*就去做吧*！
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Vue.js was born as a tool for rapid prototyping. Now it can be used to build
    complex scalable reactive web applications.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js诞生于快速原型制作工具。现在它可以用来构建复杂可扩展的响应式Web应用程序。
- en: That was what Evan did. That is how he came to the idea of creating a library
    that would help in rapid prototyping by offering an easy and flexible way of reactive
    data binding and reusable components.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Evan所做的。这就是他想到创建一个库的想法，通过提供一种简单灵活的响应式数据绑定和可重用组件的方式来帮助快速原型制作。
- en: Like every good library, Vue.js has been growing and evolving, thus providing
    more features than it was promising from the beginning. Currently, it provides
    an easy way of attaching and creating plugins, writing and using mixins, and overall
    adding custom behavior. Vue can be used in such a flexible way and is so nonopinionated
    of the application structuring that it definitely can be considered as a framework
    capable of supporting the end-to-end building of complex web applications.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 像每个优秀的库一样，Vue.js一直在不断成长和发展，因此提供了比最初承诺的更多功能。目前，它提供了一种简单的附加和创建插件、编写和使用混合物的方法，以及总体添加自定义行为。Vue可以以如此灵活的方式使用，并且对应用程序结构没有明确的意见，以至于它绝对可以被视为一个能够支持端到端构建复杂Web应用程序的框架。
- en: The most important thing about Vue.js
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Vue.js最重要的一点
- en: Vue.js allows you to simply bind your data models to the representation layer.
    It also allows you to easily reuse components throughout the application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js允许你简单地将你的数据模型绑定到表示层。它还允许你在整个应用程序中轻松重用组件。
- en: You don't need to create special models or collections and to register events
    object in there. You don't need to follow some special syntax. You don't need
    to install any of never-ending dependencies.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要创建特殊的模型或集合，并在其中注册事件对象。你不需要遵循某种特殊的语法。你不需要安装任何无休止的依赖。
- en: Your models are plain JavaScript objects. They are being bound to whatever you
    want in your Views (text, input text, classes, attributes, and so on), and it
    just works.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你的模型是普通的JavaScript对象。它们被绑定到你在视图中想要的任何东西（文本、输入文本、类、属性等），它就能正常工作。
- en: You can simply add the `vue.js` file into your project and use it. Alternatively,
    you can use `vue-cli` with Webpack and Browserify family, which not only bootstraps
    the whole project but also supports hot reloading and provides developer tools.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以简单地将`vue.js`文件添加到你的项目中并使用它。或者，你可以使用`vue-cli`与Webpack和Browserify系列，它不仅可以快速启动整个项目，还支持热重载并提供开发者工具。
- en: You can separate the View layer from styles and JavaScript logic or you can
    put it alltogether into the same Vue file and build your components' structure
    and logic in the same place. There is plugin support for all modern and commonly
    used IDEs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将视图层与样式和JavaScript逻辑分开，也可以将它们放在同一个Vue文件中，并在同一个地方构建你的组件结构和逻辑。所有现代和常用的IDE都支持插件。
- en: You can use whatever preprocessors you want, and you can use ES2015\. You can
    use it alongside your favorite framework you have been developing in, or you can
    use it itself. You can use it just to add a small functionality, or you can use
    the whole Vue ecosystem to build complex applications.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何预处理器，并且你可以使用ES2015。你可以将它与你一直在开发的喜爱框架一起使用，或者你可以单独使用它。你可以仅仅用它来添加一些小功能，或者你可以使用整个Vue生态系统来构建复杂的应用程序。
- en: If you want to check how it compares to other frameworks, such as Angular or
    React, then please visit  [http://vuejs.org/guide/comparison.html](http://vuejs.org/guide/comparison.html)
    .
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要比较它与其他框架，比如Angular或React，那么请访问[http://vuejs.org/guide/comparison.html](http://vuejs.org/guide/comparison.html)。
- en: If you want to check out all the amazing things about Vue.js, then you are more
    than welcome to visit  [https://github.com/vuejs/awesome-vue](https://github.com/vuejs/awesome-vue)
    .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解关于Vue.js的所有惊人之处，那么欢迎访问[https://github.com/vuejs/awesome-vue](https://github.com/vuejs/awesome-vue)。
- en: Let's go shopping!
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们去购物吧！
- en: 'I don''t know how but I can feel that your weekend is close and that you are
    starting to think about going shopping to buy the needed groceries for the next
    week. Unless you are a genius who is able to maintain the whole list in your head
    or you are a modest person who does not need so much, you probably make a shopping
    list before going shopping. Maybe you even use some app for that. Now, I ask you:
    why not use your own app? How do you feel about creating and designing it? Let''s
    do that! Let''s create our own shopping list application. Let''s start by creating
    a rapid prototype for it. It''s a really easy task—build an interactive prototype
    for the shopping list.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道为什么，但我能感觉到你的周末即将到来，你开始考虑去购物买下周所需的杂货。除非你是一个能够在脑海中维护整个清单的天才，或者你是一个不需要那么多的谦逊的人，你可能在去购物前会列一个购物清单。也许你甚至会使用一些应用程序来帮助。现在，我问你：为什么不使用你自己的应用程序呢？你对创建和设计它有什么感觉？让我们做吧！让我们创建我们自己的购物清单应用程序。让我们从创建一个快速原型开始。这是一个非常简单的任务——为购物清单构建一个交互式原型。
- en: It should show the list and allow us to add and remove the items. Actually,
    it's very similar to a ToDo list. Let's start doing it using classic HTML + CSS
    + JS + jQuery approach. We will also use the Bootstrap framework ( [http://getbootstrap.com/](http://getbootstrap.com/)
    ) to make things a little bit more beautiful without having to write extensive
    CSS code. (Yes, because our book is not about CSS and because making things with
    Bootstrap is so crazily easy!)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该显示列表并允许我们添加和删除项目。实际上，这与待办事项列表非常相似。让我们开始使用经典的HTML + CSS + JS + jQuery方法来做这件事。我们还将使用Bootstrap框架（[http://getbootstrap.com/](http://getbootstrap.com/)）来使事情看起来更美观，而无需编写大量的CSS代码。（是的，因为我们的书不是关于CSS，因为使用Bootstrap制作东西是如此地简单！）
- en: Implementing a shopping list using jQuery
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用jQuery实现购物清单
- en: 'Probably, your code will end up looking as something like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可能，您的代码最终看起来会像以下内容：
- en: 'Here is the HTML code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HTML代码：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the CSS code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CSS代码：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is the JavaScript/jQuery code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是JavaScript/jQuery代码：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**`Downloading the example code`** Detailed steps to download the code bundle
    are mentioned in the [Preface](part0010.xhtml#aid-9H5K1 "Preface") of this book.
    The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Learning-Vue.js-2](https://github.com/PacktPublishing/Learning-Vue.js-2).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**`下载示例代码`** 下载代码包的详细步骤在本书的[前言](part0010.xhtml#aid-9H5K1 "前言")中有提到。该书的代码包也托管在GitHub上，网址为[https://github.com/PacktPublishing/Learning-Vue.js-2](https://github.com/PacktPublishing/Learning-Vue.js-2)。我们还有来自丰富书籍和视频目录的其他代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)上找到。去看看吧！'
- en: 'If you open the page in a browser, you will probably see something like the
    following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中打开页面，您可能会看到类似以下内容：
- en: '![Implementing a shopping list using jQuery](../Images/image00218.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery实现购物清单](../Images/image00218.jpeg)'
- en: Shopping list implementation using the HTML + CSS + jQuery approach
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML + CSS + jQuery方法实现购物清单
- en: Please have a look at JSFiddle at [https://jsfiddle.net/chudaol/u5pcnLw9/2/](https://jsfiddle.net/chudaol/u5pcnLw9/2/)
    .
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[https://jsfiddle.net/chudaol/u5pcnLw9/2/](https://jsfiddle.net/chudaol/u5pcnLw9/2/)上的JSFiddle。
- en: As you can see, it is a very basic piece of HTML code that contains an unordered
    list of elements, where each element is presented with a checkbox and a text—an
    input for the user text and the **`Add!`** button. Each time the **`Add!`** button
    is clicked, the content of the text input is transformed into a list entry and
    appended to the list. When the checkbox of any item is clicked, the state of an
    entry is toggled from to **`to buy`** (unchecked) to **`bought`** (checked).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这是一个非常基本的HTML代码片段，其中包含一个无序元素列表，每个元素都用复选框和文本呈现 - 一个用于用户文本和**`Add!`**按钮的输入。每次单击**`Add!`**按钮时，文本输入的内容都会被转换为列表条目并附加到列表中。当单击任何项目的复选框时，条目的状态会从**`to
    buy`**（未选中）切换到**`bought`**（已选中）。
- en: Let's also add a feature that allows us to change the title of the list (it
    might become useful if we end up implementing multiple shopping lists in the application).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还添加一个功能，允许我们更改列表的标题（如果我们最终在应用程序中实现多个购物清单，这可能会很有用）。
- en: 'So, we will end up with some extra markup and some more jQuery event listeners
    and handlers:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将最终得到一些额外的标记和一些更多的jQuery事件监听器和处理程序：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Check JSFiddle at [https://jsfiddle.net/chudaol/47u38fvh/3/](https://jsfiddle.net/chudaol/47u38fvh/3/)
    .
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://jsfiddle.net/chudaol/47u38fvh/3/](https://jsfiddle.net/chudaol/47u38fvh/3/)上查看JSFiddle。
- en: Implementing a shopping list using Vue.js
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Vue.js实现购物清单
- en: 'This was a very simple example. Let''s try to implement it step-by-step using
    Vue.js. There are plenty of ways of including `vue.js` into your project, but
    in this chapter, we will include it just by adding the JavaScript Vue file from
    the **CDN**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的例子。让我们尝试使用Vue.js逐步实现它。有很多种方法可以将`vue.js`包含到您的项目中，但在本章中，我们将通过添加来自**CDN**的JavaScript
    Vue文件来包含它：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So, let's start by rendering a list of elements.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们从渲染元素列表开始。
- en: 'Create the HTML file and add the following markup:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建HTML文件并添加以下标记：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now add the following JavaScript code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加以下JavaScript代码：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open it in the browser. You will see that the list is rendered:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开它。您会看到列表已经渲染出来了：
- en: '![Implementing a shopping list using Vue.js](../Images/image00219.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![使用Vue.js实现购物清单](../Images/image00219.jpeg)'
- en: Shopping list implemented using Vue.js
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue.js实现的购物清单
- en: Let's analyze this example. The Vue application code starts with the new `Vue`
    keyword. How do we bind the piece of markup to the application data? We pass to
    the `Vue` instance the DOM element that must be bound to it. Any other markup
    in the page will not be affected and will not recognize Vue's magic.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下这个例子。Vue应用程序代码以新的`Vue`关键字开始。我们如何将标记片段绑定到应用程序数据？我们将DOM元素传递给`Vue`实例，该元素必须与其绑定。页面中的任何其他标记都不会受到影响，也不会识别Vue的魔法。
- en: As you can see, our markup is wrapped into the `#app` element and is passed
    as a first argument in the map of `Vue` options. The `data` argument contains
    the objects that are being used inside the markup using double curly brackets
    (`{{}}`) . You will probably find this annotation very easy to understand if you
    are familiar with templating preprocessors (for example, handlebars; for more
    information, visit [http://handlebarsjs.com/](http://handlebarsjs.com/) ).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们的标记被包裹在`#app`元素中，并作为`Vue`选项映射中的第一个参数传递。`data`参数包含在标记中使用双大括号(`{{}}`)的对象。如果您熟悉模板预处理器（例如handlebars），您可能会发现这种注释非常容易理解；有关更多信息，请访问[http://handlebarsjs.com/](http://handlebarsjs.com/)。
- en: So what?—you're probably exclaiming. What are you going to teach me? How to
    use templating preprocessors? Thank you very much, but I would be better off having
    some beers and watching football.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 那又怎样？—你可能会惊叹。你要教我什么？如何使用模板预处理器？非常感谢，但我宁愿喝点啤酒，看看足球。
- en: Stop, dear reader, don't go, just grab your beer and let's continue our example.
    You'll see that it'll be lots of fun!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 停下来，亲爱的读者，别走，拿起你的啤酒，让我们继续我们的例子。你会发现这将是非常有趣的！
- en: Analyzing data binding using developer tools
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用开发者工具分析数据绑定
- en: 'Let''s see data binding in action. Open your browser''s developer tools, find
    your JavaScript code, and add a breakpoint at the start of the script. Now analyze
    how the data objects look before and after the Vue application is initialized.
    You see, it changed a lot. Now the `data` object is prepared to the reactive data
    binding:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看数据绑定的实际操作。打开浏览器的开发者工具，找到您的JavaScript代码，并在脚本的开头添加一个断点。现在分析一下Vue应用程序初始化之前和之后数据对象的样子。你会发现，它变化很大。现在`data`对象已经准备好进行反应式数据绑定了：
- en: '![Analyzing data binding using developer tools](../Images/image00220.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![使用开发者工具分析数据绑定](../Images/image00220.jpeg)'
- en: The data object before and after the Vue object initialization
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Vue对象初始化之前和之后的数据对象
- en: 'Now if we change the `title` property of the `data` object from the developer
    tools console (we can do it because our `data` is a global object), it will be
    reflected automatically in the title on the page:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们从开发者工具控制台更改`data`对象的`title`属性（我们可以这样做，因为我们的`data`是一个全局对象），它将自动反映在页面上的标题中：
- en: '![Analyzing data binding using developer tools](../Images/image00221.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![使用开发者工具分析数据绑定](../Images/image00221.jpeg)'
- en: 'Data binding: changing object properties affects the View immediately'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定：更改对象属性会立即影响视图
- en: Bringing user input to the data with two-way binding
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过双向绑定将用户输入带入数据
- en: So, in our example, we were able to bring the data from the plain JavaScript
    data model to the page. We provided it a sort of a flight from the application
    code to the page. Don't you think that it would be nice if we could offer a two-way
    flight to our data?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们的示例中，我们能够将数据从普通的JavaScript数据模型带到页面上。我们为它提供了一种从应用程序代码到页面的飞行。你不觉得如果我们能为我们的数据提供双向飞行会很好吗？
- en: Let's see now how we can achieve two-way data binding and how we can change
    the value of a `data` property from the page.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何实现双向数据绑定，以及如何从页面更改`data`属性的值。
- en: Copy the HTML markup for the title, change the input from the first jQuery example,
    and add the attribute `v-model="title"` to the `input` element.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 复制标题的HTML标记，更改第一个jQuery示例中的输入，并向`input`元素添加属性`v-model="title"`。
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Have you already heard about directives in Vue.js? Congratulations, you''ve
    just used one! Actually, the `v-model` attribute is a directive of Vue.js that
    provides two-way data binding. You can read more about it at the official Vue
    page: [http://vuejs.org/api/#v-model](http://vuejs.org/api/#v-model) .'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经听说过Vue.js中的指令了吗？恭喜，您刚刚使用了一个！实际上，`v-model`属性是Vue.js的一个指令，提供了双向数据绑定。您可以在官方Vue页面上阅读更多关于它的信息：[http://vuejs.org/api/#v-model](http://vuejs.org/api/#v-model)。
- en: 'Now, the HTML code for our shopping list application code looks like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的购物清单应用程序代码的HTML代码如下：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And that's it!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！
- en: 'Refresh the page now and modify the input. You''ll see the title automatically
    being updated as you type:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在刷新页面并修改输入。您会看到标题在您输入时自动更新：
- en: '![Bringing user input to the data with two-way binding](../Images/image00222.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![通过双向绑定将用户输入带入数据](../Images/image00222.jpeg)'
- en: 'Data binding: changing the text bound to the model''s property affects the
    text bound to the same property immediately'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定：更改绑定到模型属性的文本会立即影响绑定到同一属性的文本。
- en: So, everything is nice; however, this example just grabs the two item elements
    and renders them as list items. We want it to render the list of items independently
    of the list size.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一切都很好；然而，这个例子只是抓取了两个项目元素，并将它们呈现为列表项。我们希望它能够独立于列表大小呈现项目列表。
- en: Rendering the list of items using the v-for directive
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用v-for指令渲染项目列表
- en: So, we need some mechanism to iterate through the `items` array and to render
    each item in our `<ul>` element.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要一些机制来遍历`items`数组，并在我们的`<ul>`元素中呈现每个项目。
- en: 'Fortunately, Vue.js provides us with a nice directive for iterating through
    iterative JavaScript data structures. It is called `v-for`. We will use it in
    the list item `<li>` element. Modify the markup of the list so that it looks like
    the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Vue.js为我们提供了一个很好的指令，用于遍历迭代的JavaScript数据结构。它被称为`v-for`。我们将在列表项`<li>`元素中使用它。修改列表的标记，使其看起来像下面这样：
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will learn other nice directives such as `v-if`, `v-else`, `v-show`, `v-on`,
    `v-bind`, and so on in this book, so keep reading.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将学习到其他很好的指令，如`v-if`、`v-else`、`v-show`、`v-on`、`v-bind`等等，所以请继续阅读。
- en: 'Refresh the page and have a look. The page remains the same. Now, try to push
    an item into the array of `items` from the developer tools console. Try to pop
    them as well. You will not be surprised to see that the `items` array manipulations
    are immediately reflected on the page:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新页面并查看。页面保持不变。现在，尝试从开发者工具控制台将项目推入`items`数组中。也尝试弹出它们。您会不会惊讶地看到`items`数组的操作立即反映在页面上：
- en: '![Rendering the list of items using the v-for directive](../Images/image00223.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![使用v-for指令渲染项目列表](../Images/image00223.jpeg)'
- en: 'Data binding: changing an array affects lists based on it immediately'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定：更改数组会立即影响基于它的列表
- en: So, now we have a list of items that is rendered on a page with just one line
    of the markup. However, we still need these items to have a checkbox that allows
    us to check the already bought items or uncheck them when needed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们有一个项目列表，只需一行标记就可以在页面上呈现出来。然而，我们仍然需要这些项目有一个复选框，允许我们在需要时勾选已购买的项目或取消勾选它们。
- en: Check and uncheck shopping list items
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 勾选和取消勾选购物清单项目
- en: To achieve this behavior, let's slightly modify our `items` array by changing
    our string items and transforming them into the objects with two properties, `text`
    and `checked` (to reflect the state), and let's modify the markup to add a checkbox
    to each item.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这种行为，让我们稍微修改我们的`items`数组，将我们的字符串项目更改为具有两个属性`text`和`checked`（以反映状态）的对象，并修改标记以为每个项目添加复选框。
- en: 'So our JavaScript code for the data declaration will look like the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的数据声明的JavaScript代码将如下所示：
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And our list markup will look like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的列表标记将如下所示：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Refresh the page and check that the `checked` property of the `items` checkbox,
    and the removed class of each list item, `<li>`, is bound to the `checked` Boolean
    state of the items. Play around and try to click checkboxes to see what happens.
    Isn't it nice that just with two directives we are able to propagate the state
    of the items and change the class of the corresponding `<li>` HTML element?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新页面并检查`items`复选框的`checked`属性，以及每个列表项`<li>`的移除类，是否与项目的`checked`布尔状态绑定。尝试点击复选框，看看会发生什么。仅仅用两个指令就能够传播项目的状态并改变相应的`<li>`HTML元素的类，是不是很棒？
- en: Adding new shopping list items using the v-on directive
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用v-on指令添加新的购物清单项目
- en: So now we just need a small addition to our code to be able to actually add
    shopping list items. To achieve that, we will add one more object to our data
    and call it `newItem`. We'll also add a small method that pushes new item to the
    `items` array. And we'll call this method from the markup page using the `v:on`
    directive used on the HTML input element that will be used for the new item and
    on the button used to click to add a new item.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们只需要对我们的代码进行一点小的修改，就能够真正地添加购物清单项目了。为了实现这一点，我们将在我们的数据中再添加一个对象，称之为`newItem`。我们还将添加一个小方法，将新项目推送到`items`数组中。我们将在标记页中使用`v:on`指令调用这个方法，该指令用于HTML输入元素和用于单击以添加新项目的按钮。
- en: 'So our JavaScript code will look like the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的JavaScript代码将如下所示：
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We added a new property to the `data` object called `newItem`. Then we added
    a new section called `methods` to our Vue initialization `options` object and
    added the `addItem` method to this section. All the data properties are accessible
    in the `methods` section via the `this` keyword. Thus, in this method, we just
    get `this.newItem` and push it into the  `this.items` array. Now we must bind
    the call to this method to some user action. As it has already been mentioned,
    we will use the `v-on` directive and apply it to the `enter` keyup on the new
    item input and to the **`Add!`** button click.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`data`对象中添加了一个名为`newItem`的新属性。然后我们在Vue初始化`options`对象中添加了一个名为`methods`的新部分，并在该部分中添加了`addItem`方法。所有的数据属性都可以通过`this`关键字在`methods`部分中访问。因此，在这个方法中，我们只需获取`this.newItem`并将其推送到`this.items`数组中。现在我们必须将对这个方法的调用绑定到某个用户操作上。正如已经提到的，我们将使用`v-on`指令，并将其应用于新项目输入的`enter`键盘事件和**`Add!`**按钮的单击事件。
- en: 'So add the following markup before our list of items:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目列表之前添加以下标记：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `v-on` directive attaches an event listener to the elements. The shortcut
    is the `@` sign. So, instead of writing `v-on:keyup="addItem"`, you can write
    `@keyup="addItem"`. You can read more about the `v-on` directive on the official
    documentation site at [http://vuejs.org/api/#v-on](http://vuejs.org/api/#v-on)
    .
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-on`指令将事件侦听器附加到元素。快捷方式是`@`符号。因此，你可以用`@keyup="addItem"`来代替`v-on:keyup="addItem"`。你可以在官方文档网站上阅读更多关于`v-on`指令的信息，网址是[http://vuejs.org/api/#v-on](http://vuejs.org/api/#v-on)。'
- en: 'Let''s finalize. The whole code now looks like the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们完成。整个代码现在看起来像下面这样：
- en: 'Here is the HTML code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是HTML代码：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is the JavaScript code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是JavaScript代码：
- en: '[PRE14]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here''s a link to JSFiddle: [https://jsfiddle.net/chudaol/vxfkxjzk/3/](https://jsfiddle.net/chudaol/vxfkxjzk/3/)
    .'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这是JSFiddle的链接：[https://jsfiddle.net/chudaol/vxfkxjzk/3/](https://jsfiddle.net/chudaol/vxfkxjzk/3/)。
- en: Using Vue.js in an existing project
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在现有项目中使用Vue.js
- en: 'I can feel now that you have seen how easy is to bind the properties of the
    model to the presentation layer and you are already starting to think about how
    it can be used in your existing project. But then you think: hell, no, I need
    to install some things, run `npm install`, change the project''s structure, add
    directives, and change the code.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在可以感觉到你已经看到了将模型的属性绑定到表示层有多容易，你已经开始考虑如何在现有项目中使用它。但是然后你会想：天啊，不，我需要安装一些东西，运行`npm
    install`，改变项目的结构，添加指令，改变代码。
- en: 'And here I can tell you: no! No installs, no npms, just grab the `vue.js` file,
    insert it into your HTML page, and use it. That''s all, no structure changes,
    no architectural decisions, no discussions. Just use it. I will show you how we
    used it at EdEra ( [https://www.ed-era.com](https://www.ed-era.com) ) to include
    a small "check yourself" functionality at the end of a GitBook chapter.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我可以告诉你：不！不需要安装，不需要npm，只需获取`vue.js`文件，将其插入到你的HTML页面中，然后使用它。就这样，不需要改变结构，不需要架构决策，也不需要讨论。只需使用它。我将向你展示我们在EdEra（[https://www.ed-era.com](https://www.ed-era.com)）中如何在GitBook章节的末尾包含一个小的“自我检查”功能。
- en: EdEra is a Ukraine-based online educational project whose aim is to transform
    the whole educational system into something modern, online, interactive, and fun.
    Actually, I am a co-founder and the chief technical officer of this young nice
    project, being responsible for the whole technical part of the thing. So, in EdEra,
    we have some online courses built on top of the open EdX platform ( [https://open.edx.org/](https://open.edx.org/)
    ) and some interactive educational books built on top of the great GitBook framework
    ( [http://www.gitbook.org](http://www.gitbook.org) ). Basically, GitBook is a
    platform based on top of the Node.js technology stack. It allows someone with
    basic knowledge of the markdown language and basic Git commands to write books
    and host them in the GitBook servers. EdEra's books can be found at [http://ed-era.com/books](http://ed-era.com/books) (beware,
    they are all in Ukrainian).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: EdEra是一个总部位于乌克兰的在线教育项目，其目标是将整个教育系统转变为现代、在线、互动和有趣的东西。实际上，我是这个年轻的美好项目的联合创始人兼首席技术官，负责整个技术部分。因此，在EdEra，我们有一些建立在开放的EdX平台（[https://open.edx.org/](https://open.edx.org/)）之上的在线课程，以及一些建立在伟大的GitBook框架（[http://www.gitbook.org](http://www.gitbook.org)）之上的互动教育书籍。基本上，GitBook是一个基于Node.js技术栈的平台。它允许具有对Markdown语言和基本Git命令的基本知识的人编写书籍并将它们托管在GitBook服务器上。EdEra的书籍可以在[http://ed-era.com/books](http://ed-era.com/books)找到（注意，它们都是乌克兰语）。
- en: Let's see what we have done in our books using Vue.js.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们在书中使用Vue.js做了什么。
- en: 'At some point, I decided to include a small quiz at the end of the chapter
    about personal pronouns in the book that teaches English. Thus, I''ve included
    the `vue.js` JavaScript file, edited the corresponding `.md` file, and included
    the following HTML code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，我决定在教授英语的书籍中关于人称代词的章节末尾包含一个小测验。因此，我包含了`vue.js` JavaScript文件，编辑了相应的`.md`文件，并包含了以下HTML代码：
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then I added a custom JavaScript file, where I''ve included the following code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我添加了一个自定义的JavaScript文件，其中包含了以下代码：
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can check this code at this GitHub page: [https://github.com/chudaol/ed-era-book-english](https://github.com/chudaol/ed-era-book-english)
    . Here''s a code of a page written in markdown with inserted HTML: [https://github.com/chudaol/ed-era-book-english/blob/master/2/osobovi_zaimenniki.md](https://github.com/chudaol/ed-era-book-english/blob/master/2/osobovi_zaimenniki.md)
    . And here''s a JavaScript code: [https://github.com/chudaol/ed-era-book-english/blob/master/custom/js/quiz-vue.js](https://github.com/chudaol/ed-era-book-english/blob/master/custom/js/quiz-vue.js)
    . You can even clone the repository and try it locally using `gitbook-cli` ( [https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md](https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md)
    ).'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个GitHub页面上查看这段代码：[https://github.com/chudaol/ed-era-book-english](https://github.com/chudaol/ed-era-book-english)。这是一个用markdown编写并插入HTML的页面的代码：[https://github.com/chudaol/ed-era-book-english/blob/master/2/osobovi_zaimenniki.md](https://github.com/chudaol/ed-era-book-english/blob/master/2/osobovi_zaimenniki.md)。这是一个JavaScript代码：[https://github.com/chudaol/ed-era-book-english/blob/master/custom/js/quiz-vue.js](https://github.com/chudaol/ed-era-book-english/blob/master/custom/js/quiz-vue.js)。你甚至可以克隆这个存储库，并使用`gitbook-cli`在本地尝试（[https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md](https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md)）。
- en: 'Let''s have a look at this code. You have probably already detected the parts
    that you have already seen and even tried:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这段代码。你可能已经发现了你已经看过甚至尝试过的部分：
- en: 'The `data` object contains two properties:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`对象包含两个属性：'
- en: The `string` property text
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串属性text
- en: The `Boolean` property correct
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔属性correct
- en: The `checkText` method just grabs the `text` property, compares it with the
    correct text, and assigns the value to the correct value
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkText`方法只是获取`text`属性，将其与正确的文本进行比较，并将值分配给正确的值'
- en: The `v-on` directive calls the `checkText` method on keyup
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-on`指令在键盘松开时调用`checkText`方法'
- en: The `v-bind` directive binds the class `correct` to the `correct` property
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-bind`指令将类`correct`绑定到`correct`属性'
- en: 'Here is how the code looks in my IDE:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的IDE中的代码样子：
- en: '![Using Vue.js in an existing project](../Images/image00224.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![在现有项目中使用Vue.js](../Images/image00224.jpeg)'
- en: Using Vue in a markdown-driven project
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在驱动项目中使用Vue
- en: 'And next is what it looks like in the browser:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是在浏览器中的样子：
- en: '![Using Vue.js in an existing project](../Images/image00225.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![在现有项目中使用Vue.js](../Images/image00225.jpeg)'
- en: Vue.js in action inside the GitBook page
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js在GitBook页面内的实际应用
- en: '![Using Vue.js in an existing project](../Images/image00226.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![在现有项目中使用Vue.js](../Images/image00226.jpeg)'
- en: Vue.js in action inside the GitBook page
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js在GitBook页面内的实际应用
- en: Check it out at [http://english.ed-era.com/2/osobovi_zaimenniki.html](http://english.ed-era.com/2/osobovi_zaimenniki.html)
    .
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://english.ed-era.com/2/osobovi_zaimenniki.html](http://english.ed-era.com/2/osobovi_zaimenniki.html)查看它。
- en: Amazing, right? Pretty simple, pretty reactive!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，对吧？非常简单，非常响应！
- en: Vue.js 2.0!
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js 2.0！
- en: 'At the time of writing, Vue.js 2.0 was announced ( [https://vuejs.org/2016/04/27/announcing-2.0/](https://vuejs.org/2016/04/27/announcing-2.0/)
    ). Check the following links in this regard:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Vue.js 2.0已经宣布（[https://vuejs.org/2016/04/27/announcing-2.0/](https://vuejs.org/2016/04/27/announcing-2.0/)）。请查看相关链接：
- en: '[http://www.infoworld.com/article/3063615/javascript/vuejs-lead-our-javascript-framework-is-faster-than-react.html](http://www.infoworld.com/article/3063615/javascript/vuejs-lead-our-javascript-framework-is-faster-than-react.html)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.infoworld.com/article/3063615/javascript/vuejs-lead-our-javascript-framework-is-faster-than-react.html](http://www.infoworld.com/article/3063615/javascript/vuejs-lead-our-javascript-framework-is-faster-than-react.html)'
- en: '[https://www.reddit.com/r/vuejs/comments/4gq2r1/announcing_vuejs_20/](https://www.reddit.com/r/vuejs/comments/4gq2r1/announcing_vuejs_20/)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.reddit.com/r/vuejs/comments/4gq2r1/announcing_vuejs_20/](https://www.reddit.com/r/vuejs/comments/4gq2r1/announcing_vuejs_20/)'
- en: The second version of Vue.js has some considerable differences comparing to
    its predecessor, starting from the way that data binding is being handled and
    moving to its API. It uses lightweight virtual DOM implementation for rendering,
    supports server-side rendering, and is faster and leaner.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js的第二个版本与其前身相比有一些显著的区别，从处理数据绑定的方式开始，到其API。它使用轻量级虚拟DOM实现进行渲染，支持服务器端渲染，并且更快、更精简。
- en: At the time of writing, Vue 2.0 was in an early alpha stage. Do not worry, though.
    All the examples that we will cover in this book are based on the latest stable
    version of Vue 2.0 and are fully compatible with the both the versions.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Vue 2.0处于早期alpha阶段。不过不用担心。本书中涵盖的所有示例都基于Vue 2.0的最新稳定版本，并且与两个版本都完全兼容。
- en: Projects using Vue.js
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue.js的项目
- en: Probably, at this time, you are wondering what projects are out there that are
    built on top of Vue.js, or use it as a part of their codebase. There are a lot
    of nice open source, experimental, and enterprise projects using it. The complete
    and constantly updated list of these projects can be found at [https://github.com/vuejs/awesome-vue#projects-using-vuejs](https://github.com/vuejs/awesome-vue#projects-using-vuejs)
    .
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 也许，此时你想知道有哪些项目是建立在Vue.js之上，或者将其作为其代码库的一部分。有很多不错的开源、实验性和企业项目在使用它。这些项目的完整和不断更新的列表可以在[https://github.com/vuejs/awesome-vue#projects-using-vuejs](https://github.com/vuejs/awesome-vue#projects-using-vuejs)找到。
- en: Let's have a look at some of them.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看其中一些。
- en: Grammarly
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Grammarly
- en: 'Grammarly ( [https://www.grammarly.com/](https://www.grammarly.com/) ) is a
    service that helps you write English correctly. It has several apps, one of them
    is a simple Chrome extension that just checks any text input that you fill in.
    Another one is an online editor that you can use to check big chunks of text.
    This editor is built using Vue.js! The following is a screenshot of this text
    being edited in the online editor of Grammarly:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Grammarly（[https://www.grammarly.com/](https://www.grammarly.com/)）是一个帮助您正确书写英语的服务。它有几个应用程序，其中一个是一个简单的Chrome扩展，只是检查您填写的任何文本输入。另一个是一个在线编辑器，您可以用它来检查大块的文本。这个编辑器是使用Vue.js构建的！以下是Grammarly在线编辑器中正在编辑的文本的截图：
- en: '![Grammarly](../Images/image00227.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Grammarly](../Images/image00227.jpeg)'
- en: 'Grammarly: a project that is built on top of Vue.js'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Grammarly：一个建立在Vue.js之上的项目
- en: Optimizely
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Optimizely
- en: 'Optimizely ( [https://www.optimizely.com/](https://www.optimizely.com/) ) is
    a service that helps you test, optimize, and personalize your websites. I''ve
    used the Packt site to create an Optimizely experiment and to check out Vue.js
    in action in this resource. It looks like the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Optimizely（[https://www.optimizely.com/](https://www.optimizely.com/)）是一个帮助您测试、优化和个性化您的网站的服务。我曾使用Packt网站创建了一个Optimizely实验，并在这个资源中查看了Vue.js的实际效果。它看起来像下面这样：
- en: '![Optimizely](../Images/image00228.jpeg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![Optimizely](../Images/image00228.jpeg)'
- en: 'Optimizely: a project that is built on top of Vue.js'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Optimizely：一个建立在Vue.js之上的项目
- en: 'Hovering around with the mouse gives us the possibility of opening a context
    menu that allows different manipulations with the page data, including the simplest
    one, text editing. Let''s try this one:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标悬停可以打开上下文菜单，允许对页面数据进行不同的操作，包括最简单的文本编辑。让我们试试这个：
- en: '![Optimizely](../Images/image00229.jpeg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![Optimizely](../Images/image00229.jpeg)'
- en: Using Optimizely and watching Vue.js in action
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Optimizely并观看Vue.js的实际操作
- en: 'The text box is opened. When I type in it, the text in the title is reactively
    changed. We saw and implemented it using Vue.js:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 文本框已打开。当我在其中输入时，标题中的文本会被动地更改。我们使用Vue.js看到并实现了它：
- en: '![Optimizely](../Images/image00230.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![Optimizely](../Images/image00230.jpeg)'
- en: Using Optimizely and watching Vue.js in action
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Optimizely并观看Vue.js的实际操作
- en: FilterBlend
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FilterBlend
- en: FilterBlend ( [https://github.com/ilyashubin/FilterBlend](https://github.com/ilyashubin/FilterBlend)
    ) is an open source playground for the CSS background-blend-mode and filter properties.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: FilterBlend（[https://github.com/ilyashubin/FilterBlend](https://github.com/ilyashubin/FilterBlend)）是一个开源的CSS背景混合模式和滤镜属性的游乐场。
- en: You can load your images and combine blending with filters.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以加载您的图像并将混合与滤镜相结合。
- en: 'If you want to give FilterBlend a try, you can install it locally:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试FilterBlend，您可以在本地安装它：
- en: 'Clone the repository:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆存储库：
- en: '[PRE17]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Enter the `FilterBlend` directory:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`FilterBlend`目录：
- en: '[PRE18]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Install the dependencies:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装依赖项：
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the project:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行项目：
- en: '[PRE20]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Open your browser on `localhost:8000` and play around. You can see that once
    you change something in the menu on the right, it is immediately propagated to
    the images on the left side. All this functionality is achieved using Vue.js.
    Check the code on GitHub.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在`localhost:8000`上打开您的浏览器并进行操作。您会发现，一旦您在右侧菜单中更改了某些内容，它会立即传播到左侧的图像中。所有这些功能都是使用Vue.js实现的。在GitHub上查看代码。
- en: '![FilterBlend](../Images/image00231.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![FilterBlend](../Images/image00231.jpeg)'
- en: 'FilterBlend: a project built on top of Vue.js'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: FilterBlend：一个基于Vue.js构建的项目
- en: PushSilver
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PushSilver
- en: 'PushSilver ( [https://pushsilver.com](https://pushsilver.com) ) is a nice and
    simple service for busy people to create simple invoices. It allows creating invoices,
    sending and resending them to the clients, and keeping tracking of them. It was
    created by a developer doing freelance consultancy and being tired of having to
    create invoices each time for each small project. This tool works well and it
    was built using Vue.js:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: PushSilver（[https://pushsilver.com](https://pushsilver.com)）是一个为忙碌的人创建简单发票的良好而简单的服务。它允许创建发票，向客户发送和重新发送它们，并跟踪它们。它是由一位进行自由咨询的开发人员创建的，他厌倦了每次为每个小项目创建发票。这个工具运行良好，它是使用Vue.js构建的：
- en: '![PushSilver](../Images/image00232.jpeg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![PushSilver](../Images/image00232.jpeg)'
- en: 'PushSilver: invoice managing application built on top of Vue.js'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: PushSilver：基于Vue.js构建的发票管理应用程序
- en: '![PushSilver](../Images/image00233.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![PushSilver](../Images/image00233.jpeg)'
- en: 'PushSilver: invoice managing application built on top of Vue.js'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: PushSilver：基于Vue.js构建的发票管理应用程序
- en: Book roadmap
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 书籍路线图
- en: This book, like most part of technical books, is organized in such a way that
    you do not need to read it from beginning to end. You can choose the parts that
    interest you the most and skip the rest.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书，像大多数技术书籍一样，是以这样一种方式组织的，您不需要从头到尾阅读它。您可以选择您最感兴趣的部分并跳过其余部分。
- en: 'This book is organized as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的组织如下：
- en: If you are reading this, there's no need to specify what is going on in the
    first chapter.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在阅读本书，就无需说明第一章中正在发生什么。
- en: '[Chapter 2](part0027.xhtml#aid-PNV61 "Chapter 2. Fundamentals – Installing
    and Using"), *Fundamentals - Installing and Using,* is pretty theoretical and
    will explain what''s going on behind the scenes of Vue.js and its main parts.
    So, if you are not into theory and want to put your hands into coding, you are
    free to skip this part. In this part, we will also go through the installation
    and setup process.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](part0027.xhtml#aid-PNV61 "第2章。基础知识-安装和使用")，“基础知识-安装和使用”，是非常理论性的，将解释Vue.js及其主要部分背后发生了什么。因此，如果你不喜欢理论，想要动手编码，可以跳过这部分。在这一部分，我们还将介绍安装和设置过程。'
- en: 'From the third to the eighth chapter, we''ll explore the main features of Vue.js
    while building the application:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从第三章到第八章，我们将在构建应用程序的同时探索Vue.js的主要特性。
- en: In [Chapter 3](part0036.xhtml#aid-12AK81 "Chapter 3. Components – Understanding
    and Using"), *Components - Understanding and Using*, we will introduce Vue components
    and apply this knowledge to our application.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](part0036.xhtml#aid-12AK81 "第3章。组件-理解和使用")，“组件-理解和使用”，我们将介绍Vue组件，并将这些知识应用到我们的应用程序中。
- en: In [Chapter 4](part0046.xhtml#aid-1BRPS1 "Chapter 4. Reactivity – Binding Data
    to Your Application"), *Reactivity - Binding Data to Your Application*, we will
    use all the data binding mechanisms provided by Vue.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](part0046.xhtml#aid-1BRPS1 "第4章。反应性-将数据绑定到您的应用程序")，“反应性-将数据绑定到您的应用程序”，我们将使用Vue提供的所有数据绑定机制。
- en: In [Chapter 5](part0052.xhtml#aid-1HIT82 "Chapter 5. Vuex – Managing State in
    Your Application"), *Vuex - Managing State in Your Application*, we will introduce
    the Vuex state management system and explain how to use it in our applications.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第5章](part0052.xhtml#aid-1HIT82 "第5章。Vuex-管理应用程序中的状态")，“Vuex-管理应用程序中的状态”，我们将介绍Vuex状态管理系统，并解释如何在我们的应用程序中使用它。
- en: In [Chapter 6](part0061.xhtml#aid-1Q5IA1 "Chapter 6. Plugins – Building Your
    House with Your Own Bricks"), *Plugins - Building Your House with Your Own Bricks*,
    we will learn how to create and use plugins for Vue applications to enrich their
    functionality.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第6章](part0061.xhtml#aid-1Q5IA1 "第6章。插件-用自己的砖建造你的房子")，“插件-用自己的砖建造你的房子”，我们将学习如何为Vue应用程序创建和使用插件，以丰富其功能。
- en: In [Chapter 7](part0065.xhtml#aid-1TVKI1 "Chapter 7. Testing – Time to Test
    What We Have Done So Far!"), *Testing - Time to Test What We Have Done so Far!*,
    we will cover and explore custom directives of Vue.js and create some in our application.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第7章](part0065.xhtml#aid-1TVKI1 "第7章。测试-是时候测试我们到目前为止所做的了！")，“测试-是时候测试我们到目前为止所做的了！”，我们将涵盖并探索Vue.js的自定义指令，并在我们的应用程序中创建一些。
- en: In [Chapter 8](part0073.xhtml#aid-25JP21 "Chapter 8. Deploying – Time to Go
    Live!"), *Deploying - Time to Go Live!*, we will learn how to test and deploy
    JavaScript application written in Vue.js.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第8章](part0073.xhtml#aid-25JP21 "第8章。部署-是时候上线了！")，“部署-是时候上线了！”，我们将学习如何测试和部署使用Vue.js编写的JavaScript应用程序。
- en: In [Chapter 9](part0078.xhtml#aid-2ACBS1 "Chapter 9. What Is Next?"), *What
    Is Next?*, we'll summarize what we've learned and see what we can do next.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第9章](part0078.xhtml#aid-2ACBS1 "第9章。接下来是什么？")，“接下来是什么？”，我们将总结我们所学到的内容，并看看接下来我们可以做些什么。
- en: Let's manage time!
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们管理好时间！
- en: At this point of time, I already know that you are so, so, so enthusiastic with
    this book that you want to read it to the end without stopping. But this is not
    right. We should manage our time and give us some time to work and some time to
    rest. Let's create a small application that implements a Pomodoro technique timer
    so that it can help us in our working time management.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 此时此刻，我已经知道你对这本书非常热情，想要一口气读到底。但这是不对的。我们应该管理好我们的时间，给自己一些工作时间和休息时间。让我们创建一个小应用程序，实现番茄工作法定时器，以帮助我们管理工作时间。
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The **Pomodoro** technique is a time management technique named after the kitchen
    tomato timer (in fact, Pomodoro means tomato in Italian). This technique consists
    of breaking down the working time into small intervals separated by short breaks.
    Read more about the Pomodoro technique on the official site: [http://pomodorotechnique.com/](http://pomodorotechnique.com/)
    .'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pomodoro**技术是一种以厨房番茄计时器命名的时间管理技术（事实上，Pomodoro在意大利语中意味着番茄）。这种技术包括将工作时间分解为短暂休息间隔。在官方网站上了解更多关于Pomodoro技术的信息：[http://pomodorotechnique.com/](http://pomodorotechnique.com/)。'
- en: Thus, our goal is very simple. We just have to create a very simple time counter
    that will decrement untill the end of the working interval and then restart and
    decrement till the end of the resting time and so on.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的目标非常简单。我们只需要创建一个非常简单的时间计数器，直到工作间隔结束，然后重新开始并递减直到休息时间结束，依此类推。
- en: Let's do that!
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: 'We will introduce two Vue data variables, `minute` and `second`, which will
    be displayed on our page. The main method on each second will decrement `second`;
    it will decrement `minute` when `second` becomes `0`; and when both `minute` and
    `second` variables come to `0`, the application should toggle between working
    and resting interval:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将引入两个Vue数据变量，`minute`和`second`，它们将显示在我们的页面上。每秒钟的主要方法将递减`second`；当`second`变为`0`时，它将递减`minute`；当`minute`和`second`变量都变为`0`时，应用程序应在工作和休息间隔之间切换：
- en: 'Our JavaScript code will look like the following:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的JavaScript代码将如下所示：
- en: '[PRE21]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In our HTML code, let''s create two placeholders for `minute` and `second`,
    and a start button for our Pomodoro timer:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的HTML代码中，让我们为`minute`和`second`创建两个占位符，并为我们的Pomodoro计时器创建一个开始按钮：
- en: '[PRE22]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Again, we are using Bootstrap for the styling, so our Pomodoro timer looks
    like the following:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们使用Bootstrap进行样式设置，因此我们的Pomodoro计时器看起来像下面这样：
- en: '![Let''s manage time!](../Images/image00234.jpeg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![让我们管理时间！](../Images/image00234.jpeg)'
- en: Countdown timer built with Vue.js
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue.js构建的倒计时器
- en: 'Our Pomodoro is nice, but it has some problems:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Pomodoro很好，但它也有一些问题：
- en: First of all, we don't know which state is being toggled. We don't know if we
    should work or rest. Let's introduce a title that will change each time the Pomodoro
    state is changed.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们不知道正在切换的状态是哪个州。我们不知道我们是应该工作还是休息。让我们引入一个标题，每次Pomodoro状态改变时都会改变。
- en: Another problem is inconsistent display of minutes and seconds numbers. For
    example, for 24 minutes and 5 seconds, we would like to see 24:05 and not 24:5\.
    Let's fix it introducing computed values in our application data and displaying
    them instead of normal values.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个问题是分钟和秒数的显示不一致。例如，对于24分钟5秒，我们希望看到24:05而不是24:5。让我们通过在应用程序数据中引入计算值并显示它们而不是普通值来解决这个问题。
- en: Yet another problem is that our start button can be clicked over and over again,
    which creates a timer each time it's clicked. Try to click it several times and
    see how crazy your timer goes. Let's fix it by introducing start, pause, and stop
    buttons, apply application states to them, and disable buttons to the state accordingly.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有另一个问题是我们的开始按钮可以一遍又一遍地点击，这会在每次点击时创建一个计时器。尝试多次点击它，看看你的计时器会变得多么疯狂。让我们通过引入开始、暂停和停止按钮，将应用程序状态应用到它们，并根据状态禁用按钮来解决这个问题。
- en: Toggle the title by using computed properties
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用计算属性切换标题
- en: Let's start by fixing the first problem by creating computed property title
    and using it in our markup.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先通过创建计算属性标题来解决第一个问题，并在我们的标记中使用它。
- en: Note
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Computed properties** are the properties inside the `data` object that allow
    us to avoid blowing up the template with some extra logic. You can find more information
    about computed properties on the official documentation site: [http://vuejs.org/guide/computed.html](http://vuejs.org/guide/computed.html)
    .'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**计算属性**是`data`对象中的属性，它们允许我们避免在模板中添加额外的逻辑。您可以在官方文档网站上找到有关计算属性的更多信息：[http://vuejs.org/guide/computed.html](http://vuejs.org/guide/computed.html)。'
- en: 'Add the `computed` section in the Vue `options` object and add the property
    `title` there:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue的`options`对象中添加`computed`部分，并在那里添加`title`属性：
- en: '[PRE23]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And now just use the following property as it was a normal Vue `data` property
    in your markup:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只需在标记中将以下属性用作普通的Vue `data`属性：
- en: '[PRE24]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And voilà! Now we have a title that changes each time the Pomodoro state is
    being toggled:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 看！现在我们有一个标题，每当Pomodoro状态被切换时都会更改：
- en: '![Toggle the title by using computed properties](../Images/image00235.jpeg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![使用计算属性切换标题](../Images/image00235.jpeg)'
- en: Automatic change of the title based on the state of the timer
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 基于计时器状态自动更改标题
- en: Nice, isn't it?
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 不错，是吧？
- en: Left-pad time values using computed properties
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用计算属性进行左填充时间值
- en: 'Now let''s apply the same logic for left padding our `minute` and `second`
    numbers. Let''s add two computed properties, `min` and `sec`, in our `computed`
    section in the `data` options and apply the simple algorithm to pad the numbers
    with `0` on the left. Of course, we could use a famous left-pad project ( [https://github.com/stevemao/left-pad](https://github.com/stevemao/left-pad)
    ), but to keep things simple and not to break the whole Internet ( [http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/](http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/)
    ), let''s apply a simple logic of our own:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们对`minute`和`second`数字应用相同的逻辑进行左填充。在我们的`computed`部分中的`data`选项中添加两个计算属性，`min`和`sec`，并应用简单的算法在左侧填充数字为`0`。当然，我们可以使用著名的left-pad项目（[https://github.com/stevemao/left-pad](https://github.com/stevemao/left-pad)），但为了保持简单并且不破坏整个互联网（[http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/](http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/)），让我们应用自己的简单逻辑：
- en: '[PRE25]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And let''s use these properties instead of `minute` and `second` in our HTML
    code:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 并且在我们的HTML代码中使用这些属性代替`minute`和`second`：
- en: '[PRE26]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Refresh a page and check how beautiful our numbers are now:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新页面并检查我们的数字现在有多美：
- en: '![Left-pad time values using computed properties](../Images/image00236.jpeg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![使用计算属性进行左填充时间值](../Images/image00236.jpeg)'
- en: Left padding using computed properties in Vue.js
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue.js中使用计算属性进行左填充
- en: Keep state with start, pause, and stop buttons
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用开始、暂停和停止按钮保持状态
- en: 'So, to fix the third problem, let''s introduce three application states, `started`,
    `paused`, and `stopped`, and let''s have three methods that would allow us to
    permute over these states. We already have the method that starts the application,
    so we just add the logic there to change the state to `started`. We also add two
    additional methods, `pause` and `stop`, which would pause the timer and change
    to the corresponding application state:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了解决第三个问题，让我们引入三种应用状态，`started`、`paused`和`stopped`，并且让我们有三种方法可以允许我们在这些状态之间进行排列。我们已经有了启动应用程序的方法，所以我们只需在那里添加逻辑来将状态更改为`started`。我们还添加了另外两种方法，`pause`和`stop`，它们将暂停计时器并更改为相应的应用程序状态：
- en: '[PRE27]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And, let''s add two buttons to our HTML code and add the `click` listeners
    that call the corresponding methods:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在我们的HTML代码中添加两个按钮，并添加调用相应方法的`click`监听器：
- en: '[PRE28]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now our application looks nice and allows us to start, pause, and stop the
    timer:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序看起来很好，并且允许我们启动、暂停和停止计时器：
- en: '![Keep state with start, pause, and stop buttons](../Images/image00237.jpeg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![使用开始、暂停和停止按钮保持状态](../Images/image00237.jpeg)'
- en: Toggling start, stop, and pause buttons according to the application state
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序状态切换开始、停止和暂停按钮
- en: Check what the whole code looks like in JSFiddle at  [https://jsfiddle.net/chudaol/b6vmtzq1/1/](https://jsfiddle.net/chudaol/b6vmtzq1/1/).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在JSFiddle中查看整个代码的样子：[https://jsfiddle.net/chudaol/b6vmtzq1/1/](https://jsfiddle.net/chudaol/b6vmtzq1/1/)。
- en: 'After so much work and so many of new terms and knowledge, you certainly deserve
    a kitten! I also love kittens, so here you have a random kitten from the awesome
    site [http://thecatapi.com/](http://thecatapi.com/) :'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这么多的工作和新术语和知识，你肯定值得拥有一只小猫！我也喜欢小猫，所以这里有一只来自[http://thecatapi.com/](http://thecatapi.com/)的随机小猫：
- en: '![Keep state with start, pause, and stop buttons](../Images/image00238.jpeg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![使用开始、暂停和停止按钮保持状态](../Images/image00238.jpeg)'
- en: Exercise
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: At the end of this chapter, I would like to propose a small exercise. The Pomodoro
    timer that we built earlier in the chapters is, without any doubt, great, but
    it still lacks some nice features. A really nice thing that it could provide would
    be showing random kittens from    [http://thecatapi.com/](http://thecatapi.com/)
    during resting time. Can you implement this? Of course you can! But please do
    not confuse resting with working time! I am almost sure that your project manager
    will not like it much if you stare at kittens instead of working.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我想提出一个小练习。我们在前几章中构建的番茄钟定时器无疑非常棒，但仍然缺少一些不错的功能。它可以提供的一个非常好的功能是在休息时间显示来自[http://thecatapi.com/](http://thecatapi.com/)的随机小猫。你能实现这个吗？当然可以！但请不要把休息时间和工作时间搞混了！我几乎可以肯定，如果你盯着小猫而不是工作，你的项目经理是不会太喜欢的。
- en: The solution to this exercise can be found in [Appendix](part0083.xhtml#aid-2F4UM1
    "Chapter 10. Solutions to Exercises"),* Solutions to Exercises*.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习的解决方案可以在[附录](part0083.xhtml#aid-2F4UM1 "Chapter 10. Solutions to Exercises")中找到，*练习解答*。
- en: Summary
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: I am very glad that you have reached this point, this means that you already
    know what Vue.js is, and if someone asks you whether it is a tool, a library,
    or a framework, you certainly will find an answer. You also know how to start
    an application using Vue.js and you know how to use Vue's features in an already
    existing project. You played around with some really nice projects that are written
    in Vue.js and you started developing some of your own! Now you do not just go
    shopping, now you go shopping with a shopping list created by you using Vue.js!
    Now you don't need to steal your tomato timer from the kitchen to use it as a
    Pomodoro timer while working; you can use your own digital Pomodoro timer made
    with Vue.js. And, last but not the least, now you can insert random kittens in
    your JavaScript application also using Vue.js.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常高兴你已经达到了这一点，这意味着你已经知道了Vue.js是什么，如果有人问你它是一个工具、一个库还是一个框架，你肯定会找到答案。你还知道如何使用Vue.js启动应用程序，以及如何在已有项目中使用Vue的功能。你已经玩过一些用Vue.js编写的非常棒的项目，并且开始开发一些属于自己的项目！现在你不仅仅是去购物，现在你是用Vue.js创建的购物清单去购物！现在你不需要从厨房偷一个番茄定时器来用作番茄钟定时器了；你可以使用自己用Vue.js制作的数字番茄钟定时器。最后但同样重要的是，现在你也可以在JavaScript应用程序中插入随机小猫，同样使用Vue.js。
- en: In the next chapter, we will cover the behind the scenes of Vue, how and why
    does it work, and the architectural patterns it uses. Each of the concepts will
    be wrapped up with an example to demonstrate it. Then we will be ready to put
    our hands deep into the code and to improve our applications taking them to the
    state of awesomeness.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Vue的幕后工作原理，以及它是如何工作的，以及它使用的架构模式。每个概念都将以示例来加以说明。然后我们将准备深入代码，改进我们的应用程序，将它们提升到令人惊叹的状态。
