- en: Getting Started with Vue.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Vue.js
- en: Vue (pronounced view) is a very powerful JavaScript library created for building
    interactive user interfaces. Despite having the ability to handle large single-page
    applications, Vue is also great for providing a framework for small, individual
    use cases. Its small file size means it can be integrated into existing ecosystems
    without adding too much bloat.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Vue（发音为view）是一个非常强大的JavaScript库，用于构建交互式用户界面。尽管具有处理大型单页应用程序的能力，但Vue也非常适合为小型个别用例提供框架。它的小文件大小意味着可以将其集成到现有生态系统中而不会增加太多冗余。
- en: 'It was built to have a simple API, which makes it easier to get started in
    comparison with its rivals: React and Angular. Although it borrows some of the
    logic and methodologies from these libraries, it has identified a need for developers
    for a simpler library for building applications.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 它被设计成具有简单的API，与其竞争对手React和Angular相比，更容易入门。尽管它借鉴了这些库的一些逻辑和方法，但它已经确定开发人员需要一个更简单的库来构建应用程序。
- en: Unlike React or Angular, one of the benefits of Vue is the clean HTML output
    it produces. Other JavaScript libraries tend to leave the HTML scattered with
    extra attributes and classes in the code, whereas Vue removes these to produce clean,
    semantic output.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与React或Angular不同，Vue的一个优点是它产生的HTML输出干净。其他JavaScript库往往会在代码中散布额外的属性和类，而Vue会删除这些内容以产生干净、语义化的输出。
- en: In the first part of this book, we are going to build an application that uses
    a JSON string to display data. We will then look at filtering and manipulating
    data, before moving on to building reusable components to reduce duplication in
    our code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一部分中，我们将构建一个使用JSON字符串来显示数据的应用程序。然后，我们将研究数据过滤和操作，然后转向构建可重用组件以减少代码重复。
- en: 'In this chapter, we will look at:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下内容：
- en: How to get started with Vue by including the JavaScript file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过包含JavaScript文件来开始使用Vue
- en: How to initialize your first Vue instance and look at the data object
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何初始化您的第一个Vue实例并查看数据对象
- en: Examining computed functions and properties
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查计算函数和属性
- en: Learning about Vue methods
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Vue方法
- en: Creating the workspace
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建工作空间
- en: 'To use Vue, we first need to include the library in our HTML and initialize
    it. For the examples in the first section of this book, we are going to be building
    our application in a single HTML page. This means the JavaScript to initialize
    and control Vue will be placed at the bottom of our page. This will keep all our
    code contained, and means it will easily run on your computer. Open your favorite
    text editor and create a new HTML page. Use the following template as a starting
    point:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Vue，我们首先需要在HTML中包含该库并初始化它。对于本书第一部分的示例，我们将在单个HTML页面中构建我们的应用程序。这意味着用于初始化和控制Vue的JavaScript将放置在页面底部。这将使我们的所有代码都保持在一个地方，并且意味着它可以轻松在您的计算机上运行。打开您喜欢的文本编辑器并创建一个新的HTML页面。使用以下模板作为起点：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The main HTML tags and structure should be familiar to you. Let's run over a
    few of the other aspects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的HTML标签和结构对您来说应该是熟悉的。让我们简要介绍一下其他一些方面。
- en: Application space
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用空间
- en: 'This is the container for your application and provides a canvas for Vue to work
    in. All the Vue code will be placed within this tag. The actual tag can be any
    HTML element - main, section, and so on. The ID of the element needs to be unique,
    but again, can be anything you wish. This allows you to have multiple Vue instances
    on one page or identify which Vue instance relates to which Vue code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的应用程序容器，并为Vue提供了一个工作画布。所有的Vue代码都将放置在这个标签中。实际的标签可以是任何HTML元素-主要是main、section等。元素的ID需要是唯一的，但可以是任何您希望的。这允许您在一个页面上拥有多个Vue实例，或者确定哪个Vue实例与哪个Vue代码相关联：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: During the tutorials, this element with the ID will be referred to as the app
    space or view. It should be noted that all HTML and tags and code for your application
    should be placed within this container.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在教程中，将使用具有ID的此元素称为应用空间或视图。应注意，所有HTML、标签和代码都应放置在此容器中。
- en: Although you can use most HTML tags for your application space, you cannot initialize
    Vue on the `<body>` or `<HTML>` tags - if you do so, Vue will throw a JavaScript
    error and will fail to initialize. You will have to use an element inside your
    body.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以在应用程序空间中使用大多数HTML标签，但不能在`<body>`或`<HTML>`标签上初始化Vue - 如果这样做，Vue将抛出JavaScript错误并无法初始化。您必须在`body`内使用一个元素。
- en: Vue library
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue库
- en: 'For the examples in this book, we are going to be using a hosted version of
    Vue.js from a **CDN** (**Content Delivery Network**) unpkg. This ensures that
    we have the latest version of Vue in our application, and also means we do not
    need to create and host other JavaScript files. Unpkg is an independent site that
    hosts popular libraries. It enables you to quickly and easily add a JavaScript
    package to your HTML, without having to download and host the file yourself:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的示例中，我们将使用来自CDN（内容分发网络）unpkg的Vue.js的托管版本。这确保我们的应用程序中有最新版本的Vue，并且还意味着我们不需要创建和托管其他JavaScript文件。Unpkg是一个独立的托管流行库的网站。它使您能够快速轻松地将JavaScript包添加到您的HTML中，而无需下载和托管文件：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When deploying your code, it is a good practice to serve up your libraries from
    local files rather than relying on CDNs. This ensures that your implementation
    will work with the currently - saved version, should they release an update. It
    will also increase the speed of your application, as it will not need to request
    the file from another server.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署代码时，最好从本地文件提供库，而不是依赖于CDN。这样可以确保您的实现将与当前保存的版本一起工作，以防他们发布更新。它还会增加应用程序的速度，因为它不需要从另一个服务器请求文件。
- en: The `script` block following the library include is where we are going to be
    writing all our JavaScript for our Vue application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含库的`script`块中，我们将编写我们Vue应用程序的所有JavaScript代码。
- en: Initializing Vue and displaying the first message
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化Vue并显示第一条消息
- en: 'Now that we have a template set up, we can initialize Vue and bind it to the
    HTML app space by using the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了一个模板，我们可以使用以下代码初始化Vue并将其绑定到HTML应用空间：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code creates a new instance of Vue and mounts it on the HTML element with
    the ID of `app`. If you save your file and open it up in a browser, you will notice
    nothing has happened. However, under the hood, this one line of code has linked
    the `div` with the `app` variable, which is an instance of a Vue application.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码创建了Vue的一个新实例，并将其挂载在具有ID为`app`的HTML元素上。如果您保存文件并在浏览器中打开它，您会注意到没有发生任何事情。然而，在幕后，这一行代码将`div`与`app`变量链接在一起，`app`是Vue应用程序的一个实例。
- en: 'Vue itself has many objects and properties that we can now use to build our
    app. The first one you will encounter is the `el` property. Using an HTML ID,
    this property tells Vue which element it should bind to and where the app is going
    to be contained. This is the most common way of mounting your Vue instance and
    all Vue code should happen within this element:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Vue本身有许多对象和属性，我们现在可以使用它们来构建我们的应用程序。您将遇到的第一个是`el`属性。使用HTML的ID，此属性告诉Vue它应该绑定到哪个元素以及应用程序将被包含在哪里。这是挂载Vue实例的最常见方式，所有Vue代码都应该在此元素内进行：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When the `el` property isn''t specified in the instance, Vue initializes in
    an unmounted state—this allows any functions or methods you may have specified
    to run before mounting, to run and complete. You can then independently call the
    mounting function when ready. Behind the scenes, when using the `el` property,
    Vue is mounting the instance using a `$.mount` function. If you do want to wait,
    the `$mount` function can be called separately, for example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例中没有指定`el`属性时，Vue会初始化为未挂载状态，这允许在挂载之前运行和完成任何指定的函数或方法。然后，当准备好时，可以独立调用挂载函数。在使用`el`属性时，Vue在幕后使用`$.mount`函数来挂载实例。如果确实想要等待，可以单独调用`$mount`函数，例如：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: However, as we will not need to delay the execution of our mount timing throughout
    the book, we can use the `el` element with the Vue instance. Using the `el` property
    is also the most common way of mounting the Vue app.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于我们在整本书中不需要延迟执行挂载时机，所以可以使用`el`元素与Vue实例一起使用。使用`el`属性也是挂载Vue应用程序的最常见方式。
- en: 'Alongside the `el` value, Vue has a `data` object that contains any data we
    need to access the app or app space. Create a new data object within the Vue instance
    and assign a value to a property by doing the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`el`值之外，Vue还有一个包含我们需要访问应用程序或应用程序空间的任何数据的`data`对象。在Vue实例中创建一个新的数据对象，并通过以下方式为属性赋值：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Within the app space, we now have access to the `message` variable. To display
    data within the app, Vue uses the Mustache templating language to output data
    or variables. This is achieved by placing the variable name between double curly
    brackets `{{ variable }}`. Logic statements, such as `if` or `foreach`, get HTML
    attributes, which will be covered later in the chapter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序空间中，我们现在可以访问`message`变量。为了在应用程序中显示数据，Vue使用Mustache模板语言来输出数据或变量。通过将变量名放在双花括号`{{
    变量 }}`之间来实现。逻辑语句，如`if`或`foreach`，获取HTML属性，这将在本章后面进行介绍。
- en: 'Within the app space, add the code to output the string:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序空间中，添加代码来输出字符串：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the file, open it up in your browser, and you should be presented with
    your Hello! string.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，用浏览器打开，应该会显示出Hello!字符串。
- en: If you don't see any output, check the JavaScript console to see if there are
    any errors. Ensure the remote JavaScript file is loading correctly, as some browsers
    and operating systems require additional security steps before allowing some remote
    files to be loaded when viewing pages locally on your computer.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有看到任何输出，请检查JavaScript控制台是否有错误。确保远程JavaScript文件正确加载，因为某些浏览器和操作系统在本地计算机上查看页面时，需要额外的安全步骤才能允许加载某些远程文件。
- en: 'The `data` object can handle multiple keys and data types. Add some more values
    to the data object and see what happens - make sure you add a comma after each
    value. Data values are simple JavaScript and can handle basic math, too - try
    adding a new  `price` key and setting the value to `18 + 6` to see what happens.
    Alternatively, try adding a JavaScript array and printing it out:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`对象可以处理多个键和数据类型。向数据对象添加更多的值，看看会发生什么-确保在每个值后面添加逗号。数据值是简单的JavaScript，也可以处理基本的数学运算-尝试添加一个新的`price`键，并将值设置为`18
    + 6`，看看会发生什么。或者，尝试添加一个JavaScript数组并将其打印出来：'
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In your app space, you can now output each of those values - `{{ price }}` and
    `{{ details }}` now output data - although the list may not be quite what you
    had expected. We'll cover using and displaying lists in [Chapter 2](part0031.html#TI1E0-985bf4ae118d4f62b18ae64204cb251c), *Displaying,
    Looping, Searching, and Filtering Data*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序空间中，现在可以输出每个值-`{{ price }}`和`{{ details }}`现在输出数据-尽管列表可能不是您预期的样子。我们将在[第2章](part0031.html#TI1E0-985bf4ae118d4f62b18ae64204cb251c)中介绍如何使用和显示列表，*显示、循环、搜索和过滤数据*。
- en: All the data in Vue is reactive and can be updated by either the user or the
    application. This can be tested by opening up the browser's JavaScript console
    and updating the content yourself. Try typing `app.message = 'Goodbye!';` and
    pressing *Enter* - your app's content will update. This is because you are referencing
    the property directly - the first `app` refers to the `const app` variable that
    your app is initialized to in your JavaScript. The period denotes a property within
    there, and the `message` refers to the data key. You could also update `app.details`
    or `price` to anything you want!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Vue中的所有数据都是响应式的，可以由用户或应用程序更新。可以通过打开浏览器的JavaScript控制台并自己更新内容来测试。尝试输入`app.message
    = 'Goodbye!';`并按下*Enter*键-您的应用程序的内容将更新。这是因为您直接引用了属性-第一个`app`是指您在JavaScript中初始化应用程序的`const
    app`变量。句点表示其中的属性，而`message`表示数据键。您还可以将`app.details`或`price`更新为任何您想要的内容！
- en: Computed values
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算值
- en: The `data` object in Vue is great for storing and retrieving data directly,
    however, there may be times where you want to manipulate the data before outputting
    it in your applications. We can do that using the `computed` object in Vue. Using
    this technique, we are able to start adhering to the **MVVM** (**Model-View-ViewModel**)
    methodology.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Vue中的`data`对象非常适合直接存储和检索数据，但有时您可能希望在将数据输出到应用程序中之前对其进行操作。我们可以使用Vue中的`computed`对象来实现这一点。使用这种技术，我们能够开始遵循MVVM（模型-视图-视图模型）方法论。
- en: MVVM is a software architectural pattern where you separate out various parts
    of your application into distinct sections. The **Model** (or data) is your raw
    data input - be it from an API, database, or hardcoded data values. In the context
    of Vue, this is typically the `data` object we used earlier.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: MVVM是一种软件架构模式，将应用程序的各个部分分离成不同的部分。模型（或数据）是原始数据输入，可以来自API、数据库或硬编码的数据值。在Vue的上下文中，这通常是我们之前使用的`data`对象。
- en: The **view** is the frontend of your application. This should just be used for
    outputting the data from the Model, and should not contain any logic or data manipulation,
    with the exception of some unavoidable `if` statements. For the Vue applications,
    this is all the code placed within the `<div id="app"></div>` tags.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是应用程序的前端。它只用于从模型输出数据，不应包含任何逻辑或数据操作，除非有一些无法避免的`if`语句。对于Vue应用程序来说，这些代码都放在`<div
    id="app"></div>`标签中。
- en: The **ViewModel** is the bridge between the two. It allows you to manipulate
    the data from the Model before it is output by the view. Examples of this could
    range from changing a string to uppercase or prefixing a currency symbol, up to
    filtering out discounted products from a list or calculating the total value of
    a field across an array. In Vue, this is where the `computed` object comes in.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 视图模型是两者之间的桥梁。它允许您在视图输出之前操作模型中的数据。例如，将字符串转换为大写或添加货币符号前缀，或者从列表中过滤出折扣产品或计算数组中字段的总值等。在Vue中，这就是`computed`对象的作用。
- en: The computed object can have as many properties as required - however, they
    must be functions. These functions can utilize data already on the Vue instance
    and return a value, be it a string, number, or array that can then be used in
    the view.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 计算对象可以有任意多个属性，但它们必须是函数。这些函数可以利用Vue实例上已有的数据并返回一个值，无论是字符串、数字还是数组，都可以在视图中使用。
- en: 'The first step is to create a computed object within our Vue application. In
    this example, we are going to use a computed value to convert our string to lowercase,
    so set the value of `message` back to a string:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在Vue应用程序中创建一个计算对象。在这个例子中，我们将使用计算值将字符串转换为小写，所以将`message`的值设置为一个字符串：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Don't forget to add a comma (`,`) after the closing curly bracket (`}`) of your
    data object so Vue knows to expect a new object.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在数据对象的闭合大括号(`}`)之后添加逗号(`,`)，以便Vue知道要期望一个新对象。
- en: 'The next step is to create a function inside the computed object. One of the
    hardest parts of development is naming things - make sure the name of your function
    is descriptive. As our application is quite small and our manipulation basic,
    we''ll name it `messageToLower`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在计算对象内创建一个函数。开发中最困难的部分之一是给事物命名 - 确保函数的名称具有描述性。由于我们的应用程序非常小且操作基本，我们将把它命名为`messageToLower`：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding example, I've set it to return a hardcoded string, which is
    a lowercased version of the contents of the `message` variable. Computed functions
    can be used exactly as you would use a data key in the view. Update the view to
    output `{{ messageToLower }}` instead of `{{ message }}` and view the result in
    your browser.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我将其设置为返回一个硬编码的字符串，该字符串是`message`变量内容的小写版本。计算函数可以像在视图中使用数据键一样使用。将视图更新为输出`{{
    messageToLower }}`而不是`{{ message }}`，然后在浏览器中查看结果。
- en: There are a few issues with this code, however. Firstly, if the value of `messageToLower`
    was being hardcoded, we could have just added it to another data property. Secondly,
    if the value of `message` changes, the lowercase version will now be incorrect.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这段代码存在一些问题。首先，如果`messageToLower`的值是硬编码的，我们可以将其添加到另一个数据属性中。其次，如果`message`的值发生变化，小写版本将不再正确。
- en: 'Within the Vue instance, we are able to access both data values and computed
    values using the `this` variable - we''ll update the function to use the existing
    `message` value:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue实例中，我们可以使用`this`变量访问数据值和计算值 - 我们将更新函数以使用现有的`message`值：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `messageToLower` function now references the existing `message` variable
    and, using a native JavaScript function, converts the string to lower case. Try
    updating the `message` variable in your application, or in the JavaScript console, to
    see it update.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`messageToLower`函数现在引用现有的`message`变量，并使用原生JavaScript函数将字符串转换为小写。尝试在应用程序中或JavaScript控制台中更新`message`变量，以查看其更新。'
- en: 'Computed functions are not just limited to basic functionality - remember,
    they are designed to remove all logic and manipulations from the view. A more
    complex example might be the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 计算函数不仅限于基本功能 - 请记住，它们旨在从视图中删除所有逻辑和操作。一个更复杂的例子可能是以下内容：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Although this might seem advanced at first glance, the code is taking a fixed
    price and calculating what it would be with sales tax added. The `price`, `salesTax`,
    and `currency` symbol are all stored as values on the data object and accessed
    within the `cost()` computed function. The view outputs `{{ cost }}`, which produces
    the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然乍一看可能很高级，但该代码是将固定价格与添加了销售税后的价格进行计算。`price`、`salesTax`和`currency`符号都存储为数据对象上的值，并在`cost()`计算函数中访问。视图输出`{{
    cost }}`，产生以下结果：
- en: This item costs $29.00 ($25 excluding sales tax)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此商品价格为$29.00（不含销售税为$25）
- en: 'Computed functions will recalculate and update if any data is updated, by either
    the user or the application itself. This allows for our function to dynamically
    update based on the `price` and `salesTax` values. Try one of the following commands
    in the console in your browser:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果更新了任何数据，无论是用户还是应用程序本身，计算函数都会重新计算和更新。这使得我们的函数可以根据`price`和`salesTax`值动态更新。在浏览器的控制台中尝试以下命令之一：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The paragraph and prices will update instantly. This is because computed functions
    are reactive to the `data` object and the rest of the application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 段落和价格将立即更新。这是因为计算函数对`data`对象和应用程序的其余部分都是响应式的。
- en: Methods and reusable functions
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法和可重用函数
- en: Within your Vue application, you may wish to calculate or manipulate data in
    a consistent or repetitive way or run tasks that require no output to your view.For
    example, if you wanted to calculate the sales tax on every price or retrieve some
    data from an API before assigning it to some variables.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Vue应用程序中，您可能希望以一致或重复的方式计算或操作数据，或者运行不需要将输出传递给视图的任务。例如，如果您想要计算每个价格的销售税或从API检索一些数据，然后将其分配给某些变量。
- en: Rather than creating computed functions for each time, we need to do this, Vue
    allows you to create functions or methods. These get declared in your application
    and can be accessed from anywhere - similar to the `data` or `computed` functions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 与其为每次需要执行此操作时创建计算函数，Vue允许您创建函数或方法。这些在您的应用程序中声明，并且可以从任何地方访问 - 类似于`data`或`computed`函数。
- en: 'Add a method object to your Vue application and note the updates to the data
    object:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Vue应用程序中添加一个方法对象，并注意数据对象的更新：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Within the `data` object, the `price` key has been replaced with two prices
    - `shirtPrice` and `hatPrice`. We'll create a method to calculate the sales tax
    for each of these prices.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在`data`对象中，`price`键已被替换为两个价格 - `shirtPrice`和`hatPrice`。我们将创建一个方法来计算每个价格的销售税。
- en: 'Similar to creating a function for the computed object, create a method function
    title called `calculateSalesTax`. This function needs to accept a single parameter,
    which will be the `price`. Inside, we will use the code from the previous example
    to calculate the sales tax. Remember to replace `this.price` with just the parameter
    name: `price`, as shown here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于为计算对象创建函数，创建一个名为`calculateSalesTax`的方法函数。此函数需要接受一个参数，即`price`。在内部，我们将使用前面示例中的代码来计算销售税。请记住，将`this.price`替换为参数名`price`，如下所示：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Pressing save will not do anything to our application - we need to call the
    function. In your view, update the output to use the function and pass in the
    `shirtPrice` variable:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 保存不会对我们的应用程序产生任何影响 - 我们需要调用该函数。在您的视图中，更新输出以使用该函数并传入`shirtPrice`变量：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Save your documents and check the result in the browser - is it what you expected?
    The next task is to prepend the currency. We can do that by adding a second method
    that returns the parameter passed into the function with the currency at the beginning
    of the number:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 保存您的文档并在浏览器中检查结果 - 是否符合您的预期？下一个任务是在数字前面添加货币符号。我们可以通过添加第二个方法来实现这一点，该方法返回传入函数的参数，并在数字前面添加货币符号：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In our view, we then update our output to utilize both methods. Rather than
    assigning to a variable, we can pass the first function, `calculateSalesTax`,
    as the parameter for the second `addCurrency` function. This works because of
    the first method, `calculateSalesTax`, accepts the `shirtPrice` parameter and
    returns the new amount. Instead of saving this as a variable and passing the variable
    into the `addCurrency` method, we pass the result directly into this function,
    which is the calculated amount:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在我们的视图中更新输出以同时利用这两个方法。我们可以将第一个函数`calculateSalesTax`作为第二个`addCurrency`函数的参数传递，而不是赋值给一个变量。这是因为第一个方法`calculateSalesTax`接受`shirtPrice`参数并返回新的金额。我们不再将其保存为变量并将变量传递给`addCurrency`方法，而是直接将结果传递给此函数，即计算出的金额。
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'However, it would start to get tiresome having to write these two functions
    every time we needed to output the price. From here, we have two options:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每次需要输出价格时编写这两个函数会变得繁琐。从这里开始，我们有两个选择：
- en: We can create a third method, titled `cost()` - which accepts the price parameter
    and passes the input through the two functions
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以创建第三个方法，名为`cost()` - 它接受价格参数并将输入通过这两个函数传递
- en: Create a computed function, such as `shirtCost`, which uses `this.shirtPrice`
    instead of having a parameter passed in
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个计算函数，例如`shirtCost`，它使用`this.shirtPrice`而不是传入参数
- en: We could, alternatively, create a method titled `shirtCost` that does the same
    as our computed function; however, it's better to practice to use computed in
    this case.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以创建一个名为`shirtCost`的方法，它与我们的计算函数相同；然而，在这种情况下最好练习使用计算函数。
- en: This is because `computed` functions are cached, whereas `method` functions
    are not. If you imagine our methods being a lot more complicated than they currently
    are, calling function after function repeatedly (for example, if we wanted to
    display the price in several locations) could have a performance impact. With
    computed functions, as long as the data does not change, you can call it as many
    times as you want, with the result being cached by the application. If the data
    does change, it only needs to recalculate once, and re-cache that result.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为`computed`函数是被缓存的，而`method`函数不是。如果想象一下我们的方法比目前复杂得多，反复调用函数（例如，如果我们想在多个位置显示价格）可能会对性能产生影响。使用计算函数，只要数据不变，您可以随意调用它，应用程序会将结果缓存。如果数据发生变化，它只需要重新计算一次，并重新缓存该结果。
- en: 'Make a computed function for both the `shirtPrice` and `hatPrice`, so that
    both variables can be used in the view. Don''t forget that to call the functions
    internally you must use the `this` variable - for example, `this.addCurrency()`.
    Use the following HTML code as the template for your view:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为`shirtPrice`和`hatPrice`创建计算函数，以便两个变量都可以在视图中使用。不要忘记在内部调用函数时必须使用`this`变量 - 例如，`this.addCurrency()`。使用以下HTML代码作为视图的模板：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Have a go at creating the computed functions yourself before comparing against
    the following code. Don''t forget that there are many ways to do things in development,
    so don''t worry if your code works but doesn''t match the following example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在与以下代码进行比较之前，请尝试自己创建计算函数。不要忘记在开发中有很多方法可以做事情，所以如果你的代码能够工作但与以下示例不匹配，不要担心：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result, although basic, should look like the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管基本，但结果应该如下所示：
- en: '![](img/00005.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to get started with the Vue JavaScript framework.
    We examined the `data`, `computed`, and `methods` objects within the Vue instance.
    We covered how to use each one within the framework and utilize each of its advantages.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何开始使用Vue JavaScript框架。我们检查了Vue实例中的`data`、`computed`和`methods`对象。我们介绍了如何在框架中使用每个对象并利用它们的优势。
