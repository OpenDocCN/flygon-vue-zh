- en: Testing in Vue CLI 3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Vue CLI 3中进行测试
- en: 'In the previous chapter, we examined the role of Babel in modern JavaScript
    development. We''ve also seen some practical examples of using it in Vue. In this
    chapter, we will introduce testing in JS. We will get acquainted with testing
    in general and see it in practice using Jest and Cypress. We''ll discuss assertions
    and **test-driven development** (**TDD**). We''ll then move on to understanding
    how Jest and Cypress work with Vue CLI 3\. We''ll discuss test utils and test
    cases. Specifically, we''ll look at the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们研究了Babel在现代JavaScript开发中的作用。我们还看到了在Vue中使用它的一些实际例子。在本章中，我们将介绍JS中的测试。我们将了解测试的一般情况，并使用Jest和Cypress进行实践。我们将讨论断言和**测试驱动开发**（**TDD**）。然后，我们将继续了解Jest和Cypress如何与Vue
    CLI 3一起工作。我们将讨论测试工具和测试用例。具体来说，我们将看以下内容：
- en: Understanding Vue plugins
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Vue插件
- en: Adding the Jest plugin to our Vue app
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Jest插件添加到我们的Vue应用程序
- en: Writing unit tests inside a Vue app with Jest
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Vue应用程序中使用Jest编写单元测试
- en: Running tasks from the project tasks page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从项目任务页面运行任务
- en: Running unit tests inside the Vue CLI UI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Vue CLI UI中运行单元测试
- en: Working with assertions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用断言
- en: Implementing TDD
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施TDD
- en: Working with Cypress
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cypress
- en: We'll begin this chapter with a brief overview of Vue plugins.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从对Vue插件的简要概述开始本章。
- en: Understanding Vue plugins
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Vue插件
- en: When making a new Vue app with the help of the Vue CLI from the command line,
    we use the `vue create` command. We are then taken through a number of steps and
    prompts that we need to choose, so that our app is properly configured. What we
    are actually doing, among other things, is choosing which Vue plugins will end
    up being used in our app.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue CLI从命令行创建新的Vue应用程序时，我们使用`vue create`命令。然后，我们需要选择一些步骤和提示，以便正确配置我们的应用程序。实际上，我们正在选择我们的应用程序将使用哪些Vue插件，而其他事情。
- en: Plugins are a way to add functionality to our Vue projects. Some plugins are
    more complex than others; they sometimes have their own prompts that appear during
    installation. Our Vue app's configurations, that is, the underlying code, will
    reflect our choices. The way our app is set up will be based on the answers we
    provide to these installation prompts.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是向我们的Vue项目添加功能的一种方式。有些插件比其他插件更复杂；它们有时在安装过程中会出现自己的提示。我们的Vue应用程序的配置，即底层代码，将反映我们的选择。我们的应用程序的设置方式将基于我们对这些安装提示的回答。
- en: All the official `npm` packages of a project are scoped with the `@` symbol,
    followed by the project name. Thus, official Vue plugins, built by the Vue maintainers,
    begin with `@vue`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的所有官方`npm`包都使用`@`符号进行范围限定，后面跟着项目名称。因此，由Vue维护者构建的官方Vue插件以`@vue`开头。
- en: To find out more about scoped `npm` packages, visit: [https://docs.npmjs.com/about-scopes.](https://docs.npmjs.com/about-scopes)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关范围限定`npm`包的更多信息，请访问：[https://docs.npmjs.com/about-scopes.](https://docs.npmjs.com/about-scopes)
- en: To add a plugin from the command line, we use the `vue add` command, but we
    can use the Vue UI as well, as we'll see in this chapter. The Vue UI is also a
    great way to search for Vue plugins, which we'll also examine in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行添加插件，我们使用`vue add`命令，但我们也可以使用Vue UI，正如我们将在本章中看到的那样。Vue UI也是搜索Vue插件的好方法，我们也将在本章中进行研究。
- en: Beginning testing on a brand new Vue app
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在全新的Vue应用程序上开始测试
- en: We've seen many different options available in the Vue CLI and UI in previous
    chapters. We'll begin this chapter by utilizing the best approach to start a new
    app, the Vue CLI UI. This will help us learn about some other features of the
    UI. Along the way, we'll also slowly introduce testing to our project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经看到了Vue CLI和UI中许多不同的选项。我们将通过使用最佳方法来开始一个新应用程序，即Vue CLI UI，来开始本章。这将帮助我们了解UI的一些其他功能。在此过程中，我们还将慢慢向我们的项目引入测试。
- en: Adding a new project with Vue CLI UI
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue CLI UI添加新项目
- en: 'Let us now add a new project with Vue CLI UI:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用Vue CLI UI添加新项目：
- en: To begin, let's open Git Bash and navigate to the root folder for all of our
    projects, `vue-cli-3-qsg`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们打开Git Bash并导航到所有项目的根文件夹`vue-cli-3-qsg`。
- en: 'Now we''ll run the Vue CLI UI command as follows:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将运行Vue CLI UI命令如下：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will result in a new page being served in the browser. The default address
    is `http://localhost:8000/dashboard`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致浏览器中提供新页面。默认地址为`http://localhost:8000/dashboard`。
- en: Next, click on the home icon (or simply type out this URL in the address bar: `http://localhost:8000/project/select`),
    which will take you to the Vue Project Manager screen.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，单击主页图标（或者在地址栏中键入此URL：`http://localhost:8000/project/select`），这将带您到Vue项目管理器屏幕。
- en: 'Note from the following that the home icon is the leftmost icon in the footer
    of the Vue CLI UI:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，主页图标是Vue CLI UI页脚中最左边的图标：
- en: '![](assets/d066d2d2-1d87-47c5-b479-ab4fdbc8733d.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d066d2d2-1d87-47c5-b479-ab4fdbc8733d.png)'
- en: 'Figure 4.1: The home icon in the Vue CLI UI'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1：Vue CLI UI中的主页图标
- en: 'Regardless of how you access the Vue Project Manager screen, it will show a
    list of available apps, together with three tabs at the top: *Projects*, *Create*,
    and *Import*. Click on the Create tab to create a new project.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无论您如何访问Vue项目管理器屏幕，它都会显示可用应用程序的列表，以及顶部的三个选项卡：*项目*，*创建*和*导入*。单击“创建”选项卡以创建新项目。
- en: 'Once you''ve clicked on the Create tab, you need to get back to the root of
    your project, and then click on the Create a new project here button as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建”选项卡后，您需要返回到项目的根目录，然后单击“在此处创建新项目”按钮如下：
- en: '![](assets/f50337fd-3de7-414c-8e66-f6dfbf260fc8.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f50337fd-3de7-414c-8e66-f6dfbf260fc8.png)'
- en: 'Figure 4.2: Create, get to root of all projects, Create a new project here
    button'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2：创建，返回所有项目的根目录，点击“在此处创建新项目”按钮
- en: 'Once you click the Create a new project here button, you''ll see the Create
    a new project screen. We will only type our new app''s folder name. We''ll call
    it `testing-debugging-vuecli3`. We will not change anything else: we''ll accept
    the default package manager and other default options as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦单击“在此处创建新项目”按钮，您将看到“创建新项目”屏幕。我们只会输入我们新应用程序的文件夹名称。我们将其称为`testing-debugging-vuecli3`。我们不会更改任何其他内容：我们将接受默认的软件包管理器和其他默认选项如下：
- en: '![](assets/e3d7bf4e-ac4d-4f63-993d-57ce8e52c478.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e3d7bf4e-ac4d-4f63-993d-57ce8e52c478.png)'
- en: 'Figure 4.3: Adding the name for the folder that will hold our new app'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3：添加将容纳我们新应用程序的文件夹的名称
- en: We've completed all the necessary changes in the Details tab.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在“详细信息”选项卡中完成了所有必要的更改。
- en: 'By clicking the Next button, we''ll be taken to the Presets screen. There,
    we can just accept the Default preset (babel, eslint) as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”按钮，我们将进入预设屏幕。在那里，我们可以接受默认预设（babel，eslint）如下：
- en: '![](assets/3f893d8b-40a4-48d6-a106-e6516ad9c3c7.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3f893d8b-40a4-48d6-a106-e6516ad9c3c7.png)'
- en: 'Figure 4.4: Accepting the default presets'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4：接受默认预设
- en: Next, we'll click Create Project to scaffold our project. It will take some
    time for the Vue CLI UI to complete the project scaffolding. Once done, we'll
    be greeted with the Welcome to your new project! screen.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将单击“创建项目”以搭建我们的项目。Vue CLI UI完成项目搭建需要一些时间。完成后，我们将看到“欢迎来到您的新项目！”屏幕。
- en: Adding the Jest plugin to our Vue app
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的Vue应用程序添加Jest插件
- en: 'Now let us add our Jest plugin:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加我们的Jest插件：
- en: Click on the Plugins icon (marked with number 1 in the following screenshot).
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击插件图标（以下截图中标有数字1）。
- en: 'Once the Project plugins screen appears, click on the Add Plugin button (2
    in the following screenshot):'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦项目插件屏幕出现，点击“添加插件”按钮（以下截图中的2）：
- en: '![](assets/3e2f0239-9789-4a2b-a913-9d2b1e852732.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3e2f0239-9789-4a2b-a913-9d2b1e852732.png)'
- en: 'Figure 4.5: Adding a new plugin to our installation'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5：向我们的安装添加新插件
- en: 'Doing this will take us to the Add a plugin screen, where we have an input
    field to search for plugins. We need to locate a unit testing plugin, so we can
    just type out `cli-plugin-unit` as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带我们到“添加插件”屏幕，在那里我们有一个输入字段来搜索插件。我们需要找到一个单元测试插件，所以我们可以输入`cli-plugin-unit`如下：
- en: '![](assets/e2c3fc8e-4a03-426c-a3d6-6a4149a1c21f.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e2c3fc8e-4a03-426c-a3d6-6a4149a1c21f.png)'
- en: 'Figure 4.6: Finding unit testing plugins for Vue'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6：查找Vue的单元测试插件
- en: Typing out this search term will show all the available unit testing plugins.
    Jest should be right there on top. You can see it in the previous screenshot,
    flagged as 2. In the description under the plugin name, you can see that it's
    an Official plugin. Similar to what we've already seen with the `@vue/cli-plugin-babel`,
    you can click the More info link to see the corresponding GitHub repository for
    the plugin in question (flagged as 3 in the preceding screenshot). Doing this
    will take you to the vue-cli GitHub page.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入此搜索词将显示所有可用的单元测试插件。Jest应该就在顶部。您可以在上一张截图中看到它，标记为2。在插件名称下的描述中，您可以看到它是一个官方插件。与我们已经看到的`@vue/cli-plugin-babel`类似，您可以单击“更多信息”链接以查看有关所讨论插件的相应GitHub存储库（在上述截图中标记为3）。这样做将带您到vue-cli
    GitHub页面。
- en: You can find out more about `@vue/cli-plugin-unit-jest` at the `npm` package
    page, at the following URL: [https://www.npmjs.com/package/@vue/cli-plugin-unit-jest.](https://www.npmjs.com/package/@vue/cli-plugin-unit-jest)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下URL的`npm`包页面上找到有关`@vue/cli-plugin-unit-jest`的更多信息：[https://www.npmjs.com/package/@vue/cli-plugin-unit-jest.](https://www.npmjs.com/package/@vue/cli-plugin-unit-jest)
- en: 'To install the Jest plugin, simply click on it in the plugins list. Doing this
    will add a checkbox in a green circle next to the Jest plugin (flagged as 1 in
    the following screenshot). A new install button will also appear (box number 2
    in the following screenshot):'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装Jest插件，只需在插件列表中单击它。这将在Jest插件旁边的绿色圆圈中添加一个复选框（在下一张截图中标记为1）。还将出现一个新的安装按钮（在下一张截图中的框2）：
- en: '![](assets/368f8688-3b3a-4c26-b205-e6b72c0b1597.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/368f8688-3b3a-4c26-b205-e6b72c0b1597.png)'
- en: 'Figure 4.7: Adding the Jest plugin'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7：添加Jest插件
- en: Clicking the Install @vue/cli-plugin-unit-jest button will result in a loader
    appearing on the page, with the following message being shown: Installing @vue/cli-plugin-unit-jest....
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“安装@vue/cli-plugin-unit-jest”按钮将导致页面上出现加载器，并显示以下消息：安装@vue/cli-plugin-unit-jest....
- en: 'Once done, just click the Finish installation button as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，只需单击“完成安装”按钮，如下所示：
- en: '![](assets/126f5dc8-06e3-4d38-9c8a-8de33ee9ef8e.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/126f5dc8-06e3-4d38-9c8a-8de33ee9ef8e.png)'
- en: 'Figure 4.8: Finishing the installation of the Jest plugin'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8：完成Jest插件的安装
- en: 'Clicking the Finish installation button will show the following message on
    the screen: Invoking @vue/cli-plugin-unit-jest....'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“完成安装”按钮将在屏幕上显示以下消息：调用@vue/cli-plugin-unit-jest....
- en: 'Once this update is finished, we''ll be greeted with another screen as follows,
    showing the changes to files, and asking us to commit the updates made:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新完成后，我们将看到另一个屏幕，显示文件的更改，并要求我们提交所做的更新：
- en: '![](assets/585749c2-edc5-4796-adb5-4a2e44f640c9.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/585749c2-edc5-4796-adb5-4a2e44f640c9.png)'
- en: 'Figure 4.9: Vue CLI UI showing changes after the installation of the Jest plugin'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9：Vue CLI UI在安装Jest插件后显示更改
- en: Examining the updates
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查更新
- en: In the preceding screenshot, we can see that the Files changed tab is active.
    Inside the Files changed tab, we can see the number of files changed (box 1).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们可以看到“更改的文件”选项卡是活动的。在“更改的文件”选项卡中，我们可以看到更改的文件数量（框1）。
- en: When we were building our project with the Vue CLI UI, we were offered the default
    option to track changes to our project with Git, and we accepted this default
    setting; that's why we now see the Commit changes button (flagged as 2 in the
    preceding screenshot).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Vue CLI UI构建项目时，我们被默认选项要求使用Git跟踪项目的更改，我们接受了这个默认设置；这就是为什么我们现在看到在上一个截图中标记为2的提交更改按钮。
- en: 'We can also see all the changes and updates made to the two existing files: `package-lock.json` and  `package.json`,
    as well as the contents of the three new files added when we installed the plugin:
    `jest.config.js`, `tests/unit/.eslintrc.js`, and `tests/unit/example.spec.js`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到对两个现有文件`package-lock.json`和`package.json`所做的所有更改和更新，以及在安装插件时添加的三个新文件的内容：`jest.config.js`，`tests/unit/.eslintrc.js`和`tests/unit/example.spec.js`。
- en: 'It would be beneficial to inspect the contents of each of these files to get
    more familiar with how they are set up and what changes have been made to them.
    One of the most important changes that we need to be aware of is in the `package.json`
    file, inside the `scripts` key, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 检查每个文件的内容将是有益的，以便更熟悉它们的设置以及对它们进行了哪些更改。我们需要注意的最重要的更改之一是在`package.json`文件中的`scripts`键中，如下所示：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous line shows that our `vue-cli-service` just got a new command, `test:unit`,
    specifically set up for unit testing with Jest.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行显示我们的`vue-cli-service`刚刚得到了一个新命令，`test:unit`，专门用于使用Jest进行单元测试。
- en: Once we click the Commit changes button, we'll see a dialog that invites us
    to Enter a commit message. We can type a simple message, such as `Add Jest plugin`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击提交更改按钮，我们将看到一个对话框，邀请我们输入提交消息。我们可以输入一个简单的消息，比如`添加Jest插件`。
- en: 'After we''ve added the commit, we''ll be taken back to the Installed plugins
    screen. Now we can see that `@vue/cli-plugin-unit-jest` is also added:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们添加了提交之后，我们将被带回到已安装插件的屏幕。现在我们可以看到`@vue/cli-plugin-unit-jest`也已添加：
- en: '![](assets/963f0ed0-fd7e-4e6e-84e7-07617b09ec13.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/963f0ed0-fd7e-4e6e-84e7-07617b09ec13.png)'
- en: 'Figure 4.10: Vue CLI UI showing changes after the installation of the Jest
    plugin'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10：Vue CLI UI在安装Jest插件后显示的更改
- en: In the next section, we'll be adding our app so that we can begin testing it
    with Jest.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将添加我们的应用程序，以便我们可以开始使用Jest进行测试。
- en: Adding the code for our Vue application
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加我们的Vue应用程序的代码
- en: 'To add our app, we need to do the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加我们的应用程序，我们需要执行以下操作：
- en: Navigate in Windows Explorer to the `testing-debugging-vuecli3` folder.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows资源管理器中导航到`testing-debugging-vuecli3`文件夹。
- en: Next, right-click on an empty space inside the folder, and click the Git Bash
    here command.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在文件夹内的空白处右键单击，然后单击Git Bash here命令。
- en: Once Git Bash is open, type `code .` and press the *Enter* key. This will open
    our `testing-debugging-vuecli3` project in VS Code.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Git Bash打开，输入`code .`并按下*Enter*键。这将在VS Code中打开我们的`testing-debugging-vuecli3`项目。
- en: Our focus at this point is on Jest. To avoid unnecessary complications, we'll
    simply copy and paste the entire `add-one-counter` app from the previous chapter.
    The easiest way to do that is to point Windows Explorer to the `add-one-counter`
    app and start another instance of Git Bash with a right-click inside the folder,
    as already explained. We'll again type out the `code .` command inside Git Bash,
    and another instance of VS Code will open, this time showing the files inside
    the `add-one-counter` app. Now it's just a matter of copying and pasting all the
    files and folders from `add-one-counter` to `testing-debugging-vuecli3`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前的重点是Jest。为了避免不必要的复杂性，我们将简单地复制并粘贴上一章中的整个“add-one-counter”应用程序。最简单的方法是将Windows资源管理器指向“add-one-counter”应用程序，并在文件夹内右键单击启动另一个Git
    Bash实例，如前所述。我们将再次在Git Bash中输入“code .”命令，另一个VS Code实例将打开，这次显示“add-one-counter”应用程序内的文件。现在只需要将所有文件和文件夹从“add-one-counter”复制并粘贴到“testing-debugging-vuecli3”中。
- en: Alternatively, you could use Linux commands inside Git Bash to copy the relevant
    files.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以在Git Bash中使用Linux命令来复制相关文件。
- en: 'Regardless of how you do it, the updated project structure will now look as
    follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您如何操作，更新后的项目结构现在将如下所示：
- en: '![](assets/a4a82f25-9ba3-4340-82b4-3b4c35180c74.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a4a82f25-9ba3-4340-82b4-3b4c35180c74.png)'
- en: 'Figure 4.11: The updated project structure of testing-debugging-vuecli3'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11：testing-debugging-vuecli3的更新项目结构
- en: Now, we are ready to start our first unit test with Jest.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备使用Jest开始我们的第一个单元测试。
- en: Writing our first unit test inside a Vue app with Jest
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jest在Vue应用程序中编写我们的第一个单元测试
- en: Inside the `tests` folder, there is another folder called `unit`. Let's add
    a new file to the `unit` folder. We'll call this new file `AnotherComponent.spec.js`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在“tests”文件夹中，还有一个名为“unit”的文件夹。让我们向“unit”文件夹添加一个新文件。我们将这个新文件命名为“AnotherComponent.spec.js”。
- en: Any file that has a `spec.js` extension will be recognized by Jest.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 任何具有“spec.js”扩展名的文件都将被Jest识别。
- en: 'To describe a test, we use the `describe` function, so let''s add it to `AnotherComponent.spec.js` as
    follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了描述一个测试，我们使用“describe”函数，因此让我们将其添加到“AnotherComponent.spec.js”中，如下所示：
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `describe` function takes two arguments. The first argument is the name
    of the Vue component we are testing, and the second argument is an anonymous function
    as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: “describe”函数接受两个参数。第一个参数是我们正在测试的Vue组件的名称，第二个参数是一个匿名函数，如下所示：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can rewrite the preceding code using an arrow function as our second argument as
    follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用箭头函数作为第二个参数来重写前面的代码，如下所示：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the body of the anonymous function, we call another function, the `test`
    function as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在匿名函数的主体中，我们调用另一个函数，“test”函数，如下所示：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `test` function accepts two arguments: the first argument is the name of
    our test, and the second argument is another anonymous arrow function as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: “test”函数接受两个参数：第一个参数是我们的测试名称，第二个参数是另一个匿名箭头函数，如下所示：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We are specifying a test we''ve called `setup working` , and we need to give
    it an assertion inside the second argument, that is, inside the body of the anonymous
    function, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在指定一个名为“setup working”的测试，并且我们需要在第二个参数内给出一个断言，也就是在匿名函数的主体内，如下所示：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This assertion will always be true, and so we give it the following code: `expect(true).toBeTrue()`.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个断言将始终为真，因此我们给出以下代码：“expect(true).toBeTrue()”。
- en: We have just seen an example of a Jest matcher in action. A matcher is a way
    to test values in Jest. One way to check if something is true is to use the `toBeTrue`
    matcher. There are many other Jest matchers. For more information, check out the
    official Jest documentation at the following URL: [https://jestjs.io/docs/en/using-matchers.](https://jestjs.io/docs/en/using-matchers)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了Jest匹配器的一个示例。匹配器是在Jest中测试值的一种方式。检查某些东西是否为真的一种方式是使用`toBeTrue`匹配器。还有许多其他Jest匹配器。有关更多信息，请查看以下URL的官方Jest文档：[https://jestjs.io/docs/en/using-matchers.](https://jestjs.io/docs/en/using-matchers)
- en: Now, let's go to the Vue CLI UI, and run our unit test.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到Vue CLI UI，并运行我们的单元测试。
- en: Running our first unit test inside the Vue CLI UI
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Vue CLI UI中运行我们的第一个单元测试
- en: 'To run our unit test inside the Vue CLI UI, we need to navigate to the `localhost:8080/tests`
    page, either by visiting the URL right from the address bar, or by clicking the
    lowest icon on the main navigation (the Tests icon in the leftmost column in the
    Vue CLI UI dashboard). Once we do, we''ll see the following list of tests:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Vue CLI UI中运行我们的单元测试，我们需要导航到`localhost:8080/tests`页面，可以直接从地址栏访问该URL，也可以通过单击Vue
    CLI UI仪表板中最左侧列中的最低图标（Vue CLI UI仪表板中的Tests图标）来导航到该页面。一旦我们这样做，我们将看到以下测试列表：
- en: '![](assets/8606c869-2f64-41d4-a36f-e97e81302adf.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8606c869-2f64-41d4-a36f-e97e81302adf.png)'
- en: 'Figure 4.12: Viewing the available tasks inside Vue CLI UI'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12：查看Vue CLI UI中可用的任务
- en: 'Next, let''s get ready to run the `test:unit` task by clicking on it. Doing
    so will result in a panel appearing on the right-hand side of the Project tasks
    page as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们准备点击`test:unit`任务来运行。这样做将导致在项目任务页面的右侧出现一个面板，如下所示：
- en: '![](assets/75190c61-419f-4020-9037-b4bcf0fedffd.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/75190c61-419f-4020-9037-b4bcf0fedffd.png)'
- en: 'Figure 4.13: The run tasks panel for running the test:unit command'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.13：运行test:unit命令的运行任务面板
- en: This Run task panel gives us a nice overview of everything that is happening.
    Let's now run our test by clicking the Run task button.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个运行任务面板给了我们一个很好的概览。现在让我们通过单击运行任务按钮来运行我们的测试。
- en: 'The following information will be shown in the Output section:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下信息将显示在输出部分：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As we can see, our `AnotherComponent.spec.js` test passed successfully. The
    test that failed and whose output is logged before the `AnotherComponent.spec.js`
    test, is the test for the `HelloWorld.vue` component. We have removed this `HelloWorld.vue`
    file from our default app after the app was built by Vue UI.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们的`AnotherComponent.spec.js`测试已经成功通过。在`AnotherComponent.spec.js`测试之前，有一个测试失败并记录输出的测试，那就是`HelloWorld.vue`组件的测试。我们在Vue
    UI构建应用程序后，已经将`HelloWorld.vue`文件从默认应用程序中移除了。
- en: 'However, the `example.spec.js` file inside the `./tests/unit` folder is the
    `test` file that calls the non-existing `HelloWorld.vue` file. Looking at `example.spec.js`,
    we can see that it imports the `HelloWorld.vue` component, on line number 2 as
    follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`./tests/unit`文件夹中的`example.spec.js`文件是调用不存在的`HelloWorld.vue`文件的`test`文件。查看`example.spec.js`，我们可以看到它在第2行导入了`HelloWorld.vue`组件，如下所示：
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Why is this the case? Haven't we already specified `AnotherComponent.vue` inside
    the `describe` function?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会这样呢？难道我们不是已经在`describe`函数中指定了`AnotherComponent.vue`吗？
- en: 'As it turns out, we could have specified any name as the first argument of
    the describe function inside our unit test. For example, we could update our `AnotherComponent.spec.js`
    file to this code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，我们可以在我们的单元测试中的describe函数的第一个参数中指定任何名称。例如，我们可以将我们的`AnotherComponent.spec.js`文件更新为以下代码：
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If we ran our test again, it would still run.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次运行我们的测试，它仍然会运行。
- en: What this means is that the string `AnotherComponent.vue` is what we developers
    pass in as the first argument to our `describe` function so that it is easier
    for us to work in our project. Jest doesn't care what name it has.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着字符串`AnotherComponent.vue`是我们开发者作为第一个参数传递给我们的`describe`函数的，这样我们在项目中更容易工作。Jest不在乎它的名字是什么。
- en: 'What it does care about, however, is importing the file to be tested. As we
    saw in the `HelloWorld.vue` import, we need to add a similar import to our `AnotherComponent.spec.js`
    file, so that now it looks as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它在乎的是导入要测试的文件。正如我们在`HelloWorld.vue`导入中看到的，我们需要在我们的`AnotherComponent.spec.js`文件中添加一个类似的导入，这样现在它看起来如下：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Interestingly, we are importing a Vue file, but our tests are still passing,
    even though the `.vue` extension is not JS. How is this achieved?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们导入了一个Vue文件，但我们的测试仍然通过，即使`.vue`扩展名不是JS。这是如何实现的？
- en: 'We can easily see what is going on if we open the `jest.config.js` file, located
    at the root of our project. Looking at the first 12 lines of this file, we see
    the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开位于项目根目录的`jest.config.js`文件，我们可以很容易地看到发生了什么。查看这个文件的前12行，我们会看到以下代码：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see, the `vue` extension is listed on line 6, and the `.vue` file
    extension will be transformed using the `vue-jest` plugin, as specified on line
    9.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`vue`扩展名在第6行上列出，`.vue`文件扩展名将使用`vue-jest`插件进行转换，如第9行所指定的。
- en: Before we continue, let's rename our `example.spec.js` file to `example.js`,
    so that Jest doesn't catch it. We still need the contents of the file, so let's
    not delete it, but rather just rename it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们将我们的`example.spec.js`文件重命名为`example.js`，这样Jest就不会捕捉到它。我们仍然需要文件的内容，所以让我们不要删除它，而是只是重命名它。
- en: Importing mount from test-utils and writing another unit test
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从test-utils导入mount并编写另一个单元测试
- en: 'We''ll begin by adding a  `mount` import from `@vue/test-utils` in the very
    first line our `AnotherComponent.spec.js` file as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`@vue/test-utils`中的`mount`导入开始，放在我们的`AnotherComponent.spec.js`文件的第一行，如下所示：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Before we continue, we need to look at what this syntax does. Why the curly
    brackets around `mount`?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要看一下这个语法的作用。为什么在`mount`周围有花括号？
- en: To answer this question, it's good to know that this is accepted JS syntax.
    To explain what is happening, we need to begin with the `package.json` file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要回答这个问题，了解这是被接受的JS语法是很重要的。为了解释发生了什么，我们需要从`package.json`文件开始。
- en: This file was created by our Vue CLI, when we built our project. If we look
    at the contents of the `package.json` file, we'll see `@vue/test-utils` listed
    as one of our project's `devDependencies`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是由我们的Vue CLI在构建项目时创建的。如果我们查看`package.json`文件的内容，我们会看到`@vue/test-utils`被列为我们项目的`devDependencies`之一。
- en: In the preceding code, we are importing a single function, `mount`, from this
    `@vue/test-utils` JS module. By doing this, we are inserting the `mount` function
    into our `AnotherComponent.spec.js` file's scope.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们从`@vue/test-utils` JS模块中导入了一个单一函数`mount`。通过这样做，我们将`mount`函数插入到我们的`AnotherComponent.spec.js`文件的作用域中。
- en: In simpler terms, we are importing the `mount` functionality from `@vue/test-utils`,
    so that we can use it in the `AnotherComponent.spec.js` file, and only test this
    component alone.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，我们从`@vue/test-utils`导入`mount`功能，这样我们就可以在`AnotherComponent.spec.js`文件中使用它，并且只测试这个组件。
- en: With the Vue CLI UI running in our browser, let's look at a list of our project's
    dependencies by visiting the following URL: `http://localhost:8000/dependencies`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的浏览器中运行Vue CLI UI，让我们通过访问以下URL来查看我们项目的依赖列表：`http://localhost:8000/dependencies`。
- en: 'You should see a screen similar to the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似以下截图的屏幕：
- en: '![](assets/8abc325a-aef6-4f62-9908-666c2197b2a1.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8abc325a-aef6-4f62-9908-666c2197b2a1.png)'
- en: 'Figure 4.14: Our project''s devDependencies listed in the Vue CLI UI dashboard'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.14：Vue CLI UI仪表板中列出的项目的devDependencies
- en: As usual, clicking the More info link for our `@vue/test-utils` project dependency
    will take us to the corresponding GitHub repository for the project: [https://github.com/vuejs/vue-test-utils#readme.](https://github.com/vuejs/vue-test-utils#readme)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，点击`@vue/test-utils`项目依赖项的“更多信息”链接将带我们到该项目对应的GitHub存储库：[https://github.com/vuejs/vue-test-utils#readme.](https://github.com/vuejs/vue-test-utils#readme)
- en: Mounting the component to be tested
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挂载要测试的组件
- en: 'We begin by importing the `mount` method and the component to be tested as
    follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入`mount`方法和要测试的组件，如下所示：
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `mount` function receives a component as its argument. The result of the
    call to the `mount` function is a wrapper with an instance of the component we
    gave it. This wrapper also comes with additional functions that help our testing
    process. Let''s first assign the returned value of the call to `mount(AnotherComponent)`
    to a variable as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`mount`函数接收一个组件作为其参数。调用`mount`函数的结果是一个包装器，其中包含我们给定的组件的实例。这个包装器还带有帮助我们测试过程的附加函数。让我们首先将调用`mount(AnotherComponent)`的返回值分配给一个变量，如下所示：'
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Writing a failing assertion
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个失败的断言
- en: 'When our app is initially loaded into a browser, we are expecting the current
    value of the counter to be `0`. However, since we want our assertion to initially
    fail, let''s assert that the value of the counter is going to be `1` instead of
    `0` as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用程序最初加载到浏览器中时，我们期望计数器的当前值为`0`。然而，由于我们希望我们的断言最初失败，让我们断言计数器的值将是`1`而不是`0`，如下所示：
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We have written a failing assertion in the preceding code. We claim that we
    are expecting that our wrapped component will contain the following text:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们已经编写了一个失败的断言。我们声称我们期望我们的包装组件将包含以下文本：
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The initial value of our counter is not going to be `1`; it will actually be
    `0`, thus the preceding assertion should fail.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的计数器的初始值不会是`1`；实际上将是`0`，因此前面的断言应该失败。
- en: So, let's save and run our unit test by going to the Project tasks screen and
    running the test as described earlier in the chapter.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们保存并运行我们的单元测试，方法是转到项目任务屏幕，并按照本章前面描述的方式运行测试。
- en: 'The output will be shown in the Output panel of Run task inside Project tasks
    as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示在项目任务中的Run task的输出面板中，如下所示：
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next, we'll fix the preceding test by writing a passing assertion.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过编写一个通过的断言来修复前面的测试。
- en: Writing a passing assertion
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个通过的断言
- en: 'To write a passing assertion, all we need to do is revert our `1` to a `0,` as
    follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写一个通过的断言，我们只需要将我们的`1`恢复为`0`，如下所示：
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, let''s run our task again inside the Vue UI, and we''ll get back the
    following output:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在Vue UI中再次运行我们的任务，然后我们将得到以下输出：
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Next, we'll trigger a button click in our test.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们的测试中触发一个按钮点击。
- en: Triggering a button click in our test
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的测试中触发按钮点击
- en: 'How can we test for a button click in our unit test? Perform the following
    steps:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何在单元测试中测试按钮点击？执行以下步骤：
- en: We need to find the button to be clicked. This is easy, since there is only
    one button in our app. We will use the find method to do that.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要找到要点击的按钮。这很容易，因为我们的应用程序中只有一个按钮。我们将使用`find`方法来做到这一点。
- en: We are going to trigger a click on a button, using the trigger method.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`trigger`方法触发按钮点击。
- en: 'We need to check for the value of the counter to change from `0` to `1`. However,
    since we first need to write a failing test, we''ll write out the following code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要检查计数器的值是否从`0`变为`1`。然而，由于我们首先需要编写一个失败的测试，我们将编写以下代码：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As expected, the output of running our test in the Vue CLI UI is the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，在Vue CLI UI中运行我们的测试的输出如下：
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s make things a bit more interesting by writing two tests, and asserting
    them in such a way that they both pass as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写两个测试并断言它们以使它们都通过，让事情变得更有趣，如下所示：
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Let's save our test again and run it as a task inside the Vue CLI UI one more
    time.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次保存我们的测试，并在 Vue CLI UI 中再次运行它作为一个任务。
- en: 'The following is the output:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have successfully written two separate unit tests in one test suite for a
    Vue component, and both our tests have passed.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地在一个测试套件中为 Vue 组件编写了两个单独的单元测试，并且我们的两个测试都通过了。
- en: Test-driven development in Vue CLI 3
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Vue CLI 3 中的测试驱动开发
- en: TDD is development based on the idea of the **red-green-refactor** cycle. Similar
    to what we've seen in the preceding code, we first write our code so that our
    test fails. Next, we write our code so that our test passes, and finally we refactor
    our code.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 是基于“红-绿-重构”周期的开发。与我们在前面的代码中看到的类似，我们首先编写我们的代码，使我们的测试失败。接下来，我们编写我们的代码，使我们的测试通过，最后我们重构我们的代码。
- en: For each new feature in our apps, we repeat the same process. This is essentially
    what TDD is.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们应用程序中的每个新功能，我们重复相同的过程。这本质上就是 TDD。
- en: TDD is just a streamlined way of writing any application in any language or
    framework. It streamlines our work by allowing us to split our entire project
    into testable, clearly separated chunks of functionality.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 只是以一种简化的方式在任何语言或框架中编写任何应用程序。它通过允许我们将整个项目分割成可测试的、清晰分离的功能块来简化我们的工作。
- en: The red-green-refactor approach is clearly visible in our output on the Project
    tasks page too. If we write a failing test, we'll see a red background on the
    word fail. It we write a passing test, we'll see a green background on the work
    pass.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 红绿重构方法在项目任务页面的输出中也是清晰可见的。如果我们编写一个失败的测试，我们会看到单词“fail”的背景是红色的。如果我们编写一个通过的测试，我们会看到单词“pass”的背景是绿色的。
- en: Through the rest of this chapter, we'll look at some other concepts related
    to testing with the help of Vue CLI 3.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将通过 Vue CLI 3 的帮助来了解与测试相关的一些其他概念。
- en: Improving our tests in Vue CLI 3
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Vue CLI 3 中改进我们的测试
- en: 'There are several ways in which we can utilize Jest and other testing platforms
    in Vue CLI 3 for a better testing experience. In the next sections, we''ll look
    at the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用 Jest 和其他测试平台在 Vue CLI 3 中进行更好的测试体验的几种方式。在接下来的章节中，我们将看到以下内容：
- en: Watching our unit tests in Vue CLI 3
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Vue CLI 3 中观察我们的单元测试
- en: Setting parameters for our tasks
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的任务设置参数
- en: Writing end-to-end tests with Cypress
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Cypress 编写端到端测试
- en: Let's begin by working with the `--watch` flag.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从使用 `--watch` 标志开始。
- en: Watching our tests in Vue CLI 3
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Vue CLI 3 中观察我们的测试
- en: 'The `test:unit` command comes with a `--watch` flag. To see it in action, all
    we need to do is go back to the Project tasks page in Vue UI and, with the `test:unit`
    task selected, click on the Parameters button as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`test:unit` 命令带有 `--watch` 标志。要看到它的效果，我们只需要回到 Vue UI 中的项目任务页面，并在选择 `test:unit`
    任务后，点击参数按钮，如下所示：'
- en: '![](assets/2ce2cf08-6d56-4f96-9e0c-967d4a04cd8d.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ce2cf08-6d56-4f96-9e0c-967d4a04cd8d.png)'
- en: 'Figure 4.15: The Parameters button inside the test:unit task'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15：test:unit 任务中的参数按钮
- en: 'Clicking the Parameters button will trigger a dialog with the following two
    options:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 点击参数按钮将触发一个对话框，其中包含以下两个选项：
- en: Watch files for changes and re-run tests related to changed files
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视文件以进行更改并重新运行与更改文件相关的测试
- en: Re-record every snapshot that fails during this test run
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此测试运行期间重新记录每个失败的快照
- en: 'Click on the first option to turn on watch mode. The following option will
    appear right under it:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 点击第一个选项以打开观察模式。接下来的选项将立即出现在其下方：
- en: Display a notification after each run
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每次运行后显示通知
- en: This option is available only when watch mode is enabled. Let's enable the Display
    a notification after each run option too, and click Save.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项只有在观察模式启用时才可用。让我们也启用每次运行后显示通知选项，并点击保存。
- en: You can set these options inside scripts in `package.json`. The first option
    is `--watch`, and the display a notification option is the `--notify` flag.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`package.json`的scripts中设置这些选项。第一个选项是`--watch`，显示通知选项是`--notify`标志。
- en: 'To do this, simply update the scripts key inside your project''s `package.json` to
    following code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，只需更新项目的`package.json`中的scripts键到以下代码：
- en: '[PRE25]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You''ll see that your task list has now expanded to include another testing
    task: `test:unit-watch`.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到你的任务列表现在已经扩展到包括另一个测试任务：`test:unit-watch`。
- en: However, even though you can, it's better not to do it like this. It's not a
    best practice and it kind of defeats the purpose of using Vue UI in the first
    place. Still, understanding that this is how it can be done gives us a better
    understanding of what is happening under the hood of the Vue CLI UI.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使你可以，最好不要这样做。这不是最佳实践，而且这样做有点违背了使用Vue UI的初衷。不过，了解到这样可以做的话，我们对Vue CLI UI底层发生了更好的理解。
- en: Now, let's see if watch mode is working properly by adding a change to the `AnotherComponent.spec.js`
    file. It's enough to just add a space somewhere and save the updates.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过向`AnotherComponent.spec.js`文件添加更改来查看观察模式是否正常工作。只需在某个地方添加一个空格并保存更新即可。
- en: Writing end-to-end tests with Cypress
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cypress编写端到端测试
- en: End-to-end testing is a testing practice in which we test the application flow
    from beginning to end. With end-to-end testing, we simulate a scenario in which
    a user flows through our application from some kind of an entry point to a certain
    outcome.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试是一种测试实践，我们在其中从头到尾测试应用程序的流程。通过端到端测试，我们模拟用户从某种入口点流经我们的应用程序到达某种结果的场景。
- en: 'For example, an end-to-end test of a web app could include the following flow:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Web应用程序的端到端测试可能包括以下流程：
- en: User opening the URL of the web app in their browser
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在浏览器中打开Web应用程序的URL
- en: User clicking the login link and logging in
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户点击登录链接并登录
- en: User checking notifications in the web app
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在Web应用程序中检查通知
- en: User logging out
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户登出
- en: Introducing Cypress
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Cypress
- en: In this section, we'll be using Cypress for our end-to-end tests. Cypress works
    great with the Chrome browser. Alternatively, if you'd like to work with a Selenium-based
    tool, you could look at Nightwatch.js at this website: [http://nightwatchjs.org/.](http://nightwatchjs.org/)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Cypress进行端到端测试。Cypress在Chrome浏览器中运行良好。或者，如果你想使用基于Selenium的工具，你可以在这个网站上查看Nightwatch.js：[http://nightwatchjs.org/.](http://nightwatchjs.org/)
- en: To find out more about Cypress, visit the official web site at the following
    URL: [https://www.cypress.io/](https://www.cypress.io/).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Cypress的信息，请访问以下网址的官方网站：[https://www.cypress.io/](https://www.cypress.io/)。
- en: 'If you visit the Cypress website, you''ll see it described as:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问Cypress网站，你会看到它被描述为：
- en: Fast, easy, and reliable testing for anything that runs in a browser.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 快速、简单、可靠的测试任何在浏览器中运行的东西。
- en: Let's dive right in.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们马上开始吧。
- en: Adding a Cypress plugin to our project
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的项目添加Cypress插件
- en: 'Now let''s add a Cypress plugin to our project with your Vue CLI UI running:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在运行Vue CLI UI的情况下向我们的项目添加一个Cypress插件：
- en: 'Open the following address in the browser:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开以下地址：
- en: '`http://localhost:8000/plugins/add`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/plugins/add`'
- en: Next, type `cypress` into the search field, and locate the `@vue/cli-plugin-e2e-cypress` plugin.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在搜索框中输入`cypress`，并找到`@vue/cli-plugin-e2e-cypress`插件。
- en: Go through the plugin installation steps just like we did before with the Jest
    plugin.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照我们之前使用Jest插件的方式，按照插件安装步骤进行操作。
- en: Once our Cypress plugin is added, we need to commit the changes. Similar to
    how we did it with Jest, we can just commit with a simple message such as `Add
    Cypress plugin`.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们添加了Cypress插件，我们需要提交更改。与Jest一样，我们可以只用一个简单的消息提交，比如“添加Cypress插件”。
- en: 'Notice that installing Cypress added a new folder called `e2e` to our `tests`
    folder.  Inside the `e2e` folder, we can find the following subfolders: `plugins`,
    `specs`, and `support`.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，安装Cypress会在我们的`tests`文件夹中添加一个名为`e2e`的新文件夹。在`e2e`文件夹中，我们可以找到以下子文件夹：`plugins`，`specs`和`support`。
- en: Let's inspect the contents of the `package.json` file next.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们接着检查`package.json`文件的内容。
- en: Verifying updates to package.json made by the Cypress plugin installation
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证Cypress插件安装后对package.json的更新
- en: 'Let''s inspect our project''s `package.json` inside VS Code. We''ll notice
    a new entry inside the `scripts` option as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在VS Code中检查我们项目的`package.json`。我们会注意到`scripts`选项中有一个新的条目，如下所示：
- en: '[PRE26]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Also, our `devDependencies` have been updated with the Cypress plugin, which
    we can also see by visiting our Vue UI dashboard and inspecting the installed
    plugins.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们的`devDependencies`已经通过Cypress插件进行了更新，我们还可以通过访问Vue UI仪表板并检查已安装的插件来看到这一点。
- en: Finally, if we click on the Tasks icon, we'll see that the `test:e2e` task has
    been added to the bottom of the tasks list for our project, exactly the same as
    what we saw inside the `package.json` file.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们点击任务图标，我们会看到`test:e2e`任务已添加到我们项目的任务列表底部，与我们在`package.json`文件中看到的完全相同。
- en: 'If we clicked on the `test:e2e` task, the right-hand pane will be updated accordingly,
    with the Run task button ready to be clicked. Clicking the Run task button would
    produce the following output:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击`test:e2e`任务，右侧窗格将相应更新，运行任务按钮已准备好点击。点击运行任务按钮将产生以下输出：
- en: '[PRE27]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: A new Electron-powered window will open on our computer. Working with Cypress
    is easy. As the To help you get started... window tells us, you can run tests
    in the `examples` folder or add your own test files to `cypress/integration`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的由Electron驱动的窗口将在我们的计算机上打开。使用Cypress很容易。正如“帮助您入门……”窗口所告诉我们的那样，您可以在`examples`文件夹中运行测试，或者将您自己的测试文件添加到`cypress/integration`中。
- en: If you look at the top-right of the Cypress window, you'll see the Run all specs
    button. By default it will run in Chrome (with the version number specified).
    If you click on the dropdown that has Chrome selected, you can switch to Electron.
    Regardless of what option you choose, your tests will be run in a new window,
    either a new Chrome window or a new Electron window.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看一下Cypress窗口右上角，您会看到“运行所有规范”按钮。默认情况下，它将在Chrome中运行（指定版本号）。如果您点击下拉菜单，选择Chrome，您可以切换到Electron。无论您选择哪个选项，您的测试都将在一个新窗口中运行，无论是一个新的Chrome窗口还是一个新的Electron窗口。
- en: 'At this point, our end-to-end Cypress tests will fail, because Cypress is trying
    to run tests on a default Vue scaffold project, as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的端到端Cypress测试将失败，因为Cypress试图在默认的Vue脚手架项目上运行测试，如下所示：
- en: '![](assets/971f01f8-35ae-4c62-8801-adb5dd518409.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/971f01f8-35ae-4c62-8801-adb5dd518409.png)'
- en: 'Figure 4.16: A failing test in Cypress'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.16：Cypress中的一个失败测试
- en: If you wanted to see these test pass from the get go, you'd need to create a
    brand-new project and set up Cypress `e2e` testing in the configuration. We'll
    look at these different options later in the book. For now, let's update our tests
    so that they pass.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望从一开始就看到这些测试通过，您需要创建一个全新的项目，并在配置中设置Cypress`e2e`测试。我们将在本书的后面看看这些不同的选项。现在，让我们更新我们的测试，使它们通过。
- en: Updating Cypress tests in our Vue app
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新我们Vue应用中的Cypress测试
- en: Back in VS Code, open the `test.js` file inside the `./tests/e2e/specs/` folder.
    You'll see a `describe` function with two arguments.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 回到VS Code，在`./tests/e2e/specs/`文件夹中打开`test.js`文件。您会看到一个带有两个参数的`describe`函数。
- en: 'To understand Cypress terminology better, refer to the following URLs:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解Cypress术语，请参考以下网址：
- en: '[https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html#Support-file](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html#Support-file),
    and'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html#Support-file](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html#Support-file)，以及'
- en: '[https://docs.cypress.io/guides/references/bundled-tools.html#Mocha.](https://docs.cypress.io/guides/references/bundled-tools.html#Mocha)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.cypress.io/guides/references/bundled-tools.html#Mocha.](https://docs.cypress.io/guides/references/bundled-tools.html#Mocha)'
- en: 'While in Jest, we saw the word `test` as the name of a single unit test''s
    function, whereas in Cypress, we see the word `it` being used. The `cy` object
    is the actual Cypress test runner. Let''s look at the following updated code for
    the `test.js` file, and explain how and why it works:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jest中，我们看到`test`这个词作为单元测试函数的名称，而在Cypress中，我们看到使用`it`这个词。`cy`对象是实际的Cypress测试运行器。让我们看一下`test.js`文件的以下更新代码，并解释它是如何以及为什么工作的：
- en: '[PRE28]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This time our tests are pass. Notice that we only had to save the updated test
    file in VS Code for the tests to be run automatically. You can navigate to `http://localhost:8000/tasks/`
    and click the `test:e2e` task for more information on the running task as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们的测试通过了。请注意，我们只需要在VS Code中保存更新后的测试文件，测试就会自动运行。您可以转到`http://localhost:8000/tasks/`，并单击`test:e2e`任务以获取有关正在运行的任务的更多信息，如下所示：
- en: '![](assets/eb9f0ea0-0c56-4be6-b23e-a2b9d57488f2.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb9f0ea0-0c56-4be6-b23e-a2b9d57488f2.png)'
- en: 'Figure 4.17: A screenshot of a passing Cypress test for our Vue app''s homepage'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.17：我们Vue应用程序主页的Cypress测试通过的屏幕截图
- en: Also notice that, if you hover over the CONTAINS section in your test results,
    the appropriate part of the served Vue app will be highlighted, a wonderful visual
    cue as to the exact section of our Vue app that is being tested.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 另外请注意，如果你在测试结果上悬停在“CONTAINS”部分，那么服务的Vue应用程序的适当部分将被突出显示，这是一个关于我们正在测试的Vue应用程序的确切部分的美妙视觉提示。
- en: Summary
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Summary
- en: In this chapter, we discussed many testing-related topics through the lens of
    the Vue CLI 3\. TDD is a great technique that should be utilized by teams and
    individuals alike, and Vue CLI 3, its UI, and Jest make a wonderful match for
    streamlining this process. Like any other aspect of development with Vue CLI 3,
    a lot of the piping is hidden away from us, which makes for a great coding experience.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过Vue CLI 3的视角讨论了许多与测试相关的主题。TDD是一种很棒的技术，应该被团队和个人广泛利用，而Vue CLI 3、它的UI和Jest是优化这一过程的绝佳选择。与Vue
    CLI 3的其他方面一样，很多的管道工作都对我们隐藏起来，这使得编码体验非常棒。
- en: In the next chapter, we will look at routing in Vue CLI 3.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究Vue CLI 3中的路由。
