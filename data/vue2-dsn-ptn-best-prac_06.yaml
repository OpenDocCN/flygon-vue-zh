- en: Creating Better UI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建更好的UI
- en: Transitions and animations are great ways of creating a better user experience
    within our applications. As there's so many different options and use cases, they
    can make or break the feel of an application if under or overused. We'll be looking
    at this concept further within this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡和动画是在我们的应用程序中创建更好用户体验的好方法。由于有很多不同的选项和用例，它们可以使应用程序的感觉得以或败。我们将在本章中进一步探讨这个概念。
- en: We'll also be looking at form validation with a third-party library named `Vuelidate`.
    This will allow us to create forms that scale with the size of our application.
    We'll also gain the power to change the UI depending on form state, as well as
    display helpful validation messages to assist the user.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用名为`Vuelidate`的第三方库来进行表单验证。这将允许我们创建随着应用程序规模而扩展的表单。我们还将获得根据表单状态更改UI的能力，以及显示有用的验证消息来帮助用户。
- en: Finally, we'll look at how we can use the `render` function and JSX to compose
    the user interface with Vue. While this is not perfect for every scenario, there
    are times where you'd want to take full advantage of JavaScript within your templates,
    as well as create smart/presentational components with the Functional Component
    model.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将看看如何使用`render`函数和JSX来使用Vue组合用户界面。虽然这并不适用于每种情况，但在某些情况下，您可能希望充分利用模板中的JavaScript，并使用功能组件模型创建智能/表现组件。
- en: 'By the end of this chapter, you will have:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将拥有：
- en: Learned about CSS animations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习了CSS动画
- en: Created your own CSS animations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自己的CSS动画
- en: Used `Animate.css` to create interactive UI with little work
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Animate.css`创建交互式UI，工作量很小
- en: Investigated and created your own Vue transitions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查并创建自己的Vue过渡
- en: Taken advantage of `Vuelidate` to validate forms within Vue
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用`Vuelidate`在Vue中验证表单
- en: Used the `render` function as an alternative to template-driven UI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`render`函数作为模板驱动UI的替代方案
- en: Used JSX to compose UI similar to React
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSX来组合类似于React的UI
- en: Let's start off by understanding why we should care about animation and transitions
    inside our project(s).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先了解为什么我们应该关心项目中的动画和过渡。
- en: Animations
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画
- en: Animations can be used to draw focus to specific UI elements and to improve
    the overall experience for the user by bringing it to life. Animations should
    be used when there is no clear start state and end state. An animation can be
    set to play automatically or it can be triggered by user interaction.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 动画可以用来吸引特定UI元素的注意，并通过使其生动起来来改善用户的整体体验。当没有明确的开始状态和结束状态时，应该使用动画。动画可以自动播放，也可以由用户交互触发。
- en: CSS animations
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS动画
- en: CSS animations are not only a powerful tool, but they are also easy to maintain
    with little knowledge needed in order to use them within a project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: CSS动画不仅是强大的工具，而且在项目中使用它们只需要很少的知识就可以轻松维护。
- en: Adding them to an interface can be an intuitive method of capturing a user's
    attention and they can also be used in pointing a user to a specific element with
    ease. The animations can be tailored and customized, making them ideal for plenty
    of use cases within a variety of projects.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们添加到界面中可以是捕获用户注意力的直观方法，它们也可以用于轻松指向用户特定的元素。动画可以定制和自定义，使它们成为各种项目中许多用例的理想选择。
- en: 'Before we dig deep into Vue transitions and other animated possibilities, we
    should have an understanding of how to do basic CSS3 animations. Let''s create
    a simple project that looks at this in more detail:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究Vue过渡和其他动画可能性之前，我们应该了解如何进行基本的CSS3动画。让我们创建一个更详细地查看这一点的简单项目：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Inside `App.vue` we can first create the following styles:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.vue`中，我们可以首先创建以下样式：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, nothing too out of the ordinary. We''re declaring the CSS animation
    with `@keyframes` named `fade`, essentially giving CSS two states that we want
    our element to be in - `opacity: 1` and `opacity: 0`. It says nothing about how
    long or whether these keyframes are repeated; this is all done in the `animated`
    class. We''re applying the `fade` keyframes for `1`s whenever we add the class
    to an element; at the same time, we''re adding `opacity: 1` to ensure that it
    doesn''t disappear after the animation has ended.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '如您所见，没有什么特别的。我们使用`@keyframes`命名为`fade`来声明CSS动画，基本上给CSS两个我们希望元素处于的状态-`opacity:
    1`和`opacity: 0`。它并没有说明这些关键帧持续多长时间或是否重复；这一切都在`animated`类中完成。我们在将类添加到元素时应用`fade`关键帧为`1`；与此同时，我们添加`opacity:
    1`以确保在动画结束后它不会消失。'
- en: 'We can put this together by taking advantage of `v-bind:class` to dynamically
    add/remove the class depending on the value of `toggle`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过利用`v-bind:class`根据`toggle`的值动态添加/删除类来组合这些：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Cool. We now have the ability to fade in a heading based on a `Boolean` value.
    But what if we could do it better? In this particular circumstance, we could have
    used a transition to achieve similar results. Prior to looking at transitions
    in more detail, let's look at other ways we can use CSS animations inside our
    project.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。现在我们可以根据`Boolean`值淡入一个标题。但如果我们能做得更好呢？在这种特殊情况下，我们可以使用过渡来实现类似的结果。在更详细地查看过渡之前，让我们看看我们可以在项目中使用CSS动画的其他方式。
- en: Animate.css
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Animate.css
- en: '`Animate.css` is a great way of implementing different types of animation easily
    into your project. It''s an open source CSS library created by Daniel Eden ([https://daneden.me/](https://daneden.me/))
    and it gives us access to "plug and play" CSS animations.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`Animate.css`是一种很好的方式，可以轻松地将不同类型的动画实现到项目中。这是由Daniel Eden创建的开源CSS库([https://daneden.me/](https://daneden.me/))，它为我们提供了"即插即用"的CSS动画。'
- en: Prior to adding it to any project, head over to [https://daneden.github.io/animate.css/](https://daneden.github.io/animate.css/)
    and preview the different animation styles. There are a lot of different animations
    to choose from, with each offering a different default animation. These can be
    further customized and we’ll talk more about that later on in the section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在将其添加到任何项目之前，前往[https://daneden.github.io/animate.css/](https://daneden.github.io/animate.css/)预览不同的动画样式。有许多不同的动画可供选择，每种都提供不同的默认动画。这些可以进一步定制，我们稍后将在本节中详细讨论。
- en: 'Go ahead and create a playground project by running the following in our Terminal:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 继续运行以下命令在我们的终端中创建一个游乐项目：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the project is set up, go ahead and open it up in the editor of your choice
    and head to the `index.html` file. Inside the `<head>` tag, add the following
    stylesheet:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 设置项目后，继续在所选的编辑器中打开`index.html`文件。在`<head>`标签内，添加以下样式表：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the stylesheet reference needed for `Animate.css` to work on the project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是项目中需要的样式表引用，以使`Animate.css`在项目中起作用。
- en: Using Animate.css
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Animate.css
- en: 'Now that we have `Animate.css` inside the project, we can change our `App.vue`
    to have a `template` with the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在项目中有了`Animate.css`，我们可以将`App.vue`更改为具有以下`template`：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Prior to adding any animations, we first need to add the animated class. Next,
    we can select any animation from the `Animate.css` library; we've chosen `fadeIn`
    for this example. This can then be switched out for other animations such as `bounceInLeft`,
    `shake`, `rubberBand`, and many more!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加任何动画之前，我们首先需要添加animated类。接下来，我们可以从`Animate.css`库中选择任何动画；我们选择了`fadeIn`作为示例。然后可以将其替换为其他动画，如`bounceInLeft`，`shake`，`rubberBand`等等！
- en: We could take our previous example, and turn this into a bound class value based
    on a Boolean - but transitions may be more exciting to look at.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将之前的示例转换为基于布尔值的绑定类值，但过渡可能更有趣。
- en: Transitions
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡
- en: 'Transitions work by starting off in one particular state and then transitioning
    into another state and interpolating the values in-between. A transition can''t
    have multiple steps involved in an animation. Imagine a pair of curtains going
    from open to closed: the first state would be the open position, while the second
    state would be the closed position.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡效果是通过从一个特定状态开始，然后过渡到另一个状态并在中间插值数值来实现的。过渡不能在动画中涉及多个步骤。想象一对窗帘从打开到关闭：第一个状态将是打开的位置，而第二个状态将是关闭的位置。
- en: Vue has its own tags for dealing with transitions, known as `<transition>` and
    `<transition-group>`. These tags are customizable and can be easily used with
    JavaScript and CSS. There do not necessarily need to be `transition` tags to make
    transitions work, as you simply bind the state variable to a visible property,
    but the tags typically offer more control and potentially better results.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Vue有自己的标签来处理过渡，称为`<transition>`和`<transition-group>`。这些标签是可定制的，可以很容易地与JavaScript和CSS一起使用。实际上，并不一定需要有`transition`标签来使过渡生效，因为你只需将状态变量绑定到可见属性，但标签通常提供更多控制和潜在更好的结果。
- en: 'Let''s take the `toggle` example that we had before and create a version that
    uses `transition`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看之前的`toggle`示例，并创建一个使用`transition`的版本：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's take a look at the moving parts in more detail.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看各个部分的运作方式。
- en: We're surrounding the element inside a `<transition>` tag, which is applied
    to `enter-active-class` of `animated fadeIn` whenever `<h1>` enters the DOM. This
    is triggered with the `v-if` directive as the `toggle` variable is initially set
    to `false`. Clicking the button toggles our Boolean, triggering the transition
    and applying the appropriate CSS class.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将元素包裹在`<transition>`标签中，当`<h1>`进入DOM时，它会应用`animated fadeIn`的`enter-active-class`。这是通过`v-if`指令触发的，因为`toggle`变量最初设置为`false`。单击按钮会切换我们的布尔值，触发过渡并应用适当的CSS类。
- en: Transition states
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡状态
- en: 'Every enter/leave transition applies up to six classes, which are made up of
    transitions upon entering the scene, during, and leaving the scene. Set one `(v-enter-*)`
    refers to Transitions initially entering and then moving out, while set two `(v-leave-*)`
    refers to ending transitions entering and then moving out:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每个进入/离开过渡都会应用最多六个类，这些类由进入场景时的过渡、过程中和离开场景时的过渡组成。第一组`(v-enter-*)`指的是最初进入然后移出的过渡，而第二组`(v-leave-*)`指的是结束过渡最初进入然后移出：
- en: '| **Name** | **Description** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **描述** |'
- en: '| `v-enter` | This is the very starting state for enter. It is removed one
    frame after the element is inserted. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `v-enter` | 这是进入的起始状态。在元素插入后的一帧后被移除。 |'
- en: '| `v-enter-active` | `enter-active` is `enter`''s active state. It is active
    for the entirety of the active phase and is only removed once the transitions
    or animations have come to an end. This state also manages further instructions
    such as delays, duration, and so on. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `v-enter-active` | `enter-active`是`enter`的活动状态。它在整个活动阶段都是活动的，并且只有在过渡或动画结束后才会被移除。该状态还管理进一步的指令，如延迟、持续时间等。'
- en: '| `v-enter-to` | This is the last state for enter, added one frame after the
    element is inserted, which is the same time `v-enter` is removed. `Enter-to` is
    then removed once the transition/animation ends. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `v-enter-to` | 这是进入的最后状态，在元素插入后的一帧后添加，与`v-enter`被移除的时间相同。一旦过渡/动画结束，`enter-to`就会被移除。
    |'
- en: '| `v-leave` | This is the starting state for leave. Removed after one frame
    once a leave transition is triggered to take place. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `v-leave` | 这是离开的起始状态。一旦离开过渡被触发，就会在一帧后被移除。'
- en: '| `v-leave-active` | `leave-active` is `leave`''s active state. It is active
    for the entirety of the leaving phase and is only removed once the transition
    or animation have come to an end. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `v-leave-active` | `leave-active`是`leave`的活动状态。在整个离开阶段都是活动的，只有在过渡或动画结束时才会被移除。'
- en: '| `v-leave-to` | The last state for leave, added one frame after a leave is
    triggered, which is the same time `v-leave` is removed. `Leave-to` is then removed
    when the transition/animation ends. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `v-leave-to` | 离开的最后状态，在离开触发后的一帧后添加，与`v-leave`同时移除。当过渡/动画结束时，`leave-to`也会被移除。'
- en: 'Each `enter` and `leave` transition features a prefix, which in the table is
    shown as the default value of `v` because the transition itself has no name. When
    adding the enter or leave transitions into a project, ideally proper naming conventions
    should apply to act as unique identifiers. This can help if you plan on using
    multiple transitions within a project and can be done through a simple assignment
    operation:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`enter`和`leave`过渡都有一个前缀，在表中显示为`v`的默认值，因为过渡本身没有名称。当将enter或leave过渡添加到项目中时，理想情况下应该应用适当的命名约定，以充当唯一标识符。如果您计划在项目中使用多个过渡，这可以帮助，并且可以通过简单的赋值操作完成：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Form validation
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单验证
- en: 'Throughout the book, we''ve looked at various different ways that we can capture
    user input with the likes of `v-model`. We''ll be using a third-party library
    named **Vuelidate** to perform model validation depending on a particular ruleset.
    Let''s create a playground project by running the following in your Terminal:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经看过了各种不同的捕获用户输入的方式，比如`v-model`。我们将使用一个名为**Vuelidate**的第三方库来根据特定规则进行模型验证。让我们通过在终端中运行以下命令来创建一个示例项目：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What is Vuelidate?
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Vuelidate？
- en: '`Vuelidate` is an open source, lightweight library that helps us perform model
    validation with a variety of validation contexts. Validation can be functionally
    composed and it also works well with other libraries such as `Moment`, `Vuex`,
    and more. As we''ve installed it in our project with `npm install vuelidate`,
    we now need to register it as a plugin within `main.js`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vuelidate`是一个开源的轻量级库，帮助我们使用各种验证上下文进行模型验证。验证可以被功能组合，并且它也可以很好地与其他库（如`Moment`、`Vuex`等）配合使用。由于我们已经在项目中使用`npm
    install vuelidate`安装了它，现在我们需要在`main.js`中将其注册为插件。'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding the empty validations object to our main Vue instance bootstraps Vuelidate's
    `$v` throughout the project. This then allows us to use the `$v` object to gain
    information about the current state of our form within our Vue instance across
    all components.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将空验证对象添加到我们的主Vue实例中，可以在整个项目中引导Vuelidate的`$v`。这样我们就可以使用`$v`对象来获取关于表单当前状态的信息，跨越所有组件的Vue实例。
- en: Using Vuelidate
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vuelidate
- en: 'Let''s create a basic form that allows us to input a `firstName`, `lastName`,
    `email`, and `password`. This will allow us to add validation rules with `Vuelidate`
    and visualize them on screen:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个基本表单，允许我们输入`firstName`、`lastName`、`email`和`password`。这将允许我们使用`Vuelidate`添加验证规则，并在屏幕上可视化它们：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There''s a lot going on here, so let''s break it down step by step:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里涉及很多内容，让我们一步一步来分解：
- en: We're creating a new form with the `@submit.prevent` directive so that the page
    doesn't reload when the form is submitted, which is the same as calling the submit
    on this form and having `preventDefault` on the event
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在创建一个新的表单，使用`@submit.prevent`指令，这样当表单提交时页面不会重新加载，这与在表单上调用submit并在事件上使用`preventDefault`是一样的。
- en: Next, we're adding `v-model.trim` to each form input element so that we trim
    any white space and capture the input as a variable
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在每个表单输入元素中添加`v-model.trim`，以便修剪任何空白并将输入捕获为变量
- en: We're defining these variables inside of our data function so that they're reactive
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在数据函数中定义这些变量，以便它们是响应式的
- en: The `submit` button is defined with the `type="submit"` so that when it's clicked
    the form's `submit` function is ran
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`submit`按钮被定义为`type="submit"`，这样当点击它时，表单的`submit`函数就会运行'
- en: We're stubbing out a blank `onSubmit` function, which we'll be creating soon
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在创建一个空白的`onSubmit`函数，很快就会创建它
- en: 'Now we need to add the `@input` event and call the `touch` event on each one
    of our `input` elements, binding to the data property `v-model`, and providing
    validation to the field like so:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要添加`@input`事件，并在每个`input`元素上调用`touch`事件，绑定到数据属性`v-model`，并为字段提供验证，如下所示：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can then add the validations to our Vue instance by importing them from `Vuelidate`
    and adding a `validations` object that corresponds to the form elements.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过从`Vuelidate`导入它们并添加与表单元素对应的`validations`对象，将验证添加到我们的Vue实例中。
- en: '`Vuelidate` will bind the same name set here with our `data` variable like
    so:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vuelidate`将使用相同的名称与我们的`data`变量绑定，如下所示：'
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We''re simply importing the required email validators and applying them to
    each model item. This essentially makes sure that all of our items are required
    and that the email input matches an email regular expression. We can then visualize
    the current state of the form and each field by adding the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需导入所需的电子邮件验证器并将其应用于每个模型项。这基本上确保了我们所有的项目都是必需的，并且电子邮件输入与电子邮件正则表达式匹配。然后，我们可以通过添加以下内容来可视化表单和每个字段的当前状态：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can then add some styling to show the validation on the right and the form
    on the left:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以添加一些样式来显示右侧的验证和左侧的表单：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If everything has gone as planned, we should get the following result:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切都按计划进行，我们应该会得到以下结果：
- en: '![](assets/6747ab00-f573-40a4-b9cf-d8a5e3ea85b6.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6747ab00-f573-40a4-b9cf-d8a5e3ea85b6.png)'
- en: Displaying form errors
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示表单错误
- en: 'We can use the `$invalid` Boolean inside of the `$v.model_name` object (where
    `model_name` is equal to `email`, `firstName`, `lastName`, or `password`) to display
    messages or change the look and feel of our form field(s). Let''s start off by
    adding a new class named `error` that adds a `red` `border` around the input field:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`$invalid`布尔值来显示消息或更改表单字段的外观和感觉。让我们首先添加一个名为`error`的新类，它在输入字段周围添加了`red`
    `border`：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can then conditionally apply this class whenever the field is invalid and
    touched using `v-bind:class`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在字段无效且已触摸时有条件地应用此类，使用`v-bind:class`：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This then gives us the following results whenever the field is invalid or valid:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，每当字段无效或有效时，我们就会得到以下结果：
- en: '![](assets/9736943a-4ffe-449b-a97e-648983eacdd7.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9736943a-4ffe-449b-a97e-648983eacdd7.png)'
- en: 'Subsequently, we can then display an error message if this is the case. This
    can be done in numerous ways depending on the type of message you want to show.
    Let''s use the `email` input as an example, and show an error message when the
    `email` field has an invalid email address:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，如果是这种情况，我们可以显示错误消息。这可以通过多种方式来完成，具体取决于您想要显示的消息类型。让我们以`email`输入为例，当`email`字段具有无效的电子邮件地址时显示错误消息：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As we can see from the representation of our `$v` object, the email Boolean
    is true when the field has a valid email address, and if not, is false. While
    this checks to see if email is correct, it doesn''t check to see whether the field
    is empty. Let''s add another error message that checks this based on the `required`
    validator:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的`$v`对象的表示中，我们可以看到当字段具有有效的电子邮件地址时，电子邮件布尔值为true，如果不是，则为false。虽然这检查电子邮件是否正确，但它并不检查字段是否为空。让我们添加另一个基于`required`验证器的检查这一点的错误消息：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we wanted to, we could even take this a step further and create our own
    wrapper component that would render the various error messages of each field.
    Let''s fill in the rest of our error messages along with a check to see whether
    the form element has been touched (is `$dirty`):'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们愿意，甚至可以更进一步，创建自己的包装组件，用于呈现每个字段的各种错误消息。让我们填写剩下的错误消息，以及检查表单元素是否已被触摸（即`$dirty`）：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Password validation
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码验证
- en: 'When creating user accounts, passwords tend to be entered twice and conform
    to a minimum length. Let''s add another field and some more validation rules to
    enforce this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建用户帐户时，密码往往会被输入两次，并符合最小长度。让我们添加另一个字段和一些更多的验证规则来强制执行这一点：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We''ve done the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了以下工作：
- en: Added the `repeatPassword` field to our data object so that it can hold the
    repeated password
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`repeatPassword`字段添加到我们的数据对象中，以便它可以保存重复的密码
- en: Imported both the `minLength` and `sameAs` validators from `Vuelidate`
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Vuelidate`导入了`minLength`和`sameAs`验证器
- en: Added the `minLength` of `6` characters to the `password` validator
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`password`验证器的`minLength`添加为`6`个字符
- en: Added the `sameAs` validator to enforce the fact that `repeatPassword` should
    follow the same validation rules as `password`
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加了`sameAs`验证器来强制`repeatPassword`应遵循与`password`相同的验证规则
- en: 'As we now have appropriate password validation, we can add the new field and
    display any error messages:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了适当的密码验证，我们可以添加新字段并显示任何错误消息：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Form submission
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单提交
- en: 'Next, we can disable our `Submit` button if the form is not valid:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果表单无效，我们可以禁用我们的“提交”按钮：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can also get this value inside of our JavaScript with `this.$v.$invalid`.
    Here''s an example of how we can check to see whether the form is invalid and
    then create a user object based on our form elements:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在JavaScript中使用`this.$v.$invalid`来获取此值。以下是一个示例，演示了如何检查表单是否无效，然后根据我们的表单元素创建用户对象：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you''d like to use your data in this fashion, you may prefer to set up your
    data object like so:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望以这种方式使用您的数据，您可能更喜欢设置您的数据对象如下：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have now created a form with appropriate validation!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经创建了一个具有适当验证的表单！
- en: Render/functional components
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染/功能组件
- en: We're going to take a detour and pivot away from validation and animations to
    consider the use of functional components and render functions to improve application
    performance. You may also hear these being referred to as "presentational components"
    as they're stateless and only receive data as an input prop.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改变方向，从验证和动画转向考虑使用功能组件和渲染函数来提高应用程序性能。您可能也会听到它们被称为“呈现组件”，因为它们是无状态的，只接收数据作为输入属性。
- en: 'So far, we''ve only declared the markup for our components with the `template`
    tag, but it''s also possible to use the `render` function (as seen in `src/main.js`):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只声明了组件的标记，使用了`template`标签，但也可以使用`render`函数（如`src/main.js`中所示）：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `h` comes from hyperscript that allows us to create/describe DOM nodes with
    our JavaScript. In the `render` function, we're simply rendering the `App` component
    and in the future, we'll be looking at this in more detail. Vue creates a Virtual
    DOM to make working with the actual DOM much simpler (as well as for improved
    performance when dealing with a vast amount of elements).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`h`来自超文本，它允许我们用JavaScript创建/描述DOM节点。在`render`函数中，我们只是渲染`App`组件，将来我们会更详细地看这个。Vue创建了一个虚拟DOM，使得处理实际DOM变得更简单（以及在处理大量元素时提高性能）。'
- en: Rendering elements
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染元素
- en: 'We can replace our `App.vue` component with the following object that takes
    a `render` object and `hyperscript` instead of using `template`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用以下对象替换我们的`App.vue`组件，该对象接受一个`render`对象和`hyperscript`，而不是使用`template`：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This then renders a new `h1` tag with the text node of `''Hello render!''`
    and this is then known as a **VNode** (**Virtual Node**) and the plural **VNodes**
    (**Virtual DOM Nodes**), which describes the entire tree. Let''s now look at how
    we can display a list of items inside of a `ul`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后渲染一个带有文本节点`'Hello render!'`的新`h1`标签，这就是所谓的**VNode**（**虚拟节点**），复数形式为**VNodes**（**虚拟DOM节点**），它描述了整个树。现在让我们看看如何在`ul`中显示一个项目列表：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](assets/8b05f288-e17e-427c-ae97-8e2b22d23db7.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8b05f288-e17e-427c-ae97-8e2b22d23db7.png)'
- en: 'It''s important to realize that we can only render one root node with hyperscript.
    This restriction is the same for our template, so it''s expected that we wrap
    our items inside of a `div` like so:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要意识到，我们只能用超文本渲染一个根节点。这个限制对我们的模板也是一样的，所以我们预期将我们的项目包裹在一个`div`中，就像这样：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Attributes
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性
- en: 'We can also pass style elements and a variety of other attributes to our rendered
    items. Here''s an example that uses the `style` object to change the color of
    each item `red`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以向我们渲染的项目传递样式元素和各种其他属性。以下是一个使用`style`对象来将每个项目的颜色更改为`red`的示例：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As you can imagine, we can add as many `style` attributes as we want, as well
    as extra options that we would expect, such as `props`, `directives`, `on` (click
    handlers), and so on. Let's look at how we can map over elements to render a component
    with `props`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可以想象的那样，我们可以添加尽可能多的`style`属性，以及我们期望的额外选项，比如`props`、`directives`、`on`（点击处理程序）等。让我们看看如何映射元素以渲染带有`props`的组件。
- en: Components and props
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件和props
- en: 'Let''s create ourselves a `ListItem` component under `components/ListItem.vue`
    with one prop, `name`. We''ll render this component in place of our `li` and map
    over an array that contains various `names`. Notice how we''re also adding the
    `functional: true` option to our Vue instance; this tells Vue that this is purely
    a presentational component and it will not have any state of its own:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们在`components/ListItem.vue`下创建一个`ListItem`组件，其中有一个prop，`name`。我们将在我们的`li`的位置渲染这个组件，并在包含各种`names`的数组上进行映射。请注意，我们还向我们的Vue实例添加了`functional:
    true`选项；这告诉Vue这纯粹是一个呈现组件，它不会有任何自己的状态：'
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'With our `render` function, `h` is often also referred to as `createElement`,
    and because we''re in the JavaScript context, we''re able to take advantage of
    array operators such as `map`, `filter`, `reduce`, and so on. Let''s replace the
    static names for dynamically generated components with `map`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`render`函数中，`h`通常也被称为`createElement`，因为我们在JavaScript上下文中，我们能够利用数组操作符，如`map`、`filter`、`reduce`等。让我们用`map`替换静态名称，用动态生成的组件：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The final thing we need to do is add a `render` function to our component.
    As a second parameter, we''re able to gain access to the context object, which
    allows us to access `options` such as our `props`. For this example, we''ll assume
    that the `name` prop is always present and isn''t `null` or `undefined`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是向我们的组件添加一个`render`函数。作为第二个参数，我们能够访问上下文对象，这使我们能够访问`props`等`options`。在这个例子中，我们假设`name`
    prop总是存在且不是`null`或`undefined`：
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once again, we now have a list of elements that includes items passed as a
    `prop`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们现在有一个包含作为`prop`传递的项目的元素列表：
- en: '![](assets/9982a92b-38a0-4b0f-aaca-ae5e0e436865.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9982a92b-38a0-4b0f-aaca-ae5e0e436865.png)'
- en: JSX
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX
- en: Although this is a great thought exercise, templates are superior in most cases.
    There may be times where you want to use the render function inside of your components
    and, in these circumstances, it may be simpler to use JSX.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一个很好的思考练习，但在大多数情况下，模板更优越。也许有时您想在组件内部使用`render`函数，在这种情况下，使用JSX可能更简单。
- en: 'Let''s add the babel plugin for JSX into our project by running the following
    in our Terminal:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在终端中运行以下命令将JSX的babel插件添加到我们的项目中：
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can then update our `.babelrc` to use the new plugin:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以更新我们的`.babelrc`以使用新的插件：
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This allows us to rewrite our `render` function to take advantage of a simpler
    syntax:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够重写我们的`render`函数，以利用更简单的语法：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This is much more declarative and is also easier to maintain. Under the hood,
    it's being transpiled down to the previous `hyperscript` format with Babel.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这更具有声明性，而且更容易维护。在底层，它被转译为以前的`hyperscript`格式与Babel一起。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to take advantage of CSS animations and transitions
    within our Vue projects. This allows us to make the user experience more fluid
    and improve the look and feel of our applications.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，我们学习了如何在Vue项目中利用CSS动画和过渡。这使我们能够使用户体验更流畅，并改善我们应用程序的外观和感觉。 '
- en: We also learned about how we can construct our UI with the `render` method;
    this involved looking at creating VNodes with HyperScript and then using JSX for
    cleaner abstraction. While you may not want to use JSX in your project, you may
    find it more comfortable if you come from a React background.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何使用`render`方法构建我们的UI；这涉及使用HyperScript创建VNodes，然后使用JSX进行更清晰的抽象。虽然您可能不想在项目中使用JSX，但如果您来自React背景，您可能会觉得更舒适。
