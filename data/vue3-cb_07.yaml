- en: Managing the Application State with Vuex
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vuex管理应用程序状态
- en: Transferring data between sibling components can be very easy, but imagine making
    a tree of components react to any data change. You will need to trigger an event
    in an event bus or send the event through all the parent components until it reaches
    over the top of the event chain and then gets sent all the way down to the desired
    component; this process can be very tedious and painful. If you are developing
    a large-scale application, this process is not sustainable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在兄弟组件之间传输数据可能非常容易，但想象一下让一系列组件对任何数据变化做出反应。你需要在事件总线中触发一个事件，或者通过所有父组件发送事件，直到它到达事件链的顶部，然后再一路发送到所需的组件；这个过程可能非常繁琐和痛苦。如果你正在开发一个大型应用程序，这个过程是不可持续的。
- en: Flux libraries were developed to help with this process, with the idea of bringing
    the reactivity outside of the component bounds, as Vuex is capable of maintaining
    one single source of truth of your data and, at the same time, is the place for
    you to have your business rules.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Flux库是为了帮助这个过程而开发的，其想法是将反应性带出组件边界，因为Vuex能够维护数据的唯一真相来源，并且同时也是你制定业务规则的地方。
- en: In this chapter, we will learn how to use Vuex, develop our store, apply it
    to our components, and namespace it so we can have different modules of Vuex inside
    the same store.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将学习如何使用Vuex，开发我们的存储，将其应用到我们的组件，并对其进行命名空间，以便我们可以在同一个存储中拥有不同的Vuex模块。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下的配方：
- en: Creating a simple Vuex store
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的Vuex存储
- en: Creating and understanding the Vuex state
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和理解Vuex状态
- en: Creating and understanding the Vuex mutations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和理解Vuex变化
- en: Creating and understanding the Vuex actions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和理解Vuex操作
- en: Creating and understanding the Vuex getters
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和理解Vuex获取器
- en: Creating a dynamic component with Vuex
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vuex创建一个动态组件
- en: Adding hot module reload for development
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为开发添加热模块重新加载
- en: Creating a Vuex module
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Vuex模块
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using **Node.js** and **Vue-CLI**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用**Node.js**和**Vue-CLI**。
- en: 'Attention, Windows users, you need to install an NPM package called `windows-build-tools`,
    to be able to install the following required packages. To do it, open PowerShell
    as administrator and execute the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Windows用户，你需要安装一个名为`windows-build-tools`的NPM包，以便安装以下所需的包。要做到这一点，以管理员身份打开PowerShell并执行以下命令：
- en: '`> npm install -g windows-build-tools`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`'
- en: 'To install Vue-CLI, you need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Vue-CLI，你需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a simple Vuex store
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的Vuex存储
- en: Creating a single source of truth in your application gives you the power to
    simplify the flow of your data, enabling the reactivity of the data to flow into
    another perspective, where you are not tied to a parent-child relationship anymore.
    The data can now be stored in a single place and everyone can fetch or request
    data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中创建一个唯一的真相来源可以让你简化数据流，使数据的反应性流向另一个视角，你不再受限于父子关系。数据现在可以存储在一个地方，每个人都可以获取或请求数据。
- en: In this recipe, we will learn how to install the Vuex library and create our
    first single store, and how we can manipulate it with reactive actions and data
    getters.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何安装Vuex库并创建我们的第一个单一存储，以及如何使用反应式操作和数据获取器来操作它。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisite for this recipe is as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件如下：
- en: Node.js 12+
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To create a Vue-CLI project, follow these steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个Vue-CLI项目，请按照以下步骤进行：
- en: 'We need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在终端（macOS或Linux）或命令提示符/PowerShell（Windows）中执行以下命令：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI会询问一些问题，这些问题将有助于创建项目。您可以使用箭头键进行导航，使用*Enter*键继续，使用*Spacebar*选择选项。
- en: 'There are two methods for starting a new project. The default method is a basic
    `babel` and `eslint` project without any plugin or configuration, and the `Manually`
    mode, where you can select more modes, plugins, linters, and options. We will
    go for `Manually`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两种方法可以启动新项目。默认方法是基本的`babel`和`eslint`项目，没有任何插件或配置，还有`手动`模式，您可以选择更多模式、插件、代码检查工具和选项。我们将选择`手动`：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we are asked about the features that we will want in the project. Those
    features are some Vue plugins such as Vuex or Router (`Vue-Router`), testers,
    linters, and more. Select `Babel`, `Router`**,** `Vuex`**,** and `Linter / Formatter`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们被问及项目中需要的功能。这些功能包括一些Vue插件，如Vuex或Router（`Vue-Router`），测试工具，代码检查工具等。选择`Babel`，`Router`，`Vuex`和`Linter
    / Formatter`：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select the `ESLint + Airbnb` config:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续此过程，选择一个代码检查工具和格式化工具。在我们的情况下，我们将选择`ESLint + Airbnb`配置：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied `on save` or fixed `on commit`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置了代码检查规则后，我们需要定义它们何时应用于您的代码。它们可以在“保存时”应用，也可以在“提交时”修复：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is on
    a dedicated file, but it is also possible to store them in the `package.json` file:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义了所有这些插件、代码检查工具和处理器之后，我们需要选择设置和配置的存储位置。最好的存储位置是专用文件，但也可以将它们存储在`package.json`文件中：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now you can choose if you want to make this selection a preset for future projects,
    so you don''t need to reselect everything again:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以选择是否将此选择作为将来项目的预设，这样您就不需要再次重新选择所有内容：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Our recipe will be divided into two parts:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的步骤将分为两部分：
- en: Creating the store
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建store
- en: Creating the reactive component with Vuex
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vuex创建响应式组件
- en: Let's get started.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Creating the store
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建store
- en: 'Now you have the project with the Vuex library, and we need to create our first
    store. In the following steps, we will create the Vuex store:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了包含Vuex库的项目，我们需要创建我们的第一个store。在接下来的步骤中，我们将创建Vuex store：
- en: Open the `index.js` from the `src/store` folder.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/store`文件夹中的`index.js`。
- en: 'In the `state` property, add a new key called `counter` and set the value to
    `0`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`state`属性中，添加一个名为`counter`的新键，并将值设置为`0`：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `mutations` property, add two new functions, `increment` and `decrement`.
    Both of the functions will have a `state` argument, which is the current Vuex
    `state` object. The `increment` function will increment the `counter` by `1` and
    the `decrement` function will decrement the `counter` by `1`:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`mutations`属性中，添加两个新函数，`increment`和`decrement`。这两个函数都将有一个`state`参数，这是当前的Vuex`state`对象。`increment`函数将`counter`增加`1`，而`decrement`函数将`counter`减少`1`：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, in the `actions` property, add two new functions, `increment` and `decrement`.
    Both of the functions will have a deconstructed argument, `commit`, which is a
    function to call the Vuex mutation. In each function, we will execute the `commit`
    function, passing as a parameter the name of the current function as a string:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`actions`属性中，添加两个新函数，`increment`和`decrement`。这两个函数都将有一个解构参数`commit`，它是调用Vuex
    mutation的函数。在每个函数中，我们将执行`commit`函数，将当前函数的名称作为字符串参数传递：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating the reactive component with Vuex
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Vuex创建响应式组件
- en: Now that you have your Vuex store defined, you need to interact with it. We
    will create a reactive component that will display the current state `counter`
    on the screen, and show two buttons, one for incrementing the `counter`, and another
    for decrementing the `counter`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经定义了您的Vuex存储，您需要与之交互。我们将创建一个响应式组件，它将在屏幕上显示当前状态的`counter`，并显示两个按钮，一个用于增加`counter`，另一个用于减少`counter`。
- en: Single file component <script> section
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'Here we are going to write the `<script>` section of the single file component:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将编写单文件组件的`<script>`部分：
- en: Open the `App.vue` file from the `src` folder.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`src`文件夹中打开`App.vue`文件。
- en: 'Create the `<script>` section in the file, with an `export default` object:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中创建`<script>`部分，使用`export default`对象：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the newly created object, add the Vue `computed` property with a property
    called `counter`. In this property we need to return the current `$store.state.counter`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的对象中，添加Vue `computed`属性，属性名为`counter`。在这个属性中，我们需要返回当前的`$store.state.counter`：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, create a Vue `methods` property with two functions, `increment` and
    `decrement`. Both of the functions will execute a `$store.dispatch` with a parameter
    being the function name as a string:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在Vue `methods`属性中创建两个函数，`increment`和`decrement`。这两个函数都将执行一个带有函数名称作为字符串参数的`$store.dispatch`：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Single file component <template> section
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'Let''s code the `<template>` section of the single file component:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写单文件组件的`<template>`部分：
- en: Open the `App.vue` file in the `src` folder.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`App.vue`文件。
- en: In the `<template>` section, remove everything inside the `div#app`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分中，删除`div#app`内的所有内容。
- en: Create an `h1` HTML element with the counter variable inside of it.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含计数器变量的`h1`HTML元素。
- en: 'Create a button with an event listener on the `@click` directive that calls
    the `increment` function, and have `+` as a label:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`@click`指令的事件监听器的按钮，调用`increment`函数，并将`+`作为标签：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a button with an event listener on the `@click` directive that calls
    the `decrement` function, and `-` as a label:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`@click`指令的事件监听器的按钮，调用`decrement`函数，并将`-`作为标签：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is your component rendered and running:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的方式：
- en: '![](assets/0846f103-aada-46b7-a0a2-92e7481f19b5.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0846f103-aada-46b7-a0a2-92e7481f19b5.png)'
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you declare your Vuex store, you need to create three main properties,
    `state`, `mutations`, and `actions`. Those properties act as a single structure,
    bounded to the Vue application through the `$store` injected prototype or the
    exported `store` variable.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当您声明Vuex存储时，您需要创建三个主要属性，`state`，`mutations`和`actions`。这些属性作为一个单一的结构，通过注入的`$store`原型或导出的`store`变量绑定到Vue应用程序。
- en: A `state` is a centralized object that holds your information and makes it available
    to be used by the `mutation`, `actions,` or the components. Changing the `state`
    always requires a synchronous function executed through a `mutation`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`state`是一个集中的对象，保存您的信息并使其可供`mutation`、`actions`或组件使用。改变`state`始终需要通过`mutation`执行的同步函数。'
- en: A `mutation` is a synchronous function that can change the `state` and is traceable,
    so when developing, you can time travel through all the executed `mutations` in
    the Vuex store.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`mutation`是一个同步函数，可以改变`state`并且是可追踪的，因此在开发时，可以通过Vuex存储中执行的所有`mutations`进行时间旅行。'
- en: An `action` is an asynchronous function, which can be used to hold business
    logic, API calls, dispatch other `actions`, and execute `mutations`. Those functions
    are the common entrance point of any change in a Vuex store.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`action`是一个异步函数，可用于保存业务逻辑、API调用、分派其他`actions`和执行`mutations`。这些函数是Vuex存储中任何更改的常见入口点。'
- en: 'A simple representation of a Vuex store can be seen in this chart:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex存储的简单表示可以在此图表中看到：
- en: '![](assets/20737403-4144-48e7-9ee0-6b70a4df9851.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/20737403-4144-48e7-9ee0-6b70a4df9851.png)'
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about Vuex at [https://vuex.vuejs.org/](https://vuex.vuejs.org/).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuex.vuejs.org/](https://vuex.vuejs.org/)找到有关Vuex的更多信息。
- en: Creating and understanding the Vuex state
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和理解Vuex状态
- en: The Vuex state can seem straightforward to understand. However, as the data
    gets more in-depth and nested, its complexity and maintainability can get more
    complicated.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex状态似乎很容易理解。但是，随着数据变得更加深入和嵌套，其复杂性和可维护性可能变得更加复杂。
- en: In this recipe, we will learn how to create a Vuex state that can be used in
    the scenarios of both a **Progressive Web Application (PWA)**/ **Single Page Application
    (SPA)** and a **Server Side Rendering (SSR)**, without any problems.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何创建一个Vuex状态，该状态可以在**渐进式Web应用程序（PWA）**/**单页面应用程序（SPA）**和**服务器端渲染（SSR）**的情景中使用，而无需任何问题。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The prerequisite for this recipe is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方的先决条件如下：
- en: Node.js 12+
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Lazy Loading your pages asynchronously*' recipe in [Chapter 6](369b473f-d58b-49e7-b675-047ef354d4ce.xhtml),
    *Managing Routes with vue-router*, or we can start a new one.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的组件，我们将使用在[第6章](369b473f-d58b-49e7-b675-047ef354d4ce.xhtml)中使用的Vue-CLI的Vue项目，或者我们可以开始一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Choose the manual features, add `Router` and `Vuex` as required features, as
    indicated in the '*How to do it...*' section of the '*C**reating a simple Vuex
    store*' recipe.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能，根据'*如何做...*'部分的指示，将`Router`和`Vuex`添加为必需功能。
- en: 'Our recipe will be divided into two parts:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方将分为两部分：
- en: Adding Vuex via the `vue ui`
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`vue ui`添加Vuex
- en: Creating the `Vuex` state
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`Vuex`状态
- en: Let's get started.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Adding Vuex via the vue ui
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过vue ui添加Vuex
- en: When importing an old project that was created via the Vue-CLI, it is possible
    to automatically add Vuex through the `vue ui` interface without any effort at
    all. We will learn how to add the Vuex library to the old project, so we can continue
    developing the recipe.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当导入通过Vue-CLI创建的旧项目时，可以通过`vue ui`界面自动添加Vuex，而无需任何努力。我们将学习如何向旧项目添加Vuex库，以便继续开发该项目。
- en: 'In the following steps, we will add the Vuex with the `vue ui` interface:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将使用`vue ui`界面添加Vuex。
- en: 'In the project folder, open the `vue ui` by executing the following command on
    Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows):'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹中，通过在终端（macOS或Linux）或命令提示符/PowerShell（Windows）上执行以下命令来打开`vue ui`：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Select the correct project that you are working on. In the right sidebar, click
    on the Plugins menu icon:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你正在工作的正确项目。在右侧边栏中，点击插件菜单图标：
- en: '![](assets/9795f7d3-5585-42ff-b0d1-8d4ea162b369.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9795f7d3-5585-42ff-b0d1-8d4ea162b369.png)'
- en: 'On the plugins page, on the top bar, click on the Add vuex button. This will
    trigger a pop-up modal, then click on the **Continue** button to finish the installation
    of Vuex on the application:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件页面的顶部工具栏上，点击“添加vuex”按钮。这将触发一个弹出模态窗口，然后点击“继续”按钮完成在应用程序上安装Vuex：
- en: '![](assets/1494d414-1e39-402d-b8aa-1de4b5fca347.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1494d414-1e39-402d-b8aa-1de4b5fca347.png)'
- en: 'Adding the Vuex to our application will change the structure of the application.
    First, we will notice that there is a new folder called `store` in the `src` folder,
    and in the `main.js` file, it was added to the imports and the injection of the
    `store` in the Vue application:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Vuex添加到我们的应用程序将改变应用程序的结构。首先，我们会注意到`src`文件夹中有一个名为`store`的新文件夹，在`main.js`文件中，它被添加到了导入和在Vue应用程序中注入`store`：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Creating the Vuex state
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Vuex状态
- en: 'In order to save the data inside of Vuex, you need to have an initial state
    that is loaded with the application and defined as the default one when the user
    enters your application. Here, we are going to learn how to create the Vuex state
    and use it as a singleton, so that Vuex can be used in an SPA and an SSR page:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将数据保存在Vuex中，您需要有一个初始状态，在用户进入您的应用程序时加载并定义为默认状态。在这里，我们将学习如何创建Vuex状态并将其用作单例，以便Vuex可以在SPA和SSR页面中使用：
- en: 'Now we will create a Vuex store that can be used in an SSR and an SPA:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个可以在SSR和SPA中使用的Vuex存储：
- en: In the `src/store` folder, create a new folder called `user`, and inside this
    folder create a new file named `state.js`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/store`文件夹中，创建一个名为`user`的新文件夹，在这个文件夹里创建一个名为`state.js`的新文件。
- en: 'Create a new `generateState` function. This function will return a JavaScript
    object, with three main properties, `data`, `loading`, and `error`. The `data`
    property will be a JavaScript object, with a property called `usersList` defined
    as an empty array as default, and a property called `userData` with the default
    object of a user. The `loading` property will be a boolean, set to `false` by
    default, and `error` will have a default value initializing to `null`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`generateState`函数。这个函数将返回一个JavaScript对象，有三个主要属性，`data`，`loading`和`error`。`data`属性将是一个JavaScript对象，其中有一个名为`usersList`的属性，默认为空数组，以及一个名为`userData`的属性，其中包含用户的默认对象。`loading`属性将默认设置为布尔值`false`，`error`将有一个默认值初始化为`null`：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After creating the function, we will create an `export default` object at the
    end of the file, which will be a JavaScript object, and we will destruct the return
    of the `generateState` function:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建函数后，我们将在文件末尾创建一个`export default`对象，它将是一个JavaScript对象，并且我们将解构`generateState`函数的返回值：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Create a new file named `index.js` in the `user` folder and open it.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`user`文件夹中创建一个名为`index.js`的新文件并打开它。
- en: 'Import the newly created `state`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入新创建的`state`：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'At the end of the file, create an `export default` file as a JavaScript object.
    In this object, we will add the imported `state`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾，创建一个`export default`文件作为JavaScript对象。在这个对象中，我们将添加导入的`state`：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Open the `index.js` file from the `src/store` folder.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/store`文件夹中的`index.js`文件。
- en: 'Import the `index.js` file from the `user` folder:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`user`文件夹中导入`index.js`文件：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `export default` function, which creates a new Vuex store, we will remove
    all the properties inside of it,  and put the imported `UserStore` deconstructed
    object inside the `Vuex.Store` parameter:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建一个新的Vuex store的`export default`函数中，我们将删除其中的所有属性，并将导入的`UserStore`解构对象放入`Vuex.Store`参数中：
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When using the `vue ui` to add Vuex as a plugin, the `vue ui` will automatically
    add the required files, and import everything that is needed. This is the initial
    phase of the creation of a Vuex `store`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`vue ui`将Vuex作为插件添加时，`vue ui`将自动添加所需的文件，并导入所有需要的内容。这是创建Vuex `store`的初始阶段。
- en: First is the creation of an exclusive file for managing the `state` that we
    can use to separate, from the `store`, the process of how the state begins and
    how it can be initialized.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是创建一个专门管理`state`的文件，我们可以使用它来分离`store`中状态的开始过程以及如何初始化状态。
- en: In this case of this `state`, we used a function to generate a completely new
    `state` every time it's called. This is a good practice, because in an SSR environment,
    the `state` of the server will always be the same, and we need to create a new
    `state` for each new connection.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用一个函数来生成每次调用时都会生成一个全新的`state`。这是一个很好的做法，因为在SSR环境中，服务器的`state`始终是相同的，我们需要为每个新连接创建一个新的`state`。
- en: After the creation of the `state`, we needed to create the default file for
    exporting the Vuex files that will be created in the `user` folder. This file
    is a simple import of all the files that will be created in the folder, `state`,
    `actions`, `mutation`, and `getters`. After the import, we export an object with
    the name of the required Vuex properties, `state`, `actions`, `mutations`, and `getters`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`state`之后，我们需要创建一个默认文件来导出将在`user`文件夹中创建的Vuex文件。这个文件是对将在文件夹中创建的所有文件（`state`，`actions`，`mutation`和`getters`）的简单导入。导入后，我们导出一个带有所需的Vuex属性名称的对象，`state`，`actions`，`mutations`和`getters`。
- en: Finally, in the Vuex `store`, we import the file that aggregates everything
    and deconstructs it into our store to initialize it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在Vuex的`store`中，我们导入了一个文件，将所有内容聚合并解构到我们的store中进行初始化。
- en: There's more...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `Vuex` state is a single source of truth in your application, it works like
    a global data manager, and it should not be changed directly. This is because
    we need to prevent the mutation of data with a concurrent mutation of the same
    data. To avoid that, we always need to change our state through the mutations,
    because the functions are synchronous and controlled by Vuex.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vuex` state是应用程序中的唯一数据源，它就像一个全局数据管理器，不应直接更改。这是因为我们需要防止数据的同时变异。为了避免这种情况，我们总是需要通过mutations来改变我们的state，因为这些函数是同步的，并由Vuex控制。'
- en: See also
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about the Vuex state at [https://vuex.vuejs.org/guide/state.html](https://vuex.vuejs.org/guide/state.html).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://vuex.vuejs.org/guide/state.html](https://vuex.vuejs.org/guide/state.html)找到有关Vuex
    state的更多信息。
- en: Creating and understanding the Vuex mutations
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和理解Vuex mutations
- en: When there is a change in Vuex, we need a way to execute this change in asynchronous
    form and keep track of it so it won't execute over another change before the first
    change finishes.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当Vuex发生变化时，我们需要一种以异步形式执行这种变化并跟踪它的方式，以便在第一个变化完成之前不会执行另一个变化。
- en: For this case, we need the mutations, which are functions that are only responsible
    for changing the state of your application.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要mutations，这些是仅负责改变应用程序状态的函数。
- en: In this recipe, we will learn how to create Vuex mutations and the best practices
    by which to do it.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何创建Vuex mutations以及最佳实践。
- en: Getting ready
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisite for this recipe is as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的先决条件如下：
- en: Node.js 12+
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating and understanding the Vuex state*' recipe, or we can start a
    new one.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的组件，我们将使用在'*创建和理解Vuex状态*'食谱中使用的Vue项目与Vue-CLI，或者我们可以开始一个新的。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE26]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Choose the manual features, add `Router` and `Vuex` as required features, as
    indicated in the '*How to do it...*' section of the '*Creating a simple Vuex store*' recipe.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能，根据'*如何做...*'部分的指示，添加`Router`和`Vuex`作为必需功能。
- en: 'Now we create a Vuex mutation and base type for the mutations:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建一个Vuex mutation和基本类型的mutation：
- en: Create a new file called `types.js` in the `user` folder inside the `src/store`
    folder, and open it.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/store`文件夹内的`user`文件夹中创建一个名为`types.js`的新文件，并打开它。
- en: 'In this file, we will create an `export default` JavaScript object, with a
    group of keys that will be the names of our mutations. Those keys will be `LOADING`,
    `ERROR`, `SET_USER_LIST`, `SET_USER_DATA`, `UPDATE_USER`, and `REMOVE_USER`:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将创建一个`export default`的JavaScript对象，其中包含一组键，这些键将是我们mutations的名称。这些键将是`LOADING`、`ERROR`、`SET_USER_LIST`、`SET_USER_DATA`、`UPDATE_USER`和`REMOVE_USER`：
- en: '[PRE27]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Create a new file called `mutations.js` in the `user` folder, and open it.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`user`文件夹中创建一个名为`mutations.js`的新文件，并打开它。
- en: 'Import the newly created `types.js` file:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入新创建的`types.js`文件：
- en: '[PRE28]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a new function called `setLoading`, which will receive the Vuex `state` as
    an argument and will define the loading property of the state to `true` when executed:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`setLoading`的新函数，它将接收Vuex `state`作为参数，并在执行时将状态的loading属性定义为`true`。
- en: '[PRE29]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a new function called `setError`, which will receive the Vuex `state` as
    an argument and `payload`. This function will set the `loading` property of the
    `state` to `false`, and the `error` property to the received `payload` argument:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`setError`的新函数，它将接收Vuex `state`和`payload`作为参数。这个函数将把`state`的`loading`属性设置为`false`，将`error`属性设置为接收到的`payload`参数：
- en: '[PRE30]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a new function called `setUserList`, which will receive the Vuex `state` and `payload` as
    an argument. This function will define the `usersList` property of the `state.data` to the
    received `payload` argument, set the `loading` property of the `state` to `false`,
    and the `error` property to `null`:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`setUserList`的新函数，它将接收Vuex `state`和`payload`作为参数。这个函数将把`state.data`的`usersList`属性定义为接收到的`payload`参数，将`state`的`loading`属性设置为`false`，将`error`属性设置为`null`：
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a new function called `setUserData`, which will receive the Vuex `state` and
    `payload` as arguments. This function will define the `userData` property of the `state.data` to the
    received `payload` argument, set the `loading` property of the `state` to `false`,
    and the `error` property to `null`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`setUserData`的新函数，它将接收Vuex `state`和`payload`作为参数。这个函数将把`state.data`的`userData`属性定义为接收到的`payload`参数，将`state`的`loading`属性设置为`false`，将`error`属性设置为`null`：
- en: '[PRE32]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a new function called `updateUser`, which will receive the Vuex `state` and `payload`
    as an argument. This function will update the user data in the `usersList` property
    of the `state.data`, define the `loading` property of the `state` to `false`,
    and the `error` property to `null`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`updateUser`的新函数，它将接收Vuex `state`和`payload`作为参数。这个函数将更新`state.data`的`usersList`属性中的用户数据，将`state`的`loading`属性定义为`false`，将`error`属性定义为`null`：
- en: '[PRE33]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a new function called `removeUser`, which will receive the Vuex `state` and `payload` as
    an argument. This function will remove the user data from the `usersList` property
    of the `state.data`, define the `loading` property of the `state` to `false`,
    and the `error` property to `null`:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`removeUser`的新函数，它将接收Vuex `state`和`payload`作为参数。这个函数将从`state.data`的`usersList`属性中删除用户数据，将`state`的`loading`属性定义为`false`，将`error`属性定义为`null`：
- en: '[PRE34]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Finally, create an `export default` object, with the keys being the types we
    created in the `types.js` file, and define each of the keys to the functions we
    created:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个`export default`对象，其中键是我们在`types.js`文件中创建的类型，并将每个键定义为我们创建的函数：
- en: '[PRE35]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Open the `index.js` file in the `user` folder.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`user`文件夹中的`index.js`文件。
- en: 'Import the newly created `mutations.js` file, and add it to the `export default`
    JavaScript object:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入新创建的`mutations.js`文件，并将其添加到`export default` JavaScript对象中：
- en: '[PRE36]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Each `mutation` is a function that will be called as a `commit`, and will have
    an *identifier* in the Vuex store. This identifier is the `mutation` key in the
    exported JavaScript object. In this recipe, we created a file that holds all the
    identifiers as an object value so that it can be used as a constant inside our
    code.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`mutation`都是一个将作为`commit`调用的函数，并且在Vuex存储中具有*标识符*。这个标识符是导出的JavaScript对象中的`mutation`键。在这个示例中，我们创建了一个文件，将所有标识符作为对象值保存，以便在我们的代码中作为常量使用。
- en: This pattern helps us in the development of Vuex `actions`, which need to know
    each `mutation` name.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式有助于我们开发需要知道每个`mutation`名称的Vuex `actions`。
- en: When exporting the `mutation` JavaScript object, we use the constant as the
    key and the corresponding function as its value, so the Vuex store can execute
    the correct function when called.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在导出`mutation` JavaScript对象时，我们使用常量作为键，相应的函数作为其值，这样Vuex存储在调用时可以执行正确的函数。
- en: See also
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about Vuex mutations at [https://vuex.vuejs.org/guide/mutations.html](https://vuex.vuejs.org/guide/mutations.html).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://vuex.vuejs.org/guide/mutations.html](https://vuex.vuejs.org/guide/mutations.html)找到有关Vuex
    mutations的更多信息。
- en: Creating and understanding the Vuex getters
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和理解Vuex getters
- en: Accessing data from `Vuex` can be done through the state itself, which can be
    very dangerous, or via the getters. The getters are like data that can be preprocessed
    and delivered without touching or messing with the Vuex store state.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 从`Vuex`中访问数据可以通过状态本身完成，这可能非常危险，或者通过getters完成。Getters就像是可以预处理并传递数据而不触及或干扰Vuex存储状态的数据。
- en: The whole idea behind getters is the possibility to write custom functions that
    can extract data from your state in a single place when you need it, so that you
    get just the data you need.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Getter背后的整个理念是可以编写自定义函数，可以在需要时从状态中提取数据的单一位置，以便获得所需的数据。
- en: In this recipe, we will learn how to create a Vuex getter and a dynamic getter
    that can be used as a high-order function.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何创建一个Vuex getter和一个可以作为高阶函数使用的动态getter。
- en: Getting ready
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisite for this recipe is as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的先决条件如下：
- en: Node.js 12+
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the 'Creating and understanding the Vuex mutations' recipe, or we can start
    a new one.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们将使用在“创建和理解Vuex mutations”示例中使用的Vue项目与Vue-CLI，或者我们可以启动一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新的项目，打开Terminal（macOS或Linux）或Command Prompt/PowerShell（Windows）并执行以下命令：
- en: '[PRE37]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Choose the manual features, and add Router and `Vuex` as needed features, as
    indicated in the 'How to do it...' section of the 'Creating a simple Vuex store' recipe.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能，并根据“如何做...”部分中的指示添加Router和`Vuex`作为需要的功能。
- en: 'In the following steps, we will create the Vuex getters:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将创建Vuex的getter：
- en: Create a new file called `getters.js` in the `src/store/user` folder.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/store/user`文件夹中创建一个名为`getters.js`的新文件。
- en: 'Create a new function called `getUsersList`, and return the `state.data.usersList`
    property:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getUsersList`的新函数，并返回`state.data.usersList`属性：
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In a `getter` function, the first argument that the function will receive will
    be always the current `state` of the Vuex `store`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在`getter`函数中，函数将始终接收到的第一个参数是Vuex `store`的当前`state`。
- en: 'Create a new function called `getUserData`, and return the `state.data.userData` property:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getUserData`的新函数，并返回`state.data.userData`属性：
- en: '[PRE39]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create a new function called `getUserById`, and return another function that
    receives `userId` as an argument. This returning function will return the result
    of a search of `state.data.usersList` that matches the same `id` as the `userId`
    received:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getUserById`的新函数，并返回另一个函数，该函数接收`userId`作为参数。这个返回函数将返回与接收到的`userId`相匹配的`state.data.usersList`的搜索结果：
- en: '[PRE40]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a new function called `isLoading`,  and return the `state.loading` property:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`isLoading`的新函数，并返回`state.loading`属性：
- en: '[PRE41]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a new function called `hasError`, and return the `state.error` property:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`hasError`的新函数，并返回`state.error`属性：
- en: '[PRE42]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Finally, create an `export default` JavaScript object, with all the created
    functions as properties:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个带有所有创建的函数作为属性的`export default` JavaScript对象：
- en: '[PRE43]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Open the `index.js` file in the `src/store/user` folder.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/store/user`文件夹中打开`index.js`文件。
- en: 'Import the newly created `getters.js` file, and add it to the export default
    JavaScript object:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入新创建的`getters.js`文件，并将其添加到默认导出的JavaScript对象中：
- en: '[PRE44]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Getters are like a GET function from an object and are static cached functions
    – they only change the returned value when the `state` has changed. But if you
    add the return as a high-order function, you can give it more power to use a more
    sophisticated algorithm and provide specific data.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Getter就像是从对象中获取的GET函数，是静态缓存函数-只有在`state`发生变化时才会改变返回值。但是，如果将返回值作为高阶函数添加，就可以赋予它更多的功能，使用更复杂的算法并提供特定的数据。
- en: 'In this recipe, we created two types of getters: the most basic, with simple
    data return, and the high-order function, which needs to be called as a function
    to retrieve the value you want.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了两种类型的getter：最基本的，返回简单数据，以及高阶函数，需要作为函数调用以检索所需的值。
- en: There's more...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Using getters with business logic is a good way to gather more data on the state.
    This is a good pattern because, on larger projects, it helps other developers
    to understand more what is going on in each of the GET functions and how it works
    behind the curtain.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用带有业务逻辑的getter是收集更多状态数据的好方法。这是一个很好的模式，因为在较大的项目中，它可以帮助其他开发人员更好地理解每个GET函数中发生了什么以及它在幕后是如何工作的。
- en: You always need to remember that getters are synchronous functions and reactive
    to the state change, so the data on the getters is memoized and cached until the
    single source of truth receives a commit and changes it.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终需要记住，getter是同步函数，并对状态变化具有反应性，因此getter上的数据是被记忆和缓存的，直到单一的真相源接收到提交并更改它。
- en: See also
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: You can find more information about Vuex getters at [https://vuex.vuejs.org/guide/getters.html](https://vuex.vuejs.org/guide/getters.html).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuex.vuejs.org/guide/getters.html](https://vuex.vuejs.org/guide/getters.html)找到有关Vuex
    getters的更多信息。
- en: Creating and understanding the Vuex actions
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和理解Vuex actions
- en: You have all your state ready, your dataset, and now you need to fetch new data from
    an outside source or change this data inside your application. Here comes the
    part where actions do their job.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经准备好了所有的状态，你的数据集，现在你需要从外部来源获取新数据或者在你的应用程序中改变这些数据。这就是操作发挥作用的地方。
- en: Actions are responsible for orchestrating the process in this communication
    between the application and the outside world. Controlling when the data need
    to be mutated on the state and returned to the caller of the action.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 操作负责在应用程序和外部世界之间的通信中编排过程。控制数据何时需要在状态上进行变异并返回给操作的调用者。
- en: Usually, the action is a dispatch through a component or a view, but there are
    some occasions where actions can dispatch another action to create a chain of
    actions in your application.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，操作是通过组件或视图进行调度，但有时操作可以调度另一个操作，以在应用程序中创建一系列操作。
- en: In this recipe, we will learn how to create the actions needed in our application
    to define a user's list, update a user, and remove a user.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何在我们的应用程序中创建所需的操作，以定义用户列表，更新用户和删除用户。
- en: Getting ready
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisite for this recipe is as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件如下：
- en: Node.js 12+
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating and understanding the Vuex getters*' recipe, or we can start
    a new one.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们将使用在“*创建和理解Vuex getters*”配方中使用的Vue项目，或者我们可以启动一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新的项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE45]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Choose the manual features, and add `Router` and `Vuex` as required features,
    as indicated in the '*How to do it...* section of the '*Creating a simple Vuex
    store*' recipe.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能，并根据“*如何做...*”部分和“*创建一个简单的Vuex存储*”配方中指示的要求，添加`Router`和`Vuex`作为必需的功能。
- en: 'Now follow these steps to create the Vuex actions:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下步骤创建Vuex操作：
- en: Create a new file called `actions.js` in the `src/store/user` folder.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/store/user`文件夹中创建一个名为`actions.js`的新文件。
- en: 'Import the mutation types files (`types.js`), and the `getHttp`, `patchHttp`,
    `postHttp`, and `deleteHttp` functions from the `fetchApi` wrapper:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`fetchApi`包装器中导入变异类型文件（`types.js`）和`getHttp`，`patchHttp`，`postHttp`和`deleteHttp`函数：
- en: '[PRE46]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create a new `asynchronous` function called `createUser`, which receives as
    the first argument a deconstructed JavaScript object, with the `commit` property, and
    `userData` as the second argument, which will be used to create the user. Add
    a `try/catch` statement, in the `try` context. First, we execute `commit(MT.LOADING)`,
    then we fetch the users lists from the API, and finally, `commit(MT.SET_USER_DATA,
    data)`, passing the users lists to be mutated. If we receive an exception and
    get into the `Catch` statement, we will execute `commit(MT.ERROR, error)`, passing
    the error that we receive to the `state`:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`createUser`的新的`异步`函数，它接收解构的JavaScript对象作为第一个参数，其中包含`commit`属性，并将`userData`作为第二个参数，用于创建用户。添加一个`try/catch`语句，在`try`上下文中。首先，我们执行`commit(MT.LOADING)`，然后我们从API中获取用户列表，最后，执行`commit(MT.SET_USER_DATA,
    data)`，将用户列表传递给被突变。如果我们收到异常并进入`Catch`语句，我们将执行`commit(MT.ERROR, error)`，将收到的错误传递给`state`：
- en: '[PRE47]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Create a new `asynchronous` function called `fetchUsersList`, which receives
    as the first argument a deconstructed JavaScript object, with the `commit` property. Add
    a `try/catch` statement in the `try` context. We execute `commit(MT.LOADING)`,
    then we fetch the users lists from the API, and finally, `commit(MT.SET_USER_LIST,
    data)`, passing the users lists to be mutated. If we receive an exception and
    get into the `catch` statement, we will execute a mutation of `commit(MT.ERROR,
    error)`, passing the error that we receive to the `state`:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`fetchUsersList`的新的`异步`函数，它接收一个解构的JavaScript对象作为第一个参数，其中包含`commit`属性。在`try`上下文中添加一个`try/catch`语句。我们执行`commit(MT.LOADING)`，然后从API中获取用户列表，最后执行`commit(MT.SET_USER_LIST,
    data)`，将用户列表传递给mutation。如果我们收到异常并进入`catch`语句，我们将执行一个`commit(MT.ERROR, error)`的mutation，将收到的错误传递给`state`。
- en: '[PRE48]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create a new `asynchronous` function called `fetchUsersData`, which receives
    as the first argument a deconstructed JavaScript object, with the `commit` property, and
    the second argument the `userId` that will be fetched. Add a `try/catch` statement,
    in the `try` context. We execute `commit(MT.LOADING)`, then we fetch the users
    lists from the API, and finally, `commit(MT.SET_USER_DATA, data)`, passing the
    users lists to be mutated. If we receive an exception and get into the `catch` statement,
    we will execute a mutation of `commit(MT.ERROR, error)`, passing the error that
    we receive to the `state`:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`fetchUsersData`的新的`异步`函数，它接收一个解构的JavaScript对象作为第一个参数，其中包含`commit`属性，以及作为第二个参数的将要获取的`userId`。在`try`上下文中添加一个`try/catch`语句。我们执行`commit(MT.LOADING)`，然后从API中获取用户列表，最后执行`commit(MT.SET_USER_DATA,
    data)`，将用户列表传递给mutation。如果我们收到异常并进入`catch`语句，我们将执行一个`commit(MT.ERROR, error)`的mutation，将收到的错误传递给`state`。
- en: '[PRE49]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Create a new `asynchronous` function called `updateUser`, which receives as
    the first argument a deconstructed JavaScript object, with the `commit` property, and `payload`
    as the second argument. Add a `try/catch` statement, in the `try` context. We
    execute `commit(MT.LOADING)`, then we patch the user data to the API and finally `commit(MT.UPDATE_USER,
    payload)`, passing the user new data to be mutated. If we receive an exception
    and get into the `catch` statement, we will execute a mutation of `commit(MT.ERROR,
    error)`, passing the error that we received to the `state`:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`updateUser`的新的`异步`函数，它接收一个解构的JavaScript对象作为第一个参数，其中包含`commit`属性，以及作为第二个参数的`payload`。在`try`上下文中添加一个`try/catch`语句。我们执行`commit(MT.LOADING)`，然后将用户数据提交到API，最后执行`commit(MT.UPDATE_USER,
    payload)`，将新的用户数据传递给mutation。如果我们收到异常并进入`catch`语句，我们将执行一个`commit(MT.ERROR, error)`的mutation，将收到的错误传递给`state`。
- en: '[PRE50]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create a new `asynchronous` function called `removeUser`, which receives as
    the first argument a deconstructed JavaScript object, with the `commit` property,
    and `userId` as the second argument. Add a `try/catch` statement, in the `try` context.
    We execute `commit(MT.LOADING)`, then we delete the user data from the API and
    finally, `commit(MT.REMOVE_USER, userId)`, passing the `userId` to be used in
    the mutation. If we receive an exception and get into the `Catch` statement, we
    will execute a mutation of `commit(MT.ERROR, error)`, passing the error that we
    receive to the `state`:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`removeUser`的新的`异步`函数，它接收一个解构的JavaScript对象作为第一个参数，其中包含`commit`属性，以及作为第二个参数的`userId`。在`try`上下文中添加一个`try/catch`语句。我们执行`commit(MT.LOADING)`，然后从API中删除用户数据，最后执行`commit(MT.REMOVE_USER,
    userId)`，将`userId`传递给mutation。如果我们收到异常并进入`catch`语句，我们将执行一个`commit(MT.ERROR, error)`的mutation，将收到的错误传递给`state`。
- en: '[PRE51]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Finally, we will create an export default JavaScript object, with all the created
    functions as properties:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将创建一个默认导出的JavaScript对象，其中包含所有创建的函数作为属性：
- en: '[PRE52]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Import the newly created `actions.js` file in the `index.js` in the `src/store/user`
    folder, and add it to the `export default` JavaScript object:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/store/user`文件夹的`index.js`中导入新创建的`actions.js`文件，并将其添加到`export default`
    JavaScript对象中：
- en: '[PRE53]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: How it works...
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Actions are the initializers of all the Vuex life cycle changes. When dispatched,
    the action can execute a mutation commit, or another action dispatch, or even
    an API call to the server.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 操作是所有Vuex生命周期更改的初始化程序。当分发时，操作可以执行一个mutation commit，或者另一个操作dispatch，甚至是对服务器的API调用。
- en: In our case, we took our API calls and put it inside the actions, so when the
    asynchronous function returns, we can execute the commit and set the state to
    the result of the function.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将我们的API调用放在了actions中，因此当异步函数返回时，我们可以执行commit并将状态设置为函数的结果。
- en: See also
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about Vuex actions at [https://vuex.vuejs.org/guide/actions.html](https://vuex.vuejs.org/guide/actions.html).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://vuex.vuejs.org/guide/actions.html](https://vuex.vuejs.org/guide/actions.html)找到有关Vuex操作的更多信息。
- en: Creating a dynamic component with Vuex
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vuex创建动态组件
- en: Combining Vuex with Vue components, it's possible to employ the reactivity between
    multiple components without the need for direct parent-child communication, and
    split the responsibilities of the components.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 将Vuex与Vue组件结合使用，可以在多个组件之间实现响应性，而无需直接进行父子通信，并分担组件的责任。
- en: Using this method allows the developer to enhance the scale of the application,
    where there is no need to store the state of the data inside the components itself,
    but using a single source of truth as a store for the whole application.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法允许开发人员增强应用程序的规模，无需将数据状态存储在组件本身，而是使用单一真相作为整个应用程序的存储。
- en: In this recipe, we will use the last recipes to improve an application, where
    it was using parent-child communication and making it as a single source of truth
    available in the whole application.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用最后的配方来改进一个应用程序，其中使用了父子通信，并将其作为整个应用程序中可用的单一真相。
- en: Getting ready
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The prerequisite for this recipe is as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件如下：
- en: Node.js 12+
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To create our dynamic component, we will transform the components from stateful
    to stateless, and will extract some parts that can be made into new components
    as well.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的动态组件，我们将把组件从有状态转换为无状态，并提取一些可以制作成新组件的部分。
- en: We will use the Vue project with Vue-CLI that we used in the '*Creating and
    understanding the Vuex actions*' recipe, or we can start a new one.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在“*创建和理解Vuex操作*”配方中使用的Vue项目与Vue-CLI，或者我们可以开始一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE54]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Choose the manual features, and add `Router` and `Vuex` as required features,
    as indicated in the '*How to do it...*' section of the '*Creating a simple Vuex
    store*' recipe.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能，并根据“*如何做...*”部分中“创建简单的Vuex存储”配方中的指示添加`Router`和`Vuex`作为所需功能。
- en: 'Our recipe will be divided into five parts:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方将分为五个部分：
- en: Creating the user list component
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户列表组件
- en: Editing the user list page
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑用户列表页面
- en: Editing the user view page
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑用户视图页面
- en: Editing the user view page
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑用户视图页面
- en: Editing the user create page
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑用户创建页面
- en: Let's get started.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Creating the user list component
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户列表组件
- en: Because Vuex gives us the ability to have a single source of truth on our application,
    we can create a new component for our application that will handle the user listing
    and triggers the Vuex action that fetches the users list from the server. This
    component can be stateless and execute the `Vuex` actions by itself.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Vuex给了我们在应用程序中拥有单一数据源的能力，我们可以为我们的应用程序创建一个新的组件，该组件将处理用户列表并触发从服务器获取用户列表的Vuex操作。这个组件可以是无状态的，并且可以自行执行`Vuex`操作。
- en: Single file component <script> section
  id: totrans-298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'Let''s code the `<script>` section of the single file component:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写单文件组件的`<script>`部分：
- en: Create a new file called `userList.vue` in the `src/components` folder.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个名为`userList.vue`的新文件。
- en: 'Import the `changeRouterMixin` from the `src/mixin` folder:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`src/mixin`文件夹导入`changeRouterMixin`：
- en: '[PRE55]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Create an `export default` JavaScript object, and add a new Vue property called
    `mixin`, with a default value of an array. To this array, add the imported `changeRouteMixin`:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`export default`的JavaScript对象，并添加一个名为`mixin`的新Vue属性，其默认值为一个数组。将导入的`changeRouteMixin`添加到这个数组中：
- en: '[PRE56]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Create a new Vue property called `computed`. In this property, create a new
    value called `userList`. This property will be a function returning the Vuex store
    getter `getUsersList`:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`computed`的新Vue属性。在这个属性中，创建一个名为`userList`的新值。这个属性将是一个返回Vuex存储器getter`getUsersList`的函数：
- en: '[PRE57]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Single file component <template> section
  id: totrans-307
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'Here, we are going to code the `<template>` section of the single file component:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将编写单文件组件的`<template>`部分：
- en: Open the `List.vue` file from the `users` folder inside the `views` folder and
    copy the content and component from the `VsTable` component.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`views`文件夹内`users`文件夹中的`List.vue`文件，并复制`VsTable`组件的内容和组件。
- en: Open the `userList.vue` file from the `src/components` folder.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/components`文件夹中的`userList.vue`文件。
- en: 'Paste the content you''d copied from the `List.vue` file inside the `<template>`
    section:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你从`List.vue`文件中复制的内容粘贴到`<template>`部分中：
- en: '[PRE58]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Editing the user list page
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑用户列表页面
- en: Now that we have extracted the user list into a new component, we need to import
    this component and remove the old VsTable that was cluttering our view.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将用户列表提取到一个新的组件中，我们需要导入这个组件并移除旧的VsTable，它使我们的视图混乱。
- en: Single file component <script> section
  id: totrans-315
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'In this step, we are going to write the `<script>` section of the single file
    component:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将编写单文件组件的`<script>`部分：
- en: Open the `List.vue` file in the `users` folder inside the `views` folder.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`views`文件夹内`users`文件夹中的`List.vue`文件。
- en: 'Import the newly created Users List component, from the `components` folder:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`components`文件夹导入新创建的用户列表组件：
- en: '[PRE59]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'In the `export default` JavaScript object, add a new property called `components`.
    Declare the property as a JavaScript object, and add the imported `UserTableList`
    component to the object:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`export default`的JavaScript对象中，添加一个名为`components`的新属性。将该属性声明为JavaScript对象，并将导入的`UserTableList`组件添加到对象中：
- en: '[PRE60]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In the `methods` property, at the `getAllUsers` function, we need to change
    the content to execute a Vuex dispatch when called. This method will perform the
    `fetchUsersList` Vuex action:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性中，在`getAllUsers`函数中，我们需要更改内容以在调用时执行一个Vuex分发。这个方法将执行`fetchUsersList`的Vuex操作：
- en: '[PRE61]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Finally, in the `deleteUser` function, we need to change the content to execute
    a Vuex dispatch when called. This method will perform the `removeUser` Vuex action,
    passing the `userId` as the argument:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`deleteUser`函数中，我们需要更改内容以在调用时执行一个Vuex分发。这个方法将执行`removeUser`的Vuex操作，并将`userId`作为参数传递：
- en: '[PRE62]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Single file component <template> section
  id: totrans-326
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'Let''s code the `<template>` section of the single file component:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写单文件组件的`<template>`部分：
- en: Open the `List.vue` file in the `users` folder inside the `view` folder.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`view`文件夹内的`users`文件夹中打开`List.vue`文件。
- en: 'Replace the `VsTable` component and its contents with the newly imported `UserTableList`:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用新导入的`UserTableList`替换`VsTable`组件及其内容：
- en: '[PRE63]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Editing the user view page
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑用户视图页面
- en: Now we can add the Vuex to the user view page. We will add the Vuex actions
    and getters to manipulate the data, and extract from the page the responsibility
    of managing it.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将Vuex添加到用户视图页面。我们将添加Vuex操作和获取器来操作数据，并从页面中提取管理责任。
- en: Single file component <script> section
  id: totrans-333
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件的`<script>`部分
- en: 'Now you are going to create the `<script>` section of the single file component:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你要创建单文件组件的`<script>`部分：
- en: Open the `View.vue` file from the `users` folder inside the `view` folder.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`view`文件夹内的`users`文件夹中打开`View.vue`文件。
- en: Remove the Vue `data` property.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除Vue的`data`属性。
- en: 'Inside the Vue `computed` property, add the `userData`, returning a Vuex getter, `getUserData`:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`computed`属性中，添加`userData`，返回一个Vuex的getter，`getUserData`：
- en: '[PRE64]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Finally, in the `getUserById` method, change the content to dispatch a Vuex
    action, `fetchUserData`, passing the computed `userId` property as a parameter:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`getUserById`方法中，将内容更改为调度一个Vuex操作`fetchUserData`，传递计算的`userId`属性作为参数：
- en: '[PRE65]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Single file component <template> section
  id: totrans-341
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件的`<template>`部分
- en: 'It''s time to write the `<template>` section of the single file component:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候编写单文件组件的`<template>`部分了：
- en: Open the `View.vue` file in the `users` folder inside the `view` folder.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`view`文件夹内的`users`文件夹中打开`View.vue`文件。
- en: 'In the UserForm component, change the `v-model` directive to a `:value` directive:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在UserForm组件中，将`v-model`指令更改为`:value`指令：
- en: '[PRE66]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: When using a read-only value, or you need to remove the syntactic sugar of the
    `v-model` directive, you can declare the input value as a `:value` directive and
    the value change event to an `@input` event listener.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用只读值，或者需要删除`v-model`指令的语法糖时，可以将输入值声明为`:value`指令，并将值更改事件声明为`@input`事件监听器。
- en: Editing the user edit page
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑用户编辑页面
- en: We need to edit our user. In the last recipe, we used a stateful page and executed
    everything within the page. We will transform the state into a temporary state,
    and execute the API calls on the Vuex actions.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编辑我们的用户。在上一个示例中，我们使用了一个有状态的页面，并在页面内执行了所有操作。我们将状态转换为临时状态，并在Vuex操作上执行API调用。
- en: Single file component <script> section
  id: totrans-349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件的`<script>`部分
- en: 'Here, we are going to create the `<script>` section of the single file component:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建单文件组件的`<script>`部分：
- en: Open the `Edit.vue` file in the `users` folder inside the `view` folder.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`view`文件夹内的`users`文件夹中打开`Edit.vue`文件。
- en: 'In the Vue `data` property, change the name of the data from `userData` to
    `tmpUserData`:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`data`属性中，将数据的名称从`userData`更改为`tmpUserData`：
- en: '[PRE67]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In the Vue `computed` property, add a new property called `userData`, which
    will return the Vuex getter `getUserData`:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`computed`属性中，添加一个名为`userData`的新属性，它将返回Vuex的getter`getUserData`：
- en: '[PRE68]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Add a new Vue property named `watch`, and add a new property, `userData`, which
    will be a JavaScript object. In this object, add three properties, `handler`,
    `immediate`, and `deep`. The `handler` property will be a function that receives
    an argument called `newData`, which will set `tmpUserData` to this argument. The
    `immediate` and `deep` properties are both boolean properties set to `true`:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`watch`的新Vue属性，并添加一个名为`userData`的新属性，它将是一个JavaScript对象。在这个对象中，添加三个属性，`handler`，`immediate`和`deep`。`handler`属性将是一个接收名为`newData`的参数的函数，它将`tmpUserData`设置为这个参数。`immediate`和`deep`属性都是设置为`true`的布尔属性：
- en: '[PRE69]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In the Vue `methods` property, we need to change the contents of `getUserById` to
    dispatch a Vuex action named `fetchUserData`, passing the `computed` property
    `userId` as a parameter:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`methods`属性中，我们需要更改`getUserById`的内容以调度名为`fetchUserData`的Vuex动作，并将`computed`属性`userId`作为参数传递：
- en: '[PRE70]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In the `updateUser` method, change the content to dispatch a Vuex action named `updateUser`,
    passing `tmpUserData` as a parameter:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`updateUser`方法中，更改内容以调度名为`updateUser`的Vuex动作，并将`tmpUserData`作为参数传递：
- en: '[PRE71]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Single file component <template> section
  id: totrans-362
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we are going to write the `<template>` section of the single
    file component:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将编写单文件组件的`<template>`部分：
- en: Open the `Edit.vue` in the `users` folder inside the `view` folder.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`view`文件夹内的`users`文件夹中打开`Edit.vue`。
- en: 'Change the target of the `v-model` directive of the `UserForm` component to
    `tmpUserData`:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`UserForm`组件的`v-model`指令的目标更改为`tmpUserData`：
- en: '[PRE72]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Editing the user create page
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑用户创建页面
- en: For the user create page, the changes will be minimal, as it only executes an
    API call. We need to add the Vuex action dispatch.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户创建页面，更改将是最小的，因为它只执行API调用。我们需要添加Vuex动作调度。
- en: Single file component <script> section
  id: totrans-369
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'Here, we are going to create the `<script>` section of the single file component:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建单文件组件的`<script>`部分：
- en: Open the `Create.vue` file in the `users` folder inside the `view` folder.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`view`文件夹内的`users`文件夹中打开`Create.vue`文件。
- en: 'Change the content of the `createUser` method to dispatch a Vuex action named
    `createUser`, passing `userData` as the parameter:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`createUser`方法的内容以调度名为`createUser`的Vuex动作，并将`userData`作为参数传递：
- en: '[PRE73]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: How it works...
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In all four pages, we made changes that removed the business logic or API calls
    from the page to the Vuex store and tried making it less responsible for maintaining
    the data.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有四个页面中，我们进行了更改，将业务逻辑或API调用从页面中移除到Vuex存储，并尝试使其对于数据的维护责任更少。
- en: Because of that, we could place a piece of code into a new component that can
    be placed anywhere in our application, and will show the current users lists without
    any limitations from the container that is instantiating it.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将一段代码放入一个新组件中，该组件可以放置在应用程序的任何位置，并且将显示当前用户列表，而不受实例化它的容器的任何限制。
- en: This pattern helps us in the development of more prominent applications, where
    there is a need for components that are less business-oriented and more focused
    on their tasks.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式有助于我们开发更突出的应用程序，其中需要的组件不那么业务导向，而更专注于它们的任务。
- en: See also
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about Vuex application structures at [https://vuex.vuejs.org/guide/structure.html](https://vuex.vuejs.org/guide/structure.html).
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuex.vuejs.org/guide/structure.html](https://vuex.vuejs.org/guide/structure.html)找到有关Vuex应用程序结构的更多信息。
- en: Adding hot-module-reload for development
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为开发添加热模块重载
- en: The **hot-module-reload** (**HMR**) is a technique used for the faster development
    of the application, where you don't need to refresh the whole page to get the
    new code you have just changed on the editor. The HMR will change and refresh
    only the part that were updated by you on the editor.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '**热模块重载**（**HMR**）是一种用于加快应用程序开发的技术，您无需刷新整个页面即可获取您刚刚在编辑器上更改的新代码。HMR将仅更改和刷新您在编辑器上更新的部分。'
- en: In all the Vue-CLI projects or Vue-based frameworks, such as Quasar Framework,
    the HMR is present in the presentation of the application. So each time you change
    any file that is a Vue component and it's rendered, the application will replace
    the old code for the new one on the fly.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有Vue-CLI项目或基于Vue的框架（如Quasar Framework）中，HMR存在于应用程序的呈现中。因此，每当您更改任何文件，该文件是Vue组件并且正在呈现时，应用程序将在运行时将旧代码替换为新代码。
- en: In this recipe, we will learn how to add HMR to a Vuex store and be able to
    change the Vuex store without the need to refresh our entire application.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何向Vuex存储添加HMR，并能够在不需要刷新整个应用程序的情况下更改Vuex存储。
- en: Getting ready
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisite for this recipe is as follows:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 此教程的先决条件如下：
- en: Node.js 12+
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating a dynamic component with Vuex*' recipe, or we can start a new
    one.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们将使用在“*使用Vuex创建动态组件*”中使用的Vue项目和Vue-CLI，或者我们可以启动一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新的项目，请打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE74]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Choose the manual features, add `Router` and `Vuex` as required features, as
    indicated in the '*How to do it...*' section of the '*Creating a simple Vuex store*' recipe.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能，将`Router`和`Vuex`添加为所需功能，如“*如何做...*”部分和“*创建简单的Vuex存储*”教程中所示。
- en: 'In the following steps, we will add HMR to Vuex:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将向Vuex添加HMR：
- en: Open the `index.js` file in the `src/store` folder.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/store`文件夹中的`index.js`文件。
- en: 'Transform the `export default` into a constant called `store`, and make it
    exportable:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`export default`转换为一个名为`store`的常量，并使其可导出：
- en: '[PRE75]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Check if the webpack `hot-module-reload` plugin is active:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查webpack `hot-module-reload`插件是否处于活动状态：
- en: '[PRE76]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Create a new constant called `hmr`, which is an array containing the direction
    to the `index.js`, `getters.js`, `actions.js`, and `mutations.js` files of the
    `user` folder:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`hmr`的新常量，其中包含`user`文件夹中`index.js`，`getters.js`，`actions.js`和`mutations.js`文件的路径：
- en: '[PRE77]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Create a new function called `reloadCallback`. In this function, create three
    constants, `getters`, `actions`, and `mutations`. Each constant will point to
    the equivalent file inside the `user` folder, and call the `store.hotUpdate` function,
    passing an object as an argument with the values for the constants you created:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`reloadCallback`的新函数。在这个函数中，创建三个常量`getters`，`actions`和`mutations`。每个常量将指向`user`文件夹中的等效文件，并调用`store.hotUpdate`函数，将一个对象作为参数传递，其中包含您创建的常量的值：
- en: '[PRE78]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Because of the Babel output of the files, you need to add the `.default` in
    the end of the files that you are dynamically importing with the webpack `require`
    function.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文件的Babel输出，您需要在使用webpack `require`函数动态导入的文件末尾添加`.default`。
- en: 'Execute the webpack HMR `accept` function, passing as the first argument the
    `hmr` constant and `reloadCallback` as the second argument:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行webpack HMR的`accept`函数，将`hmr`常量作为第一个参数传递，将`reloadCallback`作为第二个参数传递：
- en: '[PRE79]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Finally, default export the created `store`:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，默认导出创建的`store`：
- en: '[PRE80]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: How it works...
  id: totrans-410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Vuex store supports HMR with the API of the webpack HMR plugin.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex存储支持使用webpack HMR插件的API进行HMR。
- en: When it's available, we create a list of possible files that can be updated,
    so that webpack can be aware of any updates to those files. When any of those
    files are updated, a special callback that you created is executed. This callback
    is the one that enables Vuex to update or change the behavior of the updated file
    entirely.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 当它可用时，我们创建一个可能需要更新的文件列表，以便webpack可以意识到这些文件的任何更新。当这些文件中的任何一个被更新时，将执行您创建的特殊回调。这个回调是使Vuex能够完全更新或更改更新文件的行为的回调。
- en: See also
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about Vuex hot reloading at [https://vuex.vuejs.org/guide/hot-reload.html](https://vuex.vuejs.org/guide/hot-reload.html).
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuex.vuejs.org/guide/hot-reload.html](https://vuex.vuejs.org/guide/hot-reload.html)找到有关Vuex热重载的更多信息。
- en: You can find more information about webpack HMR at [https://webpack.js.org/guides/hot-module-replacement/](https://webpack.js.org/guides/hot-module-replacement/).
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://webpack.js.org/guides/hot-module-replacement/](https://webpack.js.org/guides/hot-module-replacement/)
    找到有关 webpack HMR 的更多信息。
- en: Creating a Vuex module
  id: totrans-416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 Vuex 模块
- en: As our application grows, working in a single object can be very risky. The
    maintainability of the project and the risks that it can generate on every change
    get worse each time.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的应用程序的增长，在单个对象中工作可能非常危险。项目的可维护性和每次更改可能产生的风险都会变得更糟。
- en: Vuex has an approach called modules that helps us to separate our store into
    different branches of stores. These branches, or modules, have on each one of
    them a different set of state, mutation, getter, and action. This pattern helps
    with development and cuts the risk of adding new features to the application.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex 有一种叫做模块的方法，可以帮助我们将存储分成不同的存储分支。这些分支或模块中的每一个都有不同的状态、变化、获取器和操作。这种模式有助于开发，并减少了向应用程序添加新功能的风险。
- en: In this recipe, we will learn how to create a module and how to work with it,
    separating it into dedicated branches.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何创建一个模块以及如何与之一起工作，将其分成专用分支。
- en: Getting ready
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisite for this recipe is as follows:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程的先决条件如下：
- en: Node.js 12+
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的 Node.js 全局对象如下：
- en: '`@vue/cli`'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating a dynamic component with Vuex*' recipe, or we can start a new
    one.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的组件，我们将使用在“*使用 Vuex 创建动态组件*”中使用的 Vue 项目和 Vue-CLI，或者我们可以开始一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的项目，打开终端（macOS 或 Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE81]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Choose the manual features and add `Router` and `Vuex` as required features,
    as indicated in the '*How to do it...*' section of the '*Creating a simple Vuex
    store*' recipe.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能并将 `Router` 和 `Vuex` 添加为必需功能，如“*如何做...*”部分和“*创建简单的 Vuex 存储*”教程中所示。
- en: 'Our recipe will be divided into two parts:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的教程将分为两个部分：
- en: Creating the new authentication module
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的认证模块
- en: Adding modules to Vuex
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Vuex 添加模块
- en: Let's get started.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Creating the new authentication module
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新的认证模块
- en: To start, we need to create a new `Vuex` module. This example module will be
    called `authentication`, and will store the credentials data for the user.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个新的 `Vuex` 模块。这个示例模块将被称为 `authentication`，并将存储用户的凭据数据。
- en: 'In these steps, we will create the `authentication` module for `Vuex`:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些步骤中，我们将为 `Vuex` 创建 `authentication` 模块：
- en: Create a new folder called `authentication` in the `src/store` folder.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/store` 文件夹中创建一个名为 `authentication` 的新文件夹。
- en: In this newly created folder, create a new file called `state.js`, and open
    it.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新创建的文件夹中，创建一个名为 `state.js` 的新文件，并打开它。
- en: 'Create a function called `generateState` that will return a JavaScript object
    with the properties of `data.username`, `data.token`, `data.expiresAt`, `loading`,
    and `error`:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `generateState` 的函数，它将返回一个具有 `data.username`、`data.token`、`data.expiresAt`、`loading`
    和 `error` 属性的 JavaScript 对象：
- en: '[PRE82]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Create an `export default` object at the end of the file. This object will
    be a JavaScript object. We will destruct the return of the `generateState` function:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾创建一个 `export default` 对象。这个对象将是一个 JavaScript 对象。我们将解构 `generateState` 函数的返回值：
- en: '[PRE83]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Create a new file called `index.js` in the `authentication` folder inside the
    `src/store` folder, and open it.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/store` 文件夹中的 `authentication` 文件夹中创建一个名为 `index.js` 的新文件，并打开它。
- en: 'Import the newly created `state.js` file:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入新创建的 `state.js` 文件：
- en: '[PRE84]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Create an `export default` object at the end of the file. This object will
    be a JavaScript object. Add a new property called `namespaced` with the value
    set to `true`, and add the imported `state`:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾创建一个`export default`对象。这个对象将是一个JavaScript对象。添加一个名为`namespaced`的新属性，其值设置为`true`，并添加导入的`state`：
- en: '[PRE85]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Adding the modules to Vuex
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将模块添加到Vuex
- en: Now that we've created our modules, we will add them to the Vuex store. We can
    integrate the new modules with our old code. This is not a problem because Vuex
    will handle the new module as a namespaced object, with a completely separate
    Vuex store.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的模块，我们将把它们添加到Vuex存储中。我们可以将新模块与旧代码集成在一起。这不是问题，因为Vuex将把新模块处理为一个命名空间对象，具有完全独立的Vuex存储。
- en: 'Now in these steps, we will add the created modules to the Vuex:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这些步骤中，我们将把创建的模块添加到Vuex中：
- en: Open the `index.js` file in the `src/store` folder.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/store`文件夹中的`index.js`文件。
- en: 'Import the `index.js` file from the `authentication` folder:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`authentication`文件夹中导入`index.js`文件：
- en: '[PRE86]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'In the `Vuex.Store` function, add a new property called `modules`, which is
    a JavaScript object. Then add the imported `User` and `Authentication` modules:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Vuex.Store`函数中，添加一个名为`modules`的新属性，这是一个JavaScript对象。然后添加导入的`User`和`Authentication`模块：
- en: '[PRE87]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: How it works...
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Modules work like separate Vuex stores but in the same Vuex single source of
    truth. This helps in the development of larger-scale applications because you
    can maintain and work with a more complex structure without the need to check
    for problems in the same file.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的工作方式类似于单一的Vuex存储，但在同一个Vuex单一的数据源中。这有助于开发更大规模的应用程序，因为你可以维护和处理更复杂的结构，而无需在同一个文件中检查问题。
- en: In the meantime, it's possible to work with modules and the plain Vuex store,
    migrating from legacy applications so you don't have to re-write everything from
    the ground up to be able to use the module structure.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，可以使用模块和普通的Vuex存储，从传统应用程序迁移，这样你就不必从头开始重写所有内容才能使用模块结构。
- en: In our case, we added a new module named `authentication` with just a state
    present in the store, and continued with the old user Vuex store, so that in the
    future we can refactor the user store into a new module and separate it off into
    a more specific, domain-driven architecture.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们添加了一个名为`authentication`的新模块，只有一个状态存在于存储中，并继续使用旧的用户Vuex存储，这样将来我们可以将用户存储重构为一个新模块，并将其分离成更具体的、面向领域的架构。
- en: See also
  id: totrans-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about Vuex modules at [https://vuex.vuejs.org/guide/modules.html](https://vuex.vuejs.org/guide/modules.html).
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuex.vuejs.org/guide/modules.html](https://vuex.vuejs.org/guide/modules.html)找到有关Vuex模块的更多信息。
