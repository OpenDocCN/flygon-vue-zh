- en: Getting Started with Nuxt
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用Nuxt
- en: This chapter will guide you through the process of installing a Nuxt project
    from scratch or with the Nuxt scaffolding tool. Installing Nuxt is the first thing
    you should do when developing Nuxt apps. We'll use the Nuxt scaffolding tool for
    all of our example apps throughout this book as it generates essential project
    folders and files (which we will explore in this chapter) for us automatically;
    but of course, you can do it from scratch for small app development. We will go
    through the directory structure and the use and purpose of each directory. If
    you are installing your Nuxt project from scratch, you'll still need to know the
    directory structure and the official directories that Nuxt will read automatically
    from your project. You'll also learn how to configure Nuxt to suit the needs of
    your app specifically, even though Nuxt is already configured to cover most practical
    cases by default. So, we will guide you through the nuts and bolts of the configuration.
    Also, we will cover asset serving in Nuxt apps, particularly for serving images.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导您完成从头开始安装Nuxt项目或使用Nuxt脚手架工具的过程。在开发Nuxt应用程序时，安装Nuxt是您应该做的第一件事。在本书中，我们将为所有示例应用程序使用Nuxt脚手架工具，因为它会自动生成必要的项目文件夹和文件（我们将在本章中探讨），但当然，您也可以从头开始进行小型应用程序开发。我们将介绍目录结构以及每个目录的用途和目的。如果您从头开始安装Nuxt项目，您仍需要了解目录结构和Nuxt将自动从您的项目中读取的官方目录。您还将学习如何配置Nuxt以满足您的应用程序特定的需求，即使Nuxt已经默认配置以涵盖大多数实际情况。因此，我们将指导您了解配置的要点。此外，我们将介绍Nuxt应用程序中的资源服务，特别是用于提供图像。
- en: 'The topics we will cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题如下：
- en: Installing Nuxt
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Nuxt
- en: Understanding the directory structure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解目录结构
- en: Understanding custom configuration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解自定义配置
- en: Understanding asset serving
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解资源服务
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You should be familiar with the following terms:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该熟悉以下术语：
- en: JavaScript ES6
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript ES6
- en: Server-side and client-side development basics
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端和客户端开发基础知识
- en: Application program interface (API)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序编程接口（API）
- en: 'The supported operating systems are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的操作系统如下：
- en: Windows 10 or above with PowerShell
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10或更高版本，带有PowerShell
- en: macOS with a terminal (Bash or Oh My Zsh)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有终端的macOS（Bash或Oh My Zsh）
- en: Linux systems (such as Ubuntu) with a terminal
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有终端的Linux系统（如Ubuntu）
- en: 'The suggested cross-platform softwares are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的跨平台软件如下：
- en: 'Node.js: [https://nodejs.org/](https://nodejs.org/)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js：[https://nodejs.org/](https://nodejs.org/)
- en: Node Package Manager (npm): [https://www.npmjs.com/](https://www.npmjs.com/)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node Package Manager（npm）：[https://www.npmjs.com/](https://www.npmjs.com/)
- en: Installing Nuxt
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Nuxt
- en: There are two ways to get started with Nuxt easily. The easiest way is by using
    the Nuxt scaffolding tool, `create-nuxt-app`, which installs all the Nuxt dependencies
    and default directories automatically for you. The other way is to start from
    scratch by using a `package.json` file only. Let's discover how you can do this.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种简单的方法可以开始使用Nuxt。最简单的方法是使用Nuxt脚手架工具`create-nuxt-app`，它会自动为您安装所有Nuxt依赖项和默认目录。另一种方法是仅使用`package.json`文件从头开始。让我们来了解如何做到这一点。
- en: Using create-nuxt-app
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用create-nuxt-app
- en: '`create-nuxt-app` is a scaffolding tool created by the Nuxt team that you can
    use to install your project quickly. What you need to do is use `npx` to run `create-nuxt-app`
    on your favorite terminal:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`create-nuxt-app`是Nuxt团队创建的一个脚手架工具，您可以使用它快速安装项目。您需要做的是在您喜欢的终端上使用`npx`来运行`create-nuxt-app`：'
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'npx is shipped by default since npm 5.2.0, but you can make sure you have it
    installed by checking its version on your terminal, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: npx从npm 5.2.0开始默认安装，但您可以通过在终端上检查其版本来确保已安装：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'During the process of installing the Nuxt project, you will be asked some questions
    to integrate with Nuxt, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Nuxt项目的过程中，您将被要求回答一些问题，以便与Nuxt集成，如下所示：
- en: 'Choose a programming language:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一种编程语言：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Choose a package manager:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个包管理器：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Choose a UI framework:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个UI框架：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Choose a testing framework:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个测试框架：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s create your first Nuxt app, called `first-nuxt`, using npx. So, choose
    a local directory on your machine, open a terminal on that directory, and run `npx
    create-nuxt-app first-nuxt`. When you come across the questions like the previously
    mentioned ones in the installation process, choose `JavaScript` for the programming
    language, Npm for the package manager, and `None` for the UI framework and the testing
    framework. Then, skip the rest of the questions (just don''t pick any options)
    so that we can add them at a later stage when we need to. You should have a list
    of questions similar to the following, with the same options we have suggested,
    on your terminal:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用npx创建您的第一个Nuxt应用程序，名为`first-nuxt`。因此，请选择您机器上的本地目录，在该目录上打开终端，并运行`npx create-nuxt-app
    first-nuxt`。在安装过程中遇到类似之前提到的问题时，请选择`JavaScript`作为编程语言，Npm作为包管理器，以及`None`作为UI框架和测试框架。然后，跳过其余的问题（只是不要选择任何选项），以便我们在需要时稍后添加它们。您的终端上应该有一个类似以下问题的问题列表，以及我们建议的相同选项：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should choose `Universal (SSR / SSG)` for the question about the rendering
    mode. We will cover the option for single-page applications (SPAs) in [Chapter
    15](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml), *Creating an SPA with Nuxt*.
    We will use SSR for all of our example apps throughout this book, except the examples
    in [Chapter 15](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml), *Creating an SPA
    with Nuxt*. We will also use `npm` as our package manager in this book as well,
    so make sure you pick this option. Once the installation is completed, we can
    get it started with:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有关渲染模式的问题，您应该选择`Universal (SSR / SSG)`。我们将在[第15章](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml)中涵盖单页面应用程序（SPA）的选项，*使用Nuxt创建SPA*。在本书中的所有示例应用程序中，除了[第15章](450e252f-a94b-4f-7f-9762-533a150f5d19.xhtml)中的示例之外，我们将使用SSR。我们还将在本书中使用`npm`作为我们的包管理器，因此请确保您选择此选项。安装完成后，我们可以启动它：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The app is now running on `localhost:3000`. You should see a default index page
    generated by Nuxt on your screen when you run that address in your favorite browser.
    It is easy peasy to install a Nuxt project using the scaffolding tool, isn't it?
    But sometimes you may not need a full stack installation like this; you may just
    need a "barebones" installation. If so, let's find out how you can install Nuxt
    from scratch in the next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用现在正在`localhost:3000`上运行。当您在您喜爱的浏览器中运行该地址时，您应该会看到Nuxt生成的默认索引页面。使用脚手架工具安装Nuxt项目是不是很容易？但有时您可能不需要像这样的完整安装；您可能只需要一个“最基本”的安装。如果是这样，请让我们在下一节中了解如何从头开始安装Nuxt。
- en: You can find the source files for this simple app in `/nuxt-packt/chapter-2/scaffolding/`
    in our GitHub repository.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/nuxt-packt/chapter-2/scaffolding/`中找到此简单应用程序的源文件。
- en: Starting from scratch
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从头开始
- en: 'If you don''t want to use the Nuxt scaffolding tool, you can use a `package.json`
    file and `npm` to install a Nuxt app for you. Let''s find out how with the following
    steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用Nuxt脚手架工具，您可以使用`package.json`文件和`npm`为您安装Nuxt应用程序。让我们通过以下步骤了解如何操作：
- en: 'Create a `package.json` file in your root project:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的根项目中创建一个`package.json`文件：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Install Nuxt in the project via npm:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm在项目中安装Nuxt：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a `/pages/` directory in your root project, and then create an `index.vue`
    page in it:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的根项目中创建一个`/pages/`目录，然后在其中创建一个`index.vue`页面：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Launch the project with npm:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用npm启动项目：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The app is now running on `localhost:3000`. You should see the index page you
    created with the `Hello world!` message on your screen when you run that address
    in your favorite browser.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现在正在`localhost:3000`上运行。当你在你喜欢的浏览器中运行该地址时，你应该会看到你创建的带有`Hello world!`消息的索引页面。
- en: However, whether you are going for the "barebones" or full stack option, you
    should understand the default directories that Nuxt requires for running your
    app. So, let's find out what these directories are in the next section.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，无论你选择“最基本”还是完整的堆栈选项，你都应该了解Nuxt运行应用程序所需的默认目录。因此，让我们在下一节中找出这些目录是什么。
- en: You can find this simple app in `/nuxt-packt/chapter-2/scratch/` in our GitHub
    repository.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub存储库的`/nuxt-packt/chapter-2/scratch/`中找到这个简单的应用程序。
- en: Understanding the directory structure
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解目录结构
- en: 'If you have installed a Nuxt project successfully using the `create-nuxt-app` scaffolding
    tool, you should get the following default directories and files in your project
    folder:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你成功使用`create-nuxt-app`脚手架工具安装了一个Nuxt项目，你应该在项目文件夹中得到以下默认目录和文件：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let's go through each of them and understand what they are intended for in the
    following sections.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个了解它们，并在接下来的章节中理解它们的用途。
- en: The assets directory
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源目录
- en: 'The `/assets/` directory is used to contain the assets of your project, such
    as images, fonts, and Less, Stylus, or Sass files, that will be compiled by webpack.
    For example, you may have a Less file, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`/assets/`目录用于包含项目的资源，例如图片、字体和Less、Stylus或Sass文件，这些文件将由webpack编译。例如，你可能有一个Less文件，如下所示：'
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'webpack will compile the preceding code into the following CSS for your app:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: webpack将把前面的代码编译成你的应用程序的以下CSS：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We will discuss the benefits of serving images in this directory later in this
    chapter, and we will use this directory often in this book when generating static
    pages.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面讨论在该目录中提供图像的好处，并在本书中生成静态页面时经常使用该目录。
- en: The static directory
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态目录
- en: 'The `/static/` directory is used to contain files that you don''t want to be
    compiled by webpack or cannot be compiled, such as favicon files. If you don''t
    want to serve your assets, such as images, fonts, and styles, in the `/assets/` directory,
    you can keep them in the `/static/` directory instead. All files in this directory
    are mapped to the server root directly, so they are accessible under the root
    URL directly. For example, `/static/1.jpg` is mapped as `/1.jpg`, so you can access
    it as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`/static/`目录用于包含不希望被webpack编译或无法被编译的文件，例如favicon文件。如果你不想在`/assets/`目录中提供你的资源，比如图片、字体和样式，你可以将它们放在`/static/`目录中。该目录中的所有文件都直接映射到服务器根目录，因此可以直接在根URL下访问。例如，`/static/1.jpg`被映射为`/1.jpg`，因此可以通过以下方式访问它：'
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We will discuss the difference in serving images between the `/assets/` and
    `/static/` directories later in this chapter. Note that you get a `favicon.ico`
    file by default in this directory when you use the Nuxt scaffolding tool, but
    you can create your favicon file to replace it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面讨论在`/assets/`和`/static/`目录之间提供图像的区别。请注意，当你使用Nuxt脚手架工具时，默认情况下会在该目录中得到一个`favicon.ico`文件，但你可以创建自己的favicon文件来替换它。
- en: The pages directory
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面目录
- en: 'The `/pages/` directory is used to contain the views and the routes of the
    app. Nuxt will read and convert all the `.vue` files inside this directory and
    generate the app router automatically for you. For example, take the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`/pages/`目录用于包含应用程序的视图和路由。Nuxt将读取并转换该目录内的所有`.vue`文件，并为你自动生成应用程序路由。例如，看下面的例子：'
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Nuxt will take the preceding filenames without the `.vue` extension and create
    the following routes for your app:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt将采用前面的文件名（不带`.vue`扩展名）并为你的应用程序创建以下路由：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you install Nuxt via `create-nuxt-app`, you will get an `index.vue` file
    created automatically for you, and you can see this page at `localhost:3000`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过`create-nuxt-app`安装Nuxt，将会自动为您创建一个`index.vue`文件，并且您可以在`localhost:3000`上看到这个页面。
- en: We will look at this directory in more detail in [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml),
    *Adding Views, Routes, and Transitions*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第4章](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml)中更详细地查看这个目录，*添加视图、路由和过渡*。
- en: The layouts directory
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局目录
- en: The `/layouts/` directory is used to contain the layouts of your app. You get
    a layout called `default.vue` by default when you use the Nuxt scaffolding tool.
    You can modify this default layout or add new ones to this directory.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`/layouts/`目录用于包含应用程序的布局。当您使用Nuxt脚手架工具时，默认情况下会得到一个名为`default.vue`的布局。您可以修改这个默认布局或者在这个目录中添加新的布局。'
- en: We will look at this directory in more detail in [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml),
    *Adding Views, Routes, and Transitions*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第4章](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml)中更详细地查看这个目录，*添加视图、路由和过渡*。
- en: The components directory
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件目录
- en: The `/components/` directory is used to contain Vue components. You get a component
    called `Logo.vue` by default when you use the Nuxt scaffolding tool. The obvious
    and important difference between the `.vue` files in this directory and those
    in the `/pages/` directory is that you cannot use the `asyncData` method for the
    components in this directory; however, you can use the `fetch` method to set in
    them if you need to. You should keep small and reusable components in this directory.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`/components/`目录用于包含Vue组件。当您使用Nuxt脚手架工具时，默认情况下会得到一个名为`Logo.vue`的组件。这个目录中的`.vue`文件与`/pages/`目录中的文件的明显和重要区别在于，您不能为这个目录中的组件使用`asyncData`方法；但是，如果需要，您可以使用`fetch`方法来设置它们。您应该将小型和可重用的组件放在这个目录中。'
- en: We will look at this directory in more detail in [Chapter 5](099c1dc8-8dfa-46f8-bfbd-bfa036eefbb7.xhtml),
    *Adding Vue Components*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第5章](099c1dc8-8dfa-46f8-bfbd-bfa036eefbb7.xhtml)中更详细地查看这个目录，*添加Vue组件*。
- en: The plugins directory
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件目录
- en: 'The `/plugins/` directory is used to contain JavaScript functions, such as
    global functions that you want to run before the root Vue instance is instantiated.
    For example, you may want to create a new `axios` instance that sends API requests
    specifically to [https://jsonplaceholder.typicode.com](https://jsonplaceholder.typicode.com)
    only, and you may want to make this instance available globally without importing
    `axios` and creating a fresh instance each time. You can create a plugin that
    injects and plugs into the Nuxt context, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`/plugins/`目录用于包含JavaScript函数，比如您想要在根Vue实例实例化之前运行的全局函数。例如，您可能想要创建一个新的`axios`实例，专门发送API请求到[https://jsonplaceholder.typicode.com](https://jsonplaceholder.typicode.com)，并且您可能希望在全局范围内使用这个实例，而不是每次导入`axios`并创建一个新实例。您可以创建一个插件，将其注入和插入到Nuxt上下文中，如下所示：'
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, you can use this `axios` instance on any page by calling `$axiosTypicode`,
    as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过调用`$axiosTypicode`在任何页面上使用这个`axios`实例，如下所示：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We will look at this directory in more detail in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml),
    *Writing Plugins and Modules*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml)中更详细地查看这个目录，*编写插件和模块*。
- en: Note that `axios` is an HTTP client that we will use often throughout this book.
    You will need to install it in your project directory before importing it in the
    preceding plugin file. For more information about this Node.js package, please
    visit  [https://github.com/axios/axios](https://github.com/axios/axios).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`axios`是一个我们在本书中经常使用的HTTP客户端。在导入前，您需要在项目目录中安装它。有关这个Node.js包的更多信息，请访问[https://github.com/axios/axios](https://github.com/axios/axios)。
- en: The store directory
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储目录
- en: The `/store/` directory is used to contain the Vuex store files. You don't need
    to install Vuex in Nuxt because it already comes with Nuxt. It is disabled by
    default and you just have to add an `index.js` file to this directory to enable
    it. For example, if you want to have a property called `auth` that can be accessed
    from anywhere throughout your app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`/store/`目录用于包含Vuex存储文件。您不需要在Nuxt中安装Vuex，因为它已经与Nuxt一起提供。它默认情况下是禁用的，您只需在此目录中添加一个`index.js`文件即可启用它。例如，如果您想要一个名为`auth`的属性，可以在整个应用程序中访问。'
- en: 'You will have that property stored in the `state` variable in the `index.js` file,
    as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在`index.js`文件中将该属性存储在`state`变量中，如下所示：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We will look at this directory in more detail in [Chapter 10](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml),
    *Adding a Vuex Store*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第10章](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml)中更详细地查看此目录，*添加Vuex存储*。
- en: The middleware directory
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中间件目录
- en: 'The `/middleware/` directory is used to contain middleware files that are JavaScript
    functions that run before rendering a page or a group of pages. For example, you
    may want to have a secret page that only can be accessed when the user is authenticated.
    You can use the Vuex store to store the authenticated data and create a middleware
    to throw a `403` error if the `auth` property is empty in the `state` store:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`/middleware/`目录用于包含中间件文件，这些文件是在渲染页面或一组页面之前运行的JavaScript函数。例如，您可能希望有一个只有在用户经过身份验证时才能访问的秘密页面。您可以使用Vuex存储来存储经过身份验证的数据，并创建一个中间件，如果`state`存储中的`auth`属性为空，则抛出`403`错误：'
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We will look at this directory in more detail in [Chapter 11](b24caa1b-6337-40ee-9c1a-c8586db1f3b2.xhtml),
    *Writing Route Middlewares and Server Middlewares*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第11章](b24caa1b-6337-40ee-9c1a-c8586db1f3b2.xhtml)中更详细地查看此目录，*编写路由中间件和服务器中间件*。
- en: The package.json file
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: package.json文件
- en: 'The `package.json` file is used to contain the dependencies and scripts of
    the Nuxt app. For example, you get the following default scripts and dependencies
    in this file if you are using the Nuxt scaffolding tool:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`文件用于包含Nuxt应用程序的依赖项和脚本。例如，如果您使用Nuxt脚手架工具，则在此文件中会获得以下默认脚本和依赖项：'
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We will work on this file a lot in [Chapter 8](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml),
    *Adding a Server-Side Framework*, and in [Chapter 14](34aaa294-2c3b-464e-8e96-5eb6d1eaff48.xhtml),
    *Using Linters, Formatters, and Deployment Commands*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第8章](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml)中大量使用此文件，*添加服务器端框架*，以及在[第14章](34aaa294-2c3b-464e-8e96-5eb6d1eaff48.xhtml)中，*使用检查器、格式化程序和部署命令*。
- en: The nuxt.config.js file
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: nuxt.config.js文件
- en: 'The `nuxt.config.js` file is used to contain the custom configuration that
    applied to your app specifically. For example, you get these custom meta tags,
    title, and link by default for your HTML `<head>` block when you use the Nuxt
    scaffolding tool:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`nuxt.config.js`文件用于包含应用程序特定的自定义配置。例如，当您使用Nuxt脚手架工具时，默认情况下会为HTML的`<head>`块获取这些自定义的元标记、标题和链接：'
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We can modify the preceding custom head block. You will learn how to do so in
    [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml), *Adding Views, Routes,
    and Transitions*. Besides `head`, there are other key properties for making the
    custom configuration, which we will cover in the upcoming section.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改前面的自定义头部块。您将在[第4章](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml)中学习如何做到这一点，*添加视图、路由和转换*。除了`head`之外，还有其他关键属性可用于进行自定义配置，我们将在接下来的部分中介绍。
- en: The aliases
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 别名
- en: 'In Nuxt, the `~` or `@` aliases are used to associate with the `srcDir` property,
    and the `~~` or `@@` aliaes are used to associate with the `rootDir` property.
    For example, if you want to link an image to the `/assets/` directory, you can
    use the `~` alias, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Nuxt 中，`~` 或 `@` 别名用于与 `srcDir` 属性关联，`~~` 或 `@@` 别名用于与 `rootDir` 属性关联。例如，如果您想将图像链接到
    `/assets/` 目录，可以使用 `~` 别名，如下所示：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'On the other hand, if you want to link the image to the `/static/` directory, you
    can use the `~` alias, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您想将图像链接到 `/static/` 目录，可以使用 `~` 别名，如下所示：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note that you also can link your assets in the `/static/` directory without
    these aliases:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您也可以在不使用这些别名的情况下链接到 `/static/` 目录中的资源：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The value of `srcDir` is the same as the value of `rootDir`, by default, which
    is `process.cwd()`. We will cover these two options in the next section and you
    will learn how to change their default values. So, let's explore how you can fiddle
    with custom configuration in your project.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`srcDir` 的值默认与 `rootDir` 的值相同，即 `process.cwd()`。我们将在下一节中介绍这两个选项，您将学习如何更改它们的默认值。因此，让我们探讨如何在项目中自定义配置。'
- en: Understanding custom configuration
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解自定义配置
- en: 'You can configure your Nuxt app to suit your project by adding a `nuxt.config.js`
    file (we will call it a **Nuxt config file** in this book) in the project''s root
    directory. You get this file by default if you use the Nuxt scaffolding tool.
    You should get the following options (or properties) when you open this file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在项目的根目录中添加一个 `nuxt.config.js` 文件（本书中将其称为**Nuxt配置文件**）来配置您的Nuxt应用以适应您的项目。如果您使用
    Nuxt 脚手架工具，默认情况下会得到这个文件。当您打开此文件时，应该会得到以下选项（或属性）：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Most of them are empty, except `mode`, `target`, `head`, and `components`. You
    can customize Nuxt to suit your project specifically through these options. Let's
    go through each of them, and then the other options, to see what you can use them
    for.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 其中大多数为空，除了 `mode`、`target`、`head` 和 `components`。您可以通过这些选项定制 Nuxt 以适应您的项目。让我们逐个了解它们，然后再看看其他选项，看看您可以如何使用它们。
- en: The mode option
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`mode` 选项'
- en: The `mode` option is used to define the "nature" of your app – whether it is
    universal or an SPA. Its default value is *universal*. If you are developing an
    SPA using Nuxt, then change this value to `spa`. We will focus on the universal
    mode in the upcoming chapters of this book, except [Chapter 15](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml),
    *Creating an SPA with Nuxt*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode` 选项用于定义应用的“性质” - 无论是通用应用还是单页应用。其默认值为 *universal*。如果您正在使用 Nuxt 开发单页应用，那么将此值更改为
    `spa`。在本书的即将到来的章节中，我们将专注于通用模式，除了 [第15章](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml)
    *使用Nuxt创建单页应用*。'
- en: The target option
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`target` 选项'
- en: The `target` option is used to set the deployment target of your app – whether
    it is deployed as a server-side rendering app or a static-generated app. Its default
    value is `server` for server-side rendering deployment. Our deployment target
    for most of the example apps in this book is server-side rendering. We will target
    static-generated deployments as well in a few chapters, especially the final chapter – [Chapter
    18](a2720301-9e1c-4c28-8af8-39bd5c093fb9.xhtml), *Creating a Nuxt App with CMS
    and GraphQL*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`target` 选项用于设置应用的部署目标 - 无论是作为服务器端渲染应用还是静态生成应用进行部署。其默认值为服务器端渲染部署的 `server`。本书中大多数示例应用的部署目标是服务器端渲染。在最后一章
    - [第18章](a2720301-9e1c-4c28-8af8-39bd5c093fb9.xhtml) *使用CMS和GraphQL创建Nuxt应用* 中，我们也会针对静态生成部署进行目标设置。'
- en: The head option
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`head` 选项'
- en: 'The `head` option is used to define all default meta tags in the `<head>` block
    of our app. You get the following custom `head` configuration in the Nuxt config
    file if you use the Nuxt scaffolding tool:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`head`选项用于在我们应用程序的`<head>`块中定义所有默认的元标签。如果您使用Nuxt脚手架工具，您将在Nuxt配置文件中获得以下自定义`head`配置：'
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can modify the preceding configuration or add more custom configuration
    – for example, add some JavaScript and CSS libraries that are required for your
    project:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以修改上述配置或添加更多自定义配置 - 例如，添加一些对项目所需的JavaScript和CSS库：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We will cover this option in more detail in [Chapter 3](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml), *Adding
    UI Frameworks*, and in [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml), *Adding
    Views, Routes, and Transitions*. Note that jQuery is a core dependency of Foundation
    (Zurb), which we will explore in [Chapter 3](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml), *Adding
    UI Frameworks*. So, it is currently required that you install jQuery in your project
    to use Foundation. This may become optional in future releases.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第3章](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml)的*添加UI框架*和[第4章](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml)的*添加视图、路由和转换*中更详细地介绍这个选项。请注意，jQuery是Foundation（Zurb）的核心依赖项，我们将在[第3章](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml)的*添加UI框架*中进行探讨。因此，目前需要在项目中安装jQuery才能使用Foundation。这在未来的版本中可能会变成可选项。
- en: The css option
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: css选项
- en: 'The `css` option is used to add global CSS files. These can be `.css`, `.less`,
    or `.scss` files. They also can be the modules and libraries loaded from the Node.js `/node_modules/` directory
    in your project directly. For example, take the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`css`选项用于添加全局CSS文件。这些可以是`.css`、`.less`或`.scss`文件。它们也可以是直接从项目中的Node.js `/node_modules/`目录加载的模块和库。例如，看下面的例子：'
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the preceding configuration, we load the CSS file from the jQuery UI module
    that is installed in the `/node_modules/` directory, as well as the Less and Sass
    files that are stored in the `/assets/` directory. Note that if you are writing
    styles using `.less` and `.scss` files, you need to install the Less and Sass
    modules with their webpack loaders, as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述配置中，我们从安装在`/node_modules/`目录中的jQuery UI模块加载CSS文件，以及存储在`/assets/`目录中的Less和Sass文件。请注意，如果您使用`.less`和`.scss`文件编写样式，您需要安装Less和Sass模块以及它们的webpack加载器，如下所示：
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We will use this option more in [Chapter 3](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml), *Adding
    UI Frameworks*, and in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit), *Adding
    Views, Routes, and Transitions*.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第3章](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml)的*添加UI框架*和[第4章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit)的*添加视图、路由和转换*中更多地使用这个选项。
- en: The plugins option
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件选项
- en: 'The `plugins` option is used to add JavaScript plugins that run before the
    root Vue instance. For example, take the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugins`选项用于添加在根Vue实例之前运行的JavaScript插件。例如，看下面的例子：'
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We often use this option with the `/plugins/` directory, which we covered in
    the previous section. We will work on this option a lot in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml), *Writing
    Plugins and Modules*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常与前面的章节中介绍的`/plugins/`目录一起使用这个选项。我们将在[第6章](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml)的*编写插件和模块*中大量使用这个选项。
- en: The components option
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件选项
- en: The `components` option is used to set whether the components in the `/components/` directory
    should be auto-imported. This option is very useful if you have tons of components
    to be imported into a layout or a page. You don't have to import them manually
    if you set this option to `true`. Its default value is `false`. We set this option
    to `true` for all apps in this book.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: components选项用于设置/components/目录中的组件是否应该自动导入。如果你有大量组件需要导入到布局或页面中，这个选项非常有用。如果将此选项设置为true，则无需手动导入它们。它的默认值为false。我们在本书中为所有应用程序将此选项设置为true。
- en: For more information and (advanced) usage of this option, please visit [https://github.com/nuxt/components](https://github.com/nuxt/components).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此选项的更多信息和（高级）用法，请访问https://github.com/nuxt/components。
- en: The buildModules option
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: buildModules选项
- en: The `buildModules` option is used to register built-only modules – modules that
    are required only for development and build time in your app. In this book, note
    that we will only leverage some modules from the Nuxt community and create the
    custom ones that are needed during the Node.js runtime in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml), *Writing
    Plugins and Modules*. But for more information about the `buildModules` option
    and the built-only modules for build-time only, please visit [https://nuxtjs.org/guide/modules#build-only-modules](https://nuxtjs.org/guide/modules#build-only-modules).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: buildModules选项用于注册仅构建的模块 - 仅在开发和构建时需要的模块。在本书中，请注意我们将仅利用Nuxt社区中的一些模块，并创建在Node.js运行时需要的自定义模块。但是，有关buildModules选项和仅构建时需要的模块的更多信息，请访问https://nuxtjs.org/guide/modules#build-only-modules。
- en: The modules option
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块选项
- en: 'The `modules` option is used to add Nuxt modules to your project. For example,
    take the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: modules选项用于向项目添加Nuxt模块。例如，可以使用以下内容：
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We also can create inline modules directly with this option:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以直接使用此选项创建内联模块：
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Nuxt modules are essentially JavaScript functions, just like plugins. We will
    discuss the difference between them in [Chapter 6](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=29&action=edit), *Writing
    Plugins and Modules*. Just like the `plugins` option, which is used often with
    the `/plugins/` directory, the `modules` option is often used with the `/modules/` directory.
    We will work on this option often in [Chapter 6](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=29&action=edit), *Writing
    Plugins and Modules*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt模块本质上是JavaScript函数，就像插件一样。我们将在第6章《编写插件和模块》中讨论它们之间的区别。就像经常与/plugins/目录一起使用的plugins选项一样，modules选项经常与/modules/目录一起使用。我们将在第6章《编写插件和模块》中经常使用这个选项。
- en: The build option
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建选项
- en: 'The `build` option is used to customize the webpack configuration for building
    your Nuxt app the way you prefer. For example, you may want to install jQuery globally in
    your project so that you don''t have to use `import` whenever you need it. You
    can automatically load jQuery by using webpack''s `ProvidePlugin` function, as
    follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: build选项用于自定义webpack配置，以便按照您喜欢的方式构建Nuxt应用程序。例如，您可能希望在项目中全局安装jQuery，这样每次需要时就不必使用import。您可以使用webpack的ProvidePlugin函数自动加载jQuery，如下所示：
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We will use this `build` option again in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit), *Adding
    Views, Routes, and Transitions*, in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml), *Writing
    Plugins and Modules,* and in [Chapter 14](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=37&action=edit), *Using
    Linters, Formatters, and Deployment Commands*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第4章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit)中再次使用`build`选项，*添加视图、路由和转换*，在[第6章](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml)中，*编写插件和模块*，以及在[第14章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=37&action=edit)中，*使用Linter、格式化程序和部署命令*。
- en: For more details and examples of things that you can do with this option for
    your Nuxt app, visit [https://nuxtjs.org/api/configuration-build](https://nuxtjs.org/api/configuration-build).
    For more information about webpack's `ProvidePlugin` function, visit [https://webpack.js.org/plugins/provide-plugin/](https://webpack.js.org/plugins/provide-plugin/).
    If you are new to webpack, we encourage you to visit and learn about it from [https://webpack.js.org/guides/](https://webpack.js.org/guides/).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有关你的Nuxt应用可以使用这个选项做些什么的更多细节和示例，请访问[https://nuxtjs.org/api/configuration-build](https://nuxtjs.org/api/configuration-build)。有关webpack的`ProvidePlugin`函数的更多信息，请访问[https://webpack.js.org/plugins/provide-plugin/](https://webpack.js.org/plugins/provide-plugin/)。如果你是webpack的新手，我们鼓励你访问并从[https://webpack.js.org/guides/](https://webpack.js.org/guides/)学习。
- en: The following sections outline some of the additional options that you can use
    to customize your Nuxt app further and more specifically. Let's explore some of
    them that can be useful in your projects. Some of them are used often in this
    book. So, let's get to them!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分概述了一些额外的选项，可以用来进一步和更具体地定制你的Nuxt应用。让我们探索一些在你的项目中可能有用的选项。其中一些在本书中经常使用。所以，让我们开始吧！
- en: The dev option
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dev选项
- en: The `dev` option is used to define the `development` or `production` mode of
    your app. It is not added to the Nuxt config file, but you can add it manually
    when you need to. It only takes a Boolean type and its default is set to `true`.
    It is always forced to be `true` with the `nuxt` command and always forced to
    be `false` with the `nuxt build`, `nuxt start`, and `nuxt generate` commands.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`dev`选项用于定义你的应用的`开发`或`生产`模式。它不会被添加到Nuxt配置文件中，但当你需要时可以手动添加。它只接受布尔类型，其默认值设置为`true`。它总是被`nuxt`命令强制为`true`，并且总是被`nuxt
    build`、`nuxt start`和`nuxt generate`命令强制为`false`。'
- en: 'Hence, technically you *can''t* customize it, but you can use this option in
    a Nuxt module, as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从技术上讲，你*不能*自定义它，但你可以在Nuxt模块中使用这个选项，如下所示：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You will get either `true` or `false`, depending on which Nuxt command you
    use. We will cover this module in [Chapter 6](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=29&action=edit),
    *Writing Plugins and Modules*. Alternatively, you can use this option when you
    are importing Nuxt as a package in a server-side framework, as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到`true`或`false`，取决于你使用哪个Nuxt命令。我们将在[第6章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=29&action=edit)中介绍这个模块，*编写插件和模块*。或者，你可以在将Nuxt作为包导入服务器端框架时使用这个选项，如下所示：
- en: '[PRE37]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `new Builder(nuxt).build()` line will be run when the `dev` option is `true`.
    We will get to the server-side framework in [Chapter 8](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=31&action=edit),
    *Adding a Server-Side Framework*.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当`dev`选项为`true`时，`new Builder(nuxt).build()`行将被运行。我们将在[第8章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=31&action=edit)中介绍服务器端框架，*添加服务器端框架*。
- en: You can find an example app for this option in `/chapter-2/configuration/dev/`
    in our GitHub repository.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-2/configuration/dev/`中找到此选项的示例应用程序。
- en: The rootDir option
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rootDir选项
- en: 'The `rootDir` option is used to define the workspace of your Nuxt app. For
    example, say you have your project in the following location:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`rootDir`选项用于定义Nuxt应用程序的工作空间。例如，假设您的项目位于以下位置：'
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, the default value of the `rootDir` option for your project is `/var/www/html/my-project/`.
    However, you can change it by using the Nuxt command in your `package.json` file,
    as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您的项目的`rootDir`选项的默认值为`/var/www/html/my-project/`。但是，您可以按以下方式在`package.json`文件中使用Nuxt命令更改它：
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, the workspace of your Nuxt app is in `/var/www/html/my-project/app/` and
    your app structure has become the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的Nuxt应用程序的工作空间位于`/var/www/html/my-project/app/`，您的应用程序结构已变为以下内容：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note that now, the Nuxt config file must be put inside the `/app/` directory.
    We will cover the Nuxt commands in [Chapter 14](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=37&action=edit),
    *Using Linters, Formatters, and Deployment Commands*.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，现在Nuxt配置文件必须放在`/app/`目录中。我们将在[第14章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=37&action=edit)中介绍Nuxt命令，*使用Linter、Formatter和部署命令*。
- en: You can find an example app for this option in `/chapter-2/configuration/rooDir/` in
    our GitHub repository.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-2/configuration/rooDir/`中找到此选项的示例应用程序。
- en: The srcDir option
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: srcDir选项
- en: 'The `srcDir` option is used to define the source directory of your Nuxt app.
    The default value of `srcDir` is the value of `rootDir`. You can change it as
    follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`srcDir`选项用于定义Nuxt应用程序的源目录。`srcDir`的默认值是`rootDir`的值。您可以按以下方式更改它：'
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, your app structure has become the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的应用程序结构已变为以下内容：
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note that the Nuxt config file is outside the `/src/` directory.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Nuxt配置文件位于`/src/`目录之外。
- en: You can find an example app for this option in `/chapter-2/configuration/srcDir/` in
    our GitHub repository.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-2/configuration/srcDir/`中找到此选项的示例应用程序。
- en: The server option
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器选项
- en: 'The `server` option is used to configure the server connection variables of
    our Nuxt app. It has the following default  server connection details:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`server`选项用于配置Nuxt应用程序的服务器连接变量。它具有以下默认服务器连接详细信息：'
- en: '[PRE43]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You can change them as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下方式更改它们：
- en: '[PRE44]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now, your app is running at `0.0.0.0:8080`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的应用程序正在`0.0.0.0:8080`上运行。
- en: You can find an example app for this option in `/chapter-2/configuration/server/` in
    our GitHub repository.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-2/configuration/server/`中找到此选项的示例应用程序。
- en: The env option
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: env选项
- en: The `env` option is used to set environment variables for the client side and
    the server side of your Nuxt app. The default for this option is an empty object, `{}`.
    This option is useful when you use `axios` in your project.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`env`选项用于为Nuxt应用程序的客户端和服务器端设置环境变量。此选项的默认值为空对象`{}`。当您在项目中使用`axios`时，此选项非常有用。'
- en: 'Take the following example:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 采用以下示例：
- en: '[PRE45]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, you can the `env` property in the `axios` plugin, as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以按以下方式在`axios`插件中设置`env`属性：
- en: '[PRE46]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, the `baseURL` option is set to `localhost:3000`, or whatever `BASE_URL`
    is if it is defined. We can set `BASE_URL` in `package.json`, as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`baseURL`选项设置为`localhost:3000`，或者如果定义了`BASE_URL`，则为`BASE_URL`。我们可以在`package.json`中设置`BASE_URL`，如下所示：
- en: '[PRE47]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You will need to install `cross-env` for the preceding example to work on Windows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在Windows上安装`cross-env`才能使上述示例工作：
- en: '[PRE48]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We will get to plugins in [Chapter 6](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=29&action=edit),
    *Writing Plugins and Modules*. We will use this `env` option often in this book
    when creating cross-domain apps.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=29&action=edit)中介绍插件，*编写插件和模块*。在创建跨域应用程序时，我们将在本书中经常使用`env`选项。
- en: You can find an example app for this option in `/chapter-2/configuration/env/` in
    our GitHub repository.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-2/configuration/env/`中找到此选项的示例应用程序。
- en: The router option
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由器选项
- en: 'The `router` option is used to overwrite the default Nuxt configuration on
    the Vue router. The default Vue router configuration is as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`router`选项用于覆盖Vue路由器上的默认Nuxt配置。默认Vue路由器配置如下：'
- en: '[PRE49]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You can change this configuration, as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下方式更改此配置：
- en: '[PRE50]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now, your app is running at `localhost:3000/app/`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的应用正在`localhost:3000/app/`上运行。
- en: For more information about this property and the rest of its configuration,
    visit [https://nuxtjs.org/api/configuration-router](https://nuxtjs.org/api/configuration-router).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此属性及其余配置的更多信息，请访问[https://nuxtjs.org/api/configuration-router](https://nuxtjs.org/api/configuration-router)。
- en: You can find an example app for this option in `/chapter-2/configuration/router/` in
    our GitHub repository.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-2/configuration/router/`中找到此选项的示例应用程序。
- en: The dir option
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dir选项
- en: 'The `dir` option is used to define custom directories in our Nuxt app. The
    default directories are as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`dir`选项用于定义Nuxt应用中的自定义目录。默认目录如下：'
- en: '[PRE51]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can change them as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下方式更改它们：
- en: '[PRE52]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, you can use the preceding custom directories as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以按以下方式使用前面的自定义目录：
- en: '[PRE53]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: You can find an example app for this option in `/chapter-2/configuration/dir/` in
    our GitHub repository.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-2/configuration/dir/`中找到此选项的示例应用程序。
- en: The loading option
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载选项
- en: 'The `loading` option is used to customize the default loading component in
    your Nuxt app. If you don''t want to use this default loading component, you can
    set it to `false`, as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`loading`选项用于自定义Nuxt应用中的默认加载组件。如果您不想使用这个默认加载组件，可以将其设置为`false`，如下所示：'
- en: '[PRE54]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We will cover this option in more detail in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit),
    *Adding Views, Routes, and Transitions*.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第4章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit)中更详细地介绍这个选项，*添加视图、路由和转换*。
- en: The pageTransition and layoutTransition options
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面转换和布局转换选项
- en: 'The `pageTransition` and `layoutTransition` options are used to customize the
    default properties of the page and layout transitions in your Nuxt app. The default
    properties for the page transition are set as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`pageTransition`和`layoutTransition`选项用于自定义Nuxt应用中页面和布局转换的默认属性。页面转换的默认属性设置如下：'
- en: '[PRE55]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The default properties for the **layout** transition are set as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**布局**转换的默认属性设置如下：'
- en: '[PRE56]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'You can change them as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下方式更改它们：
- en: '[PRE57]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: We will cover these options in more detail in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit),
    *Adding Views, Routes, and Transitions*.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第4章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit)中更详细地介绍这些选项，*添加视图、路由和转换*。
- en: The generate option
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成选项
- en: 'The `generate` option is used to tell Nuxt how to generate dynamic routes for
    a static web app. Dynamic routes are routes that are created by using an underscore
    in Nuxt. We will cover this type of route in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit),
    *Adding Views, Routes, and Transitions*. We use the `generate` option with dynamic
    routes that *cannot be detected automatically by the Nuxt crawler* if we want
    to export our Nuxt app as a static web app or as an SPA, instead of using Nuxt
    as a universal app (SSR). For example, you may have the following dynamic routes
    (pagination) in your app, if the scrawler fails to detect them:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`generate`选项用于告诉Nuxt如何为静态Web应用程序生成动态路由。动态路由是通过在Nuxt中使用下划线创建的路由。我们将在[第4章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit)
    *添加视图、路由和过渡*中介绍这种类型的路由。如果我们希望将Nuxt应用导出为静态Web应用程序或SPA，而不是将Nuxt用作通用应用程序（SSR），则使用`generate`选项来处理动态路由，这些动态路由*无法被Nuxt爬虫自动检测到*。例如，如果爬虫无法检测到您的应用中的以下动态路由（分页）：'
- en: '[PRE58]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Then, you can use this `generate` option to generate and transform the content
    of each of these routes into an HTML file for you, as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用此`generate`选项将每个路由的内容生成和转换为HTML文件，如下所示：
- en: '[PRE59]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: We will show you how to use this option to generate routes, if they cannot be
    detected by the crawler in [Chapter 15](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml), *Creating
    a Nuxt SPA*, and in [Chapter 18](a2720301-9e1c-4c28-8af8-39bd5c093fb9.xhtml), *Creating
    a Nuxt App with CMS and GraphQL*.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向您展示如何使用此选项来生成路由，如果爬虫无法检测到它们，可以在[第15章](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml)
    *创建Nuxt SPA*和[第18章](a2720301-9e1c-4c28-8af8-39bd5c093fb9.xhtml) *使用CMS和GraphQL创建Nuxt应用*中找到。
- en: For more information and more advanced usage of this `generate` option, please
    visit [https://nuxtjs.org/api/configuration-generate](https://nuxtjs.org/api/configuration-generate).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此`generate`选项的更多信息和更高级的用法，请访问[https://nuxtjs.org/api/configuration-generate](https://nuxtjs.org/api/configuration-generate)。
- en: We will cover and discover other configuration options in the upcoming chapters
    as we go along. However, these are the basic custom configuration options you
    should know about at this point. Now, let's explore asset serving with webpack
    further in the next topic.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的学习，我们将在接下来的章节中涵盖和发现其他配置选项。然而，这些是您现在应该了解的基本自定义配置选项。现在，让我们在下一个主题中进一步探索webpack中的资源服务。
- en: Understanding asset serving
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解资源服务
- en: 'Nuxt uses the `vue-loader`, `file-loader`, and `url-loader` webpack loaders to
    serve the assets in your app. Firstly, Nuxt will use `vue-loader` to process the `<template>`
    and `<style>` blocks with `css-loader` and `vue-template-compiler` to compile
    elements such as `<img src="...">`, `background-image: URL(...)`, and CSS `@import` in
    these blocks intomodule dependencies. Take the following example:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 'Nuxt使用`vue-loader`、`file-loader`和`url-loader`webpack加载程序来提供应用程序中的资产。首先，Nuxt将使用`vue-loader`处理`<template>`和`<style>`块，使用`css-loader`和`vue-template-compiler`来编译这些块中的元素，例如`<img
    src="...">`、`background-image: URL(...)`和这些块中的CSS `@import`为模块依赖项。举个例子：'
- en: '[PRE60]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The image element and the assets in the preceding `<template>` and `<style>`
    block will be compiled and translated into the following code and module dependencies:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述`<template>`和`<style>`块中的图像元素和资产将被编译和转换为以下代码和模块依赖项：
- en: '[PRE61]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Note that from Nuxt 2.0, the `~/` alias will not be correctly resolved in your
    styles, so use `~assets` or the `@/` alias instead.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，从Nuxt 2.0开始，`~/`别名在样式中将无法正确解析，因此请改用`~assets`或`@/`别名。
- en: 'After the preceding compilation and translation, Nuxt then will use `file-loader`
    to resolve the `import/require` module dependencies into a URL and emit (copy
    and paste) the assets into the output directory – or, use `url-loader` to transform
    the assets into Base64 URIs if the asset is under 1 KB. However, if the asset
    is larger than the 1 KB threshold, it will fall back to `file-loader`. That means
    any files below 1 KB will be inlined as a Base64 data URL by `url-loader`, as
    follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的编译和翻译之后，Nuxt将使用`file-loader`来解析`import/require`模块依赖关系为URL，并将资产发射（复制并粘贴）到输出目录
    - 或者，使用`url-loader`将资产转换为Base64 URI，如果资产小于1KB。然而，如果资产大于1KB的阈值，它将退回到`file-loader`。这意味着任何小于1KB的文件将被`url-loader`内联为Base64数据URL，如下所示：
- en: '[PRE62]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This can give you more control over the number of HTTP requests from your app
    to the server. Inlined assets cost you fewer HTTP requests, while any file beyond
    1 KB will be copied and pasted into the out destination and named with a version
    hash for better caching. For example, the images in the preceding `<template>`
    and `<style>` blocks are emitted as follows (via `npm run build`):'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以让您更好地控制应用程序向服务器发出的HTTP请求的数量。内联资产会减少HTTP请求，而任何超过1KB的文件都将被复制并粘贴到输出目标，并以版本哈希命名以获得更好的缓存。例如，前述`<template>`和`<style>`块中的图像将被发射如下（通过`npm
    run build`）：
- en: '[PRE63]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'You will see the image on the front side of your browser, as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在浏览器的前端看到以下图像：
- en: '[PRE64]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The following is the default configuration for these two webpack loaders (`url-loader` and `file-loader`):'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这两个webpack加载程序（`url-loader`和`file-loader`）的默认配置：
- en: '[PRE65]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: You can customize this default configuration as we did in the previous topic
    using the `build` option for webpack configuration.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像我们在前面的主题中所做的那样使用webpack配置的`build`选项来自定义此默认配置。
- en: For more information about `file-loader` and `url-loader`, please visit [https://webpack.js.org/loaders/file-loader/](https://webpack.js.org/loaders/file-loader/)
    and [https://webpack.js.org/loaders/url-loader/](https://webpack.js.org/loaders/url-loader/).
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`file-loader`和`url-loader`的更多信息，请访问[https://webpack.js.org/loaders/file-loader/](https://webpack.js.org/loaders/file-loader/)和[https://webpack.js.org/loaders/url-loader/](https://webpack.js.org/loaders/url-loader/)。
- en: For more information about `vue-loader` and `vue-template-compiler`, please
    visit [https://vue-loader.vuejs.org/](https://vue-loader.vuejs.org/) and [https://www.npmjs.com/package/vue-template-compiler](https://www.npmjs.com/package/vue-template-compiler).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`vue-loader`和`vue-template-compiler`的更多信息，请访问[https://vue-loader.vuejs.org/](https://vue-loader.vuejs.org/)和[https://www.npmjs.com/package/vue-template-compiler](https://www.npmjs.com/package/vue-template-compiler)。
- en: If you are new to webpack, please visit [https://webpack.js.org/concepts/](https://webpack.js.org/concepts/).
    Also, visit [https://webpack.js.org/guides/asset-management/](https://webpack.js.org/guides/asset-management/)
    for its asset management guide. In a nutshell, webpack is a static module bundler
    for JavaScript apps. The main purpose of it is to bundle JavaScript files, but
    it also can be used to transform assets such as HTML, CSS, images, and fonts.
    If you don't want to serve your assets in the way that webpack does for you, you
    can also use the `/static/` directory for static assets, just as we mentioned
    before in the previous section, *Understanding Directory Structure*. However,
    there are benefits to serving assets using webpack. Let's find out what they are
    in the next section.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对webpack不熟悉，请访问[https://webpack.js.org/concepts/](https://webpack.js.org/concepts/)。另请访问[https://webpack.js.org/guides/asset-management/](https://webpack.js.org/guides/asset-management/)了解其资产管理指南。简而言之，webpack是JavaScript应用程序的静态模块打包工具。它的主要目的是捆绑JavaScript文件，但也可以用于转换HTML、CSS、图像和字体等资产。如果您不想以webpack为您提供的方式提供资产，您也可以使用`/static/`目录用于静态资产，就像我们在前一节“理解目录结构”中提到的那样。然而，使用webpack提供资产也有好处。让我们在下一节中了解它们是什么。
- en: webpack assets versus static assets
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: webpack资产与静态资产
- en: One of the benefits of using webpack for asset serving is that it optimizes
    them for production, whether they are images, fonts, or preprocessed styles such
    as Less, Sass, or Stylus. webpack can transform Less, Sass, and Stylus into generic
    CSS, while a static folder is just a place where you can put all of your static
    assets that will *never* be touched by webpack. In Nuxt, if you don't want to
    use the webpack assets from the `/assets/` directory for your project, you can
    use the `/static/` directory instead.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 使用webpack提供资产的好处之一是它会为生产进行优化，无论是图像、字体还是预处理样式，如Less、Sass或Stylus。webpack可以将Less、Sass和Stylus转换为通用CSS，而静态文件夹只是一个放置所有静态资产的地方，这些资产将*永远*不会被webpack触及。在Nuxt中，如果您不想为项目使用`/assets/`目录中的webpack资产，可以使用`/static/`目录代替。
- en: 'For example, we can use the static image from the `/static/` directory, as
    follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以从`/static/`目录中使用静态图像，如下所示：
- en: '[PRE66]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Another good example is the favicon file in the Nuxt config file:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很好的例子是Nuxt配置文件中的favicon文件：
- en: '[PRE67]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Note that if you use the `~` alias to link your assets in the `/static/` directory,
    webpack *will* process these assets, just like those in the `/assets/` directory,
    as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您使用`~`别名来链接`/static/`目录中的资产，webpack *将*处理这些资产，就像`/assets/`目录中的资产一样，如下所示：
- en: '[PRE68]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: We will work on the `/assets/` directory a lot for asset serving in [Chapter
    3](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=26&action=edit),
    *Adding UI Frameworks*, and in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit),
    *Adding Views, Routes, and Transitions*, as well as in [Chapter 5](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=28&action=edit),
    *Adding Vue Components*, to serve assets dynamically. Right now, let's summarize
    what you have learned in this chapter.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第3章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=26&action=edit)中大量使用`/assets/`目录来提供资产，*添加UI框架*，以及在[第4章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit)中，*添加视图、路由和转换*，以及在[第5章](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=28&action=edit)中，*添加Vue组件*，以动态方式提供资产。现在，让我们总结一下您在本章中学到的内容。
- en: You can find an example app for serving assets and files from these two directories
    in `/chapter-2/assets/` in our GitHub repository.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-2/assets/`中找到一个用于从这两个目录提供资产和文件的示例应用程序。
- en: Summary
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to install Nuxt with `create-nuxt-app`, and
    how to install it from scratch, and about the default directories installed by
    the Nuxt scaffolding tool. You also learned how to use the `nuxt.config.js` file
    to customize your app. Lastly, you learned to understand how assets work in Nuxt
    and the difference between using webpack and the `/static/` folder for assets
    serving.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何使用`create-nuxt-app`安装Nuxt，以及如何从头开始安装它，以及Nuxt脚手架工具安装的默认目录。您还学会了如何使用`nuxt.config.js`文件来自定义您的应用程序。最后，您学会了了解Nuxt中资产的工作方式以及使用webpack和`/static/`文件夹进行资产提供之间的区别。
- en: In the upcoming chapter, you will learn how to install custom UI frameworks,
    libraries, and tools, such as Zurb Foundation, Motion UI, jQuery UI, and Less
    CSS for your app. You will write some basic code to style your index page and
    add some animations to it. You will also start using some of the directories we
    have just covered in this chapter, such as the `/assets/`, `/plugins/`, and `/pages/` directories,
    to develop your Nuxt app.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将到来的章节中，您将学习如何为您的应用程序安装自定义UI框架、库和工具，例如Zurb Foundation、Motion UI、jQuery UI和Less
    CSS。您将编写一些基本代码来为您的首页添加样式并为其添加一些动画。您还将开始使用我们在本章中刚刚介绍的一些目录，如`/assets/`、`/plugins/`和`/pages/`目录，来开发您的Nuxt应用程序。
