["```js\n vue init webpack-simple support-center\n cd support-center\n npm install\n      npm install --save babel-polyfill\n```", "```js\n npm install --save-dev stylus stylus-loader\n```", "```js\n      import 'babel-polyfill'\n      import Vue from 'vue'\n\n      new Vue({\n        el: '#app',\n        render: h => h('div', 'Support center'),\n      })\n```", "```js\n npm install --save vue-router\n```", "```js\n      import Vue from 'vue'\n      import VueRouter from 'vue-router'\n```", "```js\n Vue.use(VueRouter)\n```", "```js\n      <template>\n        <div class=\"app-layout\">\n          <header class=\"header\">\n            <div><img class=\"img\"\n              src=\"../assets/logo.svg\"/></div>\n            <div>My shirt shop</div>\n          </header>\n\n          <!-- Menu will be here -->\n\n          <router-view />\n        </div>\n      </template>\n```", "```js\n      <style lang=\"stylus\">\n      @import '../style/main';\n      </style>\n```", "```js\n      <style lang=\"stylus\" scoped>\n      .header {\n        .img {\n          width: 64px;\n          height: 64px;\n        }\n      }\n      </style>\n```", "```js\n      import AppLayout from './components/AppLayout.vue'\n\n      new Vue({\n        el: '#app',\n        render: h => h(AppLayout),\n      })\n```", "```js\n      <template>\n        <main class=\"home\">\n          <h1>Welcome to our support center</h1>\n          <p>\n            We are here to help! Please read the <a>F.A.Q</a> first,\n            and if you don't find the answer to your question, <a>send                  \n            us a ticket!</a>\n          </p>\n        </main>\n      </template>\n```", "```js\n      <template>\n        <main class=\"faq\">\n          <h1>Frenquently Asked Questions</h1>\n        </main>\n      </template>\n```", "```js\n      import Home from './components/Home.vue'\n      import FAQ from './components/FAQ.vue'\n```", "```js\n      const routes = [\n        // Routes will be here\n      ]\n```", "```js\n{ path: '/some/path', name: 'my-route', component: ... }\n```", "```js\n      const routes = [\n        { path: '/', name: 'home', component: Home },\n        { path: '/faq', name: 'faq', component: FAQ },\n      ]\n```", "```js\n      const router = new VueRouter({\n        routes,\n      })\n```", "```js\n export default router\n```", "```js\n      import router from './router'\n```", "```js\n      new Vue({\n        el: '#app',\n        render: h => h(AppLayout),\n        // Provide the router to the app\n        router,\n      })\n```", "```js\nconst router = new VueRouter({\n  routes,\n  mode: 'history',\n})\n```", "```js\n<template>\n  <nav class=\"menu\">\n    <!-- Links here -->\n  </nav>\n</template>\n```", "```js\n<script>\nimport NavMenu from './NavMenu.vue'\nexport default {\n  components: {\n    NavMenu,\n  },\n}\n</script>\n```", "```js\n<header class=\"header\">\n  <div><img class=\"img\" src=\"../assets/logo.svg\"/></div>\n  <div>My shirt shop</div>\n</header>\n\n<NavMenu />\n```", "```js\n<router-link to=\"/faq\">FAQ</router-link>\n```", "```js\n<router-link :to=\"{ name: 'faq' }\">FAQ</router-link>\n```", "```js\n<template>\n  <nav class=\"menu\">\n    <router-link :to=\"{ name: 'home' }\">Home</router-link>\n    <router-link :to=\"{ name: 'faq' }\">FAQ</router-link>\n  </nav>\n</template>\n```", "```js\n      <style lang=\"stylus\" scoped>\n      @import '../style/imports';\n\n      .router-link-active {\n        border-bottom-color: $primary-color;\n      }\n      </style>\n```", "```js\n      <router-link :to=\"{ name: 'home' }\" exact>Home</router-link>\n```", "```js\ncd server_folder\nnpm install\nnpm start\n```", "```js\n      <script>\n      export default {\n        data () {\n          return {\n            questions: [],\n            error: null,\n          }\n        },\n      }\n      </script>\n```", "```js\n      <template>\n        <main class=\"faq\">\n          <h1>Frequently Asked Questions</h1>\n\n          <div class=\"error\" v-if=\"error\">\n            Can't load the questions\n          </div>\n\n          <section class=\"list\">\n            <article v-for=\"question of questions\">\n              <h2 v-html=\"question.title\"></h2>\n              <p v-html=\"question.content\"></p>\n```", "```js\n            </article>\n          </section>\n        </main>\n      </template>\n```", "```js\nfetch(url).then(response => {\n  if (response.ok) {\n    // Returns a new promise\n    return response.json()\n  } else {\n    return Promise.reject('error')\n  }\n}).then(result => {\n  // Success\n  console.log('JSON:', result)\n}).catch(e => {\n  // Failure\n  console.error(e)\n})\n```", "```js\ndata () {\n  // ...\n},\ncreated () {\n  // fetch here\n},\n```", "```js\n created () {\n        fetch('http://localhost:3000/questions')\n      },\n```", "```js\n      fetch('http://localhost:3000/questions').then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          return Promise.reject('error')\n        }\n      })\n```", "```js\n        // ...\n      }).then(result => {\n        // Result is the JSON parsed object from the server\n        this.questions = result\n      })\n```", "```js\n        // ...\n      }).catch(e => {\n        this.error = e\n      })\n```", "```js\ncreated () {\n  fetch('http://localhost:3000/questions').then(response => {\n    if (response.ok) {\n      return response.json()\n    } else {\n      return Promise.reject('error')\n    }\n  }).then(result => {\n    this.questions = result\n  }).catch(e => {\n    this.error = e\n  })\n},\n```", "```js\nasync created () {\n  try {\n    const response = await fetch('http://localhost:3000/questions')\n    if (response.ok) {\n      this.questions = await response.json()\n    } else {\n      throw new Error('error')\n    }\n  } catch (e) {\n    this.error = e\n  }\n},\n```", "```js\n      <template>\n        <div class=\"loading\">\n          <div></div>\n        </div>\n      </template>\n```", "```js\n      import Vue from 'vue'\n      import Loading from './components/Loading.vue'\n\n      Vue.component('Loading', Loading)\n```", "```js\n      import './global-components'\n```", "```js\n      data () {\n        return {\n          questions: [],\n          error: null,\n          loading: false,\n        }\n      },\n```", "```js\n      <Loading v-if=\"loading\" />\n```", "```js\n      async created () {\n        this.loading = true\n        try {\n          const response = await                             \n       fetch('http://localhost:3000/questions')\n          // ...\n        } catch (e) {\n          this.error = e\n        }\n        this.loading = false\n      }\n```", "```js\n      export default {\n        install (Vue) {\n          console.log('Installed!')\n        }\n      }\n```", "```js\n      import VueFetch from './plugins/fetch'\n      Vue.use(VueFetch)\n```", "```js\n      export default {\n        install (Vue, options) {\n          console.log('Installed!', options)\n        },\n      }\n```", "```js\n      Vue.use(VueFetch, {\n        baseUrl: 'http://localhost:3000/',\n      })\n```", "```js\n      let baseUrl\n\n      export default {\n        install (Vue, options) {\n          console.log('Installed!', options)\n\n          baseUrl = options.baseUrl\n        },\n      }\n```", "```js\n      export async function $fetch (url) {\n        const response = await fetch(`${baseUrl}${url}`)\n        if (response.ok) {\n          const data = await response.json()\n          return data\n        } else {\n          const error = new Error('error')\n          throw error\n        }\n      }\n```", "```js\n      export default {\n        install (Vue, options) {\n          // Plugin options\n          baseUrl = options.baseUrl\n\n          Vue.prototype.$fetch = $fetch\n        },\n      }\n```", "```js\n      this.loading = true\n      try {\n        this.questions = await this.$fetch('questions')\n      } catch (e) {\n        this.error = e\n      }\n      this.loading = false\n```", "```js\n      export default {\n        data () {\n          return {\n            remoteDataLoading: 0,\n          }\n        },\n      }\n```", "```js\n      <script>\n      import RemoteData from '../mixins/RemoteData'\n\n      export default {\n        mixins: [\n          RemoteData,\n        ],\n\n        // ...\n      }\n      </script>\n```", "```js\n      data () {\n        return {\n          questions: [],\n          error: null,\n          loading: false,\n          remoteDataLoading: 42,\n        }\n      },\n```", "```js\n export default function (resources) {\n        return {\n          data () {\n            return {\n              remoteDataLoading: 0,\n            }\n          },\n        }\n      }\n```", "```js\n      mixins: [\n        RemoteData({\n          questionList: 'questions',\n        }),\n      ],\n```", "```js\n data () {\n        let initData = {\n          remoteDataLoading: 0,\n        }\n\n        // Initialize data properties\n        for (const key in resources) {\n          initData[key] = null\n        }\n\n        return initData\n      },\n```", "```js\n methods: {\n        async fetchResource (key, url) {\n          try {\n            this.$data[key] = await this.$fetch(url)\n          } catch (e) {\n            console.error(e)\n          }\n        },\n      },\n```", "```js\n created () {\n        for (const key in resources) {\n          let url = resources[key]\n          this.fetchResource(key, url)\n        }\n      },\n```", "```js\n      <article v-for=\"question of questionList\">\n```", "```js\n      async fetchResource (key, url) {\n        this.$data.remoteDataLoading++\n        try {\n          this.$data[key] = await this.$fetch(url)\n        } catch (e) {\n          console.error(e)\n        }\n        this.$data.remoteDataLoading--\n      },\n```", "```js\n computed: {\n        remoteDataBusy () {\n          return this.$data.remoteDataLoading !== 0\n        },\n      },\n```", "```js\n      <Loading v-if=\"remoteDataBusy\" />\n```", "```js\n      // Initialize data properties\n      initData.remoteErrors = {}\n      for (const key in resources) {\n        initData[key] = null\n        initData.remoteErrors[key] = null\n      }\n```", "```js\n      async fetchResource (key, url) {\n        this.$data.remoteDataLoading++\n        // Reset error\n        this.$data.remoteErrors[key] = null\n        try {\n          this.$data[key] = await this.$fetch(url)\n        } catch (e) {\n          console.error(e)\n          // Put error\n          this.$data.remoteErrors[key] = e\n        }\n        this.$data.remoteDataLoading--\n      },\n```", "```js\n      computed: {\n        // ...\n\n        hasRemoteErrors () {\n          return Object.keys(this.$data.remoteErrors).some(\n            key => this.$data.remoteErrors[key]\n          )\n        },\n      },\n```", "```js\n      <div class=\"error\" v-if=\"hasRemoteErrors\">\n```", "```js\n<script>\nimport RemoteData from '../mixins/RemoteData'\n\nexport default {\n  mixins: [\n    RemoteData({\n      questionList: 'questions',\n    }),\n  ],\n}\n</script>\n```", "```js\n      export default {\n        user: null,\n      }\n```", "```js\n      import state from './state'\n```", "```js\n      new Vue({\n        el: '#app',\n        data: state,\n        router,\n        render: h => h(AppLayout),\n      })\n```", "```js\n      export default {\n        install (Vue, state) {\n          Object.defineProperty(Vue.prototype, '$state', {\n            get: () => state,\n          })\n        }\n      }\n```", "```js\n      import VueState from './plugins/state'\n```", "```js\n Vue.use(VueState, state)\n```", "```js\nconsole.log(this.$state)\n```", "```js\n      <template>\n        <form @submit.prevent=\"submit\">\n          <section class=\"content\">\n            <h2>{{ title }}</h2>\n\n            <!-- Main content -->\n            <slot />\n\n            <div class=\"actions\">\n              <!-- Action buttons -->\n              <slot name=\"actions\" />\n            </div>\n\n            <div class=\"error\" v-if=\"error\">{{ error }}</div>\n          </section>\n\n          <transition name=\"fade\">\n            <!-- Expanding over the form -->\n            <Loading v-if=\"busy\" class=\"overlay\" />\n          </transition>\n        </form>\n      </template>\n```", "```js\n      <script>\n      export default {\n        props: {\n          title: {\n            type: String,\n            required: true,\n          },\n          operation: {\n            type: Function,\n            required: true,\n          },\n          valid: {\n            type: Boolean,\n            required: true,\n          },\n        },\n      }\n      </script>\n```", "```js\n data () {\n        return {\n          error: null,\n          busy: false,\n        }\n      },\n```", "```js\n methods: {\n        async submit () {\n          if (this.valid && !this.busy) {\n            this.error = null\n            this.busy = true\n            try {\n              await this.operation()\n            } catch (e) {\n              this.error = e.message\n            }\n            this.busy = false\n          }\n        },\n      },\n```", "```js\n      import SmartForm from './components/SmartForm.vue'\n      Vue.component('SmartForm', SmartForm)\n```", "```js\n<script>\nexport default {\n  props: {\n    name: {\n      type: String,\n    },\n    type: {\n      type: String,\n      default: 'text',\n    },\n    value: {\n      required: true,\n    },\n    placeholder: {\n      type: String,\n    },\n    invalid: {\n      type: Boolean,\n      default: false,\n    },\n  },\n}\n</script>\n```", "```js\n computed: {\n        inputClass () {\n          return {\n            'invalid': this.invalid,\n          }\n        },\n      },\n```", "```js\n      <template>\n        <div class=\"row\">\n          <input\n            class=\"input\"\n            :class=\"inputClass\"\n            :name=\"name\"\n            :type=\"type\"\n            :value.prop=\"value\"\n            :placeholder=\"placeholder\"\n          />\n        </div>\n      </template>\n```", "```js\n      import FormInput from './components/FormInput.vue'\n      Vue.component('FormInput', FormInput)\n```", "```js\n      <template>\n        <main class=\"login\">\n          <h1>Please login to continue</h1>\n          <form>\n            <FormInput\n              name=\"username\"\n              :value=\"username\"\n              placeholder=\"Username\" />\n          </form>\n        </main>\n      </template>\n\n      <script>\n      export default {\n        data () {\n          return {\n            username: '',\n          }\n        },\n      }\n      </script>\n```", "```js\n      import Login from './components/Login.vue'\n\n      const routes [\n        // ...\n        { path: '/login', name: 'login', component: Login },\n      ]\n```", "```js\n methods: {\n        update (event) {\n          console.log(event.currentTarget.value)\n        },\n      },\n```", "```js\n @input=\"update\"\n```", "```js\n      methods: {\n        update (event) {\n          this.$emit('input', event.currentTarget.value)\n        },\n      },\n```", "```js\n      <FormInput\n       name=\"username\"\n       :value=\"username\"\n       @input=\"val => username = val\"\n       placeholder=\"Username\" />\n```", "```js\n      <FormInput\n       name=\"username\"\n       v-model=\"username\"\n       placeholder=\"Username\" />\n```", "```js\n model: {\n       prop: 'text',\n       event: 'update',\n      },\n```", "```js\n      props: {\n        // ...\n        text: {\n          required: true,\n        },\n      },\n```", "```js\n      <input\n       ...\n       :value=\"text\"\n       ... />\n```", "```js\n      this.$emit('update', event.currentTarget.value)\n```", "```js\n data () {\n        return {\n          mode: 'login',\n          username: '',\n          password: '',\n          password2: '',\n          email: '',\n        }\n      },\n```", "```js\n computed: {\n        title () {\n          switch (this.mode) {\n            case 'login': return 'Login'\n            case 'signup': return 'Create a new account'\n          }\n        },\n      },\n```", "```js\n retypePasswordError () {\n        return this.password2 && this.password !== this.password2\n      },\n```", "```js\n signupValid () {\n        return this.password2 && this.email &&             \n        !this.retypePasswordError\n      },\n      valid () {\n        return this.username && this.password &&\n        (this.mode !== 'signup' || this.signupValid)\n      },\n```", "```js\n methods: {\n        async operation() {\n          await this[this.mode]()\n        },\n        async login () {\n          // TODO\n        },\n        async signup () {\n          // TODO\n        },\n      }\n```", "```js\n      <template>\n        <main class=\"login\">\n          <h1>Please login to continue</h1>\n          <SmartForm\n            class=\"form\"\n            :title=\"title\"\n            :operation=\"operation\"\n            :valid=\"valid\">\n            <!-- TODO -->\n          </SmartForm>\n        </main>\n      </template>\n```", "```js\n      <FormInput\n        name=\"username\"\n        v-model=\"username\"\n        placeholder=\"Username\" />\n      <FormInput\n        name=\"password\"\n        type=\"password\"\n        v-model=\"password\"\n        placeholder=\"Password\" />\n      <template v-if=\"mode === 'signup'\">\n        <FormInput\n          name=\"verify-password\"\n          type=\"password\"\n          v-model=\"password2\"\n          placeholder=\"Retype Password\"\n          :invalid=\"retypePasswordError\" />\n        <FormInput\n          name=\"email\"\n          type=\"email\"\n          v-model=\"email\"\n          placeholder=\"Email\" />\n      </template>\n```", "```js\n      <template slot=\"actions\">\n        <template v-if=\"mode === 'login'\">\n          <button\n            type=\"button\"\n            class=\"secondary\"\n            @click=\"mode = 'signup'\">\n            Sign up\n          </button>\n          <button\n            type=\"submit\"\n            :disabled=\"!valid\">\n            Login\n          </button>\n        </template>\n        <template v-else-if=\"mode === 'signup'\">\n          <button\n            type=\"button\"\n            class=\"secondary\"\n            @click=\"mode = 'login'\">\n            Back to login\n          </button>\n          <button\n            type=\"submit\"\n            :disabled=\"!valid\">\n            Create account\n          </button>\n        </template>\n      </template>\n```", "```js\n<style lang=\"stylus\" scoped>\n.form {\n  >>> .content {\n    max-width: 400px;\n  }\n}\n</style>\n```", "```js\n.form[data-v-0e596401] .content {\n  max-width: 400px;\n}\n```", "```js\n.form .content[data-v-0e596401] {\n  max-width: 400px;\n}\n```", "```js\n      export async function $fetch (url, options) {\n        // ...\n      }\n```", "```js\n      const finalOptions = Object.assign({}, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n      }, options)\n```", "```js\n      const response = await fetch(`${baseUrl}${url}`, finalOptions)\n```", "```js\n      if (response.ok) {\n        const data = await response.json()\n        return data\n      } else {\n        const message = await response.text()\n const error = new Error(message)\n error.response = response\n        throw error\n      }\n```", "```js\nasync signup () {\n  await this.$fetch('signup', {\n    method: 'POST',\n    body: JSON.stringify({\n      username: this.username,\n      password: this.password,\n      email: this.email,\n    }),\n  })\n  this.mode = 'login'\n},\n```", "```js\nasync login () {\n  this.$state.user = await this.$fetch('login', {\n    method: 'POST',\n    body: JSON.stringify({\n      username: this.username,\n      password: this.password,\n    }),\n  })\n  this.$router.push({ name: 'home' })\n},\n```", "```js\n      <div class=\"spacer\"></div>\n```", "```js\n      <template v-if=\"$state.user\">\n        <a>{{ $state.user.username }}</a>\n        <a @click=\"logout\">Logout</a>\n      </template>\n```", "```js\n      <router-link v-else :to=\"{name: 'login'}\">Login</router-link>\n```", "```js\n<script>\nexport default {\n  methods: {\n    async logout () {\n      const result = await this.$fetch('logout')\n      if (result.status === 'ok') {\n        this.$state.user = null\n      }\n    },\n  },\n}\n</script>\n```", "```js\n      <template>\n        <main class=\"tickets-layout\">\n          <h1>Your Support tickets</h1>\n          <!-- TODO -->\n        </main>\n      </template>\n```", "```js\n      import TicketsLayout from './components/TicketsLayout.vue'\n\n      const routes = [\n        // ...\n        { path: '/tickets', name: 'tickets',\n component: TicketsLayout },\n      ]\n```", "```js\n      <router-link :to=\"{ name: 'tickets' }\">\n        Support tickets</router-link>\n```", "```js\n      { path: '/tickets', /* ... */, meta: { private: true } },\n```", "```js\n      router.beforeEach((to, from, next) => {\n        // TODO\n        console.log('to', to.name)\n        next()\n      })\n```", "```js\n      if (to.meta.private) {\n        // TODO Redirect to login\n      }\n```", "```js\n      import state from './state'\n```", "```js\n      if (to.meta.private && !state.user) {\n        // TODO Redirect to login\n      }\n```", "```js\n      if (to.meta.private && !state.user) {\n        next({ name: 'login' })\n return\n      }\n```", "```js\n      next({\n        name: 'login',\n        params: {\n          wantedRoute: to.fullPath,\n        },\n      })\n```", "```js\n      this.$router.replace(this.$route.params.wantedRoute ||\n        { name: 'home' })\n```", "```js\n      import VueFetch, { $fetch } from './plugins/fetch'\n```", "```js\n      async function main () {\n        // Get user info\n        try {\n          state.user = await $fetch('user')\n        } catch (e) {\n          console.warn(e)\n        }\n        // Launch app\n        new Vue({\n          el: '#app',\n          data: state,\n          router,\n          render: h => h(AppLayout),\n        })\n      }\n\n      main()\n```", "```js\n      { path: '/login', name: 'login', component: Login,\n        meta: { guest: true } },\n```", "```js\n      router.beforeEach((to, from, next) => {\n        // ...\n        if (to.meta.guest && state.user) {\n          next({ name: 'home' })\n          return\n        }\n        next()\n      })\n```", "```js\n      <script>\n      import RemoteData from '../mixins/RemoteData'\n\n      export default {\n        mixins: [\n          RemoteData({\n            tickets: 'tickets',\n          }),\n        ],\n      }\n      </script>\n```", "```js\n      <template>\n        <div class=\"tickets\">\n          <Loading v-if=\"remoteDataBusy\"/>\n\n          <div class=\"empty\" v-else-if=\"tickets.length === 0\">\n            You don't have any ticket yet.\n          </div>\n\n          <section v-else class=\"tickets-list\">\n            <div v-for=\"ticket of tickets\" class=\"ticket-item\">\n              <span>{{ ticket.title }}</span>\n              <span class=\"badge\">{{ ticket.status }}</span>\n              <span class=\"date\">{{ ticket.date }}</span>\n            </div>\n          </section>\n        </div>\n      </template>\n```", "```js\n npm install --save moment\n```", "```js\n      import moment from 'moment'\n\n      export function date (value) {\n        return moment(value).format('L')\n      }\n```", "```js\n      import * as filters from './filters'\n\n      for (const key in filters) {\n        Vue.filter(key, filters[key])\n      }\n```", "```js\n      <span class=\"date\">{{ ticket.date | date }}</span>\n```", "```js\n      import state from '../state'\n      import router from '../router'\n```", "```js\n      if (response.ok) {\n        // ...\n      } else if (response.status === 403) {\n        // If the session is no longer valid\n        // We logout\n        state.user = null\n\n        // If the route is private\n        // We go to the login screen\n        if (router.currentRoute.matched.some(r => r.meta.private)) {\n          router.replace({ name: 'login', params: {\n            wantedRoute: router.currentRoute.fullPath,\n          }})\n        }\n      } else {\n        // ...\n      }\n```", "```js\n      <template>\n        <div class=\"new-ticket\">\n          <h1>New ticket</h1>\n        </div>\n      </template>\n```", "```js\n      import Tickets from './components/Tickets.vue'\n      import NewTicket from './components/NewTicket.vue'\n\n      const routes = [\n        // ...\n        { path: '/tickets', component: TicketsLayout,\n          meta: { private: true }, children: [\n          { path: '', name: 'tickets', component: Tickets },\n          { path: 'new', name: 'new-ticket', component: NewTicket },\n        ] },\n      ]\n```", "```js\n      <template>\n        <main class=\"tickets-layout\">\n          <h1>Your Support tickets</h1>\n\n          <div class=\"actions\">\n            <router-link\n              v-if=\"$route.name !== 'tickets'\"\n              tag=\"button\"\n              class=\"secondary\"\n              :to=\"{name: 'tickets'}\">\n              See all tickets\n            </router-link>\n            <router-link\n              v-if=\"$route.name !== 'new-ticket'\"\n              tag=\"button\"\n              :to=\"{name: 'new-ticket'}\">\n              New ticket\n            </router-link>\n          </div>\n\n          <router-view />\n        </main>\n      </template>\n```", "```js\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(r => r.meta.private) && !state.user) {\n    // ...\n  }\n  if (to.matched.some(r => r.meta.guest) && state.user) {\n    // ...\n  }\n  next()\n})\n```", "```js\n      <SmartForm\n       title=\"New ticket\"      \n       :operation=\"operation\"\n       :valid=\"valid\">\n        <FormInput\n          name=\"title\"\n          v-model=\"title\"\n          placeholder=\"Short description (max 100 chars)\"\n          maxlength=\"100\"\n          required/>\n      </SmartForm>\n```", "```js\n      <script>\n      export default {\n        data () {\n          return {\n            title: '',\n            description: '',\n          }\n        },\n\n        computed: {\n          valid () {\n            return !!this.title && !!this.description\n          },\n        },\n\n        methods: {\n          async operation () {\n            // TODO\n          },\n        },\n      }\n      </script>\n```", "```js\n      computed: {\n        // ...\n        element () {\n          return this.type === 'textarea' ? this.type : 'input'\n        },\n      },\n```", "```js\n      <component\n        :is=\"element\"\n        class=\"input\"\n        :class=\"inputClass\"\n        :name=\"name\"\n        :type=\"type\"\n        :value.prop=\"text\"\n        @input=\"update\"\n        :placeholder=\"placeholder\"\n      />\n```", "```js\n      <FormInput\n        type=\"textarea\"\n        name=\"description\"\n        v-model=\"description\"\n        placeholder=\"Describe your problem in details\"/>\n```", "```js\n<FormInput :text=\"username\" required>\n```", "```js\n      <component\n        ...\n        v-bind=\"$attrs\" />\n```", "```js\n      <FormInput\n        ...\n        rows=\"4\"/>\n```", "```js\n<textarea data-v-ae2eb904=\"\" type=\"textarea\" placeholder=\"Describe your problem in details\" rows=\"4\" class=\"input\"></textarea>\n```", "```js\n      <template slot=\"actions\">\n        <router-link\n          tag=\"button\"\n          :to=\"{name: 'tickets'}\"\n          class=\"secondary\">\n          Go back\n        </router-link>\n        <button\n          type=\"submit\"\n          :disabled=\"!valid\">\n          Send ticket\n        </button>\n      </template>\n```", "```js\n      async operation () {\n        const result = await this.$fetch('tickets/new', {\n          method: 'POST',\n          body: JSON.stringify({\n            title: this.title,\n            description: this.description,\n          }),\n        })\n        this.title = this.description = ''\n      },\n```", "```js\n      export default function (id, fields) {\n        // TODO\n      }\n```", "```js\n      return {\n        watch: fields.reduce((obj, field) => {\n          // Watch handler\n          obj[field] = function (val) {\n            localStorage.setItem(`${id}.${field}`, JSON.stringify(val))\n          }\n          return obj\n        }, {}),\n      }\n```", "```js\n      import PersistantData from '../mixins/PersistantData'\n\n      export default {\n        mixins: [\n          PersistantData('NewTicket', [\n            'title',\n            'description',\n          ]),\n        ],\n\n       // ...\n      }\n```", "```js\n{\n  watch: {\n    title: function (val) {\n      let field = 'title'\n      localStorage.setItem(`${id}.${field}`, JSON.stringify(val))\n    },\n    description: function (val) {\n      let field = 'description'\n      localStorage.setItem(`${id}.${field}`, JSON.stringify(val))\n    },\n  },\n}\n```", "```js\n methods: {\n        saveAllPersistantData () {\n          for (const field of fields) {\n            localStorage.setItem(`${id}.${field}`,             \n            JSON.stringify(this.$data[field]))\n          }\n        },\n      },\n      beforeDestroy () {\n        this.saveAllPersistantData()\n      },\n```", "```js\n created () {\n        for (const field of fields) {\n          const savedValue = localStorage.getItem(`${id}.${field}`)\n          if (savedValue !== null) {\n            this.$data[field] = JSON.parse(savedValue)\n          }\n        }\n      },\n```", "```js\n      <template>\n        <div class=\"ticket\">\n          <h2>Ticket</h2>\n\n          <Loading v-if=\"remoteDataBusy\"/>\n\n          <div class=\"empty\" v-else-if=\"!ticket\">\n            Ticket not found.\n          </div>\n\n          <template v-else>\n            <!-- General info -->\n            <section class=\"infos\">\n              <div class=\"info\">\n                Created on <strong>{{ ticket.date | date }}</strong>\n              </div>\n              <div class=\"info\">\n                Author <strong>{{ ticket.user.username }}</strong>\n              </div>\n              <div class=\"info\">\n                Status <span class=\"badge\">{{ ticket.status }}</span>\n              </div>\n            </section>\n            <!-- Content -->\n            <section class=\"content\">\n              <h3>{{ ticket.title }}</h3>\n              <p>{{ ticket.description }}</p>\n            </section>\n          </template>\n        </div>\n      </template>\n```", "```js\n      <script>\n      export default {\n        props: {\n          id: {\n            type: String,\n            required: true,\n          },\n        },\n      }\n      </script>\n```", "```js\n      created () {\n        for (const key in resources) {\n          let url = resources[key]\n          // If the value is a function\n          // We watch its result\n          if (typeof url === 'function') {\n            this.$watch(url, (val) => {\n              this.fetchResource(key, val)\n            }, {\n              immediate: true,\n            })\n          } else {\n            this.fetchResource(key, url)\n          }\n        }\n      },\n```", "```js\n      import RemoteData from '../mixins/RemoteData'\n\n      export default {\n        mixins: [\n          RemoteData({\n            ticket () {\n              return `ticket/${this.id}`\n            },\n          }),\n        ],\n        // ...\n      }\n```", "```js\n      import Ticket from './Ticket.vue'\n\n      export default {\n        //...\n        components: {\n          Ticket,\n        },\n        data () {\n          return {\n            id: null,\n          }\n        },\n      }\n```", "```js\n      <Ticket v-if=\"id\" :id=\"id\"/>\n```", "```js\n      <a @click=\"id = ticket._id\">{{ ticket.title }}</a>\n```", "```js\n      import Ticket from './components/Ticket.vue'\n\n      const routes = [\n        // ...\n        { path: '/tickets', component: TicketsLayout,\n          meta: { private: true }, children: [\n          // ...\n          { path: ':id', name: 'ticket', component: Ticket },\n        ] },\n      ]\n```", "```js\n<router-link :to=\"{name: 'ticket', params: { id: ticket._id }}\">        {{ ticket.title }}</router-link>\n```", "```js\ncomputed: {\n  id () {\n    return $route.params.id\n  },\n},\n```", "```js\n      { path: ':id', /* ... */, props: true },\n```", "```js\n{ path: ':id', /* ... */, props: route => ({ id: route.params.id }) },\n```", "```js\n{ path: ':id', /* ... */, props: { id: 'abc' } },\n```", "```js\n      <template>\n        <main class=\"not-found\">\n          <h1>This page can't be found</h1>\n          <p class=\"more-info\">\n            Sorry, but we can't find the page you're looking for.<br>\n            It might have been moved or deleted.<br>\n            Check your spelling or click below to return to the                           \n            homepage.\n          </p>\n          <div class=\"actions\">\n            <router-link tag=\"button\" :to=\"{name: 'home'}\">Return to             \n            home</router-link>\n          </div>\n        </main>\n      </template>\n\n      <style lang=\"stylus\" scoped>\n      .more-info {\n        text-align: center;\n      }\n      </style>\n```", "```js\n      import NotFound from './components/NotFound.vue'\n\n      const routes = [\n        // ...\n        { path: '*', component: NotFound },\n      ]\n```", "```js\n      <transition name=\"fade\" mode=\"out-in\">\n        <router-view />\n      </transition>\n```", "```js\n{ x: 100, y: 200 }\n```", "```js\n{ selector: '#foo', offset: { x: 0, y: 200 } }\n```", "```js\n      const router = new VueRouter({\n        routes,\n        mode: 'history',\n        scrollBehavior (to, from, savedPosition) {\n          return { x: 0, y: 0 }\n        },\n      })\n```", "```js\nreturn { selector: 'h1' }\n```", "```js\n      if (to.hash) {\n        return { selector: to.hash }\n      }\n      return { x: 0, y: 0 }\n```", "```js\n if (savedPosition) {\n return savedPosition\n }\n      if (to.hash) {\n        return { selector: to.hash }\n      }\n      return { x: 0, y: 0 }\n```"]