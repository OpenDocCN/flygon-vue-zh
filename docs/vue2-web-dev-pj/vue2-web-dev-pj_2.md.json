["```js\n      <html>\n      <head>\n        <title>Notebook</title>\n        <!-- Icons & Stylesheets -->\n        <link href=\"https://fonts.googleapis.com/icon?                   \n        family=Material+Icons\" rel=\"stylesheet\">\n        <link rel=\"stylesheet\" href=\"style.css\" />\n      </head>\n      <body>\n        <!-- Include the library in the page -->\n        <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n\n        <!-- Notebook app -->\n        <div id=\"notebook\">\n\n          <!-- Main pane -->\n          <section class=\"main\">\n\n          </section>\n\n        </div>\n\n        <!-- Some JavaScript -->\n        <script src=\"script.js\"></script>\n      </body>\n      </html>\n```", "```js\n      // New VueJS instance\n      new Vue({\n        // CSS selector of the root DOM element\n        el: '#notebook',\n      })\n```", "```js\n      new Vue({\n        el: '#notebook',\n\n        // Some data\n        data () {\n          return {\n            content: 'This is a note.',\n          }\n        },\n      })\n```", "```js\n<!-- Main pane -->\n<section class=\"main\">\n  <textarea v-model=\"content\"></textarea>\n</section>\n```", "```js\n      <!-- Include the library in the page -->\n      <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n      <!-- Add the marked library: -->\n      <script src=\"https://unpkg.com/marked\"></script>\n```", "```js\n      const html = marked('**Bold** *Italic* [link]   \n      (http://vuejs.org/)')\n      console.log(html)\n```", "```js\n<p><strong>Bold</strong> <em>Italic</em>\n<a href=\"http://vuejs.org/\">link</a></p>\n```", "```js\n// Computed properties\ncomputed: {\n  notePreview () {\n    // Markdown rendered to HTML\n    return marked(this.content)\n  },\n},\n```", "```js\n      <!-- Preview pane -->\n      <aside class=\"preview\">\n        {{ notePreview }}\n      </aside>\n```", "```js\n      I'm in **bold**!\n```", "```js\nI'm in <strong>bold</strong>!\n```", "```js\n<!-- Preview pane -->\n<aside class=\"preview\" v-html=\"notePreview\">\n</aside>\n```", "```js\nnew Vue({\n  // ...\n\n  // Change watchers\n  watch: {\n    // Watching 'content' data property\n    content: {\n      handler (val, oldVal) {\n        console.log('new note:', val, 'old note:', oldVal)\n      },\n    },\n  },\n})\n```", "```js\nnew note: This is a **note**! old note: This is a **note**\n```", "```js\n      content: {\n        handler (val, oldVal) {\n          console.log('new note:', val, 'old note:', oldVal)      \n        },\n        immediate: true,\n      },\n```", "```js\nnew note: This is a **note** old note: undefined\n```", "```js\n      content: {\n        handler (val, oldVal) {\n          console.log('new note:', val, 'old note:', oldVal)\n        },\n      },\n```", "```js\ncontent (val, oldVal) {\n  console.log('new note:', val, 'old note:', oldVal)\n},\n```", "```js\n      content (val, oldVal) {\n        console.log('new note:', val, 'old note:', oldVal)\n        localStorage.setItem('content', val)\n      },\n```", "```js\n      new Vue({\n        // ...\n\n        methods: {\n          saveNote (val) {\n            console.log('saving note:', val)\n            localStorage.setItem('content', val)\n          },\n        },\n      })\n```", "```js\n      watch: {\n        content: {\n          handler: 'saveNote',\n        },\n      },\n```", "```js\nwatch: {\n  content: 'saveNote',\n},\n```", "```js\nmethods: {\n  saveNote (val) {\n    console.log('saving note:', val)\n    localStorage.setItem('content', val)\n    this.reportOperation('saving')\n  },\n  reportOperation (opName) {\n    console.log('The', opName, 'operation was completed!')\n  },\n},\n```", "```js\nmethods: {\n  saveNote () {\n    console.log('saving note:', this.content)\n    localStorage.setItem('content', this.content)\n  },\n},\n```", "```js\nwatch: {\n  content (val, oldVal) {\n    console.log('new note:', val, 'old note:', oldVal)\n    console.log('saving note:', this.content)\n    localStorage.setItem('content', this.content)\n  },\n},\n```", "```js\nconsole.log('restored note:', localStorage.getItem('content'))\n```", "```js\nnew Vue({\n  // ...\n\n  // This will be called when the instance is ready\n  created () {\n    // Set the content to the stored value\n    // or to a default string if nothing was saved\n    this.content = localStorage.getItem('content') || 'You can write in **markdown**'\n  },\n})\n```", "```js\nnew note: You can write in **markdown** old note: This is a note\nsaving note: You can write in **markdown**\nThe saving operation was completed!\n```", "```js\nnew Vue({\n  // ...\n\n  data () {\n    return {\n      content: localStorage.getItem('content') || 'You can write in **markdown**',\n    }\n  },\n\n  // ...\n})\n```", "```js\n      <!-- Notebook app -->\n      <div id=\"notebook\">\n\n        <!-- Sidebar -->\n        <aside class=\"side-bar\">\n          <!-- Here will be the note list -->\n        </aside>\n\n        <!-- Main pane -->\n        <section class=\"main\">\n      ...\n```", "```js\n      data () {\n        return {\n          content: ...\n          // New! A note array\n          notes: [],\n        }\n      },\n```", "```js\nmethods:{\n  // Add a note with some default content and select it\n  addNote () {\n    const time = Date.now()\n    // Default new note\n    const note = {\n      id: String(time),\n      title: 'New note ' + (this.notes.length + 1),\n      content: '**Hi!** This notebook is using [markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) for formatting!',\n      created: time,\n      favorite: false,\n    }\n    // Add to the list\n    this.notes.push(note)\n  },\n}\n```", "```js\n<aside class=\"side-bar\">\n  <!-- Toolbar -->\n  <div class=\"toolbar\">\n    <!-- Add note button -->\n    <button><i class=\"material-icons\">add</i> Add note</button>\n  </div>\n</aside>\n```", "```js\n<button v-directive:argument=\"value\">\n```", "```js\n<button v-on:click=\"callback\">\n```", "```js\n<button v-on:click=\"addNote\"><i class=\"material-icons\">add</i> Add note</button>\n```", "```js\n<button @click=\"addNote\"><i class=\"material-icons\">add</i> Add note</button>\n```", "```js\n<button title=\"3 note(s) already\">\n```", "```js\n<button v-bind:title=\"notes.length + ' note(s) already'\">\n```", "```js\n<button :title=\"notes.length + ' note(s) already'\">\n```", "```js\ncomputed: {\n  ...\n\n  addButtonTitle () {\n    return notes.length + ' note(s) already'\n  },\n},\n```", "```js\n<button :title=\"addButtonTitle\">\n```", "```js\n      <aside class=\"side-bar\">\n        <div class=\"toolbar\">\n          <button @click=\"addNote\"><i class=\"material-icons\">add</i>        \n          Add note</button>\n        </div>\n        <div class=\"notes\">\n          <!-- Note list here -->\n        </div>\n      </aside>\n```", "```js\n<div v-for=\"item of items\">{{ item.title }}</div>\n```", "```js\n<div v-for=\"item in items\">{{ item.title }}</div>\n```", "```js\ndata () {\n  return {\n    items: [\n      { title: 'Item 1' },\n      { title: 'Item 2' },\n      { title: 'Item 3' },\n    ]\n  }\n}\n```", "```js\n<div>Item 1</div>\n<div>Item 2</div>\n<div>Item 3</div>\n```", "```js\n      <div class=\"notes\">\n        <div class=\"note\" v-for=\"note of notes\">{{note.title}}</div>\n      </div>\n```", "```js\n      data () {\n        return {\n          content: localStorage.getItem('content') || 'You can write in         \n          **markdown**',\n          notes: [],\n          // Id of the selected note\n          selectedId: null,\n        }\n      },\n```", "```js\n      methods: {\n        ...\n\n        selectNote (note) {\n          this.selectedId = note.id\n        },\n      }\n```", "```js\n      <div class=\"notes\">\n        <div class=\"note\" v-for=\"note of notes\"         \n        @click=\"selectNote(note)\">{{note.title}}</div>\n      </div>\n```", "```js\n      computed: {\n        ...\n\n        selectedNote () {\n          // We return the matching note with selectedId\n          return this.notes.find(note => note.id === this.selectedId)\n        },\n      }\n```", "```js\n      <textarea v-model=\"selectedNote.content\"></textarea>\n```", "```js\n      notePreview () {\n        // Markdown rendered to HTML\n        return this.selectedNote ? marked(this.selectedNote.content) :          \n        ''\n      },\n```", "```js\n<div :class=\"['one', 'two', 'three']\">\n```", "```js\n<div class=\"one two three\">\n```", "```js\n<div :class=\"{ one: true, two: false, three: true }\">\n```", "```js\n<div class=\"one three\">\n```", "```js\n<div :class=\"{ selected: note === selectedNote }\">\n```", "```js\n<div class=\"notes\">\n  <div class=\"note\" v-for=\"note of notes\" @click=\"selectNote(note)\"\n  :class=\"{selected: note === selectedNote}\">{{note.title}}</div>\n</div>\n```", "```js\n<div v-if=\"loading\">\n  Loading...\n</div>\n```", "```js\n<div v-if=\"loading\">\n  Loading...\n</div>\n\n<div v-else-if=\"processing\">\n  Processing\n</div>\n\n<div v-else>\n  Content here\n</div>\n```", "```js\n<!-- Main pane -->\n<section class=\"main\" v-if=\"selectedNote\">\n  ...\n</section>\n\n<!-- Preview pane -->\n<aside class=\"preview\" v-if=\"selectedNote\" v-html=\"notePreview\">\n</aside>\n```", "```js\n<template v-if=\"selectedNote\">\n  <!-- Main pane -->\n  <section class=\"main\">\n    ...\n  </section>\n\n  <!-- Preview pane -->\n  <aside class=\"preview\" v-html=\"notePreview\">\n  </aside>\n</template>\n```", "```js\n      methods: {\n        ...\n\n        saveNotes () {\n          // Don't forget to stringify to JSON before storing\n          localStorage.setItem('notes', JSON.stringify(this.notes))\n```", "```js\n          console.log('Notes saved!', new Date())\n        },\n      },\n```", "```js\n      watch: {\n        notes: 'saveNotes',\n      }\n```", "```js\nNotes saved! Mon Apr 42 2042 17:40:23 GMT+0100 (Paris, Madrid)\nNotes saved! Mon Apr 42 2016 17:42:51 GMT+0100 (Paris, Madrid)\n```", "```js\n      data () {\n        return {\n          notes: JSON.parse(localStorage.getItem('notes')) || [],\n          selectedId: null,\n        }\n      },\n```", "```js\n// Assignment\nthis.selectedId = 'abcd'\n\n// Adding or removing an item in an array\nthis.notes.push({...})\nthis.notes.splice(index, 1)\n\n// Sorting an array\nthis.notes.sort(...)\n```", "```js\n// Assignment to an attribute or a nested object\nthis.myObject.someAttribute = 'abcd'\nthis.myObject.nestedObject.otherAttribute = 42\n\n// Changes made to items in an array\nthis.notes[0].content = 'new content'\n```", "```js\nwatch: {\n  notes: {\n    // The method name\n    handler: 'saveNotes',\n    // We need this to watch each note's properties inside the array\n    deep: true,\n  },\n}\n```", "```js\nwatch: {\n  ...\n\n  // Let's save the selection too\n  selectedId (val) {\n    localStorage.setItem('selected-id', val)\n  },\n}\n```", "```js\ndata () {\n  return {\n    notes: JSON.parse(localStorage.getItem('notes')) || [],\n    selectedId: localStorage.getItem('selected-id') || null,\n  }\n},\n```", "```js\n<!-- Main pane -->\n<section class=\"main\">\n  <div class=\"toolbar\">\n    <!-- Our toolbar is here! -->\n  </div>\n  <textarea v-model=\"selectedNote.content\"></textarea>\n</div>\n```", "```js\n<input v-model=\"selectedNote.title\" placeholder=\"Note title\" />\n```", "```js\n      <button @click=\"removeNote\" title=\"Remove note\"><i        \n      class=\"material-icons\">delete</i></button>\n```", "```js\n      removeNote () {\n        if (this.selectedNote && confirm('Delete the note?')) {\n          // Remove the note in the notes array\n          const index = this.notes.indexOf(this.selectedNote)\n          if (index !== -1) {\n            this.notes.splice(index, 1)\n          }\n        }\n      }\n```", "```js\n      <button @click=\"favoriteNote\" title=\"Favorite note\"><i        \n      class=\"material-icons\">{{ selectedNote.favorite ? 'star' :               \n      'star_border' }}</i></button>\n```", "```js\n      favoriteNote () {\n        this.selectedNote.favorite = !this.selectedNote.favorite\n      },\n```", "```js\nfavoriteNote () {\n  this.selectedNote.favorite = this.selectedNote.favorite ^ true\n},\n```", "```js\nfavoriteNote () {\n  this.selectedNote.favorite ^= true\n},\n```", "```js\nsort((a, b) => a.created - b.created)\n```", "```js\nsort((a, b) => (a.favorite === b.favorite)? 0 : a.favorite? -1 : 1)\n```", "```js\n      computed: {\n        ...\n\n        sortedNotes () {\n          return this.notes.slice()\n            .sort((a, b) => a.created - b.created)\n            .sort((a, b) => (a.favorite === b.favorite)? 0\n              : a.favorite? -1    \n              : 1)\n        },\n      }\n```", "```js\n<div v-for=\"note of sortedNotes\">\n```", "```js\n<i class=\"icon material-icons\" v-if=\"note.favorite\">star</i>\n```", "```js\n      <div class=\"notes\">\n        <div class=\"note\" v-for=\"note of sortedNotes\"\n        :class=\"{selected: note === selectedNote}\"\n        @click=\"selectNote(note)\">\n          <i class=\"icon material-icons\" v-if=\"note.favorite\">\n          star</i> \n          {{note.title}}\n        </div>\n      </div>\n```", "```js\n<!-- Main pane -->\n<section class=\"main\">\n  <div class=\"toolbar\">\n    <!-- ... -->\n  </div>\n  <textarea v-model=\"selectedNote.content\"></textarea>\n  <div class=\"toolbar status-bar\">\n    <!-- The new status bar here! -->\n  </div>\n</section>\n```", "```js\n      <span class=\"date\">\n        <span class=\"label\">Created</span>\n        <span class=\"value\">{{ selectedNote.created }}</span>\n      </span>\n```", "```js\n      <script src=\"https://unpkg.com/moment\"></script>\n```", "```js\n      moment(time).format('DD/MM/YY, HH:mm')\n```", "```js\n Vue.filter('date', time => moment(time)\n        .format('DD/MM/YY, HH:mm'))\n```", "```js\n{{ someDate | date }}\n```", "```js\n12/02/17, 12:42\n```", "```js\n      <span class=\"date\">\n        <span class=\"label\">Created</span>\n        <span class=\"value\">{{ selectedNote.created | date }}</span>\n      </span>\n```", "```js\n      computed: {\n        linesCount () {\n          if (this.selectedNote) {\n            // Count the number of new line characters\n            return this.selectedNote.content.split(/\\r\\n|\\r|\\n/).length\n          }\n        },\n\n        wordsCount () {\n          if (this.selectedNote) {\n            var s = this.selectedNote.content\n            // Turn new line cahracters into white-spaces\n            s = s.replace(/\\n/g, ' ')\n            // Exclude start and end white-spaces\n            s = s.replace(/(^\\s*)|(\\s*$)/gi, '')\n            // Turn 2 or more duplicate white-spaces into 1\n            s = s.replace(/\\s\\s+/gi, ' ')\n            // Return the number of spaces\n            return s.split(' ').length\n          }\n        },\n\n        charactersCount () {\n          if (this.selectedNote) {\n            return this.selectedNote.content.split('').length\n          }\n        },\n      }\n```", "```js\n      <span class=\"lines\">\n        <span class=\"label\">Lines</span>\n        <span class=\"value\">{{ linesCount }}</span>\n      </span>\n      <span class=\"words\">\n        <span class=\"label\">Words</span>\n        <span class=\"value\">{{ wordsCount }}</span>\n      </span>\n      <span class=\"characters\">\n        <span class=\"label\">Characters</span>\n        <span class=\"value\">{{ charactersCount }}</span>\n      </span>\n```"]