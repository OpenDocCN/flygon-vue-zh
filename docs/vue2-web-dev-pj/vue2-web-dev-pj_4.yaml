- en: Advanced Project Setup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级项目设置
- en: 'After this chapter, we will begin building more complex applications, and we
    will need some additional tools and libraries. We will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章之后，我们将开始构建更复杂的应用程序，我们将需要一些额外的工具和库。我们将涵盖以下主题：
- en: Setting up our development environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置我们的开发环境
- en: Using vue-cli to scaffold Vue applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用vue-cli搭建Vue应用程序
- en: Writing and using Single-File Components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写和使用单文件组件
- en: Setting up our development environment
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的开发环境
- en: To create more complex Single-Page Applications, it is recommended to use a
    few tools to ease the development. In this section, we will install them to have
    a good development environment ready. You need to have both Node.js and npm installed
    on your computer. Ensure that you have at least Node 8.x, but the latest Node
    version is recommended.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建更复杂的单页应用程序，建议使用一些工具来简化开发。在本节中，我们将安装它们以准备好良好的开发环境。您需要在计算机上安装Node.js和npm。确保您至少拥有Node
    8.x，但建议使用最新的Node版本。
- en: Installing vue-cli, the official command-line tool
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装vue-cli，官方命令行工具
- en: 'The first package we will need is vue-cli, which is a command-line tool that
    will help us create Vue applications:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要的包是vue-cli，这是一个命令行工具，将帮助我们创建Vue应用程序：
- en: 'Enter this command in the terminal, and it will install vue-cli and save it
    as a global package:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入此命令，它将安装vue-cli并将其保存为全局包：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You may need to run this command as an administrator.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要以管理员身份运行此命令。
- en: 'To test whether vue-cli is working, print its version with the following command:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试vue-cli是否正常工作，请使用以下命令打印其版本：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Code editors
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码编辑器
- en: Any text editor will do, but I recommend using Visual Studio Code ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    or Atom ([https://atom.io/](https://atom.io/)). For Visual Studio Code, you need
    the `vetur` extension from octref ([https://github.com/vuejs/vetur](https://github.com/vuejs/vetur))
    and for Atom, the `language-vue` extension from hedefalk ([https://atom.io/packages/language-vue](https://atom.io/packages/language-vue)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 任何文本编辑器都可以，但我建议使用Visual Studio Code（[https://code.visualstudio.com/](https://code.visualstudio.com/)）或Atom（[https://atom.io/](https://atom.io/)）。对于Visual
    Studio Code，您需要来自octref的`vetur`扩展（[https://github.com/vuejs/vetur](https://github.com/vuejs/vetur)），对于Atom，您需要来自hedefalk的`language-vue`扩展（[https://atom.io/packages/language-vue](https://atom.io/packages/language-vue)）。
- en: Recent versions of Jetbrains' WebStorm IDE support Vue out of the box.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最近版本的Jetbrains的WebStorm IDE支持Vue。
- en: You can also install the extensions that add support to the preprocessor languages
    such as Sass, Less, or Stylus.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以安装添加对预处理器语言（如Sass、Less或Stylus）的支持的扩展。
- en: Our first full-blown Vue application
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个完整的Vue应用程序
- en: The previous applications were both made in quite an old-school way, with `script`
    tags and simple JavaScript. In this section, we will discover new ways of creating
    Vue applications with some powerful features and tools. In this part, we will
    create a mini project to demonstrate the new tools we will use as we move on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的应用程序都是以相当老式的方式制作的，使用`script`标签和简单的JavaScript。在本节中，我们将发现使用一些强大功能和工具创建Vue应用程序的新方法。在这部分中，我们将创建一个迷你项目来演示我们将在接下来使用的新工具。
- en: Scaffolding the project
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建项目脚手架
- en: 'The vue-cli tool enables us to create ready-to-use app skeletons to help us
    get started on a new project. It works with a project template system that can
    ask you some questions to customize the skeleton to your needs:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: vue-cli工具使我们能够创建即用型的应用程序框架，以帮助我们开始新项目。它使用一个项目模板系统，可以向您询问一些问题，以自定义框架以满足您的需求：
- en: 'List the official project templates with the following command:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下命令列出官方项目模板：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s the list displayed in the terminal:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是终端中显示的列表：
- en: '![](assets/8caaafd7-e612-44c7-b349-3375f93bc7c3.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8caaafd7-e612-44c7-b349-3375f93bc7c3.png)'
- en: 'There are three main types of official templates:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 官方模板有三种主要类型：
- en: 'simple: Uses no build tools'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: simple：不使用构建工具
- en: 'webpack: Uses the very popular webpack bundler (recommended)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: webpack：使用非常流行的webpack打包工具（推荐）
- en: 'browserify: Uses the browserify build tool'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: browserify：使用browserify构建工具
- en: The recommended official template is the `webpack` template. It features all
    you need to create a full-scale SPA with Vue. For the purpose of this book, we
    will use `webpack-simple` and introduce features progressively.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐的官方模板是`webpack`模板。它包含了创建一个具有Vue的全尺寸SPA所需的一切。为了本书的目的，我们将使用`webpack-simple`并逐步介绍功能。
- en: 'To create a new application project using one of these templates, use the `npm
    init` command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这些模板之一创建一个新的应用程序项目，请使用`npm init`命令：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will use the `webpack-simple` official template in a new `demo` folder:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在一个新的`demo`文件夹中使用`webpack-simple`官方模板：
- en: 'Run the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This project template features a ready-to-use minimal webpack configuration.
    The command will ask a few questions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目模板具有一个准备好使用的最小webpack配置。该命令将会询问一些问题。
- en: 'Answer the questions of vue-cli like this:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像这样回答vue-cli的问题：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Vue-cli should have now created a `demo` folder. It has a `package.json` file
    and other configuration files already filled for us. The `package.json` file is
    very important; it holds the main information about the project; for example,
    it lists all the packages that the project depends on.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Vue-cli现在应该已经创建了一个`demo`文件夹。它有一个`package.json`文件和其他配置文件已经为我们填充。`package.json`文件非常重要；它包含有关项目的主要信息；例如，它列出了项目所依赖的所有软件包。
- en: 'Go to the newly created `demo` folder and install the default dependencies
    already declared in the `package.json` file added by the `webpack-simple` template
    (such as vue and webpack):'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到新创建的`demo`文件夹，并安装`webpack-simple`模板已经在`package.json`文件中声明的默认依赖项（如vue和webpack）：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Our app is now set up!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用现在已经设置好了！
- en: From now on, we will fully use the ECMAScript 2015 syntax and the `import`/`export`
    keywords to use or expose modules (which means files that export JavaScript elements).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们将完全使用ECMAScript 2015语法和`import`/`export`关键字来使用或公开模块（这意味着导出JavaScript元素的文件）。
- en: Creating the app
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: 'Any Vue app need a JavaScript entry file where the code will start:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Vue应用程序都需要一个JavaScript入口文件，代码将从那里开始：
- en: Remove the content of the `src` folder.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`src`文件夹的内容。
- en: 'Create a new JavaScript file called `main.js` with the following content:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.js`的新的JavaScript文件，内容如下：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: First, we import the Vue core library into the file. Then, we create a new root
    Vue instance that will attach to the element of `id` app in the page.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将Vue核心库导入文件中。然后，我们创建一个新的根Vue实例，将其附加到页面中`id`为app的元素上。
- en: A default `index.html` file is provided by vue-cli for the page with an empty
    `<div id="app"></div>` tag. You can edit it to change the page HTML to your liking.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: vue-cli提供了一个默认的`index.html`文件，其中包含一个空的`<div id="app"></div>`标签。您可以编辑它以更改页面HTML以满足您的喜好。
- en: Finally, we display a `div` element containing the `'hello world'` text, thanks
    to the `render` option we will introduce in the "Render functions" section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过`render`选项显示包含`'hello world'`文本的`div`元素，这要归功于我们将在“渲染函数”部分介绍的`render`选项。
- en: Running our application
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行我们的应用程序
- en: 'Run the `dev` npm script generated by vue-cli to start the app in development
    mode:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 运行由vue-cli生成的`dev` npm脚本以在开发模式下启动应用程序：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will launch a web app on a web server port. The terminal should display
    that the compilation was successful and what URL to use to access the app:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在web服务器端口上启动一个web应用程序。终端应该显示编译成功以及访问应用程序的URL：
- en: '![](assets/70045016-b634-4ec2-a1ad-a9262aa61474.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/70045016-b634-4ec2-a1ad-a9262aa61474.png)'
- en: 'Open this URL in your browser to see the result:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开此URL以查看结果：
- en: '![](assets/cddefb10-81c2-4e72-aa4c-3caf893cdc3d.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cddefb10-81c2-4e72-aa4c-3caf893cdc3d.png)'
- en: Render functions
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染函数
- en: Vue uses a virtual DOM implementation that consists of a tree of elements with
    JavaScript objects. It then applies the virtual DOM to the real browser DOM by
    computing the differences between the two. This helps avoid DOM operations as
    much as possible since they are usually the main performance bottleneck.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Vue使用虚拟DOM实现，由JavaScript对象组成的元素树。然后通过计算两者之间的差异，将虚拟DOM应用于真实的浏览器DOM。这有助于尽量避免DOM操作，因为它们通常是主要的性能瓶颈。
- en: Actually, when you use templates, Vue will compile them into render functions.
    If you need the full power and flexibility of JavaScript, you can directly write
    the render functions yourself, or write JSX, which will be discussed later.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，当您使用模板时，Vue会将其编译为渲染函数。如果您需要JavaScript的全部功能和灵活性，可以直接编写渲染函数，或编写稍后将讨论的JSX。
- en: A render function returns a small part of that tree, that is specific to its
    component. It uses the `createElement` method, which is passed as the first argument.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染函数返回树的一小部分，该部分特定于其组件。它使用`createElement`方法作为第一个参数。
- en: By convention, `h` is an alias of `createElement`, which is very common and
    needed to write JSX. It comes from the name of this technique consisting of describing
    HTML with JavaScript--Hyperscript.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，`h`是`createElement`的别名，这是非常常见的，也是编写JSX所需的。它来自于用JavaScript描述HTML的技术名称--Hyperscript。
- en: 'The `createElement` (or `h`) method takes up to three arguments:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`createElement`（或`h`）方法最多接受三个参数：'
- en: The first one is the type of the element. It can be an HTML tag name (such as
    `'div'`), a component name registered in the application, or directly a component
    definition object.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个是元素的类型。它可以是HTML标签名（如`'div'`），在应用程序中注册的组件名称，或直接是组件定义对象。
- en: The second argument is optional. It is the data object that defines attributes,
    props, event listeners, and the like.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个参数是可选的。它是定义属性、props、事件监听器等的数据对象。
- en: The third argument is optional too. It is either a simple plain text, or an
    array of other elements created with `h`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个参数也是可选的。它可以是简单的纯文本，也可以是用`h`创建的其他元素数组。
- en: 'Consider the following `render` function as an example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下`render`函数作为示例：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It will output the following DOM in the browser:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在浏览器中输出以下DOM：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We will cover render functions in further detail in [Chapter 6](93f61b3d-c61f-4b98-9bab-e9906c087530.xhtml),
    *Project 4 - Geolocated Blog*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](93f61b3d-c61f-4b98-9bab-e9906c087530.xhtml)中更详细地介绍渲染函数，*项目4-地理定位博客*。
- en: Configuring babel
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置babel
- en: Babel is a very popular tool that compiles JavaScript code so that we can use
    new features in older and current browsers (such as JSX or arrow functions). It
    is recommended to use babel in any serious JavaScript project.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Babel是一个非常流行的工具，它编译JavaScript代码，以便我们可以在较旧和当前的浏览器中使用新功能（如JSX或箭头函数）。建议在任何严肃的JavaScript项目中使用babel。
- en: By default, the `webpack-simple` template comes with a default babel configuration,
    which uses the `env` babel preset that supports all the stable JavaScript version
    from ES2015\. It also includes another babel preset called `stage-3`, which supports
    the upcoming JavaScript features such as the `async/await` keywords and the object
    spread operator that are commonly used in the Vue community.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`webpack-simple`模板带有默认的babel配置，使用支持ES2015中所有稳定JavaScript版本的`env` babel预设。它还包括另一个名为`stage-3`的babel预设，支持即将到来的JavaScript特性，如`async/await`关键字和Vue社区常用的对象扩展运算符。
- en: We will need to add a third preset specific to Vue, which will add support for
    JSX (we will need it in the 'JSX' section later in the chapter).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加第三个特定于Vue的预设，它将为JSX添加支持（我们将在本章后面的“JSX”部分中需要它）。
- en: We also need to include the polyfills provided by babel so that new features
    such as `Promise` and generators work in the older browsers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要包括babel提供的polyfills，以便在旧的浏览器中使用新功能，比如`Promise`和生成器。
- en: A polyfill is code that checks whether a feature is available in the browser,
    and if not, it implements this feature so that it works like it is native.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Polyfill是一种代码，用于检查浏览器中是否有某个功能，如果没有，则实现此功能，使其像本地功能一样工作。
- en: Babel Vue preset
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Babel Vue预设
- en: We will now install and use the `babel-preset-vue` in the Babel configuration
    of our app.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在应用程序的Babel配置中安装和使用`babel-preset-vue`。
- en: 'So first, we need to install this new preset in the dev dependencies:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在开发依赖项中安装这个新的预设：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The main babel configuration is done in the `.babelrc` JSON file already present
    in the project root.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的babel配置已经在项目根目录中的`.babelrc` JSON文件中完成。
- en: This file may be hidden in your file explorer, depending on the system (its
    name starts with a dot). However, it should be visible in your code editor if
    it has a file tree view.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件可能在您的文件资源管理器中被隐藏，这取决于系统（它的名称以点开头）。但是，如果它有文件树视图，它应该在您的代码编辑器中可见。
- en: 'Open this `.babelrc` file and add the `vue` preset to the corresponding list:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开这个`.babelrc`文件，并将`vue`预设添加到相应的列表中：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Polyfills
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Polyfills
- en: Let's also add the Babel polyfills to use new JavaScript features in older browsers.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还添加Babel polyfills，以在旧的浏览器中使用新的JavaScript功能。
- en: 'Install the `babel-polyfill` package in your dev dependencies:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开发依赖项中安装`babel-polyfill`软件包：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Import it at the beginning of the `src/main.js` file:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/main.js`文件的开头导入它：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will enable all the necessary polyfills for the browser.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为浏览器启用所有必要的polyfills。
- en: Updating the dependencies
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新依赖项
- en: After the project has been scaffolded, you may need to update the packages that
    it uses.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 项目脚手架完成后，您可能需要更新它使用的软件包。
- en: Updating manually
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动更新
- en: 'To check whether there are new versions available of the packages used in the
    project, run this command in the root folder:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查项目中使用的软件包是否有新版本可用，请在根文件夹中运行此命令：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If new versions are detected, a table is displayed:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检测到新版本，将显示一个表格：
- en: '![](assets/b35444cf-12e8-4295-abf4-2c45b60a5fd5.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b35444cf-12e8-4295-abf4-2c45b60a5fd5.png)'
- en: The `Wanted` column is the version number compatible with the version range
    specified in the `package.json` file. To learn more about this, visit the npm
    documentation at [http s://docs.npmjs.com/getting-started/semantic-versioning](https://docs.npmjs.com/getting-started/semantic-versioning).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: “Wanted”列是与`package.json`文件中指定的版本范围兼容的版本号。要了解更多信息，请访问npm文档[http s://docs.npmjs.com/getting-started/semantic-versioning](https://docs.npmjs.com/getting-started/semantic-versioning)。
- en: 'To update a package manually, open the `package.json` file and locate the corresponding
    line. Change the version range and save the file. Then, run this command to apply
    the changes:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要手动更新软件包，请打开`package.json`文件并找到相应的行。更改版本范围并保存文件。然后，运行此命令以应用更改：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Don't forget to read the change logs of the packages you update! There might
    be breaking changes or improvement you will be happy to know about.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记阅读您更新的软件包的更改日志！可能会有重大变化或改进，您会很乐意了解。
- en: Updating automatically
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动更新
- en: 'To update the packages automatically, use this command in the root folder of
    the project:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要自动更新软件包，请在项目的根文件夹中使用此命令：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This command will only update the versions compatible with those specified in
    the `package.json` file. If you want to update packages to other versions, you
    need to do it manually.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令只会更新与`package.json`文件中指定版本兼容的版本。如果您想要更新包到其他版本，您需要手动进行。
- en: Updating Vue
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Vue
- en: When you update the `vue` package containing the core library, you should also
    update the `vue-template-compiler` package. It is the package that compiles all
    your component templates when using webpack (or another build tool).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当您更新包含核心库的`vue`包时，您也应该更新`vue-template-compiler`包。这是一个在使用webpack（或其他构建工具）时编译所有组件模板的包。
- en: Both of these packages must always be at the same version. For example, if you
    use `vue 2.5.3`, then `vue-template-compiler` should also be at version `2.5.3`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个包必须始终处于相同的版本。例如，如果您使用`vue 2.5.3`，那么`vue-template-compiler`也应该是版本`2.5.3`。
- en: Building for production
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生产构建
- en: 'When it will be time to put your app into production on a real server, you
    will need to run this command to compile your project:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要将您的应用程序部署到真实服务器上时，您需要运行这个命令来编译您的项目：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'By default, when using the `webpack-simple` template, it will output the JavaScript
    files into a `/dist` folder in the project. You will only need to upload this
    folder and the `index.html` file that is present in the root folder. You should
    have the following file tree on your server:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，使用`webpack-simple`模板时，它会将JavaScript文件输出到项目的`/dist`文件夹中。您只需要上传这个文件夹和根文件夹中存在的`index.html`文件。您的服务器上应该有以下文件树：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Single-File Components
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单文件组件
- en: In this section, we will introduce an important format widely used in the creation
    of real production Vue apps.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将介绍一个在创建真实生产Vue应用程序中广泛使用的重要格式。
- en: Vue has its own format call **Single-File Component** (**SFC**). This format
    was created by the Vue team, and the file extension is `.vue`. It allows you to
    write one component per file, with both the template, and the logic and styling
    of this component in one place. The main advantage here is that each component
    is clearly self-contained, more maintainable, and easily shared.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Vue有自己的格式称为**单文件组件**（**SFC**）。这个格式是由Vue团队创建的，文件扩展名是`.vue`。它允许您在一个地方编写一个文件的模板、逻辑和样式。这个地方的主要优势是每个组件都是清晰自包含的，更易维护和共享。
- en: 'An SFC describes a Vue component with an HTML-like syntax. It can contain three
    types of root blocks:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: SFC使用类似HTML的语法描述了一个Vue组件。它可以包含三种类型的根块：
- en: '`<template>`, which describes the template of the component with the template
    syntax we already used'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<template>`，描述了组件的模板，使用了我们已经使用过的模板语法'
- en: '`<script>`, which contains the JavaScript code of the component'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<script>`，其中包含组件的JavaScript代码'
- en: '`<style>`, which contains the style used by the component'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<style>`，其中包含组件使用的样式'
- en: 'Here''s an example of an SFC:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个SFC的示例：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Let's try this component now!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试这个组件！
- en: Put the above component source in a new `Test.vue` file in the `src` folder.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将上述组件源代码放入`src`文件夹中的新`Test.vue`文件中。
- en: 'Edit the `main.js` file and import the SFC using the `import` keyword:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`main.js`文件，并使用`import`关键字导入SFC：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Remove the `render` option and instead, copy the definition of the `Test` component
    with the object spread operator:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`render`选项，而是使用对象扩展运算符复制`Test`组件的定义：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding snippet, I demonstrated another way to add the root component
    to the app--using the JavaScript Spread operator--so the `...App` expression will
    copy the properties to the app definition object. The main advantage is that we
    won't have a useless top component in the dev tools anymore; it will be our direct
    root component now.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的片段中，我演示了将根组件添加到应用程序的另一种方法--使用JavaScript Spread运算符--因此`...App`表达式将将属性复制到应用程序定义对象。主要优点是我们将不再在开发工具中有一个无用的顶级组件；它现在将是我们的直接根组件。
- en: 'Go ahead and open the URL displayed in the terminal to see the result:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续打开终端中显示的URL以查看结果：
- en: '![](assets/bcd377ab-9146-4ad7-8711-97d392d83d4d.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bcd377ab-9146-4ad7-8711-97d392d83d4d.png)'
- en: Template
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Template
- en: The `<template>` tag contains the template of the component. Like earlier, it
    is HTML with the Vue special syntax (directives, text interpolation, shorthands,
    and so on).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`<template>`标签包含组件的模板。与之前一样，它是HTML，具有Vue特殊语法（指令，文本插值，快捷方式等）。'
- en: 'Here''s an example of a `<template>` tag in an SFC:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是SFC中`<template>`标签的示例：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this example, the template of our component will consist of a `ul` element
    containing a list of `li` elements displaying the titles of the movies.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们组件的模板将包含一个包含显示电影标题的`li`元素列表的`ul`元素。
- en: If you don't put a `<template>` tag in your SFC, you will need to write a render
    function or your component won't be valid.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在SFC中不放置`<template>`标签，您将需要编写一个渲染函数，否则您的组件将无效。
- en: Using Pug
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Pug
- en: 'Pug (formerly Jade) is a language that compiles to HTML. We can use it inside
    our `<template>` tag with the `lang` attribute set to "pug":'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Pug（以前叫Jade）是一种编译成HTML的语言。我们可以在`<template>`标签中使用它，`lang`属性设置为“pug”：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To compile the Pug code in our SFC, we need to install these packages:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译SFC中的Pug代码，我们需要安装这些包：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Packages that are needed for the development are called development dependencies
    and should be installed with the `--save-dev` flag. The direct dependencies that
    the app requires to run (for example, a package to compile markdown to HTML) should
    be installed with the `--save` flag.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 开发所需的包称为开发依赖项，并应使用`--save-dev`标志安装。应使用`--save`标志安装应用程序运行所需的直接依赖项（例如，将markdown编译为HTML的包）。
- en: Script
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Script
- en: The `<script>` tag contains the JavaScript code associated with the component.
    It should export the component definition object.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`<script>`标签包含与组件关联的JavaScript代码。它应该导出组件定义对象。'
- en: 'Here''s an example of a `<script>` tag:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`<script>`标签的示例：
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this example, the component will have a `data` hook returning an initial
    state with a `movies` array.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，组件将具有返回具有`movies`数组的初始状态的`data`钩子。
- en: The `<script>` tag is optional if you don't need any options in the component
    options, which defaults to an empty object.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不需要组件选项中的任何选项，默认为空对象，则`<script>`标签是可选的。
- en: JSX
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX
- en: JSX is a special notation used inside the JavaScript code to express HTML markup.
    It makes the code responsible for describing the view closer to the pure HTML
    syntax, while still having the full power of JavaScript available.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: JSX是在JavaScript代码中使用的一种特殊表示法，用于表示HTML标记。它使代码负责描述视图的方式更接近纯HTML语法，同时仍然具有JavaScript的全部功能。
- en: 'Here''s an example of a render function written with JSX:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用JSX编写的渲染函数示例：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You can use any JavaScript expression inside single brackets.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在单括号内使用任何JavaScript表达式。
- en: As you can see in this example, we can use any JavaScript code to compose our
    view. We can even use the `map` method of the `movies` array to return some JSX
    for each item. We also used a variable to dynamically set the CSS class of the
    movie elements.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在此示例中所看到的，我们可以使用任何JavaScript代码来组成我们的视图。我们甚至可以使用`movies`数组的`map`方法为每个项目返回一些JSX。我们还使用了一个变量来动态设置电影元素的CSS类。
- en: 'During the compilation, what really happened is that a special module called
    `babel-plugin-transform-vue-jsx` included in `babel-preset-vue` transformed the
    JSX code into pure JavaScript code. After compilation, the preceding render function
    will look like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译过程中，真正发生的是一个名为`babel-plugin-transform-vue-jsx`的特殊模块包含在`babel-preset-vue`中，将JSX代码转换为纯JavaScript代码。编译后，前面的渲染函数将如下所示：
- en: '[PRE28]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see, JSX is a syntax that helps write render functions. The final
    JavaScript code will be quite close to what we could have written using `h` (or
    `createElement`) manually.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，JSX是一种帮助编写渲染函数的语法。最终的JavaScript代码将与我们手动使用`h`（或`createElement`）编写的代码非常接近。
- en: We will cover render functions in more detail in [Chapter 6](93f61b3d-c61f-4b98-9bab-e9906c087530.xhtml),
    *Project 4 - Geolocated Blog*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](93f61b3d-c61f-4b98-9bab-e9906c087530.xhtml)中更详细地介绍渲染函数，*项目4 - 地理定位博客*。
- en: Style
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式
- en: The Single-File Component can include multiple `<style>` tags to add CSS to
    the app that is related to this component.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 单文件组件可以包含多个`<style>`标签，以向应用程序添加与此组件相关的CSS。
- en: 'Here''s a very simple example of component style applying some CSS rules to
    the `.movies` class:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个非常简单的组件样式应用一些CSS规则到`.movies`类：
- en: '[PRE29]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Scoped styles
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作用域样式
- en: We can scope the CSS contained inside a `<style>` tag to the current component
    with the scoped attribute. It means that this CSS will only be applied to the
    elements of this component's template.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用作用域属性将包含在`<style>`标签中的CSS限定为当前组件。这意味着此CSS仅应用于此组件模板的元素。
- en: 'For example, we can use generic class names such as movie and ensure that it
    won''t conflict with the rest of the app:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用通用的类名，如movie，并确保它不会与应用程序的其余部分发生冲突：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The result will look like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下所示：
- en: '![](assets/c0c86f93-a28f-4002-8141-78469f0d8495.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c0c86f93-a28f-4002-8141-78469f0d8495.png)'
- en: 'This works, thanks to a special attribute applied to both the template and
    the CSS with PostCSS (a processing tool). For example, consider the following
    scoped styled component:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有效的，多亏了应用于模板和CSS的特殊属性，使用PostCSS（一种处理工具）。例如，考虑以下作用域样式组件：
- en: '[PRE31]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It is equivalent to the following:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 它相当于以下内容：
- en: '[PRE32]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see, a unique attribute was added to all the template elements and
    to all the CSS selectors so that it will only match this component's template
    and will not conflict with other components.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，为所有模板元素和所有CSS选择器添加了一个唯一的属性，以便它只匹配此组件的模板，不会与其他组件冲突。
- en: 'Scoped styles don''t eliminate the need for classes; due to the way browsers
    render CSS, there might be performance loss when selecting a plain element with
    an attribute. For example, `li { color: blue; }` will be many times slower than
    `.movie { color: blue; }` when scoped to the component.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '作用域样式并不能消除对类的需求；由于浏览器呈现CSS的方式，当选择一个带有属性的普通元素时，可能会出现性能损失。例如，`li { color: blue;
    }`在组件范围内将比`.movie { color: blue; }`慢得多。'
- en: Adding preprocessors
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加预处理器
- en: Nowadays, CSS is rarely used as is. It is common to write styles with a more
    powerful and feature-rich preprocessor language.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，CSS很少被直接使用。通常会使用功能更强大、功能更丰富的预处理器语言来编写样式。
- en: On the `<style>` tags, we can specify one of these languages to use with the
    `lang` attribute.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<style>`标签上，我们可以使用`lang`属性指定其中一种语言。
- en: 'We will take this template as the base for our component:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以此模板作为我们组件的基础：
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Sass
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sass
- en: 'Sass is a well-known CSS preprocessor used by a lot of tech companies:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Sass是许多技术公司使用的知名CSS预处理器：
- en: 'To enable Sass in your component, install the following packages:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在组件中启用Sass，请安装以下软件包：
- en: '[PRE34]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, in your component, add a `<style>` tag with the `lang` attribute set
    to `"sass"`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的组件中，添加一个`<style>`标签，其中`lang`属性设置为`"sass"`：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, test your component with the `vue build` command. You should have a result
    similar to this one:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`vue build`命令测试您的组件。您应该有一个类似于这样的结果：
- en: '![](assets/a154cb93-95aa-4ac3-8734-6c1c337db551.png)If you want to use the
    SCSS syntax variant of Sass, you need to use `lang="scss"`.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a154cb93-95aa-4ac3-8734-6c1c337db551.png)如果您想使用Sass的SCSS语法变体，您需要使用`lang="scss"`。'
- en: Less
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Less
- en: 'Less has a simpler syntax than other CSS preprocessing languages:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Less的语法比其他CSS预处理语言更简单：
- en: 'To use Less, you need to install the following packages:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用Less，您需要安装以下包：
- en: '[PRE36]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, in your component, set the `lang` attribute to `"less"`:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的组件中，将`lang`属性设置为`"less"`：
- en: '[PRE37]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Stylus
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stylus
- en: 'Stylus is more recent that Less and Sass, and is also quite popular:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Stylus比Less和Sass更新，也非常受欢迎：
- en: 'Finally, for Stylus, you need these packages:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于Stylus，您需要这些包：
- en: '[PRE38]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'On the `<style>` tag, set the `lang` attribute to `"stylus"`:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<style>`标签上，将`lang`属性设置为`"stylus"`：
- en: '[PRE39]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Components inside components
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件内部的组件
- en: Now that we know how to write Single-File Components, we want to use them inside
    other components to compose the interface of the app.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何编写单文件组件，我们希望在其他组件中使用它们来组成应用程序的界面。
- en: 'To use a component inside another component, we need to import it and expose
    it to the template:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要在另一个组件中使用组件，我们需要导入它并将其公开给模板：
- en: 'First, create a new component. For example, here''s a `Movie.vue` component:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新的组件。例如，这是一个`Movie.vue`组件：
- en: '[PRE40]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We will also need a `Movies.vue` component if you haven''t created it already.
    It should look like this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有创建`Movies.vue`组件，我们还需要一个。它应该是这样的：
- en: '[PRE41]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then, import the `Movie` SFC in the script of the `Movies` component:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`Movies`组件的脚本中导入`Movie` SFC：
- en: '[PRE42]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Set the `components` option to expose some components to the template, with
    an object (the key is the name that we will use in the template, and the value
    is the component definition):'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`components`选项设置为向模板公开一些组件，使用一个对象（键是我们将在模板中使用的名称，值是组件定义）：
- en: '[PRE43]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We can now use the component with the `Movie` tag in the template:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以在模板中使用`Movie`标签使用组件：
- en: '[PRE44]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'If you are using JSX, you don''t need the `components` option, as you can use
    a component definition directly if it starts with a capital letter:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用JSX，则不需要`components`选项，因为如果以大写字母开头，可以直接使用组件定义：
- en: '[PRE45]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we installed several tools that will allow us to write a real
    production-ready application using the recommended methods. Now, we can scaffold
    an entire project skeleton to start building great new apps. We can write components
    in various ways, but we can do so in a coherent and maintainable manner with the
    Single-File Components. We can use these components inside our application or
    inside other components to compose our user interface with multiple reusable components.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们安装了几个工具，这些工具将允许我们使用推荐的方法编写真正的生产就绪应用程序。现在，我们可以搭建整个项目骨架来开始构建出色的新应用程序。我们可以以各种方式编写组件，但是我们可以使用单文件组件以一致和可维护的方式进行编写。我们可以在我们的应用程序内部或在其他组件内部使用这些组件来组成我们的用户界面，其中包含多个可重用组件。
- en: In the next chapter, we will create our third application with all we learned
    to this point, plus some new topics, such as routing!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用我们到目前为止学到的所有知识创建我们的第三个应用程序，还有一些新的主题，比如路由！
