["```js\n vue init webpack-simple geoblog</strong>\n **cd geoblog**\n **npm install**\n **npm install --save vue-router babel-polyfill**\n **npm install --save-dev stylus stylus-loader babel-preset-vue**\n```", "```js\n      import 'babel-polyfill'\n      import Vue from 'vue'\n      import VueFetch, { $fetch } from './plugins/fetch'\n      import App from './components/App.vue'\n      import router from './router'\n      import * as filters from './filters'\n\n      // Filters\n      for (const key in filters) {\n        Vue.filter(key, filters[key])\n      }\n\n      Vue.use(VueFetch, {\n        baseUrl: 'http://localhost:3000/',\n      })\n\n      function main () {\n        new Vue({\n          ...App,\n          el: '#app',\n```", "```js\n          router,\n        })\n      }\n\n      main()\n```", "```js\n npm i -S moment\n```", "```js\n      import moment from 'moment'\n\n      export function date (value) {\n        return moment(value).format('L')\n      }\n```", "```js\n      // Remove this line\n      import state from '../state'\n```", "```js\n      } else if (response.status === 403) {\n        // If the session is no longer valid\n        // We logout\n        // TODO\n      } else {\n```", "```js\n      <template>\n        <div class=\"app\">\n          <router-view />\n        </div>\n      </template>\n\n      <style lang=\"stylus\">\n      @import '../styles/main';\n      </style>\n```", "```js\n      <template>\n        <div class=\"geo-blog\">\n          <!-- More to come -->\n        </div>\n      </template>\n```", "```js\n      <template>\n        <div class=\"welcome\">\n          <h1>Welcome</h1>\n\n          <div class=\"actions\">\n            <button @click=\"openGoogleSignin\">\n              Sign in with Google\n            </button>\n          </div>\n        </div>\n      </template>\n\n      <script>\n      export default {\n        methods: {\n          openGoogleSignin () {\n            // TODO\n          },\n        },\n      }\n      </script>\n```", "```js\n      import Vue from 'vue'\n      import VueRouter from 'vue-router'\n\n      import Login from './components/Login.vue'\n      import GeoBlog from './components/GeoBlog.vue'\n      import NotFound from './components/NotFound.vue'\n\n      Vue.use(VueRouter)\n\n      const routes = [\n        { path: '/', name: 'home', component: GeoBlog,\n          meta: { private: true } },\n        { path: '/login', name: 'login', component: Login },\n        { path: '*', component: NotFound },\n      ]\n\n      const router = new VueRouter({\n        routes,\n        mode: 'history',\n        scrollBehavior (to, from, savedPosition) {\n          if (savedPosition) {\n            return savedPosition\n          }\n          if (to.hash) {\n            return { selector: to.hash }\n          }\n          return { x: 0, y: 0 }\n        },\n      })\n\n      // TODO Navigation guards\n```", "```js\n      // We will get to that soon\n\n      export default router\n```", "```js\n      import Vue from 'vue'\n      import Vuex from 'vuex'\n\n      Vue.use(Vuex)\n```", "```js\n      const store = new Vuex.Store({\n        // TODO Options\n      })\n```", "```js\n      export default store\n```", "```js\n      import store from './store'\n```", "```js\n      new Vue({\n        ...App,\n        el: '#app',\n        router,\n        // Injected store\n        store,\n      })\n```", "```js\n    this.$store\n```", "```js\n      const store = new Vuex.Store({\n        state () {\n          return {\n            user: null,\n          }\n        },\n      })\n```", "```js\n      <template>\n        <div class=\"app-menu\">\n          <div class=\"header\">\n            <i class=\"material-icons\">place</i>\n            GeoBlog\n          </div>\n\n          <div class=\"user\">\n            <div class=\"info\" v-if=\"user\">\n              <span class=\"picture\" v-if=\"userPicture\">\n                <img :src=\"userPicture\" />\n              </span>\n              <span class=\"username\">{{ user.profile.displayName }}\n              </span>\n            </div>\n            <a @click=\"centerOnUser\"><i class=\"material-\n            icons\">my_location</i>                  \n            </a>\n            <a @click=\"logout\"><i class=\"material-\n            icons\">power_settings_new</i>              \n            </a>\n          </div>\n        </div>\n      </template>\n\n      <script>\n      export default {\n        computed: {\n          user () {\n            return this.$store.state.user\n          },\n          userPicture () {\n            return null // TODO\n          },\n        },\n        methods: {\n          centerOnUser () {\n            // TODO\n          },\n          logout () {\n            // TODO\n          },\n        },\n      }\n      </script>\n```", "```js\n      <template>\n        <div class=\"geo-blog\">\n          <AppMenu />\n          <!-- Map & content here -->\n        </div>\n      </template>\n\n      <script>\n      import AppMenu from './AppMenu.vue'\n\n      export default {\n        components: {\n          AppMenu,\n        },\n      }\n      </script>\n```", "```js\n      const store = new Vuex.Store({\n        state () { /* ... */ },\n\n        mutations: {\n          user: (state, user) => {\n            state.user = user\n          },\n        },\n      })\n```", "```js\nstore.commit('user', userData)\n```", "```js\n      logout () {\n        // TODO\n        if (!this.user) {\n          const userData = {\n            profile: {\n              displayName: 'Mr Cat',\n            },\n          }\n          this.$store.commit('user', userData)\n        } else {\n          this.$store.commit('user', null)\n        }\n      },\n```", "```js\n      const store = new Vuex.Store({\n        strict: true,\n        // ...\n      })\n```", "```js\n      logout () {\n        if (!this.user) {\n          // ...\n          this.$store.state.user = userData\n        } else {\n          this.$store.state.user = null\n        }\n      },\n```", "```js\n      const store = new Vuex.Store({\n        // ...\n        getters: {\n          user: state => state.user,\n        },\n      })\n```", "```js\n      user () {\n        return this.$store.getters.user\n      },\n```", "```js\n      userPicture: () => null,\n```", "```js\n      userPicture () {\n        return this.$store.getters.userPicture\n      },\n```", "```js\nstore.dispatch('action-type', payloadObject)\n```", "```js\n      const store = new Vuex.Store({\n        // ...\n        actions: {\n          login ({ commit }) {\n            const userData = {\n             profile: {\n                displayName: 'Mr Cat',\n              },\n            }\n            commit('user', userData)\n          },\n\n          logout ({ commit }) {\n            commit('user', null)\n          },\n        }\n      })\n```", "```js\n      methods: {\n        centerOnUser () {\n          // TODO\n          // Testing login action\n          this.$store.dispatch('login')\n        },\n        logout () {\n          this.$store.dispatch('logout')\n        },\n      },\n```", "```js\nmapGetters(['a', 'b'])\n```", "```js\n{\n  a () { return this.$store.getters.a },\n  b () { return this.$store.getters.b },\n}\n```", "```js\nmapGetters({ x: 'a', y: 'b' })\n```", "```js\n{\n  x () { return this.$store.getters.a },\n  y () { return this.$store.getters.b },\n}\n```", "```js\n      import { mapGetters, mapActions } from 'vuex'\n```", "```js\n      export default {\n        computed: mapGetters([\n          'user',\n          'userPicture',\n        ]),\n        methods: mapActions({\n          centerOnUser: 'login',\n          logout: 'logout',\n        }),\n      }\n```", "```js\n npm install\n```", "```js\n      export GOOGLE_CLIENT_ID=xxx\n      export GOOGLE_CLIENT_SECRET=xxx\n```", "```js\n      set GOOGLE_CLIENT_ID=xxx\n      set GOOGLE_CLIENT_SECRET=xxx\n```", "```js\n npm run start\n```", "```js\n openGoogleSignin () {\n        const url = 'http://localhost:3000/auth/google'\n        const name = 'google_login'\n        const specs = 'width=500,height=500'\n        window.open(url, name, specs)\n      },\n```", "```js\n handleMessage ({data, origin}) {\n        if (origin !== 'http://localhost:3000') {\n          return\n        }\n\n        if (data === 'success') {\n          this.login()\n        }\n      },\n```", "```js\n      import { mapActions } from 'vuex'\n\n      export default {\n        methods: {\n          ...mapActions([\n            'login',\n          ]),\n\n          // ...\n        },\n      }\n```", "```js\n mounted () {\n        window.addEventListener('message', this.handleMessage)\n      },\n```", "```js\n beforeDestroy () {\n        window.removeEventListener('message', this.handleMessage)\n      },\n```", "```js\n      async login ({ commit }) {\n        try {\n          const user = await $fetch('user')\n          commit('user', user)\n\n          if (user) {\n            // Redirect to the wanted route if any or else to home\n            router.replace(router.currentRoute.params.wantedRoute ||\n              { name: 'home' })\n          }\n        } catch (e) {\n          console.warn(e)\n        }\n      },\n```", "```js\n      logout ({ commit }) {\n        commit('user', null)\n\n        $fetch('logout')\n\n        // If the route is private\n        // We go to the login screen\n        if (router.currentRoute.matched.some(r => r.meta.private)) {\n          router.replace({ name: 'login', params: {\n            wantedRoute: router.currentRoute.fullPath,\n          }})\n        }\n      },\n```", "```js\n      import store from './store'\n\n      router.beforeEach((to, from, next) => {\n        console.log('to', to.name)\n        const user = store.getters.user\n        if (to.matched.some(r => r.meta.private) && !user) {\n          next({\n            name: 'login',\n            params: {\n              wantedRoute: to.fullPath,\n            },\n          })\n          return\n        }\n        if (to.matched.some(r => r.meta.guest) && user) {\n          next({ name: 'home' })\n          return\n        }\n        next()\n      })\n```", "```js\n      } else if (response.status === 403) {\n        // If the session is no longer valid\n        // We logout\n        store.dispatch('logout')\n      } else {\n```", "```js\n      import store from '../store'\n```", "```js\n      actions: {\n        async init ({ dispatch }) {\n          await dispatch('login')\n        },\n\n        // ...\n      },\n```", "```js\n      async function main () {\n        await store.dispatch('init')\n\n        new Vue({\n          ...App,\n          el: '#app',\n          router,\n          store,\n        })\n      }\n\n      main()\n```", "```js\nuserPicture: (state, getters) => {\n  const user = getters.user\n  if (user) {\n    const photos = user.profile.photos\n    if (photos.length !== 0) {\n      return photos[0].value\n    }\n  }\n},\n```", "```js\n npm i -S vuex-router-sync\n```", "```js\n      import { sync } from 'vuex-router-sync'\n\n      sync(store, router)\n```", "```js\n npm i -S vue-googlemaps\n```", "```js\n      import VueGoogleMaps from 'vue-googlemaps'\n\n      Vue.use(VueGoogleMaps, {\n        load: {\n          apiKey: '*your_api_key_here*',\n          libraries: ['places'],\n        },\n      })\n```", "```js\n      <style lang=\"stylus\">\n      @import '~vue-googlemaps/dist/vue-googlemaps.css'\n      @import '../styles/main'\n      </style>\n```", "```js\n      <template>\n        <div class=\"blog-map\">\n          <googlemaps-map\n            :center=\"center\"\n            :zoom=\"zoom\"\n            :options=\"mapOptions\"\n            @update:center=\"setCenter\"\n            @update:zoom=\"setZoom\"\n          />\n        </div>\n      </template>\n\n      <script>\n      export default {\n        data () {\n          return {\n            center: {\n              lat: 48.8538302,\n              lng: 2.2982161,\n            },\n            zoom: 15,\n          }\n        },\n\n        computed: {\n          mapOptions () {\n            return {\n              fullscreenControl: false,\n            }\n          },\n        },\n\n        methods: {\n         setCenter (value) {\n            this.center = value\n          },\n          setZoom (value) {\n            this.zoom = value\n          },\n        },\n      }\n      </script>\n```", "```js\n      <template>\n        <div class=\"geo-blog\">\n          <AppMenu />\n          <div class=\"panes\">\n            <BlogMap />\n            <!-- Content here -->\n          </div>\n        </div>\n      </template>\n```", "```js\n      export default {\n        namespaced: true,\n\n        state () {\n          return {\n            center: {\n              lat: 48.8538302,\n              lng: 2.2982161,\n            },\n            zoom: 15,\n          }\n        },\n      }\n```", "```js\n      import maps from './maps'\n\n      const store = new Vuex.Store({\n        // ...\n        modules: {\n          maps,\n        },\n      })\n```", "```js\ngetters: {\n  center: state => state.center,\n  zoom: state => state.zoom,\n},\n```", "```js\nthis.$store.getters['maps/center']\n```", "```js\nmapGetters({\n  center: 'maps/center',\n  zoom: 'maps/zoom',\n})\n```", "```js\n...mapGetters('maps', [\n  'center',\n  'zoom',\n]),\n...mapGetters('some/nested/module', [\n  // ...\n]),\n```", "```js\nimport { createNamespacedHelpers } from vuex\nconst { mapGetters } = createNamespacedHelpers('maps')\n\nexport default {\n  computed: mapGetters([\n    'center',\n    'zoom',\n  ]),\n}\n```", "```js\nsomeGetter: (state, getters, rootState, rootGetters) => { /* ... */ }\n```", "```js\nmyAction ({ dispatch, commit, getters, rootGetters }) {\n  getters.a // store.getters['maps/a']\n  rootGetters.a // store.getters['a']\n  commit('someMutation') // 'maps/someMutation'\n  commit('someMutation', null, { root: true }) // 'someMutation'\n  dispatch('someAction') // 'maps/someAction'\n  dispatch('someAction', null, { root: true }) // 'someAction'\n}\n```", "```js\nmutations: {\n  center (state, value) {\n    state.center = value\n  },\n  zoom (state, value) {\n    state.zoom = value\n  },\n},\n```", "```js\nactions: {\n  setCenter ({ commit }, value) {\n    commit('center', value)\n  },\n\n  setZoom ({ commit }, value) {\n    commit('zoom', value)\n  },\n},\n```", "```js\nimport { createNamespacedHelpers } from 'vuex'\n\nconst {\n  mapGetters,\n  mapActions,\n} = createNamespacedHelpers('maps')\n\nexport default {\n  computed: {\n    ...mapGetters([\n      'center',\n      'zoom',\n    ]),\n\n    mapOptions () {\n      // ...\n    },\n  },\n\n  methods: mapActions([\n    'setCenter',\n    'setZoom',\n  ]),\n}\n```", "```js\n      <googlemaps-map\n        ...\n      >\n        <!-- User Position -->\n        <googlemaps-user-position\n          @update:position=\"setUserPosition\"\n        />\n      </googlemaps-map>\n```", "```js\n      state () {\n        return {\n          // ...\n          userPosition: null,\n        }\n      },\n      getters: {\n        // ...\n        userPosition: state => state.userPosition,\n      },\n      mutations: {\n        // ...\n        userPosition (state, value) {\n          state.userPosition = value\n        },\n      },\n      actions: {\n        // ...\n        setUserPosition ({ commit }, value) {\n          commit('userPosition', value)\n        },\n      }\n```", "```js\n      async centerOnUser ({ dispatch, getters }) {\n        const position = getters.userPosition\n        if (position) {\n          dispatch('setCenter', position)\n        }\n      },\n```", "```js\n      setUserPosition ({ dispatch, commit, getters }, value) {\n        const position = getters.userPosition\n        commit('userPosition', value)\n        // Initial center on user position\n        if (!position) {\n          dispatch('centerOnUser')\n        }\n      },\n```", "```js\n      methods: mapActions({\n        logout: 'logout',\n        centerOnUser: 'maps/centerOnUser',\n      }),\n```", "```js\n      export default {\n        namespaced: true,\n\n        state () {\n          return {\n            // New post being created\n            draft: null,\n            // Bounds of the last fetching\n            // To prevent refetching\n            mapBounds: null,\n            // Posts fetched in those map bounds\n            posts: [],\n            // ID of the selected post\n            selectedPostId: null,\n          }\n        },\n      }\n```", "```js\n getters: {\n        draft: state => state.draft,\n        posts: state => state.posts,\n        // The id field on posts is '_id' (MongoDB style)\n        selectedPost: state => state.posts.find(p => p._id ===                  \n        state.selectedPostId),\n        // The draft has more priority than the selected post\n        currentPost: (state, getters) => state.draft || \n        getters.selectedPost,\n      },\n```", "```js\n mutations: {\n        addPost (state, value) {\n          state.posts.push(value)\n        },\n\n        draft (state, value) {\n          state.draft = value\n        },\n\n        posts (state, { posts, mapBounds }) {\n          state.posts = posts\n          state.mapBounds = mapBounds\n        },\n\n        selectedPostId (state, value) {\n          state.selectedPostId = value\n        },\n\n        updateDraft (state, value) {\n          Object.assign(state.draft, value)\n        },\n      },\n```", "```js\n      import posts from './posts'\n\n      const store = new Vuex.Store({\n        // ...\n        modules: {\n          maps,\n          posts,\n        },\n      })\n```", "```js\nexport default {\n  props: ['message'],\n  render (createElement) {\n    return createElement(\n      // Element or Component\n      'p',\n      // Data Object\n      { class: 'content' },\n      // Children or Text content\n      this.message\n    )\n  },\n}\n```", "```js\n<template>\n  <p class=\"content\">{{ message }}</p>\n</template>\n```", "```js\nVue.component('my-title', {\n  props: ['level'],\n  render (h) {\n    return h(\n      // Tag name\n      `h${this.level}`,\n      // Default slot content\n      this.$slots.default,\n    )\n  }\n})\n```", "```js\n<my-title level=\"2\">Hello</my-title>\n```", "```js\n<template>\n  <h1 v-if=\"level === 1\">\n    <slot></slot>\n  </h1>\n  <h2 v-else-if=\"level === 2\">\n    <slot></slot>\n  </h2>\n  <h3 v-else-if=\"level === 3\">\n    <slot></slot>\n  </h3>\n  <h4 v-else-if=\"level === 4\">\n    <slot></slot>\n  </h4>\n  <h5 v-else-if=\"level === 5\">\n    <slot></slot>\n  </h5>\n  <h6 v-else-if=\"level === 6\">\n    <slot></slot>\n  </h6>\n</template>\n```", "```js\n{\n  // Same API as `v-bind:class`\n  'class': {\n    foo: true,\n    bar: false\n  },\n  // Same API as `v-bind:style`\n  style: {\n    color: 'red',\n    fontSize: '14px'\n  },\n  // Normal HTML attributes\n  attrs: {\n    id: 'foo'\n  },\n  // Component props\n  props: {\n    myProp: 'bar'\n  },\n  // DOM properties\n  domProps: {\n    innerHTML: 'baz'\n  },\n  // Event handlers are nested under \"on\", though\n  // modifiers such as in v-on:keyup.enter are not\n  // supported. You'll have to manually check the\n  // keyCode in the handler instead.\n  on: {\n    click: this.clickHandler\n  },\n  // For components only. Allows you to listen to\n  // native events, rather than events emitted from\n  // the component using vm.$emit.\n  nativeOn: {\n    click: this.nativeClickHandler\n  },\n  // Custom directives. Note that the binding's\n  // oldValue cannot be set, as Vue keeps track\n  // of it for you.\n  directives: [\n    {\n      name: 'my-custom-directive',\n      value: '2'\n      expression: '1 + 1',\n      arg: 'foo',\n      modifiers: {\n        bar: true\n      }\n    }\n  ],\n  // The name of the slot, if this component is the\n  // child of another component\n  slot: 'name-of-slot'\n  // Other special top-level properties\n  key: 'myKey',\n  ref: 'myRef'\n}\n```", "```js\nVue.component('my-title', {\n  props: ['level'],\n  render (h) {\n    return h(\n      // Tag name\n      `h${this.level}`,\n      // Data object\n      {\n        'class': {\n          'important-title': this.level <= 3,\n        },\n      },\n      // Default slot content\n      this.$slots.default,\n    )\n  }\n})\n```", "```js\nVue.component('my-title', {\n  props: ['level'],\n  render (h) {\n    return h(\n      // Tag name\n      `h${this.level}`,\n      // Data object\n      {\n        on: {\n          click: this.clickHandler,\n        },\n      },\n      // Default slot content\n      this.$slots.default,\n    )\n  },\n  methods: {\n    clickHandler (event) {\n      console.log('You clicked')\n    },\n  },\n})\n```", "```js\nexport default {\n  props: ['message'],\n  render (h) {\n    return <p class=\"content\">\n      {this.message}\n    </p>\n  },\n}\n```", "```js\nexport default {\n  props: ['message'],\n  render (h) {\n    return h('p', { class: 'content' }, this.message)\n  },\n}\n```", "```js\n      <template></template>\n```", "```js\n      <script>\n      import { createNamespacedHelpers } from 'vuex'\n\n      // posts module\n      const {\n        mapGetters: postsGetters,\n        mapActions: postsActions,\n      } = createNamespacedHelpers('posts')\n\n      </script>\n```", "```js\n      export default {\n        computed: {\n          ...postsGetters([\n            'draft',\n            'currentPost',\n          ]),\n\n          cssClass () {\n            return [\n              'blog-content',\n              {\n                'has-content': this.currentPost,\n              },\n            ]\n          },\n        },\n      }\n```", "```js\n render (h) {\n        let Content\n        if (!this.currentPost) {\n          Content = NoContent\n        } else if (this.draft) {\n          Content = CreatePost\n        } else {\n          Content = PostContent\n        }\n\n        return <div class={this.cssClass}>\n          <LocationInfo />\n          <Content />\n        </div>\n      },\n```", "```js\nimport LocationInfo from './LocationInfo.vue'\n\nexport default {\n  render (h) {\n    return <LocationInfo />\n  }\n}\n```", "```js\n      <script>\n      import AppMenu from './AppMenu.vue'\n      import BlogMap from './BlogMap.vue'\n      import BlogContent from './content/BlogContent.vue'\n\n      export default {\n        render (h) {\n          return <div class=\"geo-blog\">\n            <AppMenu />\n            <div class=\"panes\">\n              <BlogMap />\n              <BlogContent />\n            </div>\n          </div>\n        }\n      }\n      </script>\n```", "```js\n<template>\n  <div class=\"no-content\">\n    <i class=\"material-icons\">explore</i>\n    <div class=\"hint\">Click on the map to add a post</div>\n  </div>\n</template>\n```", "```js\n actions: {\n        clearDraft ({ commit }) {\n          commit('draft', null)\n        },\n\n        createDraft ({ commit }) {\n          // Default values\n          commit('draft', {\n            title: '',\n            content: '',\n            position: null,\n            placeId: null,\n          })\n        },\n\n        setDraftLocation ({ dispatch, getters }, { position, placeId }) {\n          if (!getters.draft) {\n            dispatch('createDraft')\n          }\n          dispatch('updateDraft', {\n            position,\n            placeId,\n          })\n        },\n\n        updateDraft ({ dispatch, commit, getters }, draft) {\n          commit('updateDraft', draft)\n        },\n      },\n```", "```js\n      // Vuex mappers\n      // maps module\n      const {\n        mapGetters: mapsGetters,\n        mapActions: mapsActions,\n      } = createNamespacedHelpers('maps')\n      // posts module\n      const {\n        mapGetters: postsGetters,\n        mapActions: postsActions,\n      } = createNamespacedHelpers('posts')\n```", "```js\n computed: {\n        ...mapsGetters([\n          'center',\n          'zoom',\n        ]),\n        ...postsGetters([\n          'draft',\n        ]),\n        // ...\n      },\n```", "```js\n methods: {\n        ...mapsActions([\n          'setCenter',\n          'setUserPosition',\n          'setZoom',\n        ]),\n\n        ...postsActions([\n          'setDraftLocation',\n        ]),\n      },\n```", "```js\n      <googlemaps-map\n        :center=\"center\"\n        :zoom=\"zoom\"\n        :options=\"mapOptions\"\n        @update:center=\"setCenter\"\n        @update:zoom=\"setZoom\"\n        @click=\"onMapClick\"\n      >\n```", "```js\n onMapClick (event) {\n        this.setDraftLocation({\n          position: event.latLng,\n          placeId: event.placeId,\n        })\n      },\n```", "```js\n      <!-- New post marker -->\n      <googlemaps-marker\n        v-if=\"draft\"\n        :clickable=\"false\"\n        :label=\"{\n          color: 'white',\n          fontFamily: 'Material Icons',\n          text: 'add_circle',\n        }\"\n        :opacity=\".75\"\n        :position=\"draft.position\"\n        :z-index=\"6\"\n      />\n```", "```js\n      <template>\n        <form\n          class=\"create-post\"\n          @submit.prevent=\"handleSubmit\">\n    <input\n            name=\"title\"\n            v-model=\"title\"\n            placeholder=\"Title\"\n            required />\n\n          <textarea\n            name=\"content\"\n            v-model=\"content\"\n            placeholder=\"Content\"\n            required />\n\n          <div class=\"actions\">\n            <button\n              type=\"button\"\n              class=\"secondary\"\n              @click=\"clearDraft\">\n              <i class=\"material-icons\">delete</i>\n              Discard\n            </button>\n            <button\n              type=\"submit\"\n              :disabled=\"!formValid\">\n              <i class=\"material-icons\">save</i>\n              Post\n            </button>\n          </div>\n        </form>\n      </template>\n```", "```js\n      <script>\n      import { createNamespacedHelpers } from 'vuex'\n\n      // posts module\n      const {\n        mapGetters: postsGetters,\n        mapActions: postsActions,\n      } = createNamespacedHelpers('posts')\n      </script>\n```", "```js\n      export default {\n        computed: {\n          ...postsGetters([\n            'draft',\n          ]),\n        },\n        methods: {\n          ...postsActions([\n            'clearDraft',\n            'createPost', // We will create this one very soon\n            'updateDraft',\n          ]),\n        },\n      }\n```", "```js\n title: {\n        get () {\n          return this.draft.title\n        },\n        set (value) {\n          this.updateDraft({\n            ...this.draft,\n            title: value,\n          })\n        },\n      },\n\n      content: {\n        get () {\n          return this.draft.content\n        },\n        set (value) {\n          this.updateDraft({\n            ...this.draft,\n            content: value,\n          })\n        },\n      },\n\n      formValid () {\n        return this.title && this.content\n      },\n```", "```js\n      handleSubmit () {\n        if (this.formValid) {\n          this.createPost(this.draft)\n        }\n      },\n```", "```js\n      async createPost ({ commit, dispatch }, draft) {\n        const data = {\n          ...draft,\n          // We need to get the object form\n          position: draft.position.toJSON(),\n        }\n\n        // Request\n        const result = await $fetch('posts/new', {\n          method: 'POST',\n          body: JSON.stringify(data),\n        })\n        dispatch('clearDraft')\n\n        // Update the posts list\n        commit('addPost', result)\n        dispatch('selectPost', result._id)\n      },\n```", "```js\n      async selectPost ({ commit }, id) {\n        commit('selectedPostId', id)\n        // TOTO fetch the post details (comments, etc.)\n      },\n```", "```js\n      let fetchPostsUid = 0\n```", "```js\n      async fetchPosts ({ commit, state }, { mapBounds, force }) {\n        let oldBounds = state.mapBounds\n        if (force || !oldBounds || !oldBounds.equals(mapBounds)) {\n          const requestId = ++fetchPostsUid\n\n          // Request\n          const ne = mapBounds.getNorthEast()\n          const sw = mapBounds.getSouthWest()\n          const query = `posts?ne=${\n            encodeURIComponent(ne.toUrlValue())\n          }&sw=${\n            encodeURIComponent(sw.toUrlValue())\n          }`\n          const posts = await $fetch(query)\n\n          // We abort if we started another query\n          if (requestId === fetchPostsUid) {\n            commit('posts', {\n              posts,\n              mapBounds,\n            })\n          }\n        }\n      },\n```", "```js\n setBounds ({ dispatch }, value) {\n        dispatch('posts/fetchPosts', {\n          mapBounds: value,\n        }, {\n          root: true,\n        })\n      },\n```", "```js\n      <googlemaps-map\n        ref=\"map\"\n        :center=\"center\"\n        :zoom=\"zoom\"\n        :options=\"mapOptions\"\n        @update:center=\"setCenter\"\n        @update:zoom=\"setZoom\"\n        @click=\"onMapClick\"\n        @idle=\"onIdle\"\n      >\n```", "```js\n onIdle () {\n        this.setBounds(this.$refs.map.getBounds())\n      },\n```", "```js\n<googlemaps-marker\n  v-for=\"post of posts\"\n  :key=\"post._id\"\n  :label=\"{\n    color: post === currentPost ? 'white' : 'black',\n    fontFamily: 'Material Icons',\n    fontSize: '20px',\n    text: 'face',\n  }\"\n  :position=\"post.position\"\n  :z-index=\"5\"\n  @click=\"selectPost(post._id)\"\n/>\n```", "```js\n logout ({ commit }) {\n        commit('posts', {\n          posts: [],\n          mapBounds: null,\n        })\n      },\n```", "```js\n      logout ({ commit, dispatch }) {\n        commit('user', null)\n        $fetch('logout')\n        // ...\n        dispatch('posts/logout')\n      },\n```", "```js\n      logout: {\n        handler ({ commit }) {\n          commit('posts', {\n            posts: [],\n            mapBounds: null,\n          })\n        },\n        root: true,\n      },\n```", "```js\n 'logged-in': {\n        handler ({ dispatch, state }) {\n          if (state.mapBounds) {\n            dispatch('fetchPosts', {\n              mapBounds: state.mapBounds,\n              force: true,\n            })\n          }\n          if (state.selectedPostId) {\n            dispatch('selectPost', state.selectedPostId)\n          }\n        },\n        root: true,\n      },\n```", "```js\n      if (user) {\n        // ...\n        dispatch('logged-in')\n      }\n```", "```js\n      state () {\n        return {\n          // ...\n          // Fetched details for the selected post\n          selectedPostDetails: null,\n        }\n      },\n\n      getters: {\n        // ...\n        selectedPostDetails: state => state.selectedPostDetails,\n      },\n\n      mutations: {\n        // ...\n        selectedPostDetails (state, value) {\n          state.selectedPostDetails = value\n        },\n      },\n```", "```js\n      async selectPost ({ commit }, id) {\n        commit('selectedPostDetails', null)\n        commit('selectedPostId', id)\n        const details = await $fetch(`posts/${id}`)\n        commit('selectedPostDetails', details)\n      },\n```", "```js\n unselectPost ({ commit }) {\n        commit('selectedPostId', null)\n      },\n```", "```js\n      <template>\n        <div class=\"post-content\">\n          <template v-if=\"details\">\n            <div class=\"title\">\n              <img :src=\"details.author.profile.photos[0].value\" />\n              <span>\n                <span>{{ details.title }}</span>\n                <span class=\"info\">\n                  <span class=\"name\">\n                    {{ details.author.profile.displayName }}</span>\n                  <span class=\"date\">{{ details.date | date }}</span>\n                </span>\n              </span>\n            </div>\n            <div class=\"content\">{{ details.content }}</div>\n            <!-- TODO Comments -->\n            <div class=\"actions\">\n              <button\n                type=\"button\"\n                class=\"icon-button secondary\"\n                @click=\"unselectPost\">\n                <i class=\"material-icons\">close</i>\n              </button>\n              <!-- TODO Comment input -->\n            </div>\n          </template>\n          <div class=\"loading-animation\" v-else>\n            <div></div>\n          </div>\n        </div>\n      </template>\n```", "```js\n      <script>\n      import { createNamespacedHelpers } from 'vuex'\n\n      // posts module\n      const {\n        mapGetters: postsGetters,\n        mapActions: postsActions,\n      } = createNamespacedHelpers('posts')\n\n      export default {\n        computed: {\n          ...postsGetters({\n            details: 'selectedPostDetails',\n          }),\n        },\n\n        methods: {\n          ...postsActions([\n            'unselectPost',\n          ]),\n        },\n      }\n      </script>\n```", "```js\n<template>\n  <div class=\"search\">\n    <slot />\n  </div>\n</template>\n\n<script>\nexport default {\n  computed: {\n    results () {\n      return /* ... */\n    },\n  },\n}\n</script>\n```", "```js\n<slot :results=\"results\" />\n```", "```js\n<Search>\n  <template slot-scope=\"props\">\n    <div>{{props.results.length}} results</div>\n  </template>\n</Search>\n```", "```js\n<slot v-for=\"r of results\" :result=\"r\" />\n```", "```js\n<Search>\n  <div slot-scope=\"props\" class=\"result\">{{props.result.label}}</div>\n</Search>\n```", "```js\n      <script>\n      export default {\n        props: {\n          name: String,\n          address: String,\n        },\n\n        render (h) {\n          return <div class=\"details\">\n            <div class=\"name\"><i class=\"material-icons\">place</i>   \n             {this.name}</div>\n            <div class=\"address\"> {this.address}</div>\n          </div>\n        },\n      }\n      </script>\n```", "```js\n      <template>\n        <div class=\"location-info\" v-if=\"currentPost\">\n          <!-- Place -->\n          <googlemaps-place-details\n            v-if=\"currentPost.placeId\"\n            :request=\"{\n              placeId: currentPost.placeId\n            }\">\n            <PlaceDetails\n              slot-scope=\"props\"\n              v-if=\"props.results\"\n              :name=\"props.results.name\"\n              :address=\"props.results.formatted_address\" />\n          </googlemaps-place-details>\n\n          <!-- Position only -->\n          <googlemaps-geocoder\n            v-else\n            :request=\"{\n              location: currentPost.position,\n            }\">\n            <PlaceDetails\n              slot-scope=\"props\"\n              v-if=\"props.results\"\n              :name=\"props.results[1].placeDetails.name\"\n              :address=\"props.results[0].formatted_address\" />\n          </googlemaps-geocoder>\n        </div>\n        <div v-else></div>\n      </template>\n```", "```js\n      <script>\n      import PlaceDetails from './PlaceDetails.vue'\n      import { createNamespacedHelpers } from 'vuex'\n\n      // posts module\n      const {\n        mapGetters: postsGetters,\n      } = createNamespacedHelpers('posts')\n\n      export default {\n        components: {\n          PlaceDetails,\n        },\n\n        computed: postsGetters([\n    'currentPost',\n      ]),\n      }\n      </script>\n```", "```js\n addComment (state, { post, comment }) {\n        post.comments.push(comment)\n      },\n```", "```js\n      async sendComment({ commit, rootGetters }, { post, comment }) {\n        const user = rootGetters.user\n        commit('addComment', {\n          post,\n          comment: {\n            ...comment,\n            date: new Date(),\n            user_id: user._id,\n            author: user,\n          },\n        })\n\n        await $fetch(`posts/${post._id}/comment`, {\n          method: 'POST',\n```", "```js\n          body: JSON.stringify(comment),\n        })\n      },\n```", "```js\nexport default {\n  functional: true,\n  render (h, { props, children }) {\n    return h(`h${props.level}`, children)\n  },\n}\n```", "```js\n<template functional>\n  <div class=\"my-component\">{{ props.message }}</div>\n</template>\n```", "```js\n      <script>\n      import { date } from '../../filters'\n\n      export default {\n        functional: true,\n\n        render (h, { props }) {\n          const { comment } = props\n          return <div class=\"comment\">\n            <img class=\"avatar\" src=\n            {comment.author.profile.photos[0].value} /&gt;\n            <div class=\"message\">\n              <div class=\"info\">\n              <span class=\"name\">{comment.author.profile.displayName}\n              </span>\n                <span class=\"date\">{date(comment.date)}</span>\n              </div>\n              <div class=\"content\">{comment.content}</div>\n            </div>\n          </div>\n        },\n      }\n      </script>\n```", "```js\n      <div class=\"comments\">\n        <Comment\n          v-for=\"(comment, index) of details.comments\"\n          :key=\"index\"\n          :comment=\"comment\" />\n      </div>\n      <div class=\"actions\">\n        <!-- ... -->\n        <input\n          v-model=\"commentContent\"\n          placeholder=\"Type a comment\"\n          @keyup.enter=\"submitComment\" />\n        <button\n          type=\"button\"\n          class=\"icon-button\"\n          @click=\"submitComment\"\n          :disabled=\"!commentFormValid\">\n          <i class=\"material-icons\">send</i>\n        </button>\n      </div>\n```", "```js\n      import Comment from './Comment.vue'\n\n      export default {\n        components: {\n          Comment,\n        },\n        data () {\n          return {\n            commentContent: '',\n          }\n        },\n        computed: {\n          ...postsGetters({\n            details: 'selectedPostDetails',\n          }),\n          commentFormValid () {\n            return this.commentContent\n          },\n        },\n        methods: {\n          ...postsActions([\n            'sendComment',\n            'unselectPost',\n          ]),\n          async submitComment () {\n            if (this.commentFormValid) {\n              this.sendComment({\n                post: this.details,\n                comment: {\n                  content: this.commentContent,\n                },\n              })\n              this.commentContent = ''\n            }\n          },\n        },\n      }\n```"]