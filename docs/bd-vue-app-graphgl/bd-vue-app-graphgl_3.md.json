["```js\n> npm install -g @quasar/cli\n```", "```js\n> npm install -g @aws-amplify/cli\n```", "```js\n> amplify configure\n```", "```js\n> quasar create chat-app\n```", "```js\n> ? Project name (internal usage for dev) chat-app\n```", "```js\n? Project product name (must start with letter if building mobile \n  apps) Chat App\n```", "```js\n? Project description A Chat Application\n```", "```js\n? Author Heitor Ramon Ribeiro <heitor.ramon@example.com>\n```", "```js\n? Pick your favorite CSS preprocessor: (can be changed later) \n  Sass with indented syntax (recommended) \n  Sass with SCSS syntax (recommended) \n\u276f Stylus \n  None (the others will still be available)\n```", "```js\n? Pick a Quasar components & directives import strategy: (can be changed later) (Use arrow key s)\n\u276f * Auto-import in-use Quasar components & directives - slightly\n    higher compile time; next to minimum bundle size; most \n     convenient \n  * Manually specify what to import - fastest compile time; minimum \n     bundle size; most tedious \n  * Import everything from Quasar - not treeshaking Quasar; biggest \n     bundle size; convenient\n```", "```js\n? Check the features needed for your project: (Press <space> to select, <a> to toggle all, <i> to invert selection) \n\u276f ESLint \n Vuex \n  TypeScript \n Axios \n Vue-i18n \n  IE11 support\n```", "```js\n? Pick an ESLint preset: (Use arrow keys) \n  Standard (https://github.com/standard/standard) \n\u276f Airbnb (https://github.com/airbnb/javascript) \n  Prettier (https://github.com/prettier/prettier)\n```", "```js\n? Cordova/Capacitor id (disregard if not building mobile apps) \n  org.cordova.quasar.app\n```", "```js\n? Should we run `npm install` for you after the project has been \n  created? (recommended) (Use arrow keys) \n  Yes, use Yarn (recommended) \n\u276f Yes, use NPM \n  No, I will handle that myself\n```", "```js\n> amplify init\n```", "```js\n? Enter a name for the project: chatapp\n```", "```js\n? Enter a name for the environment: dev\n```", "```js\n? Choose your default editor: (Use arrow keys) \n\u276f Visual Studio Code\n  Atom Editor \n  Sublime Text\n  InteliJ IDEA\n  Vim (via Terminal, Mac OS only)\n  Emac (via Terminal, Mac OS only)\n  None\n```", "```js\n? Choose the type of app that you're building? (recommended) (Use \n   arrow keys) \n  android \n  ios \n\u276f javascript\n```", "```js\n? What javascript framework are you using? (recommended) (Use arrow \n  keys) \n  angular \n  ember\n  ionic\n  react\n  react-native\n  vue \n\u276f none\n```", "```js\n? Source Directory Path: (src)\n```", "```js\n? Distribution Directory Path: dist/spa\n```", "```js\n? Build Command: quasar build\n```", "```js\n? Start Command: quasar dev\n```", "```js\n? Start Command: quasar.cmd dev\n```", "```js\n? Do you want to use an AWS profile: y\n```", "```js\n? Please choose the profile you want to use: (Use arrow keys) \n\u276f default\n```", "```js\n> amplify add hosting\n```", "```js\n? Select the plugin module to execute \n\u276f Hosting with Amplify Console (Managed hosting with custom domains,\n  Continuous deployment) \n  Amazon CloudFront and S3 \n```", "```js\n? Choose a type (Use arrow keys)\n  Continuous deployment (Git-based deployments) \n\u276f Manual deployment \n  Learn more \n```", "```js\n> amplify publish\n```", "```js\n> npm install -g @aws-amplify/cli\n```", "```js\n> amplify auth add\n```", "```js\nDo you want to use default authentication and security configuration: (Use arrow keys) \n\u276f Default configuration  Default configuration with Social Provider (Federation)\n  Manual configuration\n  I want to learn more.\n```", "```js\nWarning: you will not be able to edit these selections.\nHow do you want users to be able to sign in: (Use arrow keys) \n  Username\n\u276f Email  Phone Number\n  Email and Phone Number\n  I want to learn more.\n```", "```js\nDo you want to configure advanced settings: (Use arrow keys) \n\u276f No, I am done.  Yes, I want to make some additional changes.\n```", "```js\n> amplify auth push\n```", "```js\n? Are you sure you want to continue: y \n```", "```js\ntype S3Object {\n  bucket: String!\n  region: String!\n  key: String! } \n```", "```js\ntype User\n@model(subscriptions: null) @auth(rules: [\n  { allow: owner, ownerField: \"id\", queries: null },\n  { allow: owner, ownerField: \"owner\", queries: null },\n]) {\n  id: ID!\n  email: String!\n  username: String!\n  avatar: S3Object\n  name: String\n  conversations: [ConversationLink] @connection(name: \"UserLinks\")\n  messages: [Message] @connection(name: \"UserMessages\", keyField: \"authorId\")\n  createdAt: String\n  updatedAt: String }\n```", "```js\ntype Conversation\n@model(\n  mutations: { create: \"createConversation\" }\n  queries: { get: \"getConversation\" }\n  subscriptions: null ) @auth(rules: [{ allow: owner, ownerField: \"members\" }]) {\n  id: ID!\n  messages: [Message] @connection(name: \"ConversationMessages\",\n   sortField: \"createdAt\")\n  associated: [ConversationLink] @connection(name: \n   \"AssociatedLinks\")\n  name: String!\n  members: [String!]!\n  createdAt: String\n  updatedAt: String }\n```", "```js\ntype Message\n@model(subscriptions: null, queries: null) @auth(rules: [{ allow: owner, ownerField: \"authorId\", operations: [create, update, delete]}]) {\n  id: ID!\n  author: User @connection(name: \"UserMessages\", keyField: \n   \"authorId\")\n  authorId: String\n  content: String!\n  conversation: Conversation! @connection(name: \"ConversationMessages\")\n  messageConversationId: ID!\n  createdAt: String\n  updatedAt: String }\n```", "```js\ntype ConversationLink\n@model(\n  mutations: { create: \"createConversationLink\", update: \n\"updateConversationLink\" }\n  queries: null\n  subscriptions: null ) {\n  id: ID!\n  user: User! @connection(name: \"UserLinks\")\n  conversationLinkUserId: ID\n  conversation: Conversation! @connection(name: \"AssociatedLinks\")\n  conversationLinkConversationId: ID!\n  createdAt: String\n  updatedAt: String }\n```", "```js\ntype Subscription {\n  onCreateConversationLink(conversationLinkUserId: ID!): \n   ConversationLink\n  @aws_subscribe(mutations: [\"createConversationLink\"])\n  onCreateMessage(messageConversationId: ID!): Message\n  @aws_subscribe(mutations: [\"createMessage\"])\n  onCreateUser: User\n  @aws_subscribe(mutations: [\"createUser\"])\n  onDeleteUser: User\n  @aws_subscribe(mutations: [\"deleteUser\"])\n  onUpdateUser: User\n  @aws_subscribe(mutations: [\"updateUser\"]) }\n```", "```js\n> amplify add api\n```", "```js\n? Please select from one of the below mentioned services: (Use arrow \n  keys) \n\u276f GraphQL  REST\n```", "```js\n? Provide API name: chatapp\n```", "```js\n? Choose the default authorization type for the API: (Use arrow\n  keys) \n  API key\n\u276f Amazon Cognito User Pool  IAM\n  OpenID Connect\n```", "```js\n? Do you want to configure advanced settings for the GraphQL API:\n  (Use arrow keys) \n\u276f No, I am done.  Yes, I want to make some additional changes.\n```", "```js\n? Do you have an annotated GraphQL schema?: y\n```", "```js\n? Provide your schema file path: ./src/chatApi.graphql\n```", "```js\n> amplify push\n```", "```js\n? Are you sure you want to continue?: y\n```", "```js\n? Do you want to generate code for your newly created GraphQL API: y\n```", "```js\n? Choose the code generation language target: (Use arrow keys) \n\u276f javascript\n  typescript\n  flow\n```", "```js\n? Enter the file name pattern of graphql queries, mutation and\n  subscriptions: (src/graphql/***/**.js) \n```", "```js\n? Do you want to generate/update all possible GraphQL operations - \n  queries, mutations and subscriptions: y \n```", "```js\n? Enter maximum statement depth [increase from default if your \n  schema is deeply nested]: (2) \n```", "```js\n> amplify publish \n```", "```js\n> npm install --save graphql aws-amplify graphql-tag aws-appsync\n```", "```js\nimport Amplify from 'aws-amplify';   import AwsExports from '../aws-exports';   Amplify.configure(AwsExports);   export default () => {}; \n```", "```js\n// The rest of the quasar.conf.js... extendWebpack (cfg) {\n  //New rules that need to be added\n cfg.module.rules.push({\n  test: /\\.(graphql|gql)$/,\n  exclude: /node_modules/,\n  loader: 'graphql-tag/loader',\n  });    cfg.module.rules.push({\n  test: /\\.mjs$/,\n  include: /node_modules/,\n  type: 'javascript/auto',\n  });\n // Maintain these rules  cfg.module.rules.push({\n  enforce: 'pre',\n  test: /\\.(js|vue)$/,\n  loader: 'eslint-loader',\n  exclude: /node_modules/,\n  options: {\n  formatter: \n       require('eslint').CLIEngine.getFormatter('stylish'),\n  },\n  });    cfg.resolve.alias = {\n  ...cfg.resolve.alias,\n  driver: path.resolve(__dirname, './src/driver'),\n  }; }, // The rest of the quasar.conf.js...\n```", "```js\nimport AWSAppSyncClient from 'aws-appsync'; import { Auth } from 'aws-amplify'; import AwsExports from '../aws-exports';   export default new AWSAppSyncClient({\n  url: AwsExports.aws_appsync_graphqlEndpoint,\n  region: AwsExports.aws_appsync_region,\n  auth: {\n  type: AwsExports.aws_appsync_authenticationType,\n  jwtToken: async () => (await \n      Auth.currentSession()).idToken.jwtToken,\n  }, }); \n```", "```js\n// The rest of the quasar.conf.js... \nboot: [   'axios',\n  'amplify' ], // The rest of the quasar.conf.js...  \n```", "```js\n> amplify add storage\n```", "```js\n? Please select from one of the below mentioned services: (Use arrow \n  keys) \n\u276f Content (Images, audio, video, etc.)  NoSQL Database\n```", "```js\n? Please provide a friendly name for your resource that will be used \n  to label this category in the project: bucket\n```", "```js\n? Please provide bucket name: chatappbucket \n```", "```js\n? Who should have access: (Use arrow keys) \n\u276f Auth users only  Auth and guest users\n```", "```js\n? What kind of access do you want for Authenticated users? \n  create/update\n  read\n\u276f delete\n```", "```js\n? Do you want to add a Lambda Trigger for you S3 Bucket: n\n```", "```js\n> amplify push\n```", "```js\n> amplify publish\n```", "```js\nimport { Storage } from 'aws-amplify'; import { uid } from 'quasar'; import AwsExports from '../aws-exports'; \n```", "```js\nexport async function uploadFile(file, name = uid(), type = 'image/png') {\n  try {\n  const uploadedFile = await Storage.put(name, file, {\n  contentType: type,\n  accept: '*/*',\n  });    return {\n  ...uploadedFile,\n  bucket: AwsConfig.aws_user_files_s3_bucket,\n  region: AwsConfig.aws_user_files_s3_bucket_region,\n  };\n  } catch (err) {\n  return Promise.reject(err);\n  } }\n```", "```js\nexport async function getFile(name = '') {\n  try {\n  return await Storage.get(name, { level: 'public' });\n  } catch (err) {\n  return Promise.reject(err);\n  } } \n```", "```js\nexport default {\n  uploadFile,\n  getFile, };  \n```", "```js\nimport { Auth } from 'aws-amplify';\n```", "```js\nexport async function signIn(email = '', password = '') {\n  try {\n  return Auth.signIn({\n  username: email,\n  password,\n  });\n  } catch (err) {\n  return Promise.reject(err);\n  } }\n```", "```js\nexport async function signUp(email = '', password = '') {\n  try {\n  return Auth.signUp({\n  username: email,\n  password: `${password}`,\n  attributes: {\n email,\n  },\n  validationData: [],\n  });\n  } catch (err) {\n  return Promise.reject(err);\n  } }\n```", "```js\nexport async function validateUser(username = '', code = '') {\n  try {\n  await Auth.confirmSignUp(username, `${code}`);    return Promise.resolve(true);\n  } catch (err) {\n  return Promise.reject(err);\n  } }\n```", "```js\nexport async function resendValidationCode(username = '') {\n  try {\n  return Auth.resendSignUp(username);\n  } catch (err) {\n  return Promise.reject(err);\n  } } \n```", "```js\nexport async function signOut() {\n  try {\n  return Auth.signOut();\n  } catch (err) {\n  return Promise.reject(err);\n  } }\n```", "```js\nexport async function changePassword(oldPassword = '', newPassword = '') {\n  try {\n  const user = await Auth.currentAuthenticatedUser();\n  return Auth.changePassword(user, `${oldPassword}`, `${newPassword}`);\n  } catch (err) {\n  return Promise.reject(err);\n  } }\n```", "```js\nexport async function getCurrentAuthUser() {\n  try {\n  const user = await Auth.currentAuthenticatedUser();    return Promise.resolve({\n  id: user.username,\n  email: user.signInUserSession.idToken.payload.email,\n  username: user.username,\n  });\n  } catch (err) {\n  return Promise.reject(err);\n  } } \n```", "```js\nimport { Auth, API } from 'aws-amplify'; import { GRAPHQL_AUTH_MODE } from '@aws-amplify/api'; import AwsExports from '../aws-exports';\n```", "```js\nAPI.configure({\n  url: awsconfig.aws_appsync_graphqlEndpoint,\n  region: awsconfig.aws_appsync_region,\n  auth: {\n  type: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n  jwtToken: async () => (await Auth.currentSession()).getIdToken().getJwtToken(),\n  }, });\n```", "```js\nexport const AuthAPI = API;\n```"]