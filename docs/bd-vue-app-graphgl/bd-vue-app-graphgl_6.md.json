["```js\n> npm install -g @quasar/cli\n```", "```js\n> npm install -g @aws-amplify/cli\n```", "```js\nimport graphql from 'graphql-tag';\n```", "```js\nconst getUser = graphql`\n query getUser($id: ID!) {\n getUser(id: $id) {\n id username avatar { bucket key region } email name } } `;\n```", "```js\nconst listUsers = graphql`\n query listUsers { listUsers { items { id username name createdAt avatar { bucket region key } } } } `;\n```", "```js\nconst getUserAndConversations = graphql`\n query getUserAndConversations($id:ID!) {\n getUser(id:$id) {\n id username conversations(limit: 10) {\n items { id conversation { id name associated { items { user { id name email avatar { bucket key region } } } } } } } } } `;\n```", "```js\nconst getConversation = graphql`\n query GetConversation($id: ID!) {  getConversation(id:$id) {  id name members messages(limit: 1000) {  items {  id content author {  name avatar {  bucket key region  }\n }  authorId messageConversationId createdAt  }\n }  createdAt updatedAt  }\n } `;\n```", "```js\nconst createMessage = graphql`mutation CreateMessage(\n  $id: ID,\n  $authorId: String,\n  $content: String!,\n  $messageConversationId: ID!\n  $createdAt: String, ) {  createMessage(input: {\n  id: $id,\n  authorId: $authorId\n content: $content,\n  messageConversationId: $messageConversationId,\n  createdAt: $createdAt,\n  }) {  id authorId content messageConversationId createdAt  } } `;\n```", "```js\nconst createConversation = graphql`mutation CreateConversation($name: String!, $members: [String!]!) {  createConversation(input: {\n  name: $name, members: $members\n  }) {  id name members  } } `;\n```", "```js\nconst createConversationLink = graphql`mutation CreateConversationLink(\n  $conversationLinkConversationId: ID!,\n  $conversationLinkUserId: ID ) {  createConversationLink(input: {\n  conversationLinkConversationId: $conversationLinkConversationId,\n  conversationLinkUserId: $conversationLinkUserId\n  }) {  id conversationLinkUserId conversationLinkConversationId conversation {  id name  }\n } } `;\n```", "```js\nexport {\n  getUser,\n  listUsers,\n  getUserAndConversations,\n  getConversation,\n  createMessage,\n  createConversation,\n  createConversationLink, };  \n```", "```js\nimport { listUsers, getUser } from 'src/graphql/fragments';\n```", "```js\nexport function createState() {\n  return {\n  conversations: [],\n  messages: [],\n  loading: false,\n  error: undefined,\n  }; }\n```", "```js\nexport default createState();\n```", "```js\nexport default {\n  SET_CONVERSATIONS: 'SET_CONVERSATIONS',\n  SET_MESSAGES: 'SET_MESSAGES',\n  LOADING: 'LOADING',\n  ERROR: 'ERROR', };\n```", "```js\nimport MT from './types';\n```", "```js\nfunction setLoading(state) {\n state.loading = true; }\n```", "```js\nfunction setError(state, error = new Error()) {\n state.error = error;\n  state.loading = false; }\n```", "```js\nfunction setConversations(state, payload) {\n state.conversations = payload.items;\n  state.loading = false; }\n```", "```js\nfunction setMessages(state, payload) {\n  const messageIndex = state.messages.findIndex(m => m.id === \n   payload.id);    if (messageIndex === -1) {\n state.messages.push(payload);\n  } else {\n state.messages[messageIndex].messages.items = payload.messages.items;\n  }\n state.loading = false; }\n```", "```js\nexport default {\n  [MT.LOADING]: setLoading,\n  [MT.ERROR]: setError,\n  [MT.SET_CONVERSATIONS]: setConversations,\n  [MT.SET_MESSAGES]: setMessages, };\n```", "```js\nconst getConversations = (state, _getters, _rootState, rootGetters) => {\n  const { conversations } = state;\n  return conversations\n  .reduce((acc, curr) => {\n  const { conversation } = curr;    const user = rootGetters['user/getUser'].id;    const users = conversation\n  .associated\n        .items\n        .reduce((a, c) => [...a, { ...c.user, conversation: \n           conversation.id }], [])\n  .filter(u => u.id !== user);    return [...acc, users];\n  }, [])\n  .flat(Infinity); };\n```", "```js\nconst getChatMessages = (state) => (convId)  => (state.messages.length ? state.messages\n  .find(m => m.id === convId).messages.items : []);\n```", "```js\nconst isLoading = (state) => state.loading;\n```", "```js\nconst hasError = (state) => state.error;\n```", "```js\nexport default {\n  getConversations,\n  getChatMessages,\n  isLoading,\n  hasError, };  \n```", "```js\nimport { graphqlOperation } from 'aws-amplify';\nimport {\n  getUserAndConversations,\n  createConversation,\n  createConversationLink,\n  createMessage,\n  getConversation,\n} from 'src/graphql/fragments';\nimport {\n  getCurrentAuthUser,\n} from 'src/driver/auth';\nimport { uid } from 'quasar';\nimport { AuthAPI } from 'src/driver/appsync';\nimport MT from './types';\n```", "```js\nasync function newConversation(_vuex, { authorId, otherUserId }) {\n  try {\n  const members = [authorId, otherUserId];    const conversationName = members.join(' and ');    const {\n    data: {\n      createConversation: {\n        id: conversationLinkConversationId,\n      },\n    },\n  } = await AuthAPI.graphql(\n    graphqlOperation(createConversation,\n      {\n        name: conversationName,\n        members,\n      }),\n  );    const relation = { conversationLinkConversationId };    await Promise.all([\n    AuthAPI.graphql(\n      graphqlOperation(createConversationLink, {\n        ...relation,\n        conversationLinkUserId: authorId,\n      }),\n    ),\n    AuthAPI.graphql(\n      graphqlOperation(createConversationLink, {\n        ...relation,\n        conversationLinkUserId: otherUserId,\n      }),\n    )]);    return Promise.resolve({\n    id: conversationLinkConversationId,\n    name: conversationName,\n  });\n  } catch (e) {\n  return Promise.reject(e);\n  } }\n```", "```js\nasync function newMessage({ commit }, { message, conversationId }) {\n  try {\n  commit(MT.LOADING);    const { username } = await getCurrentAuthUser();    return AuthAPI.graphql(graphqlOperation(\n    createMessage,\n    {\n      id: uid(),\n      authorId: username,\n      content: message,\n      messageConversationId: conversationId,\n      createdAt: Date.now(),\n    },\n  ));\n  } catch (e) {\n  return Promise.reject(e);\n  } finally {\n  commit(MT.LOADING);\n  } }\n```", "```js\nasync function getMessages({ commit }) {\n  try {\n  commit(MT.LOADING);    const { id } = await getCurrentAuthUser();    const {\n    data: {\n      getUser: {\n        conversations,\n      },\n    },\n  } = await AuthAPI.graphql(graphqlOperation(\n    getUserAndConversations,\n    {\n      id,\n    },\n  ));    commit(MT.SET_CONVERSATIONS, conversations);    return Promise.resolve(conversations);\n  } catch (err) {\n  commit(MT.ERROR, err);\n  return Promise.reject(err);\n  } }\n```", "```js\nasync function fetchNewMessages({ commit }, { conversationId }) {\n  try {\n  commit(MT.LOADING);    const { data } = await AuthAPI.graphql(graphqlOperation(\n    getConversation,\n    {\n      id: conversationId,\n    },\n  ));    commit(MT.SET_MESSAGES, data.getConversation);    return Promise.resolve(true);\n  } catch (e) {\n  return Promise.reject(e);\n  } }\n```", "```js\nexport default {\n  newConversation,\n  newMessage,\n  getMessages,\n  fetchNewMessages, }; \n```", "```js\nimport state from './state'; import actions from './actions'; import mutations from './mutations'; import getters from './getters';\n```", "```js\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations,\n  getters, };  \n```", "```js\nimport Vue from 'vue'; import Vuex from 'vuex'; import user from './user';\nimport chat form './chat';\n```", "```js\nexport default function (/* { ssrContext } */) {\n  const Store = new Vuex.Store({\n  modules: {\n  user,\n      chat,\n  },\n  strict: process.env.DEV,\n  });    return Store; }  \n```", "```js\nimport { mapActions, mapGetters } from 'vuex';\n```", "```js\nexport default {\n  name: 'NewConversation',\n  components: {},\n  props: {},\n  data: () => ({}),\n  watch: {},\n  computed: {},\n  methods: {},\n};\n```", "```js\ncomponents: {\n  AvatarDisplay: () => import('components/AvatarDisplay'), },\n```", "```js\nprops: {\n  value: {\n  type: Boolean,\n  default: false,\n  }, },\n```", "```js\ndata: () => ({\n  userList: [],\n  pending: false, }),\n```", "```js\nmethods: {\n  ...mapActions('user', ['listAllUsers']),\n  ...mapActions('chat', ['newConversation']),\n  async fetchUsers() {\n  this.pending = true;\n  try {\n  const users = await this.listAllUsers();\n  this.userList = users.filter((u) => u.id !== this.getUser.id);\n  } catch (e) {\n  this.$q.dialog({\n  message: e.message,\n  });\n  } finally {\n  this.pending = false;\n  }\n },\n  async createConversation(otherUserId) {\n  try {\n  const conversation = await this.newConversation({\n  authorId: this.getUser.id,\n otherUserId,\n  });\n await this.$router.push({\n  name: 'Messages',\n  params: conversation,\n  });\n  } catch (e) {\n  this.$q.dialog({\n  message: e.message,\n  });\n  }\n }, },\n```", "```js\ncomputed: {\n  ...mapGetters('user', ['getUser']),\n  ...mapGetters('chat', ['getConversations']),\n  contactList() {\n  return this.userList\n      .filter((user) => this.getConversations\n        .findIndex((u) => u.id === user.id) === -1);\n  }, },\n```", "```js\nwatch: {\n  async value(newVal) {\n  if (newVal) {\n  await this.fetchUsers();\n  }\n }, },\n```", "```js\n<q-dialog\n  :value=\"value\"\n  @input=\"$emit('input', $event)\" ></q-dialog>\n```", "```js\n<q-card\n  style=\"min-width: 400px; min-height: 100px\" >\n <q-card-section class=\"row items-center q-pb-none\">\n </q-card-section>  <q-card-section></q-card-section>\n</q-card>\n```", "```js\n<q-card-section class=\"row items-center q-pb-none\">\n <div class=\"text-h6\">New Conversation</div>\n <q-space/>\n <q-btn icon=\"close\" flat round dense v-close-popup/> </q-card-section>\n```", "```js\n<q-list>\n <q-item\n  v-for=\"contact in contactList\"\n  :key=\"contact.id\"\n  class=\"q-my-sm\"\n  clickable\n v-ripple @click=\"createConversation(contact.id)\"\n  ></q-item>\n</q-list>\n```", "```js\n<q-item-section avatar>\n  <q-avatar>\n  <avatar-display\n    :avatar-object=\"contact.avatar\"\n    :name=\"contact.name\"\n  />\n  </q-avatar> </q-item-section>\n```", "```js\n<q-item-section>\n <q-item-label>{{ contact.name }}</q-item-label>\n <q-item-label caption lines=\"1\">{{ contact.email }}</q-item-label> </q-item-section>\n```", "```js\n<q-item-section side>\n <q-icon name=\"add_comment\" color=\"green\"/> </q-item-section>\n```", "```js\n<q-inner-loading\n  :showing=\"pending\">\n <q-spinner\n  size=\"50px\"\n  color=\"primary\"/> </q-inner-loading>\n```", "```js\nimport { mapActions, mapGetters } from 'vuex';\n```", "```js\nexport default {\n  name: 'ChatContacts',\n  components: {\n  AvatarDisplay: () => import('components/AvatarDisplay'),\n  NewConversation: () => import('components/NewConversation'),\n  },\n  data: () => ({\n  dialogNewConversation: false,\n  }),\n  async mounted() {},\n  computed: {},\n  methods: {}, };\n```", "```js\ncomputed: {\n  ...mapGetters('user', ['getUser']),\n  ...mapGetters('chat', ['getConversations']), },\n```", "```js\nmethods: {\n  ...mapActions('chat', [\n  'getMessages',\n  ]), },\n```", "```js\nasync mounted() {\n  await this.getMessages(); },\n```", "```js\n<q-page>\n <q-list bordered>\n </q-list> </q-page> \n```", "```js\n<q-item\n  v-for=\"contact in getConversations\"\n  :key=\"contact.id\"\n  :to=\"{\n  name: 'Messages',\n  params: {\n  id: contact.conversation,\n  name: contact.name,\n  },\n  }\"\n  class=\"q-my-sm\"\n  clickable\n v-ripple ></q-item>\n```", "```js\n<q-item-section avatar>\n  <q-avatar>\n  <avatar-display\n    :avatar-object=\"contact.avatar\"\n    :name=\"contact.name\"\n  />\n  </q-avatar> </q-item-section>\n```", "```js\n<q-item-section>\n <q-item-label>{{ contact.name }}</q-item-label>\n <q-item-label caption lines=\"1\">{{ contact.email }}</q-item-label> </q-item-section>\n```", "```js\n<q-item-section side>\n  <q-icon name=\"chat_bubble\" color=\"green\"/> </q-item-section>\n```", "```js\n<q-page-sticky position=\"bottom-right\" :offset=\"[18, 18]\">\n <q-btn\n  fab\n icon=\"chat\"\n  color=\"accent\"\n  @click=\"dialogNewConversation = !dialogNewConversation\"\n  />\n <new-conversation\n  v-model=\"dialogNewConversation\"\n  /> </q-page-sticky>\n```", "```js\nimport { mapActions } from 'vuex';\n```", "```js\nexport default {\n  name: 'ChatInput',\n  data: () => ({}),\n  methods: {}, };\n```", "```js\ndata: () => ({\n  text: '', }),\n```", "```js\nmethods: {\n  ...mapActions('chat', ['newMessage', 'fetchNewMessages']),\n  async sendMessage() {\n  await this.newMessage({\n  message: this.text,\n  conversationId: this.$route.params.id,\n  });    await this.fetchNewMessages({\n  conversationId: this.$route.params.id,\n  });    this.text = '';\n  }, },\n```", "```js\n<q-input\n  v-model=\"text\"\n  bottom-slots\n label=\"Message\"\n  @keypress.enter=\"sendMessage\" ></q-input>\n```", "```js\n<template v-slot:after>\n <q-btn\n  round\n flat icon=\"send\"\n  @click=\"sendMessage\"\n  /> </template>\n```", "```js\nimport {signOut,} from 'src/driver/auth';\nimport ChatInput from '../components/ChatInput';\n```", "```js\nexport default {\n  name: 'MessagesLayout',\n  components: {},\n  methods: {   }, };\n```", "```js\ncomponents: { ChatInput },\n```", "```js\nmethods: {\n async logOff() {\n  await signOut();\n  window.location.reload();\n },\n}\n```", "```js\n<q-layout view=\"hHh lpR fFf\"> </q-layout>\n```", "```js\n<q-header elevated> </q-header>\n```", "```js\n<q-toolbar>\n <q-toolbar-title>\n  Chat App - {{ $route.params.name }}\n </q-toolbar-title> </q-toolbar>\n```", "```js\n<q-btn\n  v-go-back=\"$route.meta.goBack\"\n  dense\n flat round icon=\"keyboard_arrow_left\" />\n```", "```js\n<q-btn\n  dense\n flat round icon=\"exit_to_app\"\n  @click=\"logOff\" />\n```", "```js\n<q-page-container>\n <router-view /> </q-page-container>\n```", "```js\n<q-footer class=\"bg-white\">\n <q-toolbar>\n <q-toolbar-title>\n <chat-input />\n </q-toolbar-title>\n </q-toolbar> </q-footer>\n```", "```js\n{\n  path: '/chat/messages',\n  component: () => import('layouts/Messages.vue'),\n  children: [\n {  path: ':id/:name',\n  name: 'Messages',\n  meta: {\n        autenticated: true,\n  goBack: {\n  name: 'Contacts',\n  },\n  },\n  component: () => import('pages/Messages.vue'),\n  },\n  ], },\n```", "```js\nimport { mapActions, mapGetters } from 'vuex'; import { date } from 'quasar';\n```", "```js\nexport default {\n  name: 'MessagesPage',\n  components: {\n  AvatarDisplay: () => import('components/AvatarDisplay'),\n  },\n  data: () => ({\n  interval: null,\n  }),\n  async beforeMount() {},\n  beforeDestroy() {},\n  watch: {},\n  computed: {},\n  methods: {}, };\n```", "```js\ncomputed: {\n  ...mapGetters('chat', ['getChatMessages']),\n  ...mapGetters('user', ['getUser']),\n  currentMessages() {\n  const messages = this.getChatMessages(this.$route.params.id);\n  if (!messages.length) return [];\n  return messages.map((m) =>  ({\n  ...m,\n  createdAt: date.formatDate(new Date(parseInt(m.createdAt, \n        10)), 'YYYY/MM/DD HH:mm:ss'),\n  }));\n  }, },\n```", "```js\nmethods: {\n  ...mapActions('chat', ['fetchNewMessages']), },\n```", "```js\nwatch: {\n  currentMessages: {\n  handler(newValue, oldValue) {\n  if (newValue.length > oldValue.length) {\n  setTimeout(() => {\n  const lastMessage = [...newValue].pop();\n  const [{ $el: el }] = this.$refs[`${lastMessage.id}`];\n  el.scrollIntoView();\n  }, 250);\n  }\n },\n  deep: true,\n  immediate: false,\n  }, },\n```", "```js\nasync beforeMount() {\n  this.interval = setInterval(async () => {\n  await this.fetchNewMessages({\n  conversationId: this.$route.params.id,\n  });\n  }, 1000); },\n```", "```js\nbeforeDestroy() {\n  clearInterval(this.timeout);\n  this.timeout = null; },\n```", "```js\n<template>\n  <q-page class=\"q-pa-md row justify-center\">\n  <q-chat-message\n    v-for=\"message in currentMessages\"\n    :ref=\"`${message.id}`\"\n    :key=\"message.id\"\n    :stamp=\"message.createdAt\"\n    :text=\"[message.content]\"\n    :sent=\"getUser.id === message.authorId\"\n    :name=\"message.author.name\"\n    class=\"col-12\"\n  >\n    <template v-slot:avatar>\n      <avatar-display\n        :avatar-object=\"message.author.avatar\"\n        :name=\"message.author.name\"\n        tag=\"img\"\n        class=\"q-message-avatar\"\n        :class=\"getUser.id !== message.authorId\n        ? 'q-message-avatar--received'\n        : 'q-message-avatar--sent'\"\n      />\n    </template>\n  </q-chat-message>\n  </q-page> </template>\n```"]