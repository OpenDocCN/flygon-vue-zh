- en: Setting Up Our Chat App - AWS Amplify Environment and GraphQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的聊天应用程序 - AWS Amplify环境和GraphQL
- en: Since Facebook presented GraphQL in 2012, it has taken over the web like a hurricane.
    Huge companies started to adopt it, while small and medium companies have seen
    the potential of this query-based API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Facebook在2012年推出GraphQL以来，它就像飓风一样席卷了网络。大公司开始采用它，而中小型公司也看到了这种基于查询的API的潜力。
- en: It looks strange at first, but as you start to read and experience more of it,
    you don't want to use REST APIs anymore. The simplicity and data fetching capabilities
    made the lives of frontend developers easier, because they can fetch only what
    they want, and are not tied to an endpoint that delivers only a piece of single
    information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始看起来很奇怪，但随着您开始阅读和体验更多，您就不想再使用REST API了。简单性和数据获取能力使前端开发人员的生活变得更轻松，因为他们可以只获取他们想要的内容，而不必受限于只提供单个信息片段的端点。
- en: This is the beginning of a long recipe, where all the recipes are bound to form
    a complete chat app, but you can learn about GraphQL and AWS Amplify in the recipes
    without needing to code the whole chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个漫长的配方的开始，所有的配方都将形成一个完整的聊天应用程序，但您可以在不需要编写整个章节的情况下，在配方中学习有关GraphQL和AWS Amplify的知识。
- en: In this chapter, we will learn more about the AWS Amplify environment and GraphQL,
    and how we can add it to our application and make it available as a communication
    driver.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习更多关于AWS Amplify环境和GraphQL的知识，以及如何将其添加到我们的应用程序并使其可用作通信驱动程序。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Creating your AWS Amplify environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的AWS Amplify环境
- en: Creating your first GraphQL API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个GraphQL API
- en: Adding the GraphQL client to your application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将GraphQL客户端添加到您的应用程序
- en: Creating the AWS Amplify driver for your application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的应用程序创建AWS Amplify驱动程序
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using **Node.js**, **AWS Amplify**,and **Quasar
    Framework**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Node.js、AWS Amplify和Quasar Framework。
- en: 'Attention, Windows users! You need to install an NPM package called `windows-build-tools`
    to be able to install the required packages. To do it, open PowerShell as an administrator
    and execute the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Windows用户！您需要安装一个名为`windows-build-tools`的NPM包，以便能够安装所需的软件包。要执行此操作，请以管理员身份打开PowerShell并执行以下命令：
- en: '`> npm install -g windows-build-tools`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`'
- en: 'To install **Quasar Framework**, you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Quasar Framework，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install **AWS Amplify**, you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装AWS Amplify，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating your AWS Amplify environment
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的AWS Amplify环境
- en: With the help of AWS Amplify, we can create a backend environment that is ready
    in minutes, with a NoSQL database, GraphQL resolvers, and an online bucket for
    us to deploy our application to after the development.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 借助AWS Amplify的帮助，我们可以在几分钟内创建一个后端环境，其中包括NoSQL数据库、GraphQL解析器和一个在线存储桶，供我们在开发后部署我们的应用程序。
- en: To create the Vue application, we will be using the Quasar Framework. It's a
    Vue-based framework that provides all the tools, structures, and components needed
    to develop the application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建Vue应用程序，我们将使用Quasar Framework。这是一个基于Vue的框架，提供了开发应用程序所需的所有工具、结构和组件。
- en: In this recipe, we will learn how to create our AWS account, configure the AWS
    Amplify environment locally, and create our initial project with Quasar Framework.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何创建我们的AWS账户，在本地配置AWS Amplify环境，并使用Quasar Framework创建我们的初始项目。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@aws-amplify/cli`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@aws-amplify/cli`'
- en: '`@quasar/cli`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@quasar/cli`'
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will split our tasks in this recipe into four parts: creating an AWS account,
    configuring AWS Amplify, creating your Quasar project, and initializing the AWS
    Amplify project.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个教程的任务分成四个部分：创建AWS账户，配置AWS Amplify，创建您的Quasar项目，以及初始化AWS Amplify项目。
- en: Creating an AWS account
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建AWS账户
- en: 'Here we will learn how to create an account on the AWS portal, so we can get
    access to the AWS console:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将学习如何在AWS门户上创建一个账户，以便我们可以访问AWS控制台：
- en: Go to [https://aws.amazon.com](https://aws.amazon.com).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://aws.amazon.com](https://aws.amazon.com)。
- en: On the website, click on the Create an AWS Account button.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网站上，点击“创建AWS账户”按钮。
- en: Choose to create a Professional account or a Personal account (as we are going
    to be exploring the platform and developing example applications for ourselves,
    it's better to go with the Personal account).
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建一个“专业”账户或一个“个人”账户（因为我们将要探索平台并为自己开发示例应用程序，最好选择“个人”账户）。
- en: Now Amazon will ask for payment information in case your usage exceeds the Free
    Tier limits.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在亚马逊将要求您提供付款信息，以防您的使用超出了免费套餐限制。
- en: It's time to confirm your identity – you need to provide a valid phone number
    that Amazon will use to send you a PIN code that you need to input.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是确认您的身份的时候 - 您需要提供一个有效的电话号码，亚马逊将用它来发送您需要输入的PIN码。
- en: After you have received the PIN code, you will see a success screen and a Continue button.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在收到PIN码后，您将看到一个成功的屏幕和一个“继续”按钮。
- en: Now you need to select a plan for your account; you can choose the Basic Plan option
    for this recipe.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您需要为您的账户选择一个计划；您可以选择此教程的“基本计划”选项。
- en: Now you are done, and you can log in to your Amazon AWS account console.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经完成，可以登录到您的Amazon AWS账户控制台。
- en: Configuring AWS Amplify
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置AWS Amplify
- en: 'Let''s configure our local AWS Amplify environment to prepare us to start the
    development of our chat application:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置本地AWS Amplify环境，以准备开始开发我们的聊天应用程序：
- en: 'To set up AWS Amplify, you need to open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置AWS Amplify，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The browser will open, and you will need to log in to your AWS Console account.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器将打开，您需要登录到您的AWS控制台账户。
- en: After you have logged in, go back to the Terminal and press *Enter*. The CLI
    will ask you to select the server region where you want your application to be
    executed. It's recommended to run on `us-east-1`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，返回终端并按*Enter*。CLI将要求您选择您希望应用程序执行的服务器区域。建议在`us-east-1`上运行。
- en: After selecting the region, the CLI will ask you to define a username for **Identity
    and Access Management** (**IAM**). You can use the default one by pressing *Enter* or
    type the one that you want (however, it must be unique).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择区域后，CLI将要求您为**身份和访问管理**（**IAM**）定义用户名。您可以按*Enter*使用默认值，也可以输入您想要的值（但必须是唯一的）。
- en: 'Now the browser will open to define the user details on the user that you have
    designated. Click on the Next: Permissions button to go to the next screen.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在浏览器将打开以定义您指定的用户的用户详细信息。点击“下一步：权限”按钮转到下一个屏幕。
- en: 'Click on the *Next: Tags* button to go to the AWS tags screen. On this screen,
    click on the Next: Review button to review the settings you defined.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步：标签”按钮转到AWS标签屏幕。在这个屏幕上，点击“下一步：审核”按钮来审查您定义的设置。
- en: Now you can click on the Create user button to create the user and go to the
    **Access Key** screen.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以点击“创建用户”按钮来创建用户并转到**访问密钥**屏幕。
- en: Finally, on this screen, wait for the access key ID and secret access key to
    be available. Copy the access key ID on the browser, paste it into the Terminal,
    and press *Enter*.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在此屏幕上，等待访问密钥ID和秘密访问密钥可用。在浏览器中复制访问密钥ID，粘贴到终端中，然后按“Enter”键。
- en: After pasting the access key ID, you must go back to the browser, click on the Show link
    on the secret access key, copy the value, paste it into the Terminal, and press *Enter*.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粘贴访问密钥ID后，您必须返回浏览器，点击秘密访问密钥上的“显示”链接，复制该值，粘贴到终端中，然后按“Enter”键。
- en: Finally, you will need to define the AWS profile name (you can use the default
    by pressing *Enter*).
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您需要定义AWS配置文件名称（您可以通过按“Enter”键使用默认值）。
- en: You have now set up the AWS Amplify environment on your machine.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已在计算机上设置了AWS Amplify环境。
- en: Creating your Quasar project
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建您的Quasar项目
- en: 'Now we will create the Quasar Framework project that will be our chat application:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建Quasar Framework项目，这将是我们的聊天应用程序：
- en: 'To create your Quasar Framework application, you need to open the Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    command:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建您的Quasar Framework应用程序，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The Quasar CLI will ask for the project name; it needs to be a valid npm package
    name:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Quasar CLI将要求输入项目名称；它需要是有效的npm软件包名称：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The CLI will ask for the product name (commonly used for **Progressive Web
    Applications** (**PWAs**), hybrid mobile apps, and Electron applications):'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求输入产品名称（通常用于**渐进式Web应用程序**（**PWA**），混合移动应用程序和Electron应用程序）：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After that, the CLI will ask for the project description, and this will be
    used in the hybrid app and PWA:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，CLI将要求输入项目描述，这将用于混合应用程序和PWA：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now the CLI will ask for the author of the project. Usually, it''s the one
    that your npm or Git has configured:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在CLI将要求输入项目的作者。通常，这是您的npm或Git配置的作者：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you can choose a CSS preprocessor. We will choose `Stylus`(you can select
    the one that fits you the best):'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以选择CSS预处理器。我们将选择`Stylus`（您可以选择最适合您的预处理器）：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Quasar has two ways of importing the components, directives, and plugins into
    the build system. You can do it manually by declaring it in `quasar.conf.js`,
    or automatically by importing the components, directives, and plugins you used
    on your code. We will use the auto-import method:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Quasar有两种将组件、指令和插件导入构建系统的方法。您可以通过在`quasar.conf.js`中声明来手动执行，也可以通过自动导入您在代码中使用的组件、指令和插件来自动执行。我们将使用自动导入方法：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we have to choose the default features that will be added to the project;
    we will select `ESLint`, `Vuex`, `Axios`, and `Vue-i18n`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们必须选择要添加到项目中的默认功能；我们将选择`ESLint`、`Vuex`、`Axios`和`Vue-i18n`：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now you can select the `ESLint` preset that you want to use on your project;
    in this case, we will select `AirBnB`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以选择要在项目中使用的`ESLint`预设；在这种情况下，我们将选择`AirBnB`：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You will need to define a Cordova/Capacitor ID (even if you are not building
    a hybrid app, you can go with the default):'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要定义一个Cordova/Capacitor ID（即使您不构建混合应用程序，也可以使用默认值）：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, you can pick the package manager you want to run, and install the
    packages that you need to run your code:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您可以选择要运行的软件包管理器，并安装您需要运行代码的软件包：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Initializing the AWS Amplify project
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化AWS Amplify项目
- en: 'To initialize your AWS Amplify project, implement the following steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要初始化您的AWS Amplify项目，请执行以下步骤：
- en: 'Open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows),
    enter the project folder, and execute the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹，并执行以下命令：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The Amplify CLI will ask for the project name:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Amplify CLI将要求输入项目名称：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, you will need to define an environment for the current project that you
    are running on your machine:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要为您的机器上正在运行的当前项目定义一个环境：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now you can choose the default editor that you''ll use on your projects:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以选择您将在项目中使用的默认编辑器：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You have to decide what type of project will be hosted by AWS Amplify. In our
    case, this will be a JavaScript app:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要决定由AWS Amplify托管的项目类型。在我们的情况下，这将是一个JavaScript应用程序：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For the framework, as we are going to use Quasar Framework as the base, we
    need to choose `none` from the list of the presented frameworks:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于框架，因为我们将使用Quasar Framework作为基础，我们需要从所呈现的框架列表中选择“无”：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You will have to define the source path of the application; you can leave the
    Source Directory Path as the default value, `src`. Then press *Enter *to continue:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将需要定义应用程序的源路径；您可以将源目录路径保留为默认值“src”。然后按*Enter*继续：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For the distribution directory, as Quasar uses a different kind of path organization,
    we will need to define it as `dist/spa`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于分发目录，由于Quasar使用不同类型的路径组织，我们需要将其定义为“dist/spa”：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For the build command that AWS Amplify will use to run before deployment, we
    will define it as `quasar build`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Amplify将在部署之前使用的构建命令，我们将将其定义为“quasar build”：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'For the start command, we need to use Quasar''s built-in `quasar dev` command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于启动命令，我们需要使用Quasar内置的“quasar dev”命令：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'For Windows users, because of Amplify and WSL incompatibilities, you may need
    to define the start command as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，由于Amplify和WSL不兼容，您可能需要将启动命令定义如下：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now the CLI will ask if we want to use a local AWS profile for this configuration:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在CLI会询问我们是否要为此配置使用本地AWS配置文件：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We will choose the default profile that we created earlier:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择之前创建的默认配置文件：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'After the CLI has finished the initialization process, we will need to add
    hosting to the project. To do this, you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows), enter the project folder, and execute the
    following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI完成初始化过程后，我们需要向项目添加托管。为此，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹，并执行以下命令：
- en: '[PRE27]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The CLI will ask you for the hosting process of your application. Choose the
    `Hosting with Amplify Console`, and press *Enter* to continue:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI会询问您的应用程序的托管过程。选择“使用Amplify Console进行托管”，然后按*Enter*继续：
- en: '[PRE28]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then the CLI will ask you how the deployment process will occur; choose `Manual
    deployment`, and press *Enter* to continue:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后CLI会询问您部署过程将如何进行；选择“手动部署”，然后按*Enter*继续：
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When you have done everything, to finish this process you will need to publish
    it. Open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows), enter
    the project folder, and execute the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您完成所有操作后，要完成此过程，您需要发布它。打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹，并执行以下命令：
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You will be asked if you want to continue with publishing, which you can accept.
    After everything is done, the browser will open with the default Quasar Framework
    home page:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被问及是否要继续发布，您可以接受。完成所有操作后，浏览器将打开默认的Quasar Framework首页：
- en: '![](assets/bb0ed845-562a-45b8-bb24-0ced0a643194.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb0ed845-562a-45b8-bb24-0ced0a643194.png)'
- en: How it works...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: AWS Amplify is an all-in-one solution for web developers that offers a whole
    set of tools, from hosting the application to the backend development.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Amplify是Web开发人员的一体化解决方案，提供了一整套工具，从托管应用程序到后端开发。
- en: We were capable of building an application and putting it online quickly and
    effortlessly, encountering no problems with infrastructure at all.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够快速轻松地构建应用程序并将其上线，完全没有遇到基础设施方面的问题。
- en: In this recipe, we manage to create our AWS account and create our first AWS
    Amplify environment for development locally and ready for deployment on the web.
    Also, we were able to create our Quasar Framework project that will be used as
    the chat application and deploy it to the web in the AWS infrastructure to prepare
    for future releases of the application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们设法创建了我们的AWS账户，并为本地开发和网页部署准备好了我们的第一个AWS Amplify环境。此外，我们还能够创建了将用作聊天应用程序的Quasar
    Framework项目，并将其部署到AWS基础设施中，以准备应用程序的未来发布。
- en: See also
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about AWS Amplify at [https://aws.amazon.com/amplify/](https://aws.amazon.com/amplify/).
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://aws.amazon.com/amplify/](https://aws.amazon.com/amplify/)找到有关AWS
    Amplify的更多信息。
- en: You can find more information about the AWS Amplify framework at [https://docs.amplify.aws/](https://docs.amplify.aws/).
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.amplify.aws/](https://docs.amplify.aws/)找到有关AWS Amplify框架的更多信息。
- en: You can find more information about Quasar Framework at [https://quasar.dev/](https://quasar.dev/).
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://quasar.dev/](https://quasar.dev/)找到有关Quasar Framework的更多信息。
- en: Creating your first GraphQL API
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个GraphQL API
- en: AWS Amplify provides the possibility to have a GraphQL API out of the box with
    simple steps and lots of additional options including authentication, deployments,
    and environments. This provides us with the ability to develop an API fast with
    just a GraphQL SDL schema, and AWS Amplify will build the API, DynamoDB instance,
    and the proxy server for the connection.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Amplify提供了在简单步骤和许多附加选项（包括身份验证、部署和环境）的情况下，开箱即用地拥有GraphQL API的可能性。这使我们能够仅使用GraphQL
    SDL模式快速开发API，并且AWS Amplify将为连接构建API、DynamoDB实例和代理服务器。
- en: In this recipe, we will learn how to create a GraphQL API using AWS Amplify
    and add AWS Cognito functionality for authentication.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将学习如何使用AWS Amplify创建GraphQL API，并为身份验证添加AWS Cognito功能。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisites for this recipe are as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤的先决条件如下：
- en: The previous recipe's project
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上一个步骤的项目
- en: Node.js 12+
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: The Node.js global object that is required is `@aws-amplify/cli`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象是`@aws-amplify/cli`。
- en: 'To install AWS Amplify, you need to open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装AWS Amplify，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this recipe, we will use the project from the *Creating your AWS Amplify
    Environment* recipe. Please complete the instructions in that recipe first.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将使用*创建您的AWS Amplify环境*步骤中的项目。请先完成该步骤中的说明。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our GraphQL API, we will continue with the project that was created
    in the *Creating your AWS Amplify environment* recipe.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的GraphQL API，我们将继续使用在*创建您的AWS Amplify环境*步骤中创建的项目。
- en: 'This recipe will be divided into two parts: the creation of AWS Cognito and
    the creation of the GraphQL API.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤将分为两部分：创建AWS Cognito和创建GraphQL API。
- en: Creating the AWS Cognito authentication
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建AWS Cognito身份验证
- en: 'To add a layer of security to our API and application, we will use the AWS
    Cognito service. This will provide control over the users and authentication as
    a service:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给我们的API和应用程序增加一层安全性，我们将使用AWS Cognito服务。这将提供对用户和身份验证的控制作为服务：
- en: 'To initialize your AWS Cognito configuration, you need to open the Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows), enter the project folder,
    and execute the following command:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要初始化您的AWS Cognito配置，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹，并执行以下命令：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now the CLI will ask you to choose the type of configuration for the creation
    of the Cognito service. These are a selection of pre-made rules and configurations
    for the service. We will choose `Default configuration`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在CLI会要求您选择用于创建Cognito服务的配置类型。这些是预先制定的规则和配置的选择。我们将选择`默认配置`：
- en: '[PRE33]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'After that, you need to select how the users will be able to sign in; as we
    are building a chat app, we will choose `Email`:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您需要选择用户将如何登录；因为我们正在构建一个聊天应用程序，我们将选择`电子邮件`：
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'There is no need to choose more advanced settings for AWS Cognito. We can skip
    this step by selecting `No, I am done.`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于AWS Cognito，不需要选择更高级的设置。我们可以通过选择`不，我完成了。`来跳过这一步。
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, we need to push this configuration to the cloud. To do so, you need to
    open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows),
    enter the project folder, and execute the following command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要将这个配置推送到云端。为此，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹，并执行以下命令：
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You will be asked if you want to continue – type `y`, and the CLI will publish
    the configurations to the AWS Cognito cloud:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被问及是否要继续 - 输入`y`，CLI将发布配置到AWS Cognito云：
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Creating the GraphQL API
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建GraphQL API
- en: In this part, we will divide the instructions into two parts, first creating
    the GraphQL SDL schema and then creating the GraphQL API.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将把说明分为两部分，首先创建GraphQL SDL模式，然后创建GraphQL API。
- en: Creating the GraphQL SDL schema
  id: totrans-153
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建GraphQL SDL模式
- en: 'To create a GraphQL API with AWS Amplify, first, we need to create a GraphQL
    SDL schema. AWS Amplify will use the schema to generate the database and the resolvers
    for the API:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用AWS Amplify创建GraphQL API，首先需要创建一个GraphQL SDL模式。AWS Amplify将使用该模式生成API的数据库和解析器：
- en: Create a new file called `chatApi.graphql` in the `src` folder, and open it.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建一个名为`chatApi.graphql`的新文件，并打开它。
- en: 'Create our basic `S3Object` schema type, a simple model for managing the storage
    of files placed in AWS S3 buckets:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建我们基本的`S3Object`模式类型，这是一个简单的模型，用于管理放置在AWS S3存储桶中的文件的存储：
- en: '[PRE38]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then we will create our `type User`. This is like a database model, but with
    more rules attached. This `type` will have an `@auth` rule that only allows the
    owner, in this case, the `User`, to perform the `create`, `update`, and `delete` operations.
    After that, we will declare the `User` fields:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将创建我们的`用户类型`。这就像一个带有更多规则附加的数据库模型。这个`类型`将有一个`@auth`规则，只允许所有者，在这种情况下是`用户`，执行`创建`、`更新`和`删除`操作。之后，我们将声明`用户`字段：
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Our `User` will have a conversation with another user. We will create a `type
    Conversation`, and to secure this conversation, we will add an `@auth` rule to
    ensure that only the members of this conversation can see the messages exchanged
    between users. In the `messages` field, we will create a `@connection` with `type
    Message`, and in the associated field we will create a `@connection` with `type
    ConversationLink`:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`用户`将与另一个用户进行对话。我们将创建一个`对话类型`，为了保护这个对话，我们将添加一个`@auth`规则，以确保只有这个对话的成员可以看到用户之间交换的消息。在`messages`字段中，我们将创建一个与`消息类型`的`@connection`，并在关联字段中创建一个与`对话链接类型`的`@connection`：
- en: '[PRE40]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'For the `type Message`, we need to add an `@auth` decorator rule that allows
    only the owner to command it. We need to create a `@connection` decorator of the `author` field
    to `type User`, and a `@connection` decorator of the `conversation` field to `type
    Conversation`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`消息类型`，我们需要添加一个`@auth`装饰器规则，只允许所有者对其进行操作。我们需要创建一个`@connection`装饰器，将`author`字段连接到`用户类型`，并创建一个`@connection`装饰器，将`conversation`字段连接到`对话类型`：
- en: '[PRE41]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now we are linking the conversations together with `type ConversationLink`.
    This `type` requires the `user` field to have a `@connection` decorator to the ` User` and
    the `@connection` conversation to `type Conversation`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们正在使用`type ConversationLink`将对话链接在一起。这个`type`需要`user`字段具有`@connection`装饰器到`User`和`@connection`对话到`type
    Conversation`：
- en: '[PRE42]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Finally, we need to create a `type Subscription` to have an event handler inside
    the GraphQL API. The `Subscription` type listens for and handles changes on specific
    mutations, `createConversationLink`, and `createMessage`, and both will trigger
    an event inside the database:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要创建一个`type Subscription`来在GraphQL API内部具有事件处理程序。`Subscription`类型会监听并处理特定变化的特定变化，`createConversationLink`和`createMessage`，两者都会在数据库内触发事件：
- en: '[PRE43]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Creating the GraphQL API with AWS Amplify
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用AWS Amplify创建GraphQL API
- en: 'Here we will create our GraphQL API using the GraphQL schema that was created
    in the previous recipe, using the AWS Amplify API:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用AWS Amplify API使用先前创建的GraphQL模式来创建我们的GraphQL API：
- en: 'To initialize your AWS Amplify API configuration, you need to open the Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows), enter the project folder,
    and execute the following command:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要初始化您的AWS Amplify API配置，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹，并执行以下命令：
- en: '[PRE44]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Here the CLI will ask what type of API you want to create. We will choose `GraphQL`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，CLI将询问您要创建什么类型的API。我们将选择`GraphQL`：
- en: '[PRE45]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now the CLI will ask for the API name (which you can choose):'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在CLI将要求输入API名称（您可以选择）：
- en: '[PRE46]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Here we will select the authentication method that the API will use. As we
    will be using AWS Cognito, we need to select the `Amazon Cognito User Pool` option:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将选择API将使用的身份验证方法。由于我们将使用AWS Cognito，我们需要选择`Amazon Cognito User Pool`选项：
- en: '[PRE47]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then the CLI will ask if you want to configure more settings on the API; we
    will choose the `No, I am done.`option:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后CLI将询问您是否要在API上配置更多设置；我们将选择`No, I am done.`选项：
- en: '[PRE48]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now we will be asked if we have an annotated GraphQL schema; as we have written
    one before, we need to type `y`:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将被问及是否有注释的GraphQL模式；由于我们之前已经编写了一个，我们需要输入`y`：
- en: '[PRE49]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Here we need to type the path to the file we have just created, `./src/chatApi.graphql`:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们需要输入刚刚创建的文件的路径`./src/chatApi.graphql`：
- en: '[PRE50]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'After this is done, we need to push the configuration to AWS Amplify. To do
    this you need to open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows),
    enter the project folder, and execute the following command:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们需要将配置推送到AWS Amplify。要执行此操作，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹，并执行以下命令：
- en: '[PRE51]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'When asked if you want to continue, type `y`:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当询问是否要继续时，输入`y`：
- en: '[PRE52]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The CLI will ask if you''re going to generate the code for the newly created
    GraphQL API; type `y` again:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将询问您是否要为新创建的GraphQL API生成代码；再次输入`y`：
- en: '[PRE53]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Here you can choose in which language you want the CLI to create the communication
    files for use in the project. We will select `javascript`, but you can choose
    the one that fits your needs the most:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您可以选择CLI要使用的语言来创建项目中使用的通信文件。我们将选择`javascript`，但您可以选择最符合您需求的语言：
- en: '[PRE54]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The CLI will ask where to place the files that will be generated, and we will
    go with the default values:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将询问要放置将生成的文件的位置，我们将使用默认值：
- en: '[PRE55]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now the CLI will ask about the generation of the GraphQL operations. As we
    are creating our first GraphQL API, we will choose `y` so the CLI will create
    all the files for us:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在CLI将询问有关GraphQL操作的生成。由于我们正在创建我们的第一个GraphQL API，我们将选择`y`，因此CLI将为我们创建所有文件：
- en: '[PRE56]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Finally, we can define the maximum depth of the schema in the files, and we
    will go with the default value, `2`:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以定义文件中模式的最大深度，我们将使用默认值`2`：
- en: '[PRE57]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'When you have everything done, we need to publish the configuration to AWS
    Amplify. To do this you need to open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows), enter the project folder, and execute the following
    command:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你完成所有的事情后，我们需要将配置发布到AWS Amplify。要做到这一点，你需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹，并执行以下命令：
- en: '[PRE58]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How it works...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the process of creating a GraphQL API with AWS Amplify, we needed a pre-built
    schema that was used to generate the database and the endpoints. This schema is
    based on the GraphQL SDL language. Amplify has added more decorators to the SDL
    so we could have a broader range of possibilities in the development of the API.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建一个带有AWS Amplify的GraphQL API的过程中，我们需要一个预先构建的模式，用于生成数据库和端点。这个模式是基于GraphQL SDL语言的。Amplify已经在SDL中添加了更多的装饰符，这样我们就可以在API的开发中拥有更广泛的可能性。
- en: In the meantime, we needed to create an AWS Cognito user pool, to hold the users
    that will be registered on the application. This is done to manage and maintain
    the authentication layer outside of our application and is used as a service,
    giving the possibility to have many more features including two-factor authentication,
    required fields, and recovery modes.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我们需要创建一个AWS Cognito用户池，用于保存将在应用程序上注册的用户。这是为了在应用程序外部管理和维护身份验证层，并作为一个服务使用，可以提供更多功能，包括双因素身份验证、必填字段和恢复模式。
- en: Finally, after everything is done, we had our API published on AWS Amplify and
    ready for development, with a URL that can be used as a development environment.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在一切都完成之后，我们的API已经在AWS Amplify上发布，并准备好进行开发，具有可以用作开发环境的URL。
- en: See also
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about GraphQL SDL at [https://graphql.org/learn/schema/](https://graphql.org/learn/schema/).
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[https://graphql.org/learn/schema/](https://graphql.org/learn/schema/)找到更多关于GraphQL
    SDL的信息。
- en: You can find more information about the AWS Amplify API at [https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js](https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js).
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js](https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js)找到更多关于AWS
    Amplify API的信息。
- en: You can find more information about AWS Amplify authentication at [https://docs.amplify.aws/lib/auth/getting-started/q/platform/js](https://docs.amplify.aws/lib/auth/getting-started/q/platform/js).
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[https://docs.amplify.aws/lib/auth/getting-started/q/platform/js](https://docs.amplify.aws/lib/auth/getting-started/q/platform/js)找到更多关于AWS
    Amplify身份验证的信息。
- en: Adding the GraphQL client to your application
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将GraphQL客户端添加到你的应用程序
- en: Apollo Client is currently the best GraphQL client implementation in the JavaScript
    ecosystem. It has a large community behind it and has a big company supporting
    it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Apollo Client目前是JavaScript生态系统中最好的GraphQL客户端实现。它有一个庞大的社区支持，并得到了大公司的支持。
- en: Our implementation of the AWS Amplify GraphQL API uses Apollo Server on the
    backend, so the usage of Apollo Client will be a perfect match. AWS AppSync uses
    their implementation of Apollo as the client also, so we will still be using Apollo
    as a client as well, but not directly.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的AWS Amplify GraphQL API的实现在后端使用了Apollo Server，因此Apollo Client的使用将是一个完美的匹配。AWS
    AppSync也使用他们自己的Apollo实现作为客户端，所以我们仍然会使用Apollo作为客户端，但不是直接使用。
- en: In this recipe, we will learn how to add the GraphQL client to our application,
    along with how to connect to the AWS Amplify GraphQL server to execute queries.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何将GraphQL客户端添加到我们的应用程序中，以及如何连接到AWS Amplify GraphQL服务器来执行查询。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisite for this recipe is as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件如下：
- en: The previous recipe's project
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上一个配方的项目
- en: Node.js 12+
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@aws-amplify/cli`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@aws-amplify/cli`'
- en: '`@quasar/cli`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@quasar/cli`'
- en: In this recipe, we will use the project from the *Creating your first GraphQL
    API* recipe. Before following this recipe, please follow the steps in that previous
    recipe.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用*创建您的第一个GraphQL API*示例中的项目。在遵循本示例之前，请按照上一个示例中的步骤进行操作。
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will add the GraphQL client to our application using the Amplify client.
    Follow these steps to create the GraphQL driver:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Amplify客户端将GraphQL客户端添加到我们的应用程序中。按照以下步骤创建GraphQL驱动程序：
- en: 'To install the packages needed to use the GraphQL client, you need to open
    the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and execute the
    following command:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装使用GraphQL客户端所需的软件包，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE59]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Create a new file called `amplify.js` in the `boot` folder, and open it.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`boot`文件夹中创建一个名为`amplify.js`的新文件，并打开它。
- en: 'In this file, we will import the `aws-amplify` package and the `aws-exports.js` file
    that the AWS Amplify CLI created for us in the configuration process. We will
    configure Amplify with the configurations we have. In order for the Quasar boot
    file to work, we need to export a `default` empty function:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将导入`aws-amplify`包和AWS Amplify CLI在配置过程中为我们创建的`aws-exports.js`文件。我们将使用我们拥有的配置来配置Amplify。为了使Quasar引导文件起作用，我们需要导出一个`default`空函数：
- en: '[PRE60]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In the `quasar.conf.js` file in the `root` folder, we need to add new rules
    to the `webpack` bundler. To do it, locate the `extendWebpack` function. After
    the first line of the function creates two new rules to the bundler, the first
    rule will add the `graphql-loader` webpack loader and a second rule will allow
    the bundler to understand `.mjs` files:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`root`文件夹中的`quasar.conf.js`文件中，我们需要向`webpack`捆绑器添加新规则。要做到这一点，找到`extendWebpack`函数。在函数的第一行之后，创建两个新规则给捆绑器，第一个规则将添加`graphql-loader`webpack加载程序，第二个规则将允许捆绑器理解`.mjs`文件：
- en: '[PRE61]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Now, create a new file called `graphql.js` in the `src/driver` folder, and open
    it.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`src/driver`文件夹中创建一个名为`graphql.js`的新文件，并打开它。
- en: 'In this file, we need to import the `AWSAppSyncClient` from the `aws-appsync` package, `Auth` from
    the `aws-amplify` package, and `AwsExports` from the `aws-exports.js` file located
    in the `src` folder. Then we need to instantiate `AWSAppSyncClient` with the configurations
    of `aws-exports`, and export this instantiation of the client:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中，我们需要从`aws-appsync`包中导入`AWSAppSyncClient`，从`aws-amplify`包中导入`Auth`，并从`src`文件夹中的`aws-exports.js`文件中导入`AwsExports`。然后，我们需要使用`aws-exports`的配置实例化`AWSAppSyncClient`，并导出客户端的这个实例化：
- en: '[PRE62]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the `quasar.conf.js` file in the `root` folder, we need to add the newly
    created `amplify.js` file, located in the `boot` folder, to the boot sequence.
    To do it, locate the `boot` array, and add on the end the direction of the file
    inside of the `boot` folder as a string, without the extension. In our case, this
    will be `''amplify''`:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`quasar.conf.js`文件中的`root`文件夹中，我们需要将新创建的`amplify.js`文件添加到引导序列中，该文件位于`boot`文件夹中。要做到这一点，找到`boot`数组，并在末尾添加文件在`boot`文件夹中的路径作为字符串，不包括扩展名。在我们的情况下，这将是`'amplify'`：
- en: '[PRE63]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: How it works...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We added the `aws-amplify` package to our application in the global scope and
    made it available for use through an exported entry in the new `graphql.js` file.
    This made it possible to use `AWSAmplifyAppSync` in the application.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在全局范围内将`aws-amplify`包添加到我们的应用程序中，并通过新的`graphql.js`文件中的导出条目使其可用于使用。这使得在应用程序中可以使用`AWSAmplifyAppSync`。
- en: Using the Quasar Framework boot process, we were able to instantiate Amplify
    before the Vue application started rendering on screen.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Quasar Framework的引导过程，我们能够在Vue应用程序开始在屏幕上呈现之前实例化Amplify。
- en: See also
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about AWS Amplify AppSync at [https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js](https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js).
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js](https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js)找到有关AWS
    Amplify AppSync的更多信息。
- en: You can find more information about Quasar Framework boot files at [https://quasar.dev/quasar-cli/developing-ssr/writing-universal-code#Boot-Files](https://quasar.dev/quasar-cli/developing-ssr/writing-universal-code#Boot-Files).
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://quasar.dev/quasar-cli/developing-ssr/writing-universal-code#Boot-Files](https://quasar.dev/quasar-cli/developing-ssr/writing-universal-code#Boot-Files)找到有关Quasar
    Framework引导文件的更多信息。
- en: Creating the AWS Amplify driver for your application
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的应用程序创建AWS Amplify驱动程序
- en: To communicate with AWS Amplify services, we will need to use their SDKs. This
    process is repetitive and can be merged into a driver for each of the Amplify
    services we will be using.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与AWS Amplify服务进行通信，我们需要使用他们的SDK。这个过程是重复的，可以合并到我们将要使用的每个Amplify服务的驱动程序中。
- en: In this recipe, we will learn how to create communications drivers, and how
    to do it with AWS Amplify.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何创建通信驱动程序，以及如何使用AWS Amplify进行操作。
- en: Getting ready
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisites for this recipe are as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的先决条件如下：
- en: The previous recipe's project
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上一个示例的项目
- en: Node.js 12+
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@aws-amplify/cli`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@aws-amplify/cli'
- en: '`@quasar/cli`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@quasar/cli`'
- en: In this recipe, we will use the project from the *Adding the GraphQL Client
    to your application* recipe. Please complete the instructions in that recipe first.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用*将GraphQL客户端添加到您的应用程序*示例中的项目。请先完成该示例中的说明。
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will split it into three parts: the first will be for the
    AWS Storage driver, the second part will be for the Amplify Auth driver, and finally,
    we''ll see the creation of the Amplify AppSync instance.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将其分为三个部分：第一部分将用于AWS存储驱动程序，第二部分将用于Amplify Auth驱动程序，最后，我们将看到Amplify AppSync实例的创建。
- en: Creating the AWS Amplify Storage driver
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建AWS Amplify存储驱动程序
- en: To create the AWS Amplify Storage driver, we will need first to create the AWS
    Amplify Storage infrastructure and have it set up in our environment, after which
    we need to create the communication driver between the AWS Amplify Storage SDK
    and our application.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建AWS Amplify存储驱动程序，我们首先需要创建AWS Amplify存储基础设施，并在我们的环境中设置好，之后我们需要创建AWS Amplify存储SDK与我们的应用程序之间的通信驱动程序。
- en: Adding AWS Amplify Storage
  id: totrans-255
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加AWS Amplify存储
- en: 'In this part, we will add AWS S3 functionality to our Amplify services list.
    This is needed so we can save files on the AWS S3 cloud infrastructure:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将向我们的Amplify服务列表中添加AWS S3功能。这是必需的，这样我们就可以在AWS S3云基础设施上保存文件：
- en: 'First, we need to add AWS Storage to the project. To do so, you need to open
    the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows), enter
    the project folder and execute the following command:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要向项目添加AWS存储。为此，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹并执行以下命令：
- en: '[PRE64]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now we need to select what content will be uploaded. We need to choose `Content
    (Images, audio, video, etc.)`:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要选择将上传什么内容。我们需要选择`内容（图片、音频、视频等）`：
- en: '[PRE65]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'We need to add a name for the resource. We will call it `bucket`:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为资源添加一个名称。我们将其称为`bucket`：
- en: '[PRE66]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Now we need to provide an AWS S3 bucket name. We will call it `chatappbucket`:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要提供一个AWS S3存储桶名称。我们将其称为`chatappbucket`：
- en: '[PRE67]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Then we need to select who can manipulate the bucket files. As the application
    is going to be based on authorization only, we need to choose `Auth users only`:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要选择谁可以操作存储桶文件。由于应用程序将仅基于授权，我们需要选择`仅授权用户`：
- en: '[PRE68]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now you need to select the level of access the user has in the bucket:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您需要选择用户在存储桶中的访问级别：
- en: '[PRE69]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'When asked about creating custom Lambda Triggers, choose `n`:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被问及创建自定义Lambda触发器时，选择`n`：
- en: '[PRE70]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Finally, we need to push the changes to the cloud. To do so you need to open
    the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows), enter
    the project folder, and execute the following command:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要将更改推送到云端。为此，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹，并执行以下命令：
- en: '[PRE71]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'When you have everything done, we need to publish the configuration to AWS
    Amplify. To do so you need to open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows), enter the project folder, and execute the following
    command:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您完成所有操作后，我们需要将配置发布到AWS Amplify。为此，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），进入项目文件夹，并执行以下命令：
- en: '[PRE72]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Creating the Amplify Storage driver
  id: totrans-275
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建Amplify Storage驱动程序
- en: 'In this part, we will create the driver to communicate with Amplify Storage.
    This driver will handle file uploads in our application:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建与Amplify Storage通信的驱动程序。该驱动程序将处理我们应用程序中的文件上传：
- en: Create a new file called `bucket.js` in the `src/driver` folder and open it.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/driver`文件夹中创建一个名为`bucket.js`的新文件并打开它。
- en: 'Import the `Storage` class from the `aws-amplify` package, the `uid` function
    from `quasar`, and `AwsExports`:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`aws-amplify`包中导入`Storage`类，从`quasar`中导入`uid`函数，以及`AwsExports`：
- en: '[PRE73]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Create an asynchronous function called `uploadFile`, which receives three arguments: `file`, `name`,
    and `type`. The `name` argument has a default value of `uid()` and the `type` argument
    has a default value of `''image/png''`. In this function, we will call the `Storage.put` function,
    passing `name` and `file` as parameters, and as the third parameter we will pass
    a JavaScript object with the `contentType` property defined as the received `type`,
    and an `accept` property defined as `''**/**''`. After the upload is completed,
    we will return a JavaScript object with the properties of `bucket`, `region`,
    and `uploadedFile` destructed:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`uploadFile`的异步函数，它接收三个参数：`file`，`name`和`type`。`name`参数的默认值为`uid()`，`type`参数的默认值为`'image/png'`。在这个函数中，我们将调用`Storage.put`函数，传递`name`和`file`作为参数，作为第三个参数，我们将传递一个JavaScript对象，其中`contentType`属性定义为接收到的`type`，并且`accept`属性定义为`'**/**'`。上传完成后，我们将返回一个具有`bucket`，`region`和`uploadedFile`属性的JavaScript对象：
- en: '[PRE74]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Create an asynchronous function called `getFile` that receives the argument
    of `name` with the default value of an empty string. Inside of the function, we
    will return `Storage.get`, passing the `name` parameter and the option set to
    the `public` level:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getFile`的异步函数，它接收`name`参数，默认值为空字符串。在函数内部，我们将返回`Storage.get`，传递`name`参数和设置为`public`级别的选项：
- en: '[PRE75]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Finally, export a default JavaScript object and add the created functions,
    `uploadFile` and `getFile`, as the properties:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，导出一个默认的JavaScript对象，并将创建的函数`uploadFile`和`getFile`作为属性添加进去：
- en: '[PRE76]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Creating the Amplify Auth driver
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Amplify Auth驱动程序
- en: 'Now we will create the authentication driver. This driver is responsible for
    handling all the authentication requests on our application and fetching the users''
    information:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建认证驱动程序。该驱动程序负责处理应用程序中的所有认证请求并获取用户信息：
- en: Create a new file called `auth.js` in the `src/driver` folder and open it.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/driver`文件夹中创建一个名为`auth.js`的新文件并打开它。
- en: 'In the newly created file, import the `Auth` class from the `aws-amplify` package:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的文件中，从`aws-amplify`包中导入`Auth`类：
- en: '[PRE77]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Create a new asynchronous function called `signIn`. It will receive `email` and `password` as
    arguments, and the function will return the `Auth.signIn` function, passing `email` and `password` as
    parameters:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`signIn`的新异步函数。它将接收`email`和`password`作为参数，并且该函数将返回`Auth.signIn`函数，传递`email`和`password`作为参数：
- en: '[PRE78]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Create a new asynchronous function called `signUp`, which will receive `email` and `password` as
    arguments. The function will return the `Auth.signUp` function, passing as a parameter
    a JavaScript object with these properties: `username`, `password`, `attributes`,
    and `validationData`.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`signUp`的新异步函数，该函数将接收`email`和`password`作为参数。该函数将返回`Auth.signUp`函数，传递一个带有这些属性的JavaScript对象作为参数：`username`、`password`、`attributes`和`validationData`。
- en: The `username` property will be the `email` value that it received as an argument.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`username`属性将是作为参数接收的`email`值。'
- en: The `password` property will be the `password` value that it received as an
    argument.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`password`属性将是作为参数接收的`password`值。'
- en: 'The `attributes` property will be a JavaScript object with the `email` property,
    which will be the one received as the argument:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`attributes`属性将是一个带有`email`属性的JavaScript对象，该属性将作为参数接收：'
- en: '[PRE79]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Create a new asynchronous function called `validateUser`, which will receive `username` and `code` as
    arguments. The function waits for the response of the `Auth.confirmSignUp` function,
    passing `username` and `code` to that function as parameters, and returning `true` when
    it''s finished:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`validateUser`的新异步函数，该函数将接收`username`和`code`作为参数。该函数等待`Auth.confirmSignUp`函数的响应，将`username`和`code`作为参数传递给该函数，并在完成时返回`true`：
- en: '[PRE80]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Create a new asynchronous function called `resendValidationCode`, which will
    receive `username` as an argument. The function returns the `Auth.resendSignUp` function,
    passing `username` as a parameter:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`resendValidationCode`的新异步函数，该函数将接收`username`作为参数。该函数返回`Auth.resendSignUp`函数，将`username`作为参数：
- en: '[PRE81]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Create a new asynchronous function called `signOut`, which returns the `Auth.signOut` function:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`signOut`的新异步函数，该函数返回`Auth.signOut`函数：
- en: '[PRE82]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Create a new asynchronous function called `changePassword`, which will receive `oldPassword` and `newPassword` as
    arguments. The function waits to fetch the currently authenticated user, and returns
    the `Auth.changePassword` function, passing as parameters the fetched `user`, `oldPassword`,
    and `newPassword`:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`changePassword`的新异步函数，该函数将接收`oldPassword`和`newPassword`作为参数。该函数等待获取当前经过身份验证的用户，并返回`Auth.changePassword`函数，将获取的`user`、`oldPassword`和`newPassword`作为参数：
- en: '[PRE83]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Create a new asynchronous function called `getCurrentAuthUser`; the function
    will fetch the currently authenticated user and returns a JavaScript object with
    the properties of `id`, `email`, and  `username`:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getCurrentAuthUser`的新异步函数；该函数将获取当前经过身份验证的用户，并返回一个带有`id`、`email`和`username`属性的JavaScript对象：
- en: '[PRE84]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Creating the Amplify AppSync instance
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Amplify AppSync实例
- en: 'To communicate with the AWS Amplify API while authenticated, we need to create
    a new instance of the AWS Amplify AppSync API that has the user authentication
    information:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在经过身份验证的情况下与AWS Amplify API通信，我们需要创建一个新的AWS Amplify AppSync API实例，其中包含用户身份验证信息：
- en: Create a new file called `appsync.js` in the `src/driver` folder and open it.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/driver`文件夹中创建一个名为`appsync.js`的新文件并打开它。
- en: 'In the newly created file, import `Auth` and `API` from the `aws-amplify` package,
    the `GRAPHQL_AUTH_MODE` enum from the `@aws-amplify/api` package, and the AWS
    configurations:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的文件中，从`aws-amplify`包中导入`Auth`和`API`，从`@aws-amplify/api`包中导入`GRAPHQL_AUTH_MODE`枚举，以及AWS配置：
- en: '[PRE85]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Configure the API from the `aws-amplify` package by executing the `API.configure` function,
    passing as a parameter a JavaScript object, with the properties of `url`, `region`,
    and `auth`.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`API.configure`函数从`aws-amplify`包中配置API，传递一个JavaScript对象作为参数，其中包含`url`、`region`和`auth`的属性。
- en: In the `url` property, pass the configuration for the GraphQL endpoint URL.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在`url`属性中，传递GraphQL端点URL的配置。
- en: In the `region` property, pass the configuration for the AWS region that is
    currently in use.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在`region`属性中，传递当前正在使用的AWS区域的配置。
- en: In the `auth` property, we need to pass a JavaScript object with two properties, `type` and `jwtToken`.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在`auth`属性中，我们需要传递一个具有两个属性`type`和`jwtToken`的JavaScript对象。
- en: We need to set the `type` property as `GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS`.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`type`属性设置为`GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS`。
- en: 'In `jwtToken`, we will pass an asynchronous function that will return the token
    for the currently logged-in user:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在`jwtToken`中，我们将传递一个异步函数，该函数将返回当前登录用户的令牌：
- en: '[PRE86]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Finally, we will export the `API` as a constant named `AuthAPI`:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将`API`导出为名为`AuthAPI`的常量：
- en: '[PRE87]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: How it works...
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we learned how to separate the responsibilities of your application
    into drivers that can be reused in multiple areas without needing to rewrite the
    entire code. With this process, we were able to create a driver for Amplify Storage
    that could send files asynchronously, and those files were saved in our bucket
    on the AWS S3 servers.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们学习了如何将应用程序的责任分离为可以在多个领域重复使用而无需重写整个代码的驱动程序。通过这个过程，我们能够创建一个用于Amplify存储的驱动程序，可以异步发送文件，并且这些文件被保存在AWS
    S3服务器上的存储桶中。
- en: In our work on the Auth driver, we were able to create a driver that could manage
    the Amplify Authentication SDK and provide the information when needed and wrapped
    special functions to make it easier to execute tasks in our application.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们对Auth驱动程序的工作中，我们能够创建一个可以管理Amplify身份验证SDK并在需要时提供信息并封装特殊功能以使在我们的应用程序中执行任务更容易的驱动程序。
- en: Finally, in the Amplify AppSync API, we managed to instantiate the API connector
    with all the authentication headers that are needed so the application can be
    executed without any problem, and the user can have access to all the information
    when requested.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在Amplify AppSync API中，我们成功实例化了API连接器，并使用了所有需要的身份验证标头，以便应用程序可以在没有任何问题的情况下执行，并且用户可以在请求时访问所有信息。
- en: See also
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about AWS Amplify Storage at [https://docs.amplify.aws/lib/storage/getting-started/q/platform/js](https://docs.amplify.aws/lib/storage/getting-started/q/platform/js).
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://docs.amplify.aws/lib/storage/getting-started/q/platform/js](https://docs.amplify.aws/lib/storage/getting-started/q/platform/js)上查找有关AWS
    Amplify Storage的更多信息。
- en: Find more information about AWS Amplify Auth at [https://docs.amplify.aws/lib/auth/getting-started/q/platform/js](https://docs.amplify.aws/lib/auth/getting-started/q/platform/js).
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://docs.amplify.aws/lib/auth/getting-started/q/platform/js](https://docs.amplify.aws/lib/auth/getting-started/q/platform/js)上查找有关AWS
    Amplify Auth的更多信息。
- en: Find more information about AWS Amplify AppSync at[ https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js](https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js).
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js](https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js)上查找有关AWS
    Amplify AppSync的更多信息。
