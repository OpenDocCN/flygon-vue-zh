["```js\n> npm install -g @quasar/cli \n```", "```js\nexport default {\n  name: '',\n  props: {}, };\n```", "```js\nname: 'UsernameInput',\n```", "```js\nprops: {\n  value: {\n    type: String,\n    default: '',\n    required: false,\n  },\n},\n```", "```js\n<template>\n  <q-input\n  :value=\"value\"\n  :rules=\"[ val => (val && val.length > 5 || 'Please type a valid \n      Username')]\"\n  outlined\n  label=\"Your Username\"\n  lazy-rules\n  v-on=\"$listeners\"\n  /> </template>\n```", "```js\nexport default {\n  name: '',\n  props: {},\n  data: () => (), };\n```", "```js\nname: 'PasswordInput',\n```", "```js\nprops: {\n  value: {\n  type: String,\n  default: '',\n  required: false,\n  },\n  label: {\n  type: String,\n  default: 'Your password',\n  required: false,\n  }, }, \n```", "```js\ndata: () => ({\n  isPwd: true, }),\n```", "```js\n<template>\n  <q-input\n  :value=\"value\"\n  :type=\"isPwd ? 'password' : 'text'\"\n  :rules=\"[ val => val.length >= 8 || 'Your password need to have 8\n             or more characters', val => val !== null && val !== '' || \n              'Please type your password']\"\n  :hint=\" value.length < 8 ? 'Your password has a minimum of 8 \n             characters' : ''\"\n  :label=\"label\"\n  outlined\n  lazy-rules\n  v-on=\"$listeners\"\n  >\n  <template v-slot:append>\n    <q-icon\n      :name=\"isPwd ? 'visibility_off' : 'visibility'\"\n      class=\"cursor-pointer\"\n      @click=\"isPwd = !isPwd\"\n    />\n  </template>\n  </q-input> </template>\n```", "```js\nexport default {\n  name: '',\n  props: {},  }; \n```", "```js\nname: 'NameInput',\n```", "```js\nprops: {\n  value: {\n  type: String,\n  default: '',\n  required: false,\n  },  },\n```", "```js\n<template>\n  <q-input\n  :value=\"value\"\n  :rules=\"[ val => (val && val.length > 0\n    || 'Please type a valid Name')]\"\n  outlined\n  label=\"Your Name\"\n  lazy-rules\n  v-on=\"$listeners\"\n  /> </template>\n```", "```js\nexport default {\n  name: '',\n  props: {},\n methods: {}, }; \n```", "```js\nname: 'EmailInput',\n```", "```js\n    props: {\n      value: {\n      type: String,\n      default: '',\n      required: false,\n      },  },\n    ```", "```js\nmethods: {\n  validateEmail(email) {\n  const regex = /^(([^\\s\"(),.:;<>@[\\\\\\]]+(\\.[^\\s\"(),.:;\n     <>@[\\\\\\]]+)*)|(\".+\"))@((\\[(?:\\d{1,3}\\.){3}\\d{1,3}])|(([\\dA-Za-\n z\\-]+\\.)+[A-Za-z]{2,}))$/;\n  return regex.test(email);\n  }, }, \n```", "```js\n<template>\n  <q-input\n  :value=\"value\"\n  :rules=\"[ val => (val && val.length > 0 && validateEmail(val)\n    || 'Please type a valid E-mail')]\"\n  outlined\n  type=\"email\"\n  label=\"Your E-mail\"\n  lazy-rules\n  v-on=\"$listeners\"\n  /> </template>\n```", "```js\nimport { uid } from 'quasar';\nimport { uploadFile } from 'src/driver/bucket';\n```", "```js\nexport default {\n  name: '',\n  props: {},\n  data: () => ({})\n methods: {}, };\n```", "```js\nname: 'AvatarInput',\n```", "```js\nprops: {\n  value: {\n  type: Object,\n  required: false,\n  default: () => ({}),\n  }, }, \n```", "```js\ndata: () => ({\n  file: [],\n  type: '',\n  name: '',\n  s3file: {\n  key: '',\n  bucket: '',\n  region: '',\n  },\n  photoUrl: '',\n  canUpload: false, }),\n```", "```js\nasync uploadFile() {\n  try {\n  if (this.canUpload) {\n  const file = await uploadFile(this.file, this.name, \n         this.type);\n  this.s3file = file;\n  this.$emit('input', file);\n  this.canUpload = false;\n } } catch (err) {\n  console.error(err);\n } }, \n```", "```js\ngetFile($event) {\n  this.type = $event.type;\n  this.name = `${uid()}-${$event.name}`;\n  const that = this;\n  const reader = new FileReader();\n  reader.onload = ({ target }) => {\n  that.photoUrl = target.result;\n  that.canUpload = true;\n  };\n  reader.readAsDataURL(this.file); },\n```", "```js\n<q-file\n  v-model=\"file\"\n  outlined\n bottom-slots label=\"Your Avatar\"\n  class=\"q-pr-md\"\n  @input=\"getFile\" >\n</q-file>\n```", "```js\n<template\n  v-if=\"photoUrl\"\n  v-slot:before >\n <q-avatar>\n <img :src=\"photoUrl\">\n </q-avatar> </template>\n```", "```js\n<template v-slot:after>\n <q-btn\n  round\n dense flat icon=\"cloud_upload\"\n  @click=\"uploadFile\"\n  /> </template>\n```", "```js\nimport { uploadFile } from 'src/driver/bucket';   export default {\n  methods: {\n  async getAvatar(object, name) {\n  const baseUrl = 'http://placehold.jp/350/9c27b0/FFFFFF/600x600.png?text=';    if (object === null && !name) return `${baseUrl}%20`;    if (!object && name) return `${baseUrl}${name.split('').shift()}`;    return getFile(object.key);\n }, }, }; \n```", "```js\nimport { QImg } from 'quasar'; import getAvatar from 'src/mixins/getAvatar';   export default {\n  name: '',\n  props: {},\n  mixins: [],\n  async beforeMount() {},\n  data: () => ({}),\n  watch: {},\n  computed: {},\n  methods: {}, };\n```", "```js\nname: 'UsernameInput',\n```", "```js\nprops: {\n  avatarObject: {\n  type: Object,\n  required: false,\n  default: () => ({}),\n  },\n  name: {\n  type: String,\n  required: false,\n  default: '',\n  },\n  tag: {\n  type: String,\n  required: false,\n  default: 'q-img',\n  }, },\n```", "```js\nmixins: [getAvatar],\n```", "```js\ndata: () => ({\n  src: '', }),\n```", "```js\ncomputed: {\n  componentIs() {\n  return this.tag === 'q-img' ? QImg : 'img';\n  }, },\n```", "```js\nmethods: {\n  async updateSrc() {\n  this.src = await this.getAvatar(this.avatarObject, this.name);\n  }, },\n```", "```js\nasync beforeMount() {\n  await this.updateSrc(); },\n```", "```js\nwatch: {\n  avatarObject: {\n  async handler() {\n    await this.updateSrc();\n  },\n  deep: true,\n  },\n  name: {\n  async handler() {\n    await this.updateSrc();\n  },\n  }, },\n```", "```js\n<template>\n  <component\n  :src=\"src\"\n  :is=\"componentIs\"\n  spinner-color=\"primary\"\n  /> </template>\n```", "```js\n<script> export default {\n  name: 'BaseLayout', }; </script> \n```", "```js\n<q-layout view=\"hHh Lpr lff\"> </q-layout>\n```", "```js\n<q-header elevated> </q-header>\n```", "```js\n<q-toolbar>\n <q-toolbar-title>\n  Chat App\n  </q-toolbar-title> </q-toolbar>\n```", "```js\n<q-page-container>\n <router-view /> </q-page-container>\n```", "```js\nimport {signOut,} from 'src/driver/auth';\n```", "```js\nexport default {\n  name: 'ChatLayout',\n  methods: {   }, };\n```", "```js\nasync logOff() {\n  await signOut();\n  window.location.reload(); }\n```", "```js\n<q-layout view=\"hHh Lpr lff\"> </q-layout>\n```", "```js\n<q-header elevated> </q-header> \n```", "```js\n<q-toolbar>\n <q-toolbar-title>\n  Chat App\n  </q-toolbar-title> </q-toolbar>\n```", "```js\n<q-btn\n  dense\n  flat\n  round\n  replace\n  :icon=\"$route.meta.goBack ? 'keyboard_arrow_left' : 'person'\"\n  :to=\"$route.meta.goBack ? $route.meta.goBack : {name: 'Edit'}\" />\n```", "```js\n<q-btn\n  dense\n flat round icon=\"exit_to_app\"\n  @click=\"logOff\" /> \n```", "```js\n<q-page-container>\n <router-view /> </q-page-container>\n```"]