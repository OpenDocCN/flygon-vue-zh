- en: Creating Custom Application Components and Layouts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义应用程序组件和布局
- en: To start the development of our application, we will need to create the custom
    components and inputs that will be used by the entire application. These components
    will be created with a stateless approach.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们应用程序的开发，我们需要创建整个应用程序将使用的自定义组件和输入。这些组件将采用无状态的方法创建。
- en: We will develop the `UsernameInput` component, the `PasswordInput` component,
    the `EmailInput` component, and the `AvatarInput` component. We will also develop
    the base layout for the application pages and the chat layout, which will wrap
    the chat page.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发`UsernameInput`组件，`PasswordInput`组件，`EmailInput`组件和`AvatarInput`组件。我们还将开发应用程序页面和聊天布局的基本布局，它将包装聊天页面。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Creating custom inputs for the application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用程序创建自定义输入
- en: Creating the application layouts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用程序布局
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using **Node.js **and **Quasar Framework**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用**Node.js**和**Quasar Framework**。
- en: 'Attention, Windows users! You need to install an `npm` package called `windows-build-tools`
    to be able to install the required packages. To do it, open PowerShell as an administrator
    and execute the following command:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Windows用户！您需要安装一个名为`windows-build-tools`的`npm`包，以便能够安装所需的包。要做到这一点，以管理员身份打开PowerShell并执行以下命令：
- en: '`> npm install -g windows-build-tools`'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`'
- en: 'To install Quasar Framework, you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Quasar Framework，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating custom inputs for the application
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为应用程序创建自定义输入
- en: Creating an application requires the creation of lots of forms. All of those
    forms require inputs, and those inputs are likely to be repeated in the application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 创建应用程序需要创建大量的表单。所有这些表单都需要输入，这些输入很可能在应用程序中重复出现。
- en: In this recipe, we will create custom input forms that we will use in our application
    in almost every form.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建自定义输入表单，我们将在几乎每个表单中使用它们。
- en: The process of creating custom input forms helps the developer in terms of saving
    time for debugging, reusability of the code, and future improvements for the code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义输入表单的过程有助于开发人员节省调试时间，代码的可重用性和未来的改进。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisites for this recipe are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的先决条件如下：
- en: The last recipe project
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后的示例项目
- en: Node.js 12+
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@aws-amplify/cli`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@aws-amplify/cli`'
- en: '`@quasar/cli`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@quasar/cli`'
- en: To start our custom components, we will continue with the project that was created
    in [Chapter 3](6748f2ed-6fa0-4925-8a71-199269fae4ae.xhtml)*, Setting Up Our Chat
    App - AWS Amplify Environment and GraphQL*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的自定义组件，我们将继续使用在[第3章](6748f2ed-6fa0-4925-8a71-199269fae4ae.xhtml)*设置我们的聊天应用程序
    - AWS Amplify环境和GraphQL*中创建的项目。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For better reusability of the code, we will create separate components that
    will handle the customs forms on the application. In this case, we will create
    six components:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地重用代码，我们将创建单独的组件来处理应用程序上的自定义表单。在这种情况下，我们将创建六个组件：
- en: '`UsernameInput`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UsernameInput`'
- en: '`PasswordInput`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PasswordInput`'
- en: '`NameInput`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NameInput`'
- en: '`EmailInput`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmailInput`'
- en: '`AvatarInput`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvatarInput`'
- en: '`AvatarDisplay`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvatarDisplay`'
- en: So, let's start.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始吧。
- en: Creating the UsernameInput component
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建UsernameInput组件
- en: '`UsernameInput` will be responsible for handling the checking and validation
    of usernames, so we don''t need to re-write all the rules on each page where we
    need to use it.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`UsernameInput`将负责处理用户名的检查和验证，这样我们就不需要在每个需要使用它的页面上重新编写所有规则。'
- en: The single file component <script> section
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'Here we will create the `<script>` section of the `UsernameInput` component:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建`UsernameInput`组件的`<script>`部分：
- en: Create a new file called `UsernameInput.vue` in the `src/components` folder,
    and open it.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个名为`UsernameInput.vue`的新文件，并打开它。
- en: 'Create an `export default` JavaScript object with the `name` and `props` properties:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`name`和`props`属性的默认导出的JavaScript对象：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For the `name` property, define it as `"UsernameInput"`:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`name`属性，将其定义为`"UsernameInput"`：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For the `props` property, define it as a JavaScript object and add a new property
    called `value`, which will also be a JavaScript object with the `type`, `default`, and `required` properties. The `type` property
    needs to be defined as `String`, `default` as `''''`, and `required` as `false`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '对于`props`属性，将其定义为一个JavaScript对象，并添加一个名为`value`的新属性，它也将是一个具有`type`，`default`和`required`属性的JavaScript对象。`type`属性需要定义为`String`，`default`为`''''`，`required`为`false`： '
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The single file component <template> section
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'Here we will create the `<template>` section of the `UsernameInput` component:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建`UsernameInput`组件的`<template>`部分：
- en: In the `<template>` section, create a `QInput` component. Create two dynamic attributes, `value` and `rules`.
    Now, `value` will be bound to the `value` property, and the `rules` attribute
    will receive an array. The first item of the array is a function that will be executed
    to validate the input, and the second item is the message when there is an error.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，创建一个`QInput`组件。创建两个动态属性，`value`和`rules`。现在，`value`将绑定到`value`属性，`rules`属性将接收一个数组。数组的第一项是一个函数，用于验证输入，第二项是出现错误时的消息。
- en: Add the `outlined` and the `lazy-rules` attributes as `true`, and define the `label` attribute
    as `"Your Username"`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`outlined`和`lazy-rules`属性设置为`true`，并将`label`属性定义为`"Your Username"`。
- en: Finally, create event listeners for the events by creating a `v-on` directive
    with the `$listeners` Vue API as the value.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过创建一个`v-on`指令，使用`$listeners` Vue API作为值来为事件创建事件侦听器。
- en: 'After completing all the steps, your final code should be like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有步骤后，您的最终代码应该像这样：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is your component rendered:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现出来的样子：
- en: '![](assets/e6398356-c190-45f1-96fa-26d3c7d632a6.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e6398356-c190-45f1-96fa-26d3c7d632a6.png)'
- en: Creating a PasswordInput component
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个PasswordInput组件
- en: '`PasswordInput` will be a component that has a special logic to toggle the
    visibility of the password by clicking on a button. We will wrap this logic within
    this component, so we don''t need to port it over each time we use this component.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`PasswordInput`将是一个组件，具有特殊逻辑，通过单击按钮切换密码的可见性。我们将在这个组件中包装这个逻辑，这样每次使用这个组件时就不需要重新编写它。'
- en: The single file component <script> section
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'In this part, we will create the `<script>` section of the `PasswordInput` component:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建`PasswordInput`组件的`<script>`部分：
- en: Create a new file called `PasswordInput.vue` in the `components` folder, and
    open it.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`components`文件夹中创建一个名为`PasswordInput.vue`的新文件，并打开它。
- en: 'Create an export default JavaScript object with three properties, `name`, `props`, and `data`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个默认导出的JavaScript对象，具有三个属性，`name`，`props`和`data`：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For the `name` property, define the value as `"PasswordInput"`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`name`属性，将值定义为`"PasswordInput"`：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For the `props` property, add two properties, `value`, and `label`, both being
    JavaScript objects. Each should have three properties inside: `type`, `default`, and `required`. Set `value.type` as `String`, `value.default` as `**''''**`,
    and `value.required` as `false`. Then, set `label.type` as `String`, `label.default` as
    `''Your Password''`, and `label.required` as `false`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`props`属性，添加两个属性，`value`和`label`，都是JavaScript对象。每个对象内部应该有三个属性：`type`，`default`和`required`。将`value.type`设置为`String`，`value.default`设置为`''`，`value.required`设置为`false`。然后，将`label.type`设置为`String`，`label.default`设置为`'Your
    Password'`，`label.required`设置为`false`：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, in the `data` property, add a JavaScript object as a returned value,
    with the `isPwd` value set to `true`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`data`属性中，添加一个JavaScript对象作为返回值，其中`isPwd`值设置为`true`：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The single file component <template> section
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'Now we will create the `<template>` section of `PasswordInput`. Follow these
    instructions to achieve the correct input component:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建`PasswordInput`的`<template>`部分。按照以下说明来实现正确的输入组件：
- en: In the `<template>` section, create a `QInput` component, and add the `value`, `label`,
    and `rules` attributes as variables. `value` will be bound to the `value` property, `label` to
    the `label` property, and `rules` will receive an array of functions that will
    be executed to check for the basic validation of the form's input.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，创建一个`QInput`组件，并将`value`，`label`和`rules`属性添加为变量。`value`将绑定到`value`属性，`label`将绑定到`label`属性，`rules`将接收一个函数数组，用于执行对表单输入的基本验证。
- en: For the `type` attribute, define it is as a variable and set it as a ternary
    verification of `isPwd`, changing between `"password"` and `"text"`*.*
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`type`属性，将其定义为一个变量，并将其设置为对`isPwd`的三元验证，在`"password"`和`"text"`之间切换。
- en: Set the `outlined` and `lazy-rules` attributes as `true`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`outlined`和`lazy-rules`属性设置为`true`。
- en: Create a `hint` variable attribute and define it as a ternary operator, where
    it will check for the length of the current value if a minimum value size is matched;
    otherwise, it will display a message to the user.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`hint`变量属性，并将其定义为三元运算符，它将检查当前值的长度是否匹配最小值大小；否则，它将向用户显示一条消息。
- en: Then, create event listeners for the events by creating a `v-on` directive with
    the `$listeners` Vue API as the value.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过创建一个`v-on`指令并使用`$listeners`Vue API作为值来为事件创建事件侦听器。
- en: Inside the `QInput` template, we will add a children component that will take
    place on a named slot, `v-slot:append`, which will hold a `QIcon` component.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QInput`模板内部，我们将添加一个子组件，该组件将占据一个命名插槽`v-slot:append`，该插槽将容纳一个`QIcon`组件。
- en: For the `QIcon` component, define the `name` attribute to be reactive to the `isPwd` variable,
    so it will be `'visibility_off'` when `isPwd` is set to `true`, or `'visibility'` when `isPwd` is
    set to `false`. Define the `class` attribute as `"cursor-pointer"` so the mouse
    has the appearance of an actual mouse with `"hover hand icon"`, and on the `@click` event
    listener, we will set `isPwd` as the opposite of the current `isPwd`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`QIcon`组件，定义`name`属性以对`isPwd`变量进行响应，因此当`isPwd`设置为`true`时，它将是`'visibility_off'`，或者当`isPwd`设置为`false`时，它将是`'visibility'`。将`class`属性定义为`"cursor-pointer"`，以便鼠标具有实际鼠标的外观和`"hover
    hand icon"`，并在`@click`事件侦听器上，我们将设置`isPwd`为当前`isPwd`的相反值。
- en: 'After completing all the steps, your final code should be like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有步骤后，您的最终代码应该像这样：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is your component rendered:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现的方式：
- en: '![](assets/c6f0729d-0592-4f9b-b117-2ebad5254985.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c6f0729d-0592-4f9b-b117-2ebad5254985.png)'
- en: Creating the NameInput component
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建NameInput组件
- en: Of all the components we are creating here, the `NameInput` component is the
    most simple, with almost no changes to the behavior of the `QInput` component
    and just the addition of the validation rules and some personalization.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建的所有组件中，`NameInput`组件是最简单的，几乎没有改变`QInput`组件的行为，只是添加了验证规则和一些个性化。
- en: The single file component <script> section
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the `NameInput` component:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建`NameInput`组件的`<script>`部分：
- en: 'Create an export default JavaScript object with two properties, `name` and `props`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个默认导出的JavaScript对象，有两个属性：`name`和`props`：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `name` property, define the value as `''NameInput''`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`name`属性中，将值定义为`'NameInput'`：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `props` property, add a property, `value`, as a JavaScript object, with
    three properties inside: `type`, `default`, and `required`. Set `value.type` as `String`, `value.default` as `**''''**`,
    and `value.required` as `false`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`props`属性中，添加一个属性`value`，作为一个JavaScript对象，里面有三个属性：`type`，`default`和`required`。将`value.type`设置为`String`，`value.default`设置为`**''**`，`value.required`设置为`false`：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The single file component <template> section
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the `NameInput` component:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建`NameInput`组件的`<template>`部分：
- en: In the `<template>` section, create a `QInput` component, and add the `value` and `rules` attributes
    as variables. `value` will be bound to the `value` property, and `rules` will
    receive an array of functions that will be executed to check for basic validation
    of the input of the form.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，创建一个`QInput`组件，并添加`value`和`rules`属性作为变量。`value`将绑定到`value`属性，`rules`将接收一个函数数组，用于检查表单输入的基本验证。
- en: Add the `outlined` and `lazy-rules` attributes as `true`, and define the `label` attribute
    as `"Your Name"`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`outlined`和`lazy-rules`属性设置为`true`，并将`label`属性定义为`"Your Name"`。
- en: Finally, create event listeners for the events by creating a `v-on` directive
    with the `"$listeners"` Vue API as the value.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过创建一个`v-on`指令并将`"$listeners"` Vue API作为值来为事件创建事件监听器。
- en: 'After completing all the steps, your final code should be like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有步骤后，你的最终代码应该像这样：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is your component rendered:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的组件渲染结果：
- en: '![](assets/43ecd588-f672-498b-9372-34fc3df16edf.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/43ecd588-f672-498b-9372-34fc3df16edf.png)'
- en: Creating the EmailInput Component
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建EmailInput组件
- en: In the `EmailInput` component, we need to take special care regarding the processing
    of the rules validation, because we need to check whether the email that is being
    typed is a valid email address.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在`EmailInput`组件中，我们需要特别注意规则验证的处理，因为我们需要检查正在输入的电子邮件是否是有效的电子邮件地址。
- en: The single file component <script> section
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the `EmailInput` component:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建`EmailInput`组件的`<script>`部分：
- en: 'Create an export default JavaScript object with three properties: `name`, `props`, and `methods`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个默认导出的JavaScript对象，有三个属性：`name`，`props`和`methods`：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `name` property, define the value as `''EmailInput''`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`name`属性中，将值定义为`'EmailInput'`：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `props` property, add a property, `value`, as a JavaScript object, with
    three properties inside: `type`, `default` and `required`. Set the `value.type` as `String`, `value.default` as `**''**`,
    and `value.required` as `false`:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`props`属性中，添加一个属性`value`，作为一个JavaScript对象，里面有三个属性：`type`，`default`和`required`。将`value.type`设置为`String`，`value.default`设置为`**'**`，`value.required`设置为`false`：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'On the `methods` property, we need to add a new method called `validateEmail`,
    which receives an argument called `email`. This method will test the received
    argument through a regular expression to check whether it''s a valid expression
    and return the result:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性中，我们需要添加一个名为`validateEmail`的新方法，该方法接收一个名为`email`的参数。此方法将通过正则表达式测试接收到的参数，以检查它是否是有效的表达式，并返回结果：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The single file component <template> section
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'Here we will create the `<template>` section of the `EmailInput` component:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建`EmailInput`组件的`<template>`部分：
- en: In the `<template>` section, create a `QInput` component, and add as variables
    the `value` and `rules` attributes.`value` will be bound to the `value` property
    and `rules` will receive an array of functions that will be executed to check
    for basic validation of the input of the form.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，创建一个`QInput`组件，并将`value`和`rules`属性作为变量添加。`value`将绑定到`value`属性，`rules`将接收一个函数数组，用于执行基本验证表单输入的检查。
- en: Add the `outlined` and `lazy-rules` attributes as `true`, define the `label` attribute
    as `"Your E-Mail"`, and the `type` attribute as `"email"`*.*
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`outlined`和`lazy-rules`属性添加为`true`，将`label`属性定义为`"Your E-Mail"`，将`type`属性定义为`"email"`*.*
- en: Finally, create event listeners for the events by creating a `v-on` directive
    with the `"$listeners"` Vue API as the value.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过创建一个`v-on`指令并将`"$listeners"`作为值，为事件创建事件侦听器。
- en: 'After completing all the steps, your final code should be like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有步骤后，您的最终代码应该像这样：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is your component rendered:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现：
- en: '![](assets/20533ea7-b331-4aac-b6d5-2b4f2d0d8743.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/20533ea7-b331-4aac-b6d5-2b4f2d0d8743.png)
- en: Creating the AvatarInput component
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建AvatarInput组件
- en: For the `AvatarInput` component, we need to add the logic to use the driver
    of the AWS-Amplify Storage API. By doing this, we can upload files directly through
    the component, and make the logic and component more reusable through the application.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`AvatarInput`组件，我们需要添加使用`AWS-Amplify Storage`API驱动程序的逻辑。通过这样做，我们可以直接通过组件上传文件，并使逻辑和组件在整个应用程序中更具可重用性。
- en: The single file component <script> section
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the `AvatarInput` component:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建`AvatarInput`组件的`<script>`部分：
- en: 'Import `uid` from the `quasar` package and `uploadFile` from `''src/driver/bucket''`:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`quasar`包中导入`uid`和从`'src/driver/bucket'`中导入`uploadFile`：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create an export default JavaScript object with four properties, `name`, `props`, `data`, and `methods`:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个默认导出的JavaScript对象，具有四个属性，`name`，`props`，`data`和`methods`：
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `name` property, define the value as `"AvatarInput"`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`name`属性中，将值定义为`"AvatarInput"`：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the `props` property, add a property, `value`, as a JavaScript object, with
    three properties inside - `type`, `default`, and `required`. Set `value.type` as `Object`, `value.default` as
    a factory function returning a JavaScript object, and `value.required` as `false`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`props`属性中，添加一个属性`value`，作为JavaScript对象，内部有三个属性 - `type`，`default`和`required`。将`value.type`设置为`Object`，将`value.default`设置为返回JavaScript对象的工厂函数，将`value.required`设置为`false`：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `data` property, we need to add six new properties: `file`, `type`, `name`, `s3file`, `photoUrl`,
    and `canUpload`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性中，我们需要添加六个新属性：`file`，`type`，`name`，`s3file`，`photoUrl`和`canUpload`：
- en: The `file` property will be an array.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file`属性将是一个数组。'
- en: '`type`, `name`, and `photoUrl` will be strings.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`，`name`和`photoUrl`将是字符串。'
- en: The `canUpload` property will be a Boolean defined to `false`.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canUpload`属性将是一个布尔值，定义为`false`。'
- en: '`s3file` will be a JavaScript object with three properties, `key`, `bucket`,
    and `region`, all of them being strings:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s3file`将是一个具有三个属性的JavaScript对象，`key`，`bucket`和`region`，它们都是字符串：'
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'On the `methods` property, we need to add a new method called `uploadFile`.
    This method will check whether it can start the upload process, then call the `uploadFile` function,
    passing `this.file`, `this.name`, and `this.type` as parameters. After we receive
    the response from the upload function, we will use the result to define `this.s3File` and `$emit` and
    the event `''input''` with it. Finally, we will define `this.canUpload` as `false`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性上，我们需要添加一个名为`uploadFile`的新方法。这个方法将检查是否可以开始上传过程，然后调用`uploadFile`函数，传递`this.file`、`this.name`和`this.type`作为参数。在我们收到上传函数的响应后，我们将使用结果来定义`this.s3File`和`$emit`以及事件`'input'`。最后，我们将`this.canUpload`定义为`false`：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, create a method called `getFile` that receives `$event` as an argument. In
    the function, we will define `this.type` as `$event.type`, `this.name` as a concatenation
    of a `uid` generator function, and the name of the file. Then, we will create
    a listener for the `FileReader` instance that will set `that.photoURL` as a result
    of the reading, and `that.canUpload` as `true`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个名为`getFile`的方法，它接收`$event`作为参数。在函数中，我们将把`this.type`定义为`$event.type`，将`this.name`定义为`uid`生成函数和文件名的连接。然后，我们将为`FileReader`实例创建一个监听器，它将把`that.photoURL`设置为读取的结果，并将`that.canUpload`设置为`true`：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The single file component <template> section
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'Now it''s time to create the `<template>` section of the `AvatarInput` component:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建`AvatarInput`组件的`<template>`部分的时候了：
- en: 'Create a `QFile` component, with the `v-model` directive bound to the `file` data
    property. Define the `outlined` and `bottom-slots` attributes as `true`, and set
    the `label` attribute as `"Your Avatar"`. For the `class` attribute, set it as `"q-pr-md"`,
    and finally set the `@input` event listener to target the `getFile` method:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`QFile`组件，将`v-model`指令绑定到`file`数据属性。将`outlined`和`bottom-slots`属性定义为`true`，并将`label`属性设置为`"Your
    Avatar"`。对于`class`属性，将其设置为`"q-pr-md"`，最后将`@input`事件监听器设置为目标`getFile`方法：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Inside the `QFile` component, we will add a direct child that will take place
    on a named slot, `v-slot:before`, and will only be shown if there is any `photoUrl` in
    the data property. In this slot, we will add a `QAvatar` component with a child
    of an `HTML img` tag, with the `src` attribute bound to the `photoUrl` data property:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QFile`组件内部，我们将添加一个直接子组件，它将放置在一个命名为`v-slot:before`的插槽中，并且只有在数据属性中存在任何`photoUrl`时才会显示。在这个插槽中，我们将添加一个`QAvatar`组件，其子组件是一个`HTML
    img`标签，其中`src`属性绑定到`photoUrl`数据属性：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After the slot we created, we need to create another slot, now placed under
    the `v-slot:after` named slot, with a `QBtn` component inside of it. `QBtn` will
    have the following attributes: `round`, `dense`, `flat`, `icon` defined as `"cloud_upload"`,
    and the `@click` event listener bounded to the `uploadFile` method:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们创建的插槽之后，我们需要创建另一个插槽，现在放置在名为`v-slot:after`的插槽下面，里面有一个`QBtn`组件。`QBtn`将具有以下属性：`round`、`dense`、`flat`、`icon`定义为`"cloud_upload"`，并且`@click`事件监听器绑定到`uploadFile`方法：
- en: '[PRE28]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here is your component rendered:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件渲染结果：
- en: '![](assets/a28e22e8-4f2a-4a9e-aef7-9680c4f9e122.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a28e22e8-4f2a-4a9e-aef7-9680c4f9e122.png)'
- en: Creating the avatar mixin
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建avatar mixin
- en: 'Here we will create a simple mixin that will be used in the new conversation
    component and the contact page to display the user avatar, or the first letter
    of the username if there is no avatar defined:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个简单的mixin，它将用于在新的对话组件和联系人页面中显示用户头像，或者如果没有定义头像，则显示用户名的首字母：
- en: Create a new folder called `mixins` on the `src` folder and then create a file
    called `getAvatar.js`, and open it.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹下创建一个名为`mixins`的新文件夹，然后创建一个名为`getAvatar.js`的文件，并打开它。
- en: Import the `getFile` function from the `driver/bucket` file.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`driver/bucket`文件中导入`getFile`函数。
- en: 'Export a `default` JavaScript object with the `methods` property. Inside the `methods` property,
    create a new function called `getAvatar`. This function will receive two arguments, `object` and `name`.
    For this function, we will check whether the object is `null` and whether there
    is a name to show the initial letter of. If the JavaScript object has properties
    in it, we will return the result of the `getFile` function, passing the `key` property
    as the argument:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出一个带有`methods`属性的`default` JavaScript对象。在`methods`属性内部，创建一个名为`getAvatar`的新函数。此函数将接收两个参数，`object`和`name`。对于此函数，我们将检查对象是否为`null`，以及是否有一个名字来显示初始字母。如果JavaScript对象中有属性，我们将返回`getFile`函数的结果，将`key`属性作为参数传递：
- en: '[PRE29]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Creating the AvatarDisplay component
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建AvatarDisplay组件
- en: '`AvatarDisplay` will be responsible for handling the checking and validation
    of usernames, so we don''t need to re-write all the rules on each page where we
    need to use it.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`AvatarDisplay`将负责处理用户名的检查和验证，因此我们不需要在每个需要使用它的页面上重新编写所有规则。'
- en: The single file component <script> section
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'Here we will create the `<script>` section of the `AvatarDisplay` component:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建`AvatarDisplay`组件的`<script>`部分：
- en: Create a new file called `AvatarDisplay.vue` in the `components` folder, and
    open it.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`components`文件夹中创建一个名为`AvatarDisplay.vue`的新文件，并打开它。
- en: 'Create an `export default` JavaScript object with the following properties: `name`,
    `props`, `mixins`, `beforeMount`, `data`, `watch`, `computed`, and `methods`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有以下属性的`export default` JavaScript对象：`name`，`props`，`mixins`，`beforeMount`，`data`，`watch`，`computed`和`methods`：
- en: '[PRE30]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'For the `name` property, define it as `"AvatarDisplay"`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`name`属性，将其定义为`"AvatarDisplay"`：
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'For the `props` property, define it as a JavaScript object and add three new
    properties called `avatarObject`, `name`, and `tag`. The `avatarObject` property will
    be a JavaScript object with properties `type`, `default`, and `required`. The `name` and
    `tag` properties need to be defined as `String`, `default` as `''''`, and `required` as `false`.
    For the `tag` property, we will set the default property to `''q-img''`:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`props`属性，将其定义为JavaScript对象，并添加三个新属性，分别称为`avatarObject`，`name`和`tag`。`avatarObject`属性将是一个具有`type`，`default`和`required`属性的JavaScript对象。`name`和`tag`属性需要定义为`String`，`default`为`''`，`required`为`false`。对于`tag`属性，我们将将默认属性设置为`'q-img'`：
- en: '[PRE32]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For the `mixins` property, we will add to the array the imported `getAvatar`
    mixin:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`mixins`属性，我们将在数组中添加导入的`getAvatar` mixin：
- en: '[PRE33]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, in the `data`, return Javascript object, we will create a property called
    `src`, with the default value as `''''`:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`data`中返回JavaScript对象，我们将创建一个名为`src`的属性，其默认值为`''`：
- en: '[PRE34]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then for the `computed` property, create a new property called components,
    returning a ternary operator, checking whether the `tag` property is equal to
    `''q-img''`, and returning the imported `QImg` component from Quasar; if not,
    it returns the `''img''` tag:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后对于`computed`属性，创建一个名为components的新属性，返回一个三元运算符，检查`tag`属性是否等于`'q-img'`，并返回Quasar中导入的`QImg`组件；如果不是，则返回`'img'`标签：
- en: '[PRE35]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the `methods` property, create a new method called `updateSrc`. In this
    method, we will define `src` as the result of the `getAvatar` method. We pass
    as arguments of the function the `avatarObject` and `name` properties:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性中，创建一个名为`updateSrc`的新方法。在这个方法中，我们将`src`定义为`getAvatar`方法的结果。我们将函数的参数传递给`avatarObject`和`name`属性：
- en: '[PRE36]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'On the `beforeMount` life cycle hook, we will call the `updateSrc` method:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`beforeMount`生命周期钩子中，我们将调用`updateSrc`方法：
- en: '[PRE37]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Finally, for the `watch` property, create two properties, `avatarObject` and
    `name`. For the `avatarObject` property, define it as a Javascript object with
    two properties, `handler` and `deep`. In the `deep` property, define it as `true`,
    and on the `handler` property, define it as a function, calling the `updateSrc`
    method. Then on the `name` property, create a `handler` property defined as a
    function, calling the `updateSrc` method:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于`watch`属性，创建两个属性，`avatarObject`和`name`。对于`avatarObject`属性，将其定义为一个具有两个属性`handler`和`deep`的Javascript对象。在`deep`属性中，将其定义为`true`，在`handler`属性上，将其定义为调用`updateSrc`方法的函数。然后在`name`属性上，创建一个`handler`属性，定义为调用`updateSrc`方法的函数：
- en: '[PRE38]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The single file component <template> section
  id: totrans-180
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'Here we will create the `<template>` section of the `AvatarDisplay` component:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建`AvatarDisplay`组件的`<template>`部分：
- en: In the `<template>` section, create a `component` element. Create two dynamic attributes, `src` and `is`.
    Now, `src` will be bound to the data `src`, and the `is` attribute will be bound
    to the `componentIs` computed property. Finally, create a `spinner-color` attribute and
    define it as `'primary'`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，创建一个`component`元素。创建两个动态属性，`src`和`is`。现在，`src`将绑定到数据`src`，而`is`属性将绑定到`componentIs`计算属性。最后，创建一个`spinner-color`属性，并将其定义为`'primary'`。
- en: 'After completing all the steps, your final code should be like this:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有步骤后，您的最终代码应该像这样：
- en: '[PRE39]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we learned how to create custom components for our application,
    by wrapping components from Quasar Framework and adding custom logic on top of
    it.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们学习了如何通过包装Quasar Framework的组件并在其上添加自定义逻辑来为我们的应用程序创建自定义组件。
- en: This technique allows the development of unique components that can be reused
    in an application without the need to rewrite the logic to get it working.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术允许开发独特的组件，可以在应用程序中重复使用，而无需重写逻辑使其正常工作。
- en: For `Usernameinput` and `Nameinput`, we made a wrapper around the `QInput` component,
    adding validation rules and texts for easier development and reusability of the
    component, without adding more logic to it.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Usernameinput`和`Nameinput`，我们在`QInput`组件周围创建了一个包装器，添加了验证规则和文本，以便更轻松地开发和重用组件，而无需添加更多逻辑。
- en: In the `PasswordInput` component, we added logic to control the visibility of
    the password, which changes the type of the input, and customized the `QInput` component
    to have a special button to trigger the visibility control.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PasswordInput`组件中，我们添加了控制密码可见性的逻辑，该逻辑会更改输入的类型，并自定义了`QInput`组件，以便有一个特殊按钮来触发可见性控制。
- en: For `EmailInput`, we needed to create a custom validation rule based on a regular
    expression that checks whether the typed email was a valid email and makes it
    possible to prevent the user from typing invalid emails by accident.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`EmailInput`，我们需要基于正则表达式创建自定义验证规则，检查输入的电子邮件是否是有效的电子邮件，并防止用户意外输入无效的电子邮件。
- en: Finally, in `AvatarInput`, using the `QFile` component, we made a custom input
    that automatically uploads the file to AWS Amplify Storage when the file is read
    by the browser and returns the file URL to the application after the file is uploaded.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`AvatarInput`中，使用`QFile`组件，我们创建了一个自定义输入，当浏览器读取文件并将文件上传到AWS Amplify Storage时，自动上传文件，并在文件上传后将文件URL返回给应用程序。
- en: See also
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about the Quasar input component at [https://quasar.dev/vue-components/input](https://quasar.dev/vue-components/input).
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://quasar.dev/vue-components/input](https://quasar.dev/vue-components/input)找到有关Quasar输入组件的更多信息。
- en: Find more information about the Quasar file picker component at [https://quasar.dev/vue-components/file-picker](https://quasar.dev/vue-components/file-picker).
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://quasar.dev/vue-components/file-picker](https://quasar.dev/vue-components/file-picker)找到有关Quasar文件选择器组件的更多信息。
- en: Creating the application layouts
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序布局
- en: In our application, we will use a structure for `vue-router` that has a parent
    route, based on a layout component, and the final route, which is the page that
    we are trying to access.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们将使用一个基于布局组件的父路由的`vue-router`结构，以及我们正在尝试访问的页面的最终路由。
- en: This model improves the development of our application, as we can create responsibilities
    divided into parents and children on `vue-router`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式改进了我们应用程序的开发，因为我们可以在`vue-router`上创建父子责任划分。
- en: In this recipe, we will learn how to create custom layouts that will wrap our
    pages in the `vue-router` parent-child structure.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何创建自定义布局，将我们的页面包装在`vue-router`的父子结构中。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The prerequisites for this recipe are as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的先决条件如下：
- en: The last recipe project
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后的教程项目
- en: Node.js 12+
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@aws-amplify/cli`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@aws-amplify/cli`'
- en: '`@quasar/cli`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@quasar/cli`'
- en: To start our application custom layouts, we will continue with the project that
    was created in the *Creating custom inputs for the application *recipe.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的应用程序自定义布局，我们将继续使用在*为应用程序创建自定义输入*中创建的项目。
- en: How to do it...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: With our components ready, we can start the creation of the layouts that will
    be used for the user to sign in or sign up to the chat application or edit their
    information, and the Chat layout that will be used on the chat messages pages.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好我们的组件后，我们可以开始创建用于用户登录或注册到聊天应用程序或编辑其信息的布局，以及用于聊天消息页面的聊天布局。
- en: Creating the base layout
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建基本布局
- en: In our application, we will use a technique of a base layout. It will be like
    a wrapper for all the contents of the application. This layout will be applied
    where there are no custom changes in the execution of the layout.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们将使用一种基本布局的技术。它将成为应用程序所有内容的包装器。此布局将应用在布局执行中没有自定义更改的地方。
- en: The single file component <script> section
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the base layout:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建基本布局的<script>部分：
- en: Create a new file called `Base.vue` in the `layouts ` folder.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`layouts`文件夹中创建一个名为`Base.vue`的新文件。
- en: 'Create an `export default` instance with a JavaScript object, with the `name` property defined
    as `''BaseLayout''`:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用JavaScript对象创建一个`export default`实例，其中`name`属性定义为`'BaseLayout'`：
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The single file component <template> section
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'Here we will create the `<template>` section of the base layout:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建基本布局的<template>部分：
- en: 'Create a `QLayout` component with the `view` attribute defined as `"hHh Lpr
    lff"`:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`QLayout`组件，其中`view`属性定义为`"hHh Lpr lff"`：
- en: '[PRE41]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Inside the `QLayout` component, we need to add a `QHeader` component with an `elevated` attribute:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QLayout`组件内部，我们需要添加一个带有`elevated`属性的`QHeader`组件：
- en: '[PRE42]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the `QHeader` component, we will add a `QToolbar` component with a `QToolbarTitle` component
    as a child element, with a text as a slot place holder:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QHeader`组件中，我们将添加一个`QToolbar`组件，其中包含一个`QToolbarTitle`组件作为子元素，以文本作为插槽占位符：
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'After the `QHeader` component, create a `QPageContainer` component with a `RouterView` component
    as a direct child:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QHeader`组件之后，创建一个带有`RouterView`组件的`QPageContainer`组件作为直接子元素：
- en: '[PRE44]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Creating the chat layout
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建聊天布局
- en: For the authenticated pages of our application, we will use a different page
    layout that will have buttons for the user to log out, manage their users, and
    navigate through the application.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们应用程序的经过身份验证的页面，我们将使用不同的页面布局，其中将有按钮供用户注销、管理其用户并浏览应用程序。
- en: The single file component <script> section
  id: totrans-228
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'Let''s create the `<script>` section of the chat layout:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建聊天布局的<script>部分：
- en: Create a new file called `Chat.vue` in the `layouts` folder.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`layouts`文件夹中创建一个名为`Chat.vue`的新文件。
- en: 'Import the `singOut` function from `src/driver/auth.js`:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`src/driver/auth.js`中导入`signOut`函数：
- en: '[PRE45]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create an `export default` instance with a JavaScript object, including two
    properties: one property called `name` defined as `''ChatLayout''` and another
    property called `methods`:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`export default`实例，包括一个JavaScript对象，其中包括两个属性：一个名为`name`的属性，定义为`'ChatLayout'`，另一个名为`methods`的属性：
- en: '[PRE46]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In the `methods` property, add a new asynchronous function called `logOff`;
    in this function, we will execute the `singOut` function and reload the browser
    after it:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性中，添加一个名为`logOff`的新异步函数；在这个函数中，我们将执行`signOut`函数，并在其后重新加载浏览器：
- en: '[PRE47]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The single file component <template> section
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'Here we will create the `<template>` section of the chat layout:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建聊天布局的`<template>`部分：
- en: 'Create a `QLayout` component with the `view` attribute defined as `"hHh Lpr
    lff"`:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`view`属性定义为`"hHh Lpr lff"`的`QLayout`组件：
- en: '[PRE48]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Inside the `QLayout` component, we need to add a `QHeader` component with an `elevated` attribute:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QLayout`组件内部，我们需要添加一个带有`elevated`属性的`QHeader`组件：
- en: '[PRE49]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'To the `QHeader` component, we will add a `QToolbar` component with a `QToolbarTitle` component
    as a child element, with a text as a slot place holder:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`QHeader`组件，我们将添加一个`QToolbar`组件，其中包含一个`QToolbarTitle`组件作为子元素，文本作为插槽占位符：
- en: '[PRE50]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'For the `QToolbar` component, before the `QToolbarTitle` component, we will
    add a `QBtn` component with the `dense`, `flat`, and `round` attributes defined
    as `true`. In the `icon` attribute, we will add a ternary expression with a validation
    of `$route.meta.goBack`, to check whether it''s present, to show a *back* icon
    or a *person* icon. Finally, for the `to` attribute, we will do the same, but
    the values will be `$route.meta.goBack` or a JavaScript object, with the `name` property as `Edit`:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`QToolbar`组件，在`QToolbarTitle`组件之前，我们将添加一个带有`dense`、`flat`和`round`属性定义为`true`的`QBtn`组件。在`icon`属性中，我们将添加一个三元表达式，验证`$route.meta.goBack`是否存在，以显示*back*图标或*person*图标。最后，对于`to`属性，我们将做同样的操作，但值将是`$route.meta.goBack`或一个具有`name`属性为`Edit`的JavaScript对象。
- en: '[PRE51]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'After the `QToolbarTitle` component, we will add a `QBtn` component with the `dense`, `flat`,
    and `round` attributes defined as `true`. For the `icon` attribute, we will define
    it as `exit_to_app`, and for the `@click` directive, we will pass the `logOff` method:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QToolbarTitle`组件之后，我们将添加一个带有`dense`、`flat`和`round`属性的`QBtn`组件，这些属性被定义为`true`。对于`icon`属性，我们将定义为`exit_to_app`，对于`@click`指令，我们将传递`logOff`方法：
- en: '[PRE52]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'After the `QHeader` component, create a `QPageContainer` component with a `RouterView` component
    as a direct child:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QHeader`组件之后，创建一个带有`RouterView`组件作为直接子元素的`QPageContainer`组件：
- en: '[PRE53]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: How it works...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we learned how to create the layouts that we are going to use
    in our application. Those layouts are a wrapper for the pages that our application
    will have, making it easy to add common items such as menus, header items, and
    footers items when needed, without the need to edit each page file.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们学习了如何创建我们将在应用程序中使用的布局。这些布局是我们应用程序页面的包装器，使得在需要时可以轻松添加常见项目，如菜单、头部项目和页脚项目，而无需编辑每个页面文件。
- en: For both of the layouts created, we used common `QLayout`, `QHeader`, and `QToolbarTitle` components.
    Those components create the structure for the page with a layout container, header
    container, and a custom header toolbar.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 对于创建的两种布局，我们使用了常见的`QLayout`、`QHeader`和`QToolbarTitle`组件。这些组件创建了页面的结构，包括布局容器、头部容器和自定义头部工具栏。
- en: 'Finally, for the chat layout, we added two buttons to the header menu: a button
    that could be either a back button or a menu, depending on the parameter that
    was present in the route, and a sign-off button that the user could use to log
    off from the application.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于聊天布局，我们在页眉菜单中添加了两个按钮：一个按钮可以是返回按钮或菜单，具体取决于路由中是否存在该参数；另一个是注销按钮，用户可以用它来从应用程序中注销。
- en: See also
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about the Quasar Framework `QLayout` component at [https://quasar.dev/layout/layout](https://quasar.dev/layout/layout).
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Quasar Framework `QLayout`组件的更多信息，请访问[https://quasar.dev/layout/layout](https://quasar.dev/layout/layout)。
- en: Find more information about the Quasar Framework `QHeader` component at [https://quasar.dev/layout/header-and-footer](https://quasar.dev/layout/header-and-footer).
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Quasar Framework `QHeader`组件的更多信息，请访问[https://quasar.dev/layout/header-and-footer](https://quasar.dev/layout/header-and-footer)。
- en: Find more information about the Quasar Framework `QPage` component at [https://quasar.dev/layout/page](https://quasar.dev/layout/page).
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Quasar Framework `QPage`组件的更多信息，请访问[https://quasar.dev/layout/page](https://quasar.dev/layout/page)。
- en: Find more information about the Quasar Framework `QBtn` component at [https://quasar.dev/vue-components/button](https://quasar.dev/vue-components/button).
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Quasar Framework `QBtn`组件的更多信息，请访问[https://quasar.dev/vue-components/button](https://quasar.dev/vue-components/button)。
