["```js\n> npm install -g @quasar/cli\n```", "```js\n> npm install -g @aws-amplify/cli\n```", "```js\nexport function createState() {\n  return {\n  id: '',\n  username: '',\n  email: '',\n  name: '',\n  avatar: {\n  key: '',\n  bucket: '',\n  region: '',\n  },\n  password: '',\n  loading: false,\n  validated: false,\n  error: undefined,\n  }; }\n```", "```js\nexport default createState();\n```", "```js\nexport default {\n  CREATE_USER: 'CREATE_USER',   SET_USER_DATA: 'SET_USER_DATA',\n  CLEAR_USER: 'CLEAR_USER',\n  USER_VALIDATED: 'USER_VALIDATED',\n  LOADING: 'LOADING',\n  ERROR: 'ERROR', };\n```", "```js\nimport MT from './types';  import { createState } from './state';\n```", "```js\nfunction setLoading(state) {\n state.loading = true; }\n```", "```js\nfunction setError(state, error = new Error()) {\n state.error = error;\n  state.loading = false; }\n```", "```js\nfunction createUser(state, {\n id = '',\n  email = '',\n  password = '',\n  name = '',\n  username = '', }) {\n state.username = username;\n  state.email = email;\n  state.name = name;\n  state.id = id;\n  state.password = window.btoa(password);\n  state.loading = false; }\n```", "```js\nfunction validateUser(state) {\n state.validated = true;\n  delete state.password;\n  state.loading = false; }\n```", "```js\nfunction setUserData(state, {\n id = '',\n  email = '',\n  name = '',\n  username = '',\n  avatar = {\n  key: '',\n  bucket: '',\n  region: '',\n  }, }) {\n state.id = id;\n  state.email = email;\n  state.name = name;\n  state.username = username;\n  state.avatar = avatar || {\n  key: '',\n  bucket: '',\n  region: '',\n  };    delete state.password;    state.validated = true;\n  state.loading = false; }\n```", "```js\nfunction clearUser(state) {\n  const newState = createState();    Object.keys(state).forEach((key) => {\n state[key] = newState[key];\n  }); }\n```", "```js\nexport default {\n [MT.LOADING]: setLoading,\n  [MT.ERROR]: setError,\n  [MT.CREATE_USER]: createUser,\n  [MT.USER_VALIDATED]: validateUser,\n  [MT.SET_USER_DATA]: setUserData,\n  [MT.CLEAR_USER]: clearUser, };  \n```", "```js\nconst getUserId = (state) => state.id;\n```", "```js\nconst getUserEmail = (state) => state.email;\n```", "```js\nconst getUserUsername = (state) => state.username;\n```", "```js\nconst getUserAvatar = (state) => state.avatar;\n```", "```js\nconst getUser = (state) => ({\n  id: state.id,\n  name: state.name,\n  username: state.username,\n  avatar: state.avatar,\n  email: state.email, });\n```", "```js\nconst isLoading = (state) => state.loading;\n```", "```js\nconst hasError = (state) => state.error;\n```", "```js\nexport default {\n  getUserId,\n  getUserEmail,\n  getUserUsername,\n  getUserAvatar,\n  getUser,\n  isLoading,\n  hasError, };\n```", "```js\nimport { graphqlOperation } from 'aws-amplify';\nimport { getUser, listUsers } from 'src/graphql/queries';\nimport { createUser, updateUser } from 'src/graphql/mutations';\nimport { AuthAPI } from 'src/driver/appsync';\nimport {\n  signUp,\n  validateUser,\n  signIn,\n  getCurrentAuthUser,\n  changePassword,\n} from 'src/driver/auth';\nimport MT from './types';\n\n```", "```js\nasync function initialLogin({ commit }) {\n  try {\n  commit(MT.LOADING);    const AuthUser = await getCurrentAuthUser();    const { data } = await AuthAPI.graphql(graphqlOperation(getUser, {\n    id: AuthUser.username,\n  }));    commit(MT.SET_USER_DATA, data.getUser);    return Promise.resolve(AuthUser);\n  } catch (err) {\n  commit(MT.ERROR, err);\n  return Promise.reject(err);\n  } }\n```", "```js\nasync function signUpNewUser({ commit }, {\n  email = '',\n  name = '',\n  username = '',\n  password = '', }) {\n  try {\n  commit(MT.LOADING);    const userData = await signUp(email, password);    commit(MT.CREATE_USER, {\n    id: userData.userSub,\n    email,\n    password,\n    name,\n    username,\n  });    return Promise.resolve(userData);\n  } catch (err) {\n  commit(MT.ERROR, err);\n  return Promise.reject(err);\n  } }\n```", "```js\nasync function createNewUser({ commit, state }, code) {\n  try {\n  commit(MT.LOADING);\n  const {\n    email,\n    name,\n    username,\n    password,\n  } = state;\n  const userData = await validateUser(email, code);    await signIn(`${email}`, `${window.atob(password)}`);    const { id } = await getCurrentAuthUser();    await AuthAPI.graphql(graphqlOperation(\n    createUser,\n    {\n      input: {\n        id,\n        username,\n        email,\n        name,\n      },\n    },\n  ));    commit(MT.USER_VALIDATED);    return Promise.resolve(userData);\n  } catch (err) {\n  commit(MT.ERROR, err);\n  return Promise.reject(err);\n  } }\n```", "```js\nasync function signInUser({ commit, dispatch }, { email = '', password = '' }) {\n  try {\n  commit(MT.LOADING);    await signIn(`${email}`, `${password}`);    await dispatch('initialLogin');    return Promise.resolve(true);\n  } catch (err) {\n  commit(MT.ERROR);\n  return Promise.reject(err);\n  } }\n```", "```js\nasync function editUser({ commit, state }, {\n  username = '',\n  name = '',\n  avatar = {\n  key: '',\n  bucket: '',\n  region: '',\n  },\n  password = '',\n  newPassword = '', }) {\n  try {\n  commit(MT.LOADING);    const updateObject = {\n    ...{\n      name: state.name,\n      username: state.username,\n      avatar: state.avatar,\n    },\n    ...{\n      name,\n      username,\n      avatar,\n    },\n  };    const { data } = await AuthAPI.graphql(graphqlOperation(updateUser,\n    { input: { id: state.id, ...updateObject } }));    if (password && newPassword) {\n    await changePassword(password, newPassword);\n  }    commit(MT.SET_USER_DATA, data.updateUser);    return Promise.resolve(data.updateUser);\n  } catch (err) {\n  return Promise.reject(err);\n  } }\n```", "```js\nasync function listAllUsers() {\n  try {\n  const {\n    data: {\n      listUsers: {\n        items: usersList,\n      },\n    },\n  } = await AuthAPI.graphql(graphqlOperation(\n    listUsers,\n  ));    return Promise.resolve(usersList);\n  } catch (e) {\n  return Promise.reject(e);\n  } }\n```", "```js\nexport default {\n  initialLogin,\n  signUpNewUser,\n  createNewUser,\n  signInUser,\n  editUser,\n  listAllUsers, };\n```", "```js\nimport state from './state'; import actions from './actions'; import mutations from './mutations'; import getters from './getters';\n```", "```js\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations,\n  getters, };\n```", "```js\nimport Vue from 'vue'; import Vuex from 'vuex'; import user from './user';\n```", "```js\nexport default function (/* { ssrContext } */) {\n  const Store = new Vuex.Store({\n  modules: {\n  user,\n  },\n  strict: process.env.DEV,\n  });    return Store; }\n```", "```js\nframework: {\n ...\n  plugins: [\n  'Dialog',\n ],\n ...\n},\n```", "```js\nimport { mapActions, mapGetters } from 'vuex';\n```", "```js\nexport default {\n  name: 'Index',\n  components: {\n  },\n  data: () => ({   }),\n  computed: {   },\n  methods: {   }, }; \n```", "```js\ncomponents: {\n  PasswordInput: () => import('components/PasswordInput'),\n  EmailInput: () => import('components/EmailInput'), },\n```", "```js\ndata: () => ({\n  email: '',\n  password: '', }),\n```", "```js\ncomputed: {\n  ...mapGetters('user', [\n  'isLoading',\n  'getUserId',\n  ]), },\n```", "```js\nasync beforeMount() {\n  if (this.getUserId) {\n  await this.$router.replace({ name: 'Contacts' });\n  } }, \n```", "```js\nmethods: {\n  ...mapActions('user', [\n  'signInUser',\n  ]),\n  async onSubmit() {\n  try {\n    await this.signInUser({\n      email: this.email,\n      password: this.password,\n    });\n    await this.$router.push({ name: 'Contacts' });\n  } catch (e) {\n    this.$q.dialog({\n      message: e.message,\n    });\n  }\n  },\n  createAccount() {\n  this.$router.push({ name: 'SignUp' });\n  }, },\n```", "```js\n<q-page padding class=\"bg-grey-1 flex flex-center\">\n</q-page>\n```", "```js\n<q-card style=\"width: 350px\">  </q-card> \n```", "```js\n<q-card-section>\n  <h6 class=\"no-margin\">Chat Application</h6>  </q-card-section>\n```", "```js\n<q-card-section>\n <q-form\n  class=\"q-gutter-md\"\n  >\n <email-input\n  v-model.trim=\"email\"\n  />\n <password-input\n  v-model.trim=\"password\"\n  />\n </q-form> </q-card-section>\n```", "```js\n<q-card-actions align=\"right\">\n <q-btn\n  label=\"Create new account\"\n  color=\"primary\"\n  flat\n class=\"q-ml-sm\"\n  @click=\"createAccount\"\n  />\n <q-btn\n  label=\"Login\"\n  type=\"submit\"\n  color=\"primary\"\n  @click=\"onSubmit\"\n  /> </q-card-actions>\n```", "```js\n<q-inner-loading :showing=\"isLoading\">\n <q-spinner size=\"50px\" color=\"primary\"/> </q-inner-loading>\n```", "```js\n> quasar dev\n```", "```js\nimport { mapActions, mapGetters } from 'vuex';\n```", "```js\nexport default {\n  name: 'SignUp',\n components: {},  data: () => ({   }),\n  computed: {   },\n  methods: {   }, };\n```", "```js\ncomponents: {\n  PasswordInput: () => import('components/PasswordInput'),\n  EmailInput: () => import('components/EmailInput'),\n  UsernameInput: () => import('components/UsernameInput'),\n  NameInput: () => import('components/NameInput'), }, \n```", "```js\ndata: () => ({\n  name: '',\n  username: '',\n  email: '',\n  password: '', }),\n```", "```js\ncomputed: {\n  ...mapGetters('user', [\n  'isLoading',\n  ]), },\n```", "```js\nmethods: {\n  ...mapActions('user', [\n  'signUpNewUser',\n  ]),\n  async onSubmit() {\n  try {\n    await this.signUpNewUser({\n      name: this.name,\n      username: this.username,\n      email: this.email,\n      password: this.password,\n    });\n    await this.$router.replace({ name: 'Validate' });\n  } catch (e) {\n    this.$q.dialog({\n      message: e.message,\n    });\n  }\n  },\n  onReset() {\n  this.email = '';\n  this.password = '';\n  }, },\n```", "```js\n<q-page padding class=\"bg-grey-1 flex flex-center\">\n</q-page>\n```", "```js\n<q-card style=\"width: 350px\">  </q-card>\n```", "```js\n<q-card-section>\n <h6 class=\"no-margin\">Create a new Account</h6> </q-card-section> \n```", "```js\n<q-card-section>\n <q-form   class=\"q-gutter-md\"\n  >\n <name-input\n  v-model.trim=\"name\"\n  />\n <username-input\n  v-model.trim=\"username\"\n  />\n <email-input\n  v-model.trim=\"email\"\n  />\n <password-input\n  v-model.trim=\"password\"\n  />\n </q-form> </q-card-section>\n```", "```js\n<q-card-actions align=\"right\">\n <q-btn\n  label=\"Reset\"\n  type=\"reset\"\n  color=\"primary\"\n  flat\n class=\"q-ml-sm\"\n  @click=\"onReset\"\n  />\n <q-btn\n  label=\"Create\"\n  type=\"submit\"\n  color=\"primary\"\n  @click=\"onSubmit\"\n  /> </q-card-actions>\n```", "```js\n<q-inner-loading :showing=\"isLoading\">\n <q-spinner size=\"50px\" color=\"primary\"/> </q-inner-loading> \n```", "```js\n> quasar dev\n```", "```js\nimport { mapActions, mapGetters } from 'vuex';\nimport { resendValidationCode } from 'src/driver/auth';    \n```", "```js\nexport default {\n  name: 'Validate',   data: () => ({   }),\n  computed: {   },\n  methods: {   }, };\n```", "```js\ndata: () => ({\n  code: '', }),\n```", "```js\ncomputed: {\n  ...mapGetters('user', [\n  'isLoading',\n  'getUserEmail',\n ]), }, \n```", "```js\nmethods: {\n  ...mapActions('user', [\n  'createNewUser',\n  ]),\n  async onSubmit() {\n  try {\n    await this.createNewUser(this.code);\n    await this.$router.replace({ name: 'Index' });\n  } catch (e) {\n    console.error(e);\n    this.$q.dialog({\n      message: e.message,\n    });\n  }\n  },\n  async resendCode() {\n  await resendValidationCode(this.getUserEmail);\n  },\n  onReset() {\n  this.code = '';\n  }, },\n```", "```js\n<q-page padding class=\"bg-grey-1 flex flex-center\">\n</q-page>\n```", "```js\n<q-card style=\"width: 350px\">  </q-card>\n```", "```js\n<q-card-section>\n <h6 class=\"no-margin\">Validate new account</h6>\n <div class=\"text-subtitle2\">{{ getUserEmail }}</div> </q-card-section>\n```", "```js\n<q-card-section>\n <p>A validation code were sent to you E-mail.</p>\n <p>Please enter it to validate your new account.</p> </q-card-section>\n```", "```js\n<q-card-section>\n <q-form\n  class=\"q-gutter-md\"\n  >\n <q-input\n  v-model.trim=\"code\"\n  :rules=\"[ val => val && val.length > 0\n  || 'Please type the validation code']\"\n  outlined\n label=\"Validation Code\"\n  lazy-rules\n  />\n </q-form> </q-card-section> \n```", "```js\n<q-card-actions align=\"right\">\n <q-btn\n  label=\"Reset\"\n  type=\"reset\"\n  color=\"primary\"\n  flat\n class=\"q-ml-sm\"\n  />\n <q-btn\n  flat\n label=\"Re-send code\"\n  color=\"secondary\"\n  class=\"q-ml-sm\"\n  @click=\"resendCode\"\n  />\n <q-btn\n  label=\"Validate\"\n  type=\"submit\"\n  color=\"primary\"\n  @click=\"onSubmit\"\n  /> </q-card-actions>\n```", "```js\n<q-inner-loading :showing=\"isLoading\">\n <q-spinner size=\"50px\" color=\"primary\"/> </q-inner-loading>\n```", "```js\n> quasar dev \n```", "```js\nimport { mapActions, mapGetters } from 'vuex';\n```", "```js\nexport default {\n  name: 'EditUser',\n  components: {},   data: () => ({   }),\n  created() {},\n  computed: {   },\n  methods: {   }, };\n```", "```js\ncomponents: {\n  AvatarInput: () => import('/components/AvatarInput'),\n  PasswordInput: () => import('components/PasswordInput'),\n  UsernameInput: () => import('components/UsernameInput'),\n  NameInput: () => import('components/NameInput'), },\n```", "```js\ndata: () => ({\n  name: '',\n  username: '',\n  avatar: '',\n  password: '',\n  newPassword: '', }), \n```", "```js\ncreated() {\n  this.name = this.getUser.name;\n  this.username = this.getUser.username;\n  this.avatar = this.getUser.avatar; },\n```", "```js\ncomputed: {\n  ...mapGetters('user', [\n  'getUser',\n  'isLoading',\n ]), },\n```", "```js\nmethods: {\n  ...mapActions('user', [\n  'editUser',\n  ]),\n  async onSubmit() {\n  try {\n  await this.$refs.avatar.uploadFile();    await this.editUser({\n  name: this.name,\n  avatar: this.$refs.avatar.s3file,\n  username: this.username,\n  password: this.password,\n  newPassword: this.newPassword,\n  });   await this.$router.replace({ name: 'Contacts' });\n  } catch (e) {\n  this.$q.dialog({\n  message: e.message,\n  });\n  }\n },\n  onReset() {\n  this.name = this.getUser.name;\n  this.username = this.getUser.username;   this.password = '';\n  this.newPassword = '';\n  }, },\n```", "```js\n<q-page padding class=\"bg-grey-1 flex flex-center\">\n</q-page>\n```", "```js\n<q-card style=\"width: 350px\">  </q-card>\n```", "```js\n<q-card-section>\n <h6 class=\"no-margin\">Edit user account</h6> </q-card-section> \n```", "```js\n<q-card-section>\n <q-form\n  class=\"q-gutter-md\"\n  >\n <avatar-input\n  v-model=\"avatar\"\n  ref=\"avatar\"\n  />\n <name-input\n  v-model.trim=\"name\"\n  />\n <username-input\n  v-model.trim=\"username\"\n  />\n <q-separator/>\n <password-input\n  v-model.trim=\"password\"\n  label=\"Your old password\"\n  />\n <password-input\n  v-model.trim=\"newPassword\"\n  label=\"Your new password\"\n  />\n </q-form> </q-card-section> \n```", "```js\n<q-card-actions align=\"right\">\n <q-btn\n  label=\"Reset\"\n  type=\"reset\"\n  color=\"primary\"\n  flat\n class=\"q-ml-sm\"\n  @click=\"onReset\"\n  />\n <q-btn\n  label=\"Update\"\n  type=\"submit\"\n  color=\"primary\"\n  @click=\"onSubmit\"\n  /> </q-card-actions> \n```", "```js\n<q-inner-loading :showing=\"isLoading\">\n <q-spinner size=\"50px\" color=\"primary\"/> </q-inner-loading>\n```", "```js\n> quasar dev \n```", "```js\nconst routes = [];\n```", "```js\n{\n  path: '/',\n  component: () => import('layouts/Base.vue'),\n  children: [\n  {\n    path: '',\n    name: 'Index',\n    meta: {\n      authenticated: false,\n    },\n    component: () => import('pages/Index.vue'),\n  },\n  ], },\n```", "```js\n<template>\n  <div />\n</template>\n<script>\nexport default {\n  name: 'PlaceholderPage',\n};\n</script>\n```", "```js\n{\n  path: '/chat',\n  component: () => import('layouts/Chat.vue'),\n  children: [\n  {\n    path: 'contacts',\n    name: 'Contacts',\n    component: () => import('pages/Contacts.vue'),\n  },\n  {\n    path: 'messages/:id/:name',\n    name: 'Messages',\n    meta: {\n      authenticated: true,\n      goBack: {\n        name: 'Contacts',\n      },\n    },\n    component: () => import('pages/Messages.vue'),\n  },\n  ], },\n```", "```js\n{\n  path: '/user',\n  component: () => import('layouts/Chat.vue'),\n  children: [\n  {\n    path: '',\n    alias: 'edit',\n    name: 'Edit',\n    meta: {\n      authenticated: true,\n      goBack: {\n        name: 'Contacts',\n      },\n    },\n    component: () => import('pages/Edit.vue'),\n  },\n  ], },\n```", "```js\n{\n  path: '/register',\n  component: () => import('layouts/Base.vue'),\n  children: [\n  {\n    path: '',\n    alias: 'sign-up',\n    name: 'SignUp',\n    meta: {\n      authenticated: false,\n    },\n    component: () => import('pages/SignUp.vue'),\n  },\n  {\n    path: 'validate',\n    name: 'Validate',\n    meta: {\n      authenticated: false,\n    },\n    component: () => import('pages/Validate.vue'),\n  },\n  ], },\n```", "```js\nexport default async ({ app }) => {\n  const { store } = app;    try {\n  if (!store.getters['user/getUserId']) {\n    await store.dispatch('user/initialLogin');\n  }\n  } catch {\n  await app.router.replace({ name: 'Index' });\n  } };  \n```", "```js\nboot: [\n  'amplify',\n  'axios',\n  'routeGuard', ],\n```", "```js\n> quasar dev\n```"]