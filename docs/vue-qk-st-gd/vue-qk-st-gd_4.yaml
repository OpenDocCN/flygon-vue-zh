- en: Filters and Mixins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器和混合器
- en: In this chapter, we will show how we can use filters to change what gets rendered
    on the screen without changing the underlying data. We'll also cover mixins, a
    practical way to extend components and adhere to the DRY rule of programming.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将展示如何使用过滤器来更改屏幕上呈现的内容，而不更改基础数据。我们还将介绍混合器，这是一种扩展组件并遵守编程的DRY规则的实用方法。
- en: 'More specifically, in this chapter, we will discuss the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地，在本章中，我们将讨论以下内容：
- en: 'Using filters:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用过滤器：
- en: Working with global and local filters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用全局和本地过滤器
- en: Replacing conditional directives with filters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用过滤器替换条件指令
- en: Chaining filters together
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接过滤器
- en: 'Working with mixins:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用混合器：
- en: Avoiding code duplication inside mixin methods
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在混合器方法中重复代码
- en: Using data option to add more functionality to our mixins
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据选项为我们的混合器添加更多功能
- en: Employing life cycle hooks in mixins
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在混合器中使用生命周期钩子
- en: Using filters
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过滤器
- en: A filter is just a function. It takes some data (passed in as an argument to
    the filter function), and performs some simple operations on that data. The result
    of the operations performed is returned from the filter function and displayed
    in the appropriate place in the app. It's important to note that filters do not
    affect the underlying data; they only affect the way that data is displayed on
    the screen.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器只是一个函数。它接受一些数据（作为参数传递给过滤器函数），并对该数据执行一些简单的操作。执行的操作的结果从过滤器函数返回，并显示在应用程序中的适当位置。重要的是要注意，过滤器不会影响基础数据；它们只会影响数据在屏幕上的显示方式。
- en: 'Just like components, filters too can be registered as either global or local.
    The syntax for registering a global filter is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就像组件一样，过滤器也可以注册为全局或本地。注册全局过滤器的语法如下：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Besides global registration, we can also register a filter locally, like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了全局注册，我们还可以像这样在本地注册过滤器：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we can see here, in case of local registration, filters are added as an option
    to a Vue component.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这里所看到的，在本地注册的情况下，过滤器被添加为Vue组件的选项。
- en: An example of a filter that rounds up student grades
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个将学生成绩四舍五入的过滤器示例
- en: Let's say that we have a friend who is a professor, and they need some help
    with their students' tests. A test that students take is set up in such a way
    that it always produces a score in the form of a decimal number. The range of
    points a student can get on that test is between 0 and 100.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个朋友是教授，他们需要一些帮助来处理他们学生的测试。学生参加的测试总是以小数形式产生分数。学生可以在该测试中获得的分数范围在0到100之间。
- en: Being the good friend that we are, we will make a simple Vue app with a filter
    that rounds up decimal scores to full numbers. We will also err on the side of
    the student, meaning we will always round up the result.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们的好朋友，我们将制作一个简单的Vue应用程序，其中包含一个将小数分数四舍五入为整数的过滤器。我们还会偏向于学生，这意味着我们将始终将结果四舍五入。
- en: The code for this example is available at [https://codepen.io/AjdinImsirovic/pen/MqBNBR](https://codepen.io/AjdinImsirovic/pen/MqBNBR).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码可在[https://codepen.io/AjdinImsirovic/pen/MqBNBR](https://codepen.io/AjdinImsirovic/pen/MqBNBR)上找到。
- en: 'The function for our filter is going to be very simple: it will take in a float
    and return a rounded up integer based on the received float. The filter function
    will be called `pointsRoundedUp`, and it will look like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的过滤器函数将非常简单：它将接受一个浮点数，并根据接收到的浮点数返回一个四舍五入的整数。过滤器函数将被称为`pointsRoundedUp`，并且看起来像这样：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Hence our `pointsRoundedUp` function takes in the `points` instance from our
    app's `data()` function, and returns those `points` instance with JavaScript's
    built-in `parseFloat()` and `Math.ceil()` functions called on the `points` value.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的`pointsRoundedUp`函数接受来自应用程序`data()`函数的`points`实例，并使用JavaScript的内置`parseFloat()`和`Math.ceil()`函数调用`points`值返回这些`points`实例。
- en: 'To use a filter in our HTML, we employ the following syntax:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的HTML中使用过滤器时，我们采用以下语法：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `points` value is the actual data stored in the app. `pointsRoundedUp` is
    the filter that we use to format the data we receive from our Vue component's
    data option.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`points`值是应用程序中存储的实际数据。`pointsRoundedUp`是我们用来格式化从Vue组件的数据选项接收到的数据的过滤器。'
- en: 'Generally, we could say that the underlying logic of all filters is as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们可以说所有过滤器的基本逻辑如下：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This general principle could be read like this: to format the data that gets
    returned, we follow it up with a pipe symbol (`|`) and then we call a specific
    filter on that data.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一般原则可以这样阅读：为了格式化返回的数据，我们用管道符号(`|`)跟着调用特定的过滤器。
- en: 'Let''s examine the full code of our app. The HTML will be as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下我们应用程序的完整代码。HTML将如下所示：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The JS will be simple too:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: JS也将很简单：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The app will output the following on the screen:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将在屏幕上输出以下内容：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The app is now complete.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现在已经完成。
- en: 'However, after some time, our friend asks us for another favor: to calculate
    the student''s grade based on the points. Initially, we realize that it will be
    just a tiny calculation, which we can simply fit into conditional directives.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，过了一段时间，我们的朋友又向我们请求另一个帮助：根据分数计算学生的等级。最初，我们意识到这只是一个小小的计算，我们可以简单地将其放入条件指令中。
- en: The code for the updated example can be found here: [https://codepen.io/AjdinImsirovic/pen/XPPrEN](https://codepen.io/AjdinImsirovic/pen/XPPrEN).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 更新示例的代码可以在这里找到：[https://codepen.io/AjdinImsirovic/pen/XPPrEN](https://codepen.io/AjdinImsirovic/pen/XPPrEN)。
- en: 'Basically, what we did in this new example is we extended our HTML with several
    conditional directives. Although this solves the problem, we have cluttered our
    HTML, while our JS has remained unchanged. The updated HTML code is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们在这个新示例中所做的是用几个条件指令扩展了我们的HTML。虽然这解决了问题，但我们混乱了我们的HTML，而我们的JS保持不变。更新后的HTML代码如下：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Our problem is solved. The points for this test are 94.44, and the app successfully
    prints out the following information to the screen:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的问题得到了解决。这次测试的分数是94.44，应用程序成功地将以下信息打印到屏幕上：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: However, we realize that our HTML is now cluttered. Luckily, we can utilize
    filters to make things less messy.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们意识到我们的HTML现在很混乱。幸运的是，我们可以利用过滤器使事情变得不那么混乱。
- en: Using filters as a replacement for conditional directives
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过滤器替换条件指令
- en: In this section, we will employ a filter to return the proper grade for our
    student.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用过滤器返回学生的适当等级。
- en: The code for the updated app is available here: [https://codepen.io/AjdinImsirovic/pen/LJJPKm](https://codepen.io/AjdinImsirovic/pen/LJJPKm).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的应用程序代码可以在这里找到：[https://codepen.io/AjdinImsirovic/pen/LJJPKm](https://codepen.io/AjdinImsirovic/pen/LJJPKm)。
- en: 'The changes we made to this version of the app''s HTML are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对该应用程序的HTML所做的更改如下：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We moved the conditional functionality to our JavaScript, namely, to a new
    filter we named `pointsToGrade`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将条件功能移到了我们的JavaScript中，即一个名为`pointsToGrade`的新过滤器中：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As a quick test that our updated code works, we have also changed the points
    to 84.44, which successfully returns the B grade from the `pointsToGrade` filter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对我们更新的代码进行快速测试，我们还将点数更改为84.44，成功地从`pointsToGrade`过滤器返回了B等级。
- en: 'However, not entirely unexpectedly, our friend returns again, and asks us for
    yet another favor: to extend the app yet again. This time, we need to display
    a properly formatted name of our student, in the following format:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，不完全出乎意料的是，我们的朋友再次回来，并要求我们再次扩展应用程序。这一次，我们需要再次显示我们学生的姓名的正确格式，格式如下：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This means that we''ll have to expand our app with additional functionality.
    Luckily, that won''t be hard because we can employ another nice feature of filters:
    chaining.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们将不得不扩展我们的应用程序以获得额外的功能。幸运的是，这不难，因为我们可以利用过滤器的另一个很好的特性：链接。
- en: Chaining filters in Vue
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Vue中链接过滤器
- en: The requirements for our app have been updated, and now we need to show some
    additional, nicely formatted data on the screen.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用的要求已经更新，现在我们需要在屏幕上显示一些额外的、格式良好的数据。
- en: Since the requirements have changed, we also need to update the data.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于要求已经改变，我们还需要更新数据。
- en: The code for this section is available at this pen: [https://codepen.io/AjdinImsirovic/pen/BOOazy](https://codepen.io/AjdinImsirovic/pen/BOOazy).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的代码可在此处找到：[https://codepen.io/AjdinImsirovic/pen/BOOazy](https://codepen.io/AjdinImsirovic/pen/BOOazy)。
- en: 'This is the updated JavaScript. To begin, we''ll add the `el` and `data` options:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新后的JavaScript。首先，我们将添加`el`和`data`选项：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Still in JS, we''ll add the filters:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在JS中，我们将添加过滤器：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The updated HTML looks like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的HTML如下所示：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'With these chained filters, we achieved the correct formatting of the student''s
    name by virtue of taking the data (which appeared in all CAPS) and piping it through
    two filters: `toLowerCase` and `capitalizeFirstLetter`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些链接的过滤器，我们通过两个过滤器`toLowerCase`和`capitalizeFirstLetter`正确格式化了学生的姓名，通过这两个过滤器将数据（以全大写形式出现）传递过去。
- en: We can also see a commented-out paragraph that shows an unsuccessful approach
    that capitalizes only the first letter of the last name, but not the first letter
    of the first name. The reason for this is the `firstAndLastName` filter which,
    when applied, combines the full name into a single string.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到一个被注释掉的段落，显示了一个不成功的方法，它只将姓氏的第一个字母大写，而不是名字的第一个字母。原因是`firstAndLastName`过滤器，当应用时，将全名组合成一个字符串。
- en: Note that filters are not cached, which means that they will be always run,
    just like methods.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，过滤器不会被缓存，这意味着它们将始终被运行，就像方法一样。
- en: For more information on filters, refer to the official documentation at [https://vuejs.org/v2/guide/filters.html](https://vuejs.org/v2/guide/filters.html).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有关过滤器的更多信息，请参阅官方文档：[https://vuejs.org/v2/guide/filters.html](https://vuejs.org/v2/guide/filters.html)。
- en: Working with mixins
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用混合
- en: Mixins are a way for us to abstract out reusable functionality in our Vue code.
    Made popular in the frontend world by Sass, the concept of mixins is now present
    in a number of modern JavaScript frameworks.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 混合是我们在Vue代码中抽象出可重用功能的一种方式。在前端世界中，由Sass广泛使用，混合的概念现在出现在许多现代JavaScript框架中。
- en: Mixins are best used when we have some functionality that we would like to reuse
    across a number of components. In the example that follows, we will create a very
    simple Vue app, which will show two Bootstrap alerts on the page. When a user
    clicks on either of the alerts, the browser's viewport dimensions will be logged
    out to the console.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一些功能希望在多个组件中重用时，最好使用混合。在接下来的例子中，我们将创建一个非常简单的Vue应用程序，在页面上显示两个Bootstrap警报。当用户点击其中任何一个警报时，浏览器的视口尺寸将被记录到控制台中。
- en: For this example to work, we will need to get some plain HTML components from
    the Bootstrap framework. Specifically, we will use the alert component.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个例子工作，我们需要从Bootstrap框架中获取一些普通的HTML组件。具体来说，我们将使用警报组件。
- en: The official documentation on this Bootstrap component can be found at this
    link: [https://getbootstrap.com/docs/4.1/components/alerts/](https://getbootstrap.com/docs/4.1/components/alerts/).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个Bootstrap组件的官方文档可以在这个链接找到：[https://getbootstrap.com/docs/4.1/components/alerts/](https://getbootstrap.com/docs/4.1/components/alerts/)。
- en: It is important to note that Bootstrap components and Vue components are different
    things and should not be confused.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，Bootstrap组件和Vue组件是不同的东西，不应混淆。
- en: 'The app, when run, will produce this result:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，将产生以下结果：
- en: '![](assets/e09d84d6-6887-4b67-b0b4-470f14216b0f.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e09d84d6-6887-4b67-b0b4-470f14216b0f.png)'
- en: 'The code for this example can be found here: [https://codepen.io/AjdinImsirovic/pen/jvvybq](https://codepen.io/AjdinImsirovic/pen/jvvybq).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的代码可以在这里找到：[https://codepen.io/AjdinImsirovic/pen/jvvybq](https://codepen.io/AjdinImsirovic/pen/jvvybq)。
- en: Building a simple app with repetitive functionality in different components
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不同组件中构建具有重复功能的简单应用程序
- en: 'To begin, let''s build our simple HTML:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们构建我们简单的HTML：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We are using Bootstrap''s CSS classes of `container` and `mt-4`. The regular
    HTML `h1` tag also gets some Bootstrap-specific styling. We are also using two
    Vue components in the previous code: `primary-alert` and `warning-alert`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用Bootstrap的`container`和`mt-4`的CSS类。常规的HTML `h1`标签也获得了一些特定于Bootstrap的样式。我们还在前面的代码中使用了两个Vue组件：`primary-alert`和`warning-alert`。
- en: 'In our JavaScript code, we define these two components as `primaryAlert` and
    `warningAlert`, and then we list them in the `components` option of their parent
    component:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的JavaScript代码中，我们将这两个组件定义为`primaryAlert`和`warningAlert`，然后在它们的父组件的`components`选项中列出它们：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And now, still in JS, we can specify the constructor:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，仍然在JS中，我们可以指定构造函数：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To see the result of this little app, open the console and click on either
    of the two alert components. The console output will be similar to the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这个小应用程序的结果，请打开控制台并单击两个警报组件中的任何一个。控制台输出将类似于以下内容：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As we can see in the JavaScript code, we are also defining a `viewportSizeOnClick`
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在JavaScript代码中所看到的，我们还定义了一个`viewportSizeOnClick`
- en: method inside the `methods` option of both the `primaryAlert` and `warningAlert`
    components. This unnecessary repetition in functionality is a perfect candidate
    for abstracting into a mixin, which we will do next.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 方法在`primaryAlert`和`warningAlert`组件的`methods`选项内。这种功能上的不必要重复是一个完美的抽象成mixin的候选，接下来我们将这样做。
- en: Staying DRY with mixins
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用mixin保持DRY
- en: 'The code for the improved app is available here: [https://codepen.io/AjdinImsirovic/pen/NLLgWP](https://codepen.io/AjdinImsirovic/pen/NLLgWP).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 改进后的应用程序的代码可以在这里找到：[https://codepen.io/AjdinImsirovic/pen/NLLgWP](https://codepen.io/AjdinImsirovic/pen/NLLgWP)。
- en: 'In this example, while our HTML stays completely the same, the updated JavaScript
    code will look as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，虽然我们的HTML保持完全相同，但更新后的JavaScript代码将如下所示：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As can be seen here, we have erased the `methods` option from both components
    and added a new object named `viewportSize`. Inside this object, we have moved
    the shared `methods` option:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在这里所看到的，我们已经从两个组件中删除了`methods`选项，并添加了一个名为`viewportSize`的新对象。在这个对象内部，我们已经移动了共享的`methods`选项：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `methods` option holds only the `viewportSizeOnClick` function.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`methods`选项只包含`viewportSizeOnClick`函数。'
- en: As a side note, the `vieportSizeOnClick` method's name is slightly misleading.
    If you look at the code for the second component (the `warningAlert` component)
    a bit closer, you'll notice that we updated the directive so it is using `v-on:mouseenter`,
    rather than `v-on:click`. This means that the name of the method will need to
    be changed to something more suitable. Therefore, we will rename the method to
    `logOutViewportSize`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，`vieportSizeOnClick`方法的名称有点误导。如果你仔细看第二个组件（`warningAlert`组件）的代码，你会注意到我们更新了指令，所以它使用的是`v-on:mouseenter`，而不是`v-on:click`。这意味着方法的名称需要更改为更合适的名称。因此，我们将把方法重命名为`logOutViewportSize`。
- en: Also, let's imagine that we want another way to display the viewport information.
    For example, we might show it in an alert box rather than logging it to the console.
    That's why we'll introduce another method, `alertViewportSize`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，让我们想象一下，我们希望以另一种方式显示视口信息。例如，我们可能会在警报框中显示它，而不是将其记录到控制台中。这就是为什么我们将引入另一种方法`alertViewportSize`。
- en: 'With all of these little changes accumulating, it is a good time to see another,
    updated version of our little app. The new pen can be found at this URL: [https://codepen.io/AjdinImsirovic/pen/aaawJY](https://codepen.io/AjdinImsirovic/pen/aaawJY).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 随着所有这些小改变的积累，现在是时候看到我们小应用的另一个更新版本了。新的代码可以在以下网址找到：[https://codepen.io/AjdinImsirovic/pen/aaawJY](https://codepen.io/AjdinImsirovic/pen/aaawJY)。
- en: 'Similar to the previous updates, again the updated example only has changes
    made to the JS, as follows. We begin with `viewportSize`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前的更新类似，更新后的示例只有对JS进行了更改，如下所示。我们从`viewportSize`开始：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we''ll set up the alerts:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将设置警报：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, let''s wrap it up with specifying the Vue constructor:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们用指定Vue构造函数来结束：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the next section, we will look at how we can further improve our mixins by
    refactoring them.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看看如何通过重构来进一步改进我们的混合方法。
- en: Refactoring our viewportSize mixin
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构我们的viewportSize混合方法
- en: In this section, we will look at ways to further improve our mixins. While our
    code is both readable and easy to grasp, we have some code duplication in `const`
    declarations. Also, we will use this opportunity to look at ways of approaching
    mixin refactoring. The updated code will include some basic event handling.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨进一步改进我们的混合方法。虽然我们的代码既可读又易于理解，但在`const`声明中存在一些代码重复。此外，我们将利用这个机会来探讨混合重构的方法。更新后的代码将包括一些基本的事件处理。
- en: For the list of available events, refer to this link: [https://developer.mozilla.org/en-US/docs/Web/Events](https://developer.mozilla.org/en-US/docs/Web/Events).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有关可用事件的列表，请参阅此链接：[https://developer.mozilla.org/en-US/docs/Web/Events](https://developer.mozilla.org/en-US/docs/Web/Events)。
- en: Since we will also use JavaScript's built-in `addEventListener()` method, it
    would also be good to get more information about it on MDN, at the following URL: [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还将使用JavaScript的内置`addEventListener()`方法，因此也很有必要在MDN上获取有关它的更多信息，网址如下：[https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)。
- en: Before we begin refactoring, we will utilize the ability of mixings to plug
    into the life cycle functionality of Vue (just like components do). Additionally,
    in this iteration of our mixin, we introduce another option besides `methods` in
    the mixin itself. The option we use is `data`. Effectively, to avoid having to
    duplicate `const` declarations inside the `methods` option of our mixin, we will
    store the values to work with inside the `data` option.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始重构之前，我们将利用混合的能力来插入Vue的生命周期功能（就像组件一样）。此外，在我们的混合的这个迭代中，我们除了`methods`之外还引入了另一个选项。我们使用的选项是`data`。为了避免在混合的`methods`选项中重复`const`声明，我们将要处理的值存储在`data`选项中。
- en: 'While the HTML still remains unchanged, our JavaScript file will look quite
    different. Let''s begin by setting up the data:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然HTML仍然保持不变，但我们的JavaScript文件将会有很大的不同。让我们从设置数据开始：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, we''ll add methods, namely `getViewportSize`, `logOutViewportSize`, and
    `alertViewportSize`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加方法，即`getViewportSize`、`logOutViewportSize`和`alertViewportSize`：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, let''s add `created`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加`created`：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we can set up `primaryAlert`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以设置`primaryAlert`：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We''ll continue by adding `warningAlert`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续添加`warningAlert`：
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, let''s add the Vue constructor:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们添加Vue构造函数：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The code for this section is available in the following code pen: [https://codepen.io/AjdinImsirovic/pen/oPPGLW](https://codepen.io/AjdinImsirovic/pen/oPPGLW).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的代码可以在以下代码pen中找到：[https://codepen.io/AjdinImsirovic/pen/oPPGLW](https://codepen.io/AjdinImsirovic/pen/oPPGLW)。
- en: The options we have in our refactored mixin are `data`, `methods`, and `created`.
    The `created` function is a life cycle hook, and we use this hook to listen for
    `mousemove` events. When such an event occurs, we run the `this.getViewportSize`
    method of our mixin, which updates the viewport dimensions that get either logged
    out or shown in an alert box.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们重构的混合中，我们有`data`、`methods`和`created`这些选项。`created`函数是一个生命周期钩子，我们使用这个钩子来监听`mousemove`事件。当发生这样的事件时，我们运行我们的混合的`this.getViewportSize`方法，该方法更新视口尺寸，然后将其记录下来或显示在警报框中。
- en: Never use global mixins! Global mixins affect all of the components of your
    apps. There are not that many use cases for such a scenario, so usually it is
    best to avoid using global mixins.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要使用全局混合！全局混合会影响应用程序中的所有组件。这种情况并不多见，所以通常最好避免使用全局混合。
- en: 'With this, we conclude our brief discussion of mixins in Vue. For more information
    on the subject, visit this official link:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，我们结束了对Vue中混合的简要讨论。有关此主题的更多信息，请访问此官方链接：
- en: '[https://vuejs.org/v2/guide/mixins.html](https://vuejs.org/v2/guide/mixins.html)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://vuejs.org/v2/guide/mixins.html](https://vuejs.org/v2/guide/mixins.html)'
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at filters and mixins in Vue. We discussed the situations
    in which using filters would make sense, and we looked at using global and local
    filters. We also discussed how filters can be used to replace conditional directives,
    and we examined how to pipe filters together.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Vue中的过滤器和混合。我们讨论了在何种情况下使用过滤器是有意义的，并且我们看了一下如何使用全局和本地过滤器。我们还讨论了过滤器如何用来替换条件指令，并且我们研究了如何将过滤器串联在一起。
- en: We also explored how to abstract reusable functionality by moving it from components
    to mixins, and we looked at ways to avoid code duplication inside mixins themselves.
    We wrapped it up with an example of using life cycle hooks inside our mixins.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了如何通过将功能从组件移动到混合中来抽象可重用功能，并且我们看了一下如何避免在混合本身内部重复代码。我们用一个在混合中使用生命周期钩子的例子来结束了这一部分。
- en: In the next chapter, we will look at building our own custom directives.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何构建我们自己的自定义指令。
