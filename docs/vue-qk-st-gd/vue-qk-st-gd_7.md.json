["```js\nnpm install --save vuex\n```", "```js\nconst store = new Vuex.Store({ \n  // store details go here\n})\nnew Vue({\n el: '#app',\n store: store,\n // etc\n})\n```", "```js\nconst store = new Vuex.Store({ \n  // store details go here; they usually have:\n  state: {\n    // state specified here\n  },\n  getters: {\n    // getters are like computed values - they don't mutate state\n },\n mutations: {\n   // they mutate the state and are synchronous, \n   // functions that mutate state can have arguments; these arguments are called 'payload'\n },\n actions: {\n   // asynchronous functions that commit mutations\n }\n})\nnew Vue({\n el: '#app',\n store,\n // etc\n})\n```", "```js\nconst store = new Vuex.Store({\n  state: {\n    count: 5\n  },\n```", "```js\n  getters: {\n    counter(state) {\n      return state.count;\n    }\n  },\n```", "```js\n  mutations: {\n    decrementCounter(state, payload) {\n      state.count = state.count - payload;\n      state.count<0 ? state.count=0 : state.count\n    },\n    resetCounter(state) {\n      state.count = 5;\n    }\n  },\n```", "```js\n  actions: {\n    decrement(state, payload) {\n      state.commit(\"decrementCounter\", payload);\n    },\n    reset(state) {\n      state.commit(\"resetCounter\");\n    }\n  }\n```", "```js\nconst app = new Vue({\n  el: \"#app\",\n  store: store,\n  computed: {\n    count() {\n      return store.getters.counter;\n    }\n  },\n  methods: {\n    eatFruit(amount) {\n      store.dispatch(\"decrement\", amount);\n    },\n    counterReset() {\n      store.dispatch(\"reset\");\n    }\n  }\n});\n```", "```js\n<div id=\"app\">\n <h1>Fruit to eat: {{count}}</h1>\n <button v-on:click=\"eatFruit(1)\">Eat fruit!</button>\n <button v-on:click=\"counterReset()\">Reset the counter</button>\n</div>\n```", "```js\n\u25bc mutation\n    payload: 1\n    type: ''decrementCounter''\n\u25bc state\n    count: 1\n\u25bc getters\n    counter: 1\n```", "```js\nconst store = new Vuex.Store({\n  state: {\n    count: 5,\n    apples: 0,\n    pears: 0\n  },\n```", "```js\n  getters: {\n    counter(state) {\n      return state.count;\n    },\n    appleCount(state) {\n      return state.apples;\n    },\n    pearCount(state) {\n      return state.pears;\n    }\n  },\n```", "```js\n  mutations: {\n    decrementWithApplesCounter(state, payload) {\n      state.count = state.count - 1;\n      state.count < 0 ? (state.count = 0) : (state.count, state.apples \n       += 1);\n    },\n    decrementWithPearsCounter(state, payload) {\n      state.count = state.count - 1;\n      state.count < 0 ? (state.count = 0) : (state.count, state.pears \n      += 1);\n    },\n    resetCounter(state) {\n      state.count = 5;\n      state.apples = 0;\n      state.pears = 0;\n    }\n  },\n```", "```js\n  actions: {\n     decrementWithApples(state, payload) {\n       setTimeout(() => {\n         state.commit(\"decrementWithApplesCounter\", payload);\n       }, 1000)\n     }, \n    decrementWithPears(state, payload) {\n      state.commit(\"decrementWithPearsCounter\", payload);\n    },\n    reset(state) {\n      state.commit(\"resetCounter\");\n    }\n  }\n});\n```", "```js\nconst app = new Vue({\n  el: \"#app\",\n  store: store,\n  computed: {\n    count() {\n      return store.getters.counter;\n    },\n    apples() {\n      return store.getters.appleCount;\n    },\n    pears() {\n      return store.getters.pearCount;\n    }\n  },\n  methods: {\n    eatApples(payload) {\n      store.dispatch(\"decrementWithApples\", payload);\n    },\n    eatPears(payload) {\n      store.dispatch(\"decrementWithPears\", payload);\n    },\n    counterReset() {\n      store.dispatch(\"reset\");\n    }\n  }\n});\n```", "```js\n<div id=\"app\" class=\"p-3\">\n  <h1>Fruit to eat: {{ count }}</h1>\n  <p>Eaten: {{ apples }} apples, {{ pears }} pears</p>\n  <button v-on:click=\"eatApples(1)\" class=\"btn btn-success\">\n    An apple!\n  </button>\n  <button v-on:click=\"eatPears(1)\" class=\"btn btn-warning\">\n    A pear!\n  </button>\n  <button v-on:click=\"counterReset()\" class=\"btn btn-danger\">\n    Reset the counter\n  </button>\n</div>\n```"]