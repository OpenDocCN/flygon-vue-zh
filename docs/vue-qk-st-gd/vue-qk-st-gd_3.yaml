- en: Working with Vue-CLI, Components, Props, and Slots
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue-CLI，组件，props和插槽工作
- en: 'The previous chapter was an introduction to the basic concepts of Vue. We will
    start this chapter with a more realistic approach: we''ll introduce Vue-cli. We''ll
    look at the component hierarchy, global and local components, and communication
    between components. We will introduce slots, and we will also examine the difference
    between slots and props.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章是对Vue基本概念的介绍。我们将以更现实的方式开始本章：我们将介绍Vue-cli。我们将查看组件层次结构，全局和本地组件以及组件之间的通信。我们将介绍插槽，并且我们还将检查插槽和props之间的区别。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Vue component hierarchy, and global and local components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue组件层次结构，全局和本地组件
- en: Using Vue-cli
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue-cli
- en: Setting up code editors to use with Vue
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置代码编辑器以与Vue一起使用
- en: The structure of our Vue-cli-based project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Vue-cli的项目结构
- en: Adding basic functionality to a child component
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向子组件添加基本功能
- en: Adding props to our `HelloAgain.vue`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向我们的`HelloAgain.vue`添加props
- en: Introduction to slots
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插槽介绍
- en: Vue component hierarchy, and global and local components
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue组件层次结构，全局和本地组件
- en: 'As we learned in [Chapter 2](28e7b192-ef00-4ece-bd6c-4390d095bc45.xhtml), *Basic
    Concepts of Vue 2,* to get a new Vue instance running, we use new Vue:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](28e7b192-ef00-4ece-bd6c-4390d095bc45.xhtml)中学到的，*Vue 2的基本概念*，要运行一个新的Vue实例，我们使用new
    Vue：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Our `app` component resides inside this Vue instance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`app`组件位于这个Vue实例中。
- en: 'The app component usually has a child component, like we saw in this example
    from [Chapter 2](28e7b192-ef00-4ece-bd6c-4390d095bc45.xhtml), *Basic Concepts
    of Vue 2*: [https://codepen.io/AjdinImsirovic/pen/xzpOaJ](https://codepen.io/AjdinImsirovic/pen/xzpOaJ):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: app组件通常有一个子组件，就像我们在[第2章](28e7b192-ef00-4ece-bd6c-4390d095bc45.xhtml)中看到的例子一样，*Vue
    2的基本概念*：[https://codepen.io/AjdinImsirovic/pen/xzpOaJ](https://codepen.io/AjdinImsirovic/pen/xzpOaJ)：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'What we did not mention in the previous chapter is this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中我们没有提到的是：
- en: A child component can be reused as many times as needed
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子组件可以根据需要重复使用
- en: A child component can also have its own children
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子组件也可以有自己的子组件
- en: 'An example of this is available in the following pen: [https://codepen.io/AjdinImsirovic/pen/ZjdOdK](https://codepen.io/AjdinImsirovic/pen/ZjdOdK).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可以在以下pen中找到：[https://codepen.io/AjdinImsirovic/pen/ZjdOdK](https://codepen.io/AjdinImsirovic/pen/ZjdOdK)。
- en: 'Here is the code which demonstrates these two principles:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是演示这两个原则的代码：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As seen already, to add a component to our Vue instance, we are using the following
    syntax:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如已经看到的，要向我们的Vue实例添加一个组件，我们使用以下语法：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In Vue terminology, we use this code to **register** a component. As described
    before, it's referred to as **global registration**. There is also **local registration**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue术语中，我们使用这段代码来**注册**一个组件。如前所述，它被称为**全局注册**。还有**本地注册**。
- en: 'Local registration works similarly to the `Vue.component` syntax. The only
    difference in the code is how we introduce the local component when compared to
    a global one. In the previous code, we had the following global component:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本地注册与`Vue.component`语法类似。代码中唯一的区别是我们引入本地组件的方式与全局组件相比。在之前的代码中，我们有以下全局组件：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Converting this global component to a local component is as simple as removing
    this snippet of code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个全局组件转换为本地组件就像删除这段代码一样简单：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Instead of the previous code, we''ll simply make a new variable and give it
    the exact same options object that we used in the global component, like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的代码不同，我们将简单地创建一个新变量，并给它与我们在全局组件中使用的完全相同的选项对象，就像这样：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In order to use this local component in our Vue instance, we''ll introduce
    the `components` option, like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Vue实例中使用这个本地组件，我们将引入`components`选项，就像这样：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: An example with a local component is available here: [https://codepen.io/AjdinImsirovic/pen/ZMzrpr](https://codepen.io/AjdinImsirovic/pen/ZMzrpr).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用本地组件的示例：[https://codepen.io/AjdinImsirovic/pen/ZMzrpr](https://codepen.io/AjdinImsirovic/pen/ZMzrpr)。
- en: However, the previous example is incomplete on purpose. As we can see, the `customArticle` local
    component is only available in the main Vue instance, but it is not available
    in the `anotherCustomArticle` component.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，前面的示例是故意不完整的。正如我们所看到的，`customArticle`本地组件只能在主Vue实例中使用，而不能在`anotherCustomArticle`组件中使用。
- en: 'To make this work and complete the example, we need to tweak this bit of code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其正常工作并完成示例，我们需要调整这部分代码：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will simply remove the comments on these three lines:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需删除这三行注释：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By doing that, we have registered the local component `customArticle` in the
    global component `anotherCustomArticle`. Basically, we are following the same
    procedure of registering a local component in our main Vue instance, and we are
    applying that same approach of registering local component in our `anotherCustomArticle`
    global component.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们已经在全局组件`anotherCustomArticle`中注册了本地组件`customArticle`。基本上，我们正在遵循在主Vue实例中注册本地组件的相同过程，并且我们正在应用相同的方法在`anotherCustomArticle`全局组件中注册本地组件。
- en: 'To get into the nuances of global and local registration, you can refer to
    this section of the official Vue documentation:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解全局和本地注册的细微差别，您可以参考官方Vue文档的这一部分：
- en: '[https://vuejs.org/v2/guide/components-registration.html](https://vuejs.org/v2/guide/components-registration.html).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://vuejs.org/v2/guide/components-registration.html](https://vuejs.org/v2/guide/components-registration.html)。'
- en: In the following section, we'll start using Vue-cli.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始使用Vue-cli。
- en: Using Vue-CLI
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue-CLI
- en: In order to start using Vue-cli, we need to have Node.js set up on our machine,
    and we also need to have a command-line app on our operating system of choice.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用Vue-cli，我们需要在计算机上设置Node.js，并且我们还需要在我们选择的操作系统上安装一个命令行应用程序。
- en: For example, my preferred tools are Windows 10 and Git bash for Windows.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我的首选工具是Windows 10和Git bash for Windows。
- en: There are many different operating systems and command-line apps that you could
    potentially be using.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的操作系统和命令行应用程序，您可能会使用其中之一。
- en: 'If you run into problems during the installation of any of the tools mentioned
    in this section, it might be worthwhile to have a look at this in-depth guide
    on installing Node.js on your operating system:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在安装本节中提到的任何工具时遇到问题，值得查看这篇关于在操作系统上安装Node.js的深入指南：
- en: '[https://www.packtpub.com/mapt/book/web_development/9781788626859/2](https://www.packtpub.com/mapt/book/web_development/9781788626859/2)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/mapt/book/web_development/9781788626859/2](https://www.packtpub.com/mapt/book/web_development/9781788626859/2)'
- en: Installing Git bash
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Git bash
- en: You first need to visit [https://git-scm.com/downloads](https://git-scm.com/downloads),
    which lets you choose between macOS X, Windows, and Linux/Unix installations.
    After clicking on the Windows download, you can proceed with the installation
    steps for Git bash. Just following the default preset options during the installation
    should be fine.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先需要访问[https://git-scm.com/downloads](https://git-scm.com/downloads)，该网站可以让您在macOS
    X、Windows和Linux/Unix安装之间进行选择。点击Windows下载后，您可以按照Git bash的安装步骤进行安装。在安装过程中，只需按照默认预设选项进行操作即可。
- en: Installing nvm
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装nvm
- en: 'To download the Node version manager for Windows, visit this link:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载Windows的Node版本管理器，请访问此链接：
- en: '[https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases)'
- en: Once on the page, click the `nvm-setup.zip` file to download it, then run the
    downloaded `nvm-setup.exe` and go through the regular installation steps.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入页面，点击`nvm-setup.zip`文件进行下载，然后运行下载的`nvm-setup.exe`并按照常规安装步骤进行操作。
- en: 'Next, start Git bash with administrator privileges and run the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，以管理员权限启动Git bash，并运行以下命令：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following message will be logged to the console:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下消息将被记录到控制台：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Why use nvm?
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用nvm？
- en: 'There are two major reasons:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个主要原因：
- en: Security-critical upgrades
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全关键升级
- en: Easier switching between Node versions in different projects
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同项目中更轻松地切换Node版本
- en: The first reason listed here has to do with future updates to Node.js. In case
    there is a major security patch a few month after this book is published, it would
    be smart to update Node on your system. Using nvm makes this easy, which brings
    us to the second point. Even if there are no major releases of Node available
    for you to upgrade, you could still run different versions of Node based on the
    needs of different projects you'll be working on. Either way, using nvm pays off.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出的第一个原因与Node.js的未来更新有关。假设在本书出版几个月后有一个重大的安全补丁，更新系统上的Node将是明智的选择。使用nvm可以轻松实现这一点，这也带来了第二点。即使没有可供升级的Node的主要版本，您仍然可以根据不同项目的需求运行不同版本的Node。无论如何，使用nvm都是值得的。
- en: 'Once the download is complete, in our Git bash we can simply run this command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，在我们的Git bash中，我们可以简单地运行此命令：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we are ready to use Vue-cli.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好使用Vue-cli了。
- en: Installing and updating Vue-cli
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和更新Vue-cli
- en: It might be interesting to note that Vue-cli is a wrapper around Webpack, which
    has been tweaked and adjusted so it provides the best possible experience both
    during development and when releasing our Vue apps into production. This is a
    major plus for developers, since this setup lets us focus on coding without having
    to grapple with the toolchain for extended periods of time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Vue-cli是对Webpack的封装，经过调整和优化，以便在开发和发布Vue应用程序时提供最佳体验。这对开发人员来说是一个重大优势，因为这种设置让我们能够专注于编码，而不必长时间地与工具链搏斗。
- en: 'Let''s open up Git bash and run the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开Git bash并运行以下命令：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Since Vue-cli is an `npm` package, you can read more about it here: [https://www.npmjs.com/package/vue-cli](https://www.npmjs.com/package/vue-cli).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Vue-cli是一个`npm`包，您可以在这里阅读更多信息：[https://www.npmjs.com/package/vue-cli](https://www.npmjs.com/package/vue-cli)。
- en: 'To check the current version of Vue-cli installed on your system, run this
    command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查系统上安装的Vue-cli当前版本，请运行此命令：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note that there has been a major upgrade between Vue-cli versions 2 and 3\.
    To make sure that you are using the most up-to-date version on your system, you
    can run this command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Vue-cli版本2和3之间有一个重大升级。为了确保您在系统上使用的是最新版本，您可以运行此命令：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This command will update your version of Vue-cli to the most recent one. The
    update is local, meaning it will put it in the `node_modules` folder of the folder
    in which you run the previous command. Note that this operation could take some
    time because of all the dependencies that need to be installed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将更新您的Vue-cli版本为最新版本。更新是本地的，这意味着它将放在您运行上一个命令的文件夹的`node_modules`文件夹中。请注意，由于需要安装的所有依赖项，此操作可能需要一些时间。
- en: Before initializing our project using Vue-cli, it would be beneficial to quickly
    list the improvements that version 3 of Vue-cli brings. Hopefully, this will reinforce
    some of the key points made in [Chapter 1](5fdb984c-98f5-4703-96ce-7bd3150fbe2f.xhtml), *Introducing
    Vue*, regarding the ease of use of Vue.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Vue-cli初始化项目之前，快速列出Vue-cli版本3带来的改进将是有益的。希望这将强化[第1章](5fdb984c-98f5-4703-96ce-7bd3150fbe2f.xhtml)中关于Vue易用性的一些关键点，*介绍Vue*。
- en: 'The goals of version 3 of Vue-cli are as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Vue-cli版本3的目标如下：
- en: Simplify and streamline tooling to avoid toolchain fatigue for frontend development
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化和优化工具链，避免前端开发中的工具疲劳
- en: Follow best practices in the tooling and thus make it become the default for
    Vue apps
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循最佳实践的工具，并使其成为Vue应用程序的默认选择
- en: 'There is also a whole slew of features and upgrades to the new version of Vue-cli:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本的Vue-cli还有一系列功能和升级：
- en: Preset Webpack configuration for hot module replacement, tree-shaking, and so
    on
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为热模块替换、树摇和其他功能预设Webpack配置
- en: ES2017 features
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ES2017功能
- en: Babel 7 support
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Babel 7支持
- en: PostCSS support
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostCSS支持
- en: Optional integration for Typescript, PWA, Jest, E2E testing, and so on
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选集成Typescript、PWA、Jest、E2E测试等
- en: Put succinctly, Vue.js is keeping up with the times, and Vue-cli is just more
    proof of that.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Vue.js跟上了时代的步伐，Vue-cli只是更多的证据。
- en: Initializing a new project with Vue-cli
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue-cli初始化一个新项目
- en: 'Once installed, we can initialize a new project with the following command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以使用以下命令初始化一个新项目：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We are giving our Vue app the name of *quickstart-vue*. We might as well have
    named it anything else.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给我们的Vue应用程序命名为*quickstart-vue*。我们也可以给它取其他任何名字。
- en: 'Once we run the preceding command, we can choose to use a preset, or to manually
    pick features we''d like to use:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行了上述命令，我们可以选择使用预设，或者手动选择要使用的功能：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We could choose the default preset, but just as a little exercise, let''s choose
    the Manually select features option instead. Then we''ll choose `npm` rather then
    `yarn`. That will result in the following output on the screen:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择默认预设，但作为一个小练习，让我们选择手动选择功能选项。然后我们将选择`npm`而不是`yarn`。这将导致屏幕上显示以下输出：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You will know that the plugins have been installed when you see this message:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当您看到这条消息时，您将知道插件已安装：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now we can simply follow the previous instructions and change into the `quickstart-vue` directory:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以简单地按照先前的说明，切换到`quickstart-vue`目录：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we will run the server (which is actually running a Webpack dev server
    in the background):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将运行服务器（实际上是在后台运行Webpack开发服务器）：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The message that our app is available at port `8080` will be logged out to
    the console. So, let''s open up our browser at `http://localhost:8080` and look
    at the default site:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序可在端口`8080`上使用，将在控制台中记录。因此，让我们在`http://localhost:8080`上打开浏览器，查看默认站点：
- en: '![](assets/7ffa1c92-53e9-4b24-b12b-7e03948fe060.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7ffa1c92-53e9-4b24-b12b-7e03948fe060.png)'
- en: In the next section, we'll set up two editors to use with our new Vue project.
    These editors are Sublime Text and Visual Studio Code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将设置两个编辑器以与我们的新Vue项目一起使用。这些编辑器是Sublime Text和Visual Studio Code。
- en: Setting up code editors to use with Vue
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置代码编辑器以与Vue一起使用
- en: 'There are a number of code editors and **IDEs** (**integrated development environments**)
    that we can use to work with Vue. Some of the more popular ones include these:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多代码编辑器和**IDEs**（**集成开发环境**）可以用来处理Vue。其中一些比较流行的包括：
- en: Sublime Text [https://www.sublimetext.com/](https://www.sublimetext.com/)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text [https://www.sublimetext.com/](https://www.sublimetext.com/)
- en: Visual Studio Code (VS Code), [https://code.visualstudio.com/](https://code.visualstudio.com/)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code (VS Code), [https://code.visualstudio.com/](https://code.visualstudio.com/)
- en: Atom, [https://atom.io/](https://atom.io/)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atom, [https://atom.io/](https://atom.io/)
- en: WebStorm, [https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebStorm, [https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/)
- en: Visual Studio 2017, [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2017, [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)
- en: In this section, we'll look at using Vue.js in Sublime Text and VS Code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何在Sublime Text和VS Code中使用Vue.js。
- en: Working with Vue.js in Sublime Text 3
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Sublime Text 3中使用Vue.js
- en: Sublime Text is a mature and fun-to-use text editor, and so we will download
    it and set it up to be used with our Vue.js projects.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text是一个成熟且有趣的文本编辑器，因此我们将下载并设置它以用于我们的Vue.js项目。
- en: Dowloading Sublime Text 3
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载Sublime Text 3
- en: 'We''ll begin by downloading Sublime Text 3 from the download page:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从下载页面开始下载Sublime Text 3：
- en: '[https://www.sublimetext.com/3](https://www.sublimetext.com/3)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.sublimetext.com/3](https://www.sublimetext.com/3)'
- en: Next, visit the website, [https://packagecontrol.io/](https://packagecontrol.io/),
    which is the home of the package manager for Sublime Text.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，访问网站[https://packagecontrol.io/](https://packagecontrol.io/)，这是Sublime Text的软件包管理器的主页。
- en: Install Package Manager
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装软件包管理器
- en: 'On the package manager website, click the Install Now button in the top right
    of the page and follow these installation steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件包管理器网站上，单击页面右上角的立即安装按钮，然后按照这些安装步骤进行操作：
- en: Select and copy all the text inside the Sublime Text 3 tab.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择并复制Sublime Text 3标签内的所有文本。
- en: Open up the newly installed Sublime Text 3.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开新安装的Sublime Text 3。
- en: Inside Sublime Text 3, press the keyboard shortcut of *Ctrl* +  *`* (hold and
    press control and then press the backtick key). On most keyboards, the backtick
    character is available to the left of number 1 on the alphanumerical section of
    the keyboard.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Sublime Text 3中，按下*Ctrl* + *`*（按住并按下控制键，然后按下反引号键）的键盘快捷键。在大多数键盘上，反引号字符位于键盘的字母数字部分的1号键左侧。
- en: Paste the code copied from [https://packagecontrol.io](https://packagecontrol.io)
    into the bottom input field that opened up in the previous step.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将从[https://packagecontrol.io](https://packagecontrol.io)复制的代码粘贴到上一步中打开的底部输入字段中。
- en: 'After completing these steps, restart Sublime Text and you''ll have access
    to a quick-launch installer via this keyboard shortcut: *Ctrl* + *Shift* + *P*.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，重新启动Sublime Text，您将可以通过此键盘快捷键访问快速启动安装程序：*Ctrl* + *Shift* + *P*。
- en: 'This keyboard combination will display a little input in the middle of the
    screen, and you can type the word `install` inside it. This will show different
    options that you can either click on with a mouse or use the `arrow up` and `arrow
    down` keys to highlight, then the `Enter` key to run:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个键盘组合将在屏幕中间显示一个小输入框，您可以在其中输入单词`install`。这将显示不同的选项，您可以使用鼠标单击或使用`箭头上`和`箭头下`键进行突出显示，然后使用`Enter`键运行：
- en: '![](assets/951589bd-b6ae-4cda-985d-1a8a667b29c3.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/951589bd-b6ae-4cda-985d-1a8a667b29c3.png)'
- en: 'Next, select the option that reads Package control: Install package.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，选择读取“Package control: Install package”的选项。'
- en: 'This is the list of packages that we will install:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将安装的软件包列表：
- en: Vue Syntax Highlight, at [https://packagecontrol.io/packages/Vue%20Syntax%20Highlight](https://packagecontrol.io/packages/Vue%20Syntax%20Highlight)
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue Syntax Highlight，网址为[https://packagecontrol.io/packages/Vue%20Syntax%20Highlight](https://packagecontrol.io/packages/Vue%20Syntax%20Highlight)
- en: Vuejs Snippets, at [https://packagecontrol.io/packages/Vuejs%20Snippets](https://packagecontrol.io/packages/Vuejs%20Snippets)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vuejs Snippets，网址为[https://packagecontrol.io/packages/Vuejs%20Snippets](https://packagecontrol.io/packages/Vuejs%20Snippets)
- en: JavaScript Beautify, at [https://packagecontrol.io/packages/Javascript%20Beautify](https://packagecontrol.io/packages/Javascript%20Beautify)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript Beautify，网址为[https://packagecontrol.io/packages/Javascript%20Beautify](https://packagecontrol.io/packages/Javascript%20Beautify)
- en: Interestingly, the Chrome browser has recently* received a similar quick-launch
    functionality, available via the same shortcut keys. To see it in action, you
    can simply open the developer tools utility with the *F12* key and then run the
    *Ctrl* + *Shift* + *P* shortcut keys.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，Chrome浏览器最近*也获得了类似的快速启动功能，可以通过相同的快捷键使用。要查看它的操作，您可以简单地使用*F12*键打开开发者工具实用程序，然后运行*Ctrl*
    + *Shift* + *P*快捷键。
- en: For example, in the launcher that opens, you can type the word node, then click
    on the first command in the drop-down, Capture node screenshot. This command will
    capture a screenshot of the element you are currently on in the DOM tree of the
    DevTools.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在打开的启动器中，您可以输入单词`node`，然后单击下拉菜单中的第一个命令`Capture node screenshot`。此命令将捕获您当前在DOM树中的元素的屏幕截图。
- en: '* A few months ago'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '* 几个月前'
- en: In the next section, we'll look at setting up our Vue-based project in VS Code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在VS Code中设置基于Vue的项目。
- en: Working with Vue.js in VS Code
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在VS Code中使用Vue.js
- en: Although Sublime Text has the advantage of maturity and being light on the system,
    which makes it easy to use on slower machines, VS Code is a viable alternative.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Sublime Text具有成熟和对系统资源消耗较少的优势，这使得它在较慢的机器上易于使用，但VS Code是一个可行的替代方案。
- en: Installing VS Code and extensions
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装VS Code和扩展
- en: Let's navigate to [https://code.visualstudio.com/download](https://code.visualstudio.com/download)
    and download the appropriate version of VS Code for our operating system.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导航到[https://code.visualstudio.com/download](https://code.visualstudio.com/download)，并下载适合我们操作系统的VS
    Code版本。
- en: If you are using Widows 10, you can easily see if your system is 32-bit or 64-bit.
    Simply use the shortcut keys *Winkey* + *X*, then click System in the contextual
    menu. A new window will open and you'll see whether your system is 32-bit or 64-bit
    in the Device Specifications | System type area.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows 10，您可以轻松地查看系统是32位还是64位。只需使用快捷键*Winkey* + *X*，然后在上下文菜单中单击System。一个新窗口将打开，您将在`Device
    Specifications | System type`区域看到您的系统是32位还是64位。
- en: 'Once you have downloaded and opened VS Code, it''s easy to add extensions to
    it. Simply click the bottom-most icon (the extensions icon) on the left side of
    the screen:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您下载并打开了VS Code，就可以轻松地向其添加扩展。只需单击屏幕左侧最下方的图标（扩展图标）：
- en: '![](assets/97362cf0-30ec-4c01-8ea5-b8c44ab19cce.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/97362cf0-30ec-4c01-8ea5-b8c44ab19cce.png)'
- en: 'Clicking the icon will open up the extensions pane, into which you can type
    Vue and get back results similar to this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 单击该图标将打开扩展窗格，您可以在其中输入Vue并获得类似于此的结果：
- en: '![](assets/bc0a53e8-0fd8-45cf-b294-b43753a24bda.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bc0a53e8-0fd8-45cf-b294-b43753a24bda.png)'
- en: Next, simply choose either of the Vue VS Code Extension Packs, then click on
    the green Install button. Extensions that are part of this pack include syntax
    highlighting, snippets, linting and error checking, formatting (such as js-beautify),
    auto completion, hover info, auto-rename-tags, npm support for VS code, ES6 snippets,
    ESLint, and more.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，只需选择Vue VS Code Extension Packs中的任一选项，然后单击绿色的Install按钮。此包含的扩展包括语法高亮、代码片段、代码检查和错误检查、格式化（如js-beautify）、自动完成、悬停信息、自动重命名标签、VS
    Code的npm支持、ES6代码片段、ESLint等。
- en: Alternatively, if you want to avoid bloat in your VS Code extensions, you can
    reduce it somewhat by installing the Vetur extension by Pine Wu instead of the
    previously mentioned Vue extension pack.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您想避免在VS Code扩展中出现臃肿，您可以通过安装Pine Wu的Vetur扩展来减少一些扩展，而不是之前提到的Vue扩展包。
- en: Once the installation is complete, we can simply click the button that reads
    Reload to restart VS Code and activate the extension. Finally, to get back to
    the tree structure of our project, simply click the top-most icon on the left
    side of the screen, just under VS Code's main menu.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们只需单击标有Reload的按钮来重新启动VS Code并激活扩展。最后，要返回到项目的树结构，只需单击屏幕左侧VS Code主菜单下方的最顶部图标。
- en: The structure of our Vue-cli-based project
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于Vue-cli的项目结构
- en: 'In this section, we''ll look at the file structure of our Vue project that
    we have set up using Vue-cli. Our `quickstart-vue` folder structure is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看一下使用Vue-cli设置的Vue项目的文件结构。我们的`quickstart-vue`文件夹结构如下：
- en: '![](assets/411b4431-89b9-476b-ae41-c3f3b6d522ff.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/411b4431-89b9-476b-ae41-c3f3b6d522ff.png)'
- en: 'Let''s first examine the contents of the `main.js` file:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先检查`main.js`文件的内容：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We begin by importing `Vue` from the `vue` folder. This `vue` folder is located
    in your `node_modules` folder.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从`vue`文件夹中导入`Vue`。这个`vue`文件夹位于你的`node_modules`文件夹中。
- en: Next, we import `App` from `App.vue`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从`App.vue`中导入`App`。
- en: As we have already learned, `new Vue` creates a Vue instance, and we then pass
    it the options object.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经学到的，`new Vue`创建了一个Vue实例，然后我们将选项对象传递给它。
- en: 'Inside the options object, we are only setting the `render` property. As we
    can see, the `render` property''s value is an arrow function:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在选项对象中，我们只设置了`render`属性。正如我们所看到的，`render`属性的值是一个箭头函数：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The arrow function accepts, as its parameter, the `App` component that we imported
    on line two of the `main.js` file.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数接受作为其参数我们在`main.js`文件的第二行导入的`App`组件。
- en: 'As you can probably tell, the previous function is written in ES6\. Transpiled
    to ES5, it would look like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，前面的函数是用ES6编写的。转译为ES5后，它会变成这样：
- en: '[PRE24]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding function receives a Vue template to be rendered. Where will it
    render? It will render it in our `index.html` page, replacing whatever static
    piece of the DOM we pass to the `$mount()` function.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数接收一个要呈现的Vue模板。它将在我们的`index.html`页面中呈现，替换我们传递给`$mount()`函数的DOM的任何静态部分。
- en: Which location in the DOM that will be depends on what we pass on as the parameter
    to the `$mount()` function. In the previous code, we passed the `#app` parameter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在DOM中的位置取决于我们将什么作为参数传递给`$mount()`函数。在前面的代码中，我们传递了`#app`参数。
- en: Where does `'#app'` come from? It comes from the `App` component, or, more specifically,
    from the `App.vue` file, located in our `src` folder.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`''#app''`来自哪里？它来自`App`组件，更具体地来说，来自位于我们的`src`文件夹中的`App.vue`文件。'
- en: The `src` folder holds all the actual application code of our Vue project.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`src`文件夹包含我们Vue项目的所有实际应用程序代码。'
- en: 'Note that `main.js` is the only actual JavaScript file in our project—all the
    files in the `src` folder have the `.vue` extension. Every `.vue` file has three
    parts: the template, the script, and the style tag. The template defines the HTML
    of the component, the script defines the JS, and the style tag defines the CSS.
    Also, Vue-cli (with Webpack under the hood) puts all of this together because
    it understands how to work with `.vue` files.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`main.js`是我们项目中唯一的实际JavaScript文件——`src`文件夹中的所有文件都具有`.vue`扩展名。每个`.vue`文件都有三个部分：模板定义了组件的HTML，脚本定义了JS，样式标签定义了CSS。此外，Vue-cli（在底层使用Webpack）将所有这些放在一起，因为它知道如何处理`.vue`文件。
- en: 'Let''s alter the `App.vue` file in our `src` folder, so that it looks like
    this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改我们`src`文件夹中的`App.vue`文件，使其看起来像这样：
- en: '[PRE25]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s also change the contents of `HelloWorld.vue`, so that it looks like
    this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也改变`HelloWorld.vue`的内容，使其看起来像这样：
- en: '[PRE26]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, let''s add another component inside the `src/components/` folder.
    We''ll call it `HelloAgain.vue`, and we''ll give it the following code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们在`src/components/`文件夹中添加另一个组件。我们将其命名为`HelloAgain.vue`，并给它以下代码：
- en: '[PRE27]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'What we did in these three files is that we have mostly just removed some extra
    pieces of code to more clearly demonstrate the following points:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三个文件中，我们主要只是删除了一些额外的代码，以更清楚地展示以下几点：
- en: Each `vue` file holds a single file component
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个`vue`文件都包含一个单文件组件
- en: 'The structure of every single file component follows the same pattern: template
    at the top, script in the middle, and style at the bottom'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个单文件组件的结构都遵循相同的模式：顶部是模板，中间是脚本，底部是样式
- en: Style can be scoped to each individual file
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式可以针对每个单独的文件进行作用域限定
- en: The `App.vue` file imports the components from the `components` folder and exports
    itself so that it can be used by `main.js`
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.vue`文件从`components`文件夹导入组件并导出自身，以便`main.js`可以使用它'
- en: The `HelloWorld` and `HelloAgain` components simply export themselves to the
    parent component, the `App.vue` file
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloWorld`和`HelloAgain`组件只是将自己导出到父组件`App.vue`文件中'
- en: In order to use the newly introduced component (the `HelloAgain` component),
    the `App.vue` file needs to add it inside its `<template>` tag
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了使用新引入的组件（`HelloAgain`组件），`App.vue`文件需要在其`<template>`标签内添加它
- en: The `App.vue` file also needs to both import and export the `HelloAgain` single
    file template so that `main.js` can use it
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.vue`文件还需要导入和导出`HelloAgain`单文件模板，以便`main.js`可以使用它'
- en: '`App.vue`, `HelloWorld.vue`, and `HelloAgain.vue` are examples of single-file
    components. Single-file components are the preferred way of working with components
    in our Vue projects.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`App.vue`，`HelloWorld.vue`和`HelloAgain.vue`是单文件组件的示例。单文件组件是我们Vue项目中使用组件的首选方式。'
- en: 'If you have changed the files as described previously, you should have the
    following screen in your browser at `http://localhost:8080`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照前面描述的更改文件，您应该在浏览器中的`http://localhost:8080`看到以下屏幕：
- en: '![](assets/36843230-2832-419a-8797-b07bdbab04fa.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/36843230-2832-419a-8797-b07bdbab04fa.png)'
- en: 'Now that we have seen how the `vue/components/` folder is organized and how
    it basically works, we will list other important files in our Vue project:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了`vue/components/`文件夹的组织方式和基本工作原理，我们将列出我们Vue项目中的其他重要文件：
- en: List of files that should not be tracked by Git source version control: `.gitignore`
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不应该被Git源代码版本控制跟踪的文件列表：`.gitignore`
- en: Config file for Babel:`.babel.config.js`
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Babel的配置文件：`.babel.config.js`
- en: File that lists the dependencies and other information of our npm-based projects:`package.json`
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出我们基于npm的项目的依赖项和其他信息的文件：`package.json`
- en: 'A manual for our app in markdown format: `README.md`'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应用的markdown格式手册：`README.md`
- en: 'Of course, there is also the public folder, which contains our compiled application,
    referenced from the `index.html` file. This is the file that will ultimately be
    rendered and re-rendered in the browser, as our Vue app keeps compiling. The content
    of the `index` file is very simple:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有一个公共文件夹，其中包含我们编译后的应用程序，从`index.html`文件中引用。这个文件最终将在浏览器中呈现和重新呈现，因为我们的Vue应用程序不断编译。`index`文件的内容非常简单：
- en: '[PRE28]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As mentioned before, the `div` with the `id` attribute set to `app` is our Vue
    app's entry point.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`id`属性设置为`app`的`div`是我们Vue应用程序的入口点。
- en: Now that we have a better understanding of our project structure, we will move
    on to building child components.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对项目结构有了更好的理解，我们将继续构建子组件。
- en: In the next section, we will add some basic functionality to our `HelloAgain`
    component.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将向我们的`HelloAgain`组件添加一些基本功能。
- en: Adding basic functionality to a child component
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向子组件添加基本功能
- en: In this section, we will add some very basic functionality to a child component.
    Before we get into the specifics of how this is done, we will also need to install
    the official Vue Chrome extension.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将向子组件添加一些非常基本的功能。在我们深入了解如何做到这一点之前，我们还需要安装官方的Vue Chrome扩展。
- en: 'The Vue developer tools extension for Chrome is available at this URL: [http://bit.ly/2Pkpk2I](http://bit.ly/2Pkpk2I).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome的Vue开发者工具扩展可以在此URL找到：[http://bit.ly/2Pkpk2I](http://bit.ly/2Pkpk2I)。
- en: Installing the official Vue Chrome extension is straightforward; you just install
    it like any other Chrome extension.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 安装官方的Vue Chrome扩展很简单；您只需像安装其他Chrome扩展一样安装它。
- en: 'Once you have completed the installation, you will have a Vue logo available
    in the top-right area of Chrome, and clicking that logo will give you the following
    message:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你将在Chrome右上角看到一个Vue标志，点击该标志将会给你以下消息：
- en: Vue.js is detected on this page. Open DevTools and look for the Vue panel.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js在此页面上被检测到。打开DevTools并查找Vue面板。
- en: 'Opening DevTools is easy: just press the F12 key. Then you can find the Vue
    panel as one of the tabs in the area which has the following tabs: Elements, Console,
    Sources, and so on. You should get something similar to the following screen:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 打开DevTools很容易：只需按F12键。然后你可以在具有以下标签的区域中找到Vue面板：元素、控制台、源等。你应该会得到类似以下屏幕的东西：
- en: '![](assets/57fb3263-e102-4969-a3d2-8b4dc908bc44.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57fb3263-e102-4969-a3d2-8b4dc908bc44.png)'
- en: 'Back in VS Code, let''s open up the `HelloAgain.vue` component and update the
    template section of the code so that it looks like this:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 回到VS Code，让我们打开`HelloAgain.vue`组件，并更新代码的模板部分，使其看起来像这样：
- en: '[PRE29]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let''s also update the `script` tag, like so:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也更新`script`标签，就像这样：
- en: '[PRE30]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, we''ll update the styles to make our button look nicer:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将更新样式，使我们的按钮看起来更漂亮：
- en: '[PRE31]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The end result of this update will be rendered in our browser as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这次更新的最终结果将在我们的浏览器中呈现如下：
- en: '![](assets/36b70dfd-26c2-402f-a6ae-6657f22cc9bd.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/36b70dfd-26c2-402f-a6ae-6657f22cc9bd.png)'
- en: 'Now that we have looked at building templates and working with some basic functionality,
    let''s switch our focus to another important topic: communication between components.
    We''ll begin by revisiting props, which are a way to communicate between parent
    and child components.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过构建模板和使用一些基本功能，让我们把重点转移到另一个重要的主题：组件之间的通信。我们将从重新审视props开始，这是一种在父组件和子组件之间通信的方式。
- en: Adding props to our HelloAgain.vue
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的HelloAgain.vue添加props
- en: In this section, we will briefly revisit props to see a practical example of
    how to communicate between a parent and a child component in Vue. In other words,
    we want to take some data from the parent component and pass it to the child component.
    The data we will be passing will simply be additional numbers to be included in
    the counter of our `quickstart-vue` app.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将简要回顾props，看一个在Vue中如何在父组件和子组件之间通信的实际例子。换句话说，我们想从父组件获取一些数据并将其传递给子组件。我们将要传递的数据只是要包含在我们的`quickstart-vue`应用程序的计数器中的额外数字。
- en: 'In our `App.vue` file, we''ll add a button:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`App.vue`文件中，我们将添加一个按钮：
- en: '[PRE32]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The button is placed between the two components we already had. We have added
    a `v-on` directive, tracking a click event on the button. The click event will
    trigger the `addTen` method, so we will specify it in between the `<script>` tags
    of our `App.vue` file:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮放置在我们已经拥有的两个组件之间。我们已经添加了`v-on`指令，跟踪按钮上的点击事件。点击事件将触发`addTen`方法，因此我们将在`App.vue`文件的`<script>`标签之间指定它：
- en: '[PRE33]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `addTen` method is using the `countUp` piece of data, so let''s add this
    new data to our `<script>` too:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`addTen`方法正在使用`countUp`数据片段，所以让我们也将这个新数据添加到我们的`<script>`中：'
- en: '[PRE34]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: So, initially, our `data` function in `App.vue` returns `countUp` of zero. Whenever
    a user clicks the button in our `App.vue` component, the value of `countUp` increases
    by 10\. This value is the data that we want to pass to the child component, namely
    to the `HelloAgain.vue` child component. Our goal is to add this data from the
    parent to the value stored in the counter in the child component.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最初，我们在`App.vue`中的`data`函数返回零的`countUp`。每当用户点击我们的`App.vue`组件中的按钮时，`countUp`的值增加10。这个值是我们想要传递给子组件的数据，即`HelloAgain.vue`子组件中计数器中存储的值。
- en: 'This is where the props syntax comes in. To specify to our `HelloAgain.vue`
    component that it should expect the data from the parent, we will add the following
    code:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`props`语法的用法。为了告诉我们的`HelloAgain.vue`组件它应该期望来自父组件的数据，我们将添加以下代码：
- en: '[PRE35]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The value of the `props` key is an array, and we add strings of props that the
    child component should be expecting from the parent.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`props`键的值是一个数组，我们在其中添加了子组件应该从父组件那里期望的`props`字符串。'
- en: Note that the `props` option can also be an object. An example of using an object
    for our `props` option would be, for example, if we'd want to validate the data
    being passed from the parent to the child component. We will validate props in
    later chapters of this book.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`props`选项也可以是一个对象。使用对象作为我们`props`选项的示例是，例如，如果我们想要验证从父组件传递给子组件的数据。我们将在本书的后面章节中验证`props`。
- en: 'Still in `HelloAgain.vue`, we will alter the `<span>` tag inside its template,
    like this:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在`HelloAgain.vue`中，我们将修改其模板内的`<span>`标签，就像这样：
- en: '[PRE36]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now that we have set up the code in both the parent and the child, it''s just
    the matter of passing the data from one to the other. We will do that inside the
    `App.vue` template by adding the `v-bind` directive to the `<HelloAgain />` tag.
    Here is the updated `App.vue` template:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在父组件和子组件中设置了代码，只需将数据从一个传递到另一个。我们将在`App.vue`模板中通过在`<HelloAgain />`标签上添加`v-bind`指令来实现这一点。以下是更新后的`App.vue`模板：
- en: '[PRE37]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note that we are binding the `counterFromParent` to the value of `countUp`.
    The value of `countUp` starts from zero, and upon every button click on the parent's
    button, the `addTen` method will be run, which we specify in the `methods` option
    of the parent `<script>` tag.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将`counterFromParent`绑定到`countUp`的值。`countUp`的值从零开始，每次点击父组件按钮时，将运行`addTen`方法，我们在父组件`<script>`标签的`methods`选项中指定了这一点。
- en: The `addTen` method adds 10 to the current value of `countUp`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`addTen`方法将10添加到`countUp`的当前值。'
- en: On the child side, in the `HelloAgain.vue` component, we simply add the current
    value of `counterFromParent` to our `counter` variable. To get the value of `counterFromParent`,
    we list it in the `props` array of the `<script>` tag of our `HelloAgain.vue`
    component.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在子组件`HelloAgain.vue`中，我们只需将`counterFromParent`的当前值添加到我们的`counter`变量中。要获取`counterFromParent`的值，我们将其列在`HelloAgain.vue`组件的`<script>`标签的`props`数组中。
- en: Passing data from children to parent components
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从子组件传递数据到父组件
- en: 'To pass data from a child component to a parent component, we use the following
    syntax:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要从子组件传递数据到父组件，我们使用以下语法：
- en: '[PRE38]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `$` sign is there to signify a built-in Vue function. This specific one,
    `$emit`, is used to send a custom event to the parent. The first parameter that
    we pass to the `$emit` function is the name of the custom event. For example,
    we could reset the counter to zero, so we might name the custom event like this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`$`符号用于表示内置的Vue函数。这个特定的`$emit`函数用于向父组件发送自定义事件。我们传递给`$emit`函数的第一个参数是自定义事件的名称。例如，我们可以将计数器重置为零，所以我们可以像这样命名自定义事件：'
- en: '[PRE39]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The second argument is the data to be passed, so we will pass the current counter
    value, like this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是要传递的数据，所以我们将传递当前的计数器值，就像这样：
- en: '[PRE40]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Of course, this means that we need to update the value of `countUp` so that
    it goes back to zero. In order to do that, we need to update the `methods` option
    in the `script` tag of our `HelloAgain` child component so that it looks like
    this:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这意味着我们需要更新`countUp`的值，使其返回到零。为了做到这一点，我们需要更新`HelloAgain`子组件的`<script>`标签中的`methods`选项，使其看起来像这样：
- en: '[PRE41]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Basically, we are saying in our methods option that whenever the `resetTheCounter`
    method is run, the `countUp` value should be reset to `0`. Next, we follow up
    by emitting this updated value in the `counterHasBeenReset` custom event.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们在方法选项中说，每当运行`resetTheCounter`方法时，`countUp`的值应该被重置为`0`。接下来，我们通过在`counterHasBeenReset`自定义事件中发出这个更新后的值来跟进。
- en: 'Now let''s add a reset button to the child component `template` tag, also in
    `HelloAgain.vue`. We will do that by simply adding another line to our `template`
    tag:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在子组件`template`标签中添加一个重置按钮，也在`HelloAgain.vue`中。我们只需在`template`标签中添加另一行即可：
- en: '[PRE42]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: As we see here, the button click will run the `resetTheCounter` method.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这里看到的，按钮点击将运行`resetTheCounter`方法。
- en: 'Now that we are emitting the event, we will capture it in the parent component
    by using the following syntax:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在发出事件，我们将使用以下语法在父组件中捕获它：
- en: '[PRE43]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As we can see here, we have added to the `<HelloAgain>` tag in our parent component.
    Specifically, we have added a `v-on` directive as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这里看到的，我们在父组件中的`<HelloAgain>`标签中添加了内容。具体来说，我们添加了一个`v-on`指令，如下所示：
- en: '[PRE44]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The component is listening for the `counterHasBeenReset` custom event, which
    will be emitted from the child component. When such an event is captured in the
    parent, the value of `countUp` will be set to whatever its value is in the event
    itself. Since we have set it to zero, that's what it will be.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件正在监听`counterHasBeenReset`自定义事件，该事件将从子组件中发出。当在父组件中捕获到这样的事件时，`countUp`的值将被设置为事件本身中的值。由于我们将其设置为零，它就是零。
- en: There are alternative ways to communicate between components in Vue (both parent-to-child
    and child-to-child), and we will discuss them in a later chapter, when we discuss
    Vuex.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中，有其他的方式来在组件之间进行通信（包括父到子和子到子），我们将在后面的章节中讨论它们，当我们讨论Vuex时。
- en: The end result of this exercise is that we will reset the values in the counter
    that have been added from the parent component, but the event will not affect
    the values added from the child component.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习的最终结果是，我们将重置从父组件中添加的计数器中的值，但该事件不会影响从子组件中添加的值。
- en: Now that we have learned about custom events, we can continue our discussion
    of components by looking at slots.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了自定义事件，我们可以通过查看插槽来继续讨论组件。
- en: Introduction to slots
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插槽介绍
- en: Slots are a way to reuse components. With props, we are passing data to a component.
    But what if we wanted to pass entire components to other components? That's where
    slots come in.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 插槽是重用组件的一种方式。通过props，我们将数据传递给组件。但是，如果我们想要将整个组件传递给其他组件怎么办？这就是插槽的用武之地。
- en: Slots are simply a way to pass on more complex code to our components. They
    can be just some HTML, or even entire components.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 插槽只是一种将更复杂的代码传递给我们的组件的方法。它们可以是一些HTML，甚至是整个组件。
- en: 'To insert HTML elements from a parent to a child component, we use the `slot`
    element inside a child component:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要将HTML元素从父组件插入到子组件中，我们在子组件内部使用`slot`元素：
- en: '[PRE45]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The actual content of the slot is specified in the parent component.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 插槽的实际内容在父组件中指定。
- en: 'Here is an example of slots in use:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这是插槽使用的一个例子：
- en: '[PRE46]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This example can be viewed live here: [https://codepen.io/AjdinImsirovic/pen/ERoLQM](https://codepen.io/AjdinImsirovic/pen/ERoLQM).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可以在这里实时查看：[https://codepen.io/AjdinImsirovic/pen/ERoLQM](https://codepen.io/AjdinImsirovic/pen/ERoLQM)。
- en: 'There are several key points when working with slots:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理插槽时有几个关键点：
- en: Slots are implemented based on the web component's spec draft
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插槽是基于Web组件规范草案实现的
- en: The slot styling is determined by the scoped style tag in the child component
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插槽的样式由子组件中的作用域样式标签确定
- en: Slots enable the use of composable components
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插槽使可组合组件的使用成为可能
- en: You can use any template code in slots
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在插槽中使用任何模板代码
- en: If you have more than one slot, you can name them (using the `name` attribute)
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您有多个插槽，可以为它们命名（使用`name`属性）
- en: If you have more than one slot, you can leave out the `name` attribute in one
    of them, and that one will be the default slot
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您有多个插槽，可以在其中一个插槽中省略`name`属性，那个插槽将成为默认插槽
- en: As of Vue 2.1.0, slots can be scoped
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Vue 2.1.0开始，插槽可以被作用域化
- en: Slot scope can be destructured using ES2015 expression destructuring
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插槽作用域可以使用ES2015表达式解构进行解构
- en: To add default information to a slot, you can simply add content to the slot
    tag.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要向插槽添加默认信息，只需在插槽标记中添加内容。
- en: 'It''s as simple as changing the code of the slot tag from this:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将插槽标记的代码从这个：
- en: '[PRE47]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'And changing it to this:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为这个：
- en: '[PRE48]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: If you update the provided example pen by adding the default unnamed slot code
    referenced just above this line, you will notice the slot gets populated even
    though we have not referenced it in our Vue instance.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过在提供的示例笔中添加上面引用的默认未命名插槽代码来更新它，您会注意到即使我们没有在Vue实例中引用它，插槽也会被填充。
- en: Summary
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at Vue's components. We discussed the Vue component
    hierarchy and the differences between global and local components. We fired up
    Vue-cli v3 and learned how to use it. We worked with `.vue` files and we set up
    the development in a couple of code editors. We learned about adding functionality
    to child components and the use cases for both props and slots. Finally, we looked
    at component communication in Vue.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Vue的组件。我们讨论了Vue组件层次结构以及全局和本地组件之间的区别。我们启动了Vue-cli v3并学习了如何使用它。我们使用`.vue`文件并在几个代码编辑器中设置了开发环境。我们了解了如何向子组件添加功能以及props和slots的用例。最后，我们看了Vue中的组件通信。
- en: In the next chapter, we will discuss filters as a way of changing what gets
    rendered on the screen without affecting the data behind it. We will also see
    how to adhere to the DRY rule of programming with the help of mixins.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论过滤器作为改变屏幕上呈现内容的一种方式，而不影响其背后的数据。我们还将看到如何在编程中遵循DRY规则，借助混合来实现。
