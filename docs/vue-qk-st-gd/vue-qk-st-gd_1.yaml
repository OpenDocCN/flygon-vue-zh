- en: Introducing Vue
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Vue
- en: In this chapter, we will look into how to start learning Vue 2\. This chapter
    will show you the easiest way to get started quickly and how to keep track of
    your progress easily with the help of the available SaaS platforms.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何开始学习Vue 2。本章将向您展示快速入门的最简单方法，以及如何借助可用的SaaS平台轻松跟踪您的进度。
- en: We will also look at why Vue is getting so popular, and why we should use it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将探讨Vue为什么变得如此受欢迎，以及为什么我们应该使用它。
- en: 'Furthermore, we''ll discuss the basic building blocks of Vue: mustache templates,
    directives, modifiers, methods, and computed properties.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将讨论Vue的基本构建模块：mustache模板、指令、修饰符、方法和计算属性。
- en: Along the way, we will look at a number of practical examples. Let's begin by
    looking at just what exactly Vue is.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们将看到许多实际的例子。让我们首先看看Vue到底是什么。
- en: 'In this chapter, we will take a look at the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下以下主题：
- en: What is Vue?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Vue？
- en: What problems does Vue solve?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue解决了哪些问题？
- en: Why use Vue?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用Vue？
- en: What is Vue?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Vue？
- en: Vue is a simple and easy-to-use JS framework which appeared in 2013\. It is
    the successful result of taking some excellent ideas from Angular and React and
    combining them in an easy-to-use package.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Vue是一个简单易用的JS框架，于2013年出现。它成功地将一些优秀的想法从Angular和React中提取出来，并结合在一个易于使用的包中。
- en: Compared with other popular frontend frameworks, Vue comes out on top for simplicity
    and ease of use.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他流行的前端框架相比，Vue在简单性和易用性方面表现出色。
- en: Let's see how we can start using it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何开始使用它。
- en: The quickest way to start using Vue2
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Vue2的最快方法
- en: In the last decade, a lot of the tools for web development have moved to the
    web, so let's go with the flow and start a new pen on [http://codepen.io/](http://codepen.io/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年里，很多用于网页开发的工具已经转移到了网络上，所以让我们顺应潮流，在[http://codepen.io/](http://codepen.io/)上开始一个新的项目。
- en: You don't have to be a member of [https://codepen.io/](https://codepen.io/) to
    create pens there—you can just save them with the blanket username `Captain Anonymous`.
    However, it's better to open an account so you have all your experiments in one
    place.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您不必成为[https://codepen.io/](https://codepen.io/)的成员才能在那里创建项目——您可以使用用户名`Captain
    Anonymous`保存它们。但最好还是注册一个账户，这样您的所有实验都在一个地方。
- en: 'Once you navigate your browser to [https://codepen.io](https://codepen.io),
    you''ll be greeted with the following screen:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将浏览器导航到[https://codepen.io](https://codepen.io)，您将看到以下屏幕：
- en: '![](assets/a22c888d-87fc-45c2-a410-f1a05a28556b.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a22c888d-87fc-45c2-a410-f1a05a28556b.png)'
- en: 'Click on the Create dropdown (in the main navigation, in the top-right area
    of the screen), and then click New Pen. Once you do, you will see the default
    editor setup:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 点击创建下拉菜单（在主导航栏中，位于屏幕右上角），然后点击新建项目。一旦您这样做了，您将看到默认的编辑器设置：
- en: '![](assets/054f991f-fa02-48c4-8f43-a86eb87133c1.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/054f991f-fa02-48c4-8f43-a86eb87133c1.png)'
- en: 'Next, click the Settings button in the top right of the screen, and in the
    popup that appears choose JavaScript:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击屏幕右上角的设置按钮，在弹出的窗口中选择JavaScript：
- en: '![](assets/75cbf157-55fa-4267-b981-c4216eeaf22e.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/75cbf157-55fa-4267-b981-c4216eeaf22e.png)'
- en: 'Next, in the Quick-add drop-down field, select the Vue option. Once you do,
    the first input will be filled out with the current minified version of Vue which
    is served from the Cloudflare CDN, or, more specifically, from this link: [https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.min.js](https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.min.js).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在快速添加下拉字段中，选择Vue选项。一旦您这样做了，第一个输入框将填写当前的Vue的压缩版本，它是从Cloudflare CDN提供的，或者更具体地说，是从这个链接提供的：[https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.min.js](https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.min.js)。
- en: That's it! We're ready to start using Vue2 in our Codepen project.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们已经准备好在我们的Codepen项目中开始使用Vue2了。
- en: 'One thing to understand about Vue is that it makes our HTML dynamic. This is
    achieved by adding **mustache syntax**. This syntax is very easy to understand.
    We simply insert it inside an HTML element. For example, we can add mustache syntax
    to an `h1` tag like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Vue要理解的一件事是，它使我们的HTML动态化。这是通过添加**胡须语法**来实现的。这种语法非常容易理解。我们只需将其插入到HTML元素中。例如，我们可以像这样向`h1`标签添加胡须语法：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, let''s go over how this works in detail. Feel free to work on your own
    pen or see the example here: [https://codepen.io/AjdinImsirovic/pen/rKYyvE](https://codepen.io/AjdinImsirovic/pen/rKYyvE).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们详细了解一下这是如何工作的。随意在您自己的pen上工作或在此处查看示例：[https://codepen.io/AjdinImsirovic/pen/rKYyvE](https://codepen.io/AjdinImsirovic/pen/rKYyvE)。
- en: Mustache template example
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 胡须模板示例
- en: 'Let''s begin working with our first pen:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用我们的第一个pen：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can now see our HTML being rendered in the CodePen preview pane, with the
    following text printed on the screen:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在CodePen预览窗格中看到我们的HTML正在呈现，屏幕上打印出以下文本：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that the CodePen app will often update the preview pane even without saving,
    which is a lot better than refreshing the browser—that must be done when working
    on your projects locally. Still, it is good to save your CodePen projects often,
    to not lose any changes (in the odd case of your browser freezing or something
    else out of the ordinary happening).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，CodePen应用程序通常会在不保存的情况下更新预览窗格，这比刷新浏览器要好得多——在本地项目上工作时必须这样做。尽管如此，经常保存您的CodePen项目是很好的，以免丢失任何更改（在浏览器冻结或发生其他异常情况时）。
- en: 'Next, let''s add the following Vue code to the JS pane inside our pen:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将以下Vue代码添加到我们pen内部的JS窗格中：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, let''s update the HTML so that the Vue code can work its magic:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们更新HTML，以便Vue代码可以发挥其魔力：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous code example, we can see how we use mustache templates to dynamically
    insert data into our HTML.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们可以看到我们如何使用胡须模板将数据动态插入到我们的HTML中。
- en: Mustache templating is achieved by simply passing the keys of our data object
    into our HTML tags and surrounding the keys with the opening `{{` and closing
    `}}` tags.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地将数据对象的键传递到我们的HTML标记中，并用开放的`{{`和关闭的`}}`标记将键括起来，可以实现胡须模板。
- en: As mentioned before, CodePen will auto-update the preview pane, but this will
    not affect the preview since we are effectively producing the same output as we
    did when we were using just plain HTML.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，CodePen将自动更新预览窗格，但这不会影响预览，因为我们实际上产生的输出与我们仅使用纯HTML时所做的输出相同。
- en: 'Now we can play with it simply by changing the key-value pairs inside our data
    entry:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过简单地更改数据输入中的键值对来玩耍：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This time, the output will auto-update to this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，输出将自动更新为这样：
- en: This is an h1
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个h1
- en: Just an h2 heading
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 只是一个h2标题
- en: Vue2 is fun
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Vue2很有趣
- en: 'We can also change our entry point. For example, we can have Vue access only
    the `p` tag:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以更改我们的入口点。例如，我们可以让Vue只访问`p`标签：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After this change, our preview pane will show the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 更改后，我们的预览窗格将显示以下内容：
- en: '{{ heading1 }}'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '{{ heading1 }}'
- en: Just an {{ heading2 }}
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 只是一个{{ heading2 }}
- en: Vue2 is fun
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Vue2很有趣
- en: 'From this output, we can conclude that our mustache templates will be rendered
    in our HTML output as regular text if either of the following things happen:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个输出中，我们可以得出结论，如果发生以下任何一种情况，我们的胡须模板将被呈现为常规文本：
- en: Our entry point does not reference the data
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的入口点没有引用数据
- en: The entry in our data does not exist
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的数据中不存在的输入
- en: We've also seen how our entry point can be any kind of selector. You can think
    of it as being similar to how you can target different elements in jQuery.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了我们的入口点可以是任何类型的选择器。您可以将其视为类似于在jQuery中定位不同的元素。
- en: 'For example, we could have a more complex selector as our app''s entry point:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以将更复杂的选择器作为我们应用的入口点：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using Vue's data option as a function
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue的数据选项作为函数
- en: Note that the `data` option of our Vue instance can be either an object or a
    function. An example of data as an object can be seen in the previous code. Using
    data as a function is easy as well.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的Vue实例的`data`选项可以是对象，也可以是函数。数据作为对象的示例可以在先前的代码中看到。使用数据作为函数也很容易。
- en: Data as an object doesn't work well with reusable components. For this reason,
    using data as a function is, generally speaking, a more useful way to use the
    data option in Vue.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 数据作为对象与可重用组件不兼容。因此，通常来说，将数据作为函数使用是使用Vue中数据选项的更有用的方式。
- en: 'Let''s see another pen. This time, we''ll use the data option as a function,
    instead of as an object. The pen is available here: [https://codepen.io/AjdinImsirovic/pen/aKVJgd](https://codepen.io/AjdinImsirovic/pen/aKVJgd).
    The only change we''ll make is in our Vue code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个笔记。这次，我们将使用数据选项作为函数，而不是作为对象。笔记在这里：[https://codepen.io/AjdinImsirovic/pen/aKVJgd](https://codepen.io/AjdinImsirovic/pen/aKVJgd)。我们唯一要做的改变是我们的Vue代码：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that we're familiar with the very basics of Vue syntax, let's look at what
    it can be used for.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们熟悉了Vue语法的基础知识，让我们看看它可以用来做什么。
- en: What problems does Vue solve?
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue解决了什么问题？
- en: 'Without trying to make an extensive list, let''s quickly highlight some of
    Vue''s greatest strengths:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不打算列出一个详尽的清单，让我们快速地强调一些Vue最大的优点：
- en: Vue—a jQuery successor?
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue——jQuery的继任者？
- en: Vue is a great learning tool for beginners
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue对于初学者来说是一个很好的学习工具
- en: Vue is a versatile and progressive framework
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue是一个多才多艺和渐进的框架
- en: Vue is an awesome tool for animations and interactions
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue是一个用于动画和交互的很棒的工具
- en: Vue's approach is similar to other modern frontend frameworks and libraries
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue的方法与其他现代前端框架和库类似
- en: Next, let's briefly go over each of these points.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们简要地概述每一点。
- en: Vue, a jQuery successor
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue，jQuery的继任者
- en: 'The famous jQuery library appeared in 2006\. When it came out, it did a few
    things beautifully:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 著名的jQuery库于2006年出现。当它出现时，它做了一些非常好的事情：
- en: It made writing cross-browser JavaScript a lot easier, which was a big plus
    at the time since it dramatically decreased the need for developers to mess with
    various browsers' quirks and inconsistencies
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使得编写跨浏览器的JavaScript变得更容易，这在当时是一个很大的优势，因为它大大减少了开发人员处理各种浏览器怪癖和不一致性的需求
- en: It had a simple syntax that made it easier to target and manipulate specific
    DOM nodes, which is beautifully phrased in their motto *write less, do more*
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个简单的语法，使得更容易定位和操作特定的DOM节点，这在他们的座右铭“写得更少，做得更多”中表达得很好
- en: It was an excellent entry point to learning JavaScript in general
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是学习JavaScript的绝佳入门点
- en: It had a great API that made working with Ajax simple and easy
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个很棒的API，使得使用Ajax变得简单和容易
- en: However, a lot has changed since then—for the better.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，自那时以来发生了很多变化，变得更好了。
- en: Arguably, the biggest improvement that happened in JavaScript-land between 2006
    and today is the virtual DOM.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，2006年至今在JavaScript领域发生的最大改进是虚拟DOM。
- en: 'The virtual DOM was a paradigm shift: we no longer had to write procedural,
    spaghetti JS to instruct the browser on how to traverse and manipulate the DOM.
    Instead of telling the browser *how* to update the DOM, we can now simply tell
    it *what* to update. Or, to be more specific, we tell *a framework* what to update—a
    framework like View or React. The actual implementation of the virtual DOM is
    framework-specific and not really something to be concerned with at this point.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟DOM是一种范式转变：我们不再需要编写过程化、混乱的JS来指示浏览器如何遍历和操作DOM。我们现在不再告诉浏览器*如何*更新DOM，而是告诉它*更新*什么。或者更具体地说，我们告诉*一个框架*要更新什么——像View或React这样的框架。虚拟DOM的实际实现是特定于框架的，目前不需要太在意。
- en: We can now work with the DOM indirectly, by using *declarative* code that deals
    with the virtual DOM implementation of the underlying framework. This abstraction
    is the one thing that more or less made jQuery redundant.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过使用处理底层框架的虚拟DOM实现的*声明式*代码来间接地使用DOM。这种抽象是使jQuery或多或少变得多余的一件事。
- en: Of course, since so many apps are still powered by jQuery and since legacy code
    has a tendency to stick around, jQuery *will* be alive and well in the years to
    come.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，由于仍然有很多应用程序由jQuery提供动力，并且由于遗留代码有粘性的倾向，jQuery在未来几年内仍将活跃。
- en: However, the paradigm shift in the way we think about DOM manipulation makes
    Vue a strong contender to jQuery's throne as the most popular game in town.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们对DOM操作方式的范式转变使得Vue成为与jQuery竞争激烈的对手，成为当今最受欢迎的游戏。
- en: 'Vue also has other advantages: it is an excellent starting point to learn present-day
    frontend development. The barrier to entry is really low.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Vue还有其他优势：它是学习当今前端开发的绝佳起点。入门门槛非常低。
- en: A learning tool for beginners
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个初学者的学习工具
- en: If a jQuery developer was faced with the option of learning either of the modern
    frontend frameworks/libraries, React, Angular, Vue, Ember... which one would probably
    be the easiest to get started with?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个jQuery开发人员面临学习现代前端框架/库（React、Angular、Vue、Ember...）的选择，哪一个可能是最容易入门的呢？
- en: Vue, of course!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当然是Vue！
- en: As we've seen already, getting started with Vue can be as simple as importing
    a CDN. And since we humans are wired to thrive on small, frequent victories, Vue
    seems to be the happy route to take. This is not to say that a developer should
    not try to learn other frontend frameworks too. It just seems that Vue is the
    easiest way to get started and the best way to get productive quickly.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，使用Vue可以简单到只需导入CDN。由于我们人类天生喜欢小而频繁的胜利，Vue似乎是一条快乐的道路。这并不是说开发人员不应该尝试学习其他前端框架。只是Vue似乎是最简单的入门方式，也是最快速提高生产力的最佳方式。
- en: A versatile and progressive framework
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个多才多艺的渐进式框架
- en: The official website for Vue JS says that Vue is *the Progressive JavaScript
    Framework*. This means you can add Vue to an existing server-side project incrementally.
    Basically, you can add Vue to just one simple section of your website. No wonder
    Laravel chose to bundle with Vue on its frontend.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Vue JS的官方网站称Vue为*渐进式JavaScript框架*。这意味着您可以逐步将Vue添加到现有的服务器端项目中。基本上，您可以将Vue添加到您网站的一个简单部分。难怪Laravel选择在其前端与Vue捆绑在一起。
- en: But you don't have to settle for only sprinkling Vue in here and there. You
    can also extend it using Vuex and Vue-Router. This makes Vue very versatile and
    usable in a number of different scenarios.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但你不必只在这里和那里使用Vue。您还可以使用Vuex和Vue-Router进行扩展。这使得Vue非常灵活，可以在许多不同的场景中使用。
- en: A tool for animations and transitions
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画和过渡工具
- en: If you need to make high-performance animations and transitions, look no further
    than Vue! Vue's animations API is very easy to understand and it's a joy to use.
    It is so easy to do animations in Vue that you will be amazed at how much you
    can accomplish in a very short time.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要进行高性能的动画和过渡效果，那就毫无疑问选择Vue！Vue的动画API非常易于理解，使用起来非常愉快。在Vue中做动画是如此容易，以至于您会惊讶于您在很短的时间内可以完成多少工作。
- en: Features similar to other modern frontend frameworks and libraries
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他现代前端框架和库类似的功能
- en: 'Just like other modern frontend frameworks, such as React and Angular, Vue
    has the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他现代前端框架（如React和Angular）一样，Vue也具有以下特点：
- en: Virtual DOM
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟DOM
- en: A command-line interface (Vue-cli)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行界面（Vue-cli）
- en: State management (Vuex)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态管理（Vuex）
- en: Routing (Vue-Router)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由（Vue-Router）
- en: 'However, it seems that Vue''s core team is going out of their way to make Vue
    as approachable as possible. This is evident in several examples:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，似乎Vue的核心团队正在尽最大努力使Vue尽可能易于接近。这在几个例子中是显而易见的：
- en: The effort they've put in to avoid the hassle of setting up Vue-cli, which makes
    it very easy to get started with
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们为了避免设置Vue-cli的麻烦所付出的努力，这使得入门非常容易
- en: The lack of complicated toolchains
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂的工具链的缺乏
- en: The simplicity of Vue's API
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue的API的简单性
- en: Like the official project's website states, Vue is approachable, versatile,
    and performant.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 就像官方项目的网站所述，Vue是易于接近，多才多艺和高性能的。
- en: Why use Vue?
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用Vue？
- en: 'We have discussed the problems that Vue solves in the previous section. In
    this section, we will look at practical examples of why it is a pleasure to work
    with:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前一节讨论了Vue解决的问题。在本节中，我们将看一下为什么与之合作是一种乐趣的实际例子：
- en: Declarative code (we tell Vue what to do, not how to do it)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明性代码（我们告诉Vue要做什么，而不是如何做）
- en: Easy to understand syntax (it's as minimal as it can get)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于理解的语法（尽可能简洁）
- en: Feels like a right fit for a variety of projects
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 感觉适合各种项目
- en: Declarative code
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明性代码
- en: Let's compare vanilla JavaScript code with Vue JavaScript code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将原生JavaScript代码与Vue JavaScript代码进行比较。
- en: For this example, we'll print out members of an array.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们将打印出一个数组的成员。
- en: 'In vanilla JavaScript, this will be the code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在原生JavaScript中，这将是代码：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this file, the focus should be on the code inside the `script` tags.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，重点应该放在`script`标签内的代码上。
- en: 'You can see this example in the form of a pen at this URL: [https://codepen.io/AjdinImsirovic/pen/xzPdxO](https://codepen.io/AjdinImsirovic/pen/xzPdxO).'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此URL的表单中看到此示例：[https://codepen.io/AjdinImsirovic/pen/xzPdxO](https://codepen.io/AjdinImsirovic/pen/xzPdxO)。
- en: 'There are several things that we are doing in this code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们正在做几件事：
- en: We are setting `array1`, which will later populate the list items we will create
    dynamically
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在设置`array1`，它将稍后填充我们将动态创建的列表项
- en: We are creating a `ul`—an unordered list element that will wrap all our list
    items (all our `li` elements)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在创建一个`ul`——一个无序列表元素，它将包裹我们所有的列表项（所有我们的`li`元素）
- en: We are setting the styles for our `ul`
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在为我们的`ul`设置样式
- en: We are appending `unorderedList` to the body of our document
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在将`unorderedList`附加到我们文档的主体
- en: Next, we use a `for` loop to create three `li` elements
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用`for`循环创建三个`li`元素
- en: Still inside the `for` loop, we add a class to each list item
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`for`循环中，我们为每个列表项添加一个类
- en: We then append each of them to the unordered list element
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将它们中的每一个附加到无序列表元素
- en: Finally, we add `innerHTML` to each list item
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们为每个列表项添加`innerHTML`
- en: Many objections could be made to the way that this code is made. We could have
    used a `forEach`; we could have avoided adding styles the way we did and instead
    called the CSS from a separate file. But the biggest objection is how fragile
    this code is. Let's contrast this code with the same thing written in Vue.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这段代码，可能会有很多反对意见。我们本可以使用`forEach`；我们本可以避免以我们的方式添加样式，而是从一个单独的文件中调用CSS。但最大的反对意见是这段代码有多脆弱。让我们将这段代码与用Vue编写的相同内容进行对比。
- en: 'In Vue, our code will look like this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中，我们的代码将如下所示：
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The code for this example can be found here: [https://codepen.io/AjdinImsirovic/pen/VdrbYW](https://codepen.io/AjdinImsirovic/pen/VdrbYW).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码可以在这里找到：[https://codepen.io/AjdinImsirovic/pen/VdrbYW](https://codepen.io/AjdinImsirovic/pen/VdrbYW)。
- en: As we can see at just a simple glance, Vue's code is a lot easier to understand
    and reason about in comparison to the same code implemented in vanilla JavaScript.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在简单的一瞥中所看到的，与在原生JavaScript中实现的相同代码相比，Vue的代码更容易理解和推理。
- en: The `el` here is the entry point for our Vue app. The `data` option is the actual
    data our Vue app will work with.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 `el` 是我们 Vue 应用的入口点。`data` 选项是我们的 Vue 应用将使用的实际数据。
- en: 'There''s also another major benefit to this setup: once you understand how
    Vue works, any other project that uses Vue will simply make sense to you, which
    will yield increased productivity and efficiency.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置还有另一个主要好处：一旦你了解了 Vue 的工作原理，任何使用 Vue 的其他项目对你来说都会变得简单明了，这将提高生产力和效率。
- en: The Vue way of doing things thus promotes being faster and doing more things
    in less time.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 的方式促进更快速地完成更多事情。
- en: Feels like a right fit for a variety of projects
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对各种项目来说都是合适的选择
- en: One of the strengths of Vue is the possibility of incremental implementation.
    If you would just like to make a quick, simple experiment in Vue, no problems.
    You can start with Vue in under a minute, literally.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 的一个优点是可以逐步实现。如果你只是想在 Vue 中进行一个快速、简单的实验，没有问题。你可以在不到一分钟的时间内开始使用 Vue。
- en: This makes it great for converting legacy projects, building projects from scratch,
    or for simple experiments.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得它非常适合转换传统项目、从头开始构建项目，或者进行简单的实验。
- en: 'Vue is also maturing quickly. There is a vibrant Vue community and a lot of
    developers are working on it continuously. For example, one of the arguments for
    people to choose React over Vue was the lack of a framework to build native mobile
    apps in Vue. That''s no longer the case: Vue Native is available as of June 2018\.
    You can check it out at [https://github.com/GeekyAnts/vue-native-core](https://github.com/GeekyAnts/vue-native-core),
    or find out more about it at [https://vue-native.io/](https://vue-native.io/).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 也在迅速成熟。有一个充满活力的 Vue 社区，许多开发人员在不断地为其努力。例如，人们选择 React 而不是 Vue 的一个论点是 Vue 中缺乏用于构建原生移动应用的框架。这已经不再是问题了：Vue
    Native 从 2018 年 6 月起就可用了。你可以在 [https://github.com/GeekyAnts/vue-native-core](https://github.com/GeekyAnts/vue-native-core)
    查看它，或者在 [https://vue-native.io/](https://vue-native.io/) 了解更多信息。
- en: With all of this in mind, there are plenty of reasons why learning Vue is a
    nice return on investment for anyone, especially frontend developers.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些，学习 Vue 对任何人来说都是一个不错的投资回报，尤其是前端开发人员。
- en: Easy-to-understand syntax
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 易于理解的语法
- en: One thing that can be noticed in this example of a very simple Vue app is the
    use of the `v-for` HTML attribute.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个非常简单的 Vue 应用示例中可以注意到一件事，就是使用了 `v-for` HTML 属性。
- en: Directives
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指令
- en: All the `v-*` attributes in Vue are called *directives*, which is borrowed from
    Angular.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 中的所有 `v-*` 属性都被称为 *指令*，这是从 Angular 中借鉴过来的。
- en: The concept of directives is very interesting. They make code easier to understand,
    easier to think about, and easier to work with.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 指令的概念非常有趣。它们使代码更易于理解、更易于思考，也更易于使用。
- en: 'There are other directives in Vue that we will use extensively throughout this
    book. For now, let''s just list some of them: `v-bind`, `v-cloak`, `v-for`, `v-else`,
    `v-else-if`, `v-model`, `v-on`, `v-once`, `v-text`, and `v-html`.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue 中还有其他指令，我们将在本书中广泛使用。现在，让我们列出其中一些：`v-bind`、`v-cloak`、`v-for`、`v-else`、`v-else-if`、`v-model`、`v-on`、`v-once`、`v-text`
    和 `v-html`。
- en: 'An example of a useful directive is `v-model`. The `v-model` directive is used
    to make forms reactive; it helps us update data on user input events. While this
    topic might sound a bit advanced to a beginner in Vue, this complexity is dealt
    with so elegantly that even beginners should find it easy to see what is happening
    in the code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的指令示例是 `v-model`。`v-model` 指令用于使表单具有响应性；它帮助我们在用户输入事件中更新数据。虽然这个话题对于 Vue 的初学者来说可能有点高级，但这种复杂性被处理得如此优雅，以至于即使初学者也应该很容易看出代码中发生了什么：
- en: '[PRE11]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, the `{{ someNum }}` value is bound to whatever a user types
    into the input field. In other words, the underlying data model—the value of `someNum`—will
    change based on user input.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`{{ someNum }}`的值绑定到用户在输入字段中键入的任何内容。换句话说，基于用户输入，底层数据模型`someNum`的值将发生变化。
- en: To view the pen for the preceding example, visit [https://codepen.io/AjdinImsirovic/pen/pKdPgX](https://codepen.io/AjdinImsirovic/pen/pKdPgX).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看前面示例的pen，请访问[https://codepen.io/AjdinImsirovic/pen/pKdPgX](https://codepen.io/AjdinImsirovic/pen/pKdPgX)。
- en: Modifiers
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修饰符
- en: The directives in Vue are further extended with the help of modifiers.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Vue中的指令还可以通过修饰符进行进一步扩展。
- en: The link to official documentation on modifiers in directives can be found at
    this link: [https://vuejs.org/v2/guide/forms.html#Modifiers](https://vuejs.org/v2/guide/forms.html#Modifiers).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有关指令中修饰符的官方文档链接在此：[https://vuejs.org/v2/guide/forms.html#Modifiers](https://vuejs.org/v2/guide/forms.html#Modifiers)。
- en: 'To use a modifier, we simply append it to a directive. The simplest possible
    example might look a bit like this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用修饰符，我们只需将其附加到指令上。最简单的示例可能看起来像这样：
- en: '[PRE12]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have just appended the `trim` modifier to the `v-model` directive.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚将`trim`修饰符附加到`v-model`指令上。
- en: You can view the example for this code at this link: [https://codepen.io/AjdinImsirovic/pen/eKeRXK](https://codepen.io/AjdinImsirovic/pen/eKeRXK).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接查看此代码的示例：[https://codepen.io/AjdinImsirovic/pen/eKeRXK](https://codepen.io/AjdinImsirovic/pen/eKeRXK)。
- en: This modifier will trim any whitespace (such as spaces or tabs) typed into the
    input field by the user.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此修饰符将修剪用户在输入字段中键入的任何空白（例如空格或制表符）。
- en: 'Before continuing with this 10,000-foot overview of Vue syntax, let''s also
    mention the `v-on` directive, which is used for event handling. Here is a quick
    example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续查看Vue语法的概述之前，让我们也提一下`v-on`指令，它用于事件处理。这里是一个快速示例：
- en: '[PRE13]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Vue even provides shortcut syntax for `v-on`: the `@` symbol. Thus, we can
    replace `v-on:click` with just `@click` and our Vue counter will still work.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Vue甚至为`v-on`提供了快捷语法：`@`符号。因此，我们可以用`@click`替换`v-on:click`，我们的Vue计数器仍然可以工作。
- en: 'To view this example in [http://codepen.io/](http://codepen.io/), visit the
    following URL: [https://codepen.io/AjdinImsirovic/pen/PaOjvz](https://codepen.io/AjdinImsirovic/pen/PaOjvz).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要在[http://codepen.io/](http://codepen.io/)中查看此示例，请访问以下网址：[https://codepen.io/AjdinImsirovic/pen/PaOjvz](https://codepen.io/AjdinImsirovic/pen/PaOjvz)。
- en: Vue methods
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue方法
- en: The `methods` option in a Vue instance just lists all the functions that exist
    on that Vue instance (or on a Vue component).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Vue实例中的`methods`选项只列出了该Vue实例（或Vue组件）上存在的所有函数。
- en: 'The `methods` option works with the data of the Vue instance. What follows
    is a simple demonstration of this concept in practice:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`methods`选项与Vue实例的数据一起工作。接下来是这个概念的一个简单演示：'
- en: '[PRE14]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As we can see, the `data` option holds the `Vue.js` string, which can be accessed
    via the `name` key.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`data`选项保存了`Vue.js`字符串，可以通过`name`键访问。
- en: 'Inside the `methods` option, we can see two functions: `whatIsVue` and `whyUseVue`.
    The `whatIsVue` function takes the click event and logs out the value inside `name` to
    the console. The `whyUseVue` function inside the `methods` option works similarly.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在`methods`选项中，我们可以看到两个函数：`whatIsVue`和`whyUseVue`。`whatIsVue`函数接受点击事件并将`name`中的值记录到控制台。`methods`选项中的`whyUseVue`函数工作方式类似。
- en: 'This code can be seen in a pen at this address: [https://codepen.io/AjdinImsirovic/pen/yEPXdK](https://codepen.io/AjdinImsirovic/pen/yEPXdK?editors=1111).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码可以在此地址的pen中查看：[https://codepen.io/AjdinImsirovic/pen/yEPXdK](https://codepen.io/AjdinImsirovic/pen/yEPXdK?editors=1111)。
- en: Computed properties and watchers
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算属性和观察者
- en: Computed properties are used to avoid complex logic adding bloat to your views.
    In other words, computed properties are useful to hide the complexity from our
    HTML and thus keep our HTML understandable, easy to use, and declarative. Put
    differently, when we need to compute some values from the `data` option, we can
    do that with the help of computed properties.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性用于避免复杂逻辑增加视图的臃肿。换句话说，计算属性对于隐藏HTML的复杂性是有用的，因此使我们的HTML易于理解、易于使用和声明性。换句话说，当我们需要从`data`选项计算一些值时，我们可以借助计算属性来实现。
- en: 'The full code for the following example can be seen at [https://codepen.io/AjdinImsirovic/pen/WyXEOz](https://codepen.io/AjdinImsirovic/pen/WyXEOz):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例的完整代码可以在[https://codepen.io/AjdinImsirovic/pen/WyXEOz](https://codepen.io/AjdinImsirovic/pen/WyXEOz)中查看：
- en: '[PRE15]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Computed properties are cached. As long as a computed property's dependencies
    do not change, Vue will return the cached value of the computed property.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性是被缓存的。只要计算属性的依赖项没有发生变化，Vue将返回计算属性的缓存值。
- en: Watchers are not as frequently used as computed properties are. In other words,
    the watch option is to be used less frequently than the computed properties option.
    Watchers are commonly used for asynchronous or otherwise costly operations with
    changing data.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者并不像计算属性那样经常使用。换句话说，观察选项要比计算属性选项少用。观察者通常用于具有变化数据的异步或成本高昂的操作。
- en: Watchers have to do with reactive programming; they allow us to observe a sequence
    of events through time and react to changes as they happen on a certain data property.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者与响应式编程有关；它们允许我们通过时间观察事件序列并对特定数据属性的变化做出反应。
- en: We will cover the subject of computed properties and watchers in later chapters.
    For now, it is sufficient to know that they exist in Vue and that they are widely
    used.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中介绍计算属性和观察者的主题。目前，知道它们存在于Vue中并且被广泛使用就足够了。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how to get started with Vue quickly, with the
    help of [codepen.io](http://codepen.io). We also discussed some of the most important
    ideas and concepts in Vue, such as the quickest and most developer-friendly way
    to start learning Vue 2\. We looked into what problems Vue solves, what its strengths are,
    and why it is sometimes referred to as *the new jQuery*. We learned about mustache
    templates, Vue's declarative code, and its easy-to-understand syntax. Finally,
    we introduced directives, modifiers, methods, computed properties, and watchers.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何通过[codepen.io](http://codepen.io)快速开始使用Vue。我们还讨论了Vue中一些最重要的思想和概念，例如学习Vue
    2的最快和最开发者友好的方式。我们了解了Vue解决了什么问题，它的优势是什么，以及为什么有时被称为*新的jQuery*。我们了解了花括号模板、Vue的声明性代码和易于理解的语法。最后，我们介绍了指令、修饰符、方法、计算属性和观察者。
- en: In the next chapter, we will see what reactive programming is and how it is
    applied in Vue. We will also look at further expanding the concepts covered in
    this chapter, and we will introduce some additional features of Vue.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到什么是响应式编程以及它如何应用在Vue中。我们还将进一步扩展本章涵盖的概念，并介绍Vue的一些其他特性。
