- en: Using Nuxt.js and Vue-Router
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nuxt.js和Vue-Router
- en: With the rise of **Single-Page Applications** (**SPAs**), a number of specific
    issues have occurred. There have been various attempts at solving these issues,
    and some common solutions arose from these attempts. In this section, we will
    look at issues surrounding SPAs and ways of addressing and solving these issues
    in Vue.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着**单页应用**（**SPA**）的兴起，出现了一些特定的问题。针对这些问题已经有了各种尝试，并且一些常见的解决方案也从这些尝试中出现。在本节中，我们将看看围绕SPA的问题以及在Vue中解决这些问题的方法。
- en: 'In this chapter, we will work with Nuxt.js and Vue-Router to understand a number
    of concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用Nuxt.js和Vue-Router来理解一些概念：
- en: Single-page applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单页应用
- en: Initial page load
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始页面加载
- en: Server-side rendering and universal web apps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端渲染和通用Web应用
- en: Installing Nuxt.js
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Nuxt.js
- en: Nuxt pages as routes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt页面作为路由
- en: Linking pages with the `nuxt-link` tag
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`nuxt-link`标签链接页面
- en: We'll begin by understanding just what SPAs are and how they work.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先了解SPA是什么以及它们是如何工作的。
- en: Single-page applications and server-side rendering
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页应用和服务器端渲染
- en: Traditionally, web servers only serve static content. When a user makes a request
    to a link within an app, usually the server processes that request and sends the
    result of that processing to the client as an entire page, with HTML, CSS, and
    JS served by the browser. This happens when requesting each route in a web app.
    If a developer wants to see what was sent by the browser, it is as simple as running
    the `view source` command in your browser of choice.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，Web服务器只提供静态内容。当用户在应用中请求一个链接时，通常服务器会处理该请求并将处理结果作为整个页面发送给客户端，包括HTML、CSS和由浏览器提供的JS。这发生在请求Web应用中的每个路由时。如果开发人员想要查看浏览器发送的内容，只需在所选浏览器中运行`view
    source`命令即可。
- en: The shortcut key for the view source command is traditionally *Ctrl* + *U* in
    some browsers, such as Chrome and Firefox.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看源代码的快捷键在一些浏览器中传统上是*Ctrl* + *U*，比如Chrome和Firefox。
- en: With the push for the experience on the web to be more like what we have on
    desktops, we have seen the rise ofSPAs in recent years. Examples of popular SPAs
    include Gmail, Twitter, and Google Maps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网络体验向桌面端靠拢的推动，近年来我们看到了单页应用（SPA）的兴起。流行的SPA示例包括Gmail、Twitter和Google Maps。
- en: 'The way that an SPA works is this: when a user navigates through different
    pages (routes) on a site, the browser does not download a whole new page with
    a whole new request to the server. Rather than downloading full pages from a server
    each time a user visits a route, SPAs render everything on the client. Requests
    to the server are made only to get new data.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 单页应用的工作方式是这样的：当用户在网站上浏览不同的页面（路由）时，浏览器不会下载一个全新的页面，也不会向服务器发送一个全新的请求。与其每次用户访问一个路由时从服务器下载完整页面不同，SPA在客户端渲染所有内容。向服务器的请求仅用于获取新数据。
- en: 'A good test for deciding whether a web app can qualify as an SPA is this: does
    visiting a different route in the app cause the entire app to refresh? If it doesn''t,
    then it''s an SPA.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 判断一个Web应用是否可以被视为SPA的一个好方法是：在应用中访问不同的路由是否会导致整个应用刷新？如果不会，那么它就是一个SPA。
- en: An SPA requests new data from the server while traditional web apps download
    entire pages from the server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SPA从服务器请求新数据，而传统Web应用从服务器下载整个页面。
- en: This usually means that all of the SPA code will be downloaded in one page load—the
    **initial page load**. This includes HTML, CSS, and JS—all the code without which
    an SPA would not run. The downside of this approach is that the download time
    can be substantial when running on slower networks or due to the sheer size of
    an app, especially given the fact that a lot of these SPAs are full of JavaScript
    code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常意味着所有的SPA代码将在一个页面加载中下载——**初始页面加载**。这包括HTML、CSS和JS——所有的代码，没有这些代码，SPA将无法运行。这种方法的缺点是，在较慢的网络上运行或者由于应用程序的体积过大时，下载时间可能会相当长，特别是考虑到许多这些SPA都充斥着JavaScript代码。
- en: However, as mentioned before, the goal of SPAs is to provide an excellent user
    experience, to behave like desktop apps, with instant execution and without latency.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如前所述，SPA的目标是提供出色的用户体验，表现得像桌面应用程序一样，具有即时执行和无延迟。
- en: A solution to this problem was the introduction of **server-side rendering**.
    Server-side rendering is simply the ability of a frontend framework to prepare
    the HTML, CSS, and JS on the server so that, when a user visits our SPA, instead
    of their browser having to download the full app in one go, it only downloads
    a portion of this code—a fragment of the full SPA—which, regardless, still allows
    the user to interact with the page. Through concepts such as code splitting and
    rehydration, an SPA seamlessly downloads only that part of the application that
    is needed to start using it, and only then downloads the rest of the SPA, while
    the user is already interacting with it. This approach reduces the latency of
    the initial load.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一个方法是引入**服务器端渲染**。服务器端渲染简单地说就是前端框架在服务器上准备HTML、CSS和JS的能力，因此当用户访问我们的SPA时，他们的浏览器不需要一次性下载整个应用程序，而只需下载部分代码——完整SPA的一部分——尽管如此，用户仍然可以与页面进行交互。通过代码分割和重新注水等概念，SPA无缝地只下载应用程序的那部分内容，以便开始使用它，然后再下载SPA的其余部分，而用户已经在与之交互。这种方法减少了初始加载的延迟。
- en: Another major issue of SPAs in the past was the problem of not being readable
    by search engine crawlers. Since these crawlers cannot run JavaScript when crawling
    an SPA website, the visiting search engine bot would not see that SPA's content.
    Hence, server-side rendering is an elegant approach to both speed up a web app
    for the user and make it more accessible for indexing by search engine bots.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 过去SPA的另一个主要问题是搜索引擎爬虫无法读取的问题。由于这些爬虫在爬取SPA网站时无法运行JavaScript，访问的搜索引擎爬虫将无法看到SPA的内容。因此，服务器端渲染是加快web应用程序速度并使其更易于被搜索引擎爬虫索引的一种优雅方法。
- en: When a web app can render web pages both on the server and on the client, it
    is referred to as a **universal web app**. A universal web app is basically an
    SPA that has SSR ability.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个web应用程序可以在服务器和客户端上渲染网页时，它被称为**通用web应用程序**。通用web应用程序基本上是具有SSR能力的SPA。
- en: Many modern frontend frameworks have their own SSR implementations. In Vue,
    this is what we call Nuxt.js.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代前端框架都有自己的SSR实现。在Vue中，这就是我们所说的Nuxt.js。
- en: Installing Nuxt.js and previewing the default project
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Nuxt.js并预览默认项目
- en: To serve different routes, in the background Nuxt.js uses Vue-router. To keep
    things simple, we'll focus on using Nuxt.js.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供不同的路由，Nuxt.js在后台使用Vue-router。为了保持简单，我们将专注于使用Nuxt.js。
- en: There are a few ways to get started with Nuxt.js. One option is via the `vue
    init` command. Another one is with a practice that is common, which is the `create-nuxt-app` command,
    similar to `create-elm-app` or `create-react-app`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以开始使用Nuxt.js。一种选择是通过`vue init`命令。另一种是使用一种常见的实践，即`create-nuxt-app`命令，类似于`create-elm-app`或`create-react-app`。
- en: Installing Nuxt.js with the vue init command
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vue init命令安装Nuxt.js
- en: 'Let''s begin by finding a location on our drive to save our new Nuxt app, and
    then use the `vue init` command to create it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先找到一个位置来保存我们的新Nuxt应用程序，然后使用`vue init`命令来创建它：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running this command without `vue init` being installed might return the following
    message in the console:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在未安装`vue init`的情况下运行此命令可能会在控制台中返回以下消息：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Hence, to rectify the issue, simply run this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要纠正问题，只需运行这个命令：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will take some time, but ultimately we''ll end up being able to run the
    `**vue init**` command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要一些时间，但最终我们将能够运行`**vue init**`命令：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This time, running the preceding command will result in a few questions that
    we need to answer, so that the project can be configured to our liking. Similar
    to what we've seen with Vue-cli, to accept the defaults, we can simply press the
    *Enter* key.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这次运行前面的命令将导致我们需要回答一些问题，以便根据我们的喜好配置项目。与我们在Vue-cli中看到的类似，要接受默认值，我们可以简单地按下*Enter*键。
- en: 'This is the output to the console with all of the questions and answers:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是控制台的输出，包括所有问题和答案：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s run these commands as described. We''ll `cd` into the `chapter8` folder,
    then run `npm install`. This will produce an output that includes some nice ASCII
    art of the Nuxt logo, a list of contributors and backers, and other project information.
    Now, we can run the `npm run dev` command, which will result in the following
    output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照描述运行这些命令。我们将`cd`进入`chapter8`文件夹，然后运行`npm install`。这将产生一个输出，其中包括Nuxt标志的一些漂亮的ASCII艺术，贡献者和支持者的列表，以及其他项目信息。现在，我们可以运行`npm
    run dev`命令，这将产生以下输出：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we visit the page at `localhost:3000`, we''ll be greeted with the standard
    welcome screen, with the Nuxt.js logo, under which there will be our project''s
    name (chapter8), and two buttons: links to the documentation and to the project''s
    GitHub repository.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问`localhost:3000`页面，我们将看到标准的欢迎屏幕，其中有Nuxt.js标志，在下面将是我们项目的名称（chapter8），以及两个按钮：链接到文档和项目的GitHub存储库。
- en: Debugging an eslint error
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试eslint错误
- en: At the time of writing of this book, even though all of the software was up
    to date, `eslint` was throwing an error. If, after running `npm run dev`, you
    would open `localhost:3000`, you might have seen the following error in the upper-left
    corner of the page that reads that the eslint module is undefined.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，尽管所有软件都是最新的，`eslint`仍然会抛出错误。如果在运行`npm run dev`之后，您打开`localhost:3000`，您可能会在页面的左上角看到以下错误，指出eslint模块未定义。
- en: 'If this happens, you can fix it by opening the `nuxt.config.js` file inside
    your code editor and replacing all of the code after line 23 with this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生这种情况，您可以通过打开代码编辑器中的`nuxt.config.js`文件，并将第23行后的所有代码替换为以下内容来修复它：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we've commented out the offending code and replaced it
    with the correct code, to be able to compare the differences and understand what
    needs fixing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们已经注释掉了有问题的代码，并用正确的代码替换，以便比较差异并理解需要修复的内容。
- en: We can now rerun the `npm run dev` command and we should see the app without
    any errors, at `localhost:3000`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以重新运行`npm run dev`命令，我们应该在`localhost:3000`上看到应用程序没有任何错误。
- en: Installing with create-nuxt-app
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用create-nuxt-app安装
- en: 'Alternatively, we can use the `create-nuxt-app` command. First, we''ll need
    to install it globally, so that we can use it anywhere on our computer:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用`create-nuxt-app`命令。首先，我们需要全局安装它，以便我们可以在计算机的任何地方使用它：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This command is the global install, and it might take some time. A successful
    installation will result in a few lines logged to console, namely the location
    on the local drive where `create-nuxt-app` has been installed, and some other
    information, similar to this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令是全局安装的，可能需要一些时间。成功安装将在控制台中记录几行，即`create-nuxt-app`已安装在本地驱动器的位置，以及其他一些信息，类似于这样：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, let''s point our console to the desired folder, and then run this command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将控制台指向所需的文件夹，然后运行这个命令：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similar to the first installation approach, this one will also produce a number
    of questions with preset answers that we can accept by simply pressing the *Enter*
    key. This is the list of questions with the default answers accepted:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与第一种安装方法类似，这种方法也会产生一些带有预设答案的问题，我们可以通过简单地按下*Enter*键来接受。这是带有默认答案的问题列表：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Similar to the previous installation, we can see the instructions for running
    the boilerplate project, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与先前的安装类似，我们可以看到运行样板项目的说明如下：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So, let's run `cd chapter8b` and follow it up with `npm run dev`. The output
    will be almost identical to the previous installation method.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们运行`cd chapter8b`，然后跟着运行`npm run dev`。输出将几乎与先前的安装方法相同。
- en: Editing the index.vue file
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑index.vue文件
- en: 'Let''s also edit our `index.vue` file, inside the `pages` folder. This is the
    root route of our app. The change we''ll make is minimal: we''ll delete all of
    the code inside the `<div class="links">` tag. After the update, that snippet
    of code should look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也编辑我们的`index.vue`文件，在`pages`文件夹中。这是我们应用程序的根路由。我们将进行的更改很小：我们将删除`<div class="links">`标签内的所有代码。更新后，该代码片段应如下所示：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since webpack in the background is refreshing our page, we should see the result
    of this change in our browser, after we save our changes:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于后台的webpack正在刷新我们的页面，所以在保存更改后，我们应该在浏览器中看到这个更改的结果：
- en: '![](assets/509c45c9-eafa-49bb-adc6-18151a4313a8.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/509c45c9-eafa-49bb-adc6-18151a4313a8.png)'
- en: 'So far, we have seen how to initialize a new Vue Nuxt project in two different
    ways. In the next section, we''ll look at the Nuxt-flavored implementation of
    the `convention-over-configuration` approach: pages as routes.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了两种不同方式初始化新的Vue Nuxt项目。在下一节中，我们将看看Nuxt风格的实现`约定优于配置`方法：页面作为路由。
- en: Nuxt pages as routes
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nuxt页面作为路由
- en: The *convention-over-configuration* approach was popularized by Ruby on Rails.
    It is an opinionated approach to web development that sets up some things in a
    framework in a set-and-forget manner. When we say that it is opinionated, it simply
    means that out of several possibilities to approach an issue, the developers of
    the framework chose one specific way of doing things, and that approach is the
    only way that something is done.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*约定优于配置*方法是由Ruby on Rails推广的。这是一种对Web开发的看法，以一种设置和忘记的方式在框架中设置一些东西。当我们说它是有看法的，它只是意味着在处理问题时，框架的开发人员选择了一种特定的方法，而这种方法是做某事的唯一方式。'
- en: 'We can say that Nuxt.js is opinionated because it follows the convention of
    pages as routes. Thus, instead of us having to manually set up routes in our apps—that
    is, rather than having to ***configure*** them—the framework follows a simple
    ***convention***. Inside the pages folder, the `index.vue` file acts as the root
    route: `/`. This means that if we run our app, visiting the root route at `localhost:3000` is
    equal to visiting `localhost:3000/index.vue`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说Nuxt.js是有看法的，因为它遵循页面作为路由的约定。因此，我们不必在应用程序中手动设置路由，而是遵循简单的约定。在页面文件夹中，`index.vue`文件充当根路由：`/`。这意味着如果我们运行我们的应用程序，访问`localhost:3000`的根路由等同于访问`localhost:3000/index.vue`。
- en: Similarly, if we create a file called `about.vue` and place it inside the pages
    folder, to view this file we'd need to visit the `localhost:3000/about` route.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，如果我们创建一个名为`about.vue`的文件并将其放在页面文件夹中，要查看此文件，我们需要访问`localhost:3000/about`路由。
- en: 'So, let''s do just that. In our pages folder, we''ll make a new file and call
    it `contact.vue`. Inside that file, we''ll add the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们就这样做。在我们的页面文件夹中，我们将创建一个新文件并将其命名为`contact.vue`。在该文件中，我们将添加以下代码：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is all that is needed for the `/contact` route to become available, which
    you can see for yourself by navigating to `localhost:3000/contact`. We can even
    make this file the default root route of the `contact` folder. In that case, we'd
    have to create a subfolder inside the `pages` folder, and give it the name of
    `contact`. Now, we could create an `index.vue` file inside the newly created `contact`
    folder, and the route will remain the same. Only our file and folder structure
    inside the `pages` folder has been slightly altered, but the end result is the
    same.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使`/contact`路由可用所需的所有内容，您可以通过导航到`localhost:3000/contact`来查看。我们甚至可以将此文件设置为`contact`文件夹的默认根路由。在这种情况下，我们必须在`pages`文件夹内创建一个子文件夹，并将其命名为`contact`。现在，我们可以在新创建的`contact`文件夹内创建一个`index.vue`文件，路由将保持不变。只是我们在`pages`文件夹内的文件和文件夹结构略有改变，但最终结果是相同的。
- en: However, separating files like this into subfolders will make it easier to stay
    organized as you add more files.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，将文件分离成子文件夹将使您在添加更多文件时更容易保持组织。
- en: Adding navigation to Nuxt apps via the components folder
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过`components`文件夹向Nuxt应用程序添加导航
- en: 'At this point in our app development, it would be great to have the navigation
    in place. Navigation itself is not a page; it is a component that should exist
    in each page of our app. Therefore, let''s create it by opening the `components`
    folder and adding a new file, which we''ll call `Navigation.vue`. Let''s add this
    code to it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们应用程序开发的这一点上，将导航放在适当的位置将是很好的。导航本身不是一个页面；它是一个应该存在于我们应用程序的每个页面中的组件。因此，让我们通过打开`components`文件夹并添加一个新文件来创建它，我们将其称为`Navigation.vue`。让我们向其中添加这段代码：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note the `<nuxt-link>` tag. It is just a wrapper over the Vue-router implementation,
    and the `to="..."` attribute's value is where we specify the actual URL, which
    is just the name of our specific file inside the `pages` folder.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`<nuxt-link>`标签。它只是Vue-router实现的一个包装器，`to="..."`属性的值是我们指定的实际URL，它只是`pages`文件夹内特定文件的名称。
- en: 'Next, let''s locate the `layouts` folder, and inside of it, in the `default.vue`
    file, let''s add the `Navigation` component inside the template, so that it looks
    like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们找到`layouts`文件夹，在其中的`default.vue`文件中，让我们在模板中添加`Navigation`组件，使其看起来像这样：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that we can self-close components, so that instead of `<Navigation></Navigation>`,
    we could write the shorthand version, which is simply `<Navigation />`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以自我关闭组件，所以我们可以写简写版本，而不是`<Navigation></Navigation>`，简写版本就是`<Navigation
    />`。
- en: 'We need to make sure to import the `Navigation` component by adding the `script`
    tag just under the `template` tag:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保通过在`template`标签下方添加`script`标签来导入`Navigation`组件：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'At this point, our homepage, with the navigation update, will look like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们的主页，通过导航更新，将如下所示：
- en: '![](assets/becea943-004f-400d-aadf-bd52bdbea07e.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/becea943-004f-400d-aadf-bd52bdbea07e.png)'
- en: 'Now that we have our navigation in place, we''ll add another page, which we''ll
    call `News.vue`, with the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的导航已经就位，我们将添加另一个页面，我们将其称为`News.vue`，代码如下：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: At this point, we have three links in our navigation, so now we can focus on
    adding some more content to each page.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们的导航中有三个链接，现在我们可以专注于向每个页面添加更多内容。
- en: Adding content to our Nuxt app's pages
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的Nuxt应用程序页面添加内容
- en: 'Let''s update the `News.vue` component:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`News.vue`组件：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The news link will now look like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在新闻链接将如下所示：
- en: '![](assets/af719e3e-0cd8-476e-b961-e7a0e5eb12d0.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/af719e3e-0cd8-476e-b961-e7a0e5eb12d0.png)'
- en: 'Next, let''s update the `Contact.vue` component:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更新`Contact.vue`组件：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We will not be altering the original homepage of our Nuxt.js project. The reason
    for limited changes is we only need to have a few pages with some dummy content,
    so that we can continue to the next section, where we'll see how to add page transitions
    to our Nuxt.js app.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会改变Nuxt.js项目的原始主页。有限的更改原因是我们只需要有一些带有虚拟内容的页面，这样我们就可以继续到下一节，在那里我们将看到如何将页面过渡效果添加到我们的Nuxt.js应用程序中。
- en: Adding page transitions to our Nuxt.js app
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的Nuxt.js应用程序添加页面过渡效果
- en: As we learned in [Chapter 6](d8b6e8d0-8fa0-4787-beba-e1961d4c6a07.xhtml), *Transitions
    and Animations*, Vue comes with a wide array of ways to add interactivity, transitions,
    and animations to our apps. To make this process faster, we will use animations
    from `Animate.css`, with some slight modifications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第6章](d8b6e8d0-8fa0-4787-beba-e1961d4c6a07.xhtml)中学到的，Vue提供了许多方法来为我们的应用程序添加交互性、过渡效果和动画。为了加快这个过程，我们将使用`Animate.css`中的动画，稍作修改。
- en: In Nuxt, we can use page transition hooks just like we already learned. We'll
    simply replace the `v` letter inside the `.v-*` transition hooks with `.page-*`.
    All the functionality, and the way everything works, will stay the same.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuxt中，我们可以像我们已经学过的那样使用页面过渡钩子。我们只需将`.v-*`过渡钩子中的`v`字母替换为`.page-*`。所有的功能以及一切的工作方式都将保持不变。
- en: 'Let''s begin by opening the `pages/index.vue` file and adding this code at
    the top of its `style` tag:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从打开`pages/index.vue`文件并在其`style`标签的顶部添加以下代码开始：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we''ll open the `contact.vue` file and add this code at the top of its
    `style` tag:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将打开`contact.vue`文件，并在其`style`标签的顶部添加以下代码：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we''ll update the top of the `style` tag of `news.vue` with this code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用以下代码更新`news.vue`的`style`标签顶部：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Feel free to test out your app at this point and see how you achieved a significant
    visual improvement with only a few changes to the `style` tags in your route files.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，随时测试您的应用程序，并看看您如何通过对路由文件中的`style`标签进行少量更改来实现显著的视觉改进。
- en: In this chapter, we got acquainted with the basics of building a rudimentary
    Nuxt.js app. There are many ways in which this can be improved and built upon.
    To continue building better apps and learning more about running Vue apps on Node,
    feel free to refer to other titles in the Packt library, such as *Full Stack Web
    Development with Vue.js and Node*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了构建基本Nuxt.js应用程序的基础知识。有许多方法可以改进和扩展这一点。要继续构建更好的应用程序并了解更多关于在Node上运行Vue应用程序的知识，请随时参考Packt图书馆中的其他标题，比如*使用Vue.js和Node进行全栈Web开发*。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about single-page applications, the ideas that led
    to their appearance, and the challenges that their implementation brings, such
    as issues with the initial page load. We also learned about solutions to SPA-related
    problems, such as server-side rendering, as well as how Nuxt.js helps us build
    universal web apps. We learned about installing Nuxt.js and setting up Nuxt.js
    pages as routes. We linked our Vue app's routing using the `nuxt-link` tag, and
    we added some content to each of the pages. Finally, to build up from what we
    learned in the previous chapters, we added some page transitions for a smoother
    user experience.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于单页面应用程序的知识，以及导致它们出现的想法，以及它们的实施带来的挑战，比如初始页面加载的问题。我们还学习了与SPA相关问题的解决方案，比如服务器端渲染，以及Nuxt.js如何帮助我们构建通用的Web应用程序。我们学习了如何安装Nuxt.js并设置Nuxt.js页面作为路由。我们使用`nuxt-link`标签链接了我们的Vue应用程序的路由，并为每个页面添加了一些内容。最后，为了建立在前几章学到的知识基础上，我们为更流畅的用户体验添加了一些页面过渡效果。
- en: This brings us to the end of *Vue JS Quick Start*. We have gone through a whole
    array of basic Vue JS concepts. As a quick overview, we can reiterate some of
    the things we've covered: mustache templates, directives, modifiers, methods,
    computed properties, watchers, components (global and local), props, lifecycle
    hooks, vue-cli, slots, parent-child component communication, filters, mixins,
    custom directives and plugins, transitions, animations, transition components,
    integrating third-party animations, binding styles, working with transition groups
    and JavaScript animation hooks, SPAs, the concepts of state and store, one-way
    data flows, using Vuex, working with initial page load, Nuxt, SSR, and universal
    web apps.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是*Vue JS快速入门*的结尾。我们已经介绍了一整套基本的Vue JS概念。简要概述一下，我们可以重申一些我们所涵盖的内容：mustache模板、指令、修饰符、方法、计算属性、观察者、组件（全局和本地）、props、生命周期钩子、vue-cli、插槽、父子组件通信、过滤器、混合、自定义指令和插件、过渡、动画、过渡组件、集成第三方动画、绑定样式、处理过渡组和JavaScript动画钩子、SPA、状态和存储的概念、单向数据流、使用Vuex、处理初始页面加载、Nuxt、SSR和通用Web应用程序。
- en: In this short book, we have covered a lot of ground. We had to keep things basic
    in order to see the big picture of all the moving parts that comprise Vue JS.
    Where to go from here?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本简短的书中，我们涵盖了很多内容。为了看到Vue JS的所有组成部分的全貌，我们必须保持基本。接下来该去哪里呢？
- en: There are several ways in which you can build your Vue-related skills further.
    You could focus on understanding how to work with server-side technologies, such
    as Node, Laravel, or .NET Core. You could also work with VuePress—a way to built
    static JS-powered sites with Vue. Or you might want to check out *Vuex Quick Start
    Guide*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以进一步提高您的Vue相关技能。您可以专注于了解如何使用服务器端技术，比如Node、Laravel或.NET Core。您也可以使用VuePress——一种使用Vue构建静态JS站点的方式。或者您可能想查看*Vuex快速入门指南*。
- en: To make it easier to continue improving your Vue.js skills, there are over two
    dozen titles in the Packt library at your disposal, including titles that deal
    with the topics listed in this summary.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易地继续提高您的Vue.js技能，Packt图书馆中有超过两打本书可供您选择，其中包括涉及本摘要中列出的主题的书籍。
