["```js\n**npm install jest**\n\n```", "```js\n// test/sum.js\nexport default function sum (a, b) {\n  return a + b\n}\n```", "```js\n// sum.spec.js\nimport sum from './sum'\n\ndescribe('sum', () => {\n  **it('create sum of 2 numbers', () => {**\n **expect(sum(15, 8)).toBe(23)**\n **})**\n})\n```", "```js\n// package.json\n\"scripts\": {\n  //...\n  **\"test\": \"jest\"**\n}\n```", "```js\n**npm install babel-jest --save-dev**\n\n```", "```js\n// .babelrc\n{\n  \"presets\": [\"es2015\"]\n}\n```", "```js\n// .eslintrc.js\nmodule.exports = {\n  root: true,\n  parser: 'babel-eslint',\n  env: {\n    browser: true,\n    node: true,\n    **jest: true**\n  },\n  extends: 'standard',\n  // required to lint *.vue files\n  plugins: [\n    'html'\n  ],\n  // add your custom rules here\n  rules: {},\n  globals: {}\n}\n```", "```js\nnpm test -- --coverage\n```", "```js\nimport { leftPad } from '~/utils/utils'\n```", "```js\n// utils/utils.js\nexport const leftPad = value => {\n  if (('' + value).length > 1) {\n    return value\n  }\n\n  return '0' + value\n}\n```", "```js\n// test/utils.spec.js\ndescribe('utils', () => {\n  describe('leftPad', () => {\n    it('should return the string itself if its length is more than 1', () => {\n      **expect(leftPad('01')).toEqual('01')**\n    })\n    it('should add a 0 from the left if the entry string is of the length of 1', () => {\n      **expect(leftPad('0')).toEqual('00')**\n    })\n  })\n})\n```", "```js\n// package.json\n\"jest\": {\n  \"moduleNameMapper\": {\n    **\"^~(.*)$\": \"<rootDir>/$1\"**\n  }\n}\n```", "```js\n// test/utils.spec.js\nimport { leftPad, numberOfSecondsFromNow } from '~/utils/utils'\n//...\ndescribe(**'numberOfSecondsFromNow'**, () => {\n  it('should return the exact number of seconds from now', () => {\n    **Date.now = jest.fn(() => 2000)**\n    expect(numberOfSecondsFromNow(1000)).toEqual(1)\n  })\n})\n```", "```js\nlet mockAudioPlay = jest.fn()\nAudio.prototype.play = mockAudioPlay\n```", "```js\nexpect(mockAudioPlay.mock.calls.length).toEqual(1)\n```", "```js\nexpect(mockAudioPlay).toHaveBeenCalled()\n```", "```js\ndescribe('beep', () => {\n  it('should call the Audio.play functuon', () => {\n    let mockAudioPlay = jest.fn()\n\n    Audio.prototype.play = mockAudioPlay\n\n    beep()\n    expect(mockAudioPlay.mock.calls.length).toEqual(1)\n    expect(mockAudioPlay).toHaveBeenCalled()\n  })\n})\n```", "```js\nit('should call the Audio.play functuon', () => {\n  // ...\n  expect(mockAudioPlay).toHaveBeenCalled()\n  **mockAudioPlay.mockReset()**\n})\n```", "```js\n//package.json\n\"jest\": {\n  **\"clearMocks\": true,**\n  \"moduleNameMapper\": {\n    \"^~(.*)$\": \"<rootDir>/$1\"\n  }\n},\n```", "```js\nexport const numberOfSecondsFromNow = startTime => {\n  const SECOND = 1000\n  if (!startTime) {\n    **return 0**\n  }\n  return Math.floor((Date.now() - startTime) / SECOND)\n}\n```", "```js\n// test/utils.js\ndescribe(**'numberOfSecondsFromNow'**, () => {\n **it('should return 0 if no parameter is passed', () => {**\n **expect(numberOfSecondsFromNow()).toEqual(0)**\n **})**\n  it('should return the exact number of seconds from now', () => {\n    Date.now = jest.fn(() => 2000)\n    expect(numberOfSecondsFromNow(1000)).toEqual(1)\n  })\n})\n```", "```js\n// test/mutations.spec.js\nimport mutations from '~/store/mutations'\n```", "```js\n// store/mutations.js\nsetWorkingPomodoro (state, workingPomodoro) {\n  state.config.workingPomodoro = workingPomodoro\n}\n```", "```js\n// test/mutations.spec.js\nimport mutations from '~/store/mutations'\n\ndescribe('mutations', () => {\n  describe('setWorkingPomodoro', () => {\n    it('should set the workingPomodoro property to 30', () => {\n      let state = {config: {workingPomodoro: 1}}\n      mutations.setWorkingPomodoro(state, 30)\n      expect(state.config).toEqual({workingPomodoro: 30})\n    })\n  })\n})\n```", "```js\nuploadImages ({state}, files) {\n  return Promise.all(files.map(this._uploadImage))\n}\n```", "```js\n// store/actions.js\nfunction _uploadImage (file) {\n  //...\n}\n\nexport default {\n  **_uploadImage**,\n  uploadImages ({state}, files) {\n    return Promise.all(files.map(**this._uploadImage**))\n  }\n  //...\n}\n```", "```js\n// test/actions.spec.js\nit('should call method _uploadImage 3 times', () => {\n  **actions._uploadImage = jest.fn()**\n})\n```", "```js\nactions._uploadImage.mock.calls\n```", "```js\nexpect(**actions._uploadImage.mock.calls.length**).toEqual(**3**)\n```", "```js\n// test/actions.spec.js\nimport actions from '~/store/actions'\n\ndescribe('actions', () => {\n  describe('uploadImages', () => {\n    it('should call method _uploadImage 3 times', () => {\n      actions._uploadImage = jest.fn()\n      actions.uploadImages({}, [1, 2, 3])**.then(() => {**\n **expect(actions._uploadImage.mock.calls.length).toEqual(3)**\n **})**\n    })\n  })\n})\n```", "```js\n// store/actions.js\ncreateNewWorkout ({commit, state}, workout) {\n  //...\n  **let newWorkoutKey = state.workoutsRef.push().key**\n  let updates = {}\n  updates['/workouts/' + newWorkoutKey] = workout\n  updates['/user-workouts/' + state.user.uid + '/' + newWorkoutKey] = workout\n\n  **return firebaseApp.database().ref().update(updates)**\n}\n```", "```js\n// __mocks__/firebaseMocks.js\nexport default {\n  **update: () => {}**\n}\n```", "```js\n// __mocks__/firebaseAppMock.js\nimport firebaseMocks from './firebaseMocks'\nexport default {\n  **database**: () => {\n    return {\n      ref: function () {\n        return {\n          **update: firebaseMocks.update**\n        }\n      }\n    }\n  }\n}\n```", "```js\n// test/actions.spec.js\nimport mockFirebaseApp from '~/__mocks__/firebaseAppMock'\n**jest.mock('~/firebase', () => mockFirebaseApp)**\n\n**import actions from '~/store/actions'**\n\n```", "```js\n// actions.js\nworkout.username = state.user.displayName\nworkout.uid = state.user.uid\n```", "```js\nlet state = {\n  user: {\n    displayName: 'Olga',\n    uid: 1\n  }}\n```", "```js\nworkout.date = Date.now()\nworkout.rate = 0\n```", "```js\nDate.now = **jest.fn(() => 2000)**\n\n```", "```js\nlet newWorkoutKey = state.workoutsRef.push().key\n```", "```js\nlet state = {\n  user: {\n    displayName: 'Olga',\n    uid: 1\n  },\n  **workoutsRef: {**\n **push: function () {**\n **return {**\n **key: 59**\n **}**\n **}**\n  }}\n```", "```js\n{\n  'date': 2000,\n  'rate': 0,\n  'uid': 1,\n  'username': 'Olga'\n}\n```", "```js\nconst spy = jest.**spyOn**(firebaseMocks, 'update')\n```", "```js\nexpect(spy).toHaveBeenCalledWith({\n  '/user-workouts/1/59': {\n    'date': 2000,\n    'rate': 0,\n    'uid': 1,\n    'username': 'Olga'\n  },\n  '/workouts/59': {\n    'date': 2000,\n    'rate': 0,\n    'uid': 1,\n    'username': 'Olga'\n  }\n})\n```", "```js\ndescribe('createNewWorkout', () => {\n  it('should call update with', () => {\n    const spy = jest.spyOn(firebaseMocks, 'update')\n    Date.now = jest.fn(() => 2000)\n    let state = {\n      user: {\n        displayName: 'Olga',\n        uid: 1\n      },\n      workoutsRef: {\n        push: function () {\n          return {\n            key: 59\n          }\n        }\n      }}\n    actions.createNewWorkout({state: state}, {})\n    expect(spy).toHaveBeenCalledWith({\n      '/user-workouts/1/59': {\n        'date': 2000,\n        'rate': 0,\n        'uid': 1,\n        'username': 'Olga'\n      },\n      '/workouts/59': {\n        'date': 2000,\n        'rate': 0,\n        'uid': 1,\n        'username': 'Olga'\n      }\n    })\n  })\n})\n```", "```js\n**npm install --save-dev jest-vue-preprocessor babel-preset-stage-2**\n\n```", "```js\n// .babelrc\n{\n  \"presets\": [\"es2015\", \"stage-2\"]\n}\n```", "```js\n// package.json\n\"jest\": {\n    **\"transform\": {**\n **\"^.+\\\\.js$\": \"<rootDir>/node_modules/babel-jest\",**\n **\".*\\\\.(vue)$\": \"<rootDir>/node_modules/jest-vue-preprocessor\"**\n    }\n  }\n```", "```js\n// package.json\n\"jest\": {\n  \"moduleNameMapper\": {\n     \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\": **\"<rootDir>/__mocks__/fileMock.js\"**,\n\"\\\\.(css|scss)$\": **\"<rootDir>/__mocks__/styleMock.js\"**,\n    // ...\n  }\n}\n```", "```js\n// styleMock.js\nmodule.exports = {}\n\n// fileMock.js\nmodule.exports = 'test-file-stub'\n```", "```js\n// package.json\n\"jest\": {\n  // ...\n  \"moduleNameMapper\": {\n    // ...\n    **\"^vue$\": \"vue/dist/vue.common.js\",**\n **\"^vuex$\": \"vuex/dist/vuex.common.js\",**\n    \"^~(.*)$\": \"<rootDir>/$1\"\n  }\n},\n```", "```js\n\"jest\": {\n  //...\n  \"moduleNameMapper\": {\n    \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\": \"<rootDir>/__mocks__/fileMock.js\",\n    \"\\\\.(css|scss)$\": \"<rootDir>/__mocks__/styleMock.js\",\n    \"^vue$\": \"vue/dist/vue.common.js\",\n    \"^vuex$\": \"vuex/dist/vuex.common.js\",\n    **\"^~/(components|pages)(.*)$\": \"<rootDir>/$1/$2.vue\",**\n    \"^~(.*)$\": \"<rootDir>/$1\"\n  }\n}\n```", "```js\nimport Vue from 'vue'\n**import mockFirebaseApp from '~/__mocks__/firebaseAppMock'**\n**jest.mock('~/firebase', () => mockFirebaseApp)**\n**import store from '~/store'**\nimport HeaderComponent from '~/components/common/HeaderComponent'\n```", "```js\n// HeaderComponent.spec.js\nlet $mounted\n\nbeforeEach(() => {\n  $mounted = new Vue({\n    template: '<header-component **ref=\"headercomponent\"**></header-component>',\n    **store: store()**,\n    **components: {**\n **'header-component': HeaderComponent**\n **}**\n  }).$mount()\n})\n```", "```js\n**let $headerComponent = $mounted.$refs.headercomponent**\n\n```", "```js\n// HeaderComponent.spec.js\ntest('onLogout', () => {\n  let $headerComponent = $mounted.$refs.headercomponent\n  **$headerComponent.$router = []**\n  const spy = jest.spyOn($headerComponent, 'logout')\n  $headerComponent.onLogout()\n  **expect(spy).toHaveBeenCalled()**\n **expect($headerComponent.$router).toEqual(['/'])**\n})\n```", "```js\n// package.json\n\"test\": \"NODE_ENV=production jest\"\n```", "```js\nlet $html = $mounted.$el.outerHTML\nexpect($html).**toMatchSnapshot()**\n\n```", "```js\n// __mocks__/gettersMock.js\nexport default {\n  **getUser: () => {**\n **return {displayName: 'Olga'}**\n **}**,\n  getConfig: () => {\n    return {\n      workingPomodoro: 25,\n      shortBreak: 5,\n      longBreak: 10,\n      pomodorosTillLongBreak: 3\n    }\n  },\n  getDisplayName: () => {\n    return 'Olga'\n  },\n  getWorkouts: () => {\n    return []\n  },\n  getTotalPomodoros: () => {\n    return 10\n  },\n  isAuthenticated: () => {\n    return false\n  }\n}\n```", "```js\n// components/landing/index.js\nexport {default as Authentication} from '**~/components**/landing/Authentication'\n//...\n```", "```js\n\"jest\": {\n  \"moduleNameMapper\": {\n    //...\n    **\"^~/(components/)(common|landing|workouts)$\": \"<rootDir>/$1/$2\"**\n    //...\n  }\n}\n```", "```js\n// pages.snapshot.spec.js\nimport Vue from 'vue'\nimport mockFirebaseApp from '~/__mocks__/firebaseAppMock'\nimport mockGetters from '~/__mocks__/getterMocks'\n**jest.mock('~/firebase', () => mockFirebaseApp)**\n**jest.mock('~/store/getters', () => mockGetters)**\nimport store from '~/store'\n**import IndexPage from '~/pages/index'**\n**import AboutPage from '~/pages/about'**\n**import LoginPage from '~/pages/login'**\n**import PomodoroPage from '~/pages/pomodoro'**\n**import SettingsPage from '~/pages/settings'**\n**import StatisticsPage from '~/pages/statistics'**\n**import WorkoutsPage from '~/pages/workouts'**\n\n```", "```js\n// pages.snapshot.spec.js\nlet $mounted = new Vue({\n  template: '<index-page></index-page>',\n  store: store(),\n  components: {\n    'index-page': IndexPage\n  }\n}).$mount()\n```", "```js\n// pages.snapshot.spec.js\ndescribe('pages', () => {\n  test('index snapshot', () => {\n    let $mounted = new Vue({\n      template: '<index-page></index-page>',\n      store: store(),\n      components: {\n        'index-page': IndexPage\n      }\n    }).$mount()\n    **let $html = $mounted.$el.outerHTML**\n **expect($html).toMatchSnapshot()**\n  })\n})\n```", "```js\n**npm test -- --u**\n\n```"]