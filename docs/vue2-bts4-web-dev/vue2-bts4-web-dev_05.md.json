["```js\nlet config = {\n  apiKey: 'YourAPIKey',\n  databaseURL: 'YourDBURL',\n  authDomain: 'YourAuthDomain'\n}\nlet app = firebase.initializeApp(config)\n```", "```js\napp.auth().**createUserWithEmailAndPassword**(email, password)\n```", "```js\napp.auth().**signInWithEmailAndPassword**(email, password)\n```", "```js\napp.auth().**onAuthStateChanged**((user) => {\n  if (user) {\n    // user is logged in\n  } else {\n    // user is logged out\n  }\n})\n```", "```js\n// store/index.js\nlet config = {\n  apiKey: 'YourAPIKey',\n  databaseURL: 'https://profitoro-ad0f0.firebaseio.com',\n  authDomain: 'profitoro-ad0f0.firebaseapp.com'\n}\nlet firebaseApp = firebase.initializeApp(config)\n```", "```js\n//store/index.js\nexport default new Vuex.Store({\n  state: {\n    ...state,\n    firebaseApp\n  },\n  <...>\n})\n```", "```js\n// store/state.js\nexport default {\n  config,\n  statistics,\n  **user,**\n **isAnonymous: false**\n}\n```", "```js\n// store/mutations.js\nexport default {\n  <...>\n  **setUser (state, value) {**\n **state.user = value**\n **}**\n}\n```", "```js\n// store/actions.js\n**createUser** ({state}, {email, password}) {\n  state.firebaseApp.auth().**createUserWithEmailAndPassword**(email, password).catch(error => {\n    console.log(error.code, error.message)\n  })\n},\n**authenticate** ({state}, {email, password}) {\n  state.firebaseApp.auth().**signInWithEmailAndPassword**(email, password)\n},\n**logout** ({state}) {\n  state.firebaseApp.auth().**signOut**()\n},\n**bindAuth** ({commit, state}) {\n  state.firebaseApp.auth().**onAuthStateChanged**((user) => {\n    commit('setUser', user)\n  })\n},\n```", "```js\n// App.vue\nmethods: {\n  ...mapActions(['bindStatistics', 'bindConfig', **'bindAuth'**])\n},\ncreated () {\n  **this.bindAuth()**\n  this.bindConfig()\n  this.bindStatistics()\n}\n```", "```js\n// App.vue\n<template>\n  <div id=\"app\">\n    <landing-page **v-if=\"!user\"**></landing-page>\n    <main-content **v-if=\"user\"**></main-content>\n  </div>\n</template>\n```", "```js\n// Authentication.vue\nexport default {\n  **data** () {\n    return {\n **registerEmail: '',**\n **registerPassword: '',**\n **loginEmail: '',**\n **loginPassword: ''**\n    }\n  }\n}\n```", "```js\n<template>\n  <div>\n    <h1>Register</h1>\n    <input **v-model=\"registerEmail\"** type=\"text\" placeholder=\"email\">\n    <input **v-model=\"registerPassword\"** type=\"password\" placeholder=\"password\">\n    <button>Register!</button>\n    <h1>Login</h1>\n    <input **v-model=\"loginEmail\"** type=\"text\" placeholder=\"email\">\n    <input **v-model=\"loginPassword\"** type=\"password\" placeholder=\"password\">\n    <button>Log in!</button>\n  </div>\n</template>\n```", "```js\n// Authentication.vue\n<script>\n  **import {mapActions} from 'vuex'**\n\n  export default {\n    <...>\n    methods: {\n      **...mapActions(['createUser', 'authenticate'])**,\n      **onRegisterClick** () {\n        this.**createUser**({email: **this.registerEmail**, password: **this.registerPassword**})\n      },\n      **onLoginClick** () {\n        this.**authenticate**({email: **this.loginEmail**, password: **this.loginPassword**})\n      }\n    }\n  }\n</script>\n```", "```js\n// Authentication.vue\n<template>\n  <div>\n    <h1>Register</h1>\n    <input v-model=\"registerEmail\" type=\"text\" placeholder=\"email\">\n    <input v-model=\"registerPassword\" type=\"password\" placeholder=\"password\">\n    <button **@click=\"onRegisterClick\"**>Register!</button>\n    <h1>Login</h1>\n    <input v-model=\"loginEmail\" type=\"text\" placeholder=\"email\">\n    <input v-model=\"loginPassword\" type=\"password\" placeholder=\"password\">\n    <button **@click=\"onLoginClick\"**>Log in!</button>\n  </div>\n</template>\n```", "```js\n// HeaderComponent.vue\n<template>\n  <div>\n    <button **@click=\"logout\"**>Logout</button>\n  </div>\n</template>\n<script>\n  **import {mapActions} from 'vuex'**\n\n  export default {\n    methods: {\n      **...mapActions(['logout'])**\n    }\n  }\n</script>\n```", "```js\n// LandingPage.vue\n<template>\n  <div>\n    <...>\n    <div class=\"**container row justify-content-center**\">\n      <div class=\"**col-sm-12 col-md-6 col-lg-6**\">\n        <authentication></authentication>\n      </div>\n      <div class=\"**col-sm-12 col-md-6 col-lg-6**\">\n        <go-to-app-link></go-to-app-link>\n      </div>\n    </div>\n  </div>\n</template>\n```", "```js\n<div class=\"**form-group**\">\n  <input class=\"**form-control**\" v-model=\"email\" type=\"email\" placeholder=\"email\">\n</div>\n```", "```js\n// store/actions.js\n**authenticateAnonymous** ({state}) {\n  state.firebaseApp.auth().**signInAnonymously**().catch(error => {\n    console.log(error.code, error.message)\n  })\n},\n```", "```js\n// store/mutations.js\nsetUser (state, value) {\n  state.user = value\n  **state.isAnonymous = value.isAnonymous**\n}\n```", "```js\n// state/actions.js\nbindConfig: firebaseAction(({bindFirebaseRef, state}) => {\n  if (state.user **&& !state.isAnonymous**) {\n    bindFirebaseRef('config', state.configRef)\n  }\n}),\nbindStatistics: firebaseAction(({bindFirebaseRef, state}) => {\n  if (state.user **&& !state.isAnonymous**) {\n    bindFirebaseRef('statistics', state.statisticsRef)\n  }\n})\n```", "```js\n// GoToAppLink.vue\n<template>\n  <div>\n    **<button @click=\"authenticateAnonymous\">**\n **START WITHOUT REGISTRATION**\n **</button>**\n  </div>\n</template>\n<script>\n  **import {mapActions} from 'vuex'**\n\n  export default {\n    methods: {\n      **...mapActions(['authenticateAnonymous'])**\n    }\n  }\n</script>\n```", "```js\n// store/actions.js\nbindConfig: firebaseAction(({bindFirebaseRef, state}) => {\n  if (state.user && !state.isAnonymous) {\n    bindFirebaseRef('config', **state.configRef**)\n  }\n}),\n```", "```js\n// store/actions.js\nlet firebaseApp = firebase.initializeApp(config)\nlet db = firebaseApp.database()\n**let configRef = db.ref('/configuration/test')**\n\n```", "```js\n// store/action.js\nbindConfig: firebaseAction(({bindFirebaseRef, state}) => {\n  if (state.user && !state.isAnonymous) {\n    let db = firebaseApp.database()\n    bindFirebaseRef('config', **db.ref(`/configuration/${state.user.uid}`)**)\n  }\n}),\n```", "```js\nfirebaseApp.database().ref(**`/configuration/${state.user.uid}`**).set(\n  state.config\n);\n```", "```js\n// store/actions.js\nbindFirebaseReference: firebaseAction(({bindFirebaseRef, state}, {reference, toBind}) => {\n  return reference.once('value').then(snapshot => {\n    if (!snapshot.val()) {\n      **reference.set(state[toBind])**\n    }\n    **bindFirebaseRef(toBind, reference)**\n  })\n}),\n```", "```js\n// store/actions.js\nbindFirebaseReferences: firebaseAction(({bindFirebaseRef, state, commit, dispatch}, user) => {\n  let db = state.firebaseApp.database()\n  let **configRef** = db.ref(**`/configuration/${user.uid}`**)\n  let **statisticsRef** = db.ref(**`/statistics/${user.uid}`**)\n  dispatch('bindFirebaseReference', {reference: configRef, toBind: 'config'}).then(() => {\n    **commit('setConfigRef', configRef)**\n  })\n  dispatch('bindFirebaseReference', {reference: statisticsRef, toBind: 'statistics'}).then(() => {\n    **commit('setStatisticsRef', statisticsRef)**\n  })\n}),\n```", "```js\n// store/actions.js\n**updateUserName** ({state, commit}, displayName) {\n  state.user.**updateProfile**({\n    displayName\n  })\n},\n**updatePhotoURL** ({state}, photoURL) {\n  state.user.**updateProfile**({\n    photoURL\n  })\n},\n**updateUserEmail** ({state}, email) {\n  state.user.**updateEmail**(email).then(() => {\n    // Update successful.\n  }, error => {\n    console.log(error)\n  })\n},\n```", "```js\n// Settings.vue\ndata () {\n  return {\n    **displayName**: '',\n    **email**: '',\n    **photoURL**: 'static/tomato.png'\n  }\n},\ncomputed: {\n  ...mapGetters({**user**: 'getUser'})\n},\ncreated () {\n  **this.displayName** = this.user.displayName\n  **this.email** = this.user.email\n  **this.photoURL** = this.user.photoURL ? this.user.photoURL : this.photoURL\n}\n```", "```js\n// Settings.vue\nmethods: {\n  **...mapActions(['updateUserName', 'updateUserEmail', 'updatePhotoURL'])**,\n  onChangeUserName () {\n    this.**updateUserName**(this.**displayName**)\n  },\n  onChangeUserEmail () {\n    this.**updateUserEmail**(this.**email**)\n  },\n  **onProfilePicChanged** () {\n    this.**updatePhotoURL**(this.**photoURL**)\n  }\n}\n```", "```js\n// Settings.vue\n<form>\n  <div class=\"form-group\">\n    <figure class=\"figure\">\n      <img **:src=\"photoURL\"** alt=\"Avatar\">\n      <input type=\"text\" **v-model=\"photoURL\"** **@change=\"onProfilePicChanged\"**>\n    </figure>\n  </div>\n  <div class=\"form-group\">\n    <input **@change=\"onChangeUserName\"** **v-model=\"displayName\"** type=\"text\" placeholder=\"Change your username\">\n  </div>\n  <div class=\"form-group\">\n    <input **@change=\"onChangeUserEmail\"** **v-model=\"email\"** type=\"text\" placeholder=\"Change your username\">\n  </div>\n</form>\n```"]