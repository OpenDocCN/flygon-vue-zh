["```js\n**npm install vuex --save**\n\n```", "```js\n//store/index.js\n**import Vue from 'vue'**\n**import Vuex from 'vuex'**\nimport state from './state'\nimport getters from './getters'\nimport mutations from './mutations'\nimport actions from './actions'\n\n**Vue.use(Vuex)**\n\nexport default new Vuex.Store({\n  **state,**\n **getters,**\n **mutations,**\n **actions**\n})\n```", "```js\n//main.js\nimport Vue from 'vue'\nimport App from './App'\n**import store from './store'**\n\nnew Vue({\n  el: '#app',\n  template: '<App/>',\n  components: { App },\n  **store**\n})\n```", "```js\n//store/state.js\nconst config = {\n  workingPomodoro: 25,\n  shortBreak: 5,\n  longBreak: 10,\n  pomodorosTillLongBreak: 3\n}\n\nexport default {\n  **config**\n}\n```", "```js\n//store/getters.js\nfunction getConfig (state) {\n  return state.config\n}\n```", "```js\n//store/getters.js\nvar getConfig = (state) => state.config\n```", "```js\n//store/getters.js\nexport default {\n  getConfig: getConfig\n}\n```", "```js\n//store/getter.js\nexport default {\n  getConfig\n}\n```", "```js\n//store/getters.js\nexport default {\n  **getConfig: state => state.config**\n}\n```", "```js\n**computed**: {\n  config () {\n    return **this.$store.getters.getConfig**\n  }\n},\n```", "```js\nimport { **mapGetters** } from 'vuex'\n\nexport default {\n  computed: {\n    **...mapGetters**([\n      'getConfig'\n    ])\n  }\n}\n```", "```js\nimport { mapGetters } from 'vuex'\n\nexport default {\n  computed: {\n    ...mapGetters({\n      **config: 'getConfig'**\n    })\n  }\n}\n```", "```js\n//PomodoroTimer.vue\n<script>\n  // ...\n  **import { mapGetters } from 'vuex'**\n  // ...\n  export default {\n    data () {\n      // ...\n    },\n    computed: {\n      **...mapGetters({**\n **config: 'getConfig'**\n **})**,\n      time () {\n        let minutes\n        if (this.isWorking) {\n          minutes = **this.config**.workingPomodoro\n        } else if (this.isShortBreak) {\n          minutes = **this.config**.shortBreak\n        } else if (this.isLongBreak) {\n          minutes = **this.config**.longBreak\n        }\n\n        return minutes * 60\n      }\n    },\n    // ...\n    methods: {\n      togglePomodoro () {\n        // ...\n        this.isLongBreak = this.pomodoros % **this.config**.pomodorosTillLongBreak === 0\n      }\n    }\n  }\n</script>\n```", "```js\n// Settings.vue\n<div class=\"**row justify-content-center**\">\n  <div class=\"**col-sm-12 col-md-6 col-lg-4**\">\n    <div class=\"container\">\n      <h2>Account settings</h2>\n      account settings\n    </div>\n  </div>\n  <div class=\"**col-sm-12 col-md-6 col-lg-8**\">\n    <div class=\"container\">\n      <h2>Set your pomodoro timer</h2>\n      pomodoro timer configuration\n    </div>\n  </div>\n</div>\n```", "```js\n//Settings.vue\n<template>\n  <...>\n    <div class=\"row justify-content-center align-items-center\">\n      <div class=\"col-md-5 col-sm-10\">\n        **<set-timer :value=\"config.workingPomodoro\"></set-timer>**\n        <div class=\"figure-caption\">Pomodoro</div>\n      </div>\n      <div class=\"col-md-4 col-sm-10\">\n        **<set-timer :value=\"config.longBreak\"></set-timer>**\n        <div class=\"figure-caption\">Long break</div>\n      </div>\n      <div class=\"col-md-3 col-sm-10\">\n        **<set-timer :value=\"config.shortBreak\"></set-timer>**\n        <div class=\"figure-caption\">Short break</div>\n      </div>\n    </div>\n  <...>\n</template>\n```", "```js\n//store/mutations.js\nexport default {\n  **setWorkingPomodoro** (state, workingPomodoro) {\n    state.config.workingPomodoro = workingPomodoro\n  },\n  **setShortBreak** (state, shortBreak) {\n    state.config.shortBreak = shortBreak\n  },\n  **setLongBreak** (state, longBreak) {\n    state.config.longBreak = longBreak\n  }\n}\n```", "```js\nactionName (**{commit}**, newValue) {\n  **commit**('mutationName', newValue)\n}\n```", "```js\n//store/actions.js\nexport default {\n  **setWorkingPomodoro** ({commit}, workingPomodoro) {\n    if (workingPomodoro) {\n      commit('setWorkingPomodoro', parseInt(workingPomodoro, 10))\n    }\n  },\n  **setShortBreak** ({commit}, shortBreak) {\n    if (shortBreak) {\n      commit('setShortBreak', parseInt(shortBreak, 10))\n    }\n  },\n  **setLongBreak** ({commit}, longBreak) {\n    if (longBreak) {\n      commit('setLongBreak', parseInt(longBreak, 10))\n    }\n  }\n}\n```", "```js\n//Settings.vue\n<script>\n  import {mapGetters, **mapActions**} from 'vuex'\n  <...>\n  export default {\n    <...>\n    methods: {\n      **...mapActions(['setWorkingPomodoro', 'setShortBreak', 'setLongBreak'])**\n    }\n  }\n</script>\n```", "```js\n<div class=\"col-md-5 col-sm-10\">\n  **<set-timer :value=\"config.workingPomodoro\" @valueChanged=\"setWorkingPomodoro\"></set-timer>**\n  <div class=\"figure-caption\">Pomodoro</div>\n</div>\n<div class=\"col-md-4 col-sm-10\">\n  **<set-timer :value=\"config.longBreak\" @valueChanged=\"setLongBreak\"></set-timer>**\n  <div class=\"figure-caption\">Long break</div>\n</div>\n<div class=\"col-md-3 col-sm-10\">\n  **<set-timer :value=\"config.shortBreak\" @valueChanged=\"setShortBreak\"></set-timer>**\n  <div class=\"figure-caption\">Short break</div>\n</div>\n```", "```js\n{\n  \"configuration\": {\n    \"test\": {\n      \"workingPomodoro\": 25,\n      \"shortBreak\": 5,\n      \"longBreak\": 10\n    }\n  }\n}\n```", "```js\n{\n  \"rules\": {\n    \".read\": true,\n    \".write\": true\n  }\n}\n```", "```js\n**npm install vue firebase vuexfire \u2013save**\n\n```", "```js\n//store/index.js\nimport firebase from 'firebase'\nimport { firebaseMutations } from 'vuexfire'\n```", "```js\n//store/index.js\nlet app = firebase.initializeApp({\n  databaseURL: **'https://profitoro-ad0f0.firebaseio.com'**\n})\n```", "```js\nlet configRef = app.database().ref('**/configuration/test**')\n```", "```js\n//store/index.js\nexport default new Vuex.Store({\n  **state: {**\n **...state,**\n **configRef**\n **}**\n})\n```", "```js\n//store/index.js\nexport default new Vuex.Store({\n  mutations: {\n    ...mutations,\n    **...firebaseMutations**\n  },\n  actions\n})\n```", "```js\n//store/index.js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport state from './state'\nimport getters from './getters'\nimport mutations from './mutations'\nimport actions from './actions'\nimport firebase from 'firebase'\nimport { firebaseMutations } from 'vuexfire'\nVue.use(Vuex)\n\n// Initialize Firebase\nlet config = {\n  databaseURL: 'https://profitoro-ad0f0.firebaseio.com'\n}\nlet app = firebase.initializeApp(config)\nlet configRef = app.database().ref('/configuration/test')\n\nexport default new Vuex.Store({\n  state: {\n    ...state,\n    configRef\n  },\n  getters,\n  mutations: {\n    ...mutations,\n    ...firebaseMutations\n  },\n  actions\n})\n```", "```js\n//store/actions.js\nimport { **firebaseAction** } from 'vuexfire'\n```", "```js\n//store/actions.js\n**bindConfig**: firebaseAction(({bindFirebaseRef, state}) => {\n  **bindFirebaseRef('config', state.configRef)**\n})\n```", "```js\n//Settings.vue\nexport default {\n //...\n methods: {\n    ...mapActions(['setWorkingPomodoro', 'setShortBreak', 'setLongBreak', **'bindConfig'**])\n  },\n  **created () {**\n **this.bindConfig()**\n **}**\n}\n```", "```js\n//store/actions.js\nsetWorkingPomodoro ({commit, **state**}, workingPomodoro) {\n  **state.configRef.update({workingPomodoro})**\n},\n```"]