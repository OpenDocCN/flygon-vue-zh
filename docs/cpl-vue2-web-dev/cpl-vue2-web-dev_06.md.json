["```js\n<script type=\"text/javascript\" src=\"js/vue.js\"></script>\n<script type=\"text/javascript\" src=\"js/vuex.js\"></script>\n<script type=\"text/javascript\" src=\"js/dropbox.js\"></script>\n<script type=\"text/javascript\" src=\"js/app.js\"></script>\n```", "```js\nconst store = new Vuex.Store({\n\n});\n```", "```js\nconst app = new Vue({\n  el: '#app',\n\n  store,\n  data: {\n    path: ''\n  }, \n  methods: {\n    updateHash() {\n      let hash = window.location.hash.substring(1);\n      this.path = (hash || '');\n    }\n  },\n  created() {\n    this.updateHash()\n  }\n});\n```", "```js\nconst store = new Vuex.Store({\n  state: {\n    message: 'HelLO Vue!'\n  },\n\n  getters: {\n    message: state => {\n      return state.message.toLowerCase();\n    }\n  },\n\n  mutations: {\n    updateMessage(state, msg) {\n      state.message = msg;\n    }\n  }\n});\n```", "```js\nnew Vue({\n  el: '#app',\n\n  store,\n  computed: {\n    message() {\n      return this.$store.state.message\n    },\n    formatted() {\n      return this.$store.getters.message\n    }\n  }\n});\n```", "```js\nthis.$store.state.message\n```", "```js\nthis.$store.getters.message\n```", "```js\nstore.commit('updateMessage', 'VUEX Store');\n```", "```js\nconst store = new Vuex.Store({\n  state: {\n path: ''\n }\n});\n```", "```js\nconst store = new Vuex.Store({\n  state: {\n    path: ''\n  },\n  mutations: {\n updateHash(state) {\n let hash = window.location.hash.substring(1);\n state.path = (hash || '');\n }\n }\n});\n```", "```js\nconst app = new Vue({\n  el: '#app',\n\n  store,\n  created() {\n    this.updateHash()\n  }\n});\n```", "```js\nconst app = new Vue({\n  el: '#app',\n\n  store,\n  created() {\n    store.commit('updateHash');\n  }\n});\n\nwindow.onhashchange = () => {\n  app.$store.commit('updateHash');\n}\n```", "```js\n<breadcrumb></breadcrumb>\n```", "```js\nVue.component('breadcrumb', {\n  template: '<div>' +\n    '<span v-for=\"(f, i) in folders\">' +\n      '<a :href=\"f.path\">[F] {{ f.name }}</a>' +\n      '<i v-if=\"i !== (folders.length - 1)\"> &raquo; </i>' +\n    '</span>' + \n  '</div>',\n\n  computed: {\n    folders() {\n      let output = [],\n        slug = '',\n        parts = this.$store.state.path.split('/');\n\n      for (let item of parts) {\n        slug += item;\n        output.push({'name': item || 'home', 'path': '#' + slug});\n        slug += '/';\n      }\n\n      return output;\n    }\n  }\n});\n```", "```js\n<div id=\"app\">\n  <dropbox-viewer></dropbox-viewer>\n</div>\n```", "```js\nthis.dropbox().filesListFolder({\n  path: this.$store.state.path, \n  include_media_info: true\n})\n```", "```js\nupdateStructure(path) {\n  this.isLoading = true;\n  this.getFolderStructure(path);\n}\n```", "```js\nupdateStructure() {\n  this.isLoading = true;\n  this.getFolderStructure();\n}\n```", "```js\ncomputed: {\n  path() {\n    return this.$store.state.path\n  }\n}\n```", "```js\nVue.component('dropbox-viewer', {\n  template: '#dropbox-viewer-template',\n\n  data() {\n    return {\n      accessToken: 'XXXX',\n      structure: {},\n      isLoading: true\n    }\n  },\n\n  computed: {\n path() {\n return this.$store.state.path\n }\n },\n\n  methods: {\n    dropbox() {\n      return new Dropbox({\n        accessToken: this.accessToken\n      });\n    },\n\n    getFolderStructure() { \n      this.dropbox().filesListFolder({\n        path: this.path, \n        include_media_info: true\n      })\n      .then(response => {\n\n        const structure = {\n          folders: [],\n          files: []\n        }\n\n        for (let entry of response.entries) {\n          // Check \".tag\" prop for type\n          if(entry['.tag'] == 'folder') {\n            structure.folders.push(entry);\n          } else {\n            structure.files.push(entry);\n          }\n        }\n\n        this.structure = structure;\n        this.isLoading = false;\n      })\n      .catch(error => {\n        this.isLoading = 'error';\n        console.log(error);\n      });\n    },\n\n    updateStructure() {\n      this.isLoading = true;\n      this.getFolderStructure();\n    }\n  },\n\n  created() {\n    this.getFolderStructure();\n  },\n\n  watch: {\n    path() {\n      this.updateStructure();\n    }\n  },\n});\n```", "```js\ncreateFolderStructure(response) {\n  const structure = {\n    folders: [],\n    files: []\n  }\n\n  for (let entry of response.entries) {\n    // Check \".tag\" prop for type\n    if(entry['.tag'] == 'folder') {\n      structure.folders.push(entry);\n    } else {\n      structure.files.push(entry);\n    }\n  }\n\n  this.structure = structure;\n  this.isLoading = false;\n},\n\ngetFolderStructure() { \n  this.dropbox().filesListFolder({\n    path: this.path, \n    include_media_info: true\n  })\n  .then(this.createFolderStructure)\n  .catch(error => {\n    this.isLoading = 'error';\n    console.log(error);\n  });\n}\n```", "```js\nstructure: {\n  'images': [{...}],\n  'images-holiday': [{...}],\n  'images-holiday-summer': [{...}]\n}\n```", "```js\nstate: {\n  path: '',\n  structure: {}\n}\n```", "```js\nstructure(state, payload) {\n}\n```", "```js\n{\n  path: 'images-holiday',\n  data: [{...}]\n}\n```", "```js\nstructure(state, payload) {\n  state.structure[payload.path] = payload.data;\n}\n```", "```js\ncreateFolderStructure(response) {\n  const structure = {\n    folders: [],\n    files: []\n  }\n\n  for (let entry of response.entries) {\n    // Check \".tag\" prop for type\n    if(entry['.tag'] == 'folder') {\n      structure.folders.push(entry);\n    } else {\n      structure.files.push(entry);\n    }\n  }\n\n  this.structure = structure;\n  this.isLoading = false;\n\n this.$store.commit('structure', {\n path: this.path,\n data: response\n });\n}\n```", "```js\nslug() {\n  return this.path.toLowerCase()\n    .replace(/^\\/|\\/$/g, '')\n    .replace(/ /g,'-')\n    .replace(/\\//g,'-')\n    .replace(/[-]+/g, '-')\n    .replace(/[^\\w-]+/g,'');\n}\n```", "```js\nthis.$store.commit('structure', {\n  path: this.slug,\n  data: response\n});\n```", "```js\nif(this.$store.state.structure[this.slug]) {\n  // The data exists\n}\n```", "```js\ngetFolderStructure() {\n  if(this.$store.state.structure[this.slug]) {\n this.createFolderStructure(this.$store.state.structure[this.slug]);\n } else {\n    this.dropbox().filesListFolder({\n      path: this.path, \n      include_media_info: true\n    })\n    .then(this.createFolderStructure)\n    .catch(error => {\n      this.isLoading = 'error';\n      console.log(error);\n    });\n  }\n}\n```", "```js\ngetFolderStructure() {\n  let data = this.$store.state.structure[this.slug]; \n  if(data) {\n    this.createFolderStructure(data);\n  } else {\n    this.dropbox().filesListFolder({\n      path: this.path, \n      include_media_info: true\n    })\n    .then(this.createFolderStructure)\n    .catch(error => {\n      this.isLoading = 'error';\n      console.log(error);\n    });\n  }\n}\n```", "```js\ncreateStructureAndSave(response) {\n\n}\n```", "```js\ncreateStructureAndSave(response) {\n\n  this.createFolderStructure(response)\n\n this.$store.commit('structure', {\n path: this.slug,\n data: response\n });\n}\n```", "```js\ngetFolderStructure() {\n  let data = this.$store.state.structure[this.slug]; \n  if(data) {\n    this.createFolderStructure(data);\n  } else {\n    this.dropbox().filesListFolder({\n      path: this.path, \n      include_media_info: true\n    })\n    .then(this.createStructureAndSave)\n    .catch(error => {\n      this.isLoading = 'error';\n      console.log(error);\n    });\n  }\n\n},\n```", "```js\nVue.component('breadcrumb', {\n  template: '<div>' +\n    '<span v-for=\"(f, i) in folders\">' +\n      '<a :href=\"f.path\">[F] {{ f.name }}</a>' +\n      '<i v-if=\"i !== (folders.length - 1)\"> &raquo; </i>' +\n    '</span>' + \n  '</div>',\n  computed: {\n    folders() {\n      let output = [],\n        slug = '',\n        parts = this.$store.state.path.split('/');\n\n      for (let item of parts) {\n        slug += item;\n        output.push({'name': item || 'home', 'path': '#' + slug});\n        slug += '/';\n      }\n\n      return output;\n    }\n  }\n});\n\nVue.component('folder', {\n  template: '<li><strong><a :href=\"\\'#\\' + f.path_lower\">{{ f.name }}</a></strong></li>',\n  props: {\n    f: Object\n  }\n});\n\nVue.component('file', {\n  template: '<li><strong>{{ f.name }}</strong><span v-if=\"f.size\"> - {{ bytesToSize(f.size) }}</span> - <a v-if=\"link\" :href=\"link\">Download</a></li>',\n  props: {\n    f: Object,\n    d: Object\n  },\n\n  data() {\n    return {\n      byteSizes: ['Bytes', 'KB', 'MB', 'GB', 'TB'],\n      link: false\n    }\n  },\n\n  methods: {\n    bytesToSize(bytes) {\n      // Set a default\n      let output = '0 Byte';\n\n      // If the bytes are bigger than 0\n      if (bytes > 0) {\n        // Divide by 1024 and make an int\n        let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n        // Round to 2 decimal places and select the appropriate unit from the array\n        output = Math.round(bytes / Math.pow(1024, i), 2) + ' ' + this.byteSizes[i];\n      }\n\n      return output\n    }\n  },\n\n  created() {\n    this.d.filesGetTemporaryLink({path: this.f.path_lower}).then(data => {\n      this.link = data.link;\n    });\n  },\n});\n\nVue.component('dropbox-viewer', {\n  template: '#dropbox-viewer-template',\n\n  data() {\n    return {\n      accessToken: 'XXXX',\n      structure: {},\n      isLoading: true\n    }\n  },\n\n  computed: {\n    path() {\n      return this.$store.state.path\n    },\n    slug() {\n      return this.path.toLowerCase()\n        .replace(/^\\/|\\/$/g, '')\n        .replace(/ /g,'-')\n        .replace(/\\//g,'-')\n        .replace(/[-]+/g, '-')\n        .replace(/[^\\w-]+/g,'');\n    }\n  },\n\n  methods: {\n    dropbox() {\n      return new Dropbox({\n        accessToken: this.accessToken\n      });\n    },\n\n    createFolderStructure(response) {\n\n      const structure = {\n        folders: [],\n        files: []\n      }\n\n      for (let entry of response.entries) {\n        // Check \".tag\" prop for type\n        if(entry['.tag'] == 'folder') {\n          structure.folders.push(entry);\n        } else {\n          structure.files.push(entry);\n        }\n      }\n\n      this.structure = structure;\n      this.isLoading = false;\n\n    },\n\n    createStructureAndSave(response) {\n\n      this.createFolderStructure(response)\n\n      this.$store.commit('structure', {\n        path: this.slug,\n        data: response\n      });\n    },\n\n    getFolderStructure() {\n      let data = this.$store.state.structure[this.slug]; \n      if(data) {\n        this.createFolderStructure(data);\n      } else {\n        this.dropbox().filesListFolder({\n          path: this.path, \n          include_media_info: true\n        })\n        .then(this.createStructureAndSave)\n        .catch(error => {\n          this.isLoading = 'error';\n          console.log(error);\n        });\n      }\n\n    },\n\n    updateStructure() {\n      this.isLoading = true;\n      this.getFolderStructure();\n    }\n  },\n\n  created() {\n    this.getFolderStructure();\n  },\n\n  watch: {\n    path() {\n      this.updateStructure();\n    }\n  },\n});\n\nconst store = new Vuex.Store({\n  state: {\n    path: '',\n    structure: {}\n  },\n  mutations: {\n    updateHash(state) {\n      let hash = window.location.hash.substring(1);\n      state.path = (hash || '');\n    },\n    structure(state, payload) {\n      state.structure[payload.path] = payload.data;\n    }\n  }\n});\n\nconst app = new Vue({\n  el: '#app',\n\n  store,\n  created() {\n    store.commit('updateHash');\n  }\n});\n\nwindow.onhashchange = () => {\n  app.$store.commit('updateHash');\n}\n```"]