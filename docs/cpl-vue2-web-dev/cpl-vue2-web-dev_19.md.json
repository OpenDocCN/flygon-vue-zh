["```js\nvue init simulatedgreg/electron-vue pomodoro\n```", "```js\nmainWindow = new BrowserWindow({\n  height: 200,\n  width: 300\n})\n```", "```js\n<template>\n  <div class=\"pomodoro\">\n    <p>Time remaining: {{formattedTime}}</p>\n    <button v-if=\"remainingTime === 1500\" @click=\"start\">Start</button>\n    <button v-else @click=\"stop\">Stop</button>\n  </div>\n</template>\n```", "```js\n<script>\nexport default {\n  data () {\n    return {\n      remainingTime: 1500,\n      timer: undefined\n    }\n  },\n  methods: {\n    start () {\n      this.remainingTime -= 1\n      this.timer = setInterval(() => {\n        this.remainingTime -= 1\n        if (this.remainingTime === 0) {\n          clearInterval(this.timer)\n        }\n      }, 1000)\n    },\n    stop () {\n      clearInterval(this.timer)\n      this.remainingTime = 1500\n    }\n  }\n}\n</script>\n```", "```js\ncomputed: {\n  formattedTime () {\n    const pad = num => ('0' + num).substr(-2)\n    const minutes = Math.floor(this.remainingTime / 60)\n    const seconds = this.remainingTime - minutes * 60\n    return `${minutes}:${pad(seconds)}`\n  }\n}\n```", "```js\n<template>\n  <div id=\"#app\">\n <pomodoro></pomodoro>\n  </div>\n</template>\n\n<script>\n import Pomodoro from 'components/Pomodoro'\n  export default {\n    components: {\n Pomodoro\n    }\n  }\n</script>\n```", "```js\nthis.timer = setInterval(() => {\n  this.remainingTime -= 1\n  if (this.remainingTime === 0) {\n    clearInterval(this.timer)\n  }\n}, 1000)\n```", "```js\n{\n  \"rules\": {\n    \".read\": true,\n    \".write\": true\n  }\n}\n```", "```js\n <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n <script src=\"https://www.gstatic.com/firebasejs/3.6.9/firebase.js\"></script>\n <script src=\"https://unpkg.com/vuefire/dist/vuefire.js\"></script>\n```", "```js\n<div id=\"app\">\n  <ul>\n    <li v-for=\"item in items\">\n      {{item.name}}: {{item.smell}}\n    <button @click=\"removeItem(item['.key'])\">X</button>\n    </li>\n  </ul>\n  <form @submit.prevent=\"addItem\">\n    <input v-model=\"newItem\" />\n    smells like\n    <input v-model=\"newSmell\" />\n    <button>Add #{{items.length}}</button>\n  </form>\n</div>\n```", "```js\nconst config = {\n  databaseURL: 'https://smell-diary.firebaseio.com/'\n}\n```", "```js\nconst firebaseApp = firebase.initializeApp(config)\n const db = firebaseApp.database()\n```", "```js\nnew Vue({\n  el: '#app',\n  firebase: {\n    items: db.ref('/items')\n  }\n})\n```", "```js\ndata: {\n  newItem: '',\n  newSmell: ''\n},\nmethods: {\n  addItem () {\n    this.$firebaseRefs.items\n      .push({\n        name: this.newItem,\n        smell: this.newSmell\n      })\n    this.newItem = ''\n    this.newSmell = ''\n  },\n  removeItem (key) {\n    this.$firebaseRefs.items\n      .child(key).remove()\n  }\n}\n```", "```js\nnpm install -g feathers-cli\n```", "```js\n <script src=\"//cdnjs.cloudflare.com/ajax/libs/vue/2.1.10/vue.js\"></script>\n <script src=\"//cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.js\"></script>\n <script src=\"//unpkg.com/feathers-client@^1.0.0/dist/feathers.js\"></script>\n```", "```js\n<div id=\"app\">\n  <div v-for=\"cat in cats\" style=\"display:inline-block\">\n    <img width=\"100\" height=\"100\" :src=\"cat.url\" />\n    <p>{{cat.name}}</p>\n  </div>\n  <form @submit.prevent=\"addCat\">\n    <div>\n      <label>Cat Name</label>\n      <input v-model=\"newName\" />\n    </div>\n    <div>\n      <label>Cat Url</label>\n      <input v-model=\"newUrl\" />\n    </div>\n    <button>Add cat</button>\n    <img width=\"30\" height=\"30\" :src=\"newUrl\" />\n  </form>\n</div>\n```", "```js\n<script>\n  const socket = io('http://localhost:3030')\n  const app = feathers()\n    .configure(feathers.socketio(socket))\n  const catService = app.service('cats')\n```", "```js\n  new Vue({\n    el: '#app',\n    data: {\n      cats: [],\n      newName: '',\n      newUrl: ''\n    },\n    methods: {\n      addCat () {\n        catService.create({\n          name: this.newName,\n          url: this.newUrl\n        })\n        this.newName = ''\n        this.newUrl = ''\n      }\n    },\n```", "```js\n    mounted () {\n      catService.find()\n        .then(page => {\n          this.cats = page.data\n        })\n      catService.on('created', cat => {\n        this.cats.push(cat)\n      })\n    }\n })\n </script>\n```", "```js\nvar app = new Clarifai.App( 'your client id would be printed here',\n 'your client secret would be here' );\n```", "```js\nnpm install -g horizon\n```", "```js\nhz init vue_app\n```", "```js\n <script src=\"https://unpkg.com/vue\"></script>\n <script src=\"/horizon/horizon.js\"></script>\n <script src=\"https://sdk.clarifai.com/js/clarifai-latest.js\"></script>\n```", "```js\n<div id=\"app\">\n  <div>\n    <h3>Dear diary...</h3>\n    <ul>\n      <li v-for=\"entry in entries\">\n        {{ entry.datetime.toLocaleDateString() }}:\n        {{ entry.text }}\n      </li>\n    </ul>\n  </div>\n...\n```", "```js\n  ...\n  <h3>New Entry</h3>\n  <img\n    style=\"max-width:200px;max-height:200px\"\n    :src=\"data_uri\"\n  />\n  <input type=\"file\" @change=\"selectFile\" ref=\"file\">\n  <p v-if=\"tentativeEntries.length\">Choose an entry</p>\n  <button v-for=\"tentativeEntry in tentativeEntries\" @click=\"send(tentativeEntry)\">\n    {{tentativeEntry}}\n  </button>\n</div>\n```", "```js\nvar app = new Clarifai.App(\n '7CDIjv_VqEYfmFi_ygwKsKAaDe-LwEzc78CcW1sA',\n 'XC0S9GHxS0iONFsAdiA2xOUuBsOhAT0jZWQTx4hl'\n )\n```", "```js\nconst horizon = new Horizon()\nconst entries = horizon('entries')\n```", "```js\nnew Vue({\n  el: '#app',\n  data: {\n    tentativeEntries: [],\n    data_uri: undefined,\n    entries: []\n  },\n  ...\n```", "```js\n...\nmethods: {\n  selectFile(e) {\n  const file = e.target.files[0]\n  const reader = new FileReader()\n  if (file) {\n    reader.addEventListener('load', () => {\n      const data_uri = reader.result\n      this.data_uri = data_uri\n      const base64 = data_uri.split(',')[1]\n      app.models.predict(Clarifai.GENERAL_MODEL, base64)\n        .then(response => {\n          this.tentativeEntries =\n            response.outputs[0].data.concepts\n            .map(c => c.name)\n        })\n      })\n    reader.readAsDataURL(file)\n  }\n},\n...\n```", "```js\n    ...\n    send(concept) {\n      entries.store({\n        text: concept,\n         datetime: new Date()\n      }).subscribe(\n        result => console.log(result),\n        error => console.log(error)\n      )\n      this.tentativeEntries = []\n      this.$refs.file.value = ''\n      this.data_uri = undefined\n    }\n  }\n})\n```", "```js\ncreated() {\n  entries.order('datetime', 'descending').limit(10).watch()\n    .subscribe(allEntries => {\n      this.entries = [...allEntries].reverse()\n  })\n}\n```", "```js\nhz serve --dev\n```", "```js\nentries.order('datetime', 'descending').limit(10).watch()\n  .subscribe(allEntries => {\n    this.entries = [...allEntries].reverse()\n  })\n```"]