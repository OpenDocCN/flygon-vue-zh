["```js\nvue init webpack\n```", "```js\n<template>\n  <div>\n    Lightweight hello\n  </div>\n</template>\n```", "```js\n<template>\n  <div>\n   Massive hello\n  </div>\n</template>\n\n<script>\n/* eslint-disable no-unused-vars */\nconst a = `\n```", "```js\nyes \"XXX\" | head -n $((10**6)) >> Massive.vue\n```", "```js\necho '`</script>' >> Massive.vue\n```", "```js\nimport Massive from '@/components/Massive'\n...\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'Hello',\n      component: Hello\n    },\n {\n path: '/massive',\n name: 'Massive',\n component: Massive\n }\n  ]\n})\n```", "```js\nimport Massive from '@/components/Massive'\n```", "```js\nconst Massive = resolve =>\n require(['../components/Massive.vue'], resolve)\n```", "```js\nroutes: [ {  path:  '/',\n  name:  'Hello',\n  component:  Hello\n }, {     path:  '/massive',\n  name:  'Massive',\n component: import('@/components/Massive') } ] \n```", "```js\nvue init webpack\n```", "```js\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport store from './store'\n\n/* eslint-disable no-new */\nnew Vue({\n el: '#app',\n router,\n store,\n template: '<App/>',\n components: { App }\n})\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex)\nconst store = new Vuex.Store({\n  state: {\n    STAR: 100,\n    LAMP: 100,\n    DIAM: 100,\n    rate: {\n      STAR: {\n        LAMP: 2\n      },\n      LAMP: {\n        DIAM: 0.5\n      }\n    }\n  }\n})\nexport default store\n```", "```js\n<template>\n  <div class=\"market\">\n    <h2>{{symbol1}}/{{symbol2}} Stock Exchange</h2>\n    <div class=\"buy-sell\">\n      <input v-model.number=\"amount\">{{symbol1}}\n      <button @click=\"buy\">\n        Buy for {{rate*amount}} {{symbol2}}\n      </button>\n      <button @click=\"sell\">\n        Sell for {{rate*amount}} {{symbol2}}\n      </button>\n    </div>\n  </div>\n</template>\n```", "```js\n<script>\nexport default {\n  name: 'market',\n  data () {\n    return {\n      amount: 0\n    }\n  },\n  computed: {\n    rate () {\n      return this.$store.state.rate[this.symbol1][this.symbol2]\n    }\n  },\n  props: ['symbol1', 'symbol2'],\n  methods: {\n    buy () {\n      this.$store.state[this.symbol1] += this.amount\n      this.$store.state[this.symbol2] -= this.amount * this.rate\n    },\n    sell () {\n      this.$store.state[this.symbol1] -= this.amount\n      this.$store.state[this.symbol2] += this.amount * this.rate\n    }\n  }\n}\n</script>\n```", "```js\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport Market from '@/components/Market'\nVue.use(Router)\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      redirect: '/STAR/LAMP'\n    },\n    {\n      path: '/:symbol1/:symbol2',\n      component: Market,\n      props: true\n    }\n  ]\n})\n```", "```js\n<template>\n  <div id=\"app\">\n    <nav>\n      <ul>\n        <li>\n          <router-link to=\"/STAR/LAMP\">STAR/LAMP Market</router-link>\n        </li><li>\n          <router-link to=\"/LAMP/DIAM\">LAMP/DIAM Market</router-link>\n        </li>\n      </ul>\n    </nav>\n    <router-view></router-view>\n    <div class=\"balance\">\n      Your balance is:\n      <ul>\n        <li>{{$store.state.STAR}} stars</li>\n        <li>{{$store.state.LAMP}} lamps</li>\n        <li>{{$store.state.DIAM}} diamonds</li>\n      </ul>\n    </div>\n  </div>\n</template>\n```", "```js\n<div id=\"app\">\n  <div v-for=\"(message, index) in messages\"> \n    <p style=\"cursor:pointer\">{{message}}\n      <span @click=\"close(index)\">[x]</span>\n    </p>\n  </div>\n  <input v-model=\"newMessage\" @keyUp.enter=\"broadcast\">\n  <button @click=\"broadcast\">Broadcast</button>\n</div>\n```", "```js\nconst store = new Vuex.Store({\n  state: {\n    messages: []\n  },\n  mutations: {\n    pushMessage (state, message) {\n      state.messages.push(message)\n    },\n    removeMessage (state, index) {\n      state.messages.splice(index, 1)\n    }\n  }\n})\n```", "```js\nnew Vue({\n  store,\n  el: '#app',\n  data: {\n    newMessage: ''\n  },\n  computed: Vuex.mapState(['messages']),\n  methods: {\n    broadcast () {\n      store.commit('pushMessage', this.newMessage)\n      this.newMessage = ''\n    },\n    close (index) {\n      store.commit('removeMessage', index)\n    }\n  }\n})\n```", "```js\ncomputed: Vuex.mapState(['messages'])\n```", "```js\nmodule.exports = {\n  ...\n  dev: {\n    proxyTable: {\n      '/comic': {\n        target: 'https://xkcd.com',\n        changeOrigin: true,\n        pathRewrite: (path, req) => {\n          const num = path.split('/')[2]\n          return `/${num}/info.0.json`\n        }\n      }\n    },\n  ...\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state: {\n    currentPanel: undefined,\n    currentImg: undefined,\n    errorStack: []\n  },\n  actions: {},\n  mutations: {}\n}\n\nexport default store\n```", "```js\nactions: {\n  goToLastPanel ({ commit }) {\n    axios.get(endpoint)\n      .then(({ data }) => {\n        commit('setPanel', data.num)\n        commit('setImg', data.img)\n      }).catch(error => {\n        commit('pushError', error)\n      })\n  }\n ...\n```", "```js\n...\nimport axios from 'axios'\n...\nconst endpoint = '/comic/'\n```", "```js\nmutations: {\n  setPanel (state, num) {\n    state.currentPanel = num\n  },\n  setImg (state, img) {\n    state.currentImg = img\n  },\n  pushError (state, error) {\n    state.errorStack.push(error)\n  }\n}\n```", "```js\n<template>\n  <div class=\"hello\">\n    <h1>XKCD</h1>\n    <img :src=\"currentImg\">\n  </div>\n</template>\n```", "```js\n<script>\nimport { mapState } from 'vuex'\nexport default {\n  name: 'hello',\n  computed: mapState(['currentImg']),\n  created () {\n    this.$store.dispatch('goToLastPanel')\n  }\n}\n</script>\n```", "```js\n<template>\n  <div id=\"app\">\n    <router-view></router-view>\n  </div>\n</template>\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  modules: {\n    brain,\n    heart\n  }\n})\n\nexport default store\n```", "```js\nconst heart = {\n  state: { loves: undefined },\n  mutations: {\n    love (state, target) {\n      state.loves = target\n    },\n    unlove (state) {\n      state.loves = undefined\n    }\n  }\n}\n```", "```js\nconst brain = {\n  modules: {\n    left: leftLobe,\n    right: rightLobe\n  }\n}\n```", "```js\nconst leftLobe = {\n  namespaced: true,\n  state: { reason: true },\n  mutations: {\n    toggle (state) { state.reason = !state.reason }\n  }\n}\nconst rightLobe = {\n  namespaced: true,\n  state: { fantasy: true },\n  mutations: {\n   toggle (state) { state.fantasy = !state.fantasy }\n  }\n}\n```", "```js\n<img \n :class=\"{ off: !$store.state.brain.left.reason }\"\n src=\"http://i.imgur.com/n8B6wuY.png\"\n @click=\"left\"><img\n :class=\"{ off: !$store.state.brain.right.fantasy }\"\n src=\"http://i.imgur.com/4BbfVur.png\"\n @click=\"right\">\n```", "```js\n.off {\n  filter: grayscale(100%)\n}\n```", "```js\nmethods: {\n  left () {\n    this.$store.commit('left/toggle')\n  },\n  right () {\n    this.$store.commit('right/toggle')\n  }\n}\n```", "```js\n...\nlove () {\n  this.$store.commit('love', this.partner)\n},\nclear () {\n  this.$store.commit('unlove')\n  this.partner = undefined\n}\n...\n```", "```js\n<p> loves: {{$store.state.heart.loves}}</p>\n<input v-model=\"partner\" @input=\"love\">\n<button @click=\"clear\">Clear</button>\n```", "```js\nconst leftLobe = {\n  namespaced: true,\n  state: { reason: true },\n  mutations: {\n    toggle (state) {\n      // here state is the left lobe state\n      state.reason = !state.reason\n    }\n  }\n}\n```", "```js\n{\n  \"getters\":{},\n  \"state\":{\n    \"reason\":true\n  },\n  \"rootGetters\":{},\n  \"rootState\":{\n    \"brain\":{\n      \"left\":{\n        \"reason\":true\n      },\n      \"right\":{\n        \"fantasy\":false\n      }\n    },\n    \"heart\":{\n      \"loves\": \"Johnny Toast\"\n    }\n  }\n}\n```", "```js\nactions: {\n  beNerd ({ rootState }) {\n    rootState.heart.loves = 'Math & Physics'\n  }\n}\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state: {\n    bitcoin: 600,\n    rate: 1000,\n    euro: 600000\n  }\n})\n\nexport default store\n```", "```js\nconst store = new Vuex.Store({\n  state: {\n    bitcoin: 600,\n    rate: 1000\n  },\n  getters: {\n    euro: state => state.bitcoin * state.rate\n  }\n})\n```", "```js\n<template>\n  <div>\n    <h1>Balance</h1>\n    <ul>\n      <li>{{$store.state.bitcoin}}\u0e3f</li>\n      <li>{{$store.getters.euro}}&euro;</li>\n    </ul>\n  </div>\n</template>\n```", "```js\ngetters:  {\n ...\n  getCatPictures: state => state.pictures.filter(pic => isCat(pic)) getKittens:  (state, getters)  =>  {\n return getters.getCatPictures().filter(cat  => !isAdult(cat))\n } } \n```", "```js\nconst store = new Vuex.Store({\n  state: {\n    bitcoin: 600,\n    rate: 1000\n  },\n  getters: {\n    euro: state => state.bitcoin * state.rate,\n    houses: (state, getters) => getters.euro() / 150000\n})\n```", "```js\ngetters: {\n  ...\n  getWorldWonder: state => nth => state.worldWonders[nth]\n}\n```", "```js\nconst store = new Vuex.Store({\n  state: {\n    bitcoin: 600,\n    rate: 1000\n  },\n  getters: {\n    euro: state => state.bitcoin * state.rate,\n    houses: (state, getters) => averageHousePrice => {\n return getters.euro() / averageHousePrice\n }\n})\n```", "```js\nstate: {\n  todo: [\n    { id: 43, text: 'Buy iPhone', done: false },\n    ...\n  ],\n  archived: [\n    { id: 2, text: 'Buy gramophone', done: true },\n    ...\n  ]\n}\n```", "```js\nimport Vuex from 'vuex'\nimport Vue from 'vue'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  ...\n  mutations: {\n    ...\n    MARK_ITEM_AS_DONE (state, itemId) {\n      state.todo.filter(item => {\n        return item.id === itemId\n      }).forEach(item => {\n        item.done = true\n      })\n      state.archived.filter(item => {\n        return item.id === itemId\n      }).forEach(item => {\n        item.done = true\n      })\n    }\n  }\n}) \n\nexport default store\n```", "```js\nexport const mutations = { ... }\n\nconst store = new Vuex.Store({ ... })\n\nexport default store\n```", "```js\nimport { mutations } from '@/store'\n```", "```js\ndescribe('mutations', () => {\n  it(`MARK_ITEM_AS_DONE mutation must change the\n        done field from false to true for a todo`, () => {\n    const state = {\n      todo: [\n        { id: 43, text: 'Buy iPhone', done: false }\n      ],\n      archived: [\n        { id: 40, text: 'Buy cat', done: false }\n      ]\n    }\n    mutations.MARK_ITEM_AS_DONE(state, 43)\n    expect(state.todo[0].done).to.be.true\n  })\n})\n```", "```js\nimport axios from 'axios'\n\nexport const actions = {\n  downloadNew ({ commit }) {\n    axios.get('/myNewPosts')\n      .then(({ data }) => {\n        commit('ADD_ITEMS', data)\n      })\n  }\n}\n```", "```js\ndescribe('actions', () => {\nconst actionsInjector = \n  require('inject-loader!@/store/actions')\nconst buyHouseTodo = {\n  id: 84,\n  text: 'Buy house',\n  done: true\n}\nconst actions = actionsInjector({\n  'axios': {\n    get () {\n      return new Promise(resolve => {\n        resolve({\n          data: [buyHouseTodo]\n        })\n      })\n    }\n  }\n}).default\n}\n```", "```js\ndescribe('actions', () => {\n  const actionsInjector = \n    require('inject-loader!@/store/actions')\n    const buyHouseTodo = {\n      id: 84,\n      text: 'Buy house',\n      done: true\n    }\n    const actions = actionsInjector({\n      'axios': {\n        get () {\n          return new Promise(resolve => {\n            resolve({ data: [buyHouseTodo] })\n          })\n        }\n      }\n    }).default\n    it(`downloadNew should commit ADD_ITEMS\n    with the 'Buy house' todo when successful`, done => {\n    const commit = (type, payload) => {\n      try {\n        expect(type).to.equal('ADD_ITEMS')\n        expect(payload).to.deep.equal([buyHouseTodo])\n        done()\n      } catch (error) {\n        done(error)\n      }\n    }\n  actions.downloadNew({ commit })\n  })\n})\n```"]