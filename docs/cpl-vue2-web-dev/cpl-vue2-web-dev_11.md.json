["```js\nconst store = new Vuex.Store({\n  state: {\n    products: {},\n    categories: {},\n\n    categoryHome: {\n      title: 'Welcome to the Shop',\n      handle: 'home',\n      products: [\n        ...\n      ]\n    },\n\n    basket: []\n\n  },\n\n  mutations: {\n    ...\n  },\n\n  actions: {\n    ...\n  },\n\n  getters: {\n    ...\n  }\n});\n```", "```js\nmethods: {\n  ...\n\n addToBasket() {\n this.$store.commit('addToBasket', this);\n }\n}\n```", "```js\nmutations: {\n  products(state, payload) {\n    ...\n  },\n\n  categories(state, payload) {\n    ...\n  },\n\n addToBasket(state, item) {\n\n }\n}\n```", "```js\naddToBasket(state, item) {\n  state.basket.push({\n sku: item.variation.sku,\n title: item.product.title,\n handle: item.slug,\n image: item.image,\n variationTitle: item.variantTitle(item.variation),\n variation: item.variation,\n quantity: 1\n });\n}\n```", "```js\naddToBasket(state, item) {\n let product = state.basket.find(p => {\n if(p.sku == item.variation.sku) {\n }\n });\n\n  state.basket.push({\n    sku: item.variation.sku,\n    title: item.product.title,\n    handle: item.slug,\n    image: item.image,\n```", "```js\n    variationTitle: item.variantTitle(item.variation),\n    variation: item.variation,\n    quantity: 1\n  });\n}\n```", "```js\naddToBasket(state, item) {\n  let product = state.basket.find(p => {\n    if(p.sku == item.variation.sku) {\n      p.quantity++;\n\n return p;\n    }\n  });\n\n  if(!product) {\n    state.basket.push({\n      sku: item.variation.sku,\n      title: item.product.title,\n      handle: item.slug,\n      image: item.image,\n      variationTitle: item.variantTitle(item.variation),\n      variation: item.variation,\n      quantity: 1\n    });\n }\n}\n```", "```js\ndata() {\n  return {\n    slug: this.$route.params.slug,\n    productNotFound: false,\n    image: false,\n    variation: false,\n    addedToBasket: false\n  }\n}\n```", "```js\n<button \n  @click=\"addToBasket()\" \n  :class=\"(addedToBasket) ? 'isAdded' : ''\" \n  :disabled=\"!variation.quantity\"\n>\n  {{ \n    (variation.quantity) ? \n    ((addedToBasket) ? 'Added to your basket' : 'Add to basket') : \n    'Out of stock'\n```", "```js\n  }}\n</button>\n```", "```js\naddToBasket() {\n  this.$store.commit('addToBasket', this);\n\n this.addedToBasket = true;\n}\n```", "```js\naddToBasket() {\n  this.$store.commit('addToBasket', this);\n\n  this.addedToBasket = true;\n  setTimeout(() => this.addedToBasket = false, 2000);\n}\n```", "```js\nwatch: {\n  variation(v) {\n    if(v.hasOwnProperty('image')) {\n      this.updateImage(v.image);\n    }\n\n    this.addedToBasket = false;\n  },\n\n  '$route'(to) {\n    this.slug = to.params.slug;\n    this.addedToBasket = false;\n  }\n}\n```", "```js\n<div id=\"app\">\n  <header>\n <span>Cart {{ cartQuantity }}</span>\n </header>\n  <main>\n    <router-view></router-view>\n  </main>\n  <aside>\n    <router-view name=\"sidebar\"></router-view>\n  </aside>\n</div>\n```", "```js\nnew Vue({\n  el: '#app',\n\n  store,\n  router,\n\n computed: {\n cartQuantity() {\n\n }\n },\n\n  created() {\n    CSV.fetch({url: './data/csv-files/bicycles.csv'}).then(data => {\n      this.$store.dispatch('initializeShop', this.$formatProducts(data));\n    });\n  }\n});\n```", "```js\ngetters: {\n  ...\n\n cartQuantity: (state) => { \n return 1;\n }\n}\n```", "```js\ncartQuantity() {\n  const quantity = this.$store.getters.cartQuantity;\n return quantity ? `(${quantity})` : '';\n}\n```", "```js\ncartQuantity: (state) => {\n let quantity = 0;\n for(let item of state.basket) {\n quantity += item.quantity;\n }\n return quantity;\n}\n```", "```js\nroutes: [\n  {\n    path: '/',\n    name: 'Home',\n    ...\n  },\n  {\n path: '/category',\n redirect: {name: 'Home'}\n },\n  {\n    path: '/category/:slug',\n    name: 'Category',\n    ...\n  },\n  {\n path: '/product',\n redirect: {name: 'Home'}\n },\n  {\n    path: '/product/:slug',\n    name: 'Product',\n    component: ProductPage\n  },\n  {\npath: '/basket',\n name: 'Basket',\n component: OrderBasket\n },\n {\n path: '/checkout',\n name: 'Checkout',\n component: OrderCheckout\n },\n {\n path: '/complete',\n name: 'Confirmation',\n component: OrderConfirmation\n },\n\n  {\n    path: '/404', \n    alias: '*',\n    component: PageNotFound\n  }\n]\n```", "```js\n<header>\n  <router-link :to=\"{name: 'Basket'}\">Cart {{ cartQuantity }}</router-link>\n</header>\n```", "```js\nconsole.log(JSON.stringify(store.state.basket));\n```", "```js\nstate: {\n  products: {},\n  categories: {},\n\n  categoryHome: {\n    title: 'Welcome to the Shop',\n    handle: 'home',\n    products: [\n      ...\n    ]\n  },\n\n  basket: [{\"sku\":...}]\n},\n```", "```js\nconst OrderConfirmation = {\n  name: 'OrderConfirmation',\n\n  template: `<div>\n    <h1>Order Complete!</h1>\n    <p>Thanks for shopping with us - you can expect your products within 2 - 3 working days</p>\n  </div>`\n};\n```", "```js\nconst ListPurchases = {\n  name: 'ListPurchases',\n\n  template: `<table></table>`\n};\n```", "```js\nconst OrderConfirmation = {\n  name: 'OrderConfirmation',\n\n  template: `<div>\n    <h1>Order Complete!</h1>\n    <p>Thanks for shopping with us - you can expect your products within 2 - 3 working days</p>\n    <list-purchases />\n  </div>`,\n\n components: {\n ListPurchases\n }\n};\n```", "```js\nconst ListPurchases = {\n  name: 'ListPurchases',\n\n  template: `<table></table>`,\n\n  computed: {\n products() {\n return this.$store.state.basket;\n }\n }\n};\n```", "```js\n  template: `<table>\n    <thead>\n      <tr>\n        <th></th>\n        <th>Title</th>\n        <th>Unit price</th>\n        <th>Quantity</th>\n        <th>Price</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr v-for=\"product in products\">\n        <td>\n          <img \n            :src=\"product.image.source\" \n            :alt=\"product.image.alt || product.variationTitle\"\n            width=\"80\"\n          >\n        </td>\n        <td>\n          <router-link :to=\"{name: 'Product', params: {slug: product.handle}}\">\n            {{ product.title }}\n          </router-link><br>\n          {{ product.variationTitle }}\n        </td>\n        <td>{{ product.variation.price }}</td>\n        <td>{{ product.quantity }}</td>\n        <td>{{ product.variation.price * product.quantity }}</td>\n      </tr>\n    </tbody>\n  </table>`,\n```", "```js\n{{ product.title | lowercase }}\n```", "```js\nfilters: {\n  currency(val) {\n    return val;\n  }\n},\n```", "```js\n<td>{{ product.variation.price | currency }}</td>\n<td>{{ product.quantity }}</td>\n<td>{{ product.variation.price * product.quantity | currency }}</td>\n```", "```js\nfilters: {\n  currency(val) {\n    return ' + val.toFixed(2);\n  }\n},\n```", "```js\ntotalPrice() {\n  let total = 0;\n\n  for(let p of this.products) {\n    total += (p.variation.price * p.quantity);\n  }\n\n  return total;\n}\n```", "```js\ntemplate: `<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Title</th>\n      <th>Unit price</th>\n      <th>Quantity</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"product in products\">\n      <td>\n        <img \n          :src=\"product.image.source\" \n          :alt=\"product.image.alt || product.variationTitle\"\n          width=\"80\"\n        >\n      </td>\n      <td>\n        <router-link :to=\"{name: 'Product', params: {slug: product.handle}}\">\n          {{ product.title }}\n        </router-link><br>\n        {{ product.variationTitle }}\n      </td>\n      <td>{{ product.variation.price | currency }}</td>\n      <td>{{ product.quantity }}</td>\n      <td>{{ product.variation.price * product.quantity | currency }}</td>\n    </tr>\n  </tbody>\n  <tfoot>\n <td colspan=\"4\">\n <strong>Total:</strong>\n </td>\n <td>{{ totalPrice | currency }}</td>\n </tfoot>\n</table>`,\n```", "```js\nconst OrderCheckout = {\n  name: 'OrderCheckout',\n\n  template: '<div>;\n    <h1>Order Confirmation</h1>\n    <p>Please check the items below and fill in your details to complete your order</p>\n    <list-purchases />\n  </div>',\n\n  components: {\n    ListPurchases\n  }\n};\n```", "```js\ntemplate: '<div>\n  <h1>Order Confirmation</h1>\n  <p>Please check the items below and fill in your details to complete your order</p>\n  <list-purchases />\n\n  <form>\n <fieldset>\n <h2>Billing Details</h2>\n <label for=\"billingName\">Name:</label>\n <input type=\"text\" id=\"billingName\">\n <label for=\"billingAddress\">Address:</label>\n <input type=\"text\" id=\"billingAddress\">\n <label for=\"billingZipcode\">Post code/Zip code:</label>\n <input type=\"text\" id=\"billingZipcode\">\n </fieldset>\n <fieldset>\n <h2>Delivery Details</h2>\n <label for=\"deliveryName\">Name:</label>\n <input type=\"text\" id=\"deliveryName\">\n <label for=\"deliveryAddress\">Address:</label>\n <input type=\"text\" id=\"deliveryAddress\">\n <label for=\"deliveryZipcode\">Post code/Zip code:</label>\n <input type=\"text\" id=\"deliveryZipcode\">\n </fieldset>\n </form>\n</div>',\n```", "```js\ndata() {\n  return {\n    billing: {\n      name: '',\n      address: '',\n      zipcode: ''\n    },\n    delivery: {\n      name: '',\n      address: '',\n      zipcode: ''\n    }\n  }\n}\n```", "```js\n<form>\n  <fieldset>\n    <h2>Billing Details</h2>\n    <label for=\"billingName\">Name:</label>\n    <input type=\"text\" id=\"billingName\" v-model=\"billing.name\">\n    <label for=\"billingAddress\">Address:</label>\n    <input type=\"text\" id=\"billingAddress\" v-model=\"billing.address\">\n    <label for=\"billingZipcode\">Post code/Zip code:</label>\n    <input type=\"text\" id=\"billingZipcode\" v-model=\"billing.zipcode\">\n  </fieldset>\n  <fieldset>\n    <h2>Delivery Details</h2>\n    <label for=\"deliveryName\">Name:</label>\n    <input type=\"text\" id=\"deliveryName\" v-model=\"delivery.name\">\n    <label for=\"deliveryAddress\">Address:</label>\n    <input type=\"text\" id=\"deliveryAddress\" v-model=\"delivery.address\">\n    <label for=\"deliveryZipcode\">Post code/Zip code:</label>\n    <input type=\"text\" id=\"deliveryZipcode\" v-model=\"delivery.zipcode\">\n  </fieldset>\n</form>\n```", "```js\nmethods: {\n  submitForm() {\n    // this.billing = billing details\n    // this.delivery = delivery details\n\n    this.$router.push({name: 'Confirmation'});\n  }\n}\n```", "```js\n<form @submit=\"submitForm()\">\n  <fieldset>\n    ...\n  </fieldset>\n\n  <fieldset>\n    ...\n  </fieldset>\n\n  <input type=\"submit\" value=\"Purchase items\">\n</form>\n```", "```js\n<form @submit=\"submitForm()\">\n  <fieldset>\n     ...\n  </fieldset>\n <label for=\"sameAddress\">\n <input type=\"checkbox\" id=\"sameAddress\" v-model =\"sameAddress\">\n Delivery address is the same as billing\n </label>\n  <fieldset>\n    ...\n  </fieldset>\n\n  <input type=\"submit\" value=\"Purchase items\">\n</form>\n```", "```js\ndata() {\n  return {\n    sameAddress: false,\n\n    billing: {\n      name: '',\n      address: '',\n      zipcode: ''\n    },\n    delivery: {\n      name: '',\n      address: '',\n      zipcode: ''\n    }\n  }\n},\n```", "```js\n<fieldset>\n  <h2>Delivery Details</h2>\n  <label for=\"deliveryName\">Name:</label>\n  <input type=\"text\" id=\"deliveryName\" v-model=\"delivery.name\" :disabled=\"sameAddress\">\n  <label for=\"deliveryAddress\">Address:</label>\n  <input type=\"text\" id=\"deliveryAddress\" v-model=\"delivery.address\" :disabled=\"sameAddress\">\n  <label for=\"deliveryZipcode\">Post code/Zip code:</label>\n  <input type=\"text\" id=\"deliveryZipcode\" v-model=\"delivery.zipcode\" :disabled=\"sameAddress\">\n</fieldset>\n```", "```js\nwatch: {\n  sameAddress() {\n    if(this.sameAddress) {\n      this.delivery = this.billing;\n    }\n  }\n}\n```", "```js\nwatch: {\n  sameAddress() {\n    if(this.sameAddress) {\n      this.delivery = this.billing;\n    } else {\n this.delivery = Object.assign({}, this.billing);\n }\n  }\n}\n```", "```js\nconst OrderBasket = {\n  name: 'OrderBasket',\n\n  template: `<div>\n    <h1>Basket</h1>\n    <list-purchases />\n  </div>`,\n\n  components: {\n    ListPurchases\n  }\n};\n```", "```js\ntemplate: `<div>\n  <h1>Basket</h1>\n  <list-purchases :editable=\"true\" />\n</div>`,\n```", "```js\nprops: {\n  editable: {\n    type: Boolean,\n    default: false\n  }\n},\n```", "```js\n<tbody>\n  <tr v-for=\"product in products\">\n    <td>\n      <img \n        :src=\"product.image.source\" \n        :alt=\"product.image.alt || product.variationTitle\"\n        width=\"80\"\n      >\n    </td>\n    <td>\n      <router-link :to=\"{name: 'Product', params: {slug: product.handle}}\">\n        {{ product.title }}\n      </router-link><br>\n      {{ product.variationTitle }}\n    </td>\n    <td>{{ product.variation.price | currency }}</td>\n    <td v-if=\"!editable\">{{ product.quantity }}</td>\n    <td v-if=\"editable\">\n      <input \n type=\"text\"\n :value=\"product.quantity\" \n @blur=\"updateQuantity($event, product.sku)\"\n >\n    </td>\n    <td>{{ product.variation.price * product.quantity | currency }}</td>\n  </tr>\n</tbody>\n```", "```js\nmethods: {\n  updateQuantity(e, sku) {\n    let products = this.products.map(p => {\n      if(p.sku == sku) {\n        p.quantity = parseInt(e.target.value);\n      }\n      return p;\n    });\n\n    this.$store.commit('updatePurchases', products);\n  }\n}\n```", "```js\nupdatePurchases(state, payload) {\n  state.basket = payload;\n}\n```", "```js\n<tbody>\n  <tr v-for=\"product in products\">\n    <td>\n      <img \n        :src=\"product.image.source\" \n        :alt=\"product.image.alt || product.variationTitle\"\n        width=\"80\"\n      >\n    </td>\n    <td>\n      <router-link :to=\"{name: 'Product', params: {slug: product.handle}}\">\n        {{ product.title }}\n      </router-link><br>\n      {{ product.variationTitle }}\n    </td>\n    <td>{{ product.variation.price | currency }}</td>\n    <td v-if=\"!editable\">{{ product.quantity }}</td>\n    <td v-if=\"editable\"><input \n      type=\"text\"\n      :value=\"product.quantity\" \n      @blur=\"updateQuantity($event, product.sku)\"\n    ></td>\n    <td>{{ product.variation.price * product.quantity | currency }}</td>\n    <td v-if=\"editable\">\n <button @click=\"removeItem(product.sku)\">Remove item</button>\n </td>\n  </tr>\n</tbody>\n```", "```js\nremoveItem(sku) {\n  let products = this.products.filter(p => {\n    if(p.sku != sku) {\n      return p;\n    }\n  });\n\n  this.$store.commit('updatePurchases', products);\n}\n```", "```js\nupdateQuantity(e, sku) {\n  if(!parseInt(e.target.value)) {\n this.removeItem(sku);\n } else {\n    let products = this.products.map(p => {\n      if(p.sku == sku) {\n        p.quantity = parseInt(e.target.value);\n      }\n      return p;\n    });\n\n    this.$store.commit('updatePurchases', products);\n  }\n},\n```", "```js\ntemplate: `<div>\n  <h1>Basket</h1>\n  <list-purchases :editable=\"true\" />\n  <router-link :to=\"{name: 'Checkout'}\">Proceed to Checkout</router-link>\n</div>`,\n```"]