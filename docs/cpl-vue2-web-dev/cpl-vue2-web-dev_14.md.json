["```js\n    npm install axios\n```", "```js\n<div id=\"app\"> \n  <h2>Advice of the day</h2> \n  <p>{{advice}}</p> \n</div>\n```", "```js\nnew Vue({ \n  el: '#app', \n  data: { \n    advice: 'loading...' \n  }, \n  created () { \n    axios.get('http://api.adviceslip.com/advice') \n      .then(response => { \n        this.advice = response.data.slip.advice \n      }) \n      .catch(error => { \n        this.advice = 'There was an error: ' + error.message \n      }) \n  } \n})\n```", "```js\naxios.get('http://api.adviceslip.com/advice')\n```", "```js\n.then(response => { \n  this.advice = response.data.slip.advice \n})\n```", "```js\n{ \n  \"data\": { \n    \"slip\": { \n      \"advice\": \"Repeat people's name when you meet them.\", \n      \"slip_id\": \"132\" \n    } \n  }, \n  \"status\": 200, \n  \"statusText\": \"OK\", \n  \"headers\": { \n    \"content-type\": \"text/html; charset=UTF-8\", \n    \"cache-control\": \"max-age=0, no-cache\" \n  }, \n  \"config\": { \n    \"transformRequest\": {}, \n    \"transformResponse\": {}, \n    \"timeout\": 0, \n    \"xsrfCookieName\": \"XSRF-TOKEN\", \n    \"xsrfHeaderName\": \"X-XSRF-TOKEN\", \n    \"maxContentLength\": -1, \n    \"headers\": { \n      \"Accept\": \"application/json, text/plain, */*\" \n    }, \n    \"method\": \"get\", \n    \"url\": \"http://api.adviceslip.com/advice\" \n  }, \n  \"request\": {} \n}\n```", "```js\n.catch(error => { \n  this.advice = 'There was an error: ' + error.message \n})\n```", "```js\nThere was an error: Network Error\n```", "```js\naxios.get('http://api.adviceslip.com/non-existent-page')\n```", "```js\nThere was an error: Request failed with status code 404\n```", "```js\n.then(response => { \n  this.advice = undefined.hello \n})\n```", "```js\nThere was an error: Cannot read property 'hello' of undefined\n```", "```js\n<div id=\"app\"> \n  <form @submit.prevent=\"vueSubmit\"> \n    <div> \n      <label>Name</label> \n      <input type=\"text\" required> \n    </div> \n    <div> \n      <label>Email</label> \n      <input type=\"email\" required> \n    </div> \n    <div> \n      <label>Submit</label> \n      <button type=\"submit\">Submit</button> \n    </div> \n  </form> \n</div>\n```", "```js\nnew Vue({ \n  el: '#app', \n  methods: { \n    vueSubmit() { \n      console.info('fake AJAX request') \n    } \n  } \n})\n```", "```js\n<input type=\"text\" required>\n```", "```js\n<button type=\"submit\" @click.prevent=\"vueSubmit\">Submit</button>\n```", "```js\n<button type=\"submit\" @click=\"vueSubmit\">Submit</button>\n```", "```js\n<form @submit.prevent=\"vueSubmit\">\n```", "```js\n<div id=\"app\"> \n  <h3>Write a new post</h3> \n  <form> \n    <div> \n      <label>Title of your post:</label> \n      <input type=\"text\" v-model=\"title\"> \n    </div> \n    <div> \n      <label>Write your thoughts for the day</label> \n      <textarea v-model=\"body\"></textarea> \n    </div> \n    <div> \n      <button @click.prevent=\"submit\">Submit</button> \n    </div> \n  </form> \n</div>\n```", "```js\nnew Vue({ \n  el: '#app', \n  data: { \n    userId: 1, \n    title: '', \n    body: '' \n  } \n})\n```", "```js\nmethods: { \n  submit () { \n    const xhr = new XMLHttpRequest() \n    xhr.open('post', 'https://jsonplaceholder.typicode.com/posts') \n    xhr.setRequestHeader('Content-Type',  \n                         'application/json;charset=UTF-8') \n    xhr.onreadystatechange = () => { \n    const DONE = 4 \n    const CREATED = 201 \n    if (xhr.readyState === DONE) { \n      if (xhr.status === CREATED) { \n          this.response = xhr.response \n        } else { \n          this.response = 'Error: ' + xhr.status \n        } \n      } \n    } \n    xhr.send(JSON.stringify({ \n      title: this.title, \n      body: this.body, \n      userId: this.userId \n    })) \n  } \n}\n```", "```js\ndata: { \n  userId: 1, \n  title: '', \n  body: '', \n response: '...' \n}\n```", "```js\n<h3>Response from the server</h3> \n<pre>{{response}}</pre>\n```", "```js\nconst xhr = new XMLHttpRequest()\n```", "```js\nxhr.open('post', 'http://jsonplaceholder.typicode.com/posts') \nxhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8')\n```", "```js\nxhr.onreadystatechange = () => { \n  const DONE = 4 \n  const CREATED = 201 \n  if (xhr.readyState === DONE) { \n    if (xhr.status === CREATED) { \n      this.response = xhr.response \n    } else { \n      this.response = 'Error: ' + xhr.status \n    } \n  } \n}\n```", "```js\nxhr.send(JSON.stringify({ \n  title: this.title, \n  body: this.body, \n  userId: this.userId \n}))\n```", "```js\nsubmit () { \n  axios.post('http://jsonplaceholder.typicode.com/posts', { \n    title: this.title, \n    body: this.body, \n    userId: this.userId \n  }).then(response => { \n    this.response = JSON.stringify(response,null,'  ') \n  }).catch(error => { \n    this.response = 'Error: ' + error.response.status \n  }) \n}\n```", "```js\n<div id=\"app\"> \n  <h3>Everest pizza delivery</h3> \n  <button @click=\"order\"  \n          :disabled=\"inProgress\">Order pizza!</button> \n  <span class=\"spinner\" v-show=\"inProgress\"></span> \n  <h4>Pizza wanted</h4> \n  <p>{{requests}}</p> \n  <h4>Pizzas ordered</h4> \n  <span v-for=\"pizza in responses\"> \n    {{pizza.id}}:{{pizza.req}} \n  </span> \n</div>\n```", "```js\n@keyframes spin { \n  100% {transform:rotate(360deg);} \n} \n.spinner { \n  width: 1em; \n  height: 1em; \n  padding-bottom: 12px; \n  display: inline-block; \n  animation: spin 2s linear infinite; \n}\n```", "```js\nnew Vue({ \n  el: '#app', \n  data: { \n    inProgress: false, \n    requests: new Object(null), \n    responses: new Object(null), \n    counter: 0, \n    impatientAxios: undefined \n  } \n})\n```", "```js\ncreated () { \n  this.impatientAxios = axios.create({ \n    timeout: 3000  \n  }) \n}\n```", "```js\nmethods: { \n  order (event, oldRequest) { \n    let request = undefined \n    if (oldRequest) { \n      request = oldRequest \n    } else { \n      request = { req: '', id: this.counter++} \n   } \n   this.inProgress = true \n   this.requests[request.id] = request \n   this.impatientAxios.get('http://httpstat.us/200') \n    .then(response => { \n      this.inProgress = false \n      this.responses[request.id] = this.requests[request.id] \n      delete this.requests[request.id] \n    }) \n    .catch(e => { \n      this.inProgress = false \n      console.error(e.message) \n      console.error(this.requests.s) \n      setTimeout(this.order(event, request), 1000) \n    }) \n}\n```", "```js\n    npm install -g feathers-cli\n```", "```js\n    mkdir my-server\n    cd my-server\n    feathers generate app\n```", "```js\n feathers generate service\n```", "```js\n    npm start\n```", "```js\n<div id=\"app\"> \n  <h3>Sticky messages</h3> \n  <ol> \n    <li v-for=\"message in messages\"> \n      <button @click=\"deleteItem(message._id)\">Delete</button> \n      <button @click=\"edit(message._id, message.text)\"> \n        edit \n      </button> \n      <input v-model=\"message.text\"> \n    </li> \n  </ol> \n  <input v-model=\"toAdd\"> \n  <button @click=\"add\">add</button> \n</div>\n```", "```js\nnew Vue({ \n  el: '#app', \n  data: { \n    messages: [], \n    toAdd: '' \n  }, \n})\n```", "```js\ncreated () { \n  axios.get('http://localhost:3030/messages/') \n    .then(response => { \n      this.messages = response.data.data \n    }) \n},\n```", "```js\nmethods: { \n  add () { \n    axios.post('http://localhost:3030/messages/', { \n      text: this.toAdd \n    }) \n      .then(response => { \n        if (response.status === 201) { \n          this.messages.push(response.data) \n          this.toAdd = '' \n        } \n      }) \n  } \n}\n```", "```js\ndeleteItem (id) { \n  console.log('delete') \n  axios.delete('http://localhost:3030/messages/' + id) \n    .then(response => { \n      if (response.status < 400) { \n        this.messages.splice( \n          this.messages.findIndex(e => e.id === id), 1) \n      } \n    }) \n}, \nedit (id, text) { \n  axios.put('http://localhost:3030/messages/' + id, { \n    text \n  }) \n    .then(response => { \n      if (response.status < 400) { \n        console.info(response.status) \n      } \n    }) \n}\n```", "```js\n<div id=\"app\"> \n  <p v-for=\"word in words\">{{word}}</p> \n</div>\n```", "```js\nnew Vue({ \n  el: '#app', \n  methods: { \n    bottomVisible () { \n      const visibleHeight = document.documentElement.clientHeight \n      const pageHeight = document.documentElement.scrollHeight \n      const scrolled = window.scrollY \n      const reachedBottom = visibleHeight + scrolled >= pageHeight \n      return reachedBottom || pageHeight < visibleHeight \n    } \n  } \n})\n```", "```js\ncreated () { \n  window.addEventListener('scroll', () => { \n    this.bottom = this.bottomVisible() \n  }) \n}\n```", "```js\ndata: { \n  bottom: false, \n  words: [] \n}\n```", "```js\naddWord () { \n  axios.get('http://www.setgetgo.com/randomword/get.php') \n    .then(response => { \n      this.words.push(response.data) \n      if (this.bottomVisible()) { \n        this.addWord() \n      } \n    }) \n}\n```", "```js\nwatch: { \n  bottom (bottom) { \n    if (bottom) { \n      this.addWord() \n    } \n  } \n}\n```", "```js\ncreated () { \n  window.addEventListener('scroll', () => { \n    this.bottom = this.bottomVisible() \n  }) \n this.addWord() \n}\n```", "```js\nwatch: { \n 'name of sate variable' (newValue, oldValue) { \n   ... \n  } \n}\n```", "```js\n<div id=\"app\"> \n  <h3>Who's better: Socrates or Plato?</h3> \n  <p>Technically, without Plato we wouldn't have<br> \n  much to go on when it comes to information about<br> \n  Socrates. Plato ftw!</p>\n```", "```js\n  <form> \n    <label>Write your comment:</label> \n    <textarea v-model=\"message\"></textarea> \n    <button @click.prevent=\"submit\">Send!</button> \n  </form> \n  <p>Server got: {{response}}</p> \n</div>\n```", "```js\nmethods: { \n  submit () { \n    axios.post('http://jsonplaceholder.typicode.com/comments', \n    { \n      body: this.message \n    }).then(response => { \n      this.response = response.data \n    }) \n  } \n}\n```", "```js\ndata: { \n  message: '', \n  response: '...' \n}\n```", "```js\nnew Vue({ \n  el: '#app', \n...\n```", "```js\nmounted () { \n  axios.interceptors.request.use(config => { \n    const body = config.data.body.replace(/punk/i, '***') \n    config.data.body = body \n    return config \n  }) \n}\n```", "```js\naxios.interceptors.request.use(config => { \n  const body = config.data.body.replace(/punk/i, '***') \n  config.data.body = body \n  return config \n})\n```", "```js\nmethods: { \n  sendAllMoney () { \n    axios.get('/sendTo/'+this.accountNo) \n  } \n}\n```", "```js\nHello user!\nClick here to read the latest news.\n```"]