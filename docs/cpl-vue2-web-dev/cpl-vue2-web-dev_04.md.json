["```js\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Dropbox App</title>\n      </head>\n      <body>  \n <div id=\"app\">\n </div>  \n      </body>\n      </html>\n```", "```js\n      <script src=\"js/vue.js\"></script>\n      <script src=\"js/dropbox.js\"></script>\n      <script src=\"js/app.js\"></script>\n```", "```js\n      new Vue({\n          el: '#app'\n      });\n```", "```js\n      /**\n       * API Access Token\n       */\n      let accessToken = 'XXXX';\n```", "```js\n      /**\n      * Dropbox Client\n      * @type {Dropbox}\n      */\n      const dbx = new Dropbox({\n        accessToken: accessToken\n      });\n```", "```js\n      dbx.filesListFolder({path: ''})\n          .then(response => {\n            console.log(response.entries);\n          })\n          .catch(error => {\n            console.log(error);\n          });\n```", "```js\n      <div id=\"app\">\n        <dropbox-viewer></dropbox-viewer>\n      </div> \n      <script type=\"text/x-template\" id=\"dropbox-viewer-          \n       template\">\n        <h1>Dropbox</h1>\n      </script>\n```", "```js\n      Vue.component('dropbox-viewer', {\n        template: '#dropbox-viewer-template'\n      });\n```", "```js\n      Vue.component('dropbox-viewer', {\n        template: '#dropbox-viewer-template',  \n        methods: {\n dropbox() {\n return new Dropbox({\n accessToken: this.accessToken\n });\n }\n }\n      });\n```", "```js\n      Vue.component('dropbox-viewer', {\n        template: '#dropbox-viewer-template',  \n        data() {\n return {\n accessToken: 'XXXX'\n }\n },\n        methods: {\n          dropbox() {\n            return new Dropbox({\n              accessToken: this.accessToken\n            });\n          }\n        }\n      });\n```", "```js\n      getFolderStructure(path) {\n        this.dropbox().filesListFolder({path: path})\n        .then(response => {\n          console.log(response.entries);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n      }\n```", "```js\n      Vue.component('dropbox-viewer', {\n        template: '#dropbox-viewer-template',  \n        data() {\n          return {\n            accessToken: 'XXXX'\n          }\n        }, \n        methods: {\n         ...\n        }, \n        created() {\n this.getFolderStructure('');\n }\n      });\n```", "```js\n      Vue.component('dropbox-viewer', {\n        template: '#dropbox-viewer-template', \n        data() {\n          return {\n            accessToken: 'XXXX',\n            structure: []\n          }\n        },\n        methods: {\n          dropbox() {\n            return new Dropbox({\n              accessToken: this.accessToken\n            });\n          },\n          getFolderStructure(path) {\n            this.dropbox().filesListFolder({path: path})\n            .then(response => {\n              console.log(response.entries);\n              this.structure = response.entries;\n            })\n            .catch(error => {\n              console.log(error);\n            });\n          }\n        },  \n        created() {\n          this.getFolderStructure('');\n        }\n      });\n```", "```js\n      <script type=\"text/x-template\" id=\"dropbox-viewer-         \n        template\">\n        <div>\n          <h1>Dropbox</h1>\n          <ul>\n <li v-for=\"entry in structure\">\n </li>\n </ul>\n </div>\n      </script>\n```", "```js\n      <li v-for=\"entry in structure\">\n        <strong>{{ entry.name }}</strong>\n        <span v-if=\"entry.size\"> - {{ entry.size }}</span>\n      </li>\n```", "```js\n      getFolderStructure(path) {\n        this.dropbox().filesListFolder({\n          path: path, \n          include_media_info: true\n        })\n        .then(response => {\n          console.log(response.entries);\n          this.structure = response.entries;\n        })\n        .catch(error => {\n          console.log(error);\n        });\n      }\n```", "```js\n      <li>\n        <strong>{{ f.name }}</strong>\n        <span v-if=\"f.size\"> - {{ bytesToSize(f.size) }}          \n        </span> - \n        <span v-if=\"f.media_info\">\n [\n {{ f.media_info.metadata.dimensions.width }}px x \n {{ f.media_info.metadata.dimensions.height }}px\n ]\n </span>\n      </li>\n```", "```js\n      created() {\n        this.getFolderStructure('/images');\n      }\n```", "```js\n      data() {\n        return {\n          accessToken: 'XXXX',\n          structure: [],\n          byteSizes: ['Bytes', 'KB', 'MB', 'GB', 'TB']\n        }\n      }\n```", "```js\n      bytesToSize(bytes) {\n        // Set a default\n        let output = '0 Byte'; \n        // If the bytes are bigger than 0\n        if (bytes > 0) {\n          // Divide by 1024 and make an int\n          let i = parseInt(Math.floor(Math.log(bytes) /              \n           Math.log(1024)));\n          // Round to 2 decimal places and select the                 \n             appropriate unit from the array\n            output = Math.round(bytes / Math.pow(1024, i), \n              2) + ' ' + this.byteSizes[i];\n            }\n            return output\n          }\n```", "```js\n      <li v-for=\"entry in structure\">\n        <strong>{{ entry.name }}</strong>\n        <span v-if=\"entry.size\"> - {{ \n        bytesToSize(entry.size) }}</span>\n      </li>\n```", "```js\n      data() {\n        return {\n          accessToken: 'XXXX',\n          structure: [],\n          byteSizes: ['Bytes', 'KB', 'MB', 'GB', 'TB'],\n          isLoading: true\n        }\n      }\n```", "```js\n      getFolderStructure(path) {\n        this.dropbox().filesListFolder({\n          path: path, \n          include_media_info: true\n        })\n        .then(response => {\n          console.log(response.entries);\n          this.structure = response.entries;\n          this.isLoading = false;\n        })\n        .catch(error => {\n          console.log(error);\n        });\n      }\n```", "```js\n      <h1>Dropbox</h1>\n <div>Loading...</div>\n      <ul>\n      ...\n```", "```js\n      <div>\n        <h1>Dropbox</h1>\n        <div v-if=\"isLoading\">Loading...</div>\n         <ul v-if=\"!isLoading\">\n          <li v-for=\"entry in structure\">\n            <strong>{{ entry.name }}</strong>\n            <span v-if=\"entry.size\">- {{ \n             bytesToSize(entry.size) }}</span>\n          </li>\n        </ul>\n      </div>\n```", "```js\n      Vue.component('dropbox-viewer', {\n        template: '#dropbox-viewer-template',\n        data() {\n          return {\n            accessToken: 'XXXX',\n            structure: [],\n            byteSizes: ['Bytes', 'KB', 'MB', 'GB', 'TB'],\n            isLoading: true\n          }\n        },\n        methods: {\n          dropbox() {\n            return new Dropbox({\n              accessToken: this.accessToken\n            });\n          },\n          getFolderStructure(path) {\n            this.dropbox().filesListFolder({\n              path: path, \n              include_media_info: true\n            })\n            .then(response => {\n              console.log(response.entries);\n              this.structure = response.entries;\n              this.isLoading = false;\n            })\n            .catch(error => {\n              console.log(error);\n            });\n          },\n\n          bytesToSize(bytes) {\n            // Set a default\n            let output = '0 Byte';\n\n            // If the bytes are bigger than 0\n            if (bytes > 0) {\n              // Divide by 1024 and make an int\n              let i = parseInt(Math.floor(Math.log(bytes)               \n              / Math.log(1024)));\n              // Round to 2 decimal places and select the                 \n                appropriate unit from the array\n                output = Math.round(bytes / Math.pow(1024, \n                i), 2) + ' ' + this.byteSizes[i];\n            }\n           return output\n          }\n        },\n        created() {\n          this.getFolderStructure('');\n        }\n      });\n```", "```js\n      <script type=\"text/x-template\" id=\"dropbox-viewer-      \n       template\">\n        <div>\n          <h1>Dropbox</h1>\n          <transition name=\"fade\">\n            <div v-if=\"isLoading\">Loading...</div>\n          </transition>\n          <transition name=\"fade\">\n            <ul v-if=\"!isLoading\">\n              <li v-for=\"entry in structure\">\n                <strong>{{ entry.name }}</strong>\n                <span v-if=\"entry.size\">- {{         \n                bytesToSize(entry.size) }}</span>\n              </li>\n            </ul>\n          </transition>\n        </div>\n</script>\n```", "```js\n      .fade-enter-active,\n      .fade-leave-active {\n        transition: opacity .5s\n      }\n      .fade-enter, \n      .fade-leave-to {\n        opacity: 0\n      }\n```"]