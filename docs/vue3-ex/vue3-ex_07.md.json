["```js\nnpm i cors jsonwebtoken sqlite3 express-graphql graphql\n```", "```js\nconst jwt = require('jsonwebtoken');\nmodule.exports = {\n\u00a0\u00a0login: ({ user: { username, password } }) => {\n\u00a0\u00a0\u00a0\u00a0if (username === 'admin' && password === 'password') {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { token: jwt.sign({ username }, 'secret') }\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0throw new Error('authentication failed');\n\u00a0\u00a0}\n}\n```", "```js\nconst sqlite3 = require('sqlite3').verbose();\nmodule.exports = {\n\u00a0\u00a0getOrders: () => {\n\u00a0\u00a0\u00a0\u00a0const db = new sqlite3.Database('./db.sqlite');\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.serialize(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.all(`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SELECT *,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0orders.name AS purchaser_name,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shop_items.name AS shop_item_name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FROM orders\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INNER JOIN order_shop_items ON orders.order_id = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_shop_items.order_id\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INNER JOIN shop_items ON \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_shop_items.shop_item_id = shop_items.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shop_item_id\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0`, [], (err, rows = []) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.close();\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0},\n\u00a0\u00a0...\n}\n```", "```js\nconst sqlite3 = require('sqlite3').verbose();\nmodule.exports = {\n\u00a0\u00a0getOrders: () => {\n\u00a0\u00a0\u00a0\u00a0const db = new sqlite3.Database('./db.sqlite');\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.serialize(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.all(`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0`, [], (err, rows = []) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (err) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reject(err)\n...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const orderArr = Object.values(orders)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (const order of orderArr) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order.ordered_items = rows\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.filter(({ order_id }) => order_id === \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order.order_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.map(({ shop_item_id, shop_item_name: name, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price, description }) => ({\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shop_item_id, name, price, description\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve(orderArr)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.close();\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0},\n\u00a0\u00a0...\n}\n```", "```js\nconst sqlite3 = require('sqlite3').verbose();\nmodule.exports = {\n\u00a0\u00a0...\n\u00a0\u00a0addOrder: ({ order: { name, address, phone, ordered_items:\n\u00a0\u00a0\u00a0\u00a0orderedItems } }) => {\n\u00a0\u00a0\u00a0\u00a0const db = new sqlite3.Database('./db.sqlite');\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.serialize(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const orderStmt = db.prepare(`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INSERT INTO orders (\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0address,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0phone\n...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shop_item_id: shopItemId\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} = orderItem\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0orderShopItemStmt.run(orderId, shopItemId)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0orderShopItemStmt.finalize()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve({ status: 'success' })\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.close();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0},\n\u00a0\u00a0...\n}\n```", "```js\nconst sqlite3 = require('sqlite3').verbose();\nmodule.exports = {\n\u00a0\u00a0...\n\u00a0\u00a0removeOrder: ({ orderId }) => {\n\u00a0\u00a0\u00a0\u00a0const db = new sqlite3.Database('./db.sqlite');\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.serialize(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const delOrderShopItemsStmt = db.prepare(\"DELETE FROM \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_shop_items WHERE order_id = (?)\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delOrderShopItemsStmt.run(orderId)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delOrderShopItemsStmt.finalize();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const delOrderStmt = db.prepare(\"DELETE FROM orders \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WHERE order_id = (?)\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delOrderStmt.run(orderId)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delOrderStmt.finalize();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve({ status: 'success' })\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.close();\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0},\n}\n```", "```js\nconst sqlite3 = require('sqlite3').verbose();\nmodule.exports = {\n\u00a0\u00a0getShopItems: () => {\n\u00a0\u00a0\u00a0\u00a0const db = new sqlite3.Database('./db.sqlite');\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.serialize(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.all(\"SELECT * FROM shop_items\", [], (err, rows = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[]) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (err) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reject(err)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve(rows)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.close();\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0},\n\u00a0\u00a0...\n}\n```", "```js\nconst sqlite3 = require('sqlite3').verbose();\nmodule.exports = {\n\u00a0\u00a0...\n\u00a0\u00a0addShopItem: ({ shopItem: { name, description, image_url: \n\u00a0\u00a0\u00a0\u00a0imageUrl, price } }) => {\n\u00a0\u00a0\u00a0\u00a0const db = new sqlite3.Database('./db.sqlite');\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.serialize(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const stmt = db.prepare(`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INSERT INTO shop_items (\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_url,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) VALUES (?, ?, ?, ?)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stmt.run(name, description, imageUrl, price)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stmt.finalize();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve({ status: 'success' })\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.close();\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0},\n\u00a0\u00a0...\n}\n```", "```js\nconst sqlite3 = require('sqlite3').verbose();\nmodule.exports = {\n\u00a0\u00a0...\n\u00a0\u00a0removeShopItem: ({ shopItemId }) => {\n\u00a0\u00a0\u00a0\u00a0const db = new sqlite3.Database('./db.sqlite');\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.serialize(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const stmt = db.prepare(\"DELETE FROM shop_items WHERE \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shop_item_id = (?)\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stmt.run(shopItemId)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stmt.finalize();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve({ status: 'success' })\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db.close();\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0},\n}\n```", "```js\nconst createError = require('http-errors');\nconst express = require('express');\nconst path = require('path');\nconst cookieParser = require('cookie-parser');\nconst logger = require('morgan');\nconst { graphqlHTTP } = require('express-graphql');\nconst { buildSchema } = require('graphql');\nconst cors = require('cors')\nconst shopItemResolvers = require('./resolvers/shopItems')\nconst orderResolvers = require('./resolvers/orders')\nconst authResolvers = require('./resolvers/auth')\nconst jwt = require('jsonwebtoken');\n```", "```js\n...\nconst schema = buildSchema(`\n\u00a0\u00a0type Response {\n\u00a0\u00a0\u00a0\u00a0status: String\n\u00a0\u00a0}\n\u00a0\u00a0...\n\u00a0\u00a0input Order {\n\u00a0\u00a0\u00a0\u00a0order_id: Int\n\u00a0\u00a0\u00a0\u00a0name: String\n\u00a0\u00a0\u00a0\u00a0address: String\n\u00a0\u00a0\u00a0\u00a0phone: String\n\u00a0\u00a0\u00a0\u00a0ordered_items: [ShopItem]\n\u00a0\u00a0}\n\u00a0\u00a0...\n\u00a0\u00a0type Query {\n\u00a0\u00a0\u00a0\u00a0getShopItems: [ShopItemOutput],\n\u00a0\u00a0\u00a0\u00a0getOrders: [OrderOutput]\n\u00a0\u00a0}\n\u00a0\u00a0type Mutation {\n\u00a0\u00a0\u00a0\u00a0addShopItem(shopItem: ShopItem): Response\n\u00a0\u00a0\u00a0\u00a0removeShopItem(shopItemId: Int): Response\n\u00a0\u00a0\u00a0\u00a0addOrder(order: Order): Response\n\u00a0\u00a0\u00a0\u00a0removeOrder(orderId: Int): Response\n\u00a0\u00a0\u00a0\u00a0login(user: User): Token\n\u00a0\u00a0}\n`);\n...\n```", "```js\nconst root = {\n\u00a0\u00a0...shopItemResolvers,\n\u00a0\u00a0...orderResolvers,\n\u00a0\u00a0...authResolvers\n}\n```", "```js\nconst authMiddleware = (req, res, next) => {\n\u00a0\u00a0const { query } = req.body\n\u00a0\u00a0const token = req.get('authorization')\n\u00a0\u00a0const requiresAuth = query.includes('removeOrder') ||\n\u00a0\u00a0\u00a0\u00a0query.includes('removeShopItem') ||\n\u00a0\u00a0\u00a0\u00a0query.includes('addShopItem')\n\u00a0\u00a0if (requiresAuth) {\n\u00a0\u00a0\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0jwt.verify(token, 'secret');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0} catch (error) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.status(401).json({})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\u00a0\u00a0next();\n}\n```", "```js\n...\nconst app = express();\napp.use(cors())\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(authMiddleware)\napp.use('/graphql', graphqlHTTP({\n\u00a0\u00a0schema,\n\u00a0\u00a0rootValue: root,\n\u00a0\u00a0graphiql: true,\n}));\n...\n```", "```js\napp.use(cors())\n```", "```js\napp.use(express.json());\n```", "```js\napp.use(authMiddleware)\n```", "```js\napp.use('/graphql', graphqlHTTP({\n\u00a0\u00a0schema,\n\u00a0\u00a0rootValue: root,\n\u00a0\u00a0graphiql: true,\n}));\n```", "```js\napp.use('/graphql', graphqlHTTP({\n\u00a0\u00a0schema,\n\u00a0\u00a0rootValue: root,\n\u00a0\u00a0graphiql: true,\n}));\n```", "```js\nDROP TABLE IF EXISTS order_shop_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS shop_items;\nCREATE TABLE shop_items (\n\u00a0\u00a0shop_item_id INTEGER NOT NULL PRIMARY KEY,\n\u00a0\u00a0name TEXT NOT NULL,\n\u00a0\u00a0description TEXT NOT NULL,\n\u00a0\u00a0price NUMBER NOT NULL,\n\u00a0\u00a0image_url TEXT NOT NULL\n);\nCREATE TABLE orders (\n\u00a0\u00a0order_id INTEGER NOT NULL PRIMARY KEY,\n\u00a0\u00a0name TEXT NOT NULL,\n\u00a0\u00a0address TEXT NOT NULL,\n\u00a0\u00a0phone TEXT NOT NULL\n);\nCREATE TABLE order_shop_items (\n\u00a0\u00a0order_id INTEGER NOT NULL,\n\u00a0\u00a0shop_item_id INTEGER NOT NULL,\n\u00a0\u00a0FOREIGN KEY (order_id) REFERENCES orders(order_id)\n\u00a0\u00a0FOREIGN KEY (shop_item_id) REFERENCES \n\u00a0\u00a0\u00a0shop_items(shop_item_id)\n);\n```", "```js\n{\n\u00a0\u00a0...\n\u00a0\u00a0\"scripts\": {\n\u00a0\u00a0\u00a0\u00a0\"start\": \"nodemon ./bin/www\"\n\u00a0\u00a0},\n\u00a0\u00a0...\n}\n```", "```js\nnpm i vee-validate@next vue-router@4 yup graphql graphql-request\n```", "```js\n<template>\n\u00a0\u00a0<p>\n\u00a0\u00a0\u00a0\u00a0<router-link to=\"/orders\">Orders</router-link>\n\u00a0\u00a0\u00a0\u00a0<router-link to=\"/shop-items\">Shop Items</router-link>\n\u00a0\u00a0\u00a0\u00a0<button @click=\"logOut\">Log Out</button>\n\u00a0\u00a0</p>\n</template>\n<script>\nexport default {\n\u00a0\u00a0name: \"TopBar\",\n\u00a0\u00a0methods: {\n\u00a0\u00a0\u00a0\u00a0logOut() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0localStorage.clear();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.$router.push(\"/\");\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0},\n};\n</script>\n<style scoped>\na {\n\u00a0\u00a0margin-right: 5px;\n}\n</style>\n```", "```js\nimport { createRouter, createWebHashHistory } from 'vue-router'\nimport Login from '@/views/Login'\nimport Orders from '@/views/Orders'\nimport ShopItems from '@/views/ShopItems'\nconst beforeEnter = (to, from, next) => {\n\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0const token = localStorage.getItem('token')\n\u00a0\u00a0\u00a0\u00a0if (to.fullPath !== '/' && !token) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return next({ fullPath: '/' })\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return next()\n\u00a0\u00a0} catch (error) {\n\u00a0\u00a0\u00a0\u00a0return next({ fullPath: '/' })\n\u00a0\u00a0}\n}\nconst routes = [\n\u00a0\u00a0{ path: '/', component: Login },\n\u00a0\u00a0{ path: '/orders', component: Orders, beforeEnter },\n\u00a0\u00a0{ path: '/shop-items', component: ShopItems, beforeEnter },\n]\nconst router = createRouter({\n\u00a0\u00a0history: createWebHashHistory(),\n\u00a0\u00a0routes,\n})\nexport default router\n```", "```js\n<template>\n\u00a0\u00a0<h1>Admin Login</h1>\n\u00a0\u00a0<Form :validationSchema=\"schema\" @submit=\"submitForm\">\n\u00a0\u00a0\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label for=\"name\">Username</label>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Field name=\"username\" type=\"text\" \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0placeholder=\"Username\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ErrorMessage name=\"username\" />\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label for=\"password\">Password</label>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Field name=\"password\" placeholder=\"Password\" \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type=\"password\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ErrorMessage name=\"password\" />\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0<input type=\"submit\" />\n\u00a0\u00a0</Form>\n</template>\n```", "```js\n<script>\nimport { GraphQLClient, gql } from \"graphql-request\";\nimport * as yup from \"yup\";\nimport { Form, Field, ErrorMessage } from \"vee-validate\";\nconst APIURL = \"http://localhost:3000/graphql\";\nconst graphQLClient = new GraphQLClient(APIURL, {\n\u00a0\u00a0headers: {\n\u00a0\u00a0\u00a0\u00a0authorization: \"\",\n\u00a0\u00a0},\n});\nconst schema = yup.object({\n\u00a0\u00a0name: yup.string().required(),\n\u00a0\u00a0password: yup.string().required(),\n});\n...\n</script>\n```", "```js\n<script>\n...\nexport default {\n\u00a0\u00a0name: \"Login\",\n\u00a0\u00a0components: {\n\u00a0\u00a0\u00a0\u00a0Form,\n\u00a0\u00a0\u00a0\u00a0Field,\n\u00a0\u00a0\u00a0\u00a0ErrorMessage,\n\u00a0\u00a0},\n\u00a0\u00a0data() {\n\u00a0\u00a0\u00a0\u00a0return {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0schema,\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0},\n...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} = await graphQLClient.request(mutation, variables);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0localStorage.setItem(\"token\", token);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.$router.push('/orders')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} catch (error) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0alert(\"Login failed\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0},\n};\n</script>\n```", "```js\n<template>\n\u00a0\u00a0<TopBar />\n\u00a0\u00a0<h1>Orders</h1>\n\u00a0\u00a0<div v-for=\"order of orders\" :key=\"order.order_id\">\n\u00a0\u00a0\u00a0\u00a0<h2>Order ID: {{ order.order_id }}</h2>\n\u00a0\u00a0\u00a0\u00a0<p>Name: {{ order.name }}</p>\n\u00a0\u00a0\u00a0\u00a0<p>Address: {{ order.address }}</p>\n\u00a0\u00a0\u00a0\u00a0<p>Phone: {{ order.phone }}</p>\n\u00a0\u00a0\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h3>Ordered Items</h3>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v-for=\"orderedItems of order.ordered_items\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:key=\"orderedItems.shop_item_id\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h4>Name: {{ orderedItems.name }}</h4>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<p>Description: {{ orderedItems.description }}</p>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<p>Price: ${{ orderedItems.price }}</p>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0<p>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<b>Total: ${{ calcTotal(order.ordered_items) }}</b>\n\u00a0\u00a0\u00a0\u00a0</p>\n\u00a0\u00a0\u00a0\u00a0<button type=\"button\" @click=\"deleteOrder(order)\">Delete \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Order</button>\n\u00a0\u00a0</div>\n</template>\n```", "```js\n<script>\nimport { GraphQLClient, gql } from \"graphql-request\";\nimport TopBar from '@/components/TopBar'\nconst APIURL = \"http://localhost:3000/graphql\";\nconst graphQLClient = new GraphQLClient(APIURL, {\n\u00a0\u00a0headers: {\n\u00a0\u00a0\u00a0\u00a0authorization: localStorage.getItem(\"token\"),\n\u00a0\u00a0},\n});\n...\n</script>\n```", "```js\n<script>\n...\nexport default {\n\u00a0\u00a0name: \"Orders\",\n\u00a0\u00a0components: {\n\u00a0\u00a0\u00a0\u00a0TopBar\n...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getOrders {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_id\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0address\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0phone\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ordered_items {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shop_item_id\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_url\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0`;\n...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await graphQLClient.request(mutation, variables);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await this.getOrders();\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0},\n};\n</script>\n```", "```js\n<template>\n\u00a0\u00a0<TopBar />\n\u00a0\u00a0<h1>Shop Items</h1>\n\u00a0\u00a0<button @click=\"showDialog = true\">Add Item to Shop</button>\n\u00a0\u00a0<div v-for=\"shopItem of shopItems\" \n\u00a0\u00a0\u00a0\u00a0:key=\"shopItem.shop_item_id\">\n\u00a0\u00a0\u00a0\u00a0<h2>{{ shopItem.name }}</h2>\n\u00a0\u00a0\u00a0\u00a0<p>Description: {{ shopItem.description }}</p>\n\u00a0\u00a0\u00a0\u00a0<p>Price: ${{ shopItem.price }}</p>\n\u00a0\u00a0\u00a0\u00a0<img :src=\"shopItem.image_url\" :alt=\"shopItem.name\" />\n\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0<button type=\"button\" @click=\"deleteItem(shopItem)\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Delete Item from Shop\n\u00a0\u00a0\u00a0\u00a0</button>\n\u00a0\u00a0</div>\n\u00a0\u00a0...\n</template>\n```", "```js\n<template>\n\u00a0\u00a0...\n\u00a0\u00a0<dialog :open=\"showDialog\" class=\"center\">\n\u00a0\u00a0\u00a0\u00a0<h2>Add Item to Shop</h2>\n\u00a0\u00a0\u00a0\u00a0<Form :validationSchema=\"schema\" @submit=\"submitForm\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Field name=\"imageUrl\" type=\"text\" placeholder=\" Image \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0URL\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ErrorMessage name=\"imageUrl\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label for=\"price\">Price</label>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Field name=\"price\" type=\"text\" placeholder=\"Price\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ErrorMessage name=\"price\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input type=\"submit\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button @click=\"showDialog = false\" type=\"button\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cancel</button>\n\u00a0\u00a0\u00a0\u00a0</Form>\n\u00a0\u00a0</dialog>\n</template>\n```", "```js\n<script>\nimport { GraphQLClient, gql } from \"graphql-request\";\nimport * as yup from \"yup\";\nimport TopBar from \"@/components/TopBar\";\nimport { Form, Field, ErrorMessage } from \"vee-validate\";\nconst APIURL = \"http://localhost:3000/graphql\";\nconst graphQLClient = new GraphQLClient(APIURL, {\n\u00a0\u00a0headers: {\n\u00a0\u00a0\u00a0\u00a0authorization: localStorage.getItem(\"token\"),\n\u00a0\u00a0},\n});\nconst schema = yup.object({\n\u00a0\u00a0name: yup.string().required(),\n\u00a0\u00a0description: yup.string().required(),\n\u00a0\u00a0imageUrl: yup.string().required(),\n\u00a0\u00a0price: yup.number().required().min(0),\n});\n...\n</script>\n```", "```js\n<script>\n... \nexport default {\n\u00a0\u00a0name: \"ShopItems\",\n\u00a0\u00a0components: {\n\u00a0\u00a0\u00a0\u00a0Form,\n\u00a0\u00a0\u00a0\u00a0Field,\n\u00a0\u00a0\u00a0\u00a0ErrorMessage,\n\u00a0\u00a0\u00a0\u00a0TopBar,\n\u00a0\u00a0},\n\u00a0\u00a0data() {\n\u00a0\u00a0\u00a0\u00a0return {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shopItems: [],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0showDialog: false,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0schema,\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0},\n\u00a0\u00a0beforeMount() {\n\u00a0\u00a0\u00a0\u00a0this.getShopItems();\n\u00a0\u00a0},\n\u00a0\u00a0...\n};\n</script>\n```", "```js\n<script>\n... \nexport default {\n\u00a0\u00a0...\n\u00a0\u00a0methods: {\n\u00a0\u00a0\u00a0\u00a0async getShopItems() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const query = gql`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getShopItems {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shop_item_id\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_url\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0`;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const { getShopItems: data } = await \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0graphQLClient.request(query);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.shopItems = data;\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0},\n};\n</script>\n```", "```js\n<script>\n... \nexport default {\n\u00a0\u00a0...\n\u00a0\u00a0methods: {\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0async submitForm({ name, description, imageUrl, price: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0oldPrice }) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const mutation = gql`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mutation addShopItem(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$name: String\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$description: String\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$image_url: String\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$price: Float\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) {\n...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_url: imageUrl,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price: +oldPrice,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await graphQLClient.request(mutation, variables);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.showDialog = false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await this.getShopItems();\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0},\n};\n</script>\n```", "```js\n<script>\n... \nexport default {\n\u00a0\u00a0...\n\u00a0\u00a0methods: {\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0async deleteItem({ shop_item_id: shopItemId }) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const mutation = gql`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mutation removeShopItem($shopItemId: Int) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0removeShopItem(shopItemId: $shopItemId) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0status\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0`;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const variables = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shopItemId,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await graphQLClient.request(mutation, variables);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await this.getShopItems();\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0},\n};\n</script>\n```", "```js\n<template>\n\u00a0\u00a0<router-view></router-view>\n</template>\n<script>\nexport default {\n\u00a0\u00a0name: \"App\",\n};\n</script>\n```", "```js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from '@/plugins/router'\nconst app = createApp(App)\napp.use(router)\napp.mount('#app')\n```", "```js\n{\n\u00a0\u00a0...\n\u00a0\u00a0\"scripts\": {\n\u00a0\u00a0\u00a0\u00a0\"serve\": \"vue-cli-service serve --port 8090\",\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0},\n\u00a0\u00a0...\n}\n```", "```js\nnpm i vee-validate@next vue-router@4 yup vuex@4 vuex-persistedstate@ ^4.0.0-beta.3 graphql graphql-request\n```", "```js\nimport { createRouter, createWebHashHistory } from 'vue-router'\nimport Shop from '@/views/Shop'\nimport OrderForm from '@/views/OrderForm'\nimport Success from '@/views/Success'\nconst routes = [\n\u00a0\u00a0{ path: '/', component: Shop },\n\u00a0\u00a0{ path: '/order-form', component: OrderForm },\n\u00a0\u00a0{ path: '/success', component: Success },\n]\nconst router = createRouter({\n\u00a0\u00a0history: createWebHashHistory(),\n\u00a0\u00a0routes,\n})\n```", "```js\nimport { createStore } from \"vuex\";\nimport createPersistedState from \"vuex-persistedstate\";\nconst store = createStore({\n\u00a0\u00a0state() {\n\u00a0\u00a0\u00a0\u00a0return {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cartItems: []\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0},\n\u00a0\u00a0getters: {\n\u00a0\u00a0\u00a0\u00a0cartItemsAdded(state) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return state.cartItems\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0},\n\u00a0\u00a0mutations: {\n\u00a0\u00a0\u00a0\u00a0addCartItem(state, cartItem) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const cartItemIds = state.cartItems.map(c => \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c.cartItemId).filter(id => typeof id === 'number')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0state.cartItems.push({\n...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0state.cartItems = []\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0},\n\u00a0\u00a0plugins: [createPersistedState({\n\u00a0\u00a0\u00a0\u00a0key: 'cart'\n\u00a0\u00a0})],\n});\nexport default store\n```", "```js\n<template>\n\u00a0\u00a0<h1>Order Form</h1>\n\u00a0\u00a0<div v-for=\"(cartItem, index) of cartItemsAdded\" \n\u00a0\u00a0\u00a0\u00a0:key=\"cartItem.cartItemId\">\n\u00a0\u00a0\u00a0\u00a0<h2>{{ cartItem.name }}</h2>\n\u00a0\u00a0\u00a0\u00a0<p>Description: {{ cartItem.description }}</p>\n\u00a0\u00a0\u00a0\u00a0<p>Price: ${{ cartItem.price }}</p>\n\u00a0\u00a0\u00a0\u00a0<br />\n...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Field name=\"phone\" type=\"text\" placeholder=\"Phone\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ErrorMessage name=\"phone\" />\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label for=\"address\">Address</label>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Field name=\"address\" type=\"text\" placeholder=\"Address\" \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ErrorMessage name=\"address\" />\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0<input type=\"submit\" />\n\u00a0\u00a0</Form>\n</template>\n```", "```js\n<script>\nimport { GraphQLClient, gql } from \"graphql-request\";\nimport { mapMutations, mapGetters } from \"vuex\";\nimport { Form, Field, ErrorMessage } from \"vee-validate\";\nimport * as yup from \"yup\";\n...\nexport default {\n\u00a0\u00a0name: \"OrderForm\",\n\u00a0\u00a0data() {\n\u00a0\u00a0\u00a0\u00a0return {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0schema,\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0},\n\u00a0\u00a0components: {\n\u00a0\u00a0\u00a0\u00a0Form,\n\u00a0\u00a0\u00a0\u00a0Field,\n\u00a0\u00a0\u00a0\u00a0ErrorMessage,\n\u00a0\u00a0},\n\u00a0\u00a0computed: {\n\u00a0\u00a0\u00a0\u00a0...mapGetters([\"cartItemsAdded\"]),\n\u00a0\u00a0},\n\u00a0\u00a0...\n};\n</script>\n```", "```js\n<script>\n...\nexport default {\u00a0\u00a0\n\u00a0\u00a0...\n\u00a0\u00a0methods: {\n\u00a0\u00a0\u00a0\u00a0async submitOrder({ name, phone, address }) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const mutation = gql`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mutation addOrder(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$name: String\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$phone: String\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$address: String\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$ordered_items: [ShopItem]\n...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shop_item_id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_url,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price,,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await graphQLClient.request(mutation, variables);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.clearCart();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.$router.push(\"/success\");\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0...mapMutations([\"addCartItem\", \"removeCartItem\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"clearCart\"]),\n\u00a0\u00a0},\n};\n</script>\n```", "```js\n<template>\n\u00a0\u00a0<h1>Shop</h1>\n\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0<router-link to=\"/order-form\">Check Out</router-link>\n\u00a0\u00a0</div>\n\u00a0\u00a0<button type=\"button\" @click=\"clearCart()\">Clear Shopping \n\u00a0\u00a0\u00a0\u00a0\u00a0Cart</button>\n\u00a0\u00a0<p>{{ cartItemsAdded.length }} item(s) added to cart.</p>\n\u00a0\u00a0<div v-for=\"shopItem of shopItems\" :key=\"shopItem.\n\u00a0\u00a0\u00a0\u00a0\u00a0shop_item_id\">\n\u00a0\u00a0\u00a0\u00a0<h2>{{ shopItem.name }}</h2>\n\u00a0\u00a0\u00a0\u00a0<p>Description: {{ shopItem.description }}</p>\n\u00a0\u00a0\u00a0\u00a0<p>Price: ${{ shopItem.price }}</p>\n\u00a0\u00a0\u00a0\u00a0<img :src=\"shopItem.image_url\" :alt=\"shopItem.name\" />\n\u00a0\u00a0\u00a0\u00a0<br />\n\u00a0\u00a0\u00a0\u00a0<button type=\"button\" @click=\"addCartItem(shopItem)\">Add\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to Cart</button>\n\u00a0\u00a0</div>\n</template>\n```", "```js\n<script>\nimport { GraphQLClient, gql } from \"graphql-request\";\nimport { mapMutations, mapGetters } from \"vuex\";\nconst APIURL = \"http://localhost:3000/graphql\";\nconst graphQLClient = new GraphQLClient(APIURL);\n...\n\u00a0\u00a0\u00a0\u00a0async getShopItems() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const query = gql`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getShopItems {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shop_item_id\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_url\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0`;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const { getShopItems: data } = await \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0graphQLClient.request(query);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.shopItems = data;\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0...mapMutations([\"addCartItem\", \"clearCart\"]),\n\u00a0\u00a0},\n};\n</script>\n```", "```js\n<style scoped>\nimg {\n\u00a0\u00a0width: 100px;\n}\n</style>\n```", "```js\n<template>\n\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0<h1>Order Successful</h1>\n\u00a0\u00a0\u00a0\u00a0<router-link to=\"/\">Go Back to Shop</router-link>\n\u00a0\u00a0</div>\n</template>\n<script>\nexport default {\n\u00a0\u00a0name: \"Success\",\n};\n</script>\n```", "```js\n<template>\n\u00a0\u00a0<router-view></router-view>\n</template>\n<script>\nexport default {\n\u00a0\u00a0name: \"App\",\n};\n</script>\n```", "```js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from '@/plugins/router'\nimport store from '@/plugins/vuex'\nconst app = createApp(App)\napp.use(router)\napp.use(store)\napp.mount('#app')\n```", "```js\n{\n\u00a0\u00a0...\n\u00a0\u00a0\"scripts\": {\n\u00a0\u00a0\u00a0\u00a0\"serve\": \"vue-cli-service serve --port 8091\",\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0},\n\u00a0\u00a0...\n}\n```"]