["```js\ndescribe(\"Message.test.js\", () => {\n\u00a0\u00a0let cmp;\n\u00a0\u00a0describe(\"Properties\", () => {\n\u00a0\u00a0\u00a0\u00a0// @TODO\n\u00a0\u00a0});\n});\n```", "```js\nconst createCmp = propsData => mount(Message, { propsData });\n```", "```js\nit(\"has a message property\", () => {\n\u00a0\u00a0cmp = createCmp({ message: \"hey\" });\n\u00a0\u00a0expect(cmp.hasProp(\"message\", \"hey\")).toBeTruthy();\n});\n```", "```js\nit(\"has no cat property\", () => {\n\u00a0\u00a0cmp = createCmp({ cat: \"hey\" });\n\u00a0\u00a0expect(cmp.hasProp(\"cat\", \"hey\")).toBeFalsy();\n});\n```", "```js\nit(\"has no cat property\", () => {\n\u00a0\u00a0cmp = createCmp({ cat: \"hey\" });\n\u00a0\u00a0expect(cmp.hasProp(\"cat\", \"hey\")).toBeTruthy();\n});\n```", "```js\nprops: {\n\u00a0\u00a0message: String,\n\u00a0\u00a0author: {\n\u00a0\u00a0\u00a0\u00a0type: String,\n\u00a0\u00a0\u00a0\u00a0default: 'Paco'\n\u00a0\u00a0}\n},\n```", "```js\nit(\"Paco is the default author\", () => {\n\u00a0\u00a0cmp = createCmp({ message: \"hey\" });\n\u00a0\u00a0expect(cmp.hasProp(\"author\", \"Paco\")).toBeTruthy();\n});\n```", "```js\nprops: {\n\u00a0\u00a0message: {\n\u00a0\u00a0\u00a0\u00a0type: String,\n\u00a0\u00a0\u00a0\u00a0required: true,\n\u00a0\u00a0\u00a0\u00a0validator: message => message.length > 1\n\u00a0\u00a0}\n}\n```", "```js\nclass Message {}\n\nprops: {\n\u00a0\u00a0message: {\n\u00a0\u00a0\u00a0\u00a0type: Message, // It's compared using instance of\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\n```", "```js\n\u00a0[Vue warn]: Invalid prop: type check failed for prop \"message\". Expected String, got Number.\n(found in <Root>)\n```", "```js\nit(\"message is of type string\", () => {\n\u00a0\u00a0let spy = jest.spyOn(console, \"error\");\n\u00a0\u00a0cmp = createCmp({ message: 1 });\n\u00a0\u00a0expect(spy).toBeCalledWith(\n\u00a0\u00a0\u00a0\u00a0expect.stringContaining(\"[Vue warn]: Invalid prop\")\n\u00a0\u00a0);\n\u00a0\u00a0spy.mockReset(); // or mockRestore() to completely remove the mock\n});\n```", "```js\nprops: [\"message\"];\n// or\nprops: {\n\u00a0\u00a0message: String;\n}\n// or\nprops: {\n\u00a0\u00a0message: {\n\u00a0\u00a0\u00a0\u00a0type: String;\n\u00a0\u00a0}\n}\n```", "```js\ndescribe('Message.test.js', () => {\n\u00a0\u00a0...\n\u00a0\u00a0describe('Properties', () => {\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0describe('Validation', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const message = createCmp().vm.$options.props.message\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0it('message is of type string', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(message.type).toBe(String)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0it('message is required', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(message.required).toBeTruthy()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0it('message has at least length 2', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(message.validator && message.validator('a')).toBeFalsy()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(message.validator && message.validator('aa')).toBeTruthy()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0})\n```", "```js\n<template>\n\u00a0\u00a0<li\n\u00a0\u00a0\u00a0\u00a0style=\"margin-top: 10px\"\n\u00a0\u00a0\u00a0\u00a0class=\"message\"\n\u00a0\u00a0\u00a0\u00a0@click=\"handleClick\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{message}}\n\u00a0\u00a0</li>\n</template>\n<script>\nexport default {\n\u00a0\u00a0name: \"Message\",\n\u00a0\u00a0props: [\"message\"],\n\u00a0\u00a0methods: {\n\u00a0\u00a0\u00a0\u00a0handleClick() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.$emit(\"message-clicked\", this.message)\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n};\n</script>\n```", "```js\n<template>\n\u00a0\u00a0<ul>\n\u00a0\u00a0\u00a0\u00a0<Message\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@message-clicked=\"handleMessageClick\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:message=\"message\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v-for=\"message in messages\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:key=\"message\"/>\n\u00a0\u00a0</ul>\n</template>\n<script>\nimport Message from \"./Message\";\nexport default {\n\u00a0\u00a0name: \"MessageList\",\n\u00a0\u00a0props: [\"messages\"],\n\u00a0\u00a0methods: {\n\u00a0\u00a0\u00a0\u00a0handleMessageClick(message) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(message)\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0},\n\u00a0\u00a0components: {\n\u00a0\u00a0\u00a0\u00a0Message\n\u00a0\u00a0}\n};\n</script>\n```", "```js\ndescribe(\"Message.test.js\", () => {\n\u00a0\u00a0describe(\"Events\", () => {\n\u00a0\u00a0\u00a0\u00a0beforeEach(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cmp = createCmp({ message: \"Cat\" });\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0it(\"calls handleClick when click on message\", () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// @TODO\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0});\n});\n```", "```js\nit(\"calls handleClick when click on message\", () => {\n\u00a0\u00a0const spy = spyOn(cmp.vm, \"handleClick\");\n\u00a0\u00a0cmp.update(); // Forces to re-render, applying changes on template\n\u00a0\u00a0const el = cmp.find(\".message\").trigger(\"click\");\n\u00a0\u00a0expect(cmp.vm.handleClick).toBeCalled();\n});\n```", "```js\nit(\"calls handleClick when click on message\", () => {\n\u00a0\u00a0cmp.vm.handleClick = jest.fn();\n\u00a0\u00a0cmp.update();\n\u00a0\u00a0const el = cmp.find(\".message\").trigger(\"click\");\n\u00a0\u00a0expect(cmp.vm.handleClick).toBeCalled();\n});\n```", "```js\nit(\"calls handleClick when click on message\", () => {\n\u00a0\u00a0const stub = jest.spy();\n\u00a0\u00a0cmp.setMethods({ handleClick: stub });\n\u00a0\u00a0cmp.update();\n\u00a0\u00a0const el = cmp.find(\".message\").trigger(\"click\");\n\u00a0\u00a0expect(stub).toBeCalled();\n});\n```", "```js\nit(\"triggers a message-clicked event when a handleClick method is called\", () => {\n\u00a0\u00a0const stub = jest.fn();\n\u00a0\u00a0cmp.vm.$on(\"message-clicked\", stub);\n\u00a0\u00a0cmp.vm.handleClick();\n\u00a0\u00a0expect(stub).toBeCalledWith(\"Cat\");\n});\n```", "```js\nit(\"Calls handleMessageClick when @message-click happens\", () => {\n\u00a0\u00a0const stub = jest.fn();\n\u00a0\u00a0cmp.setMethods({ handleMessageClick: stub });\n\u00a0\u00a0cmp.update();\n\u00a0\u00a0const el = cmp.find(Message).vm.$emit(\"message-clicked\", \"cat\");\n\u00a0\u00a0expect(stub).toBeCalledWith(\"cat\");\n});\n```"]