["```js\nclass X {\n\u00a0\u00a0get fullName() {\n\u00a0\u00a0\u00a0\u00a0return `${this.name} ${this.surname}`;\n\u00a0\u00a0}\n\u00a0\u00a0set fullName(value) {\n\u00a0\u00a0\u00a0\u00a0// ...\n\u00a0\u00a0}\n}\n```", "```js\nexport default {\n\u00a0\u00a0computed: {\n\u00a0\u00a0\u00a0\u00a0fullName() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return `${this.name} ${this.surname}`;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n};\n```", "```js\nexport default {\n\u00a0\u00a0computed: {\n\u00a0\u00a0\u00a0\u00a0fullName: {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return `${this.name} ${this.surname}`;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set(value) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n};\n```", "```js\n<template>\n\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0<form>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input type=\"text\" v-model=\"inputValue\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span class=\"reversed\">{{ reversedInput }}</span>\n\u00a0\u00a0\u00a0\u00a0</form>\n\u00a0\u00a0</div>\n</template>\n<script>\nexport default {\n\u00a0\u00a0props: [\"reversed\"],\n\u00a0\u00a0data: () => ({\n\u00a0\u00a0\u00a0\u00a0inputValue: \"\"\n\u00a0\u00a0}),\n\u00a0\u00a0computed: {\n\u00a0\u00a0\u00a0\u00a0reversedInput() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.reversed ?\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.inputValue.split(\"\").reverse().join(\"\") :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.inputValue;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n};\n</script>\n```", "```js\nimport { shallowMount } from \"@vue/test-utils\";\nimport Form from \"../src/components/Form\";\ndescribe(\"Form.test.js\", () => {\n\u00a0\u00a0let cmp;\n\u00a0\u00a0beforeEach(() => {\n\u00a0\u00a0\u00a0\u00a0cmp = shallowMount(Form);\n\u00a0\u00a0});\n});\n```", "```js\ndescribe(\"Properties\", () => {\n\u00a0\u00a0it(\"returns the string in normal order if reversed property is not true\", () => {\n\u00a0\u00a0\u00a0\u00a0cmp.setData({ inputValue: \"Yoo\" });\n\u00a0\u00a0\u00a0\u00a0expect(cmp.vm.reversedInput).toBe(\"Yoo\");\n\u00a0\u00a0});\n\u00a0\u00a0it(\"returns the reversed string if reversed property is true\", () => {\n\u00a0\u00a0\u00a0\u00a0cmp.setData({ inputValue: \"Yoo\" });\n\u00a0\u00a0\u00a0\u00a0cmp.setProps({ reversed: true });\n\u00a0\u00a0\u00a0\u00a0expect(cmp.vm.reversedInput).toBe(\"ooY\");\n\u00a0\u00a0});\n});\n```", "```js\nwatch: {\n\u00a0\u00a0inputValue(newVal, oldVal) {\n\u00a0\u00a0\u00a0\u00a0if (newVal.trim().length && newVal !== oldVal) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(newVal)\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\n```", "```js\ndescribe(\"Form.test.js\", () => {\n\u00a0\u00a0let cmp;\n\u00a0\u00a0describe(\"Watchers - inputValue\", () => {\n\u00a0\u00a0\u00a0\u00a0let spy;\n\u00a0\u00a0\u00a0\u00a0beforeAll(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spy = jest.spyOn(console, \"log\");\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0afterEach(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spy.mockClear();\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0it(\"is not called if value is empty (trimmed)\", () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// TODO\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0it(\"is not called if values are the same\", () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// TODO\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0it(\"is called with the new value in other cases\", () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// TODO\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0});\n});\n```", "```js\nit(\"is called with the new value in other cases\", () => {\n\u00a0\u00a0cmp.vm.inputValue = \"foo\";\n\u00a0\u00a0expect(spy).toBeCalled();\n});\n```", "```js\nit(\"is called with the new value in other cases\", done => {\n\u00a0\u00a0cmp.vm.inputValue = \"foo\";\n\u00a0\u00a0cmp.vm.$nextTick(() => {\n\u00a0\u00a0\u00a0\u00a0expect(spy).toBeCalled();\n\u00a0\u00a0\u00a0\u00a0done();\n\u00a0\u00a0});\n});\n```", "```js\nit(\"is called with the new value in other cases\", () => {\n\u00a0\u00a0cmp.setData({ inputValue: \"foo\" });\n\u00a0\u00a0expect(spy).toBeCalled();\n});\n```", "```js\nit(\"is not called if value is empty (trimmed)\", () => {\n\u00a0\u00a0cmp.setData({ inputValue: \"   \" });\n\u00a0\u00a0expect(spy).not.toBeCalled();\n});\n```", "```js\nit(\"is not called if values are the same\", () => {\n\u00a0\u00a0cmp = shallowMount(Form, {\n\u00a0\u00a0\u00a0\u00a0data: () => ({ inputValue: \"foo\" })\n\u00a0\u00a0});\n\u00a0\u00a0cmp.setData({ inputValue: \"foo\" });\n\u00a0\u00a0expect(spy).not.toBeCalled();\n});\n```"]