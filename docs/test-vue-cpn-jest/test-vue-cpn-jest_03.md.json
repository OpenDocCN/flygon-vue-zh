["```js\nlet cmp = mount(MessageList);\nexpect(cmp.find(\".message\").element).toBeInstanceOf(HTMLElement);\n// Or even call it multiple times\nlet el = cmp.find(\".message\").find(\"span\").element;\n// Although for the previous example, we could do it in one\nlet el = cmp.find(\".message span\").element;\n```", "```js\nit(\"is a MessageList component\", () => {\n\u00a0\u00a0expect(cmp.is(MessageList)).toBe(true);\n\u00a0\u00a0// Or with CSS selector\n\u00a0\u00a0expect(cmp.is(\"ul\")).toBe(true);\n});\nit(\"contains a Message component\", () => {\n\u00a0\u00a0expect(cmp.contains(Message)).toBe(true);\n\u00a0\u00a0// Or with CSS selector\n\u00a0\u00a0expect(cmp.contains(\".message\")).toBe(true);\n});\n```", "```js\nit(\"Both MessageList and Message are vue instances\", () => {\n\u00a0\u00a0expect(cmp.isVueInstance()).toBe(true);\n\u00a0\u00a0expect(cmp.find(Message).isVueInstance()).toBe(true);\n});\n```", "```js\nit(\"Message element exists\", () => {\n\u00a0\u00a0expect(cmp.find(\".message\").exists()).toBe(true);\n});\nit(\"Message is not empty\", () => {\n\u00a0\u00a0expect(cmp.find(Message).isEmpty()).toBe(false);\n});\nit('Message has a class attribute set to \"message\"', () => {\n\u00a0\u00a0expect(cmp.find(Message).attributes().class).toBe(\"message\");\n});\n```", "```js\n<li style=\"margin-top: 10px\" class=\"message\">{{message}}</li>\n```", "```js\nit(\"Message component has the .message class\", () => {\n\u00a0\u00a0expect(cmp.find(Message).classes()).toContain(\"message\");\n});\nit(\"Message component has style padding-top: 10\", () => {\n\u00a0\u00a0expect(cmp.find(Message).attributes().style).toBe(\"padding-top: 10px;\");\n});\n```"]