- en: '*Chapter 1*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第一章*'
- en: Write the First Vue.js Component Unit Test in Jest
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jest 中编写第一个 Vue.js 组件单元测试
- en: The official VueJS testing library, **vue-test-utils** ([https://github.com/vuejs/vue-test-utils](https://github.com/vuejs/vue-test-utils)),
    which is based on **avoriaz** ([https://github.com/eddyerburgh/avoriaz](https://github.com/eddyerburgh/avoriaz)),
    is just around the corner. Indeed, **@EddYerburgh** ([https://twitter.com/EddYerburgh](https://twitter.com/EddYerburgh))
    is doing a very good job of creating it. This library provides all the necessary
    tooling to make writing unit tests in a VueJS application easy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 VueJS 测试库，**vue-test-utils** ([https://github.com/vuejs/vue-test-utils](https://github.com/vuejs/vue-test-utils))，基于
    **avoriaz** ([https://github.com/eddyerburgh/avoriaz](https://github.com/eddyerburgh/avoriaz))，即将推出。事实上，**@EddYerburgh**
    ([https://twitter.com/EddYerburgh](https://twitter.com/EddYerburgh)) 在创建它方面做得非常好。这个库提供了所有必要的工具，使得在
    VueJS 应用程序中编写单元测试变得容易。
- en: '**Jest** ([https://facebook.github.io/jest](https://facebook.github.io/jest)),
    on the other side, is a testing framework developed at Facebook, which makes testing
    a breeze using a number of awesome features, including the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jest** ([https://facebook.github.io/jest](https://facebook.github.io/jest))，另一方面，是
    Facebook 开发的测试框架，使用一些令人惊叹的功能使得测试变得轻而易举，包括以下内容：'
- en: Almost no configuration by default
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎没有默认配置
- en: A very cool interactive mode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常酷的交互模式
- en: Running tests in parallel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行运行测试
- en: Testing with Spies, stubs, and mocks out of the box
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用的间谍、存根和模拟测试
- en: Built-in code coverage
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置代码覆盖
- en: Snapshot testing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照测试
- en: Module-mocking utilities
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块模拟工具
- en: You've probably already written tests without using any of these tools, just
    by using Karma, Mocha, Chai, Sinon, and so on, but you'll see how much easier
    it can be with these tools.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经在不使用这些工具的情况下编写了测试，只是使用 Karma、Mocha、Chai、Sinon 等，但你会看到使用这些工具会更容易。
- en: Setting Up a vue-test Sample Project
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置一个 vue-test 示例项目
- en: 'Let''s start by creating a new project using `vue-cli` ([https://github.com/vuejs/vue-cli](https://github.com/vuejs/vue-cli))
    and answering NO to all yes/no questions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用 `vue-cli` ([https://github.com/vuejs/vue-cli](https://github.com/vuejs/vue-cli))
    创建一个新项目，并对所有 yes/no 问题回答 NO：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we''ll need to install some dependencies, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要安装一些依赖，如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`jest-vue-preprocessor` ([https://github.com/vire/jest-vue-preprocessor](https://github.com/vire/jest-vue-preprocessor))
    is required to make Jest understand `.vue` files, and `babel-jest` ([https://github.com/facebook/jest/tree/master/packages/babel-jest](https://github.com/facebook/jest/tree/master/packages/babel-jest))
    is required for integration with Babel.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`jest-vue-preprocessor` ([https://github.com/vire/jest-vue-preprocessor](https://github.com/vire/jest-vue-preprocessor))
    是必需的，让 Jest 理解 `.vue` 文件，而 `babel-jest` ([https://github.com/facebook/jest/tree/master/packages/babel-jest](https://github.com/facebook/jest/tree/master/packages/babel-jest))
    是与 Babel 集成所必需的。'
- en: Now install 'vue-test-utils' library.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在安装 'vue-test-utils' 库。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s add the following Jest configuration in the `package.json`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `package.json` 中添加以下 Jest 配置：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`moduleFileExtensions` will tell Jest which extensions to look for, and `transform`
    will tell Jest which preprocessor to use for a file extension.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`moduleFileExtensions` 将告诉 Jest 要查找哪些扩展名，而 `transform` 将告诉 Jest 要使用哪个预处理器来处理文件扩展名。'
- en: 'Finally, add a `test` script to the `package.json`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 `package.json` 中添加一个 `test` 脚本：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Testing a Component
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试一个组件
- en: I'll be using single-file components here, and I haven't checked whether splitting
    them into their own `HTML`, `CSS`, or `js` files works or not, so let's assume
    you're doing that as well.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在这里使用单文件组件，并且我还没有检查它们是否可以分割成它们自己的 `HTML`、`CSS` 或 `js` 文件，所以让我们假设你也在这样做。
- en: 'First, create a `MessageList.vue` component under `src/components`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 `src/components` 下创建一个 `MessageList.vue` 组件：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And then update `App.vue` to use it as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后更新 `App.vue` 如下使用它：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We already have a couple of components that we can test. Let''s create a `test`
    folder under the project root and an `App.test.js` file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了一些可以测试的组件。让我们在项目根目录下创建一个`test`文件夹和一个`App.test.js`文件：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, if we run `npm test` (or `npm t` as a shorthand version), the test should
    run and pass. Since we''re modifying the tests, let''s run it in **watch mode**:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们运行`npm test`（或`npm t`作为缩写版本），测试应该会运行并通过。由于我们正在修改测试，让我们以**watch模式**运行它：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The Problem with Nested Components
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套组件的问题
- en: 'This test is too simple. Let''s check that the output is expected as well.
    For that, we can use the amazing Snapshot feature of Jest, which will generate
    a snapshot of the output and check it against the upcoming runs. Add after the
    previous `it` in `App.test.js`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试太简单了。让我们也检查一下输出是否符合预期。为此，我们可以使用Jest的惊人快照功能，它将生成输出的快照并与即将到来的运行进行比较。在`App.test.js`中的前一个`it`之后添加：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will create a `test/__snapshots__/App.test.js.snap` file. Let''s open
    it and inspect it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个`test/__snapshots__/App.test.js.snap`文件。让我们打开并检查它：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you don't know very much about Snapshot, don't worry; I'll cover it in more
    depth in *Chapter 9*, *Snapshot Testing*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对快照不太了解，不用担心；我将在*第9章*，*快照测试*中更深入地介绍它。
- en: 'In case you haven''t noticed, there is a big problem here: the `MessageList`
    component has been rendered as well. **Unit tests** must be tested as **independent
    units**, meaning that in `App.test.js`, we want to test the `App` component and
    not have to care about anything else at all.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有注意到，这里有一个大问题：`MessageList`组件也已被渲染。**单元测试**必须作为**独立单元**进行测试，这意味着在`App.test.js`中，我们要测试`App`组件，而不必关心其他任何东西。
- en: This can be the cause of several problems. Imagine, for example, that the children
    components (`MessageList`, in this case) perform side-effect operations on the
    `created` hook, such as the calling of `fetch`, there being a Vuex action, or
    a change of state. That's something we definitely don't want.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是几个问题的原因。例如，想象一下，子组件（在这种情况下是`MessageList`）在`created`钩子上执行副作用操作，比如调用`fetch`，有一个Vuex动作，或者状态改变。这绝对不是我们想要的。
- en: Luckily, **shallow rendering** solves this nicely.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，**浅渲染**很好地解决了这个问题。
- en: What Is Shallow Rendering?
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是浅渲染？
- en: '**Shallow rendering** ([http://airbnb.io/enzyme/docs/api/shallow.html](http://airbnb.io/enzyme/docs/api/shallow.html))
    is a technique that ensures that your component is rendering without children.
    This is useful for:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**浅渲染**（[http://airbnb.io/enzyme/docs/api/shallow.html](http://airbnb.io/enzyme/docs/api/shallow.html)）是一种确保您的组件在没有子组件的情况下进行渲染的技术。这对于以下情况很有用：'
- en: Testing only the component you want to test (that's what unit tests stand for)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只测试您想要测试的组件（这就是单元测试的含义）
- en: Avoiding side effects that children components can have, such as making HTTP
    calls, calling store actions, and so on
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免子组件可能产生的副作用，比如发起HTTP调用，调用存储操作等
- en: Testing a Component with Vue-Test-Utils
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue-Test-Utils测试组件
- en: '`vue-test-utils` provides us with shallow rendering, among other features.
    We could rewrite the previous test as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue-test-utils`为我们提供了浅渲染，以及其他功能。我们可以将上一个测试重写如下：'
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And now, if you''re still running Jest in `watch` mode, you''ll see that the
    test still passes, but the Snapshot doesn''t match. Press *u* to regenerate it.
    Then, open and inspect it again:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您仍在以`watch`模式运行Jest，您会发现测试仍然通过，但快照不匹配。按下*u*重新生成它。然后，再次打开并检查它：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Do you see? Now, no children have been rendered and we tested the `App` component
    **fully isolated** from the component tree. Also, if you have any `created` or
    other hooks in the children's components, they haven't been called either.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到了吗？现在，没有子组件被渲染，我们完全隔离地测试了`App`组件。此外，如果子组件中有任何`created`或其他钩子，它们也没有被调用。
- en: If you're curious about *how shallow rendering is implemented*, check out the
    **source code** ([https://github.com/vuejs/vue-test-utils/blob/dev/packages/test-utils/src/shallow-mount.js](https://github.com/vuejs/vue-test-utils/blob/dev/packages/test-utils/src/shallow-mount.js))
    and you'll see that it is basically stubbing the `components` key, the `render`
    method, and the life cycle hooks.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对*浅渲染的实现方式*感兴趣，可以查看**源代码**（[https://github.com/vuejs/vue-test-utils/blob/dev/packages/test-utils/src/shallow-mount.js](https://github.com/vuejs/vue-test-utils/blob/dev/packages/test-utils/src/shallow-mount.js)），你会发现它基本上是对`components`键、`render`方法和生命周期钩子进行存根处理。
- en: 'In the same vein, you can implement the `MessageList.test.js` test as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在同样的思路下，你可以按照以下方式实现`MessageList.test.js`测试：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can find the full example from this chapter on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/lesson-1](https://github.com/alexjoverm/vue-testing-series/tree/lesson-1)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在**GitHub**上找到本章的完整示例（[https://github.com/alexjoverm/vue-testing-series/tree/lesson-1](https://github.com/alexjoverm/vue-testing-series/tree/lesson-1)）。
