- en: Creating Reusable Form Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可重用的表单组件
- en: One of the most powerful parts of Vue is its capability to make components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Vue最强大的部分之一是它能够创建组件。
- en: Components are reusable bits of code that usually include a template, scripts,
    and styles. The amazing thing about components is that you can box up all the
    logic for a specific element, or group of elements, into a single unit.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是可重用的代码片段，通常包括模板、脚本和样式。组件的惊人之处在于，你可以将特定元素或一组元素的所有逻辑封装到一个单元中。
- en: A good way to start thinking in terms of components is to start breaking down
    everyday objects into simple, smaller pieces. (In your mind please!)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 开始以组件的方式思考的一个好方法是将日常物品分解为简单的、更小的部分。（请在你的脑海中！）
- en: Take, for example, the computer that you are working on. As a whole, the whole
    system could be called a computer. Now break it down even more—it has a monitor,
    a keyboard, and cables. Now take the keyboard and break it down. You now have
    a container, and this container has keys. Each key is a single component, which
    repeats itself, with some properties that vary between each other. The label on
    the key changes, and sometimes also the size.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，你正在使用的计算机。作为一个整体，整个系统可以称为计算机。现在再进一步分解——它有一个显示器、一个键盘和一些电缆。现在拿键盘来分解。现在你有一个容器，这个容器有键。每个键都是一个单一的组件，它重复出现，具有一些在它们之间变化的属性。键上的标签会改变，有时也会改变大小。
- en: What about this key component? Can you break it down further? Maybe! But is
    it worth it? A keyboard key is a good single component. It has clear properties
    that define it, and we could clearly define its internal functionality. When it
    is pressed, we need to tell whoever is containing it that a key was pressed, and
    the value of that key.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这个关键组件呢？你能进一步分解吗？也许可以！但是值得吗？键盘键是一个很好的单一组件。它有清晰的属性来定义它，我们可以清晰地定义它的内部功能。当它被按下时，我们需要告诉包含它的人，一个键被按下，以及该键的值。
- en: This process of mentally breaking something down can also be applied to any
    Vue application. Start out with the app as a whole single unit and break it down.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这种将某物进行分解的过程也可以应用到任何Vue应用程序中。从整个应用程序作为一个整体单元开始，然后将其分解。
- en: Right now, our current form is one big blob on `App.vue`, which is less than
    ideal. Let's create some components!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们当前的表单是一个大块在`App.vue`中，这不是理想的。让我们创建一些组件！
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Breaking down an application into reusable components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序分解为可重用组件
- en: Understanding `v-model` in custom components
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解自定义组件中的`v-model`
- en: Implementing custom input and select components
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现自定义输入和选择组件
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code for this chapter can be found in the following GitHub repository:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在以下GitHub存储库中找到：
- en: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter03](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter03).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter03](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter03)。'
- en: 'Check out the following video to see the code in action:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2qgj7wx](http://bit.ly/2qgj7wx)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2qgj7wx](http://bit.ly/2qgj7wx)'
- en: Breaking down the form into components
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将表单分解为组件
- en: Taking a look at `App.vue`, let's start with the smallest possible component
    that we can create. If you look carefully, you will see a repeating pattern in
    the code—this is usually a good sign that something could make for a good component!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 看看`App.vue`，让我们从我们可以创建的最小可能组件开始。如果你仔细看，你会发现代码中有一个重复的模式——这通常是一个好迹象，表明某些东西可能成为一个很好的组件！
- en: Within our `<form>` element, we have three different text inputs. Two of them
    are of `type` `text`, and one of them is of `type` `email`. Looks like we will
    need some way to assign these values to the `type` attribute. A prop object could
    be a simple solution!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`<form>`元素中，我们有三个不同的文本输入。其中两个是`text`类型，一个是`email`类型。看起来我们需要一种方法将这些值分配给`type`属性。属性对象可能是一个简单的解决方案！
- en: 'As a quick reminder, here''s the current code for the form:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个快速提醒，这是表单的当前代码：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Go ahead and create a new file inside the `src/components` folder, naming it
    `BaseInput.vue`. Personally, I like to name my very basic input components starting
    with `Base`; that way, I know that it is the simplest possible form of an input
    that I can find in my application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 继续在`src/components`文件夹中创建一个新文件，命名为`BaseInput.vue`。就我个人而言，我喜欢以`Base`开头命名我的基本输入组件；这样，我就知道它是我在应用程序中能找到的最简单的输入形式。
- en: 'If I ever need to make a component that extends or uses `Base` in some way,
    then I can simply import the `BaseInput` component, and make some adjustments!
    Do feel free, however, to use any naming convention that you prefer. If you want
    some actual style guidelines and best practices for naming components and such,
    refer to the official guide here: [https://vuejs.org/v2/style-guide/](https://vuejs.org/v2/style-guide/).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我需要制作一个扩展或以某种方式使用`Base`的组件，那么我只需导入`BaseInput`组件，并进行一些调整！但是，您可以随意使用任何您喜欢的命名约定。如果您想要一些关于命名组件的实际样式指南和最佳实践，请参考官方指南：[https://vuejs.org/v2/style-guide/](https://vuejs.org/v2/style-guide/)。
- en: 'Let''s copy over the first input from `App.vue` into our new component inside
    the `<template>` tags, so that we have a base to work on:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`App.vue`中的第一个输入复制到我们的新组件中的`<template>`标签中，这样我们就有了一个基础来工作：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first thing we need to do is figure out how to get rid of the hardcoded
    values; the purpose of extracting code into components is, after all, for them
    to be dynamic and reusable.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是弄清楚如何摆脱硬编码的值；毕竟，将代码提取到组件中的目的是使其具有动态性和可重用性。
- en: 'Let''s create a prop object to hold the value of `label` (with the name `string`):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个属性对象来保存`label`的值（名称为`string`）：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are going to use the extended way to declare properties, with object notation.
    This way, we can ensure that anyone using our component will at least get yelled
    at by the console in the browser if they forget to define the label.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用对象表示法来声明属性，这样我们可以确保任何使用我们组件的人至少会在浏览器控制台中被警告，如果他们忘记定义标签。
- en: 'Now, let''s go back to the template and actually replace this value with the
    newly created prop object:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到模板，实际上用新创建的属性对象替换这个值：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: One more to go, what about the type? We may want to use this (and we will) for
    email, and eventually password fields.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个，类型呢？我们可能会想要在电子邮件和最终密码字段中使用这个（我们会的）。
- en: 'Let''s create a new prop object for this, and bind it, like before:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为此创建一个新的属性对象，并像以前一样绑定它：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Our new type of property has a default value, which will be used in the event
    that the prop is missing from the component when it's implemented.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新属性类型有一个默认值，在组件实现时，如果该属性缺失，将使用默认值。
- en: '`validator` is a function that, well—validates! It takes a single argument,
    the value that is getting passed into the property, and it has to return a Boolean
    to verify that the value is acceptable for the property (`validator` validates!).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`validator`是一个函数，它验证！它接受一个参数，即传递到属性的值，并且必须返回一个布尔值来验证该值是否可接受用于属性（`validator`验证！）。'
- en: 'In this particular case, we''re just checking that it is one of the three choices
    that we will allow for this component: `text`, `email`, or `password`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特殊情况下，我们只是检查它是否是我们允许的三个选择之一：`text`，`email`或`password`。
- en: 'Now that we are set, let''s update `<input>`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经准备好了，让我们更新`<input>`：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So far, so good! Except that there is one thing still missing, which we have
    to refactor. Can you spot it?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好！除了还有一件事情还缺少，我们需要重构。你能发现吗？
- en: So far, we have seen how to break down the form into components. Let's now take
    a deeper look at `v-model`, and its importance when creating dynamic components.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何将表单分解为组件。现在让我们更深入地了解`v-model`，以及在创建动态组件时的重要性。
- en: Understanding v-model in custom components
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自定义组件中理解v-model
- en: As you know, `v-model` is shorthand for `v-on:input` and `v-bind:value="value"`
    on a given element. It allows us to two-way bind a particular element's value,
    and the events that it emits to one of our internal state properties.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，`v-model`是`v-on:input`和`v-bind:value="value"`的简写形式。它允许我们双向绑定特定元素的值，以及它发出的事件到我们内部状态属性之一。
- en: When talking about component composition, however, we need to take extra things
    into consideration.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在谈论组件组合时，我们需要考虑额外的事情。
- en: In order for a custom component to be able to implement the `v-model` contract,
    we have to make sure that two things happen. That's right! We need to ensure that
    the component has a `value` property and that it `$emits` an input event.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让自定义组件能够实现`v-model`协议，我们必须确保发生两件事。没错！我们需要确保组件有一个`value`属性，并且它`$emits`一个输入事件。
- en: There is a way to change this default behavior by using the `model` property,
    but it is out of the scope of this book. If you want to tell your component to
    use a different property, or a different event for `v-model`, take a look at [https://vuejs.org/v2/api/#model](https://vuejs.org/v2/api/#model).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以通过使用`model`属性来更改这种默认行为，但这超出了本书的范围。如果你想告诉你的组件使用不同的属性或不同的事件来使用`v-model`，请查看[https://vuejs.org/v2/api/#model](https://vuejs.org/v2/api/#model)。
- en: 'Let''s put this theory into practice. We''re going to modify our `BaseInput`
    component, in order to be able to use a `v-model` binding. First, let''s add a
    `value` property, and hook it to `<input>`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个理论付诸实践。我们将修改我们的`BaseInput`组件，以便能够使用`v-model`绑定。首先，让我们添加一个`value`属性，并将其挂钩到`<input>`上：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that we have our new `value` prop, we need to bind it to the value of `<input>`.
    Be sure to remove the old `v-model` from it, though! Have a look at the following
    example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了新的`value`属性，我们需要将其绑定到`<input>`的值上。不过，一定要将旧的`v-model`从中移除！看一下下面的例子：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Almost there; now we need to make sure that `<input>` dispatches input events
    whenever it updates. So, we need to add an event handler that `$emits` this information.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 差不多了；现在我们需要确保`<input>`在更新时触发输入事件。因此，我们需要添加一个事件处理程序来`$emit`这个信息。
- en: '**Important!** Before we continue, let me tell you about a very common *gotcha* when
    working with `v-model` and forms. Not all inputs are created equally! The `<input>` text
    elements (`text`, `email`, and `password`) and `<textarea>` are easy. They fire
    input events that we can listen to for our `v-model` binding. But, what about
    `select`, `checkboxes`, and `radio`?'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要！**在我们继续之前，让我告诉你一个非常常见的*陷阱*，当使用`v-model`和表单时。并非所有的输入都是一样的！`<input>`文本元素（`text`，`email`和`password`）和`<textarea>`很容易。它们触发我们可以监听到用于`v-model`绑定的输入事件。但是，`select`，`checkboxes`和`radio`呢？'
- en: 'The Vue documentation makes it super clear, so I''m going to quote it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Vue文档非常清晰，所以我要引用一下：
- en: '"*`v-model` internally uses different properties and emits different events
    for different input elements:*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “*`v-model`在内部使用不同的属性并为不同的输入元素发出不同的事件：*
- en: '*`text` and `textarea` elements use `value` property and `input` event;*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`text`和`textarea`元素使用`value`属性和`input`事件；*'
- en: '*`checkboxes` and `radiobuttons` use `checked` property and `change` event;*'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`checkboxes`和`radiobuttons`使用`checked`属性和`change`事件；*'
- en: '*`select` fields use `value` as a prop and `change` as an event.*"'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`select`字段使用`value`作为属性和`change`作为事件。*'
- en: 'Now that we have got that theory out of the way, let''s actually listen to
    our event:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经搞清楚了这个理论，让我们实际监听我们的事件：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Congratulations! Our `BaseInput` component is ready to be used.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们的`BaseInput`组件已经准备好使用了。
- en: Now that we have a clear understanding of `v-model` and custom components, we're
    going to get to use our component inside our form. It will make it far more readable,
    dynamic, and easy to maintain.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对`v-model`和自定义组件有了清晰的理解，我们将在表单中使用我们的组件。这将使它更易读、动态和易于维护。
- en: Implementing a custom input component
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现自定义输入组件
- en: Creating reusable custom components is a core part of Vue, but for the components
    to actually be useful, we have to actually *use* them!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建可重用的自定义组件是Vue的核心部分，但是为了使组件真正有用，我们必须实际上*使用*它们！
- en: Open up your `App.vue` file, and let's replace the three `<div class="form-group">`
    elements with our custom component.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的`App.vue`文件，让我们用我们的自定义组件替换三个`<div class="form-group">`元素。
- en: 'First things first: what we have to do is import the component to our file.
    Let''s get that out of the way. Add the following import to the top of the `<script>`
    element, shown as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是将组件导入到我们的文件中。让我们先搞定这个。在`<script>`元素的顶部添加以下导入，如下所示：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Just importing the file is not enough; we actually have to add the component
    to the component''s property on the file, so that we can then use it inside our
    template. We currently do not have such a property inside our Vue instance, so
    let''s create one between `name` and `data()`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅导入文件是不够的；我们实际上必须将组件添加到文件的组件属性中，这样我们才能在模板中使用它。我们目前在Vue实例中没有这样的属性，所以让我们在`name`和`data()`之间创建一个：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that we have our component registered, and imported on our `App.vue` file,
    we can go into the template and replace the old inputs with our new component:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经注册了我们的组件，并在`App.vue`文件中导入了它，我们可以进入模板，用我们的新组件替换旧的输入：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Go back to your browser, and play around with the app. You should see that,
    even though nothing has actually changed, the form is now driven by reusable input
    components—if we were ever faced with the need to update the inputs' CSS, for
    example, we could simply change it once in that file, and the whole application
    would update to reflect those changes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 回到您的浏览器，玩一下这个应用程序。您会发现，即使实际上没有发生任何变化，表单现在是由可重用的输入组件驱动的——例如，如果我们需要更新输入的CSS，我们只需在那个文件中更改一次，整个应用程序就会更新以反映这些变化。
- en: Open up your Vue DevTools once again, and make sure that you have the first
    icon selected (the one for the component structure). Drill down into the structure
    and you will see your three `BaseInput` components represented there.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打开Vue DevTools，并确保选择了第一个图标（组件结构的图标）。深入结构，您将看到三个`BaseInput`组件在那里表示。
- en: You can even go ahead and click each one of them, and the props panel will clearly
    display what makes each one of them unique—the props!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以点击每一个，属性面板将清楚地显示每一个的独特之处——属性！
- en: 'In the following screenshot, you can see that, when I type my name into the
    Name: field, the <BaseInput> component reflects it in its value property:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，您可以看到，当我在“名称：”字段中输入我的名字时，<BaseInput>组件会在其值属性中反映出来：
- en: '![](assets/eb3fa2e1-52a8-49f4-a9b7-3adfbecd54f6.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb3fa2e1-52a8-49f4-a9b7-3adfbecd54f6.png)'
- en: One more thing! Type some values into the form and look at the props box, it
    will update live with the two-way binding in your value property. Now, click on
    the third icon on your DevTools, the one that looks like a bunch of dots—this
    is the events view.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事！在表单中输入一些值，然后查看props框，它将实时更新您的值属性中的双向绑定。现在，点击DevTools中的第三个图标，看起来像一堆点——这是事件视图。
- en: Type in one of the inputs again, and you will see that the events box will fill
    up with entries. Click on one of them, and you'll notice that our input event
    is being fired with each keystroke.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 再次在其中一个输入框中输入一些值，您会看到事件框将填满条目。点击其中一个，您会注意到我们的输入事件在每次按键时都被触发。
- en: These are two different *actions—*the value getting updated and the input event
    being fired make up for the `v-model` doing its job, as we discussed earlier!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是两种不同的*操作*——值得到更新和输入事件被触发构成了`v-model`在工作中所做的工作，正如我们之前讨论的那样！
- en: 'Let''s take a look at the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下的屏幕截图：
- en: '![](assets/8da52196-dedc-4554-94eb-2c40913540cc.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/8da52196-dedc-4554-94eb-2c40913540cc.png)
- en: In the preceding screenshot, you can see how the `<BaseInput>` component is
    emitting input events—`payload` is what the user has typed into the form.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，您可以看到`<BaseInput>`组件是如何发出输入事件的——`payload`是用户在表单中输入的内容。
- en: One more time – with dropdowns!
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 再来一次——带有下拉选项！
- en: Before we wrap up the chapter, let's build a custom component that wraps up
    a drop-down input, in order to review what we have learned so far.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，让我们构建一个自定义组件，它包装了一个下拉输入，以便回顾我们迄今为止学到的知识。
- en: Begin by creating the component file—we are going to name it `BaseSelect.vue`,
    and place it inside the `components` folder.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建组件文件——我们将其命名为`BaseSelect.vue`，并将其放在`components`文件夹中。
- en: Just as we did with `BaseInput`, first we are going to define our HTML template.
    We will leave some attributes empty for now, since we will bind them later. We
    will also set up some dummy data for easy testing. In component creation, you
    will find that small steps are the way to go!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们对`BaseInput`所做的那样，首先我们将定义我们的HTML模板。我们现在会留一些属性为空，因为我们稍后会绑定它们。我们还将设置一些虚拟数据以便轻松测试。在组件创建中，您会发现小步骤是前进的方式！
- en: 'Add the following code as a template for `BaseSelect`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加为`BaseSelect`的模板：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Looking good! Let''s import this new component into `App.vue`, and into our
    template, so that we can test it in action in our browser. Follow the given steps
    to do so:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错！让我们将这个新组件导入到`App.vue`中，并在我们的模板中，以便我们可以在浏览器中测试它的功能。按照给定的步骤来做：
- en: 'Import the component on the top of your `script` element, next to the `BaseInput`
    import statement:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`script`元素的顶部导入组件，紧挨着`BaseInput`导入语句：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add `BaseSelect` to your `components` declaration:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BaseSelect`添加到您的`components`声明中：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create an instance of `BaseSelect` inside the `<template>` element, right below
    the last `BaseInput` component, and before the `div` that holds the input button:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`元素内创建`BaseSelect`的实例，就在最后一个`BaseInput`组件下面，也在包含输入按钮的`div`之前：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Check your browser, and you will see our newly selected component in action.
    Isn't she beautiful?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您的浏览器，您会看到我们新选择的组件正在发挥作用。她不是很漂亮吗？
- en: Let's take it a step further, we are in dire need of some `props`. Let's start
    by adding `label`; we can see from the template that it will need to be made dynamic.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再进一步，我们迫切需要一些`props`。让我们从添加`label`开始；我们可以从模板中看到它需要被动态化。
- en: 'Create your `props` object inside a new `script` element, and add it to the
    list:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的`script`元素内创建您的`props`对象，并将其添加到列表中：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, head to the template and dynamically bind them. We need to make the contents
    of `<label>` dynamic with some interpolation:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，前往模板并动态绑定它们。我们需要使用一些插值使`<label>`的内容动态化：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'So far, so good! Go back to `App.vue`, and add these new `props` to our example
    component:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好！回到`App.vue`，并将这些新的`props`添加到我们的示例组件中：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Test it out in your browser to make sure nothing is broken. The component is
    working pretty well so far, but the options it displays are still hardcoded. Let's
    implement an `options` property—this time it will be an array of objects, which
    we will use to populate the `select` options.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中测试一下，确保没有出现问题。到目前为止，组件运行得相当顺利，但它显示的选项仍然是硬编码的。让我们实现一个`options`属性，这次它将是一个对象数组，我们将用它来填充`select`选项。
- en: 'Go back to `BaseSelect.vue` and create the new property:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`BaseSelect.vue`，并创建新的属性：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For the `validator` object, we will use the JavaScript array, in order to find
    a method to see if we can find an element inside the array that is not an object.
    If something is found, the `find` method will return it and `!` will evaluate
    it to `false`, which will throw a console error. If nothing is found (and all
    the elements are objects), then `find` will return `undefined`, which `!` will
    turn to `true`, and the validation will pass.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`validator`对象，我们将使用JavaScript数组，以找到一种方法来查看数组中是否存在一个不是对象的元素。如果找到了某些东西，`find`方法将返回它，`!`将对其进行评估为`false`，这将引发控制台错误。如果找不到任何东西（并且所有元素都是对象），那么`find`将返回`undefined`，`!`将转换为`true`，并且验证将通过。
- en: For more information about the `find` method, check out the following link: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`find`方法的更多信息，请查看以下链接：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)。
- en: 'Let''s go ahead and implement a `v-for` loop inside our `<select>` element:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`<select>`元素内部实现一个`v-for`循环：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `v-for` loop will grab each element inside of options, and create a new
    `<option>` element inside `<select>`; don't forget to set the `:key` property!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-for`循环将抓取options中的每个元素，并在`<select>`内创建一个新的`<option>`元素；不要忘记设置`:key`属性！'
- en: If you would like to read more about `:key`, that is, when to use it and why,
    check out my article at the following link: [https://www.telerik.com/blogs/in-vue-when-do-i-actually-need-the-key-attribute-and-why](https://www.telerik.com/blogs/in-vue-when-do-i-actually-need-the-key-attribute-and-why).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于`:key`的信息，即何时使用它以及原因，请查看我在以下链接中的文章：[https://www.telerik.com/blogs/in-vue-when-do-i-actually-need-the-key-attribute-and-why](https://www.telerik.com/blogs/in-vue-when-do-i-actually-need-the-key-attribute-and-why)。
- en: We will need each object inside options to have a `label` and `value` properties,
    but we will provide a default in case the `label` is missing.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保options中的每个对象都有`label`和`value`属性，但如果`label`缺失，我们将提供一个默认值。
- en: 'Go back to `App.vue` and we will create a new internal `state` property inside
    `data()` called `loveOptions`, which will hold our options for this particular
    `<Select>`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`App.vue`，我们将在`data()`内部创建一个名为`loveOptions`的新内部`state`属性，它将保存特定`<Select>`的选项：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now that we have set that up, go to the template and bind it to the `options`
    prop of our `BaseSelect` component:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了，去模板并将其绑定到我们的`BaseSelect`组件的`options` prop上：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Go back to your browser after you save and check out the options. It's alive!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后返回浏览器并检查选项。它活了！
- en: There is one more thing missing, which we need to add to this component, the
    `v-model` capabilities. We need to create a `value` prop, make the `option` attribute
    that is selected use it, and make sure that we fire input events from inside our
    component.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事情缺失，我们需要将其添加到这个组件中，即`v-model`功能。我们需要创建一个`value` prop，使所选的`option`属性使用它，并确保我们从组件内部触发输入事件。
- en: '"Remember, remember, the rules of `v-model`, the properties bindings and emit.
    I know of no reason, the `v-model` system, should ever be forgot." - Vue Fawkes'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “记住，记住，`v-model` 的规则，属性绑定和发射。我不知道任何理由，`v-model` 系统，应该被遗忘。” - Vue Fawkes
- en: In this case, since we are going to use `v-model` with a `select`, remember
    that we need to listen to the change, even internally! Another thing to note is
    that you may be tempted to place a `:value` binding on top of the `select` tag,
    this is not the correct way of working with selects!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于我们将使用 `v-model` 与 `select`，请记住我们需要监听变化，甚至是内部的变化！另一个需要注意的是，您可能会想要在 `select`
    标签上放置一个 `:value` 绑定，这不是与选择一起工作的正确方式！
- en: 'The `<select>` element in HTML does not have a `value` attribute; what it does
    is apply the `selected` attribute to the `option` element inside of it, which
    holds the current value:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 中的 `<select>` 元素没有 `value` 属性；它所做的是将 `selected` 属性应用到其中的 `option` 元素，该元素保存当前值。
- en: 'Add the `value` property:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `value` 属性：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You will use the `value` prop to check whether the value of this option is
    equal to it. Make sure that we emit `input` when the `select` element fires a
    `change` event:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将使用 `value` 属性来检查此选项的值是否等于它。确保在 `select` 元素触发 `change` 事件时发出 `input`：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Go back to `App.vue` and add the `v-model` binding to this new element. You
    will need to create a new property called `love` inside the `form` prop in `data()`,
    and add the `v-model` attribute to the `BaseSelect` element:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 `App.vue` 并将 `v-model` 绑定到这个新元素。您需要在 `data()` 中的 `form` 属性中创建一个名为 `love`
    的新属性，并将 `v-model` 属性添加到 `BaseSelect` 元素中：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `BaseSelect` element will now have a `v-model` binding:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`BaseSelect` 元素现在将具有 `v-model` 绑定：'
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Finally, check in your browser to see that everything is working. Go into DevTools
    and check your App component—you will see that when you switch the value of the
    select, it too will update!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，检查您的浏览器，看看一切是否正常。进入DevTools并检查您的App组件 - 当您切换选择的值时，它也会更新！
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have gone through the process of destructuring a singleton
    application, or form, into reusable dynamic components. We have covered important
    core Vue features such as `v-model`, properties, and events.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经通过将单例应用程序或表单解构为可重用的动态组件的过程。我们已经涵盖了一些重要的核心Vue功能，比如 `v-model`，属性和事件。
- en: In the next chapter, we are going to kick it up a notch and implement a very
    near **u****ser experience** (**UX**) related feature, input masks!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将加快速度，实现一个与用户体验（UX）相关的功能，即输入掩码！
