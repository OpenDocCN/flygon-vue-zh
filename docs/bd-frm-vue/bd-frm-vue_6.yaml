- en: Moving to a Global State with Vuex
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vuex进行全局状态管理
- en: Vuex is a state management pattern and library. Wait, what? Let's put all of
    the technical lingo aside for this one—if you want to read the official technical
    explanation, you can do so on the official Vuex website, What is Vuex?, at [https://vuex.vuejs.org/](https://vuex.vuejs.org/).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex是一种状态管理模式和库。等等，什么？让我们把所有的技术术语放在一边，如果你想阅读官方的技术解释，你可以在官方的Vuex网站上找到，什么是Vuex？[https://vuex.vuejs.org/](https://vuex.vuejs.org/)。
- en: In this chapter, you are going to learn how to set up your project using the
    global state management pattern and library, Vuex. Vuex will allow you to extract
    local state from your components into a, well, global all-knowing state. If you're
    not familiar with this type of pattern, such as React's Redux, don't worry! Keep
    reading—we're going to take baby steps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将学习如何使用全局状态管理模式和库Vuex来设置你的项目。Vuex将允许你将组件中的局部状态提取到一个全局的、无所不知的状态中。如果你对这种模式不熟悉，比如React的Redux，不用担心！继续阅读，我们将一步步来。
- en: We're going to approach it on a what-does-that-mean-for-me level. As you probably
    know, the way that components in Vue communicate is through props from the parent
    to the children and events from the children to the parent. The children components,
    in some cases, will want to send data back to their parents. Maybe you want to
    alert the parent that something inside of it was clicked, or some piece of data
    was changed. In our previous example, our `BasicInput` and `BasicSelect` components
    `$emit` values to the parent when they change or when an input happens.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以“这对我意味着什么”的水平来处理它。你可能知道，在Vue中，组件之间的通信是通过从父组件到子组件的props和从子组件到父组件的事件。在某些情况下，子组件将希望向其父组件发送数据。也许你想提醒父组件，它内部的某些东西被点击了，或者某些数据被改变了。在我们之前的例子中，我们的`BasicInput`和`BasicSelect`组件在改变时向父组件`$emit`值。
- en: In some cases, the parent component has a parent of its own and `$emits` something
    up to it as well. Sometimes, this third parent has a parent and so on. This can
    quickly become a very complex web of components that is flawlessly communicating
    with each other in perfect balance. Or so you thought.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，父组件有自己的父组件，并向上发送`$emit`。有时，这第三个父组件也有父组件，依此类推。这可能很快就会变成一个非常复杂的组件网络，它们之间完美平衡地进行通信。或者你以为是这样。
- en: 'You get a call from your client: they want you to make an API call on your
    app that displays the name of the current user on the header, and they want you
    to pre-populate some fields on the form if there is a currently logged-in user.
    What do you do? Perhaps you''re thinking about making the API call on the `App.vue`
    parent component and start building a chain of props down the components that
    need it, but what would happen when that data changes on one of the children?
    Will you `$emit` the value back to the parents and create a massive chain?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你接到客户的电话：他们希望你在应用程序上进行API调用，以在标题中显示当前用户的名称，并且如果当前有用户登录，他们希望你预先填充表单上的一些字段。你该怎么办？也许你正在考虑在`App.vue`父组件上进行API调用，并开始构建一个需要它的组件链，但当这些数据在其中一个子组件上发生变化时会发生什么呢？你会将值`$emit`回父组件并创建一个庞大的链吗？
- en: The solution is to use Vuex. Vuex will provide you with a global state that
    is not attached to any of your components directly but is accessible to all of
    them. In this chapter, we will grab our work from the previous chapter and migrate
    the whole form to Vuex. We will also make a mock API call to pull a logged-in
    user's data and pre-populate our global store with some values.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是使用Vuex。Vuex将为你提供一个全局状态，它不直接附加到任何组件上，但所有组件都可以访问它。在本章中，我们将从上一章的工作中获取我们的工作，并将整个表单迁移到Vuex。我们还将进行一个模拟API调用，以获取已登录用户的数据，并使用一些值预先填充我们的全局存储。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Adding Vuex to our project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Vuex添加到我们的项目中
- en: Creating the mock API endpoint
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模拟API端点
- en: Creating the global state
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建全局状态
- en: Adding some mutations
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一些变异
- en: Lights, Vue, action!
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灯光，Vue，行动！
- en: Vuelidate and Vuex
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vuelidate和Vuex
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The complete code for this chapter can be found in the following GitHub repository:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可以在以下GitHub存储库中找到：
- en: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter06](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter06).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter06](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter06)。'
- en: 'Check out the following video to see the code in action:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的运行情况：
- en: '[http://bit.ly/31l16Kg](http://bit.ly/31l16Kg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/31l16Kg](http://bit.ly/31l16Kg)'
- en: Adding Vuex to our project
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Vuex添加到我们的项目中
- en: 'Let''s start by adding Vuex to our project. Follow these steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将Vuex添加到我们的项目中。按照以下步骤进行：
- en: 'Open up the Terminal and run the following command to get Vuex added to the
    project as a dependency:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行以下命令，以将Vuex添加到项目中作为依赖项：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that we have the library installed, we need to add it as a plugin to our
    app. Go to `main.js`, import it and add it with the following lines of code. You
    can place them after the `Vue` and `App` import statements:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经安装了库，我们需要将其添加为应用程序的插件。转到`main.js`，导入它并使用以下代码添加它。您可以将它们放在`Vue`和`App`导入语句之后：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `store` variable will hold all of our global states, including our actions
    and mutations as well. We'll discuss those in more detail soon. For `store` to
    be available to the whole app, we are missing one last step. We need to inject
    the `store` variable into our `Vue` instance.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`store`变量将保存我们的全局状态，包括我们的操作和变异。我们很快将详细讨论这些内容。为了使`store`对整个应用程序可用，我们还缺少最后一步。我们需要将`store`变量注入到我们的`Vue`实例中。'
- en: 'Inside `main.js` still, go to the configuration options for the new `Vue` instance
    and inject `store` to it as a property:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.js`中，继续转到新`Vue`实例的配置选项，并将`store`注入其中作为属性：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Great job! Now that we have Vuex set up as a project dependency, we can almost
    dive into creating our store—there's just one more tiny thing to do before that.
    We're going to create a quick mock API endpoint for our testing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在我们已经将Vuex设置为项目依赖项，我们几乎可以开始创建我们的存储了——在那之前只有一件微小的事情要做。我们将为我们的测试创建一个快速的模拟API端点。
- en: Creating the mock API endpoint
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模拟API端点
- en: To simulate that we are making an HTTP call to an API to get the details of
    our user, we need to set it up first using Mockoon. If you don't have it set up,
    check the instructions on how to install it in [Chapter 2](2f5516c2-6f66-4945-b340-645775373cea.xhtml), *A
    Form in its Simplest Form*, in the *Bringing in Axios* section of this book.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟我们正在调用API以获取用户详细信息，我们需要首先使用Mockoon进行设置。如果您还没有设置它，请查看本书的*Bringing in Axios*部分中[第2章](2f5516c2-6f66-4945-b340-645775373cea.xhtml)中如何安装它的说明。
- en: 'Let''s look at how to create a mock API endpoint. Follow these steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建模拟API端点。按照以下步骤进行：
- en: 'Open up the app and click on the Add route button in the second column. This
    will add a new route to the list in that same column. Click on it to select it
    and the pane on the right-hand side will update to show the information for this
    particular route:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开应用程序，然后单击第二列中的“添加路由”按钮。这将在同一列中的列表中添加一个新路由。单击它以选择它，右侧的窗格将更新以显示此特定路由的信息：
- en: '![](assets/a532791e-c587-4e3a-9409-0d8c8eed836e.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a532791e-c587-4e3a-9409-0d8c8eed836e.png)'
- en: 'Under Route settings, where you can input the name of the route, leave the
    verb as GET and set the name of the endpoint as `user`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在路由设置下，你可以输入路由的名称，将动词保留为GET，并将端点的名称设置为`user`：
- en: '![](assets/f1fe164c-b3ac-4d65-b0a0-19be952aee8c.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f1fe164c-b3ac-4d65-b0a0-19be952aee8c.png)'
- en: 'Now, go to the Body section of the panel and set up the dummy data that we
    will be returning from our call. Feel free, of course, to fill this with your
    own name and dummy information shown as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到面板的Body部分，并设置我们将从调用中返回的虚拟数据。当然，你可以随意填写你自己的名称和虚拟信息，如下所示：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot shows how the dummy information will look like:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了虚拟信息的样子：
- en: '![](assets/5d1fb153-5f88-447f-a538-353c8239f878.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5d1fb153-5f88-447f-a538-353c8239f878.png)'
- en: 'One more thing before we start our mock server. Go to the Headers tab on the
    top of the panel, and add a new header. The left side should read Content-Type
    and the right side should read `application/json`, as shown in the following screenshot:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们开始模拟服务器之前还有一件事。转到面板顶部的Headers选项卡，并添加一个新的头部。左侧应该写Content-Type，右侧应该写`application/json`，如下面的截图所示：
- en: '![](assets/9bfc2033-8e96-4743-9864-482c3b02f783.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9bfc2033-8e96-4743-9864-482c3b02f783.png)'
- en: Finally, make sure that you start the server with the green play icon on the
    toolbar. If the server was already running, click the stop button and restart
    it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，确保你使用工具栏上的绿色播放图标启动服务器。如果服务器已经在运行，点击停止按钮然后重新启动。
- en: Mockoon is a super simple but powerful tool, and, with these easy steps, we
    have a fully functional endpoint to run tests with. In the next section, we are
    going to finally dive into creating our store and, with it, the global state.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Mockoon是一个非常简单但功能强大的工具，通过这些简单的步骤，我们已经有了一个完全功能的端点来运行测试。在下一节中，我们将最终开始创建我们的存储和全局状态。
- en: Creating the global state
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建全局状态
- en: Now that we are done with the setup, we can go back to `main.js` and start working
    on our global state.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了设置，可以回到`main.js`并开始处理我们的全局状态。
- en: Inside the new `Vuex.Store` configuration, we will add a reserved property called
    `state`. `state` is a reactive object that works in a similar way to the local
    state, `data()`, so we will redefine the structure of our form here, except, since
    it's not directly tied to it now, we will rename it `user`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的`Vuex.Store`配置中，我们将添加一个叫做`state`的保留属性。`state`是一个响应式对象，类似于本地状态`data()`的工作方式，因此我们将在这里重新定义我们的表单结构，不过，由于它现在不直接与表单绑定，我们将把它重命名为`user`。
- en: 'Back in `main.js`, go ahead and set up the following state inside the new `Vuex.Store`
    object:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`main.js`，继续在新的`Vuex.Store`对象中设置以下状态：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You may be wondering why we are naming our global property that holds the user
    data as `user` instead of `form` as we had it before. First, let me clarify that
    you are free to name your state variables as best fits the needs of your application!
    However, in this case, `form` doesn't really clarify at a glance what kind of
    data we will be storing here; on the other hand, `user` is super descriptive.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道为什么我们将保存用户数据的全局属性命名为`user`，而不是之前的`form`。首先，让我澄清一点，你可以根据你的应用程序需求自由地命名状态变量！然而，在这种情况下，`form`并不能一目了然地表明我们将在这里存储什么样的数据；另一方面，`user`则非常具有描述性。
- en: A common practice is to have the `user` property here start out as null. In
    that case, you can check whether they're already authenticated with simple `if`
    statements such as `if (!user)`. In this case, I have opted for this setup for
    clarity of the structure. Sure, in `App.vue`, the user's data will be used to
    populate a form, but in another part of our application, it may be used to display
    some of the user's data outside any type of form.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的做法是在这里将`user`属性初始化为null。在这种情况下，您可以通过简单的`if`语句来检查他们是否已经通过认证，例如`if (!user)`。在这种情况下，我选择了这种设置来清晰地表明结构。当然，在`App.vue`中，用户的数据将用于填充一个表单，但在我们应用程序的另一个部分中，它可能会用于在任何类型的表单之外显示一些用户的数据。
- en: Learning how to set up your store is the first step to successfully having a
    functional global state. In the following section, we are going to add the ability
    to modify this store with mutations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何设置您的存储是成功拥有功能全局状态的第一步。在接下来的部分，我们将添加修改此存储的能力与变异。
- en: Adding some mutations to our store
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的存储添加一些变异
- en: 'One important thing to know about Vuex is that, even though the global state
    is accessible from any of our components, we should not directly mutate or modify
    it. To modify the content of our user, we will need to create something called
    **mutations**. Mutations are methods that have one single job: to accept a value
    or payload and to commit a modification to the state. That way, Vuex can keep
    tabs on which components are making modifications to the state without it becoming
    highly chaotic!'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Vuex的一个重要事情是，尽管全局状态可以从我们的任何组件中访问，但我们不应该直接改变或修改它。要修改我们的用户的内容，我们需要创建一个叫做**变异**的东西。变异是具有一个单一任务的方法：接受一个值或有效载荷，并对状态进行修改。这样，Vuex就可以监视哪些组件正在对状态进行修改，而不会变得混乱不堪！
- en: Let's create our first mutation; we will call it `updateUser`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个变异；我们将称之为`updateUser`。
- en: 'This mutation will take two parameters: the first one is `state`. Every mutation
    will always receive the state as the first parameter; it is injected to mutations
    by Vuex by default. The second parameter will be the value that that mutation
    will get when you call it—in this case, we will call it `user` since that is what
    we will pass down to it. It is important to know that mutations *cannot* execute
    asynchronous code. Every mutation needs to be synchronous because they are making
    changes to our state directly.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变异将接受两个参数：第一个是`state`。每个变异都会始终接收状态作为第一个参数；它默认由Vuex注入到变异中。第二个参数将是当您调用它时该变异将获得的值——在这种情况下，我们将称之为`user`，因为这是我们将传递给它的内容。重要的是要知道，变异*不能*执行异步代码。每个变异都需要是同步的，因为它们直接对我们的状态进行更改。
- en: 'Create a new property inside the `Vuex.Store` configuration called `mutations`
    and then add our following new mutation to it:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Vuex.Store`配置中创建一个名为`mutations`的新属性，然后将我们的以下新变异添加到其中：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When this mutation is committed, it will update the global state by calling
    `state.user = user` with the user that we pass through it. Now, where exactly
    do we want to commit this new mutation?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当提交此变异时，它将通过调用`state.user = user`来更新全局状态，并传递我们传递的用户。现在，我们到底想要提交这个新的变异在哪里呢？
- en: Earlier, we set up an API endpoint to fetch our mock *logged-in* user. We still
    have to set up a call to this endpoint so that our application can use it when
    it starts to check whether there is a user from the API.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们设置了一个API端点来获取我们的模拟*已登录*用户。我们仍然需要设置一个调用此端点的方法，以便我们的应用程序在启动时可以使用它来检查API中是否有用户。
- en: Lights, Vue, actions!
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灯光，Vue，操作！
- en: The third key part of Vuex is called **actions**. Actions are methods, just
    as mutations are, but they can perform asynchronous code within them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex的第三个关键部分称为**操作**。操作是方法，就像变异一样，但它们可以在其中执行异步代码。
- en: 'Actions receive two parameters as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 操作接收两个参数，如下所示：
- en: The first one is a `context`, which is an object that holds a reference to the
    state, the getters, and the ability to commit mutations and dispatch other actions.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是`context`，它是一个对象，保存对状态、getter的引用，以及提交mutations和调度其他actions的能力。
- en: The second (optional) parameter is user-defined; means that we can send extra
    information to our actions if we need it, but this can also be safely ignored.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个（可选）参数是用户定义的；这意味着我们可以在需要时向我们的actions发送额外的信息，但这也可以安全地忽略。
- en: A common pattern in Vuex-powered applications is to keep HTTP calls inside Vuex
    actions—that way, they can be dispatched by any component inside the application
    if they are needed. These HTTP calls usually modify or make use of the state,
    which is very convenient since we have this all available through the `context`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Vuex的应用程序中的一个常见模式是将HTTP调用放在Vuex actions中 - 这样，如果需要的话，它们可以被应用程序内的任何组件调度。这些HTTP调用通常修改或利用状态，这非常方便，因为我们可以通过`context`轻松访问所有这些内容。
- en: Let's go back to the problem at hand. We need to make a call to our `/users`
    endpoint to get the user's information. We are going to create a Vuex action called
    `getLoggedInUser` that will know how to make this call for us and will automatically
    commit the information it fetches to the state.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到手头的问题。我们需要调用我们的`/users`端点来获取用户信息。我们将创建一个名为`getLoggedInUser`的Vuex action，它将知道如何为我们进行这个调用，并将自动将其获取的信息提交到状态。
- en: 'Follow these steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行：
- en: 'Since we will be using Axios for this, make sure that we first import it to
    `main.js` at the top of the file with the other import statements:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们将使用Axios，确保首先在`main.js`文件中与其他导入语句一起导入它：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, create a property called `actions` inside the `Vuex.Store` configuration
    object; this property is also a reserved word. Inside of it, we will create our
    `getLoggedInUser` function:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Vuex.Store`配置对象中创建一个名为`actions`的属性；这个属性也是一个保留字。在其中，我们将创建我们的`getLoggedInUser`函数：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember that Axios returns a JavaScript promise, so we will attach a `.then`
    block to our call in which we will commit our `updateUser` mutation with the data
    of the response. This data is exactly the one that we defined earlier in Mockoon
    as a JSON object. Keep in mind that a real-life application would involve a more
    intricate process for checking whether the user is, in fact, logged-in; a common
    practice would be to pass in an ID, of sorts, to the endpoint, or perhaps even
    the backend will handle the session by passing tokens back and forth. However,
    this is beyond the scope of this book, so we will keep on using this fake scenario
    for demo purposes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Axios返回一个JavaScript promise，所以我们将在调用中附加一个`.then`块，在其中我们将使用响应数据提交我们的`updateUser`
    mutation。这些数据正是我们在Mockoon中定义的JSON对象。请记住，现实生活中的应用程序可能会涉及更复杂的流程，以检查用户是否实际上已登录；一个常见的做法是向端点传递一个ID，或者甚至后端将通过来回传递令牌来处理会话。然而，这超出了本书的范围，因此我们将继续使用这个虚假场景进行演示目的。
- en: 'Now that we have our action ready, we need a place to dispatch it. In this
    case, we are going to assume that our app wants to check for the logged-in user
    as soon as possible, so we are going to leverage the `created()` hook inside our
    `App.vue` file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的action已经准备好了，我们需要一个地方来调度它。在这种情况下，我们假设我们的应用程序希望尽快检查已登录的用户，因此我们将利用`App.vue`文件中的`created()`钩子：
- en: 'Head to `App.vue` and add the `created` method onto the component:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`App.vue`并在组件上添加`created`方法：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Open your browser, refresh the page, and check your Network tab on the developer
    tools. You'll see that, as soon as the page is loaded, our Axios call to `http://localhost:3000/user`
    is being fired, and the user's data is being loaded. If you have an error, remember
    to start the server on Mockoon first!
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，刷新页面，并在开发者工具的网络选项卡中检查。您会看到，页面加载后，我们对`http://localhost:3000/user`的Axios调用被触发，并且用户的数据被加载。如果出现错误，请记住首先在Mockoon上启动服务器！
- en: 'Before we move onto modifying our form, let''s make a new `<TheHeader>` component
    to showcase the power of our new global state. Create a new file, `TheHeader.vue`,
    inside the `components` folder and copy the following code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们继续修改我们的表单之前，让我们创建一个新的`<TheHeader>`组件来展示我们新的全局状态的强大功能。在`components`文件夹内创建一个新文件`TheHeader.vue`，并复制以下代码：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this component, we're going to use interpolation to output `$store.state.user.firstName`,
    which, in turn, will access our global state, inside the state, and inside the
    user and look for the `firstName` property and display it here.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个组件中，我们将使用插值来输出`$store.state.user.firstName`，这将访问我们的全局状态，在状态内部和用户内部查找`firstName`属性并在这里显示它。
- en: 'Go back to `App.vue` and import the component:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`App.vue`并导入组件：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Don''t forget to declare it inside the `components` property, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在`components`属性内声明它，如下所示：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, add our new component to the template right below the opening `<div>` element
    and check it out on the browser. You should see the name of our user being output
    directly from the global state:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在模板中添加我们的新组件，就在开头的`<div>`元素下方，并在浏览器中查看。您应该可以直接从全局状态中看到我们用户的名称被输出：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that you understand both actions and mutations, we can take the difficulty
    up a notch. In the next section, we are going to incorporate our two major libraries—Vuex
    and Vuelidate.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了操作和突变，我们可以提高难度。在下一节中，我们将整合我们的两个主要库——Vuex和Vuelidate。
- en: Vuelidate and Vuex
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vuelidate和Vuex
- en: 'For our form to continue to work with Vuelidate alongside Vuex, we are going
    to have to make some adjustments to how we have our data set up for two-way binding
    on our inputs. Don''t worry, we''ll take it step by step. Now that we have Vuex
    incorporated into our app, we want our form to use our global state instead of
    the local state we had in our `data() { form: {...} }` inside `App.vue`. So, we
    need to make some changes in our template to tell the two-way binding to use Vuex
    instead.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '为了让我们的表单在使用Vuelidate和Vuex的同时继续工作，我们需要对我们的数据设置进行一些调整，以便在输入上进行双向绑定。别担心，我们会一步一步来做。现在我们已经将Vuex整合到我们的应用程序中，我们希望我们的表单使用全局状态而不是我们在`App.vue`内的`data()
    { form: {...} }`中的局部状态。因此，我们需要在模板中进行一些更改，以告诉双向绑定使用Vuex而不是局部状态。'
- en: We are going to remove all of the `v-model` statements from the inputs in our
    form. Instead, we are going to manually create our two-way bindings by setting
    up the `:value` bind and the `@input` listener.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从我们表单中删除所有的`v-model`语句。相反，我们将通过设置`:value`绑定和`@input`监听器来手动创建我们的双向绑定。
- en: 'First, we will create a new method called `updateUser`, which will receive
    two parameters, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个名为`updateUser`的新方法，它将接收两个参数，如下所示：
- en: The first one will be `property` in our form that is getting updated, for example,
    `firstName` or `lastName`.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个将在我们的表单中被更新的是`property`，例如`firstName`或`lastName`。
- en: The second parameter will be the `value` that this new property will receive.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数将是这个新属性将接收的`value`。
- en: 'So, let''s start by adding this new method to our `App.vue` component:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们从将这个新方法添加到我们的`App.vue`组件开始：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This method will dispatch a new action that we will create in a moment called
    `updateUserData`; it will send a payload with the `property` and the `value` that
    the method got.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将触发一个新的动作，我们将在接下来创建一个名为`updateUserData`的动作；它将发送一个包含`property`和方法获取的`value`的有效负载。
- en: Let's stop for a minute and look at the second statement. Since Vuelidate will
    no longer be hooked into our local state, it is going to need us to tell it when
    to recalculate the dirty state of the input and to check for errors in validation.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们停下来看一下第二个陈述。由于Vuelidate将不再连接到我们的本地状态，它将需要我们告诉它何时重新计算输入的脏状态，并检查验证错误。
- en: Since the `updateUser` method will be in charge of making the changes to our
    global state, we will access Vuelidate's object for this input through `$v.form[property]`
    and force `$touch()` on it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`updateUser`方法将负责对我们的全局状态进行更改，我们将通过`$v.form[property]`访问Vuelidate的输入对象，并在其上强制`$touch()`。
- en: 'Now that our state will be global, we don''t need our `form: {...}` local state
    anymore, so you can go ahead and delete it. Your `data()` prop should now look
    like the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们的状态将是全局的，我们不再需要我们的`form: {...}`本地状态，所以你可以继续删除它。你的`data()`属性现在应该如下所示：'
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'However, for Vuelidate to be able to access our global state, we are going
    to need to use a Vuex helper function to map it to computed properties. In this
    case, we want to use `mapState`. Imagine if you had to create a computed property
    for each one of our user properties, you would have to go down the list and create
    a lot of duplicated code that looked like the following example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了让Vuelidate能够访问我们的全局状态，我们需要使用一个Vuex辅助函数将其映射到计算属性上。在这种情况下，我们想要使用`mapState`。想象一下，如果你不得不为我们的每一个用户属性创建一个计算属性，你将不得不逐个创建大量重复的代码，就像下面的例子一样：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Imagine having to do this for all the properties of your form, could get tedious
    fast, right?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果你不得不为表单的所有属性都这样做，可能会很快变得乏味，对吧？
- en: 'In these cases, Vuex has some handy map functions that we can leverage, so
    let''s go ahead and import `mapState` to the top of our `App.vue` file:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，Vuex有一些方便的映射函数可以利用，所以让我们继续并将`mapState`导入到我们的`App.vue`文件的顶部：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we will add a `computed` prop to our `App.vue` component and use the
    `mapState` function to map our whole state to the computed properties:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`App.vue`组件中添加一个`computed`属性，并使用`mapState`函数将整个状态映射到计算属性上：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We are going to pass an object to `mapState` to tell the function exactly what
    part of our whole global state we want to map to our computed properties. In this
    case, we are telling it to map everything inside the user global state to a local
    form. Since the user is an object with several child properties, it will create
    a binding for each one of them, so that when `App.vue` calls, for example, `this.form.firstName`,
    it will be found in the global state in `this.$store.state.user.firstName`. Awesome,
    right?!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将传递一个对象给`mapState`，告诉函数我们想要将整个全局状态的哪一部分映射到我们的计算属性上。在这种情况下，我们告诉它将用户全局状态中的所有内容映射到本地表单中。由于用户是一个具有多个子属性的对象，它将为每一个创建一个绑定，因此当`App.vue`调用，例如，`this.form.firstName`时，它将在全局状态中的`this.$store.state.user.firstName`中找到。很棒，对吧？！
- en: 'Keep in mind that `mapState` returns an object, so we can use the JavaScript
    ES6 spread operator here to merge the newly created into our `computed: {}` prop.
    This is incredibly handy if you want to add some more computed properties later,
    which are not mapped from Vuex.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '请记住，`mapState`返回一个对象，因此我们可以在这里使用JavaScript ES6的展开运算符将新创建的对象合并到我们的`computed:
    {}`属性中。如果您以后想要添加一些不是从Vuex映射而来的计算属性，这将非常方便。'
- en: If you want to learn more about the spread operator, please refer to the following
    article: [https://dev.to/marinamosti/understanding-the-spread-operator-in-javascript-485j](https://dev.to/marinamosti/understanding-the-spread-operator-in-javascript-485j).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于展开运算符的信息，请参考以下文章：[https://dev.to/marinamosti/understanding-the-spread-operator-in-javascript-485j](https://dev.to/marinamosti/understanding-the-spread-operator-in-javascript-485j)。
- en: 'Before we go and work on the `updateUserData` action, let''s make the `v-model`
    change that we discussed to our inputs. Remove all of the `v-model` statements,
    and replace them on each one as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们去处理`updateUserData`动作之前，让我们对我们的输入进行`v-model`更改。删除所有`v-model`语句，并将它们替换为以下内容：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `:value` property will bind to our global state, that is, the one we created
    at the beginning of this chapter. The `$store` property is accessible globally
    through our application thanks to Vuex, and we can use it to access the state
    directly, even in our templates. The `@input` listeners will point directly to
    `updateUser`, set the property as a string, and pass the payload of the `$event` as
    the value.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`：value`属性将绑定到我们的全局状态，也就是我们在本章开头创建的状态。`$store`属性通过Vuex在整个应用程序中都可以访问，我们可以使用它直接访问状态，甚至在模板中也可以。`@input`监听器将直接指向`updateUser`，将属性设置为字符串，并将`$event`的有效负载作为值传递。'
- en: 'Head over to `main.js`; we have to create the new action that our `updateUser`
    method is calling. We are going to leverage our already existing mutation, `updateUser`,
    to update one of the properties of the user. You could also refactor this into
    a mutation that specifically just updates one of the properties instead of overwriting
    the whole object. In this case, the object is very small, and the performance
    is not a concern. Add the following action to your store:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 转到`main.js`；我们必须创建我们的`updateUser`方法正在调用的新动作。我们将利用我们已经存在的突变`updateUser`，来更新用户的一个属性。您还可以将其重构为一个专门更新一个属性而不是覆盖整个对象的突变。在这种情况下，对象非常小，性能不是问题。将以下动作添加到您的存储中：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: On the first line of the action, we are going to make a shallow copy of our
    user state by using ES6's spread operator. It's important to keep in mind that
    the state should never be changed outside of a mutation, so if we assign the new
    property value directly to the user in our state, we would be doing exactly that.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在动作的第一行，我们将使用ES6的展开运算符对用户状态进行浅拷贝。重要的是要记住，状态永远不应该在突变之外改变，所以如果我们直接将新属性值分配给我们的状态中的用户，我们将会做到这一点。
- en: 'After making the copy, we set the property to the new value and call `commit`
    on our `updateUser` mutation. Go back to your browser and reload the page; make
    sure you have the dummy Mockoon API running so that our Axios calls work and check
    out the results:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在制作副本之后，我们将属性设置为新值，并在我们的`updateUser`突变上调用`commit`。返回浏览器并重新加载页面；确保你的虚拟Mockoon
    API正在运行，这样我们的Axios调用才能正常工作并查看结果：
- en: '![](assets/3f665a06-5041-4f63-bb28-f51a7f653e4a.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3f665a06-5041-4f63-bb28-f51a7f653e4a.png)'
- en: That's it! With these few changes to our application, we have successfully made
    it so that not only do we have global state ruling over our form, but we also
    leverage the flexibility and power of Vuelidate to hook into the global state
    directly.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！通过对我们应用程序的这些小改动，我们成功地使全局状态不仅控制我们的表单，而且还利用了Vuelidate的灵活性和强大功能，直接连接到全局状态。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have acquired the necessary skills to set up, create, and
    use Vuex as a global state pattern and library. You also learned how to hook up
    Vuelidate with Vuex so that your validation is directly connected to your global
    state.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经掌握了设置、创建和使用Vuex作为全局状态模式和库所需的技能。您还学会了如何将Vuelidate与Vuex连接起来，以便您的验证直接与全局状态连接。
- en: In the next chapter, we are going for the final stretch—how to turn all of what
    we have done, and our form, into a fully schema-driven form.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进入最后阶段——如何将我们所做的一切以及我们的形式转化为完全基于模式驱动的形式。
