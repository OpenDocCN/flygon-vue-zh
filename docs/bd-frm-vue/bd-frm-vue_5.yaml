- en: Input Validation with Vuelidate
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vuelidate进行输入验证
- en: In production-ready forms, validating user input is a must. Even though, on
    the server side, applications should double-check all the data that is passed
    to them, also pre-validating data on the frontend should be a mandatory practice
    for any experienced developer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产就绪的表单中，验证用户输入是必须的。即使在服务器端，应用程序也应该对传递给它们的所有数据进行双重检查，同时在前端对数据进行预验证应该是任何有经验的开发人员的强制性实践。
- en: In this chapter, we are going to look at a very well-known and powerful library
    for form validation, Vuelidate. You will learn how to use this library in your
    projects, and you will be able to successfully validate user input with it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将看一下一个非常著名和强大的表单验证库Vuelidate。您将学习如何在项目中使用这个库，并且能够成功地用它来验证用户输入。
- en: Thankfully, in Vue, we have a few different options for third-party libraries,
    such as Vuelidate, VeeValidate, and even Vuetify has its own validation methods.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 值得庆幸的是，在Vue中，我们有一些不同的选项可以选择第三方库，比如Vuelidate、VeeValidate，甚至Vuetify都有自己的验证方法。
- en: In this chapter, we will be covering Vuelidate. Ranging from its installation
    to the creation of rules and applying them to our form inputs, and using the error
    state to inform our users of a problem.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖Vuelidate。从安装到创建规则并将其应用于我们的表单输入，以及使用错误状态来通知用户存在问题。
- en: 'This chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Installing dependencies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: Creating validation rules
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建验证规则
- en: Moving validation into our custom inputs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将验证移入我们的自定义输入
- en: Adding the final touches
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加最后的修饰
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code for this chapter can be found in the following GitHub repository:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在以下GitHub存储库中找到：
- en: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter05](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter05).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter05](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter05)。'
- en: 'Check out the following video to see the code in action:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码是如何运行的：
- en: '[http://bit.ly/2VJIL8E](http://bit.ly/2VJIL8E)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2VJIL8E](http://bit.ly/2VJIL8E)'
- en: Installing dependencies
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: 'Let''s start by installing Vuelidate in our project as a dependency, and then
    we are going to use it for validation. Follow these steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将Vuelidate作为一个依赖项安装到我们的项目中，然后我们将用它进行验证。按照以下步骤进行：
- en: 'Open up the Terminal and execute the following command:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once the library has been installed, we have to import it into `main.js` and
    use it as a plugin, so that it is globally available to all our components.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦库被安装，我们必须将其导入到`main.js`中并将其用作插件，以便它在全局范围内对所有组件都可用。
- en: 'Add the following code to `main.js`, after the code that imports `Vue` and
    `App`:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.js`中添加以下代码，放在导入`Vue`和`App`的代码之后：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that Vuelidate has been installed and is now part of our project dependencies,
    we are ready to make it do some of the heavy lifting. In the next section, we
    are going to create our validation rules.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Vuelidate已经安装并成为我们项目依赖的一部分，我们准备让它承担一些繁重的工作。在下一节中，我们将创建我们的验证规则。
- en: Creating validation rules
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建验证规则
- en: 'When we added Vuelidate to our project through `Vue.use`, the library added
    a new reserved property that we can use on our components: `validations`.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过`Vue.use`将Vuelidate添加到我们的项目中时，该库会在我们的组件上添加一个新的保留属性：`validations`。
- en: This property is added onto the configuration object for the component, alongside
    `data()`, `computed`, and so on. It will also be an object that holds a property
    of its own for each input that we want to validate.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性被添加到组件的配置对象上，与`data()`、`computed`等一起。它也将是一个对象，为我们想要验证的每个输入保留一个属性。
- en: Let's create this property and set up a new input, without a custom component
    wrapper to test. Once we understand the basics, we can work on translating all
    of this into our `BaseInput` and `BaseSelect` components.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建这个属性并设置一个新的输入，没有自定义组件包装器进行测试。一旦我们理解了基础知识，我们就可以开始将所有这些内容翻译成我们的`BaseInput`和`BaseSelect`组件。
- en: 'Follow these steps in order to create validation rules:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建验证规则：
- en: 'Create a new `<input>` form below the `telephone` object of `BaseInput` in
    `App.vue`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`中的`BaseInput`的`telephone`对象下面创建一个新的`<input>`表单：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Remember to add this new property, `website`, to the `form` object of `data()`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记得将这个新属性`website`添加到`data()`的`form`对象中：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, let's go and actually create a `validations` property; for now, we will
    only add the `form.website` validations.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实际创建一个`validations`属性；现在，我们只会添加`form.website`的验证。
- en: 'Place it on the top level of the `component` object, at the same level as your
    `data()` and computed properties:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其放置在`component`对象的顶层，与您的`data()`和计算属性处于同一级别：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For this particular field, we want to make sure that we validate that the input
    that the user provides, is a valid URL. In Vuelidate, we have several different
    built-in validators that we can use out of the box. A complete list can be found
    at [https://vuelidate.netlify.com/#sub-builtin-validators](https://vuelidate.netlify.com/#sub-builtin-validators).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的字段，我们希望确保验证用户提供的输入是一个有效的URL。在Vuelidate中，我们有几个内置的验证器可以直接使用。完整列表可以在[https://vuelidate.netlify.com/#sub-builtin-validators](https://vuelidate.netlify.com/#sub-builtin-validators)找到。
- en: In order to validate that the input is a valid URL, we have the URL validator.
    But, in order for us to add it to our website's `validators` object, we have to
    import it first. Vuelidate allows us to import only the validators that we are
    actually going to be using; that way, we can ensure that our deployed code stays
    smaller.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证输入是否为有效的URL，我们有URL验证器。但是，为了将其添加到我们网站的`validators`对象中，我们必须首先导入它。Vuelidate允许我们只导入我们实际要使用的验证器；这样，我们可以确保我们部署的代码保持较小。
- en: 'Add the following import statement to `App.vue`, near the other imports:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`中的其他导入附近添加以下导入语句：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have imported the statement, we can finally add it to the `validations.website`
    object:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经导入了语句，我们最终可以将其添加到`validations.website`对象中：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That's enough of setting up our rules. Remember the new `<input>` form that
    we created earlier to hold `v-model="form.website"`? We're going to need to make
    some adjustments to the way that `v-model` is set up, in order for Vuelidate to
    take charge of the validation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好规则就够了。记得我们之前创建的新的`<input>`表单来保存`v-model="form.website"`吗？我们需要对`v-model`的设置进行一些调整，以便Vuelidate负责验证。
- en: 'Apart from the `validations` property that we used earlier to set up our rules,
    Vuelidate gives us access to a new property inside the component instance: `$v`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们之前用来设置规则的`validations`属性之外，Vuelidate还为我们在组件实例内部提供了一个新属性：`$v`。
- en: '`$v` is a special object that holds a copy of our validation structure. Among
    other things, a notable trait is that it has a `$model` property for each one
    of the elements that we added to `validations`. Vuelidate will become an *intermediary*
    model for us, and in turn, it will take care of actually binding to our `form.website`
    property within `data()`, automatically.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`$v`是一个特殊的对象，它保存了我们验证结构的副本。除其他事项外，一个显著的特点是，它为我们添加到`validations`中的每个元素都有一个`$model`属性。Vuelidate将成为我们的*中介*模型，并且反过来，它将自动绑定到我们`data()`中的`form.website`属性。'
- en: 'Let''s look at this in practice:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看实际操作中是怎样的：
- en: 'Update the `<input>` website element to use the new `v-model` format that Vuelidate
    expects. Also, we are going to interpolate the `$v` object below it, so that you
    can see more clearly what''s happening behind the scenes, as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`<input>`网站元素，使用Vuelidate期望的新的`v-model`格式。此外，我们将在其下插入`$v`对象，以便您可以更清楚地看到幕后发生了什么，如下所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Go back to your browser and take a look at the structure of the `$v` object,
    before you type anything in your new form field.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到你的浏览器，看看`$v`对象的结构，在你在新的表单字段中输入任何内容之前。
- en: The first thing to pay special attention to is the `form.website` object. Inside
    this object, Vuelidate will keep the validation state of this input. The `$model`
    property will hold the user's input, just as we told `v-model` to do. The `$error`
    property is the one that will actually toggle a Boolean value, and will let us
    know if there was an error in the input.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要特别注意的第一件事是`form.website`对象。在此对象内部，Vuelidate将保持此输入的验证状态。`$model`属性将保存用户的输入，就像我们告诉`v-model`要做的那样。`$error`属性实际上将切换布尔值，并且会告诉我们输入是否有错误。
- en: Try typing some random gibberish in the field and observe the properties that
    get updated. The `$error` property will update to `true`, to indicate that there
    is an error. The `url` property, which is directly tied to the URL rule, will
    switch to `false`, to indicate that the URL validation condition is not being
    met.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在字段中输入一些随机的胡言乱语，并观察更新的属性。`$error`属性将更新为`true`，表示存在错误。与URL规则直接关联的`url`属性将切换为`false`，表示未满足URL验证条件。
- en: 'Let''s add some CSS binding onto `<input>`, in order to visually display that
    something is not passing validation on our input:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`<input>`上添加一些CSS绑定，以便在我们的输入上直观显示出未通过验证的情况：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Try this in your browser before we go into a further explanation. Try typing
    a valid URL, such as [http://google.com](http://google.com), and notice how the
    input changes to reflect your changes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步解释之前，请在浏览器中尝试一下。尝试输入一个有效的URL，例如[http://google.com](http://google.com)，并注意输入如何反映您的更改。
- en: The `:class` binding is a way to add classes conditionally to any HTML element
    in Vue. In the type of syntax that we are using here, an object, it allows us
    to set up a key-value pair, in which the key defines the class that we want to
    be toggled, for example, `is-valid`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`:class`绑定是一种在Vue中有条件地向任何HTML元素添加类的方法。在我们这里使用的语法类型中，它允许我们设置一个键值对，其中键定义了我们要切换的类，例如`is-valid`。'
- en: The value is a JavaScript condition that will be evaluated, in order to determine
    whether or not the class should be applied. These conditions are reactive, and
    will be re-executed every time the dependencies of the condition change.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该值是一个将被评估的JavaScript条件，以确定是否应该应用该类。这些条件是响应式的，并且每当条件的依赖项发生变化时，将被重新执行。
- en: In our example, `is-valid` will be toggled *on*, whenever there is no `$error` and
    the input is `$dirty`. If you're wondering why we have to check against `$dirty`
    as well, try removing that part of the condition and then reload your browser.
    You'll notice right away that the green border and checkmark are present on the
    input, even if the element doesn't have any value in it. The way we determine
    whether `<input>` has been modified by the user at any point is through the `$dirty`
    property; in this case, it makes sense from a UX perspective to not show the valid
    visual queues until there's actually some input there.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，只要没有`$error`并且输入是`$dirty`，`is-valid`就会被切换为*on*。如果你想知道为什么我们还要检查`$dirty`，请尝试删除条件的这一部分，然后重新加载浏览器。您会立即注意到，即使元素中没有任何值，输入上也会出现绿色边框和复选标记。我们确定`<input>`是否在任何时候被用户修改的方式是通过`$dirty`属性；在这种情况下，从用户体验的角度来看，直到实际有一些输入时才显示有效的视觉提示是有意义的。
- en: In the case of `is-invalid`, we are checking to see if there are any `$errors`
    present in the field, and setting the field up with a nice red border and an x
    icon.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`is-invalid`的情况下，我们正在检查字段中是否存在任何`$errors`，并使用漂亮的红色边框和x图标设置字段。
- en: Now that we have some basic rules in place, let's move on to the next section,
    where we will learn how to incorporate all of this into our custom components.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一些基本规则，让我们继续下一节，在那里我们将学习如何将所有这些内容合并到我们的自定义组件中。
- en: Moving validation into our custom inputs
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将验证移入我们的自定义输入中
- en: The amazing thing about having your own custom components is that you can craft
    them in any way you like. For this chapter, we're going to add support for both
    a valid and an invalid status to our components. The main validation logic will
    still be held by the parent, `App.vue`, as it is the containing component that
    holds our form.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有自定义组件的惊人之处在于您可以以任何您喜欢的方式来打造它们。在本章中，我们将为我们的组件添加对有效和无效状态的支持。主要的验证逻辑仍将由父组件`App.vue`持有，因为它是包含表单的组件。
- en: 'Follow these steps to add validations:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加验证：
- en: 'First, let''s add new rules for each of our inputs. Add the following to the
    `validations` property:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们为每个输入添加新的规则。将以下内容添加到`validations`属性中：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Don''t forget to update your import statement to bring in the new validators
    that we are now using, as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记更新您的导入语句，以引入我们现在使用的新验证器，如下所示：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s go over the new validators:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看新的验证器：
- en: '`alpha`: This will restrict the field to only alpha-numeric characters.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alpha`：这将限制字段只能包含字母数字字符。'
- en: '`required`: This field makes the field required; it is invalid if there is
    no value.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`required`：此字段使字段成为必填项；如果没有值，则无效。'
- en: '`email`: This field ensures that the input holds a valid email format.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`：此字段确保输入保持有效的电子邮件格式。'
- en: For the `telephone` field, we're going to do some custom validation, because
    this field is masked to have a specific format, `(###)###-####`, and we need to
    resort to writing our own validation function.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`telephone`字段，我们将进行一些自定义验证，因为该字段被掩码为特定格式`(###)###-####`，我们需要编写自己的验证函数。
- en: In this case, we're calling the validator, `validPhone`, and it is a function
    that returns a Boolean value. This Boolean is calculated by matching the phone
    against a regular expression and assuring that it is not null; that is, that it
    does, in fact, have a match.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们正在调用验证器`validPhone`，它是一个返回布尔值的函数。这个布尔值是通过将电话与正则表达式进行匹配并确保它不为空来计算的；也就是说，它确实有一个匹配项。
- en: Now that we have all our `validations` in place, we have to update our `App.vue`
    template. Our `BaseInput` components and the `BaseSelect` component need to have
    `v-model` updated, so that it points to the Vuelidate model instead of our local
    state. Also, we need to update our website input to a full `BaseInput` component.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将所有的`validations`放在了适当的位置，我们需要更新我们的`App.vue`模板。我们的`BaseInput`组件和`BaseSelect`组件需要更新`v-model`，以便它指向Vuelidate模型而不是我们的本地状态。此外，我们需要将我们的网站输入更新为完整的`BaseInput`组件。
- en: 'Make the following changes to your code; we are updating `v-model` and the
    input types:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对您的代码进行以下更改；我们正在更新`v-model`和输入类型：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In order for our custom components to display the correct CSS classes, we are
    going to add a new prop to them called `validator`, and we will pass the reference
    to the Vuelidate object's prop that matches this particular element.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的自定义组件显示正确的CSS类，我们将为它们添加一个名为`validator`的新属性，并将引用传递给与特定元素匹配的Vuelidate对象的prop。
- en: 'Open `BaseInput.vue` and create the `validator` property, as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BaseInput.vue`并创建`validator`属性，如下所示：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the `validator` method for the property, we are going to check that the `validator` object
    that got passed in as a property has a `$model` property in it (that is, `validator.$model`),
    which is `true` for all of the field props of Vuelidate. That way, we can ensure
    that we have access to the properties that we need.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在属性的“验证器”方法中，我们将检查作为属性传递的“验证器”对象中是否有一个“$model”属性（即“验证器.$model”），这对于Vuelidate的所有字段属性都是true。这样，我们可以确保我们可以访问我们需要的属性。
- en: Next, let's bring over the `:class` binding that we had before on our `<input>`
    element, but we will make some slight adjustments, to account for this being a
    `component` property.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将之前在<input>元素上的:class绑定带过来，但我们会做一些小的调整，以适应这是一个组件属性。
- en: 'Add the following to the `<input>` element inside `BaseInput.vue`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到BaseInput.vue中的<input>元素：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Since `validator` is not a required prop on our component, we have to double-check
    that the condition that is actually set before checking its `$error` and `$dirty`
    properties.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于验证器不是我们组件上的必需属性，我们必须再次检查实际设置的条件，然后再检查它的$error和$dirty属性。
- en: 'Finally, go back to `App.vue` and add the `:validator` attribute to all of
    our `BasicInput` elements:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，回到App.vue并为所有的BasicInput元素添加:validator属性：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Go back to your browser and play around with the inputs, now that they are all
    being validated behind the scenes by Vuelidate!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 回到你的浏览器，玩弄一下输入框，现在它们都在后台由Vuelidate进行验证！
- en: Whew, that was quite a bit of information—grab yourself a break and some avocado
    toast; you deserve it! In the next section, we are going to make some final changes
    to our form, to `BaseSelect` , and to our `onSubmit` method, so that we can wrap
    things up.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，这是相当多的信息 - 休息一下，吃点鳄梨土司；你值得拥有！在下一节中，我们将对我们的表单、BaseSelect和onSubmit方法进行一些最终的更改，以便我们可以结束这一切。
- en: Adding the final touches
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加最后的修饰
- en: There are a couple more things that we need to do before we can close off this
    chapter. First of all, let's take care of `BaseSelect`; it still needs a `validator`
    property and some `:class` bindings.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，还有一些事情需要做。首先，让我们处理BaseSelect；它仍然需要一个验证器属性和一些:class绑定。
- en: 'Follow these steps to find out how we can do this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤找出我们如何做到这一点：
- en: 'First, add the `validator` prop in `BaseSelect.vue`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在BaseSelect.vue中添加验证器属性：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, let's add the `:class` binding; except here, we're not going to check against
    `$dirty`, because we don't have an initial empty value.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加:class绑定；但这里，我们不会根据$dirty进行检查，因为我们没有初始空值。
- en: 'Add the following code to the `<select>` element:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到<select>元素中：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that the component is ready, go back to `App.vue` and update our `BaseSelect`
    element with its own `:validator` attribute:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在组件准备好了，回到App.vue并更新我们的BaseSelect元素，加上它自己的:validator属性：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Go back to your browser and verify that the element is behaving as expected.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到你的浏览器，验证元素是否按预期行为。
- en: Another thing that we shouldn't forget to change is our `onSubmit` method on
    `App.vue`. Right now, we are using a `computed` property that is doing a very
    poor job of checking the validity of our form. Let's fix this by leveraging some
    more of Vuelidate's power to check whether our form is ready to submit. To do
    this, let's delete our `formIsValid` `computed` property first.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件我们不应忘记改变的事情是App.vue上的onSubmit方法。现在，我们正在使用一个计算属性，它在检查表单的有效性方面做得很差。让我们通过利用Vuelidate的更多功能来检查我们的表单是否准备好提交来解决这个问题。为了做到这一点，让我们首先删除我们的formIsValid计算属性。
- en: Vuelidate has an `$invalid` property on the root of the `$v` object, which we
    can check to see whether the form is ready for submission. We are going to use
    this in a minute for our `onSubmit` method.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Vuelidate在`$v`对象的根部有一个`$invalid`属性，我们可以检查它来查看表单是否准备好提交。我们将在下一分钟内用于我们的`onSubmit`方法。
- en: 'Delete the `formIsValid` `computed` property completely:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全删除`formIsValid` `computed`属性：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: By default, all forms start out as having an `$invalid` state, because Vuelidate
    triggers its validations when the user `$touches` and modifies the input fields.
    We need to make some slight adjustments in order to accommodate this behavior
    with our Submit button.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有表单最初都处于`$invalid`状态，因为Vuelidate在用户`$touches`并修改输入字段时触发其验证。我们需要进行一些微调以适应我们的提交按钮与此行为的兼容性。
- en: 'Change the button''s `:disabled` attribute first, in order to check against
    `$error`, instead of our old `computed` property:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先更改按钮的`:disabled`属性，以便根据`$error`而不是我们旧的`computed`属性进行检查：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, let''s modify the `onSubmit` method to both force the `$touch` method
    of all the inputs (and to trigger the validations on all of them), and to check
    afterward whether the form is actually valid and ready for submitting:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们修改`onSubmit`方法，强制执行所有输入的`$touch`方法（并触发所有输入的验证），然后检查表单是否实际上是有效的并准备好提交：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Go back to your browser and reload the window to clear the inputs. Without typing
    anything, click on the Submit button. You will see that the `$v.$touch()` method
    will trigger and the invalid inputs (such as those that are required, for example)
    will turn to red to indicate that there is a problem.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到您的浏览器并重新加载窗口以清除输入。不输入任何内容，点击提交按钮。您会看到`$v.$touch()`方法将触发，无效的输入（例如必填项）将变成红色，表示存在问题。
- en: 'In the following screenshot, you can see how `validator` is working, and how
    it is visually confirming to the user, what is happening:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，您可以看到`validator`是如何工作的，以及它如何直观地向用户确认发生了什么：
- en: '![](assets/11fd20c9-49ef-4626-893d-e6b33dfd20b7.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/11fd20c9-49ef-4626-893d-e6b33dfd20b7.png)'
- en: That's it! Vuelidate is a fantastic tool when it comes to form validation—it
    is super flexible, and allows for hooking into external data sources such as Vuex,
    which we will see in the next chapter.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！当涉及到表单验证时，Vuelidate是一个很棒的工具——它非常灵活，并允许连接到外部数据源，比如Vuex，我们将在下一章中看到。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned how to add Vuelidate as a dependency to your
    Vue project, as well as acquiring the skills to set up and manage form validation
    on regular inputs and on custom components. In the next chapter, we are going
    to take things one step further and look at global state management with—*drum
    roll*—Vuex!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学会了如何将Vuelidate作为Vue项目的依赖项，并获得了在常规输入和自定义组件上设置和管理表单验证的技能。在下一章中，我们将更进一步，看看全局状态管理——*鼓声*——Vuex！
