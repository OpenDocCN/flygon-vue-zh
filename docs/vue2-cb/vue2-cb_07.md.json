["```js\n<div id=\"app\">\n\n  <p>{{greeting}}</p>\n\n</div>\n\n```", "```js\nnew Vue({\n\n  el: '#app',\n\n  data: {\n\n    greeting: 'Hello World!'\n\n  }\n\n})\n\n```", "```js\ndescribe('my app', () => {\n\n  it('should say Hello World', () => {\n\n    expect(document.querySelector('p').innerText)\n\n      .toContain('Hello World')\n\n  })\n\n})\n\n```", "```js\nexpect(document.querySelector('p').innerText)\n\n  .toContain('Hello World')\n\n```", "```js\nit('should have an header that says `Welcome`', () => {\n\n  expect(document.querySelector('h1').innerText)\n\n    .toContain('Welcome')\n\n})\n\n```", "```js\n<div id=\"app\">\n\n  <h1>Welcome</h1>\n\n  <p>{{greeting}}</p>\n\n</div>\n\n```", "```js\n{\n\n  \"name\": \"my-vue-project\",\n\n  \"version\": \"1.0.0\"\n\n}\n\n```", "```js\nnpm install --save-dev vue karma jasmine karma-jasmine karma-chrome-launcher\n\n```", "```js\n./node_modules/karma/bin/karma init\n\n```", "```js\n...    \n\n    // list of files / patterns to load in the browser \n\nfiles:\n\n [ \n\n'node_modules/vue/dist/vue.js'\n\n **,** \n\n'*.js' \n\n ],\n\n... \n\n```", "```js\nconst myApp = {\n\n  template: `\n\n    <div>\n\n      <p>{{greetings}}</p>\n\n    </div>\n\n  `,\n\n  data: {\n\n    greetings: 'Hello World'\n\n  }\n\n}\n\n```", "```js\ndescribe('my app', () => {\n\n  beforeEach(() => {\n\n    document.body.innerHTML = `\n\n      <div id=\"app\"></div>\n\n    `\n\n    new Vue(myApp)\n\n      .$mount('#app')\n\n  })\n\n  it('should say Hello World', () => {\n\n    expect(document.querySelector('p').innerText)\n\n      .toContain('Hello World')\n\n  })\n\n})\n\n```", "```js\n./node_modules/karma/bin/karma start\n\n```", "```js\nbeforeEach(() => {\n\n  document.body.innerHTML = `\n\n    <div id=\"app\"></div>\n\n  `\n\n  new Vue(window.myApp)\n\n    .$mount('#app')\n\n})\n\n```", "```js\n...\n\n\"version\": \"1.0.0\",\n\n  \"scripts\": {\n\n    \"test\": \"./node_modules/karma/bin/karma start\"\n\n  },\n\n\"devDependencies\": {\n\n...\n\n```", "```js\nnpm install -g karma\n\n```", "```js\n...\n\n\"version\": \"1.0.0\",\n\n  \"scripts\": {\n\n    \"test\": \"karma start\"\n\n  },\n\n\"devDependencies\": {\n\n...\n\n```", "```js\nnpm install --save-dev vue karma jasmine karma-jasmine karma-chrome-\n\n   launcher\n\n```", "```js\n./node_modules/karma/bin/karma init\n\n```", "```js\ndescribe('my app', () => {\n\n  let vm\n\n  beforeEach(() => {\n\n    vm = new Vue({\n\n      template: `\n\n        <div>\n\n          <p>{{greetings}}</p>\n\n          <button @click=\"toItalian\">\n\n            Translate to Italian\n\n          </button>\n\n        </div>\n\n      `,\n\n      data: {\n\n        greetings: 'Hello World!'\n\n      },\n\n      methods: {\n\n        toItalian () {\n\n          this.greetings = 'Ciao Mondo!'\n\n        }\n\n      } \n\n    }).$mount()\n\n  })\n\n})\n\n```", "```js\nit(`should greet in Italian after\n\n  toItalian is called`, () => {\n\n})\n\n```", "```js\nit(`should greet in Italian after\n\n    toItalian is called`, () => {\n\n vm.toItalian()\n\n})\n\n```", "```js\nit(`should greet in Italian after\n\n    toItalian is called`, () => {\n\n  vm.toItalian()\n\n expect(vm.greetings).toContain('Ciao Mondo')\n\n})\n\n```", "```js\nit('should greet in English', () => {\n\n  expect(vm.greetings).toContain('Hello World')\n\n})\n\n```", "```js\ndescribe('my app', () => {\n\n  let vm\n\n  beforeEach(() => {\n\n    vm = new Vue({\n\n      template: '<div>{{greetings}}</div>',\n\n      data: {\n\n        greetings: 'Hello World'\n\n      }\n\n    })\n\n  })\n\n})\n\n```", "```js\nbeforeEach(() => {\n\n    vm = new Vue({\n\n      template: '<div>{{greetings}}</div>',\n\n      data: {\n\n        greetings: 'Hello World'\n\n      }\n\n    }).$mount()\n\n  })\n\n```", "```js\nit('should say Hello World', () => {\n\n  expect(vm.$el.innerText).toContain('Hello World')\n\n})\n\n```", "```js\nvm = new Vue({\n\n  template: '<div>{{greetings}}</div>',\n\n  data: {\n\n    greetings: 'Hello World'\n\n  }\n\n}).$mount()\n\n```", "```js\ndescribe('my app', () => {\n\n  let vm\n\n  beforeEach(() => {\n\n    vm = new Vue({\n\n      template: `\n\n        <div>\n\n          <input id=\"name\" v-model=\"name\">\n\n          <p>Hello from \n\n            <span id=\"output\">{{name}}</span>\n\n          </p>\n\n        </div>\n\n      `,\n\n      data: {\n\n        name: undefined\n\n      }\n\n    }).$mount()\n\n  })\n\n})\n\n```", "```js\nit('should display Hello from Herman after Herman is typed in the text-box', done => {\n\n  done()\n\n})\n\n```", "```js\nit('should display Hello from Herman after Herman is typed in the text-box', done => {\n\n const outputEl = vm.$el.querySelector('#output')\n\n vm.$el.querySelector('#name').value = 'Herman'\n\n  done()\n\n})\n\n```", "```js\nit('should display Hello from Herman after Herman is typed in the text-box', done => {\n\n  const outputEl = vm.$el.querySelector('#output')\n\n  vm.$el.querySelector('#name').value = 'Herman'\n\n expect(vm.name = 'Herman')\n\n  done()\n\n})\n\n```", "```js\nit('should display Hello from Herman after Herman is typed in the text-box', done => {\n\n  const outputEl = vm.$el.querySelector('#output')\n\n  vm.$el.querySelector('#name').value = 'Herman'\n\n  expect(vm.name = 'Herman')\n\n vm.$nextTick(() => {\n\n    done()\n\n })\n\n})\n\n```", "```js\nit('should display Hello from Herman after Herman is typed in the text-box', done => {\n\n  const outputEl = vm.$el.querySelector('#output')\n\n  vm.$el.querySelector('#name').value = 'Herman'\n\n expect(outputEl.textContent).not.toContain('Herman')\n\n  expect(vm.name = 'Herman')\n\n  vm.$nextTick(() => {\n\n expect(outputEl.textContent).toContain('Herman')\n\n    done()\n\n  })\n\n})\n\n```", "```js\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n  <title>Nightwatch tests</title>\n\n  <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n\n</head>\n\n<body>\n\n  <div id=\"app\">\n\n  </div>\n\n  <script>\n\n  </script>\n\n</body>\n\n</html>\n\n```", "```js\n<div id=\"app\">\n\n  <h2>Welcome to my test page</h2>\n\n  <button @click=\"show = true\">Show</button>\n\n  <p v-show=\"show\">Hello Nightwatch!</p>\n\n</div>\n\n```", "```js\n<script>\n\n  const vm = new Vue({\n\n    el: '#app',\n\n    data: {\n\n      show: false\n\n    }\n\n  })\n\n</script>\n\n```", "```js\nnpm install -g selenium-standalone http-server nightwatch\n\n```", "```js\n{\n\n  \"src_folders\" : [\"tests\"],\n\n  \"test_settings\" : {\n\n    \"default\" : {\n\n      \"desiredCapabilities\": {\n\n        \"browserName\": \"chrome\"\n\n      }\n\n    }\n\n  }\n\n}\n\n```", "```js\nmodule.exports = {\n\n  'Happy scenario' :client => {}\n\n}\n\n```", "```js\nmodule.exports = {\n\n  'Happy scenario' :client => {\n\n    client\n\n .url('http://localhost:8080')\n\n  }\n\n}\n\n```", "```js\nmodule.exports = {\n\n  'Happy scenario' :client => {\n\n    client\n\n      .url('http://localhost:8080')\n\n .waitForElementVisible('#app', 1000)\n\n  }\n\n}\n\n```", "```js\nmodule.exports = {\n\n  'Happy scenario' :client => {\n\n    client\n\n      .url('http://localhost:8080')\n\n      .waitForElementVisible('#app', 1000)\n\n      .assert.containsText('h2', 'Welcome to')\n\n .assert.hidden('p')\n\n  }\n\n}\n\n```", "```js\nmodule.exports = {\n\n  'Happy scenario' :client => {\n\n    client\n\n      .url('http://localhost:8080')\n\n      .waitForElementVisible('#app', 1000)\n\n      .assert.containsText('h2', 'Welcome to')\n\n      .assert.hidden('p')\n\n      .click('button')\n\n .waitForElementVisible('p', 1000)\n\n .assert.containsText('p', 'Nightwatch')\n\n .end();\n\n  }\n\n}\n\n```", "```js\nselenium-standalone install\n\n```", "```js\nselenium-standalone start\n\n```", "```js\nhttp-server .\n\n```", "```js\nnightwatch\n\n```", "```js\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n  <title>7.6</title>\n\n  <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n\n</head>\n\n<body>\n\n  <div id=\"app\">\n\n    <h2>Welcome to my test page</h2>\n\n    <button id=\"showBtn\" @dblclick=\"show = true\">\n\n      Show\n\n    </button>\n\n    <p v-show=\"show\">Hello Nightwatch!</p>\n\n  </div>\n\n</body>\n\n</html>\n\n```", "```js\n<script>\n\n  const vm = new Vue({\n\n    el: '#app',\n\n    data: {\n\n      show: false\n\n    }\n\n  })\n\n</script>\n\n```", "```js\n'Happy scenario' : function (client) {\n\n  client\n\n    .url('http://localhost:8080')\n\n    .waitForElementVisible('#app', 1000)\n\n    .assert.containsText('h2', 'Welcome to')\n\n    .assert.hidden('p')\n\n    .doubleClick('button') // not working\n\n    .waitForElementVisible('p', 1000)\n\n    .assert.containsText('p', 'Nightwatch')\n\n    .end();\n\n }\n\n```", "```js\n'Happy scenario' : function (client) {\n\n  client\n\n    .url('http://localhost:8080')\n\n    .waitForElementVisible('#app', 1000)\n\n    .assert.containsText('h2', 'Welcome to')\n\n    .assert.hidden('p')\n\n    .moveToElement('tag name', 'button', 0, 0)\n\n .doubleClick()\n\n    .waitForElementVisible('p', 1000)\n\n    .assert.containsText('p', 'Nightwatch')\n\n    .end();\n\n }\n\n```", "```js\n<div id=\"app\">\n\n  <p>{{greeting}}</p>\n\n</div>\n\n<div id=\"mocha\">\n\n</div>\n\n```", "```js\nconst vm = new Vue({\n\n  el: '#app',\n\n  data: {\n\n    greeting: 'Hello World!'\n\n  }\n\n})\n\n```", "```js\nmocha.setup('bdd')\n\nchai.should()\n\ndescribe('my app', () => {\n\n  it('should say Hello World', () => {\n\n    vm.$el.innerText.should.contain('Hello World')\n\n  })\n\n})\n\nmocha.run()\n\n```", "```js\n vm.$el.innerText.should.contain('Hello World')\n\n```", "```js\nexpect(vm.$el.innerText).to.contain('Hello World')\n\n```", "```js\nassert.include(vm.$el.innerText,\n\n  'Hello World',\n\n  'Component innerText include Hello World')\n\n```", "```js\n<div id=\"app\">\n\n  <button @click=\"retrieve\">Retrieve Post</button>\n\n  <p v-if=\"post\">{{post}}</p>\n\n</div>\n\n```", "```js\nconst vm = new Vue({\n\n  el: '#app',\n\n  data: {\n\n    post: undefined\n\n  },\n\n  methods: {\n\n  retrieve () {\n\n    axios\n\n      .get('https://jsonplaceholder.typicode.com/posts/1')\n\n      .then(response => {\n\n        console.log('setting post')\n\n        this.post = response.data.body\n\n      })\n\n    }\n\n  }\n\n})\n\n```", "```js\ndescribe('my app', () => {\n\n  let sandbox\n\n  beforeEach(() => sandbox = sinon.sandbox.create())\n\n  afterEach(() => sandbox.restore())\n\n})\n\n```", "```js\ndescribe('my app', () => {\n\n  let sandbox\n\n  beforeEach(() => sandbox = sinon.sandbox.create())\n\n  afterEach(() => sandbox.restore())\n\n  it('should save the returned post body', done => {\n\n    const promise = new Promise(resolve => \n\n resolve({ data: { body: 'Hello World' } })\n\n )\n\n sandbox.stub(axios, 'get').returns(promise)\n\n ...\n\n done()\n\n })\n\n})\n\n```", "```js\ndescribe('my app', () => {\n\n  let sandbox\n\n  beforeEach(() => sandbox = sinon.sandbox.create())\n\n  afterEach(() => sandbox.restore())\n\n it\n\n('\n\nshould save the returned post body'\n\n,\n\n done\n\n =>\n\n {\n\n    const promise = new Promise(resolve => \n\n      resolve({ data: { body: 'Hello World' } })\n\n    )\n\n    sandbox\n\n.\n\nstub\n\n(\n\naxios\n\n,\n\n 'get'\n\n).\n\nreturns\n\n(\n\npromise\n\n)\n\n    vm\n\n.\n\nretrieve\n\n()\n\n    promise.then(() => {\n\n      expect\n\n(\n\nvm\n\n.\n\npost\n\n).\n\ntoEqual\n\n(\n\n'Hello World'\n\n)\n\n      done\n\n()\n\n    }) \n\n  }) \n\n})\n\n```", "```js\n{\n\n \"name\": \"learning-code-coverage\",\n\n \"version\": \"1.0.0\"\n\n}\n\n```", "```js\nnpm install vue karma karma jasmine karma-jasmine karma-coverage karma-chrome-launcher --save-dev\n\n```", "```js\nnpm install -g karma\n\n```", "```js\nkarma init\n\n```", "```js\npreprocessors: {\n\n},\n\n```", "```js\npreprocessors: {\n\n  'myApp.js': ['coverage']\n\n},\n\n```", "```js\nreporters: ['progress', 'coverage'\n\n],\n\n```", "```js\nplugins: [\n\n 'karma-jasmine',\n\n 'karma-coverage',\n\n 'karma-chrome-launcher'\n\n],\n\n```", "```js\nconst myApp = {\n\n  template: `\n\n    <div>\n\n      <p>\n\n        I am thinking of a number between 1 and 20.\n\n      </p>\n\n      <input v-model=\"guess\">\n\n      <p v-if=\"guess\">{{output}}</p>\n\n    </div>\n\n  `\n\n}\n\n```", "```js\ndata: {\n\n  number: getRandomInt(1, 20),\n\n  guess: undefined\n\n}\n\n```", "```js\nfunction getRandomInt(min, max) {\n\n  return Math.floor(Math.random() * (max - min)) + min;\n\n}\n\n```", "```js\ncomputed: {\n\n  output () {\n\n    if (this.guess < this.number) {\n\n      return 'Higher...'\n\n    }\n\n    if (this.guess > this.number) {\n\n      return 'Lower...'\n\n    }\n\n    return 'That's right!'\n\n  }\n\n}\n\n```", "```js\ndescribe('my app', () => {\n\n  let vm\n\n  beforeEach(() => {\n\n    vm = new Vue(myApp).$mount()\n\n    vm.number = 5\n\n  })\n\n  it('should output That's right! if guess is 5', () => {\n\n    vm.guess = 5\n\n    expect(vm.output).toBe('That's right!')\n\n  })\n\n})\n\n```", "```js\nkarma start\n\n```", "```js\nit('should output Lower... if guess is 6', () => {\n\n  vm.guess = 6\n\n  expect(vm.output).toBe('Lower...')\n\n})\n\nit('should output Higher... if guess is 4', () => {\n\n  vm.guess = 4\n\n  expect(vm.output).toBe('Higher...')\n\n})\n\n```"]