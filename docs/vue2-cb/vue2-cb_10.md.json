["```js\nvue init webpack\n\n```", "```js\n<template>\n\n  <div>\n\n    Lightweight hello\n\n  </div>\n\n</template>\n\n```", "```js\n<template>\n\n  <div>\n\n   Massive hello\n\n  </div>\n\n</template>\n\n<script>\n\n/* eslint-disable no-unused-vars */\n\nconst a = `\n\n```", "```js\nyes \"XXX\" | head -n $((10**6)) >> Massive.vue\n\n```", "```js\necho '`</script>' >> Massive.vue\n\n```", "```js\nimport Massive from '@/components/Massive'\n\n...\n\nexport default new Router({\n\n  routes: [\n\n    {\n\n      path: '/',\n\n      name: 'Hello',\n\n      component: Hello\n\n    },\n\n {\n\n path: '/massive',\n\n name: 'Massive',\n\n component: Massive\n\n }\n\n  ]\n\n})\n\n```", "```js\nimport Massive from '@/components/Massive'\n\n```", "```js\nconst Massive = resolve =>\n\n require(['../components/Massive.vue'], resolve)\n\n```", "```js\nroutes:\n\n [ \n\n { \n\npath:\n\n'/'\n\n, \n\nname:\n\n'Hello'\n\n, \n\ncomponent:\n\nHello \n\n }, \n\n {\n\n path:\n\n'/massive'\n\n, \n\nname:\n\n'Massive'\n\n, \n\n component: import('@/components/Massive') \n\n } \n\n] \n\n```", "```js\nvue init webpack\n\n```", "```js\nimport Vue from 'vue'\n\nimport App from './App'\n\nimport router from './router'\n\nimport store from './store'\n\n/* eslint-disable no-new */\n\nnew Vue({\n\n el: '#app',\n\n router,\n\n store,\n\n template: '<App/>',\n\n components: { App }\n\n})\n\n```", "```js\nimport Vue from 'vue'\n\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n\n  state: {\n\n    STAR: 100,\n\n    LAMP: 100,\n\n    DIAM: 100,\n\n    rate: {\n\n      STAR: {\n\n        LAMP: 2\n\n      },\n\n      LAMP: {\n\n        DIAM: 0.5\n\n      }\n\n    }\n\n  }\n\n})\n\nexport default store\n\n```", "```js\n<template>\n\n  <div class=\"market\">\n\n    <h2>{{symbol1}}/{{symbol2}} Stock Exchange</h2>\n\n    <div class=\"buy-sell\">\n\n      <input v-model.number=\"amount\">{{symbol1}}\n\n      <button @click=\"buy\">\n\n        Buy for {{rate*amount}} {{symbol2}}\n\n      </button>\n\n      <button @click=\"sell\">\n\n        Sell for {{rate*amount}} {{symbol2}}\n\n      </button>\n\n    </div>\n\n  </div>\n\n</template>\n\n```", "```js\n<script>\n\nexport default {\n\n  name: 'market',\n\n  data () {\n\n    return {\n\n      amount: 0\n\n    }\n\n  },\n\n  computed: {\n\n    rate () {\n\n      return this.$store.state.rate[this.symbol1][this.symbol2]\n\n    }\n\n  },\n\n  props: ['symbol1', 'symbol2'],\n\n  methods: {\n\n    buy () {\n\n      this.$store.state[this.symbol1] += this.amount\n\n      this.$store.state[this.symbol2] -= this.amount * this.rate\n\n    },\n\n    sell () {\n\n      this.$store.state[this.symbol1] -= this.amount\n\n      this.$store.state[this.symbol2] += this.amount * this.rate\n\n    }\n\n  }\n\n}\n\n</script>\n\n```", "```js\nimport Vue from 'vue'\n\nimport Router from 'vue-router'\n\nimport Market from '@/components/Market'\n\nVue.use(Router)\n\nexport default new Router({\n\n  routes: [\n\n    {\n\n      path: '/',\n\n      redirect: '/STAR/LAMP'\n\n    },\n\n    {\n\n      path: '/:symbol1/:symbol2',\n\n      component: Market,\n\n      props: true\n\n    }\n\n  ]\n\n})\n\n```", "```js\n<template>\n\n  <div id=\"app\">\n\n    <nav>\n\n      <ul>\n\n        <li>\n\n          <router-link to=\"/STAR/LAMP\">STAR/LAMP Market</router-link>\n\n        </li><li>\n\n          <router-link to=\"/LAMP/DIAM\">LAMP/DIAM Market</router-link>\n\n        </li>\n\n      </ul>\n\n    </nav>\n\n    <router-view></router-view>\n\n    <div class=\"balance\">\n\n      Your balance is:\n\n      <ul>\n\n        <li>{{$store.state.STAR}} stars</li>\n\n        <li>{{$store.state.LAMP}} lamps</li>\n\n        <li>{{$store.state.DIAM}} diamonds</li>\n\n      </ul>\n\n    </div>\n\n  </div>\n\n</template>\n\n```", "```js\n<div id=\"app\">\n\n  <div v-for=\"(message, index) in messages\"> \n\n    <p style=\"cursor:pointer\">{{message}}\n\n      <span @click=\"close(index)\">[x]</span>\n\n    </p>\n\n  </div>\n\n  <input v-model=\"newMessage\" @keyUp.enter=\"broadcast\">\n\n  <button @click=\"broadcast\">Broadcast</button>\n\n</div>\n\n```", "```js\nconst store = new Vuex.Store({\n\n  state: {\n\n    messages: []\n\n  },\n\n  mutations: {\n\n    pushMessage (state, message) {\n\n      state.messages.push(message)\n\n    },\n\n    removeMessage (state, index) {\n\n      state.messages.splice(index, 1)\n\n    }\n\n  }\n\n})\n\n```", "```js\nnew Vue({\n\n  store,\n\n  el: '#app',\n\n  data: {\n\n    newMessage: ''\n\n  },\n\n  computed: Vuex.mapState(['messages']),\n\n  methods: {\n\n    broadcast () {\n\n      store.commit('pushMessage', this.newMessage)\n\n      this.newMessage = ''\n\n    },\n\n    close (index) {\n\n      store.commit('removeMessage', index)\n\n    }\n\n  }\n\n})\n\n```", "```js\ncomputed: Vuex.mapState(['messages'])\n\n```", "```js\nmodule.exports = {\n\n  ...\n\n  dev: {\n\n    proxyTable: {\n\n      '/comic': {\n\n        target: 'https://xkcd.com',\n\n        changeOrigin: true,\n\n        pathRewrite: (path, req) => {\n\n          const num = path.split('/')[2]\n\n          return `/${num}/info.0.json`\n\n        }\n\n      }\n\n    },\n\n  ...\n\n```", "```js\nimport Vue from 'vue'\n\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n\n  state: {\n\n    currentPanel: undefined,\n\n    currentImg: undefined,\n\n    errorStack: []\n\n  },\n\n  actions: {},\n\n  mutations: {}\n\n}\n\nexport default store\n\n```", "```js\nactions: {\n\n  goToLastPanel ({ commit }) {\n\n    axios.get(endpoint)\n\n      .then(({ data }) => {\n\n        commit('setPanel', data.num)\n\n        commit('setImg', data.img)\n\n      }).catch(error => {\n\n        commit('pushError', error)\n\n      })\n\n  }\n\n ...\n\n```", "```js\n...\n\nimport axios from 'axios'\n\n...\n\nconst endpoint = '/comic/'\n\n```", "```js\nmutations: {\n\n  setPanel (state, num) {\n\n    state.currentPanel = num\n\n  },\n\n  setImg (state, img) {\n\n    state.currentImg = img\n\n  },\n\n  pushError (state, error) {\n\n    state.errorStack.push(error)\n\n  }\n\n}\n\n```", "```js\n<template>\n\n  <div class=\"hello\">\n\n    <h1>XKCD</h1>\n\n    <img :src=\"currentImg\">\n\n  </div>\n\n</template>\n\n```", "```js\n<script>\n\nimport { mapState } from 'vuex'\n\nexport default {\n\n  name: 'hello',\n\n  computed: mapState(['currentImg']),\n\n  created () {\n\n    this.$store.dispatch('goToLastPanel')\n\n  }\n\n}\n\n</script>\n\n```", "```js\n<template>\n\n  <div id=\"app\">\n\n    <router-view></router-view>\n\n  </div>\n\n</template>\n\n```", "```js\nimport Vue from 'vue'\n\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n\n  modules: {\n\n    brain,\n\n    heart\n\n  }\n\n})\n\nexport default store\n\n```", "```js\nconst heart = {\n\n  state: { loves: undefined },\n\n  mutations: {\n\n    love (state, target) {\n\n      state.loves = target\n\n    },\n\n    unlove (state) {\n\n      state.loves = undefined\n\n    }\n\n  }\n\n}\n\n```", "```js\nconst brain = {\n\n  modules: {\n\n    left: leftLobe,\n\n    right: rightLobe\n\n  }\n\n}\n\n```", "```js\nconst leftLobe = {\n\n  namespaced: true,\n\n  state: { reason: true },\n\n  mutations: {\n\n    toggle (state) { state.reason = !state.reason }\n\n  }\n\n}\n\nconst rightLobe = {\n\n  namespaced: true,\n\n  state: { fantasy: true },\n\n  mutations: {\n\n   toggle (state) { state.fantasy = !state.fantasy }\n\n  }\n\n}\n\n```", "```js\n<img \n\n :class=\"{ off: !$store.state.brain.left.reason }\"\n\n src=\"http://i.imgur.com/n8B6wuY.png\"\n\n @click=\"left\"><img\n\n :class=\"{ off: !$store.state.brain.right.fantasy }\"\n\n src=\"http://i.imgur.com/4BbfVur.png\"\n\n @click=\"right\">\n\n```", "```js\n.off {\n\n  filter: grayscale(100%)\n\n}\n\n```", "```js\nmethods: {\n\n  left () {\n\n    this.$store.commit('left/toggle')\n\n  },\n\n  right () {\n\n    this.$store.commit('right/toggle')\n\n  }\n\n}\n\n```", "```js\n...\n\nlove () {\n\n  this.$store.commit('love', this.partner)\n\n},\n\nclear () {\n\n  this.$store.commit('unlove')\n\n  this.partner = undefined\n\n}\n\n...\n\n```", "```js\n<p>\n\n loves: {{$store.state.heart.loves}}</p>\n\n<input v-model=\"partner\" @input=\"love\">\n\n<button @click=\"clear\">Clear</button>\n\n```", "```js\nconst leftLobe = {\n\n  namespaced: true,\n\n  state: { reason: true },\n\n  mutations: {\n\n    toggle (state) {\n\n      // here state is the left lobe state\n\n      state.reason = !state.reason\n\n    }\n\n  }\n\n}\n\n```", "```js\n{\n\n  \"getters\":{},\n\n  \"state\":{\n\n    \"reason\":true\n\n  },\n\n  \"rootGetters\":{},\n\n  \"rootState\":{\n\n    \"brain\":{\n\n      \"left\":{\n\n        \"reason\":true\n\n      },\n\n      \"right\":{\n\n        \"fantasy\":false\n\n      }\n\n    },\n\n    \"heart\":{\n\n      \"loves\": \"Johnny Toast\"\n\n    }\n\n  }\n\n}\n\n```", "```js\nactions: {\n\n  beNerd ({ rootState }) {\n\n    rootState.heart.loves = 'Math & Physics'\n\n  }\n\n}\n\n```", "```js\nimport Vue from 'vue'\n\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n\n  state: {\n\n    bitcoin: 600,\n\n    rate: 1000,\n\n    euro: 600000\n\n  }\n\n})\n\nexport default store\n\n```", "```js\nconst store = new Vuex.Store({\n\n  state: {\n\n    bitcoin: 600,\n\n    rate: 1000\n\n  },\n\n  getters: {\n\n    euro: state => state.bitcoin * state.rate\n\n  }\n\n})\n\n```", "```js\n<template>\n\n  <div>\n\n    <h1>Balance</h1>\n\n    <ul>\n\n      <li>{{$store.state.bitcoin}}\u0e3f\n\n</li>\n\n      <li>{{$store.getters.euro}}&euro;</li>\n\n    </ul>\n\n  </div>\n\n</template>\n\n```", "```js\ngetters\n\n:\n\n{ \n\n ...\n\n  getCatPictures: state => state.pictures.filter(pic => isCat(pic)) \n\n getKittens\n\n:\n\n(\n\nstate\n\n,\n\n getters\n\n)\n\n=\n\n>\n\n{ \n\n return\n\n getters\n\n.\n\ngetCatPictures()\n\n.\n\nfilter\n\n(cat\n\n=\n\n>\n\n !isAdult(cat)\n\n) \n\n } \n\n} \n\n```", "```js\nconst store = new Vuex.Store({\n\n  state: {\n\n    bitcoin: 600,\n\n    rate: 1000\n\n  },\n\n  getters: {\n\n    euro: state => state.bitcoin * state.rate,\n\n    houses: (state, getters) => \n\ngetters.euro() / 150000\n\n})\n\n```", "```js\ngetters: {\n\n  ...\n\n  getWorldWonder: state => nth => state.worldWonders[nth]\n\n}\n\n```", "```js\nconst store = new Vuex.Store({\n\n  state: {\n\n    bitcoin: 600,\n\n    rate: 1000\n\n  },\n\n  getters: {\n\n    euro: state => state.bitcoin * state.rate,\n\n    houses: (state, getters) => averageHousePrice => {\n\n return getters.euro() / averageHousePrice\n\n }\n\n})\n\n```", "```js\nstate: {\n\n  todo: [\n\n    { id: 43, text: 'Buy iPhone', done: false },\n\n    ...\n\n  ],\n\n  archived: [\n\n    { id: 2, text: 'Buy gramophone', done: true },\n\n    ...\n\n  ]\n\n}\n\n```", "```js\nimport Vuex from 'vuex'\n\nimport Vue from 'vue'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n\n  ...\n\n  mutations: {\n\n    ...\n\n    MARK_ITEM_AS_DONE (state, itemId) {\n\n      state.todo.filter(item => {\n\n        return item.id === itemId\n\n      }).forEach(item => {\n\n        item.done = true\n\n      })\n\n      state.archived.filter(item => {\n\n        return item.id === itemId\n\n      }).forEach(item => {\n\n        item.done = true\n\n      })\n\n    }\n\n  }\n\n}) \n\nexport default store\n\n```", "```js\nexport const mutations = { ... }\n\nconst store = new Vuex.Store({ ... })\n\nexport default store\n\n```", "```js\nimport { mutations } from '@/store'\n\n```", "```js\ndescribe('mutations', () => {\n\n  it(`MARK_ITEM_AS_DONE mutation must change the\n\n        done field from false to true for a todo`, () => {\n\n    const state = {\n\n      todo: [\n\n        { id: 43, text: 'Buy iPhone', done: false }\n\n      ],\n\n      archived: [\n\n        { id: 40, text: 'Buy cat', done: false }\n\n      ]\n\n    }\n\n    mutations.MARK_ITEM_AS_DONE(state, 43)\n\n    expect(state.todo[0].done).to.be.true\n\n  })\n\n})\n\n```", "```js\nimport axios from 'axios'\n\nexport const actions = {\n\n  downloadNew ({ commit }) {\n\n    axios.get('/myNewPosts')\n\n      .then(({ data }) => {\n\n        commit('ADD_ITEMS', data)\n\n      })\n\n  }\n\n}\n\n```", "```js\ndescribe('actions', () => {\n\nconst actionsInjector = \n\n  require('inject-loader!@/store/actions')\n\nconst buyHouseTodo = {\n\n  id: 84,\n\n  text: 'Buy house',\n\n  done: true\n\n}\n\nconst actions = actionsInjector({\n\n  'axios': {\n\n    get () {\n\n      return new Promise(resolve => {\n\n        resolve({\n\n          data: [buyHouseTodo]\n\n        })\n\n      })\n\n    }\n\n  }\n\n}).default\n\n}\n\n```", "```js\ndescribe('actions', () => {\n\n  const actionsInjector = \n\n    require('inject-loader!@/store/actions')\n\n    const buyHouseTodo = {\n\n      id: 84,\n\n      text: 'Buy house',\n\n      done: true\n\n    }\n\n    const actions = actionsInjector({\n\n      'axios': {\n\n        get () {\n\n          return new Promise(resolve => {\n\n            resolve({ data: [buyHouseTodo] })\n\n          })\n\n        }\n\n      }\n\n    }).default\n\n    it(`downloadNew should commit ADD_ITEMS\n\n    with the 'Buy house' todo when successful`, done => {\n\n    const commit = (type, payload) => {\n\n      try {\n\n        expect(type).to.equal('ADD_ITEMS')\n\n        expect(payload).to.deep.equal([buyHouseTodo])\n\n        done()\n\n      } catch (error) {\n\n        done(error)\n\n      }\n\n    }\n\n  actions.downloadNew({ commit })\n\n  })\n\n})\n\n```"]