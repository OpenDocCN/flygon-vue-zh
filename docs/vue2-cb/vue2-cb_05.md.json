["```js\n    npm install axios\n\n```", "```js\n<div id=\"app\"> \n\n  <h2>Advice of the day</h2> \n\n  <p>{{advice}}</p> \n\n</div>\n\n```", "```js\nnew Vue({ \n\n  el: '#app', \n\n  data: { \n\n    advice: 'loading...' \n\n  }, \n\n  created () { \n\n    axios.get('http://api.adviceslip.com/advice') \n\n      .then(response => { \n\n        this.advice = response.data.slip.advice \n\n      }) \n\n      .catch(error => { \n\n        this.advice = 'There was an error: ' + error.message \n\n      }) \n\n  } \n\n})\n\n```", "```js\naxios.get('http://api.adviceslip.com/advice')\n\n```", "```js\n.then(response => { \n\n  this.advice = response.data.slip.advice \n\n})\n\n```", "```js\n{ \n\n  \"data\": { \n\n    \"slip\": { \n\n      \"advice\": \"Repeat people's name when you meet them.\", \n\n      \"slip_id\": \"132\" \n\n    } \n\n  }, \n\n  \"status\": 200, \n\n  \"statusText\": \"OK\", \n\n  \"headers\": { \n\n    \"content-type\": \"text/html; charset=UTF-8\", \n\n    \"cache-control\": \"max-age=0, no-cache\" \n\n  }, \n\n  \"config\": { \n\n    \"transformRequest\": {}, \n\n    \"transformResponse\": {}, \n\n    \"timeout\": 0, \n\n    \"xsrfCookieName\": \"XSRF-TOKEN\", \n\n    \"xsrfHeaderName\": \"X-XSRF-TOKEN\", \n\n    \"maxContentLength\": -1, \n\n    \"headers\": { \n\n      \"Accept\": \"application/json, text/plain, */*\" \n\n    }, \n\n    \"method\": \"get\", \n\n    \"url\": \"http://api.adviceslip.com/advice\" \n\n  }, \n\n  \"request\": {} \n\n}\n\n```", "```js\n.catch(error => { \n\n  this.advice = 'There was an error: ' + error.message \n\n})\n\n```", "```js\nThere was an error: Network Error\n\n```", "```js\naxios.get('http://api.adviceslip.com/non-existent-page')\n\n```", "```js\nThere was an error: Request failed with status code 404\n\n```", "```js\n.then(response => { \n\n  this.advice = undefined.hello \n\n})\n\n```", "```js\nThere was an error: Cannot read property 'hello' of undefined\n\n```", "```js\n<div id=\"app\"> \n\n  <form @submit.prevent=\"vueSubmit\"> \n\n    <div> \n\n      <label>Name</label> \n\n      <input type=\"text\" required> \n\n    </div> \n\n    <div> \n\n      <label>Email</label> \n\n      <input type=\"email\" required> \n\n    </div> \n\n    <div> \n\n      <label>Submit</label> \n\n      <button type=\"submit\">Submit</button> \n\n    </div> \n\n  </form> \n\n</div>\n\n```", "```js\nnew Vue({ \n\n  el: '#app', \n\n  methods: { \n\n    vueSubmit() { \n\n      console.info('fake AJAX request') \n\n    } \n\n  } \n\n})\n\n```", "```js\n<input type=\"text\" required>\n\n```", "```js\n<button type=\"submit\" @click.prevent=\"vueSubmit\">Submit</button>\n\n```", "```js\n<button type=\"submit\" @click=\"vueSubmit\">Submit</button>\n\n```", "```js\n<form @submit.prevent=\"vueSubmit\">\n\n```", "```js\n<div id=\"app\"> \n\n  <h3>Write a new post</h3> \n\n  <form> \n\n    <div> \n\n      <label>Title of your post:</label> \n\n      <input type=\"text\" v-model=\"title\"> \n\n    </div> \n\n    <div> \n\n      <label>Write your thoughts for the day</label> \n\n      <textarea v-model=\"body\"></textarea> \n\n    </div> \n\n    <div> \n\n      <button @click.prevent=\"submit\">Submit</button> \n\n    </div> \n\n  </form> \n\n</div>\n\n```", "```js\nnew Vue({ \n\n  el: '#app', \n\n  data: { \n\n    userId: 1, \n\n    title: '', \n\n    body: '' \n\n  } \n\n})\n\n```", "```js\nmethods: { \n\n  submit () { \n\n    const xhr = new XMLHttpRequest() \n\n    xhr.open('post', 'https://jsonplaceholder.typicode.com/posts') \n\n    xhr.setRequestHeader('Content-Type',  \n\n                         'application/json;charset=UTF-8') \n\n    xhr.onreadystatechange = () => { \n\n    const DONE = 4 \n\n    const CREATED = 201 \n\n    if (xhr.readyState === DONE) { \n\n      if (xhr.status === CREATED) { \n\n          this.response = xhr.response \n\n        } else { \n\n          this.response = 'Error: ' + xhr.status \n\n        } \n\n      } \n\n    } \n\n    xhr.send(JSON.stringify({ \n\n      title: this.title, \n\n      body: this.body, \n\n      userId: this.userId \n\n    })) \n\n  } \n\n}\n\n```", "```js\ndata: { \n\n  userId: 1, \n\n  title: '', \n\n  body: '', \n\n response: '...'\n\n}\n\n```", "```js\n<h3>Response from the server</h3> \n\n<pre>{{response}}</pre>\n\n```", "```js\nconst xhr = new XMLHttpRequest()\n\n```", "```js\nxhr.open('post', 'http://jsonplaceholder.typicode.com/posts') \n\nxhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8')\n\n```", "```js\nxhr.onreadystatechange = () => { \n\n  const DONE = 4 \n\n  const CREATED = 201 \n\n  if (xhr.readyState === DONE) { \n\n    if (xhr.status === CREATED) { \n\n      this.response = xhr.response \n\n    } else { \n\n      this.response = 'Error: ' + xhr.status \n\n    } \n\n  } \n\n}\n\n```", "```js\nxhr.send(JSON.stringify({ \n\n  title: this.title, \n\n  body: this.body, \n\n  userId: this.userId \n\n}))\n\n```", "```js\nsubmit () { \n\n  axios.post('http://jsonplaceholder.typicode.com/posts', { \n\n    title: this.title, \n\n    body: this.body, \n\n    userId: this.userId \n\n  }).then(response => { \n\n    this.response = JSON.stringify(response,null,'  ') \n\n  }).catch(error => { \n\n    this.response = 'Error: ' + error.response.status \n\n  }) \n\n}\n\n```", "```js\n<div id=\"app\"> \n\n  <h3>Everest pizza delivery</h3> \n\n  <button @click=\"order\"  \n\n          :disabled=\"inProgress\">Order pizza!</button> \n\n  <span class=\"spinner\" v-show=\"inProgress\">\n\n</span> \n\n  <h4>Pizza wanted</h4> \n\n  <p>{{requests}}</p> \n\n  <h4>Pizzas ordered</h4> \n\n  <span v-for=\"pizza in responses\"> \n\n    {{pizza.id}}:{{pizza.req}} \n\n  </span> \n\n</div>\n\n```", "```js\n@keyframes spin { \n\n  100% {transform:rotate(360deg);} \n\n} \n\n.spinner { \n\n  width: 1em; \n\n  height: 1em; \n\n  padding-bottom: 12px; \n\n  display: inline-block; \n\n  animation: spin 2s linear infinite; \n\n}\n\n```", "```js\nnew Vue({ \n\n  el: '#app', \n\n  data: { \n\n    inProgress: false, \n\n    requests: new Object(null), \n\n    responses: new Object(null), \n\n    counter: 0, \n\n    impatientAxios: undefined \n\n  } \n\n})\n\n```", "```js\ncreated () { \n\n  this.impatientAxios = axios.create({ \n\n    timeout: 3000  \n\n  }) \n\n}\n\n```", "```js\nmethods: { \n\n  order (event, oldRequest) { \n\n    let request = undefined \n\n    if (oldRequest) { \n\n      request = oldRequest \n\n    } else { \n\n      request = { req: '\n\n', id: this.counter++} \n\n   } \n\n   this.inProgress = true \n\n   this.requests[request.id] = request \n\n   this.impatientAxios.get('http://httpstat.us/200') \n\n    .then(response => { \n\n      this.inProgress = false \n\n      this.responses[request.id] = this.requests[request.id] \n\n      delete this.requests[request.id] \n\n    }) \n\n    .catch(e => { \n\n      this.inProgress = false \n\n      console.error(e.message) \n\n      console.error(this.requests.s) \n\n      setTimeout(this.order(event, request), 1000) \n\n    }) \n\n}\n\n```", "```js\n    npm install -g feathers-cli\n\n```", "```js\n    mkdir my-server\n\n    cd my-server\n\n    feathers generate app\n\n```", "```js\n feathers generate service\n\n```", "```js\n    npm start\n\n```", "```js\n<div id=\"app\"> \n\n  <h3>Sticky messages</h3> \n\n  <ol> \n\n    <li v-for=\"message in messages\"> \n\n      <button @click=\"deleteItem(message._id)\">Delete</button> \n\n      <button @click=\"edit(message._id, message.text)\"> \n\n        edit \n\n      </button> \n\n      <input v-model=\"message.text\"> \n\n    </li> \n\n  </ol> \n\n  <input v-model=\"toAdd\"> \n\n  <button @click=\"add\">add</button> \n\n</div>\n\n```", "```js\nnew Vue({ \n\n  el: '#app', \n\n  data: { \n\n    messages: [], \n\n    toAdd: '' \n\n  }, \n\n})\n\n```", "```js\ncreated () { \n\n  axios.get('http://localhost:3030/messages/') \n\n    .then(response => { \n\n      this.messages = response.data.data \n\n    }) \n\n},\n\n```", "```js\nmethods: { \n\n  add () { \n\n    axios.post('http://localhost:3030/messages/', { \n\n      text: this.toAdd \n\n    }) \n\n      .then(response => { \n\n        if (response.status === 201) { \n\n          this.messages.push(response.data) \n\n          this.toAdd = '' \n\n        } \n\n      }) \n\n  } \n\n}\n\n```", "```js\ndeleteItem (id) { \n\n  console.log('delete') \n\n  axios.delete('http://localhost:3030/messages/' + id) \n\n    .then(response => { \n\n      if (response.status < 400) { \n\n        this.messages.splice( \n\n          this.messages.findIndex(e => e.id === id), 1) \n\n      } \n\n    }) \n\n}, \n\nedit (id, text) { \n\n  axios.put('http://localhost:3030/messages/' + id, { \n\n    text \n\n  }) \n\n    .then(response => { \n\n      if (response.status < 400) { \n\n        console.info(response.status) \n\n      } \n\n    }) \n\n}\n\n```", "```js\n<div id=\"app\"> \n\n  <p v-for=\"word in words\">{{word}}</p> \n\n</div>\n\n```", "```js\nnew Vue({ \n\n  el: '#app', \n\n  methods: { \n\n    bottomVisible () { \n\n      const visibleHeight = document.documentElement.clientHeight \n\n      const pageHeight = document.documentElement.scrollHeight \n\n      const scrolled = window.scrollY \n\n      const reachedBottom = visibleHeight + scrolled >= pageHeight \n\n      return reachedBottom || pageHeight < visibleHeight \n\n    } \n\n  } \n\n})\n\n```", "```js\ncreated () { \n\n  window.addEventListener('scroll', () => { \n\n    this.bottom = this.bottomVisible() \n\n  }) \n\n}\n\n```", "```js\ndata: { \n\n  bottom: false, \n\n  words: [] \n\n}\n\n```", "```js\naddWord () { \n\n  axios.get('http://www.setgetgo.com/randomword/get.php') \n\n    .then(response => { \n\n      this.words.push(response.data) \n\n      if (this.bottomVisible()) { \n\n        this.addWord() \n\n      } \n\n    }) \n\n}\n\n```", "```js\nwatch: { \n\n  bottom (bottom) { \n\n    if (bottom) { \n\n      this.addWord() \n\n    } \n\n  } \n\n}\n\n```", "```js\ncreated () { \n\n  window.addEventListener('scroll', () => { \n\n    this.bottom = this.bottomVisible() \n\n  }) \n\n this.addWord()\n\n}\n\n```", "```js\nwatch: { \n\n 'name of sate variable' (newValue, oldValue) { \n\n   ... \n\n  } \n\n}\n\n```", "```js\n<div id=\"app\"> \n\n  <h3>Who's better: Socrates or Plato?</h3> \n\n  <p>Technically, without Plato we wouldn't have<br> \n\n  much to go on when it comes to information about<br> \n\n  Socrates. Plato ftw!</p>\n\n```", "```js\n  <form> \n\n    <label>Write your comment:</label> \n\n    <textarea v-model=\"message\"></textarea> \n\n    <button @click.prevent=\"submit\">Send!</button> \n\n  </form> \n\n  <p>Server got: {{response}}</p> \n\n</div>\n\n```", "```js\nmethods: { \n\n  submit () { \n\n    axios.post('http://jsonplaceholder.typicode.com/comments', \n\n    { \n\n      body: this.message \n\n    }).then(response => { \n\n      this.response = response.data \n\n    }) \n\n  } \n\n}\n\n```", "```js\ndata: { \n\n  message: '', \n\n  response: '...' \n\n}\n\n```", "```js\nnew Vue({ \n\n  el: '#app', \n\n...\n\n```", "```js\nmounted () { \n\n  axios.interceptors.request.use(config => { \n\n    const body = config.data.body.replace(/punk/i, '***') \n\n    config.data.body = body \n\n    return config \n\n  }) \n\n}\n\n```", "```js\naxios.interceptors.request.use(config => { \n\n  const body = config.data.body.replace(/punk/i, '***') \n\n  config.data.body = body \n\n  return config \n\n})\n\n```", "```js\nmethods: { \n\n  sendAllMoney () { \n\n    axios.get('/sendTo/'+this.accountNo) \n\n  } \n\n}\n\n```", "```js\nHello user!\n\nClick here to read the latest news.\n\n```"]