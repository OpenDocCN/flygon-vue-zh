- en: Vue CLI 3 and Routing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue CLI 3和路由
- en: 'In the previous chapter, we saw how to work with some testing suites such as
    Jest and Cypress in Vue. In this chapter, we''ll look at working with vue-router
    and use it with Vue CLI 3\. We''ll look at some practical tasks such as lazy-loading
    components. We''ll look at using the Vue add command to add vue-router and why
    that''s not the best strategy, and steps to take to mitigate it. Understanding
    routing in Vue is beneficial if you want to build larger and more complex apps.
    The following a list of subjects covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何在Vue中使用一些测试套件，比如Jest和Cypress。在本章中，我们将看看如何使用vue-router，并将其与Vue CLI
    3一起使用。我们将看一些实际任务，比如懒加载组件。我们将看看使用Vue add命令添加vue-router的原因以及如何减轻其影响的步骤。如果您想构建更大更复杂的应用程序，了解Vue中的路由是有益的。本章涵盖的主题如下：
- en: Adding a new Vue project with vue-router and vuex
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用vue-router和vuex添加一个新的Vue项目
- en: Configuring preset options through VS Code's command line
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过VS Code的命令行配置预设选项
- en: Understanding vue-router routes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解vue-router路由
- en: Using named routes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命名路由
- en: Adding a dynamic route
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加动态路由
- en: Navigating to a route from the methods option in a Vue instance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Vue实例的方法选项导航到一个路由
- en: Working with nested (child) routes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用嵌套（子）路由
- en: Lazy-loading routes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 懒加载路由
- en: We'll begin by adding a new project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从添加一个新项目开始。
- en: Adding a new Vue project with vue-router and vuex
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vue-router和vuex添加一个新的Vue项目
- en: Let's begin by creating a new folder in our file system. Let's call this folder
    `vueclichapter5`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在文件系统中创建一个新文件夹开始。让我们把这个文件夹叫做`vueclichapter5`。
- en: Open the `vueclichapter5` folder from Windows Explorer, right-click anywhere
    on the whitespace inside the `vueclichapter5` folder, and click on the Git Bash
    here command.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Windows资源管理器中打开`vueclichapter5`文件夹，在`vueclichapter5`文件夹内的空白处右键单击，然后单击“Git Bash
    here”命令。
- en: Once Git Bash opens, type `code .` and press the *Enter* key. This will open
    a brand-new instance of VS Code, with no files or tabs inside other than the welcome
    tab.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Git Bash打开，输入`code .`并按*Enter*键。这将打开一个全新的VS Code实例，除了欢迎标签之外，没有其他文件或选项卡。
- en: 'Next, we''ll be adding a new Vue project right from VS Code''s integrated Terminal.
    To access this Terminal, click on the VS Code window (to get it in focus), and
    press the following shortcut key: *Ctrl* + *`*.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将直接从VS Code的集成终端中添加一个新的Vue项目。要访问这个终端，点击VS Code窗口（使其获得焦点），然后按以下快捷键：*Ctrl*
    + *`*。
- en: We've already mentioned the ***Ctrl* backtick shortcut** earlier in the book.
    As a reminder, the *`* character can be found when you press the key above the
    *Tab* key on your keyboard.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经提到了***Ctrl*反引号快捷键**。作为提醒，*`*字符可以在键盘上按下*Tab*键上方的键时找到。
- en: Using the *Ctrl* + *`* keyboard shortcut will open the Terminal inside VS Code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *`*键盘快捷键将在VS Code中打开终端。
- en: 'Next, we''ll run the `vue create` command with a dot, as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将运行`vue create`命令，后面跟着一个点，如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Doing so will generate a Vue project in the existing folder, that is, it will
    not make a subfolder for our new Vue project, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做将在现有文件夹中生成一个Vue项目，也就是说，它不会为我们的新Vue项目创建一个子文件夹，如下所示：
- en: '![](assets/a8a439f6-4869-42f5-96f3-0939caa5afee.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a8a439f6-4869-42f5-96f3-0939caa5afee.png)'
- en: 'Figure 5.1: Generating a project in the current directory from VS Code''s Terminal'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：从VS Code的终端在当前目录中生成项目
- en: Press the *Y* key to confirm that we'll be generating our project in the current
    directory.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Y*键确认我们将在当前目录中生成我们的项目。
- en: Configuring preset options through VS Code's command line
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过VS Code的命令行配置预设选项
- en: 'Next, we''ll pick the Manually select features option by pressing the down
    arrow key once, followed by the *Enter* key, as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过按一次向下箭头键，然后按*Enter*键来选择手动选择功能选项，如下面的屏幕截图所示：
- en: '![](assets/2bfff656-09c8-4bd2-9eda-27f1c7ade9ff.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2bfff656-09c8-4bd2-9eda-27f1c7ade9ff.png)'
- en: 'Figure 5.2: Generating a project in the current directory from VS Code''s Terminal'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2：从VS Code的终端在当前目录生成一个项目
- en: Adding vue-router and vuex
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加vue-router和vuex
- en: 'Next, we''ll use the down arrow key and the spacebar key to select Router and
    Vuex as additional features for use in our project, as shown in the following
    screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用向下箭头键和空格键来选择Router和Vuex作为我们项目中的附加功能，如下截图所示：
- en: '![](assets/7be8a39d-e27e-4633-9983-18e2ca398eb6.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7be8a39d-e27e-4633-9983-18e2ca398eb6.png)'
- en: 'Figure 5.3: Adding the vue-router and vuex plugins to our project'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：向我们的项目添加vue-router和vuex插件
- en: A prompt will ask us if we want to use the History mode for the router.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个提示会询问我们是否要为路由使用历史模式。
- en: We don't want to use it now, so we'll just type `n` and press *Enter*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在不想使用它，所以我们只需输入`n`并按*Enter*。
- en: Later on in this chapter, we'll discuss what the History mode does and how it
    works.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，我们将讨论历史模式的作用和工作原理。
- en: Adding ESLint and Prettier
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加ESLint和Prettier
- en: 'Another prompt asks us about our linter or formatter preferences. We''ll be
    using ESLint and Prettier as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个提示询问我们关于我们的代码检查器或格式化程序的偏好。我们将使用ESLint和Prettier，如下所示：
- en: '![](assets/29763fc3-ed26-4ecf-893b-d55e05221821.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/29763fc3-ed26-4ecf-893b-d55e05221821.png)'
- en: 'Figure 5.4: Choosing ESLint and Prettier as or linter / formatter configuration'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：选择ESLint和Prettier作为我们的代码检查器/格式化程序配置
- en: Finishing the configuration
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成配置
- en: 'Finally, we''ll accept the default Lint on save feature, and opt to place the
    config for Babel, PostCSS, ESLint, and so on in dedicated config files as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将接受默认的保存时Lint功能，并选择将Babel、PostCSS、ESLint等配置放在专门的配置文件中，如下所示：
- en: '![](assets/93cc85fa-70b7-44ca-916c-597ff4a53ac6.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/93cc85fa-70b7-44ca-916c-597ff4a53ac6.png)'
- en: 'Figure 5.5: Choosing to save configs in dedicated config files'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5：选择将配置保存在专门的配置文件中
- en: Finally the Vue CLI will ask us if we'd like to save this as a preset for future
    projects. We'll say no to this for the time being.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Vue CLI会询问我们是否要将此设置为将来项目的预设。目前我们会选择不保存。
- en: Installing all the plugins for our new project
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的新项目安装所有插件
- en: 'Finally, the Vue CLI installs all the plugins as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Vue CLI会安装所有插件，如下所示：
- en: '![](assets/24449c9c-85df-4486-a99b-3c20096f7935.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/24449c9c-85df-4486-a99b-3c20096f7935.png)'
- en: 'Figure 5.6: Vue CLI installing our project''s plugins'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6：Vue CLI正在安装我们项目的插件
- en: Once this installation is complete, we'll have a working Vue project installed
    with vue-router and vuex, ESLint, and Prettier set up and ready to use.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们将拥有一个已安装vue-router和vuex、ESLint和Prettier设置好并准备使用的Vue项目。
- en: Serving our project from the Vue CLI UI
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Vue CLI UI为我们的项目提供服务
- en: 'Once our project is installed, we could use the `npm run serve` command to
    run it. However, we''ll use the Vue CLI UI for this, so let''s run it with `vue
    ui` as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 项目安装完成后，我们可以使用`npm run serve`命令来运行它。但是，我们将使用Vue CLI UI来运行它，所以让我们按照以下步骤使用`vue
    ui`：
- en: '![](assets/01b17519-548d-468e-a5c2-ca0da636f35d.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/01b17519-548d-468e-a5c2-ca0da636f35d.png)'
- en: 'Figure 5.7: Serving our project via vue UI command from VS Code command line'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7：通过vue UI命令从VS Code命令行中为我们的项目提供服务
- en: As expected, our Vue CLI UI will automatically open in a browser window at `http://localhost:8000/dashboard`.
    At this point, the old project might be loaded in the dashboard, so we need to
    click on the Home icon and import our new `vueclichapter5` project.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，我们的Vue CLI UI将自动在浏览器窗口中打开，网址为`http://localhost:8000/dashboard`。此时，旧项目可能会加载在仪表板中，所以我们需要点击主页图标并导入我们的新`vueclichapter5`项目。
- en: Note that we could have installed a new app using the Vue CLI UI from the very
    beginning, but it is interesting to know that you can switch between the command
    line and the UI without issues.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们本来可以从一开始就使用Vue CLI UI安装新应用，但有趣的是，您可以在命令行和UI之间切换而不会出现问题。
- en: Once the project is loaded, we can click on the Plugins link to see the installed
    plugins. Notice the absence of the Add vue-router and Add vuex buttons. They are
    not present since we've already installed them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 项目加载完成后，我们可以点击插件链接以查看已安装的插件。请注意，缺少`Add vue-router`和`Add vuex`按钮。它们不存在，因为我们已经安装了它们。
- en: Running the serve task from the UI
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从UI中运行serve任务
- en: 'Finally, we''ll click on the Tasks icon to open a list of available tasks,
    then click the serve task to compile and serve our project. Just like before,
    a Run task panel will appear on the right-hand side of the dashboard as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将点击任务图标以打开可用任务列表，然后点击serve任务以编译和提供我们的项目。就像以前一样，运行任务面板将出现在仪表板的右侧，如下所示：
- en: '![](assets/48f3aaff-94ae-4b60-9406-436adceb33a0.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/48f3aaff-94ae-4b60-9406-436adceb33a0.png)'
- en: 'Figure 5.8: Run task for the npm run serve script'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8：运行npm run serve脚本的任务
- en: 'On the preceding screenshot, we can see a zoomed-in portion of the serve task
    screen. Clicking the Run task button will start building the app, and we''ll get
    notified on the Windows Start bar that our app was successfully built. Looking
    at the available tabs, we can see that the current view shows our serve task''s
    dashboard. Clicking on the Output button to the left of the currently active serve
    task''s dashboard button will show us logging information, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们可以看到serve任务屏幕的放大部分。点击运行任务按钮将开始构建应用程序，并且我们将在Windows开始栏上收到通知，我们的应用程序已成功构建。查看可用的选项卡，我们可以看到当前视图显示了我们serve任务的仪表板。点击当前活动的serve任务仪表板按钮左侧的输出按钮将显示日志信息，如下所示：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Of course, the specific port that the `vue-cli-service` will be serving our
    Vue app from will depend on what other ports are already in use. To open our running
    Vue app in the browser, all that is needed now is to click on either the `Local`
    or the `Network` URLs listed in the output log.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`vue-cli-service`将为我们的Vue应用提供服务的特定端口将取决于其他已经在使用的端口。现在，要在浏览器中打开我们正在运行的Vue应用，只需点击输出日志中列出的`Local`或`Network`URL之一即可。
- en: Working with routes in vue-router
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在vue-router中使用路由
- en: In the section that follows, we'll be looking into how routes in vue-router
    work and how to add pages and routes using them. We'll begin by inspecting existing
    routes, and after that we'll be adding additional routes and their corresponding
    components.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将研究vue-router中的路由工作原理，以及如何使用它们添加页面和路由。我们将从检查现有路由开始，然后添加额外的路由和它们对应的组件。
- en: Inspecting the two default routes
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查两个默认路由
- en: 'This will open a familiar starting project with the Vue logo, with a slight
    addition: a link on top to the About page as shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个带有Vue标志的熟悉的起始项目，稍作添加：顶部有一个链接指向关于页面，如下截图所示：
- en: '![](assets/d35aaef5-d3a5-41e4-9077-a0c1385cb1fe.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d35aaef5-d3a5-41e4-9077-a0c1385cb1fe.png)'
- en: 'Figure 5.9: Default navigation of the project with vue-router installed'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9：安装了vue-router的项目的默认导航
- en: 'If you click on the About link, you''ll be greeted with another page that has
    an `h1` tag and inside it, the following text:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击关于链接，您将看到另一个页面，其中有一个`h1`标签，里面是以下文本：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that the route to the About page has a pound sign in front of the page
    name. In our example app, it looks like this: `http://localhost:8082/#/about.`
    How do we get rid of the pound sign? In other words, how to we set the address
    to `http://localhost:8082/about`?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，关于页面的路由在页面名称前面有一个井号。在我们的示例应用程序中，它看起来像这样：`http://localhost:8082/#/about.`我们如何去掉井号？换句话说，我们如何将地址设置为`http://localhost:8082/about`？
- en: 'The answer is simple, we just need to set up our server to always return the
    `index.html` page, and then we''re going to add another setting, the `mode` setting,
    for the vue-router, such as the following: `mode: ''history''`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '答案很简单，我们只需要设置我们的服务器始终返回`index.html`页面，然后我们将添加另一个设置，即vue-router的`mode`设置，如下所示：`mode:
    ''history''`'
- en: You need to add the preceding code right under the `export default new Router({`
    line in `router.js`. Doing this will get rid of the pound symbol.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在`router.js`中的`export default new Router({`行下面添加上述代码。这样做将去掉井号。
- en: Next, we'll inspect the contents of the project that comes preinstalled with
    vue-router and vuex.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查预安装了vue-router和vuex的项目的内容。
- en: Inspecting project files
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查项目文件
- en: 'Go back to VS Code and look at the project structure. You''ll see some differences
    from what we had before. The following is the contents of our `src` folder:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 返回VS Code并查看项目结构。您会看到与以前不同的一些差异。以下是我们`src`文件夹的内容：
- en: '![](assets/9a64b06c-5bcf-4935-8626-096f4a5c7c4b.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9a64b06c-5bcf-4935-8626-096f4a5c7c4b.png)'
- en: 'Figure 5.10: The contents of the src folder with vue-router and vuex pre-installed'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10：带有预安装的vue-router和vuex的src文件夹的内容
- en: 'Inside the `src` folder, we can see a folder that we haven''t seen before:
    the `views` folder, which holds two view files: `Home.vue`, and `About.vue`. In
    the root of our project, we can see some additional files as well: `router.js`,
    `store.js`, `.browserslistrc`, `eslintrc.js`, `postcss.config.js`, and `README.md`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src`文件夹中，我们可以看到一个以前没有见过的文件夹：`views`文件夹，其中包含两个视图文件：`Home.vue`和`About.vue`。在我们项目的根目录中，我们还可以看到一些额外的文件：`router.js`、`store.js`、`.browserslistrc`、`eslintrc.js`、`postcss.config.js`和`README.md`。
- en: 'The `router.js` file is what vue-router uses to set up the paths in our app.
    The `routes` array is an array of objects: one object for a single route. Since
    we have two routes in the default installation, we have two objects inside the
    `routes` array. The `store.js` file is what vuex uses to keep track of our app''s
    state, mutations, and actions; these are all referred to as the **vuex store**.
    The `README.md` file lists common npm commands for use with our app, and the other
    files at the root of our project are configuration files; this convention, at
    this point in our journey through Vue CLI 3, should be expected.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`router.js`文件是vue-router用来设置应用程序中路径的文件。`routes`数组是一组对象：一个对象对应一个路由。由于默认安装中有两个路由，所以`routes`数组中有两个对象。`store.js`文件是vuex用来跟踪我们应用程序的状态、mutations和actions的文件；这些都被称为**vuex
    store**。`README.md`文件列出了与我们的应用程序一起使用的常见npm命令，我们项目根目录中的其他文件都是配置文件；在我们通过Vue CLI
    3的旅程中的这一点上，这应该是可以预期的。'
- en: The contents of main.js
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: main.js的内容
- en: 'Just like we''ve seen before, the `main.js` file inside our `src` folder imports
    all the following dependencies:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们以前看到的那样，`src`文件夹中的`main.js`文件导入了所有以下依赖项：
- en: The Vue library from `node_modules`
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自`node_modules`的Vue库
- en: The root component, `App.vue`
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根组件`App.vue`
- en: The router file to set up vue-router routes
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置vue-router路由的路由器文件
- en: The store file to set up the vuex store
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置vuex store的store文件
- en: The App.vue file and router-link navigation
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: App.vue文件和router-link导航
- en: 'By inspecting the contents of the root component, `App.vue`, we can see that
    the file looks different from before: there is no `script` section!'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查根组件`App.vue`的内容，我们可以看到该文件与以前不同：没有`script`部分！
- en: Also, the template tag inside `App.vue` holds the so-called *navigation components*.
    Each navigation item is enclosed inside the `router-link` tag.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`App.vue`内的模板标签包含所谓的*导航组件*。每个导航项都包含在`router-link`标签内。
- en: Why not use just an anchor tag instead of the `router-link` tag? Because an
    anchor tag would go on and send a server request. With the `router-link` tag,
    this behavior is avoided.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不只使用锚标签而不是`router-link`标签？因为锚标签会继续发送服务器请求。使用`router-link`标签可以避免这种行为。
- en: 'If we inspect the compiled HTML code in the `dist` folder, we''ll see that
    the bundled HTML indeed ends up being an anchor tag, as can be seen in the following
    compiled production code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查`dist`文件夹中编译的HTML代码，我们将看到捆绑的HTML确实最终成为一个锚标签，如下所示在编译的生产代码中所见：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Going back to the `Home.vue` and `About.vue` files inside the `view` folder,
    we can also see the `router-view` tag (below the `div` with the `id` of `nav`).
    This is what actually renders either the `Home view` or the `About view`. The
    component that will be rendered will be determined by whatever is mapped with
    the `to` prop.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`view`文件夹内的`Home.vue`和`About.vue`文件，我们还可以看到`router-view`标签（在具有`id`为`nav`的`div`下方）。这实际上是渲染`Home
    view`或`About view`的地方。将要渲染的组件将由与`to`属性映射的内容确定。
- en: 'Rendering a Vue instance and mounting it into #app'
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染Vue实例并将其挂载到`#app`
- en: 'Finally, a new instance of Vue is called and passed an argument in the form
    of an options object. The object receives the following key-value pairs: `router:
    router`, `store: store`, and `render: h => h(App)`.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，调用一个Vue的新实例，并传递一个选项对象作为参数。该对象接收以下键值对：`router: router`、`store: store`和`render:
    h => h(App)`。'
- en: 'Written in ES5 code, that code would look like the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 用ES5代码编写，该代码看起来如下：
- en: '[PRE4]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Our `main.js` file, is luckily, written in a more modern syntax, so when all
    these things are put together, it looks as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`main.js`文件幸运地采用了更现代的语法，因此当所有这些东西放在一起时，它看起来如下：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The render method will take all the different parts of our app, combine them,
    and get them ready to be mounted. Finally, our Vue app will be mounted into the
    `div` with the `id` of the app inside our `./public/index.html`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染方法将获取我们应用程序的所有不同部分，将它们组合在一起，并准备好挂载。最后，我们的Vue应用程序将被挂载到`./public/index.html`中具有`id`为app的`div`内。
- en: You might notice that our current app's directory doesn't contain a `dist` folder.
    As we've learned in [Chapter 2](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml)*,
    Webpack in Vue CLI 3*, the dist folder is the product of webpack building our
    site. So let's run the build task in our Vue CLI 3 UI next, to see the `dist`
    folder being created and served.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到我们当前应用程序的目录中没有`dist`文件夹。正如我们在[第2章](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml)*中学到的，Vue
    CLI 3中的Webpack*，`dist`文件夹是webpack构建我们网站的产物。因此，让我们接下来在Vue CLI 3 UI中运行构建任务，以查看`dist`文件夹被创建和提供。
- en: Running the build task from the UI
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从UI中运行构建任务
- en: To run the build task from the Vue CLI 3 UI, all we need to do is go to `http://localhost:8000/tasks/`,
    and from there click on Build task, and then click the Run task button.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Vue CLI 3 UI中运行构建任务，我们只需要转到`http://localhost:8000/tasks/`，然后点击`构建任务`，然后点击`运行任务`按钮。
- en: 'The output tab of the build task we ran will log out the following information:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行的构建任务的输出选项卡将记录以下信息：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What are these different JavaScript files inside the `./dist/js/` folder? They
    are the result of webpack bundling our assets from our Vue app's single-file components,
    the router, and the store, into deployment-ready bundles. These bundles are now
    added to the compiled and minified `index.html` page inside our `dist` folder,
    so this is how they end up on our production-ready web page.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`./dist/js/`文件夹中的这些不同的JavaScript文件是什么？它们是webpack将我们的Vue应用程序的单文件组件、路由和存储打包成部署准备的捆绑包的结果。这些捆绑包现在已添加到编译和缩小的`index.html`页面中，位于我们的`dist`文件夹内，因此这就是它们最终出现在我们的生产就绪网页上的方式。'
- en: Finally, let's see our updated app. For that, we'll click on the serve task,
    and stop the task by clicking the Stop task button.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看我们更新后的应用程序。为此，我们将单击serve任务，并通过单击停止任务按钮来停止任务。
- en: Serving the app in production mode from the UI
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从UI中以生产模式提供应用程序
- en: To serve the app in production mode, we need to click on the Parameters button
    inside the Run task panel with the serve task selected.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要以生产模式提供应用程序，我们需要单击serve任务选定的Run任务面板内的参数按钮。
- en: 'Once we click the Parameters button, we''ll see the following dialog:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦单击参数按钮，我们将看到以下对话框：
- en: '![](assets/03355705-9e7e-4f7f-b307-7b7ac114a4a5.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03355705-9e7e-4f7f-b307-7b7ac114a4a5.png)'
- en: 'Figure 5.11: Specifying the env mode in serve task''s parameters dialog inside
    the Vue CLI 3 UI'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11：在Vue CLI 3 UI中serve任务的参数对话框中指定env模式
- en: In the Specify env modesetting, click on the drop-down and select production.
    Save the changes, and you'll see the serve task dashboard again. Now, click on
    the Run task button. Finally, to make sure everything still works, point your
    browser to whatever port your Vue app is being served on. In this example, the
    proper address is `http://localhost:8082/`.  Next, click on the About link.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定env模式设置中，单击下拉菜单，然后选择生产模式。保存更改，然后您将再次看到serve任务仪表板。现在，单击运行任务按钮。最后，为了确保一切仍然正常工作，请将浏览器指向Vue应用程序正在提供的任何端口。在本例中，正确的地址是`http://localhost:8082/`。接下来，单击关于链接。
- en: 'Back in VS Code, change the `About.vue` page''s `h1` tag to the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 回到VS Code，将`About.vue`页面的`h1`标签更改为以下内容：
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the file and see your About page get an HMR update.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并查看您的关于页面是否获得了HMR更新。
- en: Some basics of working with routes
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些处理路由的基础知识
- en: 'Although this book is about Vue CLI 3, we will take this opportunity to quickly
    list some features of vue-router. This is by no means an extensive list: it is
    just a quick overview of certain features you need to be aware:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书是关于Vue CLI 3的，但我们将利用这个机会快速列出一些vue-router的特性。这绝不是一个详尽的列表：它只是对您需要了解的某些特性的快速概述：
- en: Using named routes
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命名路由
- en: Adding a dynamic route
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加动态路由
- en: Navigating to a route from the methods option in a Vue instance
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Vue实例中的方法选项导航到路由
- en: Working with nested (child) routes
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用嵌套（子）路由
- en: Lazy-loading routes
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟加载路由
- en: We'll begin by understanding that the `router-view` tag needs to be nested.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从理解`router-view`标签需要嵌套开始。
- en: The router-view tag needs to be nested
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: router-view标签需要嵌套
- en: 'Before we begin, let''s look at the `App.vue` template tag as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们看一下`App.vue`模板标签，如下所示：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Notice that the `router-view` element (the third line from the bottom), is
    wrapped inside a parent `div` tag, which is then wrapped inside a `template` tag.
    This is important, because you can''t have the `router-view` tag as the direct
    child of the `template` tag. In other words, the following is not possible:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`router-view`元素（从底部数第三行）被包裹在父`div`标签内，然后再包裹在`template`标签内。这很重要，因为您不能将`router-view`标签直接放在`template`标签的子级。换句话说，以下是不可能的：
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now that we know that this approach will not work, we can go on discussing named
    routes.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道这种方法行不通，我们可以继续讨论命名路由。
- en: Using named routes
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命名路由
- en: 'To use a named route, you just pass an object to the `to` prop inside the `router-link`
    tag, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用命名路由，只需将对象传递给`router-link`标签中的`to`属性，如下所示：
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice the `:` before the `to` prop. This `:` is added whenever we want to add
    a named route.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`to`属性前面的`:`。每当我们想要添加命名路由时，都会添加这个`:`。
- en: With the `name` key inside the object we passed in to the `to` prop, vue-router
    will check the `routes` array inside `router.js`. It will look for an object that
    has a name key with the value specified, and if it finds it, it will re-route
    it to the specific view component.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在传递给`to`属性的对象中使用`name`键，vue-router将检查`router.js`中的`routes`数组。它将查找具有指定值的name键的对象，如果找到，它将重新路由到特定的视图组件。
- en: Navigating to a route by triggering a method of a Vue instance
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过触发Vue实例的方法导航到路由
- en: 'Every component in Vue is a stand-alone Vue instance. We''ll be working in
    the `HelloWorld.vue` component. To navigate to a route from the `methods` option
    of `HelloWorld.vue`, you can use the following code inside the `scripts` section
    of the component:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Vue中的每个组件都是一个独立的Vue实例。我们将在`HelloWorld.vue`组件中工作。要从`HelloWorld.vue`的`methods`选项中导航到路由，可以在组件的`scripts`部分中使用以下代码：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To make this work, we need to add a `v-*` directive to determine when a method
    that has the preceding code will be triggered. Thus, still inside `HelloWorld.vue`, update
    the `template` tag to the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其工作，我们需要添加一个`v-*`指令来确定何时触发具有上述代码的方法。因此，在`HelloWorld.vue`中，仍然在`template`标签中更新为以下内容：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Obviously, the preceding `template` tag is incomplete. We''re focusing on the
    important part: the `p` tag with the text colored red and the font size of `50`
    pixels. You can''t miss it on the screen! You can find this line of code inside
    `vuecli3chapter5/HelloWorld.vue`, starting on line 4.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，上述`template`标签是不完整的。我们关注重要部分：文本颜色为红色，字体大小为`50`像素的`p`标签。你不能在屏幕上错过它！你可以在`vuecli3chapter5/HelloWorld.vue`中的第4行找到这行代码。
- en: When you hover over the preceding paragraph, Vue will immediately take you to
    the About page.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当你悬停在上面的段落时，Vue会立即带你到关于页面。
- en: Let's now add the same functionality we have on the home page to the about page.
    Thus, once you are on the about page, you can hover over the prominent Hover to
    see the Home Page link, which will take you back to the home page.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将主页上的相同功能添加到关于页面。因此，一旦你在关于页面上，你可以悬停在显眼的悬停上看到主页链接，它会带你回到主页。
- en: 'To make things less jumpy, we can also use the good-old plain, browser facade
    function: `setTimeout`. Here''s the updated code for the `About.vue` file:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情不那么跳跃，我们还可以使用老式的纯浏览器外观函数：`setTimeout`。以下是`About.vue`文件的更新代码：
- en: '[PRE13]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What are we doing in the preceding code? We're simply adding another method
    to our `methods` option. We're naming this new method:  `goToHomePageSlowly`.
    Then, we're calling this method inside our about component's template tag.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中我们在`methods`选项中简单地添加了另一个方法。我们给这个新方法命名为`goToHomePageSlowly`。然后，在我们的about组件的模板标签中调用这个方法。
- en: The `goToHomePagesSlowly` uses the `setTimeout` facade function for the browser's
    `setTimeout` functionality. The `setTimeout` function calls our `goToHomePage`
    function with a delay of `1000` milliseconds, and once it's run, it will use the
    `$router` to go back to the home page.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`goToHomePagesSlowly`使用`setTimeout`外观函数来实现浏览器的`setTimeout`功能。`setTimeout`函数以`1000`毫秒的延迟调用我们的`goToHomePage`函数，一旦运行，它将使用`$router`返回到主页。'
- en: Next, we'll discuss nested routes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论嵌套路由。
- en: Working with nested routes
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用嵌套路由
- en: 'Before we start working with nested routes, we will add the Cars component,
    inside the `src/views` folder as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用嵌套路由之前，我们将在`src/views`文件夹中添加Cars组件，如下所示：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To work with nested routes, you need to add a `children` array to the `path`
    object inside `router.js`, as in the following example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用嵌套路由，您需要在`router.js`中的`path`对象中添加一个`children`数组，如下例所示：
- en: '[PRE15]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Each of these child components also needs routing. Since they are nested routes,
    they need to be called from their respective parent component. In our case, this
    is the `HelloCars` component. We will add the `HelloCars.vue` component inside
    the `components` folder, using the following code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 每个子组件也需要路由。由于它们是嵌套路由，它们需要从各自的父组件中调用。在我们的情况下，这是`HelloCars`组件。我们将使用以下代码将`HelloCars.vue`组件添加到`components`文件夹中：
- en: '[PRE16]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now all we have to do is add additional child components that our parent `HelloCars.vue`
    component will call.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要添加额外的子组件，我们的父组件`HelloCars.vue`将调用。
- en: 'The default child component, available from the `/cars` route, is the `CarsHome.vue`
    component as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从`/cars`路由可用的默认子组件是`CarsHome.vue`组件，如下所示：
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As mentioned earlier, one of the `HelloCars.vue` component''s children is the
    `CarsNew.vue` component as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`HelloCars.vue`组件的一个子组件是`CarsNew.vue`组件，如下所示：
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Another child of the `HelloCars.vue` component is `CarsOld.vue` as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloCars.vue`组件的另一个子组件是`CarsOld.vue`，如下所示：'
- en: '[PRE19]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now that we understand how nested routing works, we'll shift our focus and briefly
    discuss lazy-loading routes.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了嵌套路由的工作原理，我们将转移焦点，简要讨论懒加载路由。
- en: Lazy- loading routes
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒加载路由
- en: Sometimes, webpack produces JavaScript bundles that are too large. This will
    slow down the time it takes to load our web apps, which is, of course, undesirable.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，webpack生成的JavaScript包太大。这会减慢我们的Web应用程序加载时间，这当然是不可取的。
- en: 'To avoid this scenario, we can think back to how vue-router works: each route
    is a separate Vue component.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，我们可以回想一下vue-router的工作原理：每个路由都是一个单独的Vue组件。
- en: We've already seen earlier that webpack produces **chunks** when bundling our
    Vue apps. This behavior can be used to our advantage, so that each component gets
    bundled into a separate chunk. This is achieved with Vue's **async components**
    and **code-splitting** in webpack.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前面看到，webpack在捆绑我们的Vue应用程序时会生成**块**。这种行为可以用于我们的优势，使每个组件都捆绑到一个单独的块中。这是通过Vue的**异步组件**和webpack中的**代码拆分**实现的。
- en: Working with dynamic routes
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动态路由
- en: 'What is a dynamic route? Let''s imagine a shopping platform, in which the URL
    structure of any item for sale is listed in a link that looks like this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是动态路由？让我们想象一个购物平台，在其中任何待售物品的URL结构都列在一个链接中，看起来像这样：
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `:id` section is what''s called a **dynamic segment**.  To work with dynamic
    segments, you first need to list them, just like any other route, inside `router.js` in
    the route''s array of objects as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`:id`部分是所谓的**动态段**。要使用动态段，您首先需要像任何其他路由一样在`router.js`中的路由对象数组中列出它们，如下所示：'
- en: '[PRE21]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Obviously, in the preceding code, we're using the three dots to save space.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，在上述代码中，我们使用三个点来节省空间。
- en: 'Back inside the `Item.vue` view component''s template tag, we''ll need to add
    the following syntax:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`Item.vue`视图组件的模板标签中，我们需要添加以下语法：
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The state of our active route is stored inside `$route`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们活跃路由的状态存储在`$route`中。
- en: At least an entire chapter could be written about dynamic routes alone, so at
    this time, we'll need to continue our discussion by looking at triggering routes
    from the `methods` option in Vue instances.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 至少可以单独撰写一整章关于动态路由，所以此时，我们需要继续讨论如何从Vue实例的`methods`选项中触发路由。
- en: With this, we conclude this chapter.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，我们结束了这一章。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how to add a new Vue project with vue-router and
    vuex. We also configured preset options through VS Code's command line. We discussed vue-router
    routes, and we saw how to use named routes, add a dynamic route, navigate to a
    route from the methods option in a Vue instance, and work with nested (child)
    routes.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们看了如何使用vue-router和vuex添加一个新的Vue项目。我们还通过VS Code的命令行配置了预设选项。我们讨论了vue-router的路由，并且学习了如何使用命名路由，添加动态路由，从Vue实例的方法选项导航到一个路由，并且处理嵌套（子）路由。
- en: In the next chapter, we'll see how to work with ESLint and Prettier in Vue CLI
    3.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何在Vue CLI 3中使用ESLint和Prettier。
