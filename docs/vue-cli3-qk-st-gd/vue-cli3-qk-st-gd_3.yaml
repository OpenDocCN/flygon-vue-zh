- en: Babel in Vue CLI 3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue CLI 3中的Babel
- en: 'In this chapter, we will work with Babel to bring the new features of **JavaScript**
    (**JS**) to browsers before they can understand them by transpiling it to older
    versions of JS. We''ll discuss the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Babel将**JavaScript**（**JS**）的新功能带到浏览器中，使其在浏览器能够理解之前将其转换为旧版本的JS。我们将讨论以下内容：
- en: Understanding Babel
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Babel
- en: Running webpack with ES5 and ES6
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ES5和ES6运行webpack
- en: Updating our webpack configuration to work with Babel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新我们的webpack配置以适配Babel
- en: Vue, Babel, and JSX
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue，Babel和JSX
- en: Adding Babel plugins manually
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动添加Babel插件
- en: Let's begin by looking at what problems Babel solves.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看Babel解决了什么问题。
- en: Understanding Babel
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Babel
- en: As we've seen already in the previous chapters, once you build a default Vue
    application using the Vue CLI, you can then serve it with `npm run serve`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的章节中已经看到的，一旦使用Vue CLI构建了默认的Vue应用程序，您可以使用`npm run serve`来提供它。
- en: 'Your app will usually be served at `localhost:8080`. Looking at the served
    page with its default contents, you''ll notice that there are two plugins listed
    under the Installed CLI Plugins heading: `babel` and `eslint`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序通常会在`localhost:8080`上提供。查看默认内容的服务页面时，您会注意到在已安装的CLI插件标题下列出了两个插件：`babel`和`eslint`。
- en: Why would these two plugins come pre-installed with the default application?
    Obviously, the Vue framework's team is trying hard to follow best practices and
    be up-to-date with the modern approach to building web applications. Using Babel
    is one of these best practices.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这两个插件会预先安装在默认应用程序中呢？显然，Vue框架团队正在努力遵循最佳实践，并与构建Web应用程序的现代方法保持最新。使用Babel就是其中之一。
- en: 'If you visit the Babel website, you''ll see the following definition of what
    it is:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您访问Babel网站，您会看到以下关于它的定义：
- en: '"Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code
    into a backwards compatible version of JS in current and older browsers or environments."'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “Babel是一个主要用于将ECMAScript 2015+代码转换为当前和旧版浏览器或环境中的JS的向后兼容版本的工具链。”
- en: So, how can we use the Vue CLI Babel plugin? And what would be the easiest way
    to get more information about it?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何使用Vue CLI Babel插件？以及获取有关它的更多信息的最简单方法是什么？
- en: 'Since we have already used Vue CLI to create default Vue apps, and since we
    have also learned about Vue CLI''s UI, we can reach the official documentation
    easily, by just opening our Git Bash and starting the Vue CLI UI:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经使用Vue CLI创建了默认的Vue应用程序，并且已经了解了Vue CLI的UI，我们可以通过打开Git Bash并启动Vue CLI UI轻松地访问官方文档：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we''ve seen in [Chapter 1](081bc26f-96a8-4cb0-8e73-d7c6e67f409b.xhtml),
    *Introducing Vue CLI 3*, this command will have webpack serve our most recent
    project''s dashboard in the browser. There, we can click the Plugins icon, as
    can be seen in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](081bc26f-96a8-4cb0-8e73-d7c6e67f409b.xhtml)中所看到的，*介绍Vue CLI 3*，这个命令将使webpack在浏览器中为我们最新的项目仪表板提供服务。在那里，我们可以点击插件图标，如下截图所示：
- en: '![](assets/6041d666-2d4e-4056-b36c-5db5021024cb.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6041d666-2d4e-4056-b36c-5db5021024cb.png)'
- en: 'Once you''ve clicked on the Installed plugins link, you''ll see the following
    screen:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击了已安装的插件链接，您将看到以下屏幕：
- en: '![](assets/f6d4909a-8125-4c75-9cc1-3559a4cff885.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f6d4909a-8125-4c75-9cc1-3559a4cff885.png)'
- en: 'This app lists three default plugins installed: *@vue/cli-service*, *@vue/cli-plugin-babel*,
    and *@vue/cli-plugin-eslint*. To make things easier to understand, the other plugins
    have been grayed out, and numbered boxes have been added to the screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序列出了三个默认安装的插件：*@vue/cli-service*，*@vue/cli-plugin-babel*和*@vue/cli-plugin-eslint*。为了更容易理解，其他插件已被灰掉，并且在截图中添加了编号框：
- en: More info links to the GitHub repository of `cli-plugin-babel`
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更多信息链接到`cli-plugin-babel`的GitHub存储库
- en: Update `@vue/cli-plugin-babel`
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`@vue/cli-plugin-babel`
- en: The button with the home icon is the link to Vue UI's project manager that lists
    all the available projects
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 带有主页图标的按钮是指向Vue UI项目管理器的链接，列出了所有可用的项目。
- en: This section of the UI shows the location of the current Vue project in your
    OS
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UI的这一部分显示了您的操作系统中当前Vue项目的位置
- en: Clicking here lets you toggle Vue UI's logs on and off
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击此处可让您切换Vue UI的日志开关
- en: As we've seen earlier, this allows you to switch between the two color variations
    of the Vue UI
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，这使您可以在Vue UI的两种颜色变化之间切换
- en: The report bug icon takes you to the Vue-CLI bug-reporting web page
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 报告错误图标将带您到Vue-CLI错误报告网页。
- en: If you're interested in translating the UI, this button links to the page for
    UI localization
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您有兴趣翻译UI，此按钮链接到UI本地化页面
- en: This icon simply refreshes the plugin's API
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此图标仅刷新插件的API
- en: If you need to use the popular **vuex** or **vue-router** plugins, you can simply
    click on the appropriate buttons at the very top of the plugins page to install
    them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要使用流行的**vuex**或**vue-router**插件，您可以简单地点击插件页面顶部的相应按钮来安装它们。
- en: The search input to the right of the Add vuex and Add vue-router buttons lets
    you filter the installed plugins, and the Add plugin button takes you to the `localhost:8000/plugins/add`
    screen, where you can choose from a number of plugins, such as `@vue/cli-plugin-unit-jest`,
    `@vue/cli-plugin-typescript`, `@vue/cli-plugin-pwa`, and so on. There is a huge
    selection of plugins here, and we'll look into it in more detail in later chapters.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在“添加vuex”和“添加vue-router”按钮右侧的搜索输入框可让您过滤已安装的插件，“添加插件”按钮将带您转到`localhost:8000/plugins/add`屏幕，您可以从多个插件中进行选择，例如`@vue/cli-plugin-unit-jest`，`@vue/cli-plugin-typescript`，`@vue/cli-plugin-pwa`等。这里有大量的插件可供选择，我们将在后面的章节中更详细地了解它。
- en: In the next section, we'll discuss all the features of `cli-plugin-babel`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论`cli-plugin-babel`的所有功能。
- en: The building blocks of @vue/cli-plugin-babel
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '@vue/cli-plugin-babel的构建模块'
- en: There are several parts that `@vue/cli-plugin-babel` comes with out-of-the-box.
    These are Babel 7, babel-loader, and `@vue/cli-plugin-babel`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`@vue/cli-plugin-babel`默认提供了几个部分。这些是Babel 7、babel-loader和`@vue/cli-plugin-babel`。'
- en: Babel 7 in @vue/cli-plugin-babel
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '@vue/cli-plugin-babel中的Babel 7'
- en: Here is the problem that Babel solves.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Babel解决的问题。
- en: Let's say that you are developing your web app's frontend, and you are using
    the more modern, ES6+ syntax of the JS language. Once your app is complete, and
    released into the wild, some of your users run your web app on, say, Internet
    Explorer. Contrary to other users of your web app who get a smooth experience
    running your app, the Internet Explorer users would get a syntax error instead.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在开发您的Web应用的前端，并且正在使用JS语言的更现代的ES6+语法。一旦您的应用程序完成，并发布到互联网上，您的一些用户在Internet
    Explorer上运行您的Web应用程序。与您的Web应用程序的其他用户相反，他们可以顺利运行您的应用程序，Internet Explorer用户将收到语法错误。
- en: 'Babel was the answer to problems such as this. It*leveled the playing field*:
    it allowed developers to outsource their JS browser compatibility problems to
    Babel. Instead of having to worry about, and cater to older browsers, they could
    simply write their JS code using the newest features of the language, even before
    they were fully available in any browser. Babel was then responsible for converting
    this code to the older JS dialect, the one that older browsers could speak.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Babel就是对这样的问题的答案。它*平衡了竞争环境*：它允许开发人员将他们的JS浏览器兼容性问题外包给Babel。他们不必再担心和迎合旧版浏览器，他们可以简单地使用语言的最新功能来编写他们的JS代码，甚至在任何浏览器完全支持之前。然后，Babel负责将此代码转换为旧的JS方言，这是旧版浏览器可以理解的。
- en: The `@vue/cli-plugin-babel` runs on Babel 7, which was released on August 27,
    2018\. There is a three-year difference between Babel 6 and Babel 7, and this
    iteration came with a slew of improvements. Vue CLI supporting such a recent update
    is another testament to its team being dedicated to keeping up with the times
    as much as possible.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`@vue/cli-plugin-babel`运行在Babel 7上，Babel 7于2018年8月27日发布。Babel 6和Babel 7之间相差三年，这一迭代带来了一系列改进。Vue
    CLI支持如此近期的更新是其团队致力于尽可能跟上时代的又一个证明。'
- en: The role of babel-loader in @vue/cli-plugin-babel
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@vue/cli-plugin-babel`中babel-loader的作用'
- en: As we've seen in the previous chapter, Vue CLI runs on webpack 4.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一章中看到的，Vue CLI运行在webpack 4上。
- en: To be able to use Babel 7, `@vue/cli-plugin-babel` employs babel-loader, available
    here: [https://github.com/babel/babel-loader](https://github.com/babel/babel-loader).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用Babel 7，`@vue/cli-plugin-babel`使用babel-loader，可以在这里找到：[https://github.com/babel/babel-loader](https://github.com/babel/babel-loader)。
- en: As mentioned in the previous chapter, with webpack loaders, we can preprocess
    and bundle a bunch of different resources, not just regular JS, but virtually
    any other static resource.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，使用webpack加载器，我们可以预处理和捆绑一堆不同的资源，不仅仅是常规JS，而是几乎任何其他静态资源。
- en: Specifically, babel-loader takes ES6+ JS, and converts it to ES5 JS. This process
    is commonly referred to as **transpiling**. Thus, the role of babel-loader in
    `@vue/cli-plugin-babel` is to **transpile** our ES6+ code to ES5.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，`babel-loader`接收ES6+ JS，并将其转换为ES5 JS。这个过程通常被称为**转译**。因此，`@vue/cli-plugin-babel`中babel-loader的作用是将我们的ES6+代码转译为ES5。
- en: The role of @vue/babel-preset-app
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@vue/babel-preset-app`的作用'
- en: 'There is more to `@vue/cli-plugin-babel`. It includes the `@vue/babel-preset-app`,
    whose sole purpose is to be used in projects generated via Vue CLI. Without going
    into too many details on how `@vue/babel-preset-app` works, we can list its main
    features:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`@vue/cli-plugin-babel`还有更多功能。它包括`@vue/babel-preset-app`，其唯一目的是在通过Vue CLI生成的项目中使用。在不深入讨论`@vue/babel-preset-app`的工作原理的情况下，我们可以列出其主要功能：'
- en: It looks at your browser targets using `browserslist`
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用`browserslist`来查看您的浏览器目标
- en: It automatically applies transforms and polyfills needed (achieved with the
    help of `@babel/preset-env`)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它自动应用所需的转换和填充（借助`@babel/preset-env`实现）
- en: It adds support for Vue JSX
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它增加了对Vue JSX的支持
- en: It prevents inlining helpers in all the files during builds
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它阻止在构建过程中将所有文件中的辅助程序内联
- en: Other than the previously listed features, there are also other things that
    `@vue/cli-plugin-babel` is capable of, and we'll discuss them in the next section.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前列出的功能之外，`@vue/cli-plugin-babel` 还有其他功能，我们将在下一节中讨论它们。
- en: Other features of @vue/cli-plugin-babel
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@vue/cli-plugin-babel`的其他功能'
- en: Besides the default settings listed in the previous section, `@vue/cli-plugin-babel`
    is also extendable. We can add other Babel presets and plugins using `babel.config.js`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前一节中列出的默认设置，`@vue/cli-plugin-babel`也是可扩展的。我们可以使用`babel.config.js`添加其他Babel预设和插件。
- en: It uses a couple of webpack loaders to perform two other major tasks: caching
    (with the help of cache-loader), and utilizing multi-core processors (with the
    help of thread-loader). This is referred to as **parallelization**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用了一些webpack加载器来执行另外两个主要任务：缓存（借助cache-loader的帮助）和利用多核处理器（借助thread-loader的帮助）。这被称为**并行化**。
- en: In the next section, similar to what we did in [Chapter 2](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml),
    *Webpack in Vue CLI 3*, we will go through setting up Babel in Vue without CLI.
    After that, we will look at how CLI makes things a lot easier and how it can further
    be extended.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，类似于我们在[第2章](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml)中所做的，*Vue CLI 3中的Webpack*，我们将介绍在Vue中设置Babel而不使用CLI。之后，我们将看看CLI如何使事情变得更容易，以及如何进一步扩展。
- en: Using Babel and webpack in Vue 2 without Vue CLI
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Vue 2中使用Babel和webpack而不使用Vue CLI
- en: 'Let''s call our new project `npm-vue-babel-webpack`. We''ll open Git Bash,
    add the folder for this project, and `cd` into it:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们的新项目命名为`npm-vue-babel-webpack`。我们将打开Git Bash，添加此项目的文件夹，并`cd`进入其中：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We''ll initialize NPM and accept all the defaults:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将初始化NPM并接受所有默认设置：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In [Chapter 2](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml), *Webpack in Vue
    CLI 3*, we installed NPM packages one by one, explained what each one does, and
    fixed any errors along the way. That gave us a thorough understanding of the building
    blocks of webpack and of how Vue and webpack fit together. To avoid unnecessary
    repetition, this time we'll just install everything at once.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml)中，*Vue CLI 3中的Webpack*，我们逐个安装了NPM包，解释了每个包的作用，并在此过程中修复了任何错误。这使我们对webpack的构建模块和Vue与webpack的配合方式有了深入的了解。为了避免不必要的重复，这次我们将一次性安装所有内容。
- en: Installing the necessary NPM packages
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装必要的NPM包
- en: 'Install the necessary NPM packages:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安装必要的NPM包：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now add the `src` and `dist` folders to our project, and open our project in
    VS Code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将`src`和`dist`文件夹添加到我们的项目中，并在VS Code中打开我们的项目：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Feel free to inspect the contents of `package.json` in VS Code, to confirm all
    the NPM packages were indeed installed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 随时在VS Code中检查`package.json`的内容，以确认所有NPM包确实已安装。
- en: Let's create three new files inside the `src` folder, specifically `main.js`,
    `App.vue`, and `index.html`, almost the same as we did in [Chapter 2](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml),
    *Webpack in Vue CLI 3*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`src`文件夹内创建三个新文件，具体为`main.js`、`App.vue`和`index.html`，几乎与我们在[第2章](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml)中所做的一样，*Vue
    CLI 3中的Webpack*。
- en: 'Here''s the code to be added to `index.html`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要添加到`index.html`中的代码：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the contents of `main.js`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`main.js`的内容：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, here is the contents of `App.vue`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是`App.vue`的内容：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice that inside the preceding `script` tag, we are importing `AnotherComponent`
    from a `components` folder.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上述`script`标签内部，我们正在从`components`文件夹中导入`AnotherComponent`。
- en: So, let's add a `components` folder inside our project's `src` folder. Inside
    the `components` folder, we'll add a new file and call it `AnotherComponent.vue`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们在项目的`src`文件夹内添加一个`components`文件夹。在`components`文件夹内，我们将添加一个新文件并将其命名为`AnotherComponent.vue`。
- en: 'Next, add this code to `AnotherComponent.vue`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将此代码添加到`AnotherComponent.vue`中：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we are finally seeing an example in which our component
    has some basic JS-powered Vue functionality. We are using Vue's built-in `data` and
    `methods` options. Inside the `methods` option, we define the `alertTime` function,
    which, whenever it gets called, shows the current time in an alert box.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们终于看到了一个示例，其中我们的组件具有一些基本的JS驱动的Vue功能。我们正在使用Vue的内置`data`和`methods`选项。在`methods`选项内，我们定义了`alertTime`函数，每当它被调用时，都会在警报框中显示当前时间。
- en: 'Discussing the details of how all these moving parts work is outside of the
    scope of this book. The focus of this chapter is understanding Babel. If you need
    more information on the basic concepts of Vue such as the ones mentioned in the
    previous paragraphs, refer to one of many useful resources in the Packt library.
    A great companion to this book would be a quick introduction to the Vue 2 framework:
    *Vue.js Quick Start Guide* by *Ajdin Imsirovic* ([https://prod.packtpub.com/in/application-development/vuejs-quick-start-guide](https://prod.packtpub.com/in/application-development/vuejs-quick-start-guide)).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论所有这些组成部分如何运作的细节超出了本书的范围。本章的重点是理解Babel。如果您需要更多关于Vue的基本概念的信息，比如前几段提到的内容，请参考Packt图书馆中的许多有用资源之一。本书的一个很好的伴侣将是对Vue
    2框架的快速介绍：*Vue.js快速入门指南*，作者是*Ajdin Imsirovic*（[https://prod.packtpub.com/in/application-development/vuejs-quick-start-guide](https://prod.packtpub.com/in/application-development/vuejs-quick-start-guide)）。
- en: The thing that we need to focus on at this point is working with ES6+ features
    in our `methods` option. Currently, the `methods` option's code is written in
    ES5 JS, and, thus, it will be easy to run webpack on this code, as we'll soon
    see.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要关注的重点是在我们的`methods`选项中使用ES6+功能。目前，`methods`选项的代码是用ES5 JS编写的，因此很容易在此代码上运行webpack，我们很快就会看到。
- en: Running webpack with ES5 code
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ES5代码运行webpack
- en: 'To run webpack, do the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行webpack，请执行以下操作：
- en: 'Add another file to the root of our project, `webpack.config.js`, so that we
    can set up our webpack configuration as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录中添加另一个文件`webpack.config.js`，以便我们可以设置我们的webpack配置如下：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that the entry and output files are both `main.js`, so we don't have to
    specify them, but we're doing this anyway in the preceding code, to make things
    more obvious.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，入口和输出文件都是`main.js`，所以我们不必指定它们，但是在前面的代码中我们还是这样做了，以使事情更明显。
- en: 'Next, in `package.json`, update the `scripts` key:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`package.json`中，更新`scripts`键：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now run our project from Git Bash, with the following command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从Git Bash运行我们的项目，使用以下命令：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, in VS Code, navigate to the `dist` folder in our project.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在VS Code中，导航到我们项目中的`dist`文件夹。
- en: Right-click on `index.html`, and click on the Open in Default Browser command.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`index.html`，然后单击“在默认浏览器中打开”命令。
- en: 'Our browser will now show the following output (zoomed-in for easier viewing):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的浏览器现在将显示以下输出（放大以便查看）：
- en: '![](assets/330dd18a-b7ff-4a6f-9006-17a6d5dd4d29.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/330dd18a-b7ff-4a6f-9006-17a6d5dd4d29.png)'
- en: If a user clicks on the What's the time? button, an alert box will appear on
    the web page, showing the current time. Now let's update our `methods` option
    to ES6 syntax, and see what happens.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户单击“现在几点了？”按钮，将在网页上出现一个警报框，显示当前时间。现在让我们将我们的`methods`选项更新为ES6语法，然后看看会发生什么。
- en: Adding webpack-dev-server
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加webpack-dev-server
- en: 'Before we begin updating our code to ES6 syntax, there is one more thing that
    we can do to make things quicker and more convenient:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始将代码更新为ES6语法之前，还有一件事可以让事情变得更快捷和更方便：
- en: 'Add the `webpack-dev-server`. With the help of this NPM package, our code will
    be continually served and watched for changes. Let''s install it with the following:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`webpack-dev-server`。借助这个NPM包，我们的代码将不断地被提供和监视变化。让我们使用以下命令安装它：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To get the webpack dev server running and serving our code, we also need to
    update `scripts` of `package.json` entry to this:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让webpack开发服务器运行并提供我们的代码，我们还需要将`package.json`条目的`scripts`更新为以下内容：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now we can play around with adding various features to our components and watch
    them being hot reloaded in the browser whenever we save our code in VS Code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以尝试向我们的组件添加各种功能，并在我们在VS Code中保存代码时，观察它们在浏览器中进行热重载。
- en: 'Let''s test it out right now by running the following command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们立即通过运行以下命令来测试它：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can test out the web page served at `http://localhost:8080/`, and you'll
    notice that it still works, just as before.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`http://localhost:8080/`上测试提供的网页，并且您会注意到它仍然像以前一样工作。
- en: Next, we'll add some ES6 syntax to our `methods` option.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`methods`选项中添加一些ES6语法。
- en: Updating the methods option to ES6 syntax
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将方法选项更新为ES6语法
- en: 'Let''s update the `methods` option in `AnotherComponent.vue` file. Here is
    the updated code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`AnotherComponent.vue`文件中的`methods`选项。以下是更新后的代码：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once you save changes you made in VS Code, you can click the What's the time?
    button, and the expected alert will appear, followed by another alert that reads
    something else. This way, we can be sure that we're looking at the updated app.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在VS Code中保存了更改，您可以单击“现在几点了？”按钮，然后会出现预期的警报，然后是另一个读取其他内容的警报。这样，我们可以确保我们正在查看更新的应用程序。
- en: Now let's find our ES6 code in the compiled `main.js` file inside the `dist`
    folder.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在`dist`文件夹中的编译后的`main.js`文件中找到我们的ES6代码。
- en: 'If we inspect the `/dist/index.html` file inside the dev tools, we can see
    a reference to `main.js`, the webpack-compiled JS code. If you right-click `main.js` and
    click the Open in new tab command on the contextual right-click menu, you''ll
    get the full code showing in a new tab. To find our ES6 code, let''s press the
    *Ctrl* + *F* shortcut key so that we can enter our search term: `alertTime`.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在开发工具中检查`/dist/index.html`文件，我们可以看到对`main.js`的引用，这是webpack编译的JS代码。如果右键单击`main.js`并在上下文右键菜单中点击“在新标签页中打开”命令，您将在新标签页中看到完整的代码。要找到我们的ES6代码，让我们按下*Ctrl*
    + *F*快捷键，以便输入我们的搜索词：“alertTime”。
- en: 'Toward the very bottom of the file, we see our ES6 arrow function:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件的底部，我们看到了我们的ES6箭头函数：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the next section, we'll update our webpack configuration with babel-loader,
    and see how webpack will transpile the preceding code to ES5.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将使用babel-loader更新我们的webpack配置，并看看webpack将如何将前面的代码转译为ES5。
- en: Adding babel-loader to our webpack configuration
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将babel-loader添加到我们的webpack配置中
- en: Before we begin, we'll need to stop our webpack-dev-server, by using the *Ctrl*
    + *C* keyboard combination inside Git Bash.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要停止webpack-dev-server，使用Git Bash中的*Ctrl* + *C*组合键。
- en: 'Next, to be able to transpile ES6+ syntax in our project, we need to update
    our webpack configuration with Babel. Let''s first install the babel-loader package
    with NPM:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了能够在我们的项目中转译ES6+语法，我们需要使用Babel更新我们的webpack配置。让我们首先使用NPM安装babel-loader包：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, let''s run webpack on our project again:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们再次在项目上运行webpack：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Unfortunately, this still doesn''t work. If we inspected our transpiled `main.js`,
    we''d still see `alertTime` key, and it''s accompanying ES6 anonymous function.
    This means we still need another package: `babel core`.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这仍然不起作用。如果我们检查我们转译后的`main.js`，我们仍然会看到`alertTime`键和它的ES6匿名函数。这意味着我们仍然需要另一个包：`babel
    core`。
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If we ran webpack at this point, we'd see that our issue was still not fixed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们此时运行webpack，我们会发现我们的问题仍然没有解决。
- en: 'This means that we still need to add `babel-preset-env`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们仍然需要添加`babel-preset-env`：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At this point, it doesn''t hurt to verify that our `package.json` has all the
    expected updates in the `devDependencies`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，验证一下我们的`package.json`中的`devDependencies`是否都有预期的更新是没有坏处的：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Finally, before we can re-run webpack, we need to set up a `babel.config.js`
    file, Babel's own configuration file (similar to webpack's `webpack.config.js`).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们重新运行webpack之前，我们需要设置一个`babel.config.js`文件，这是Babel自己的配置文件（类似于webpack的`webpack.config.js`）。
- en: 'Let''s create a new file, `babel.config.js`, in the root of our project, and
    let''s add it the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在项目的根目录中创建一个新文件`babel.config.js`，并添加以下代码：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: All that we need to do now is update our webpack configuration so that it can
    work with Babel.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的就是更新我们的webpack配置，使其能够与Babel一起工作。
- en: Updating our webpack configuration to work with babel
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新我们的webpack配置以使用babel
- en: 'To make our webpack work with babel, we need to explain to it when to use babel-loader.
    We do that by adding a rule to test for, inside the `module` option of `webpack.config.js`,
    as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的webpack能够使用babel，我们需要告诉它何时使用babel-loader。我们通过在`webpack.config.js`的`module`选项内添加一个测试规则来实现，如下所示：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now that we've set everything up, we can run our `npm run webpack-dev` command
    in Git Bash again.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了一切，我们可以再次在Git Bash中运行`npm run webpack-dev`命令。
- en: 'Here''s a quick way to see whether webpack bundled our JS file differently
    than before: just look at the webpack logging information inside Git Bash. During
    our previous attempts at hooking up Babel to work with webpack, the bundle size
    was exactly 70.2 KB. However, after this last run of the `webpack` NPM script,
    the bundle size for `main.js` is 70.6 KB. We can inspect the `./dist/main.js`
    file in our dev tools again. Alternatively, you can search for an `alertTime`
    string inside `./dist/main.js` right inside your VS Code.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个快速的方法来查看webpack是否与之前不同地捆绑了我们的JS文件：只需查看Git Bash中的webpack日志信息。在我们之前尝试将Babel与webpack配合工作时，捆绑大小恰好是70.2
    KB。然而，在`webpack` NPM脚本的最后一次运行之后，`main.js`的捆绑大小为70.6 KB。我们可以再次在开发工具中检查`./dist/main.js`文件。或者，你可以在VS
    Code中直接搜索`./dist/main.js`中的`alertTime`字符串。
- en: 'Regardless of how we locate it, our bundled `main.js` file''s `methods` entry
    looks like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们如何定位它，我们捆绑的`main.js`文件的`methods`条目看起来是这样的：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Just glancing at the preceding code and seeing the `function` keyword, it should
    be obvious that this code is ES5, which means Babel was successfully run by webpack,
    and our ES6 `alertTime` Vue method in our input file inside the `src` folder was
    successfully transpiled to the output file inside the `dist` folder.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅瞥一眼前面的代码并看到`function`关键字，就应该明显地意识到这段代码是ES5的，这意味着Babel已经成功地被webpack运行，我们在`src`文件夹中的输入文件中的ES6
    `alertTime` Vue方法已经成功地被转译到了`dist`文件夹中的输出文件中。
- en: 'To verify that our setup works, we can run our `webpack-dev-server` again,
    and while it''s running, make another minor change to our `methods` option inside
    `AnotherComponent.vue`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证我们的设置是否有效，我们可以再次运行`webpack-dev-server`，并且在它运行时，对`AnotherComponent.vue`中的`methods`选项进行另一个小改动：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you take a look at the project served at `localhost:8080`, you'll see it
    works as expected, and if you open `main.js` from the dev tools, you'll see the
    transpiled syntax as well.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看在`localhost:8080`上提供的项目，你会看到它按预期工作，如果你从开发工具中打开`main.js`，你也会看到转译后的语法。
- en: In the next section, we'll briefly mention a common source of confusion and
    how it is dealt with in Vue. It has to do with the arrow function syntax, and
    the `this` keyword.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将简要提到一个常见的困惑来源以及在Vue中如何处理它。这与箭头函数语法和`this`关键字有关。
- en: The problem with the this keyword in arrow functions in Vue
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 箭头函数中的this关键字在Vue中的问题
- en: Unfortunately, when Babel transpiles the `this` keyword inside an arrow function,
    it transpiles it to `_this`. That means that any of our methods will be broken
    and our apps won't work. The underlying cause for this is due to the fact that
    arrow functions are scoped differently than ES5 functions.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，当Babel将箭头函数中的`this`关键字转译为`_this`时，这意味着我们的任何方法都将被破坏，我们的应用程序将无法工作。这背后的原因是箭头函数的作用域与ES5函数不同。
- en: In the next section, we'll look at the recommended approach in defining functions
    inside the methods option of a Vue instance.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看一下在Vue实例的方法选项中定义函数的推荐方法。
- en: Recommended solutions to keyword problems
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键字问题的推荐解决方案
- en: The recommended solution to the `this` keyword inside Vue components is to not
    use the arrow function syntax since it doesn't produce the expected results due
    to scoping issues. Specifically, arrow functions are scoped to the parent context.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue组件中解决`this`关键字的推荐解决方案是不使用箭头函数语法，因为由于作用域问题，它不会产生预期的结果。具体来说，箭头函数的作用域是父上下文。
- en: Let's see a simple app as an example of the problem.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的应用作为问题的例子。
- en: Adding one counter app
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个计数器应用
- en: Before we begin, make sure you're back inside the `VUE-CLI-3-QSG/Chapter03`
    folder, the root folder for all our projects in this chapter.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保你回到了`VUE-CLI-3-QSG/Chapter03`文件夹，这是本章中所有项目的根文件夹。
- en: 'Before we even begin building our app, we''ll need to remind ourselves of some
    options we have when using `vue create`, so let''s run this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建应用程序之前，我们需要提醒自己在使用`vue create`时有一些选项，因此让我们运行这个：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Inside the list of options, we can see that `-d` is for the `--default` flag,
    which skips prompts and uses default presets, and that the `-b` option is shorthand
    for `--bare` flag, which scaffolds our project without beginner instructions.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在选项列表中，我们可以看到`-d`代表`--default`标志，跳过提示并使用默认预设，而`-b`选项是`--bare`标志的简写，用于在不带初学者说明的情况下搭建我们的项目。
- en: 'Interestingly, we can combine these individual flags, which we''ll do right
    now. Let''s begin our app by running the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们可以组合这些单独的标志，我们现在就来做。让我们通过运行以下命令来开始我们的应用程序：
- en: '[PRE27]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As we can see, we can chain the letter aliases for flags appended to the `vue
    create` command, which is a nice little productivity boost.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们可以在`vue create`命令后附加的标志的字母别名之间进行链接，这是一个很好的小型生产力提升。
- en: In the app that gets built, we'll alter the contents of `main.js` inside the `src`
    folder. This file will be exactly the same as it was in the previous example app
    (the `npm-vue-b-w-es6-syntax` app from the previous section), so you can just
    copy and paste this file from that previous Vue app into our new example, the
    `add-one-counter` app.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建的应用程序中，我们将更改`src`文件夹中的`main.js`的内容。这个文件将与之前的示例应用程序（上一节中的`npm-vue-b-w-es6-syntax`应用程序）完全相同，因此您可以将该文件从之前的Vue应用程序中复制并粘贴到我们的新示例应用程序`add-one-counter`中。
- en: 'If you open our new `add-one-counter` app inside VS Code, you''ll also notice
    another folder: the `public` folder, with `index.html` inside it. We will leave
    this file as it is.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在VS Code中打开我们的新的`add-one-counter`应用程序，您还会注意到另一个文件夹：`public`文件夹，其中包含`index.html`。我们将保留此文件不变。
- en: 'Back inside the `src` folder, we need to change the contents of `App.vue`,
    to this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`src`文件夹，我们需要更改`App.vue`的内容如下：
- en: '[PRE28]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Finally, we''ll need to add a `components` folder to the root of our project,
    and inside it, the `AnotherComponent.vue` file. Here is the contents of `AnotherComponent.vue`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要在项目的根目录下添加一个`components`文件夹，并在其中添加`AnotherComponent.vue`文件。以下是`AnotherComponent.vue`的内容：
- en: '[PRE29]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the `methods` option, we can see the `incrementUp` function defined using
    the ES6 syntax.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在`methods`选项中，我们可以看到`incrementUp`函数使用ES6语法进行定义。
- en: If you tried running this app, it would not work. This is the case, because
    the arrow function's scoping and the Babel setup make it difficult to properly
    set up Vue apps with `methods` in the `arrow` functions.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试运行此应用程序，它将无法工作。这是因为箭头函数的作用域和Babel设置使得在`arrow`函数中正确设置Vue应用程序的`methods`变得困难。
- en: 'The only improvement, and the usual way to write functions inside the method
    options, is to avoid both the arrow function syntax, and the use of the `function`
    keyword altogether, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的改进，也是在方法选项中编写函数的通常方式，是避免使用箭头函数语法和`function`关键字的使用，如下所示：
- en: '[PRE30]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `incrementUp` function is called a **shorthand** function. You can read
    more about it at following URL: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Method_definitions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Method_definitions).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`incrementUp`函数被称为**简写**函数。您可以在以下网址阅读更多信息：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Method_definitions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Method_definitions)。'
- en: 'Let''s test-drive the app by serving it from the UI:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过UI来测试驱动应用程序：
- en: '[PRE31]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Once the Vue UI is serving in the browser, let's point our browser's address
    bar to `http://localhost:8000/project/select`. Next, click on the `add-one-counter`
    folder, and click the Import this folder button.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Vue UI在浏览器中提供服务，让我们将浏览器的地址栏指向`http://localhost:8000/project/select`。接下来，点击`add-one-counter`文件夹，然后点击导入此文件夹按钮。
- en: Next, click on the Tasks button on the main menu. Finally, click the Serve icon.
    Click the Output button to see the app building and serving.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击主菜单上的Tasks按钮。最后，点击Serve图标。点击Output按钮查看应用程序的构建和服务情况。
- en: 'Finally, open the website at `http://localhost:8080/`. You''ll see a working
    app being served:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`http://localhost:8080/`打开网站。你会看到一个正在提供服务的工作中的应用程序：
- en: '![](assets/9f8b4063-82e3-4dea-b2a7-a549b4e0e610.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f8b4063-82e3-4dea-b2a7-a549b4e0e610.png)'
- en: 'The previous example showed us the best practice of how to name and organize
    methods inside our Vue instances. Also, we saw how to use Vue UI to automate webpack
    building and serving our apps in a few clicks—much better than what we were doing
    for most of this chapter! This leads us to a conclusion: a lot of the piping and
    functionality is abstracted away and hence, this made a lot easier for using and
    accessing with the help of Vue UI, including Babel settings.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子向我们展示了如何在Vue实例中命名和组织方法的最佳实践。此外，我们还学会了如何使用Vue UI来自动化webpack的构建和服务应用程序，只需点击几下，比本章大部分内容中我们所做的要好得多！这让我们得出一个结论：很多的管道和功能都被抽象化了，因此，使用Vue
    UI和Babel设置变得更加容易和方便。
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we had a brief overview of what Babel is, what it does, and
    what is needed to make it work with Vue. All of this is abstracted away with the
    help of `vue-cli-service`, which is powered by webpack under the hood. Now that
    we have an understanding of how all these different parts work together, we will
    start using only the Vue CLI and its UI, and learn how to work with it better
    in the following chapters.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要概述了Babel是什么，它的作用以及使其与Vue一起工作所需的内容。所有这些都是通过`vue-cli-service`来抽象化的，它在幕后由webpack提供支持。现在我们已经了解了所有这些不同部分是如何一起工作的，我们将开始只使用Vue
    CLI及其UI，并在接下来的章节中学习如何更好地使用它。
- en: We'll begin by understanding testing in Vue CLI with the help of Jest. We'll
    also learn about **Test-Driven Development** (**TDD**)and running tests with the
    help of Vue CLI UI.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从理解在Vue CLI中使用Jest进行测试开始。我们还将学习**测试驱动开发**（TDD）以及如何使用Vue CLI UI运行测试。
