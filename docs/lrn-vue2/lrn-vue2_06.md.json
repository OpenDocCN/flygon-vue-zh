["```js\n**npm install some-plugin --save-dev** \n\n```", "```js\nvar Vue = require('vue') \nvar SomePlugin = require('some-plugin') \n\n**Vue.use(SomePlugin)** \n\n```", "```js\nMyPlugin.**install** = function (Vue, options) { \n  // 1\\. add global method or property \n  Vue.**myGlobalMethod** = ... \n  // 2\\. add a global asset \n  Vue.**directive**('my-directive', {}) \n  // 3\\. add an instance method \n  Vue.prototype.**$myMethod** = ... \n} \n\n```", "```js\n**cd shopping-list \nnpm install --save-dev json-server** \n\n```", "```js\n//shopping-list/server/db.json \n{ \n  \"shoppinglists\": [ \n  ] \n} \n\n```", "```js\n  \"scripts\": { \n    \"dev\": \"node build/dev-server.js \", \n    **\"server\": \"node_modules/json-server/bin/index.js --watch  \n    server/db.json\"**, \n    <...> \n  }, \n\n```", "```js\n**cd shopping-list \nnpm run server** \n\n```", "```js\n**curl -H \"Content-Type:application/json\" -d '{\"title\":\"new\",\"items\":[]}' http://localhost:3000/shoppinglists** \n\n```", "```js\n**cd shopping-list \nnpm install vue-resource --save-dev** \n\n```", "```js\n**//api/index.js** \nimport Vue from 'vue' \nimport VueResource from 'vue-resource' \n\nVue.use(VueResource) \n\n```", "```js\nconst ShoppingListsResource = Vue.resource(**'http://localhost:3000/' + 'shoppinglists{/id}'**) \n\n```", "```js\nexport default { \n  fetchShoppingLists: () => { \n    return **ShoppingListsResource.get()** \n  }, \n  addNewShoppingList: (data) => { \n    return **ShoppingListsResource.save(data)** \n  }, \n  updateShoppingList: (data) => { \n    return **ShoppingListsResource.update({ id: data.id }, data)** \n  }, \n  deleteShoppingList: (id) => { \n    return **ShoppingListsResource.remove({ id: id })** \n  } \n} \n\n```", "```js\n//mutation_types.js \nexport const POPULATE_SHOPPING_LISTS = 'POPULATE_SHOPPING_LISTS' \n\n```", "```js\n//mutations.js \nexport default { \n  [types.CHANGE_TITLE] (state, data) { \n    findById(state, data.id).title = data.title \n  }, \n  **[types.POPULATE_SHOPPING_LISTS] (state, lists) { \n    state.shoppinglists = lists \n  }** \n} \n\n```", "```js\nimport { CHANGE_TITLE, POPULATE_SHOPPING_LISTS } from './mutation_types' \n**import api from '../api'** \n\nexport default { \n  changeTitle: ({ commit }, data) => { \n    commit(CHANGE_TITLE, data) \n  }, \n  **populateShoppingLists: ({ commit }) => { \n    api.fetchShoppingLists().then(response => { \n      commit(POPULATE_SHOPPING_LISTS, response.data) \n    })** \n  } \n} \n\n```", "```js\n<script> \n  import ShoppingListComponent from './components/ShoppingListComponent' \n  import ShoppingListTitleComponent from   \n  './components/ShoppingListTitleComponent' \n  import store from './vuex/store' \n  import { mapGetters, **mapActions** } from 'vuex' \n\n  export default { \n    components: { \n      ShoppingListComponent, \n      ShoppingListTitleComponent \n    }, \n    computed: mapGetters({ \n      shoppinglists: 'getLists' \n    }), \n    **methods: mapActions(['populateShoppingLists']),** \n    store, \n    **mounted () { \n      this.populateShoppingLists() \n    }** \n  } \n</script> \n\n```", "```js\n//api/index.js \nupdateShoppingList: (**data**) => { \n  return ShoppingListsResource.update(**{ id: data.id }, data**) \n} \n\n```", "```js\n//getters.js \n**import _ from 'underscore'** \n\nexport default { \n  getLists: state => state.shoppinglists, \n  **getListById: (state, id) => { \n    return _.findWhere(state.shoppinglists, { id: id }) \n  }** \n} \n\n//actions.js \n**import getters from './getters'** \n\n```", "```js\n//actions.js \n<...> \nexport default { \n  <...> \n  updateList: (store, id) => { \n    let shoppingList = **getters.getListById**(store.state, id) \n\n    **api.updateShoppingList(shoppingList)** \n  } \n} \n\n```", "```js\n//mutations.js \nimport * as types from './mutation_types' \n**import getters from './getters'** \n\nexport default { \n  [types.CHANGE_TITLE] (state, data) { \n    **getters.getListById**(state, data.id).title = data.title \n  }, \n  [types.POPULATE_SHOPPING_LISTS] (state, lists) { \n    state.shoppinglists = lists \n  } \n} \n\n```", "```js\n//AddItemComponent.vue \n<script> \n  export default { \n    **props: ['id']**, \n    data () { \n      return { \n        newItem: '' \n      } \n    }, \n    methods: { \n      addItem () { \n        var text \n\n        text = this.newItem.trim() \n        if (text) { \n          this.$emit('add', this.newItem) \n          this.newItem = '' \n          **this.$store.dispatch('updateList', this.id)** \n        } \n      } \n    } \n  } \n</script> \n\n```", "```js\n//ShoppingListComponent.vue \n<template> \n  <...> \n    <add-item-component **:id=\"id\"** @add=\"addItem\"></add-item-component> \n  <...> \n</template> \n\n```", "```js\n//ChangeTitleComponent.vue \n<template> \n  <div> \n    <em>Change the title of your shopping list here</em> \n    <input :value=\"title\" **@input=\"onInput({ title: \n      $event.target.value, id: id })\"**/> \n  </div> \n</template> \n\n<script> \n  **import { mapActions } from 'vuex'** \n\n  export default { \n    props: ['title', 'id'], \n    **methods: mapActions({ \n      onInput: 'changeTitle'** \n    }) \n  } \n</script> \n\n```", "```js\n//actions.js \nexport default { \n  changeTitle: (store, data) => { \n    store.commit(CHANGE_TITLE, data) \n    **store.dispatch('updateList', data.id)** \n  }, \n  <...> \n} \n\n```", "```js\n//ItemComponent.vue \n<script> \n  export default { \n    props: ['item', **'id'**] \n  } \n</script> \n\n```", "```js\n//ItemsComponent.vue \n<template> \n  <ul> \n    <item-component v-for=\"item in items\" :item=\"item\" **:id=\"id\"**>\n    </item-component> \n  </ul> \n</template> \n\n<script> \n  import ItemComponent from './ItemComponent' \n\n  export default { \n    components: { \n      ItemComponent \n    }, \n    props: ['items', 'id'] \n  } \n</script> \n\n```", "```js\n//ShoppingListComponent.vue \n<template> \n  <...> \n    <items-component :items=\"items\" **:id=\"id\"**></items-component> \n  <...> \n</template> \n\n```", "```js\n//ItemComponent.vue \n<script> \n  **import { mapActions } from 'vuex'** \n\n  export default { \n    props: ['item', 'id'], \n    **methods: mapActions(['updateList'])** \n  } \n</script> \n\n```", "```js\n//ItemComponent.vue \n<script> \n  import { mapActions } from 'vuex' \n\n  export default { \n    props: ['item', 'id'], \n    methods: mapActions(['updateList']), \n    **watch: { \n      'item.checked': function () { \n        this.updateList(this.id) \n      } \n    }** \n  } \n</script> \n\n```", "```js\n//actions.js \nexport default { \n  <...> \n  **createShoppingList: ({ commit }, shoppinglist) => { \n    api.addNewShoppingList(shoppinglist) \n  }** \n} \n\n```", "```js\n//App.vue \n<script> \n  import ShoppingListComponent from './components/ShoppingListComponent' \n  import ShoppingListTitleComponent from \n  './components/ShoppingListTitleComponent' \n  import store from './vuex/store' \n  import { mapGetters, mapActions } from 'vuex' \n\n  export default { \n    components: { \n      ShoppingListComponent, \n      ShoppingListTitleComponent \n    }, \n    computed: mapGetters({ \n      shoppinglists: 'getLists' \n    }), \n    methods: mapActions(['populateShoppingLists', \n    **'createShoppingList'**]), \n    store, \n    mounted () { \n      this.populateShoppingLists() \n    } \n  } \n</script> \n\n```", "```js\n//App.vue \nmethods: _.**extend**({}, \n    mapActions(['populateShoppingLists', 'createShoppingList']), \n    { \n      **addShoppingList ()** { \n        let list = { \n          title: 'New Shopping List', \n          items: [] \n        } \n\n        **this.createShoppingList(list)** \n      } \n    }), \n\n```", "```js\nApp.vue \n<template> \n  <div id=\"app\" class=\"container\"> \n    <ul class=\"nav nav-tabs\" role=\"tablist\"> \n      <li :class=\"index===0 ? 'active' : ''\" v-for=\"(list, index) in \n        shoppinglists\" role=\"presentation\"> \n        <shopping-list-title-component :id=\"list.id\" \n          :title=\"list.title\"></shopping-list-title-component> \n      </li> \n      **<li> \n        <a href=\"#\" @click=\"addShoppingList\"> \n          <i class=\"glyphicon glyphicon-plus-sign\"></i> \n        </a> \n      </li>** \n    </ul> \n    <div class=\"tab-content\"> \n      <div :class=\"index===0 ? 'active' : ''\" v-for=\"(list, index) in \n      shoppinglists\" class=\"tab-pane\" role=\"tabpanel\" :id=\"list.id\"> \n        <shopping-list-component :id=\"list.id\" :title=\"list.title\" \n        :items=\"list.items\"></shopping-list-component> \n      </div> \n    </div> \n  </div> \n</template> \n\n```", "```js\n//actions.js \ncreateShoppingList: (**store**, shoppinglist) => { \n  api.addNewShoppingList(shoppinglist).**then**(() => { \n    **store.dispatch('populateShoppingLists')** \n  }) \n}  \n\n```", "```js\n//action.js \ndeleteShoppingList: (store, id) => { \n  **api.deleteShoppingList(id)**.then(() => { \n    store.dispatch('populateShoppingLists') \n  }) \n} \n\n```", "```js\n//ShoppingListTitleComponent.vue \n<script> \n  **import { mapActions } from 'vuex'** \n\n  export default{ \n    props: ['id', 'title'], \n    computed: { \n      href () { \n        return '#' + this.id \n      } \n    }, \n    **methods: mapActions(['deleteShoppingList'])** \n  } \n</script> \n\n```", "```js\n//ShoppingListTitleComponent.vue \n<template> \n  <a :href=\"href\" :aria-controls=\"id\" role=\"tab\" data-toggle=\"tab\">\n    {{ title }} \n    **<i class=\"glyphicon glyphicon-remove\" \n      @click=\"deleteShoppingList(id)\"></i>** \n  </a> \n</template> \n\n```", "```js\n<style scoped> \n  i { \n    font-size: x-small; \n    padding-left: 3px; \n    cursor: pointer; \n  } \n</style> \n\n```", "```js\n// plugins/VueNoiseGenerator.js \nimport _ from 'underscore' \n\n// Thanks to this great tutorial: \n//http://noisehack.com/generate-noise-web-audio-api/ \nvar audioContext, bufferSize, noise \naudioContext = new (window.AudioContext || window.webkitAudioContext)() \n\nfunction **generateWhiteNoise** () { \n  var noiseBuffer, output \n\n  bufferSize = 2 * audioContext.sampleRate \n  noiseBuffer = audioContext.createBuffer(1, bufferSize, \n    audioContext.sampleRate) \n\n  output = noiseBuffer.getChannelData(0) \n  _.times(bufferSize, i => { \n    output[i] = Math.random() * 2 - 1 \n  }) \n\n  noise = audioContext.createBufferSource() \n  noise.buffer = noiseBuffer \n  noise.loop = true \n  noise.start(0) \n\n  return noise \n} \n\nfunction **generatePinkNoise** () { \n  bufferSize = 4096 \n  noise = (function () { \n    var b0, b1, b2, b3, b4, b5, b6, node \n    b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0 \n    node = audioContext.createScriptProcessor(bufferSize, 1, 1) \n    node.onaudioprocess = function (e) { \n      var output \n\n      output = e.outputBuffer.getChannelData(0) \n      _.times(bufferSize, i => { \n        var white = Math.random() * 2 - 1 \n        b0 = 0.99886 * b0 + white * 0.0555179 \n        b1 = 0.99332 * b1 + white * 0.0750759 \n        b2 = 0.96900 * b2 + white * 0.1538520 \n        b3 = 0.86650 * b3 + white * 0.3104856 \n        b4 = 0.55000 * b4 + white * 0.5329522 \n        b5 = -0.7616 * b5 - white * 0.0168980 \n        output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362 \n        output[i] *= 0.11 // (roughly) compensate for gain \n        b6 = white * 0.115926 \n      }) \n    } \n    return node \n  })() \n\n  return noise \n} \n\nfunction **generateBrownNoise** () { \n  bufferSize = 4096 \n\n  noise = (function () { \n    var lastOut, node \n\n    lastOut = 0.0 \n    node = audioContext.createScriptProcessor(bufferSize, 1, 1) \n    node.onaudioprocess = function (e) { \n      var output = e.outputBuffer.getChannelData(0) \n      _.times(bufferSize, i => { \n        var white = Math.random() * 2 - 1 \n        output[i] = (lastOut + (0.02 * white)) / 1.02 \n        lastOut = output[i] \n        output[i] *= 3.5 // (roughly) compensate for gain \n      }) \n    } \n    return node \n  })() \n\n  return noise \n} \n\n```", "```js\n// plugins/VueNoiseGeneratorPlugin.js \nexport default { \n  install: function (Vue) { \n    **Vue.directive('noise'**, (value) => { \n      var noise \n\n      switch (value) { \n        case **'white'**: \n          noise = **generateWhiteNoise**() \n          break \n        case **'pink'**: \n          noise = **generatePinkNoise**() \n          break \n        case **'brown'**: \n          noise = **generateBrownNoise**() \n          break \n        default: \n          noise = generateWhiteNoise() \n      } \n      noise.connect(audioContext.destination) \n      audioContext.suspend() \n    }) \n  } \n} \n\n```", "```js\n// plugins/VueNoiseGeneratorPlugin.js \nexport default { \n  install: function (Vue) { \n    Vue.directive('noise', (value) => { \n      <...> \n    }) \n    **Vue.noise** = { \n      **start** () { \n        audioContext.resume() \n      }, \n      **pause** () { \n        audioContext.suspend() \n      }, \n      **stop** () { \n        audioContext.suspend() \n      } \n    } \n  } \n} \n\n```", "```js\nimport VueNoiseGeneratorPlugin from \n'./plugins/VueNoiseGeneratorPlugin' \n\nVue.use(VueNoiseGeneratorPlugin) \n\n```", "```js\n//App.vue \n<template> \n  <div id=\"app\" class=\"container\" **v-noise=\"'brown'\"**> \n    <...> \n  </div> \n</template> \n\n```", "```js\n//mutations.js \n**import Vue from 'vue'** \n<...> \n\nexport default { \n  [types.START] (state) { \n    <...> \n    **if (state.isWorking) { \n      Vue.noise.start() \n    }** \n  }, \n<...> \n\n```", "```js\n//mutations.js \nexport default { \n  <...> \n  [types.PAUSE] (state) { \n    <...> \n    **Vue.noise.pause()** \n  }, \n  [types.STOP] (state) { \n    <...> \n    **Vue.noise.stop()** \n  } \n} \n\n```", "```js\n//mutations.js \nfunction togglePomodoro (state, toggle) { \n  if (_.isBoolean(toggle) === false) { \n    toggle = !state.isWorking \n  } \n  state.isWorking = toggle \n  **if (state.isWorking) { \n    Vue.noise.start() \n  } else { \n    Vue.noise.pause() \n  }** \n  state.counter = state.isWorking ? WORKING_TIME : RESTING_TIME \n} \n\n```", "```js\n//store.js \n<...> \nconst state = { \n  <...> \n  **soundEnabled: true** \n} \n\n//getters.js \nexport default { \n  <...> \n  **isSoundEnabled: state => state.soundEnabled** \n} \n\n```", "```js\n//mutation_types.js \n<...> \n**export const TOGGLE_SOUND = 'TOGGLE_SOUND'** \n\n```", "```js\n//mutations.js \n[types.TOGGLE_SOUND] (state) { \n  state.soundEnabled = !state.soundEnabled \n  if (state.soundEnabled) { \n    Vue.noise.start() \n  } else { \n    Vue.noise.pause() \n  } \n} \n\n```", "```js\n//actions.js \nexport default { \n  <...> \n  toggleSound: ({ commit }) => { \n    **commit(types.TOGGLE_SOUND)** \n  } \n} \n\n```", "```js\n//ControlsComponent.vue \n<script> \n  import { mapGetters, mapActions } from 'vuex' \n\n  export default { \n    computed: mapGetters(['isStarted', 'isPaused', 'isStopped', \n    **'isSoundEnabled'**]), \n    methods: mapActions(['start', 'stop', 'pause', **'toggleSound'**]) \n  } \n</script> \n\n```", "```js\nv-show=\"isStarted && !isPaused && isWorking\" \n\n```", "```js\n//ControlsComponents.vue \n<script> \n  import { mapGetters, mapActions } from 'vuex' \n\n  export default { \n    computed: mapGetters(['isStarted', 'isPaused', 'isStopped', \n    **'isWorking'**, 'isSoundEnabled']), \n    methods: mapActions(['start', 'stop', 'pause', 'toggleSound']) \n  } \n</script> \n\n```", "```js\n:class=\"{ 'glyphicon-volume-off': **isSoundEnabled**, 'glyphicon-volume-up': **!isSoundEnabled** }\" \n\n```", "```js\n@click='**toggleSound**' \n\n```", "```js\n//ControlsComponent.vue \n<template> \n  <span> \n    <...> \n    **<i class=\"toggle-volume glyphicon\" v-show=\"isStarted &&** \n **!isPaused && isWorking\" :class=\"{ 'glyphicon-volume-off':** \n **isSoundEnabled, 'glyphicon-volume-up': !isSoundEnabled }\"** \n **@click=\"toggleSound\"></i>** \n  </span> \n</template> \n\n```", "```js\n<style scoped> \n  <...> \n  **.toggle-volume { \n    float: right; \n    cursor: pointer; \n  }** \n</style> \n\n```", "```js\n//mutations.js \n[types.START](state) { \n  <...> \n  if (state.isWorking && **state.soundEnabled**) { \n    Vue.noise.start() \n  } \n}, \n\n```"]