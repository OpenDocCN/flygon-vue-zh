["```js\n//ShoppingListComponent.vue \n<template> \n  <div> \n    <...> \n    <div class=\"footer\"> \n      <hr /> \n      <change-title-component **v-model=\"title\"**></change-title-component> \n    </div> \n  </div> \n</template> \n\n```", "```js\n<template> \n  <div> \n    <em>Change the title of your shopping list here</em> \n    <input **:value=\"value\" @input=\"onInput\"**/> \n  </div> \n</template> \n\n<script> \n  export default { \n    props: [**'value'**], \n    methods: { \n      onInput (event) { \n        **this.$emit('input', event.target.value)** \n      } \n    } \n  } \n</script> \n\n```", "```js\n**[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component rerenders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \"title\"**\n\n```", "```js\n<template> \n  <a **:href=\"href\"** :aria-controls=\"id\" role=\"tab\" data-toggle=\"tab\">\n  {{ title }}</a> \n</template> \n<script> \n  export default{ \n    props: ['id', **'title'**], \n    **computed: { \n      href () { \n        return '#' + this.id \n      } \n    }** \n  } \n</script> \n\n```", "```js\n//App.vue \n<template> \n  <div id=\"app\" class=\"container\"> \n    <...> \n        <shopping-list-component **:id=\"list.id\"** : \n          :items=\"list.items\"></shopping-list-component> \n    <...> \n  </div> \n</template> \n\n```", "```js\n//ShoppingListComponent.vue \n<script> \n  <...> \n  export default { \n    <...> \n    props: [**'id'**, 'title', 'items'], \n    <...> \n  } \n</script> \n\n```", "```js\n//ShoppingListComponent.vue \n<template> \n  <...> \n      <change-title-component **:**></change-title-component> \n  <...> \n</template> \n\n//ChangeTitleComponent.vue \n<template> \n  <div> \n    <em>Change the title of your shopping list here</em> \n    <input **:value=\"title\"** @input=\"onInput\"/> \n  </div> \n</template> \n\n<script> \n  export default { \n    props: ['value', **'title'**], \n    <...> \n  } \n</script> \n\n```", "```js\n//ChangeTitleComponent.vue \n<script> \n  export default { \n    <...> \n    methods: { \n      onInput (event) { \n        this.$emit(**'changeTitle'**, event.target.value) \n      } \n    } \n  } \n</script> \n\n//ShoppingListComponent.vue \n<template> \n  <...> \n      <change-title-component :  \n        **v-on:changeTitle=\"onChangeTitle\"**></change-title-component> \n  <...> \n</template> \n\n```", "```js\n//ShoppingListComponent.vue \n<script> \n  <...> \n\n  export default { \n    <...> \n    methods: { \n      <...> \n      **onChangeTitle (text) { \n        this.$emit('changeTitle', this.id, text) \n      }** \n    } \n  } \n</script> \n\n//App.vue \n<template> \n  <...> \n  <shopping-list-component :id=\"list.id\" : \n    :items=\"list.items\" **v-on:changeTitle=\"onChangeTitle\"**>\n  </shopping-list-component> \n  <...> \n</template> \n\n```", "```js\n<script> \n  <...> \n  import _ from 'underscore' \n\n  export default { \n    <...> \n    methods: { \n      **onChangeTitle (id, text) { \n        _.findWhere(this.shoppinglists, { id: id }).title = text \n      }** \n    } \n  } \n</script> \n\n```", "```js\n**//CREATE STORE** \n//initialize state \nconst state = { \n  msg: 'Hello!' \n} \n//initialize mutations \nconst mutations = { \n  changeMessage(state, msg) { \n    state.msg = msg \n  } \n} \n//create store with defined state and mutations \nexport default new Vuex.Store({ \n  state: state \n  mutations: mutations \n}) \n\n**//CREATE VUE APP** \n<script> \n  **import store from './vuex/store'** \n  export default { \n    components: { \n      SomeComponent \n    }, \n    **store: store** \n  } \n</script> \n\n**//INSIDE SomeComponent** \n<script> \n  export default { \n    computed: { \n      msg () { \n        return **this.$store.state.msg**; \n      } \n    }, \n    methods: { \n      changeMessage () { \n        **this.$store.commit('changeMessage', newMsg);**      \n      } \n    } \n  } \n</script> \n\n```", "```js\n**vue init webpack-simple simple-store**\n\n```", "```js\n**cd simple-store npm install npm run dev**\n\n```", "```js\n<template> \n  <h1>**{{ msg }}**</h1> \n</template> \n<script> \n  export default { \n    **props: ['msg']** \n  } \n</script> \n\n```", "```js\n<template> \n  <input **v-model='msg'**> \n</template> \n<script> \n  export default { \n    **props: ['msg']** \n  } \n</script> \n\n```", "```js\n<template> \n  <div> \n    **<show-greetings-component :msg='msg'></show-greetings-component> \n    <change-greetings-component :msg='msg'></change-greetings-component>** \n  <div> \n</template> \n\n<script> \nimport ShowGreetingsComponent from './components/ShowGreetingsComponent.vue' \nimport ChangeGreetingsComponent from './components/ChangeGreetingsComponent.vue' \n\nexport default { \n  **components: { ShowGreetingsComponent, ChangeGreetingsComponent }**, \n  data () { \n    return { \n      msg: 'Hello Vue!' \n    } \n  } \n} \n</script> \n\n```", "```js\n**npm install vuex --save**\n\n```", "```js\n//store.js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n  **Vue.use(Vuex)**\n\n```", "```js\nconst state = { \n  msg: 'Hello Vue!' \n} \n\nconst mutations = { \n  changeMessage(state, msg) { \n    state.msg = msg \n  } \n} \n\n```", "```js\nexport default new Vuex.Store({ \n  state: state, \n  mutations: mutations \n}) \n\n```", "```js\n//store.js \nimport Vue from 'vue' \nimport Vuex from 'vuex' \n\nVue.use(Vuex) \nconst state = { \n  **msg: 'Hello Vue!'** \n} \nconst mutations = { \n  **changeMessage(state, msg) { \n    state.msg = msg \n  }** \n} \nexport default new Vuex.Store({ \n  **state, \n  mutations** \n}) \n\n```", "```js\n//App.vue \n<template> \n  <div> \n    <show-greetings-component></show-greetings-component> \n    <change-greetings-component></change-greetings-component> \n  </div> \n</template> \n\n<script> \nimport ShowGreetingsComponent from './components/ShowGreetingsComponent.vue' \nimport ChangeGreetingsComponent from './components/ChangeGreetingsComponent.vue' \n**import store from './vuex/store'** \n\nexport default { \n  components: {ShowGreetingsComponent, ChangeGreetingsComponent}, \n  **store** \n} \n</script>    \n\n```", "```js\n//ShowGreetingsComponent.vue \n<template> \n  <h1>{{ msg }}</h1> \n</template> \n<style> \n</style> \n<script> \n  export default { \n    **computed: { \n      msg () { \n        return this.$store.state.msg \n      } \n    }** \n  } \n</script> \n\n```", "```js\n//ChangeGreetingsComponent.vue \n<template> \n  <input v-model='msg' **@keyup='changeMsg'**> \n</template> \n<script> \n  export default { \n    computed: { \n      msg() { \n        return this.$store.state.msg \n      } \n    }, \n    **methods: { \n      changeMsg(ev) { \n        this.$store.commit('changeMessage', ev.target.value) \n      } \n    }** \n  } \n</script> \n\n```", "```js\n<template> \n  <input **:value='msg'** @keyup='changeMsg'> \n</template> \n\n```", "```js\n//getters.js \nexport default { \n  **getMessage(state) { \n    return state.msg \n  }** \n} \n\n```", "```js\n//store.js \nimport Vue from 'vue' \nimport Vuex from 'vuex' \n**import getters from './getters'** \n\nVue.use(Vuex) \n\nconst state = { \n  msg: 'Hello Vue!' \n} \n\nconst mutations = { \n  changeMessage(state, msg) { \n    state.msg = msg \n  } \n} \n\nexport default new Vuex.Store({ \n  state, mutations, **getters** \n}) \n\n```", "```js\ncomputed: { \n  msg () { \n    return **this.$store.getters.getMessage** \n  } \n}, \n\n```", "```js\n//ShowGreetingsComponent.vue \n<template> \n  <h1>**{{ getMessage }}**</h1> \n</template> \n<script> \n  **import { mapGetters } from 'vuex'** \n\n  export default { \n    **computed: mapGetters(['getMessage'])** \n  } \n</script> \n\n//ChangeGreetingsComponent.vue \n<template> \n  <input :value='**getMessage**' @keyup='changeMsg'> \n</template> \n<script> \n  **import { mapGetters } from 'vuex'** \n\n  export default { \n    **computed: mapGetters(['getMessage'])**, \n    methods: { \n      changeMsg(ev) { \n        this.$store.commit('changeMessage', ev.target.value) \n      } \n    } \n  } \n</script> \n\n```", "```js\n//ShowGreetingsComponent.vue \n<template> \n  <h1>**{{ msg }}**</h1> \n</template> \n<style> \n</style> \n<script> \n  **import { mapGetters } from 'vuex'** \n\n  export default { \n    **computed: mapGetters({ \n      msg: 'getMessage' \n    })** \n  } \n</script> \n\n//ChangeGreetingsComponent.vue \n<template> \n  <input :value='**msg**' @keyup='changeMsg'> \n</template> \n<script> \n  **import { mapGetters } from 'vuex'** \n\n  export default { \n    **computed: mapGetters({ \n      msg: 'getMessage' \n    })**, \n    methods: { \n      changeMsg(ev) { \n        this.$store.commit('changeMessage', ev.target.value) \n      } \n    } \n  } \n</script> \n\n```", "```js\n//getters.js \nexport default { \n  getMessage(state) { \n    **return (state.msg).toUpperCase()** \n  } \n} \n\n```", "```js\nconst state = { \n  **message**: 'Hello Vue!' \n} \n\nconst mutations = { \n  changeMessage(state, msg) { \n    state.**message** = msg \n  } \n} \n\n```", "```js\nexport default { \n  getMessage(state) { \n    return (**state.message**).toUpperCase() \n  } \n} \n\n```", "```js\nconst mutations = { \n  **changeMessage**(state, msg) { \n    state.message = msg \n  }, \n  **incrementCounter**(state) { \n    state.counter ++; \n  } \n} \n\n```", "```js\nstore.commit('changeMessage', 'newMessage') \nstore.commit('incrementCounter') \n\n```", "```js\n//mutation_types.js \nexport const INCREMENT_COUNTER = '**INCREMENT_COUNTER**' \nexport const CHANGE_MSG = '**CHANGE_MSG**' \n\n```", "```js\n//store.js \n<...> \n**import { CHANGE_MSG, INCREMENT_COUNTER } from './mutation_types'** \n   <...>     \nconst mutations = { \n  **[CHANGE_MSG]**(state, msg) { \n    state.message = msg \n  }, \n  **[INCREMENT_COUNTER]**(state) { \n    state.counter ++ \n  } \n} \n\n```", "```js\nthis.$store.commit(**CHANGE_MSG**, ev.target.value) \n\n```", "```js\n**//store.js** \nimport Vue from 'vue' \nimport Vuex from 'vuex' \nimport { CHANGE_MSG, INCREMENT_COUNTER } from './mutation_types' \n\nVue.use(Vuex) \n\nconst state = { \n  message: 'Hello Vue!', \n  **counter: 0** \n} \n\nconst mutations = { \n  [CHANGE_MSG](state, msg) { \n    state.message = msg \n  }, \n  **[INCREMENT_COUNTER](state) { \n    state.counter ++; \n  }** \n} \n\nexport default new Vuex.Store({ \n  state, \n  mutations \n}) \n\n```", "```js\n**//getters.js** \nexport default { \n  getMessage(state) { \n    return (state.message).toUpperCase() \n  }, \n  **getCounter(state)**\n**{**\n**return (state.counter) \n  }** \n} \n\n```", "```js\n<template> \n  <div> \n    <h1>{{ msg }}</h1> \n    **<div>the message was changed {{ counter }} times</div>** \n  </div> \n</template> \n<script> \n  import { mapGetters } from 'vuex' \n\n  export default { \n    computed: mapGetters({ \n      msg: 'getMessage', \n      **counter: 'getCounter'** \n    }) \n  } \n</script> \n\n```", "```js\n**//actions.js** \nimport { CHANGE_MSG, INCREMENT_COUNTER } from './mutation_types'\n\nexport const changeMessage = (store, msg) => { \n store.commit(CHANGE_MSG, msg)\n}\nexport const incrementCounter = (store) => { \n store.commit(INCREMENT_COUNTER)\n}\n\n```", "```js\n**//actions.js** \nimport **{ CHANGE_MSG, INCREMENT_COUNTER }** from './mutation_types' \n\nexport default { \n  changeMessage (**{ commit }**, msg) { \n    **commit(CHANGE_MSG, msg)** \n  }, \n  incrementCounter (**{ commit }**) { \n    **commit(INCREMENT_COUNTER)** \n  } \n} \n\n```", "```js\n// ChangeGreetingsComponent.vue \n<template> \n  <input :value=\"msg\" @keyup=\"changeMsg\"> \n</template> \n<script> \n  import { mapGetters } from 'vuex' \n\n  export default { \n    computed: mapGetters({ \n      msg: 'getMessage' \n    }), \n    methods: { \n      changeMsg(ev) { \n        **this.$store.dispatch('changeMessage', ev.target.value)** \n      } \n    } \n  } \n</script> \n\n```", "```js\n//ChangeGreetingsComponent.vue \n<template> \n  <input :value=\"msg\" @keyup=\"**changeMessage**\"> \n</template> \n<script> \n  import { mapGetters } from 'vuex' \n  **import { mapActions } from 'vuex'** \n\n  export default { \n    computed: mapGetters({ \n      msg: 'getMessage' \n    }), \n    methods:  mapActions([**'changeMessage'**, **'incrementCounter'**]) \n  } \n</script> \n\n```", "```js\n//ChangeGreetingsComponent.vue \n<template> \n  <input :value=\"msg\" **@keyup=\"changeMessage($event.target.value)\"**> \n</template>  \n\n```", "```js\n<template> \n  <input :value=\"msg\" @keyup=\"changeMessage\" \n  **@keyup.enter=\"incrementCounter\"**> \n</template> \n\n```", "```js\n//actions.js \nhandleMessageInputChanges ({ commit }, event) { \n  **commit(CHANGE_MSG, event.target.value)** \n  if (event.keyCode === 13) { \n    **commit(INCREMENT_COUNTER)** \n  } \n} \n\n```", "```js\n//ChangeGreetingsComponent.vue \n<template> \n  <input :value=\"msg\" **@keyup=\"handleMessageInputChanges($event)\"** /> \n</template> \n<script> \n  import { mapGetters, mapActions } from 'vuex' \n\n  export default { \n    computed: mapGetters({ \n      msg: 'getMessage' \n    }), \n    **methods:  mapActions(['handleMessageInputChanges'])** \n  } \n</script> \n\n```", "```js\n**npm install vuex --save** \n\n```", "```js\n//store.js \nimport Vue from 'vue' \nimport Vuex from 'vuex' \nimport getters from './getters' \nimport actions from './actions' \nimport mutations from './mutations' \n\nVue.use(Vuex) \n\nconst state = { \n} \n\nexport default new Vuex.Store({ \n  state,  \n  mutations,  \n  getters,  \n  actions \n}) \n\n```", "```js\n//App.vue \n<script> \n  <...> \n  import store from './vuex/store' \n\n  export default { \n    store, \n    <...> \n  } \n</script> \n\n```", "```js\n//store.js \n<...> \nconst state = { \n  **shoppinglists**: [ \n    { \n      id: 'groceries', \n      title: 'Groceries', \n      items: [{ text: 'Bananas', checked: true }, \n              { text: 'Apples', checked: false }] \n    }, \n    { \n      id: 'clothes', \n      title: 'Clothes', \n      items: [{ text: 'black dress', checked: false }, \n              { text: 'all-stars', checked: false }] \n    } \n  ] \n} \n\n<...> \n\n```", "```js\n//getters.js \nexport default { \n  getLists: state => state.shoppinglists \n} \n\n```", "```js\n//App.vue \n<script> \n  import ShoppingListComponent from './components/ShoppingListComponent' \n  import ShoppingListTitleComponent from  \n  './components/ShoppingListTitleComponent' \n  import _ from 'underscore' \n  **import store from './vuex/store' \n  import { mapGetters } from 'vuex'** \n\n  export default { \n    components: { \n      ShoppingListComponent, \n      ShoppingListTitleComponent \n    }, \n    **computed: mapGetters({ \n      shoppinglists: 'getLists' \n    }),** \n    methods: { \n      onChangeTitle (id, text) { \n        _.findWhere(this.shoppinglists, { id: id }).title = text \n      } \n    }, \n    store \n  } \n</script> \n\n```", "```js\n//ShoppingListComponent.vue \n<template> \n  <...> \n      <change-title-component : **:id=\"id\"** v- \n        on:changeTitle=\"onChangeTitle\"></change-title-component> \n  <...> \n</template> \n\n```", "```js\n//ChangeTitleComponent.vue \n<script> \n  export default { \n    props: ['title', **'id'**], \n    <...> \n  } \n</script> \n\n```", "```js\n//mutations.js \n<...> \nfunction findById (state, id) { \n  return **_.findWhere(state.shoppinglists, { id: id })** \n} \n<...> \n\n```", "```js\n//mutation_types.js \nexport const **CHANGE_TITLE** = 'CHANGE_TITLE' \n\n//mutations.js \nimport _ from 'underscore' \n**import * as types from './mutation_types'** \n\nfunction findById (state, id) { \n  return _.findWhere(state.shoppinglists, { id: id }) \n} \n\nexport default { \n  **[types.CHANGE_TITLE] (state, data) { \n    findById(state, data.id).title = data.title \n  }** \n} \n\n```", "```js\n//actions.js \nimport { CHANGE_TITLE } from './mutation_types' \n\nexport default { \n  changeTitle: ({ commit }, data) => { \n    **commit(CHANGE_TITLE, data)** \n  } \n} \n\n```", "```js\n//ChangeTitleComponent.vue \n<template> \n  <div> \n    <em>Change the title of your shopping list here</em> \n    <input :value=\"title\" **@input=\"onInput({ title: $event.target.value,** \n **id: id })\"**/> \n  </div> \n</template> \n\n<script> \n  **import { mapActions } from 'vuex'** \n\n  export default { \n    props: ['title', 'id'], \n    **methods: mapActions({ \n      onInput: 'changeTitle' \n    })** \n  } \n</script> \n\n```", "```js\n//store.js \n<...> \nconst state = { \n  **started**: false, \n  **paused**: false, \n  **stopped**: false \n} \n<...> \n\n```", "```js\n//getters.js \nexport default { \n  **isStarted**: state => state.started, \n  **isPaused**: state => state.paused, \n  **isStopped**: state => state.stopped \n} \n\n```", "```js\n//ControlsComponent.vue \n<script> \n  **import { mapGetters } from 'vuex'** \n\n  export default { \n    **computed: mapGetters(['isStarted', 'isPaused', 'isStopped'])** \n  } \n</script> \n\n```", "```js\n//ControlsComponent.vue \n<template> \n  <span> \n    <button  **:disabled='isStarted && !isPaused'**> \n      <i class=\"glyphicon glyphicon-play\"></i> \n    </button> \n    <button  **:disabled='!isStarted || isPaused'**> \n      <i class=\"glyphicon glyphicon-pause\"></i> \n    </button> \n    <button  **:disabled='!isStarted'**> \n      <i class=\"glyphicon glyphicon-stop\"></i> \n    </button> \n  </span> \n</template> \n\n```", "```js\n //ControlsComponent.vue \n <style scoped> \n  **button:disabled i { \n    color: gray; \n  }** \n</style> \n\n```", "```js\n//mutation_types.js \nexport const START = 'START' \nexport const PAUSE = 'PAUSE' \nexport const STOP = 'STOP' \n\n```", "```js\n//mutations.js \nimport * as types from './mutation_types' \n\nexport default { \n  [types.START] (state) { \n    state.started = true \n    state.paused = false \n    state.stopped = false \n  }, \n  [types.PAUSE] (state) { \n    state.paused = true \n    state.started = true \n    state.stopped = false \n  }, \n  [types.STOP] (state) { \n    state.stopped = true \n    state.paused = false \n    state.started = false \n  } \n} \n\n```", "```js\n//actions.js \nimport * as types from './mutation_types' \n\nexport default { \n  start: ({ commit }) => { \n    **commit(types.START)** \n  }, \n  pause: ({ commit }) => { \n    **commit(types.PAUSE)** \n  }, \n  stop: ({ commit }) => { \n    **commit(types.STOP)** \n  } \n} \n\n```", "```js\n@click='someAction' \n\n```", "```js\n//ControlsComponent.vue \n<script> \n  **import { mapGetters, mapActions } from 'vuex'** \n\n  export default { \n    computed: mapGetters(['isStarted', 'isPaused', 'isStopped']), \n    **methods: mapActions(['start', 'stop', 'pause'])** \n  } \n</script> \n\n```", "```js\n//ControlsComponent.vue \n<template> \n  <span> \n    <button  :disabled='isStarted && !isPaused'\n    **@click=\"start\"**> \n      <i class=\"glyphicon glyphicon-play\"></i> \n    </button> \n    <button  :disabled='!isStarted || isPaused' \n    **@click=\"pause\"**> \n      <i class=\"glyphicon glyphicon-pause\"></i> \n    </button> \n    <button  :disabled='!isStarted' **@click=\"stop\"**> \n      <i class=\"glyphicon glyphicon-stop\"></i> \n    </button> \n  </span> \n</template> \n\n```", "```js\n**//config.js** \nexport const WORKING_TIME = **20 * 60** \nexport const RESTING_TIME = **5 * 60** \n\n```", "```js\n//store.js \n<...> \nimport { WORKING_TIME } from '../config' \n\nconst state = { \n  started: false, \n  paused: false, \n  stopped: false, \n  **isWorking: true, \n  counter: WORKING_TIME** \n} \n\n```", "```js\n//getters.js \nexport default { \n  isStarted: state => state.started, \n  isPaused: state => state.paused, \n  isStopped: state => state.stopped, \n  **isWorking: state => state.isWorking** \n} \n\n```", "```js\n//App.vue \n<script> \n<...> \n**import { mapGetters } from 'vuex'** \n\nexport default { \n  <...> \n  **computed: mapGetters({ \n    isworking: 'isWorking' \n  }),** \n  store \n} \n</script> \n\n```", "```js\n//StateTitleComponent.vue \n<script> \n  **import { mapGetters } from 'vuex'** \n\n  export default { \n    data () { \n      return { \n        workingtitle: 'Work!', \n        restingtitle: 'Rest!' \n      } \n    }, \n    **computed: mapGetters({ \n      isworking: 'isWorking' \n    })** \n  } \n</script> \n\n```", "```js\n//getters.js \nexport default { \n  <...> \n  **getMinutes**: state => **Math.floor(state.counter / 60)**, \n  **getSeconds**: state => **state.counter % 60** \n} \n\n```", "```js\n//CountdownComponent.vue \n<script> \n  **import { mapGetters } from 'vuex'** \n\n  export default { \n    **computed: mapGetters({ \n      min: 'getMinutes', \n      sec: 'getSeconds' \n    })** \n  } \n</script> \n\n```", "```js\n//mutations.js \nfunction togglePomodoro (state, toggle) { \n  if (_.isBoolean(toggle) === false) { \n    toggle = **!state.isWorking** \n  } \n  **state.isWorking = toggle \n  state.counter = state.isWorking ? WORKING_TIME : RESTING_TIME** } \n\n```", "```js\n//mutations.js \nimport _ from 'underscore' \nimport { WORKING_TIME, RESTING_TIME } from './config' \n\n```", "```js\n//mutations.js \nfunction tick (state) { \n  if (state.counter === 0) { \n    togglePomodoro(state) \n  } \n  state.counter-- \n} \n\n```", "```js\n//store.js \nconst state = { \n  <...> \n  interval: null \n} \n\n```", "```js\n//mutations.js \nexport default { \n  [types.START] (state) { \n    state.started = true \n    state.paused = false \n    state.stopped = false \n    **state.interval = setInterval(() => tick(state), 1000)** \n  }, \n  <...> \n} \n\n```", "```js\n//mutations.js \nexport default { \n  [types.START] (state) { \n    state.started = true \n    state.paused = false \n    state.stopped = false \n    **state.interval = setInterval(() => tick(state), 1000)** \n  }, \n  [types.PAUSE] (state) { \n    state.paused = true \n    state.started = true \n    state.stopped = false \n    **clearInterval(state.interval)** \n  }, \n  [types.STOP] (state) { \n    state.stopped = true \n    state.paused = false \n    state.started = false \n    **togglePomodoro(state, true)** \n  } \n} \n\n```", "```js\n//store.js \nconst state = { \n  <...> \n  **timestamp: 0** \n} \n\n```", "```js\n//mutations.js \nfunction tick(state) { \n  <...> \n  **state.timestamp = new Date().getTime()** \n} \n\n```", "```js\n//getters.js \nexport default { \n  <...> \n  **getTimestamp: state => state.timestamp** \n} \n\n//KittensComponent.vue \n<script> \n  export default { \n    computed: { \n      catimgsrc () { \n        return 'http://thecatapi.com/api/images/get?size=med**&ts='** \n **+ this.$store.getters.getTimestamp** \n      } \n    } \n  } \n</script> \n\n```", "```js\n//config.js \nexport const WORKING_TIME = 0.1 * 60 \nexport const RESTING_TIME = 5 * 60 \n**export const KITTEN_TIME = 5** //each kitten is visible for 5 seconds \n\n```", "```js\n//mutations.js \nimport { WORKING_TIME, RESTING_TIME, **KITTEN_TIME** } from './config' \n<...> \nfunction tick(state) { \n  <...> \n  **if (state.counter % KITTEN_TIME === 0) { \n    state.timestamp = new Date().getTime() \n  }** \n} \n\n```"]