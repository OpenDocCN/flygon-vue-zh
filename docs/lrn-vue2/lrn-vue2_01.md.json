["```js\n<div class=\"container\"> \n  <h2>My Shopping List</h2> \n  <div class=\"input-group\"> \n    <input placeholder=\"add shopping list item\"        \n      type=\"text\" class=\"js-new-item form-control\"> \n    <span class=\"input-group-btn\"> \n      <button @click=\"addItem\" class=\"js-add btn btn-default\"          \n        type=\"button\">Add!</button> \n    </span> \n  </div> \n  <ul> \n    <li> \n      <div class=\"checkbox\"> \n        <label> \n          <input class=\"js-item\" name=\"list\"              \n            type=\"checkbox\"> Carrot \n        </label> \n      </div> \n    </li> \n    <li> \n      <div class=\"checkbox\"> \n        <label> \n          <input class=\"js-item\" name=\"list\" type=\"checkbox\"> Book \n        </label> \n      </div> \n    </li> \n    <li class=\"removed\"> \n      <div class=\"checkbox\"> \n        <label> \n          <input class=\"js-item\" name=\"list\" type=\"checkbox\"              \n            checked> Gift for aunt's birthday \n        </label> \n      </div> \n    </li> \n  </ul> \n</div> \n\n```", "```js\n.container { \n  width: 40%; \n  margin: 20px auto 0px auto; \n} \n\n.removed { \n  color: gray; \n} \n\n.removed label { \n  text-decoration: line-through; \n} \n\nul li { \n  list-style-type: none; \n} \n\n```", "```js\n$(document).ready(function () { \n  /** \n   * Add button click handler \n   */ \n  function onAdd() { \n    var $ul, li, $li, $label, $div, value; \n\n    value = $('.js-new-item').val(); \n    //validate against empty values \n    if (value === '') { \n      return; \n    } \n    $ul = $('ul'); \n    $li = $('<li>').appendTo($ul); \n    $div = $('<div>') \n        .addClass('checkbox') \n        .appendTo($li); \n    $label = $('<label>').appendTo($div); \n    $('<input>') \n        .attr('type', 'checkbox') \n        .addClass('item') \n        .attr('name', 'list') \n        .click(toggleRemoved) \n        .appendTo($label); \n    $label \n        .append(value); \n    $('.js-new-item').val(''); \n  } \n\n  /** \n   * Checkbox click handler - \n   * toggles class removed on li parent element \n   * @param ev \n   */ \n  function toggleRemoved(ev) { \n    var $el; \n\n    $el = $(ev.currentTarget); \n    $el.closest('li').toggleClass('removed'); \n  } \n\n  $('.js-add').click(onAdd); \n  $('.js-item').click(toggleRemoved); \n}); \n\n```", "```js\n<div class=\"container\"> \n  <h2>My Shopping List</h2> \n  <!-- ... --> \n  <div class=\"footer\"> \n    <hr/> \n    <em>Change the title of your shopping list here</em> \n    <input class=\"js-change-title\" type=\"text\"\n      value=\"My Shopping List\"/> \n  </div> \n</div> \n\n//And javascript code: \nfunction onChangeTitle() { \n  $('h2').text($('.js-change-title').val()); \n} \n$('.js-change-title').keyup(onChangeTitle); \n\n```", "```js\n<script  src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.0.3/vue.js\">  </script> \n\n```", "```js\n<div id=\"app\" class=\"container\"> \n  <h2>{{ title }}</h2> \n  <ul> \n    <li>{{ items[0] }}</li> \n    <li>{{ items[1] }}</li> \n  </ul> \n</div> \n\n```", "```js\nvar data = { \n  items: ['Bananas', 'Apples'], \n  title: 'My Shopping List' \n}; \n\nnew Vue({ \n  el: '#app', \n  data: data \n}); \n\n```", "```js\n<div id=\"app\" class=\"container\"> \n  <h2>{{ title }}</h2> \n  <ul> \n    <li>{{ items[0] }}</li> \n    <li>{{ items[1] }}</li> \n  </ul> \n  <div class=\"footer\"> \n    <hr/> \n    <em>Change the title of your shopping list here</em> \n    <input v-model=\"title\"/> \n  </div> \n</div> \n\n```", "```js\n  <ul> \n    <li v-for=\"item in items\">{{ item }}</li> \n  </ul> \n\n```", "```js\nvar data = { \n  items: [{ text: 'Bananas', checked: true },    \n          { text: 'Apples',  checked: false }], \n  title: 'My Shopping List', \n  newItem: '' \n}; \n\n```", "```js\n<ul> \n  <li v-for=\"item in items\" v-bind:class=\"{ 'removed':      \n    item.checked }\"> \n    <div class=\"checkbox\"> \n      <label> \n        <input type=\"checkbox\" v-model=\"item.checked\"> {{            \n          item.text }} \n      </label> \n    </div> \n  </li> \n</ul>  \n\n```", "```js\nvar data = { \n  items: [{ text: 'Bananas', checked: true },    \n          { text: 'Apples', checked: false }], \n  title: 'My Shopping List', \n  **newItem: ''** \n}; \nnew Vue({ \n  el: '#app', \n  data: data, \n  **methods: { \n    addItem: function () { \n      var text; \n\n      text = this.newItem.trim(); \n      if (text) { \n        this.items.push({ \n          text: text, \n          checked: false \n        }); \n        this.newItem = ''; \n      } \n    }** \n  } \n}); \n\n```", "```js\n<div class=\"input-group\"> \n  <input v-model=\"newItem\" **v-on:keyup.enter=\"addItem\"**      \n    placeholder=\"add shopping list item\" type=\"text\" class=\"form-      \n    control\"> \n  <span class=\"input-group-btn\"> \n    <button **v-on:click=\"addItem\"** class=\"btn btn-default\"            \n      type=\"button\">Add!</button> \n  </span> \n</div> \n\n```", "```js\n<div id=\"app\" class=\"container\"> \n  <h2>{{ title }}</h2> \n  <div class=\"input-group\"> \n    <input v-model=\"newItem\" @keyup.enter=\"addItem\"        \n      placeholder=\"add shopping list item\" type=\"text\" \n      class=\"form-control\"> \n  <span class=\"input-group-btn\"> \n    <button @click=\"addItem\" class=\"btn btn-default\"        \n      type=\"button\">Add!</button> \n  </span> \n  </div> \n  <ul> \n    <li v-for=\"item in items\" :class=\"{ 'removed': item.checked      \n      }\"> \n      <div class=\"checkbox\"> \n        <label> \n          <input type=\"checkbox\" v-model=\"item.checked\"> {{              \n            item.text }} \n        </label> \n      </div>     \n    </li> \n  </ul> \n  <div class=\"footer hidden\"> \n    <hr/> \n    <em>Change the title of your shopping list here</em> \n    <input v-model=\"title\"/> \n  </div> \n</div> \n\n```", "```js\nvar data = { \n  items: [{ text: 'Bananas', checked: true },    \n          { text: 'Apples', checked: false }], \n  title: 'My Shopping List', \n  newItem: '' \n}; \n\nnew Vue({ \n  el: '#app', \n  data: data, \n  methods: { \n    addItem: function () { \n      var text; \n\n      text = this.newItem.trim(); \n      if (text) { \n        this.items.push({ \n          text: text, \n          checked: false \n        }); \n        this.newItem = ''; \n      } \n    } \n  } \n}); \n\n```", "```js\n<div id=\"pronouns\"> \n    <p><strong>Check yourself :)</strong></p> \n    <textarea class=\"textarea\" v-model=\"text\" v-      \n      on:keyup=\"checkText\"> \n        {{ text }} \n    </textarea><i  v-bind:class=\"{ 'correct': correct,      \n      'incorrect': !correct }\"></i> \n</div> \n\n```", "```js\n$(document).ready(function() { \n  var initialText, correctText; \n\n  initialText = 'Me is sad because he is more clever than I.'; \n  correctText = 'I am sad because he is more clever than me.'; \n\n  new Vue({ \n    el: '#pronouns', \n    data: { \n      text: initialText, \n      correct: false \n    }, \n    methods: { \n      checkText: function () { \n        var text; \n        text = this.text.trim(); \n        this.correct = text === correctText; \n      } \n    } \n  }); \n}); \n\n```", "```js\n    **git clone https://github.com/ilyashubin/FilterBlend.git**\n\n    ```", "```js\n    **cd FilterBlend**\n\n    ```", "```js\n    **npm install**\n\n    ```", "```js\n    **gulp**\n\n    ```", "```js\nconst POMODORO_STATES = { \n  WORK: 'work', \n  REST: 'rest' \n}; \nconst WORKING_TIME_LENGTH_IN_MINUTES = 25; \nconst RESTING_TIME_LENGTH_IN_MINUTES = 5; \n\nnew Vue({ \n  el: '#app', \n  data: { \n    minute: WORKING_TIME_LENGTH_IN_MINUTES, \n    second: 0, \n    pomodoroState: POMODORO_STATES.WORK, \n    timestamp: 0 \n  }, \n  methods: { \n    start: function () { \n      this._tick(); \n      this.interval = setInterval(this._tick, 1000); \n    }, \n    _tick: function () { \n      //if second is not 0, just decrement second \n      if (**this.second** !== 0) { \n        **this.second**--; \n        return; \n      } \n      //if second is 0 and minute is not 0,        \n      //decrement minute and set second to 59 \n      if (**this.minute** !== 0) { \n        **this.minute**--; \n        **this.second** = 59; \n        return; \n      } \n      //if second is 0 and minute is 0,        \n      //toggle working/resting intervals \n      this.pomodoroState = this.pomodoroState ===        \n      POMODORO_STATES.WORK ? POMODORO_STATES.REST :        \n      POMODORO_STATES.WORK; \n      if (this.pomodoroState === POMODORO_STATES.WORK) { \n        **this.minute** = WORKING_TIME_LENGTH_IN_MINUTES; \n      } else { \n        **this.minute** = RESTING_TIME_LENGTH_IN_MINUTES; \n      } \n    } \n  } \n}); \n\n```", "```js\n<div id=\"app\" class=\"container\"> \n  <h2> \n    <span>Pomodoro</span> \n    <button  **@click=\"start()\"**> \n      <i class=\"glyphicon glyphicon-play\"></i> \n    </button> \n  </h2> \n  <div class=\"well\"> \n    <div class=\"pomodoro-timer\"> \n      <span>**{{ minute }}**</span>:<span>{{ second }}</span> \n    </div> \n  </div> \n</div> \n\n```", "```js\ndata: { \n  //... \n}, \ncomputed: { \n  title: function () { \n    return this.pomodoroState === POMODORO_STATES.WORK ? 'Work!' :      \n    'Rest!' \n  } \n}, \nmethods: { \n//... \n\n```", "```js\n  <h2> \n    <span>Pomodoro</span> \n    <!--!> \n  </h2> \n  **<h3>{{ title }}</h3>** \n  <div class=\"well\"> \n\n```", "```js\ncomputed: { \n  title: function () { \n    return this.pomodoroState === POMODORO_STATES.WORK ? 'Work!' :      \n    'Rest!' \n  }, \n  **min**: function () { \n    if (this.minute < 10) { \n      return '0' + this.minute; \n    } \n\n    return this.minute; \n  }, \n  **sec**: function () { \n    if (this.second < 10) { \n      return '0' + this.second; \n    } \n\n    return this.second; \n  } \n} \n\n```", "```js\n   <div class=\"pomodoro-timer\"> \n    <span>**{{ min }}**</span>:<span>{{ sec }}</span> \n   </div> \n\n```", "```js\n**const POMODORO_STATES = { \n  WORK: 'work', \n  REST: 'rest' \n}; \nconst STATES = { \n  STARTED: 'started', \n  STOPPED: 'stopped', \n  PAUSED: 'paused' \n};** \n//<...> \nnew Vue({ \n  el: '#app', \n  data: { \n    **state: STATES.STOPPED**, \n    //<...> \n  }, \n  //<...> \n  methods: { \n    start: function () { \n      **this.state = STATES.STARTED**; \n      this._tick(); \n      this.interval = setInterval(this._tick, 1000); \n    }, \n    **pause**: function () { \n      **this.state = STATES.PAUSED;** \n      clearInterval(this.interval); \n    }, \n    **stop**: function () { \n      **this.state = STATES.STOPPED;** \n      clearInterval(this.interval);  \n      this.pomodoroState = POMODORO_STATES.WORK; \n      this.minute = WORKING_TIME_LENGTH_IN_MINUTES; \n      this.second = 0; \n    }, \n    //<...> \n  } \n}); \n\n```", "```js\n    <button **:disabled=\"state==='started'\"**\n**@click=\"start()\"**> \n      <i class=\"glyphicon glyphicon-play\"></i> \n    </button> \n    <button **:disabled=\"state!=='started'\"       \n      @click=\"pause()\"**> \n      <i class=\"glyphicon glyphicon-pause\"></i> \n    </button> \n    <button **:disabled=\"state!=='started' && state !== 'paused'\"      \n       @click=\"stop()\"**> \n      <i class=\"glyphicon glyphicon-stop\"></i> \n    </button> \n\n```"]