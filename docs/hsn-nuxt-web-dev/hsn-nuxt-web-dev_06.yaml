- en: Adding Views, Routes, and Transitions
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 添加视图、路由和过渡
- en: You created some simple pages, routes, and even layouts in the previous chapter
    for working with frontend UI frameworks and libraries, but they are just very
    basic ones. So, in this chapter, we will dive deeper into each of them, as well
    as templates in Nuxt. You will customize the default template and layout and create custom
    ones. You will also learn how to customize global meta tags and add specific ones
    to the individual pages of your appchild page. This is useful if the information
    of. You will create CSS and JavaScript transitions and animations for transitioning
    pages. So, by the end of this chapter, you will be able to deliver a simple yet
    fully functioning web app or website (with somedummy data) from what you will
    learn in this chapter and what you already learned in the previous chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，您为前端UI框架和库创建了一些简单的页面、路由，甚至布局，但它们只是非常基本的。因此，在本章中，我们将深入研究每一个，以及Nuxt中的模板。您将自定义默认模板和布局，并创建自定义模板。您还将学习如何自定义全局meta标签，并将特定的meta标签添加到应用程序的各个页面。如果信息是有用的。您将为页面过渡创建CSS和JavaScript过渡和动画。因此，在本章结束时，您将能够通过本章学到的知识以及在上一章中学到的知识，交付一个简单但完全功能的Web应用程序或网站（带有一些虚拟数据）。
- en: 'The topics we will cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题如下：
- en: Creating custom routes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义路由
- en: Creating custom views
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义视图
- en: Creating custom transitions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义过渡
- en: Creating custom routes
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义路由
- en: If we are going to understand how a router works in Nuxt, we should first understand
    how it works in Vue. We can then understand how to implement it in our Nuxt app.
    Custom routes in a traditional Vue app are created via Vue Router. So, let's begin
    by understanding what Vue Router is.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要了解Nuxt中路由器的工作原理，我们首先应该了解它在Vue中的工作原理。然后我们可以理解如何在我们的Nuxt应用程序中实现它。传统Vue应用程序中的自定义路由是通过Vue
    Router创建的。因此，让我们首先了解一下Vue Router是什么。
- en: Introducing Vue Router
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Vue Router
- en: 'Vue Router is a Vue plugin that allows you to create robust routes for navigating
    between pages in a single-page application (SPA) without having to refresh the
    page. A quick use is, for example, if we want to have a `User` component that
    is used for all users but with different user IDs. You can use this component
    as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Router是一个Vue插件，允许您在单页面应用程序（SPA）中创建强大的路由，而无需刷新页面即可在页面之间导航。一个快速的用法是，例如，如果我们想要一个用于所有用户但具有不同用户ID的`User`组件。您可以如下使用此组件：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, any `/user` route followed by an ID (for example, `/user/1`
    or `user/2`) will be directed to the `User` component, which will render the template
    with the ID. This is only possible when the Vue plugin is installed, so let's
    see how we can install it for Vue apps in the next section, before learning how
    it works in a Nuxt app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，任何以`/user`开头的路由后跟一个ID（例如，`/user/1`或`user/2`）将被定向到`User`组件，该组件将使用该ID呈现模板。这仅在安装了Vue插件时才可能，因此让我们看看如何在下一节为Vue应用程序安装它，然后学习它在Nuxt应用程序中的工作原理。
- en: For more information about Vue Router, visit [https://router.vuejs.org/](https://router.vuejs.org/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Vue Router的更多信息，请访问[https://router.vuejs.org/](https://router.vuejs.org/)。
- en: Installing Vue Router
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Vue Router
- en: 'In Vue, you must *explicitly* install Vue Router to create routes in a traditional
    Vue app. Even if you are using Vue CLI (which we will cover in [Chapter 11](b24caa1b-6337-40ee-9c1a-c8586db1f3b2.xhtml),
    *Writing Route Middlewares and Server Middlewares*), you must select Manually
    select features to pick Router from the options that you are prompted to select,
    to choose the features you need. So, let''s take a look at how you can install
    it *manually* in this section. There are two options to install Vue Router:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中，您必须*显式*安装Vue Router以在传统的Vue应用程序中创建路由。即使您使用Vue CLI（我们将在[第11章](b24caa1b-6337-40ee-9c1a-c8586db1f3b2.xhtml)中介绍*编写路由中间件和服务器中间件*），您也必须选择手动选择功能以从提示您选择的选项中选择Router，以选择您需要的功能。因此，让我们看看如何在本节中*手动*安装它。安装Vue
    Router有两种选项：
- en: 'You can use npm:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用npm：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, in the app root, explicitly import `vue-router` via `Vue.use()`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在应用程序根目录中，通过`Vue.use()`显式导入`vue-router`：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Alternatively, you can use CDN or direct download:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，您可以使用CDN或直接下载：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you are using CDN, simply add `vue-router` after the Vue core and the rest
    of the installation will be taken care of by itself. Once you are done installing
    Vue Router, you can use it to create routes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用CDN，只需在Vue核心之后添加`vue-router`，其余安装将自行处理。安装Vue Router完成后，您可以使用它创建路由。
- en: Creating routes with Vue Router
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Vue Router创建路由
- en: 'If you are using the CDN option, then first of all, create a `.html` file in
    your project root with the following basic HTML structure and include the CDN
    links in the `<head>` block:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用CDN选项，首先在项目根目录中创建一个`.html`文件，其中包含以下基本HTML结构，并在`<head>`块中包含CDN链接：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After that, you can get Vue Router started very quickly by following these
    steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以通过以下步骤快速启动Vue Router：
- en: 'Create the app base with the following markups in the `<body>` block:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<body>`块中使用以下标记创建应用程序基础：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `<router-link>` component is used to specify the target location and will
    be rendered as the `<a>` tag with `href`, while the `<router-view>` component
    is used to render the requested content, which is the Vue component that we are
    going to create in the next step.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`<router-link>`组件用于指定目标位置，并将呈现为带有`href`的`<a>`标记，而`<router-view>`组件用于呈现请求的内容，这是我们将在下一步中创建的Vue组件。'
- en: 'Define two Vue components in the `<script>` block:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<script>`块中定义两个Vue组件：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a constant variable called `routes` and add the Vue component to the
    `component` property with the path that matches the link in `<router-link>`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`routes`的常量变量，并将Vue组件添加到`component`属性中，该属性与`<router-link>`中的链接匹配：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a router instance using the `new` operator and pass in the `routes`
    constant:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`new`运算符创建路由实例，并传入`routes`常量：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that `route` in the preceding code block is a short form (shorthand property
    name) for `routes: routes` in ES6/ES2015. For more information about the shorthand
    property name, please visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，上述代码块中的`route`是ES6/ES2015中`routes: routes`的简写形式（简写属性名称）。有关简写属性名称的更多信息，请访问[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer)。'
- en: 'Create a Vue instance using the `new` operator and pass in the `router` instance,
    and then mount the `#app` element to the root instance:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`new`运算符创建Vue实例，并传入`router`实例，然后将`#app`元素挂载到根实例：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Run the app in your browser, then you should see the About and Contact links
    on your screen. When you navigate to `/about` and `/contact`, you should see that
    their components are successfully rendered as expected on your screen.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中运行应用程序，然后您应该在屏幕上看到关于和联系链接。当您导航到`/about`和`/contact`时，您应该看到它们的组件如预期般成功呈现在屏幕上。
- en: You can find the code for the preceding the app in `/chapter-4/vue/vue-route/basic.html`
    in our GitHub repository and run it in your favorite browser to see how it works.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库中的`/chapter-4/vue/vue-route/basic.html`中找到前面应用的代码，并在您喜欢的浏览器中运行它，以查看它的工作原理。
- en: Now, let's explore how Nuxt generates the preceding routes for us via Vue Router.
    The process of creating routes in Nuxt is simpler because `vue-router` comes out
    of the box in Nuxt. That means that technically, you skip the preceding installation
    step in the traditional Vue app. You also skip the preceding JavaScript steps
    – *steps* *3* to *5*. Nuxt will scan the `.vue` file tree in the `/pages/` directory
    and generate the routes for you automatically. So, let's explore how Nuxt creates
    and handles routes for you. We will first begin by creating basic routes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索Nuxt如何通过Vue Router为我们生成前面的路由。在Nuxt中创建路由的过程更简单，因为`vue-router`在Nuxt中已经预装。这意味着从技术上讲，您可以跳过传统Vue应用程序中的安装步骤。您还可以跳过前面的JavaScript步骤-步骤3到5。Nuxt将自动扫描`/pages/`目录中的`.vue`文件树，并为您生成路由。因此，让我们探索Nuxt如何为您创建和处理路由。我们将首先开始创建基本路由。
- en: Creating basic routes
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基本路由
- en: 'Basic routes are created by simply adding `.vue` files with fixed filenames
    to the `/pages/` directory. You can also create sub-routes by organizing `.vue`
    files into different folders. Take the following example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 基本路由是通过简单地将具有固定文件名的`.vue`文件添加到`/pages/`目录中来创建的。您还可以通过将`.vue`文件组织到不同的文件夹中来创建子路由。接下来看一个例子：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, Nuxt will generate the following routes for you without you having to
    write any of them:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Nuxt将为您生成以下路由，而无需您编写任何路由：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can find this example app in `/chapter-4/nuxt-universal/routing/basic-routes/`
    in our GitHub repository.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库中的`/chapter-4/nuxt-universal/routing/basic-routes/`中找到此示例应用程序。
- en: You should be familiar with these basic routes from the previous chapter. This
    type of route is good for top-level pages, such as `/about`, `/contact`, and `/posts`.
    However, if you have multiple subpages in each of these top-level pages and they
    will increase dynamically over time, then you should use dynamic routes to handle
    the routes for these subpages. Let's find out how you can create dynamic routes
    in the next section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该熟悉上一章中的这些基本路由。这种类型的路由适用于顶级页面，例如`/about`、`/contact`和`/posts`。但是，如果在每个顶级页面中有多个子页面，并且它们会随着时间动态增加，那么您应该使用动态路由来处理这些子页面的路由。让我们在下一节中了解如何创建动态路由。
- en: Creating dynamic routes
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建动态路由
- en: 'Dynamic routes are generated by Nuxt when using underscores. Dynamic routes
    are useful and unavoidable in a more complex app. So, if you want to create dynamic
    routes, then just create a `.vue` file (or directory) with a prefixed underscore
    followed by the name of the file (or directory). Take the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用下划线时，Nuxt会生成动态路由。在更复杂的应用程序中，动态路由是有用且不可避免的。因此，如果您想创建动态路由，只需创建一个带有前缀下划线后跟文件名（或目录）的`.vue`文件（或目录）。接下来看一个例子：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, you will get the following routes from Nuxt without you having to write
    any of them:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将从Nuxt获得以下路由，而无需您编写任何路由：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can find this example app in `/chapter-4/nuxt-universal/routing/dynamic-routes/`
    in our GitHub repository.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库中的`/chapter-4/nuxt-universal/routing/dynamic-routes/`中找到此示例应用程序。
- en: Dynamic routes are good for pages that share the same layout. For example, if
    you have the `/about` and `/contact` routes using the same layout (which is quite
    unlikely), then the `/_slug/` directory in the preceding dynamic route example
    code is a good choice. So, just as with the subpages under the `/users` route
    that share the same layout, the `/_id.vue` file approach is a good choice for
    this scenario.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 动态路由适用于共享相同布局的页面。例如，如果您使用相同布局的`/about`和`/contact`路由（这是相当不太可能的情况），那么前面动态路由示例代码中的`/_slug/`目录是一个不错的选择。因此，就像在`/users`路由下共享相同布局的子页面一样，`/_id.vue`文件方法对于这种情况是一个不错的选择。
- en: Besides using this (simple) dynamic route to create sub-routes for subpages
    under the `/users` route, we can also use more complex dynamic routes for them
    – nested routes. This is a case when you don't want the parent layout to be replaced
    completely by the child layout when rendering the subpages; in other words, when
    you want to render the subpage *inside* the parent layout. Let's find out how
    you can achieve this in the next section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用这个（简单的）动态路由为`/users`路由下的子页面创建子路由之外，我们还可以为它们使用更复杂的动态路由-嵌套路由。这是一种情况，当渲染子页面时，您不希望父布局完全被子布局替换；换句话说，当您希望在父布局*内*呈现子页面时。让我们在下一节中了解如何实现这一点。
- en: Creating nested routes
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建嵌套路由
- en: In a nutshell, routes generated from nested components are called nested routes.
    In some cases, you may want to compose components (child components) that are
    nested inside other components (parent components), and you will want to render
    these child components *inside* particular views of the parent components, instead
    of having the parent components replaced by the child components.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，从嵌套组件生成的路由称为嵌套路由。在某些情况下，您可能希望组合嵌套在其他组件（父组件）内的组件（子组件），并且您希望在父组件的特定视图中呈现这些子组件，而不是将父组件替换为子组件。
- en: 'To do that in a Vue app, you will need to insert a `<router-view>` component
    inside the parent component for the child component. For example, say you have
    a `Users` parent component and you want the contents of the individual user to
    be loaded inside this parent when a specific user is called. Then, you can create
    a nested route for them with the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Vue应用程序中执行此操作，您需要在父组件中插入一个`<router-view>`组件，用于加载子组件的内容。例如，假设您有一个`Users`父组件，并且当调用特定用户时，您希望加载单个用户的内容到此父组件中。然后，您可以按照以下步骤为它们创建嵌套路由：
- en: 'Create a parent component:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个父组件：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you put the preceding code in a diagram, it can be visually explained, as
    follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将前面的代码放入图表中，可以如下进行可视化解释：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a child component that will display the content or information of the
    individual user:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个子组件，用于显示单个用户的内容或信息：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create the nested route with a `children` property, as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`children`属性创建嵌套路由，如下所示：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Define the router instance and pass in the preceding nested routes, as follows,
    before injecting the router into the Vue root instance:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义路由实例并传入前面的嵌套路由，然后将路由器注入Vue根实例：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, the preceding code will produce the following visual when a child link
    is clicked on; for example, child number `1` and `/users/1` will be dynamically
    generated as its route:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当单击子链接时，前面的代码将生成以下可视化内容；例如，子编号`1`和`/users/1`将动态生成为其路由：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'But we are not finished yet because we still need to deal with the empty view
    in `/users` when no user has been called yet. So, to fix that, you will create
    an index child component, as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但我们还没有完成，因为当尚未调用任何用户时，我们仍然需要处理`/users`中的空视图。因此，为了解决这个问题，您将创建一个索引子组件，如下所示：
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the preceding index component to the `children` block with an empty string,
    `''''`, on the `path` key:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`children`块中添加前面的索引组件，使用空字符串`''`作为`path`键的值：
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'So now, if you navigate to `/users` in your browser, you should get the following
    result:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中导航到`/users`，你应该会得到以下结果：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can see that the `children` option is just another array of route configuration
    objects, like the `routes` constant itself. Therefore, you can keep nesting views
    as much as you need. However, we should avoid deep nesting to keep our application
    simple as much as possible for better maintenance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`children`选项只是另一个路由配置对象的数组，就像`routes`常量本身一样。因此，你可以根据需要保持嵌套视图的层级。但是，为了更好地维护，我们应该尽量避免深层嵌套，保持我们的应用尽可能简单。
- en: You can find the preceding example code in `/chapter-4/vue/vue-route/nested-route.html`
    in our GitHub repository.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub仓库的`/chapter-4/vue/vue-route/nested-route.html`中找到前面示例的代码。
- en: 'It is the same in Nuxt; you can create the nested route by using the child
    routes of `vue-router`. If you want to define the parent component of a nested
    route, you only need to create a Vue file with the same name as the directory
    that contains your children views. Take the following example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuxt中也是一样的；你可以通过使用`vue-router`的子路由来创建嵌套路由。如果你想定义嵌套路由的父组件，你只需要创建一个与包含子视图的目录同名的Vue文件。看下面的例子：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Nuxt will automatically generate the following routes:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt将自动生成以下路由：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can see that Nuxt generates the routes the same as you would in the Vue
    app. Note that in Nuxt, we include `<nuxt-child/>` in the parent component (the
    `.vue` file), while in Vue, we include `<router-view></router-view>` in the parent
    component, just as in the preceding `User` example. Let''s understand this better
    with an exercise just like we did in the Vue app:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到Nuxt生成的路由与在Vue应用中一样。请注意，在Nuxt中，我们在父组件（`.vue`文件）中包含`<nuxt-child/>`，而在Vue中，我们在父组件中包含`<router-view></router-view>`，就像前面的`User`示例一样。让我们通过一个练习更好地理解这一点，就像我们在Vue应用中做的那样：
- en: 'Create a parent component with a `<nuxt-child/>` component:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`<nuxt-child/>`组件的父组件：
- en: '[PRE25]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create an index child component to hold a list of users:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个索引子组件来保存用户列表：
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note that we will cover the `asyncData` method in the upcoming section of this
    chapter and `axios` in [Chapter 5](099c1dc8-8dfa-46f8-bfbd-bfa036eefbb7.xhtml),
    *Adding Vue Components*, so do not worry about them at this stage.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在本章的即将到来的部分中，我们将介绍`asyncData`方法和[第5章](099c1dc8-8dfa-46f8-bfbd-bfa036eefbb7.xhtml)中的`axios`，所以现阶段不用担心它们。
- en: 'Create an individual child component with a link for returning to the child
    index page:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单独的子组件，其中包含返回到子索引页面的链接：
- en: '[PRE27]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You can see that Nuxt has saved you from configuring the nested routes that
    you have to do in Vue apps with use of the `children` property (as shown in *s**tep
    3* of the preceding Vue app example).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到Nuxt已经帮你省去了在Vue应用中配置嵌套路由的步骤，使用了`children`属性（如前面Vue应用示例中的*步骤3*所示）。
- en: So, in this Nuxt app, the element of `<h1>Users</h1>` in `users.vue` will always
    be seen when a child page is rendered after it. The `<ul>` element containing
    the list elements will always be replaced by the child page. This is useful if
    the information of the parent is persistent throughout the subpages as you don't
    have to re-request the parent information whenever the subpage is rendered.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这个Nuxt应用中，当子页面渲染后，`users.vue`中的`<h1>Users</h1>`元素将始终可见。包含列表元素的`<ul>`元素将始终被子页面替换。如果父级信息在子页面中是持久的，这将非常有用，因为在子页面渲染时不需要重新请求父级信息。
- en: You can find this example app in `/chapter-4/nuxt-universal/routes/nested-routes/`
    in our GitHub repository.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub仓库的`/chapter-4/nuxt-universal/routes/nested-routes/`中找到这个示例应用。
- en: Since there are dynamic routes for "upgrading" the basic routes, you may ask,
    what about dynamic routes for the nested routes? Technically, yes, this is possible,
    and they are called dynamic nested routes. So, let's find out more about them
    in the next section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在用于“升级”基本路由的动态路由，您可能会问，嵌套路由的动态路由呢？从技术上讲，是的，这是可能的，它们被称为动态嵌套路由。因此，让我们在下一节中了解更多关于它们的信息。
- en: Creating dynamic nested routes
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建动态嵌套路由
- en: 'We have seen how this works with dynamic routes and nested routes, respectively,
    so theoretically and technically, it is possible to combine these two options
    to create dynamic nested routes by having dynamic children (for example, `_subTopic`)
    in dynamic parents (for example, `_topic`). This is best illustrated in the following
    example structure:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了动态路由和嵌套路由的工作原理，因此从理论上和技术上讲，可以将这两个选项结合起来，通过在动态父级（例如`_topic`）中拥有动态子级（例如`_subTopic`）来创建动态嵌套路由。以下是最佳示例结构：
- en: '[PRE28]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Nuxt will automatically generate the following routes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt将自动生成以下路由：
- en: '[PRE29]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can see that the routes are more complicated, which can make your application
    harder to develop just by reading and trying to understand the file directory
    tree because it is quite abstract, and it can be too abstract at some point if
    it grows "bigger." It is good practice to always design and structure our app
    to be as simple as possible. The following example routes are a good example of
    this type of route:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到路由变得更加复杂，这可能会使您的应用程序在阅读和尝试理解文件目录树时更难开发，因为它相当抽象，如果增长“更大”，它可能会变得过于抽象。将应用程序设计和结构化为尽可能简单是一个良好的实践。以下示例路由是这种类型路由的一个很好的例子：
- en: 'Some examples for `/_topic/` are as follows:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/_topic/`的一些示例如下：'
- en: '[PRE30]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Some examples for `/_topic/_subTopic/` are as follows:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/_topic/_subTopic/`的一些示例如下：'
- en: '[PRE31]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Some examples for `/_topic/_subTopic/_slug.vue` are as follows:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/_topic/_subTopic/_slug.vue`的一些示例如下：'
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You can find an example app for this type of route in `/chapter-4/nuxt-universal/routing/dynamic-nested-routes/`
    in our GitHub repository.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-4/nuxt-universal/routing/dynamic-nested-routes/`中找到此类型路由的示例应用程序。
- en: Creating dynamic routes and pages always requires the parameters in the route
    (in other words, the route params) so that we can pass them (whether they are
    IDs or slugs) to the dynamic pages to be processed. But before processing and
    responding to the parameters, it is a good idea to validate them. So, let's take
    a look at how we can validate the route params in the next topic.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建动态路由和页面始终需要路由中的参数（换句话说，路由参数），以便我们可以将它们（无论是ID还是slug）传递给动态页面进行处理。但在处理和响应参数之前，验证它们是一个好主意。因此，让我们看看如何在下一个主题中验证路由参数。
- en: Validating route params
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证路由参数
- en: 'You can use a `validate` method in a component to validate the params of a
    dynamic route before any further data is processed or fetched asynchronously.
    This validation *should* always return `true` to move forward; Nuxt will stop
    the route and immediately throw a 404 error page if it gets a `false` Boolean.
    For example, you want to make sure the ID must be a number:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在组件中使用`validate`方法来验证动态路由的参数，在进一步处理或异步获取数据之前验证参数。这种验证*应该*始终返回`true`以继续前进；如果得到`false`布尔值，Nuxt将停止路由并立即抛出404错误页面。例如，您希望确保ID必须是一个数字：
- en: '[PRE33]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'So, you will get a 404 page with a `This page could not be found` message if
    you request the page with `localhost:3000/users/xyz`. If you want to customize
    the 404 message, you can use a `throw` statement to throw an exception with the
    `Error` object, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您使用`localhost:3000/users/xyz`请求页面，您将收到一个带有“此页面找不到”消息的404页面。如果要自定义404消息，可以使用`throw`语句抛出带有`Error`对象的异常，如下所示：
- en: '[PRE34]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You also can use `async` with the `validate` method for `await` operations:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在`validate`方法中使用`async`进行`await`操作：
- en: '[PRE35]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You also can use `return` promises in the `validate` method:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在`validate`方法中使用`return`承诺：
- en: '[PRE36]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You can find the preceding example app on ID validation in `/chapter-4/nuxt-universal/routing/validate-route-params/`
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`/chapter-4/nuxt-universal/routing/validate-route-params/`中找到前面示例应用程序的ID验证。
- en: in our GitHub repository.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的GitHub存储库中。
- en: Validating the route params is one way of handling invalid or unknown routes,
    but another way of handling them is by using a `_.vue` file to catch them. So,
    let's find out how in the next section.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 验证路由参数是处理无效或未知路由的一种方式，但另一种处理它们的方式是使用`_.vue`文件来捕捉它们。所以，让我们在下一节中找出如何做。
- en: Handling unknown routes with _.vue files
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用_.vue文件处理未知路由
- en: 'Besides throwing a *general* 404 page with the `validate` method, you can use
    a `_.vue` file to throw a custom error page. Let''s explore how this works with
    the following steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`validate`方法抛出*通用*404页面外，你还可以使用`_.vue`文件抛出自定义错误页面。让我们通过以下步骤来探讨这是如何工作的：
- en: 'Create an empty `_.vue` file in the `/pages/` directory, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/pages/`目录中创建一个空的`_.vue`文件，如下所示：
- en: '[PRE37]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add any custom content to this `_.vue` file, as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个`_.vue`文件添加任何自定义内容，如下所示：
- en: '[PRE38]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Launch the app and navigate to the following routes, and you will see that
    Nuxt will call this `_.vue` file to handle these requests on any levels that do
    not match the correct routes:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用程序并导航到以下路由，你会发现Nuxt将调用这个`_.vue`文件来处理这些请求，这些请求不匹配正确的路由级别：
- en: '[PRE39]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If you want to throw a more specific 404 page on a specific level – for example,
    in the `/users` route only – then create another `_.vue` file in the `/users/`
    folder, as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想在特定级别上抛出一个更具体的404页面 - 例如，仅在`/users`路由中 - 那么在`/users/`文件夹中创建另一个`_.vue`文件，如下所示：
- en: '[PRE40]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add custom content for this `_.vue` file, as follows:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个`_.vue`文件添加自定义内容，如下所示：
- en: '[PRE41]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Navigate to the following routes again and you will see that Nuxt is no longer
    calling this `/pages/_.vue` file for unmatched requests:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次导航到以下路由，你会发现Nuxt不再调用这个`/pages/_.vue`文件来处理不匹配的请求：
- en: '[PRE42]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Instead, Nuxt is now calling the `/pages/users/_.vue` file to handle them.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，Nuxt现在调用`/pages/users/_.vue`文件来处理它们。
- en: You can find this example app in `/chapter-4/nuxt-universal/routing/unknown-routes/`
    in our GitHub repository.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub存储库的`/chapter-4/nuxt-universal/routing/unknown-routes/`中找到这个示例应用程序。
- en: We hope that by now, you should know how to create routes in various ways that
    suit your app, but routes and pages are inextricably related and inseparable in
    Nuxt, so you also need to know how to create Nuxt pages, which are custom views.
    You will learn how to do that in the next topic.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望到现在为止，你应该知道如何以各种方式创建适合你的应用程序的路由，但是在Nuxt中，路由和页面是密不可分的，不可分割的，所以你还需要知道如何创建Nuxt页面，这些页面是自定义视图。你将在下一个主题中学习如何做到这一点。
- en: Creating custom views
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义视图
- en: Every route you have created in the custom routes above will land on a "page"
    that has all the HTML markup and content that we want to show on the frontend.
    From a software architecture perspective, this HTML markup and content, including
    meta info, images, and fonts, are the view or presentation layer of your app.
    In Nuxt, we can create and customize our view easily. Let's discover what makes
    up a Nuxt view and how you can customize it.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你在上面创建的自定义路由中的每个路由都将落在一个“页面”上，该页面具有我们希望在前端显示的所有HTML标记和内容。从软件架构的角度来看，这些HTML标记和内容，包括元信息、图像和字体，都是你的应用程序的视图或呈现层。在Nuxt中，我们可以轻松地创建和自定义我们的视图。让我们来了解一下Nuxt视图的组成部分以及如何自定义它。
- en: Understanding the Nuxt view
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解Nuxt视图
- en: 'The view structure in Nuxt consists of the app template, HTML head, layout,
    and page layers. You can use them to create views for your app routes. In a more
    complex app, you would populate them with data from an API, while in a simple
    app, you can just embed dummy data directly and manually into them. We will walk
    you through each of these layers in the upcoming sections. Before diving into
    that, please take a moment to study the following diagram, which will give you
    a complete view of the Nuxt view:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt中的视图结构包括应用程序模板、HTML头部、布局和页面层。你可以使用它们来为应用程序路由创建视图。在一个更复杂的应用程序中，你可以使用来自API的数据填充它们，而在一个简单的应用程序中，你可以直接手动嵌入虚拟数据。我们将在接下来的章节中逐一介绍这些层。在深入了解之前，请花一点时间研究下面的图表，它将为你提供Nuxt视图的完整视图：
- en: '![](assets/68280e28-fc1c-49b0-8bfa-422ee8202972.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/68280e28-fc1c-49b0-8bfa-422ee8202972.png)'
- en: Reference source: [https://nuxtjs.org/guide/views](https://nuxtjs.org/guide/views)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 参考来源：[https://nuxtjs.org/guide/views](https://nuxtjs.org/guide/views)
- en: You can see that the Document - HTML file is the outmost layer of the Nuxt view,
    followed by Layout, Page, and the optional Page Child and Vue Component layers.
    The Document - HTML file is the app template of your Nuxt app. Let's start by
    looking at this most basic layer first and learn how you can customize it in the
    next section.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到文档-HTML文件是Nuxt视图的最外层，其后是布局、页面和可选的页面子层和Vue组件层。文档-HTML文件是你的Nuxt应用程序的应用程序模板。让我们首先从这个最基本的层开始，学习如何在下一节中自定义它。
- en: Customizing the app template
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义应用程序模板
- en: 'Nuxt creates the HTML app template behind the scenes for you, so basically,
    you don''t have to bother creating it. However, you still can customize it, such
    as by adding scripts or styles, if you want to. The default Nuxt HTML template
    is as simple as this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt在幕后为你创建HTML应用程序模板，因此基本上你不必费心去创建它。然而，你仍然可以自定义它，比如添加脚本或样式，如果你想的话。默认的Nuxt HTML模板就是这么简单：
- en: '[PRE43]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If you want to change or override this default, simply create an `app.html`
    file in your root directory. Take the following example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更改或覆盖这个默认值，只需在根目录中创建一个`app.html`文件。看下面的例子：
- en: '[PRE44]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Restart your app and you should see that your custom app HTML template has replaced
    the default one from Nuxt.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动你的应用程序，你会看到你的自定义应用程序HTML模板已经替换了Nuxt的默认模板。
- en: You can find this example in `/chapter-4/nuxt-universal/view/app-template/`
    in our GitHub repository.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub存储库的`/chapter-4/nuxt-universal/view/app-template/`中找到这个例子。
- en: The next closest layer to the HTML document (which is an `<html>` element) is
    the HTML head, the `<head>` element, which contains important meta information
    and the scripts and styles of your page. We don't add or customize this data in
    the app template directly, but rather in the Nuxt config file and the files in
    the `/pages/` directory. So, let's find out how in the next section.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来最接近HTML文档（即`<html>`元素）的一层是HTML头部，即`<head>`元素，其中包含重要的元信息以及页面的脚本和样式。我们不会直接在应用程序模板中添加或自定义这些数据，而是在Nuxt配置文件和`/pages/`目录中的文件中进行。因此，让我们在下一节中了解如何做到这一点。
- en: Creating a custom HTML head
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义HTML头部
- en: 'An HTML `<head>` element consists of the `<title>`, `<style>`, `<link>`, and
    `<meta>` elements. It can be a tedious task to add these elements manually. So,
    Nuxt takes care of them for you in your app. In [Chapter 2](f3ae7ce4-4ed5-4252-8318-3afb431415e2.xhtml),
    *Getting Started with Nuxt*, you learned that they are generated for you by Nuxt
    from the data in the JavaScript objects, which are written with curly braces (`{}`),
    in the Nuxt config file, as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一个HTML的`<head>`元素由`<title>`、`<style>`、`<link>`和`<meta>`元素组成。手动添加这些元素可能是一项繁琐的任务。因此，Nuxt会在你的应用程序中为你处理这些元素。在[第2章](f3ae7ce4-4ed5-4252-8318-3afb431415e2.xhtml)中，*开始使用Nuxt*，你学到了它们是由Nuxt从JavaScript对象中的数据生成的，这些数据是用花括号（`{}`）在Nuxt配置文件中编写的，如下所示：
- en: '[PRE45]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In this topic, we are interested in the `meta` block in the Nuxt config file
    and the pages inside the `/pages/` directory. Nuxt uses the Vue Meta plugin to
    manage these meta attributes. So, to understand how it works in Nuxt, we should
    first understand how Vue Meta works in a traditional Vue app.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本主题中，我们对Nuxt配置文件中的`meta`块和`/pages/`目录中的页面感兴趣。Nuxt使用Vue Meta插件来管理这些元属性。因此，要了解它在Nuxt中的工作原理，我们首先应该了解它在传统Vue应用程序中的工作原理。
- en: Introducing Vue Meta
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍Vue Meta
- en: 'Vue Meta is a Vue plugin for managing and creating HTML metadata with built-in
    reactivity in Vue. You just have to add the `metaInfo` special property to any
    of your Vue components and it will automatically be rendered into HTML meta tags,
    as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Meta是一个用于在Vue中管理和创建HTML元数据的Vue插件，具有内置的Vue响应性。您只需向任何Vue组件添加`metaInfo`特殊属性，它将自动呈现为HTML元标记，如下所示：
- en: '[PRE46]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The preceding block of JavaScript code will be rendered into the following
    HTML tags in your page:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的JavaScript代码块将被呈现为您页面中的以下HTML标签：
- en: '[PRE47]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: For more information about Vue Meta, visit [https://vue-meta.nuxtjs.org/](https://vue-meta.nuxtjs.org/).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Vue Meta的更多信息，请访问[https://vue-meta.nuxtjs.org/](https://vue-meta.nuxtjs.org/)。
- en: You can see that what you need to do is just provide the metadata in a JavaScript
    object. Now, let's get it installed and learn how to configure it for a Vue app.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，您只需要在JavaScript对象中提供元数据。现在，让我们安装它并学习如何为Vue应用程序配置它。
- en: Installing Vue Meta
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Vue Meta
- en: 'Like all other Vue plugins, you can install Vue Meta and hook it up to your
    Vue app with the following steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有其他Vue插件一样，您可以通过以下步骤安装Vue Meta并将其连接到您的Vue应用程序中：
- en: 'Install Vue Meta via npm:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm安装Vue Meta：
- en: '[PRE48]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Alternatively, you can install it via CDN with an `<script>` element, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以通过CDN使用`<script>`元素安装它，如下所示：
- en: '[PRE49]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Import Vue Meta with Vue Router in your main application file, if you are writing
    an ES6 JavaScript app:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的主应用程序文件中使用Vue Router导入Vue Meta，如果您正在编写一个ES6 JavaScript应用程序：
- en: '[PRE50]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Then, you can use it in any Vue component, as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以在任何Vue组件中使用它，如下所示：
- en: '[PRE51]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In this example, because we are using `axios` to fetch the data asynchronously,
    we must use the `metaInfo` method to inject the meta information from the async
    data, instead of using the `metaInfo` property. You can even add a template for
    your page title by using a `titleTemplate` option, just as in the preceding example.
    Next, we will create a simple Vue app with this plugin so that you can get a bigger
    picture of how to use it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，因为我们使用`axios`来异步获取数据，我们必须使用`metaInfo`方法从异步数据中注入元信息，而不是使用`metaInfo`属性。您甚至可以使用`titleTemplate`选项为您的页面标题添加模板，就像前面的例子一样。接下来，我们将创建一个简单的Vue应用程序，并使用这个插件，以便您可以更全面地了解如何使用它。
- en: Creating metadata with Vue Meta in Vue apps
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Vue应用程序中使用Vue Meta创建元数据
- en: 'As usual, we can get a Vue app started and running on a single HTML page. Let''s
    get it started:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们可以在单个HTML页面上启动和运行Vue应用程序。让我们开始吧：
- en: 'Include the CND links in the `<head>` block:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<head>`块中包含CND链接：
- en: '[PRE52]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create the following components with the metadata in the `<script>` block:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<script>`块中创建以下带有元数据的组件：
- en: '[PRE53]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then, add the default metadata in the root instance:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在根实例中添加默认的元数据：
- en: '[PRE54]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Note that we can override the default meta template in the component by simply
    adding `null` to the `titleTemplate` option in the child component, just like
    the preceding `About` component.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以通过在子组件的`titleTemplate`选项中简单地添加`null`来覆盖组件中的默认元数据模板，就像前面的`About`组件一样。
- en: You can find this example app in `/chapter-4/vue/vue-meta/basic.html` in our
    GitHub repository.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-4/vue/vue-meta/basic.html`中找到此示例应用程序。
- en: In this example, since we are not using `axios` to fetch the data asynchronously,
    we can use the `metaInfo` property directly, instead of using the `metaInfo` method
    to inject the meta information with the async data. Then, you will see the page
    title and meta information change in the browser when navigating around the routes
    you have just created. It is very easy to use this plugin in a Vue app, isn't
    it? Now, we should see how it works in a Nuxt app in the next section.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，由于我们不使用`axios`异步获取数据，因此可以直接使用`metaInfo`属性，而不是使用`metaInfo`方法来使用异步数据注入meta信息。然后，当您在刚刚创建的路由周围导航时，您将看到页面标题和meta信息在浏览器中发生变化。在Vue应用程序中使用此插件非常容易，不是吗？现在，我们应该看看它在Nuxt应用程序中的工作原理。
- en: Customizing the default meta tags in Nuxt apps
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义Nuxt应用程序中的默认meta标签
- en: 'Creating and customizing meta information in a Nuxt app is simpler because
    Vue Meta comes by default in Nuxt. That means you don''t have to install it as
    you do in the Vue app. You just have to use the `head` property in the Nuxt config
    file to define the default `<meta>` tags for your app, as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuxt应用程序中创建和自定义meta信息更简单，因为Vue Meta默认包含在Nuxt中。这意味着您无需像在Vue应用程序中那样安装它。您只需在Nuxt配置文件中使用`head`属性来定义应用程序的默认`<meta>`标签，如下所示：
- en: '[PRE55]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: However, the difference between Nuxt and the Vue apps is that the `hid` key
    must be used in Nuxt, while `vmid` is used in Vue. You should *always* use `hid`
    for your meta elements to prevent the duplication of meta tags when defining them
    (the meta tags) in child components. Also, notice that the `metaInfo` key is only
    used in Vue, whereas the `title` key is used in Nuxt, to add our meta information.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Nuxt和Vue应用程序之间的区别在于，在Nuxt中必须使用`hid`键，而在Vue中使用`vmid`。您应该*始终*使用`hid`来防止在子组件中定义它们（meta标签）时重复meta标签的发生。另外，请注意，`metaInfo`键仅在Vue中使用，而`title`键在Nuxt中使用，用于添加我们的元信息。
- en: So, this is how you add and customize the title and meta tags for your Nuxt
    app. However, they are added globally, which means they are applied to all of
    the pages in your app. So, how do you add them specifically to a page and override
    the global ones in the Nuxt config file? Let's find out in the next section.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您如何为您的Nuxt应用程序添加和自定义标题和meta标签。但是，它们是全局添加的，这意味着它们适用于应用程序中的所有页面。那么，如何将它们特定地添加到页面并在Nuxt配置文件中覆盖全局的呢？让我们在下一节中找出答案。
- en: Creating custom meta tags for Nuxt pages
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为Nuxt页面创建自定义meta标签
- en: 'If you want to add custom meta tags for a specific page or to override the
    default meta tags in a Nuxt config file, simply use the `head` method on that
    specific page directly, which will return a JavaScript object that contains the
    data for the `title` and `meta` options, as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要为特定页面添加自定义meta标签或在Nuxt配置文件中覆盖默认的meta标签，只需直接在该特定页面上使用`head`方法，该方法将返回一个包含`title`和`meta`选项数据的JavaScript对象，如下所示：
- en: '[PRE56]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then, you will get this output for this page:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将获得此页面的输出：
- en: '[PRE57]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: You can find this example app in `/chapter-4/nuxt-universal/view/html-head/`
    in our GitHub repository.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库中的`/chapter-4/nuxt-universal/view/html-head/`中找到此示例应用程序。
- en: So, that's it. That is all about the app template and the HTML head in Nuxt.
    The next inward layer in the Nuxt view is the layout and we will guide you on
    how to create custom ones in the next section. Let's get to it.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，就是这样。这就是关于Nuxt中应用模板和HTML头的全部内容。Nuxt视图中的下一个内部层是布局，我们将在下一节中指导您如何创建自定义布局。让我们开始吧。
- en: Creating custom layouts
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义布局
- en: Layouts are the backbone of your pages and components. You may want to have
    multiple different layouts in your app. There is a layout called `default.vue`,
    generated automatically in the `/layouts/` directory when you install your app
    using the `npx create-nuxt-app` scaffolding tool. Just like the app template,
    you can modify this default layout or create your own custom ones.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 布局是您的页面和组件的支柱。您可能希望在应用程序中拥有多个不同的布局。在使用`npx create-nuxt-app`脚手架工具安装应用程序时，`/layouts/`目录中会自动生成一个名为`default.vue`的布局。就像应用程序模板一样，您可以修改此默认布局或创建自己的自定义布局。
- en: Modifying the default layout
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改默认布局
- en: 'The default layout is always used for pages that don''t have a specific or
    custom layout. If you go to the `/layouts/` directory and open this layout, you
    should see that there are only three lines of code in it for rendering your page
    component:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 默认布局始终用于没有特定或自定义布局的页面。如果您转到`/layouts/`目录并打开此布局，您应该看到其中只有三行代码用于呈现您的页面组件：
- en: '[PRE58]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Let''s modify this default layout, as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改这个默认布局，如下所示：
- en: '[PRE59]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: You should see whatever you added there – for example, a navigation bar across
    all the pages in your app. Note that whether you are modifying this layout or
    creating new ones, make sure you have the `<nuxt/>` component where you want Nuxt
    to import the page component. Let's explore how you can create custom layouts
    in the next section.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到您在那里添加的任何内容 - 例如，应用程序中所有页面上的导航栏。请注意，无论您是修改此布局还是创建新布局，都要确保在您想要Nuxt导入页面组件的地方有`<nuxt/>`组件。让我们在下一节中探讨如何创建自定义布局。
- en: Creating new custom layouts
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新的自定义布局
- en: 'Sometimes, we need more than one layout for a more complex app. We may need
    different layouts for certain pages. For a case like this, you will need to create
    custom layouts. You can create custom layouts with `.vue` files and just put them
    in the `/layouts/` directory. Take the following example:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要更多的布局来构建更复杂的应用程序。我们可能需要为某些页面创建不同的布局。对于这种情况，您需要创建自定义布局。您可以使用`.vue`文件创建自定义布局，然后将它们放在`/layouts/`目录中。看下面的例子：
- en: '[PRE60]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then, you can use the `layout` property in the page component to assign this
    custom layout to that page, as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以在页面组件中使用`layout`属性将此自定义布局分配给该页面，如下所示：
- en: '[PRE61]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Nuxt now will use this `/layouts/about.vue` file as the base layout for this
    page component. But what about the layout for displaying error pages for unknown
    and invalid routes? Let's find out how this is made in the next section.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Nuxt将使用`/layouts/about.vue`文件作为此页面组件的基本布局。但是用于显示未知和无效路由的错误页面的布局又是什么呢？让我们在下一节中找出这是如何制作的。
- en: Creating custom error pages
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义错误页面
- en: 'Every Nuxt app you install comes with a default error page stored inside the
    `@nuxt` package in the `/node_modules/` directory that Nuxt uses to display errors,
    such as 404, 500, and so on. You can customize it by adding an `error.vue` file
    to the `/layouts/` directory. Let''s find out how you can achieve this with the
    following steps:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 每个安装的Nuxt应用程序都带有一个默认错误页面，存储在`@nuxt`包中的`/node_modules/`目录中，Nuxt用于显示错误，如404、500等。您可以通过在`/layouts/`目录中添加`error.vue`文件来自定义它。让我们通过以下步骤了解如何实现这一点：
- en: 'Create a custom error page, as follows, in the `/layouts/` directory:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/layouts/`目录中创建自定义错误页面，如下所示：
- en: '[PRE62]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Note that the error page is a page component. At first, it seems counter-intuitive
    and confusing as it is placed inside the `/layouts/` directory instead of the
    `/pages/` directory. However, it should be treated as a page even though it is
    in the `/layouts/` directory.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，错误页面是一个页面组件。起初，它似乎有违直觉和令人困惑，因为它放在`/layouts/`目录而不是`/pages/`目录中。但是，即使它在`/layouts/`目录中，它也应该被视为一个页面。
- en: 'Just like other page components, you can create a custom layout for this error
    page, as follows:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像其他页面组件一样，您可以为此错误页面创建自定义布局，如下所示：
- en: '[PRE63]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then, simply add `layout-error` to the `layout` option on the error page:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，只需将`layout-error`添加到错误页面的`layout`选项中：
- en: '[PRE64]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now, if you navigate to any of the following unknown routes, Nuxt will call
    this custom error page and the custom error layout:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果您导航到任何以下未知路由，Nuxt将调用此自定义错误页面和自定义错误布局：
- en: '[PRE65]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: You can find this 404 example in `/chapter-4/nuxt-universal/view/custom-layouts/404/`
    in our GitHub repository.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub存储库的`/chapter-4/nuxt-universal/view/custom-layouts/404/`中找到这个404示例。
- en: That's it. That is all about the layout in Nuxt. The next inward layer in the
    Nuxt view is pages, and you will learn how to create custom ones for your app
    in the next section. So, read on.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这就是Nuxt中关于布局的全部内容。Nuxt视图中的下一个内部层是页面，您将在下一节中学习如何为您的应用程序创建自定义页面。所以，请继续阅读。
- en: Creating custom pages
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义页面
- en: 'Pages are a part of the Nuxt view''s layers, just like the app template, HTML
    head, and layout, which we have already covered. The `/pages/` directory is where
    you store your pages. You will spend most of your time working in this directory
    to create pages for your Nuxt app. However, creating pages is not something new
    – we created a simple error page in the `/layouts/` directory in the previous
    section, and many pages when we were learning how to create custom routes for
    our app. So, when you want to create a custom page for a specific route, simply
    create a `.vue` file in the `/pages/` directory; for example, we can create the
    following pages:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 页面是Nuxt视图的一部分，就像应用程序模板、HTML头部和布局一样，我们已经介绍过了。`/pages/`目录是您存储页面的地方。您将在这个目录中花费大部分时间来为您的Nuxt应用程序创建页面。但是，创建页面并不是什么新鲜事——在上一节中，我们在`/layouts/`目录中创建了一个简单的错误页面，并且在学习如何为我们的应用程序创建自定义路由时创建了许多页面。因此，当您想为特定路由创建自定义页面时，只需在`/pages/`目录中创建一个`.vue`文件；例如，我们可以创建以下页面：
- en: '[PRE66]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: However, there is more than that required for creating a custom page. We need
    to know the attributes and functions on the page that come with Nuxt. Even though
    pages are an important part of Nuxt app development, while it is not emphasized
    in Vue app development, they are deeply related to the Vue component and work
    a bit differently from a component. So, to create a page and use it sufficiently,
    we need to understand what a page is in Nuxt first. Let's find out.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，创建自定义页面需要更多。我们需要了解Nuxt中附带的页面属性和函数。尽管页面是Nuxt应用程序开发的重要部分，但在Vue应用程序开发中并没有强调，它们与Vue组件密切相关，并且与组件的工作方式有些不同。因此，要创建页面并充分利用它，我们首先需要了解Nuxt中的页面是什么。让我们找出来。
- en: Understanding pages
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解页面
- en: 'A page is a Vue component in nature. What sets it apart from the standard Vue
    component is the attributes and functions that are added in Nuxt only. We use
    these special attributes and functions to set or fetch data before rendering the
    page, as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 页面本质上是一个Vue组件。它与标准Vue组件的区别在于仅在Nuxt中添加的属性和函数。我们使用这些特殊的属性和函数在呈现页面之前设置或获取数据，如下所示：
- en: '[PRE67]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: In the preceding example, we used a function called `asyncData` to set the data
    in the message key. This `asyncData` function is one of the functions you will
    see and often use in Nuxt apps. Let's dive into the attributes and functions that
    are designed specifically for a page in Nuxt.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了一个名为`asyncData`的函数来设置消息键中的数据。这个`asyncData`函数是您在Nuxt应用程序中经常看到并经常使用的函数之一。让我们深入了解专门为Nuxt页面设计的属性和函数。
- en: The asyncData method
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncData方法
- en: 'The `asyncData` method is the most important function in a page component.
    Nuxt always calls this function *before* initiating the page component. That means
    every time you request a page, this function is called first before the page is
    rendered. It gets the Nuxt context as the first argument and it can be used asynchronously,
    as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncData`方法是页面组件中最重要的函数。Nuxt总是在初始化页面组件*之前*调用这个函数。这意味着每次请求页面时，这个函数都会在页面渲染之前首先被调用。它以Nuxt上下文作为第一个参数，并且可以异步使用，如下所示：'
- en: '[PRE68]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: In this example, we use the ES6 destructuring assignment syntax to unpack the
    properties packed in the Nuxt context, and this particular property is `params`.
    In other words,
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用ES6解构赋值语法来解开Nuxt上下文中打包的属性，而这个特定的属性是`params`。换句话说，
- en: '`{ params }` is shorthand for `context.params`. We also can use the destructuring
    assignment syntax to unpack the `data` property in the async result from `axios`.
    Note that if you have data set in the `data` function in your page component,
    it will always be merged with the data from `asyncData`. Then, the merged data
    can be used in the `<template>` block. Let''s create a simple example to demonstrate
    how `asyncData` merges with the `data` function:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`{ params }`是`context.params`的简写。我们还可以使用解构赋值语法来解开从`axios`的异步结果中的`data`属性。请注意，如果在页面组件的`data`函数中设置了数据集，它将始终与`asyncData`中的数据合并。然后，合并后的数据可以在`<template>`块中使用。让我们创建一个简单的示例来演示`asyncData`如何与`data`函数合并：'
- en: '[PRE69]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'You have two sets of data objects returned from the `data` and `asynData` methods,
    but the output you will get for the preceding code is as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 从`data`和`asynData`方法返回的数据对象有两组，但是你将得到以下代码的输出：
- en: '[PRE70]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: You can see that the data from the `asyncData` function will always *replace*
    the data in the `data` function if they are both using the *same* data keys. Also,
    note that we can't use the `this` keyword in the `asyncData` method because this
    method is called *before* the page component is initiated. So, you *cannot* use
    `this.title = data.title` with this method to update the data. We will cover `asyncData`
    more in [Chapter 8](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml), *Adding a Server-Side
    Framework*.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，如果它们都使用*相同*的数据键，`asyncData`函数中的数据将始终*替换*`data`函数中的数据。另外，请注意，我们不能在`asyncData`方法中使用`this`关键字，因为这个方法在页面组件初始化*之前*被调用。因此，你*不能*使用这个方法来更新数据，比如`this.title
    = data.title`。我们将在[第8章](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml)中更详细地介绍`asyncData`，*添加服务器端框架*。
- en: For more information about the destructuring assignment, visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 有关解构赋值的更多信息，请访问[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)。
- en: The fetch method
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: fetch方法
- en: 'The `fetch` method works the same as the `asyncData` method, except it is called
    *after* the `created` Vue lifecycle hook – in other words, after initiating the
    component. Like the `asyncData` method, it can be used asynchronously, too; for
    example, you also can use it to set the data in the page component:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetch`方法与`asyncData`方法的工作方式相同，只是它在`created`Vue生命周期钩子之后被调用——换句话说，在组件初始化之后。与`asyncData`方法一样，它也可以异步使用；例如，你也可以使用它来设置页面组件中的数据。'
- en: '[PRE71]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Note that the `data` method must be used with the `fetch` method to set the
    data. Since it is called after the page component is initiated, we can use the
    `this` keyword to access the object in the `data` method. We also can use this
    method to set the data in the Vuex store from a page component, as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，“data”方法必须与“fetch”方法一起使用来设置数据。由于它在页面组件初始化后调用，我们可以使用“this”关键字来访问“data”方法中的对象。我们还可以使用这个方法从页面组件中将数据设置到Vuex存储中，如下所示：
- en: '[PRE72]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: We will cover the `fetch` method more with the Vuex store in [Chapter 10](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml),
    *Adding a Vuex Store*.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第10章](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml)中更详细地介绍与Vuex存储一起使用的“fetch”方法，*添加一个Vuex存储*。
- en: You can find the preceding code in this section in `/chapter-4/nuxt-universal/view/custom-pages/fecth-method/`
    in our GitHub repository.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-4/nuxt-universal/view/custom-pages/fecth-method/`部分找到上述代码。
- en: For more information about the `fetch` method, please visit [https://nuxtjs.org/api/pages-fetch](https://nuxtjs.org/api/pages-fetch)
    and [https://nuxtjs.org/blog/understanding-how-fetch-works-in-nuxt-2-12/](https://nuxtjs.org/blog/understanding-how-fetch-works-in-nuxt-2-12/).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 有关“fetch”方法的更多信息，请访问[https://nuxtjs.org/api/pages-fetch](https://nuxtjs.org/api/pages-fetch)和[https://nuxtjs.org/blog/understanding-how-fetch-works-in-nuxt-2-12/](https://nuxtjs.org/blog/understanding-how-fetch-works-in-nuxt-2-12/)。
- en: The head method
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 头部方法
- en: The `head` method is used to set the `<meta>` tags on a page, which we covered
    previously in the *Creating a custom HTML head* section. It can also be used with
    the components in the `/components/` directory.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: “head”方法用于在页面上设置`<meta>`标签，我们在*创建自定义HTML头部*部分中已经介绍过。它也可以与“/components/”目录中的组件一起使用。
- en: The layout property
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布局属性
- en: The `layout` key (or property) is used to specify a layout from the `/layouts/`
    directory for a page, which we covered previously in the *Creating custom layouts*
    section.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: “layout”键（或属性）用于指定页面在“/layouts/”目录中的布局，我们在*创建自定义布局*部分中已经介绍过。
- en: The loading property
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载属性
- en: 'The `loading` property lets you disable the default loading progress bar or
    set a custom loading bar on a specific page. We covered it briefly in [Chapter
    2](f3ae7ce4-4ed5-4252-8318-3afb431415e2.xhtml), *Getting Started with Nuxt*, so
    we know that we can configure the global default loading component in a Nuxt config
    file as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: “loading”属性允许您禁用默认的加载进度条或在特定页面上设置自定义加载进度条。我们在[第2章](f3ae7ce4-4ed5-4252-8318-3afb431415e2.xhtml)中简要介绍过，因此我们知道可以在Nuxt配置文件中配置全局默认加载组件，如下所示：
- en: '[PRE73]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'However, because we are on `localhost` and there is no need for much time to
    process the data, we usually won''t be able to see this loading bar in action.
    For the sake of seeing it in action, let''s demonstrate how this loading component
    works and looks by *delaying* the loading time of the data in the component with
    the following steps (but note that this demonstration *should not* be done in
    production):'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于我们在“localhost”上，并且不需要太多时间来处理数据，通常我们不会看到这个加载条在工作中。为了看到它的工作情况，让我们演示一下这个加载组件是如何工作和看起来的，通过*延迟*组件中数据的加载时间来演示（但请注意，这个演示*不应该*在生产环境中进行）：
- en: 'Create an `index.vue` page in the `/pages/` directory with the following code:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“/pages/”目录中创建一个名为“index.vue”的页面，其中包含以下代码：
- en: '[PRE74]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Create another page called `about.vue` in the `/pages/` directory with the
    following code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“/pages/”目录中创建另一个名为“about.vue”的页面，其中包含以下代码：
- en: '[PRE75]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In these two pages, we use `setTimeout` to delay the data response by 1 second.
    So, when navigating across the pages, you should see the black loading bar appearing
    at the top of the page before the requested page is loaded.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个页面中，我们使用`setTimeout`来延迟1秒钟的数据响应。因此，当在页面之间导航时，您应该在请求页面加载之前看到顶部出现黑色加载条。
- en: You can find this example in `/chapter-4/nuxt-universal/view/custom-pages/loading-page/`
    in our GitHub repository.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库中的`/chapter-4/nuxt-universal/view/custom-pages/loading-page/`中找到此示例。
- en: 'Of course, we can create a custom loading bar or layer by creating a component
    in the `/components/` directory. Take the following example:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当然，我们可以通过在`/components/`目录中创建组件来创建自定义加载栏或层。参考以下示例：
- en: '[PRE76]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Note that the `start` and `finish` methods must be exposed in the custom loading
    component so that Nuxt can call your component and use these methods when a route
    is changed (the `start` method is called) and loaded (the `finish` method is called).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，自定义加载组件中必须暴露`start`和`finish`方法，以便Nuxt在路由更改时调用您的组件并使用这些方法（调用`start`方法）并加载（调用`finish`方法）。
- en: So, in this component, the loading element is always hidden as the `loading`
    property is set to `false` by default in the `data` method. The loading element
    only becomes visible when the `loading` property is set to `true` during the route
    changes. It then becomes hidden again when the `loading` property is set to `false`
    after the route has finished loading.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这个组件中，加载元素始终是隐藏的，因为`data`方法中默认将`loading`属性设置为`false`。只有在路由更改时`loading`属性设置为`true`时，加载元素才会变为可见。然后在路由完成加载后，`loading`属性再次设置为`false`时，它会再次隐藏。
- en: For more information about these and other available methods, please visit [https://nuxtjs.org/api/configuration-loading](https://nuxtjs.org/api/configuration-loading).
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些和其他可用方法的更多信息，请访问[https://nuxtjs.org/api/configuration-loading](https://nuxtjs.org/api/configuration-loading)。
- en: 'Include the path of the preceding custom component in the `loading` property
    in the Nuxt config file:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件的`loading`属性中包含前面自定义组件的路径：
- en: '[PRE77]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: You can find this example in `/chapter-4/nuxt-universal/view/custom-pages/loading-global-custom/`
    in our GitHub repository.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库中的`/chapter-4/nuxt-universal/view/custom-pages/loading-global-custom/`中找到此示例。
- en: 'We also can configure the loading behavior on specific pages, as follows:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以根据特定页面配置加载行为，如下所示：
- en: '[PRE78]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'If the value of the `loading` key is `false` on a page, it will stop calling
    the `this.$nuxt.$loading.finish()` and `this.$nuxt.$loading.start()` methods automatically,
    and this allows you to control them *manually* in your script, as follows:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果页面上`loading`键的值为`false`，它将自动停止调用`this.$nuxt.$loading.finish()`和`this.$nuxt.$loading.start()`方法，这允许您在脚本中*手动*控制它们，如下所示：
- en: '[PRE79]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Then, create the `final.vue` page in the `/pages/` directory:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`/pages/`目录中创建`final.vue`页面：
- en: '[PRE80]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: In this example, you can see that you have the control on the loading bar manually
    with `this.$nuxt.$loading.finish()` and `this.$nuxt.$loading.start()`. It takes
    5 seconds for the loading bar to finish in the `mounted` method. The loading bar
    starts immediately when you trigger the `goToFinal` method, and it takes 5 seconds
    to change the route to `/final`.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，您可以看到您可以使用`this.$nuxt.$loading.finish()`和`this.$nuxt.$loading.start()`手动控制加载栏。加载栏在`mounted`方法中需要5秒钟才能完成。当您触发`goToFinal`方法时，加载栏立即开始，并且需要5秒钟才能将路由更改为`/final`。
- en: You can find this example in `/chapter-4/nuxt-universal/view/custom-pages/loading-page/`
    in our GitHub repository.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库中的`/chapter-4/nuxt-universal/view/custom-pages/loading-page/`中找到此示例。
- en: The transition property
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过渡属性
- en: 'The `transition` property is used to specify the transition for a page. You
    can use a string, an object, or a function with this key, as follows:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition`属性用于指定页面的过渡。您可以使用字符串、对象或带有此键的函数，如下所示：'
- en: '[PRE81]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: We will cover the `transition` property in depth in the *Creating custom transitions*
    section later in this chapter.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面的*创建自定义过渡*部分深入介绍`transition`属性。
- en: The scrollToTop property
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: scrollToTop属性
- en: 'The `scrollToTop` key is used when you want the page in the nested routes to
    start at the top before it is rendered. By default, Nuxt scrolls to the top when
    you go to another page, but on the child pages in the nested routes, Nuxt stays
    at the same scroll position from the previous child route. So, if you want to
    tell Nuxt to scroll to the top for these pages, then set `scrollToTop` to `true`,
    as follows:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`scrollToTop`键用于在呈现页面之前使嵌套路由中的页面从顶部开始。默认情况下，当您转到另一个页面时，Nuxt会滚动到顶部，但在嵌套路由的子页面上，Nuxt会保持在前一个子路由的相同滚动位置。因此，如果您希望告诉Nuxt在这些页面上滚动到顶部，则将`scrollToTop`设置为`true`，如下所示：'
- en: '[PRE82]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The validate method
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证方法
- en: The `validate` method is a validator for dynamic routes, and we have already
    covered it previously in the *Validating route params* section.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate`方法是动态路由的验证器，我们已经在*验证路由参数*部分中进行了介绍。'
- en: The middleware property
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中间件属性
- en: 'The `middleware` property is used to specify middleware for a page. The assigned
    middleware will always be executed before the page is rendered, as follows:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`middleware`属性用于指定页面的中间件。分配的中间件将始终在页面呈现之前执行，如下所示：'
- en: '[PRE83]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'In this example, `auth` is the filename of the middleware that you will create
    in the `/middleware/` directory, as follows:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`auth`是您将在`/middleware/`目录中创建的中间件的文件名，如下所示：
- en: '[PRE84]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: We will cover middleware in depth in [Chapter 11](b24caa1b-6337-40ee-9c1a-c8586db1f3b2.xhtml),
    *Writing Route Middlewares and Server Middlewares*.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第11章](b24caa1b-6337-40ee-9c1a-c8586db1f3b2.xhtml)中深入讨论中间件，*编写路由中间件和服务器中间件*。
- en: So, that's it. You have completed the sections on the Nuxt view, from the app
    template, HTML head, and layouts to pages. Well done! We will cover the Vue components
    in the next chapter. But right now, the next thing we should look at is creating
    custom transitions between pages in Nuxt because transitions and pages are closely
    related, just like the page `transition` property you have been briefly introduced
    to. So, let's move on to our final topic of this chapter, where you will learn
    about the creation of custom transitions.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，就是这样。您已经完成了关于Nuxt视图的部分，从应用程序模板、HTML头部和布局到页面。干得好！我们将在下一章中讨论Vue组件。但现在，我们应该看的下一件事是在Nuxt中创建自定义页面之间的过渡，因为过渡和页面是密切相关的，就像您之前简要介绍过的页面`transition`属性一样。所以，让我们继续进行本章的最后一个主题，您将在其中了解如何创建自定义过渡。
- en: Creating custom transitions
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义过渡
- en: So far, you have managed to create multiple routes and pages for a Nuxt app
    and add a loading bar that shows up when switching between pages. This makes a
    pretty decent-looking app already. But that is not all that you can do with Nuxt.
    You can add more stunning effects and transitions *between pages*. This is where
    the `transition` properties in pages (for example, `/pages/about.vue`) come in,
    as well as the `pageTransition` and `layoutTransition` options in the Nuxt config
    file.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经成功为Nuxt应用程序创建了多个路由和页面，并在页面之间切换时添加了一个加载栏。这已经使得应用程序看起来相当不错。但这并不是您在Nuxt中可以做的全部。您可以在*页面之间*添加更多令人惊叹的效果和过渡。这就是页面中的`transition`属性（例如，`/pages/about.vue`）以及Nuxt配置文件中的`pageTransition`和`layoutTransition`选项的用处。
- en: We can apply a transition *globally* through the Nuxt config file or *specifically*
    on certain pages. We will guide you through this topic. However, to understand
    how the transition works in Nuxt, we should first understand how it works in Vue,
    and then we can learn how to implement it on our pages when the route is changed.
    Let's get started.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过Nuxt配置文件*全局*应用过渡，或者*特定*应用于某些页面。我们将指导您了解这个主题。但是，要理解Nuxt中过渡的工作原理，我们首先应该了解它在Vue中是如何工作的，然后我们可以学习如何在路由更改时在我们的页面上实现它。让我们开始吧。
- en: Understanding Vue transitions
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Vue过渡
- en: 'Vue relies on CSS transitions and uses the `<transition>` Vue component to
    wrap around an HTML element or a Vue component to add the CSS transitions, as
    follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Vue依赖于CSS过渡，并使用`<transition>`Vue组件来包裹HTML元素或Vue组件以添加CSS过渡，如下所示：
- en: '[PRE85]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'You can see how easy it is – you can just wrap any element with the `<transition>`
    component like a piece of cake. When that happens, Vue will apply the following
    CSS transition classes to that element by adding and removing them at appropriate
    timings:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这有多么容易 - 你可以像吃蛋糕一样轻松地用`<transition>`组件包裹任何元素。当这种情况发生时，Vue会在适当的时间添加和移除以下CSS过渡类到该元素：
- en: The `.v-enter` and `.v-leave` classes define how your element looks before the
    transition starts.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.v-enter`和`.v-leave`类定义了过渡开始之前你的元素的外观。'
- en: The `.v-enter-to` and `.v-leave-to` classes are the "completed" states for your
    element.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.v-enter-to`和`.v-leave-to`类是你的元素的“完成”状态。'
- en: The `.v-enter-active` and `.v-leave-active` classes are the active states of
    the element.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.v-enter-active`和`.v-leave-active`类是元素的活动状态。'
- en: 'These classes are where the CSS transitions take place. For example, a transition
    that you would do in an HTML page could look as follows:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类是CSS过渡发生的地方。例如，在HTML页面中进行的过渡可能如下所示：
- en: '[PRE86]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'If we "translate" the preceding transition into the Vue context, we will get
    the following:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将前面的过渡转换为Vue上下文，我们将得到以下结果：
- en: '[PRE87]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'We can visualize these Vue transition classes as simply as with the following
    diagram:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些Vue过渡类简单地可视化为以下图表：
- en: '![](assets/64eacc73-de5b-460b-8d5b-29af57a3c3c8.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/64eacc73-de5b-460b-8d5b-29af57a3c3c8.png)'
- en: 'Reference source: [https://vuejs.org/v2/guide/transitions.html](https://vuejs.org/v2/guide/transitions.html)'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 参考来源：[https://vuejs.org/v2/guide/transitions.html](https://vuejs.org/v2/guide/transitions.html)
- en: 'Vue prefixes the transition classes with `v-` by default, but if you want to
    change this prefix, then just use the `name` attribute on the `<transition>` component
    to specify a name – for example, `<transition name="fade">`; then, you can "refactor"
    your CSS transition classes, as follows:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Vue默认使用`v-`作为过渡类的前缀，但如果你想更改这个前缀，只需在`<transition>`组件上使用`name`属性来指定一个名称 - 例如，`<transition
    name="fade">`；然后，你可以"重构"你的CSS过渡类，如下所示：
- en: '[PRE88]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Let''s apply the preceding transition to a simple Vue app with the following
    steps:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将前面的过渡应用到一个简单的Vue应用程序中，步骤如下：
- en: 'Create two simple routes and wrap the `<router-view>` component with a `<transition>`
    component, as follows:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个简单的路由，并用`<transition>`组件包裹`<router-view>`组件，如下所示：
- en: '[PRE89]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Add a `<style>` block with the preceding `fade-` CSS transition classes:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个带有前缀`fade-`的CSS过渡类的`<style>`块：
- en: '[PRE90]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: When you run the app on your browser, you can see that it takes 300 milliseconds
    to fade in and out the route component when switching between the routes.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器上运行应用程序时，你会发现在切换路由时，路由组件淡入淡出需要300毫秒。
- en: You can find this example in `/chapter-4/vue/transitions/basic.html` in our
    GitHub repository.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub存储库的`/chapter-4/vue/transitions/basic.html`中找到这个例子。
- en: You can see that a transition requires a few CSS classes to make it work, but
    they are not difficult to master for a Vue app. Now, let's see how you can apply
    transitions in Nuxt in the next section.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，过渡需要一些CSS类来使其工作，但对于Vue应用程序来说，掌握它们并不难。现在，让我们看看如何在下一节中在Nuxt中应用过渡。
- en: Making transitions with the pageTransition property
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用pageTransition属性进行过渡
- en: 'In Nuxt, the `<transition>` component is not needed anymore. It is added for
    you by default, so you just have to create transitions in the `/assets/` directory
    or the `<style>` block on any specific page. The `pageTransition` property is
    used in the Nuxt config file to set the default properties of page transitions.
    The default values for the transition properties in Nuxt are as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuxt中，不再需要`<transition>`组件。它会默认为您添加，所以您只需在`/assets/`目录或任何特定页面的`<style>`块中创建过渡效果。在Nuxt配置文件中使用`pageTransition`属性来设置页面过渡的默认属性。Nuxt中过渡属性的默认值如下：
- en: '[PRE91]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'So, Nuxt prefixes the transition classes with `page-` by default, as opposed
    to Vue, which uses `v-` as the prefix. The default transition mode is set to `out-in`
    in Nuxt. Let''s see how transitions are done in Nuxt by creating a global transition
    for all pages and a local transition for a specific page with the following steps:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Nuxt默认使用`page-`作为过渡类的前缀，而Vue使用`v-`作为前缀。Nuxt中默认的过渡模式设置为`out-in`。让我们通过以下步骤来看看Nuxt中的过渡是如何实现的：为所有页面创建全局过渡，以及为特定页面创建局部过渡。
- en: 'Create a `transition.css` file in the `/assets/` directory and add the following
    transition to it:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/assets/`目录中创建一个`transition.css`文件，并添加以下过渡效果：
- en: '[PRE92]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Add the path of the preceding CSS transition resource to the Nuxt config file:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前面的CSS过渡资源的路径添加到Nuxt配置文件中：
- en: '[PRE93]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Remember that the default prefix is `page-`, so if you want to use a different
    prefix, we can use the `pageTransition` property in the Nuxt config file to change
    that prefix:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，默认前缀是`page-`，所以如果您想使用不同的前缀，可以在Nuxt配置文件中使用`pageTransition`属性来更改前缀：
- en: '[PRE94]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Then, change the prefix in all the default class names to `fade` in `transitions.css`,
    as follows:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`transitions.css`中将所有默认类名的前缀更改为`fade`，如下所示：
- en: '[PRE95]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: This example will apply the transition globally across all pages when the route
    is changed.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 当路由改变时，这个例子将在所有页面上全局应用过渡效果。
- en: 'However, if we want to apply a different transition to a specific page or override
    the global transition in a page, we can set it in the `transition` property of
    that page, as follows:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，如果我们想要为特定页面应用不同的过渡效果，或者在页面中覆盖全局过渡效果，可以在该页面的`transition`属性中进行设置，如下所示：
- en: '[PRE96]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Then, create the CSS transitions for `fade-about` in `transitions.css`:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`transitions.css`中为`fade-about`创建CSS过渡效果：
- en: '[PRE97]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: In this example, it takes 3 seconds to fade in and out the `about` page, while
    it takes 300 milliseconds for the rest of the pages.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，淡入和淡出“about”页面需要3秒，而其他页面只需要300毫秒。
- en: You can find this page-specific example and the global example in `/chapter-4/nuxt-universal/transition/page-transition-property/`
    in our GitHub repository.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-4/nuxt-universal/transition/page-transition-property/`中找到这个特定页面的例子和全局例子。
- en: You can see that, once again, Nuxt has lifted some repetitive tasks for you
    and added the flexibility for you to create custom prefix class names for your
    transitions. What's more, you even can create transitions *between layouts*! Let's
    find out how in the next section.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，Nuxt再次为您解决了一些重复的任务，并为您提供了创建自定义前缀类名的灵活性。而且，您甚至可以创建*布局之间*的过渡效果！让我们在下一节中了解如何做到这一点。
- en: Making transitions with the layoutTransition property
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`layoutTransition`属性进行过渡
- en: 'CSS transitions are not only applicable to page components but also to layouts.
    The default for this `layoutTransition` property is the following:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: CSS过渡不仅适用于页面组件，还适用于布局。`layoutTransition`属性的默认值如下：
- en: '[PRE98]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'So, the prefix of the layout transition classes is `layout` by default and
    the default transition mode is `out-in`. Let''s see how transitions can be done
    by creating a global transition for all layouts with the following steps:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，默认情况下布局转换类的前缀是`layout`，默认转换模式是`out-in`。让我们看看如何通过以下步骤为所有布局创建全局转换：
- en: 'Create the `about.vue` and `user.vue` layouts in the `/layouts/` directory,
    as follows:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/layouts/`目录中创建`about.vue`和`user.vue`布局，如下所示：
- en: '[PRE99]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Apply the preceding layouts to the `about.vue` and `users.vue` pages in the
    `/pages/` directory, as follows:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前述布局应用于`/pages/`目录中的`about.vue`和`users.vue`页面，如下所示：
- en: '[PRE100]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Create a `transition.css` file in the `/assets/` directory and add the following
    transition to it:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/assets/`目录中创建`transition.css`文件，并将以下转换添加到其中：
- en: '[PRE101]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Add the path of the preceding CSS transition resource to the Nuxt config file:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前面的CSS转换资源的路径添加到Nuxt配置文件中：
- en: '[PRE102]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The default prefix is `layout-`, but if you want to use a different prefix,
    you can use the `layoutTransition` property in the Nuxt config file to change
    it:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认前缀是`layout-`，但如果您想使用不同的前缀，可以在Nuxt配置文件中使用`layoutTransition`属性进行更改：
- en: '[PRE103]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Change the prefix in all the default class names to `fade-layout` in `transitions.css`,
    as follows:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`transitions.css`中将所有默认类名的前缀更改为`fade-layout`，如下所示：
- en: '[PRE104]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: In this example, it takes 0.5 of a second to fade in and out of the *entire*
    layout (which includes the navigation). You will see this transition when you
    navigate between pages that use *different layouts*, but not the pages that use
    the same layouts; for example, if you navigate between `/` and `/contact`, you
    won't get the preceding layout transition because they both use the *same layout*,
    which is `/layouts/default.vue`.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，淡入淡出*整个*布局（包括导航）需要0.5秒。当您在使用*不同布局*的页面之间导航时，您将看到此转换，但不会在使用相同布局的页面上看到；例如，如果您在`/`和`/contact`之间导航，您将不会得到前面的布局转换，因为它们都使用*相同的布局*，即`/layouts/default.vue`。
- en: You can find this example in `/chapter-4/nuxt-universal/transition/layout-transition-property/`
    in our GitHub repository.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库中的`/chapter-4/nuxt-universal/transition/layout-transition-property/`中找到此示例。
- en: Once again, you can see that it is very easy to create transitions for layouts,
    and you can customize their prefix class names, just like with the page transitions.
    Besides using CSS transitions for transitioning pages and layouts, we also can
    use CSS animations. So, let's find out how in the next section.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您可以看到为布局创建转换非常容易，并且可以自定义其前缀类名称，就像页面转换一样。除了使用CSS转换来转换页面和布局之外，我们还可以使用CSS动画。因此，让我们在下一节中了解一下。
- en: Making transitions with CSS animations
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSS动画进行转换
- en: 'A CSS transition is an animation that is performed between **two states** only:
    a start and an end. But when you need more intermediate states, you should use
    CSS animation instead so that you can have more control by adding multiple keyframes
    with different percentages between the start and the end states. Take the following
    example:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: CSS转换仅在**两个状态**之间执行动画：开始和结束。但是，当您需要更多中间状态时，应该使用CSS动画，以便通过在开始和结束状态之间添加多个百分比的关键帧来获得更多控制。请看以下示例：
- en: '[PRE105]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '`0%` is the start state while `100%` is the end state of your animation. You
    can add more intermediate states between these two states by adding incremental
    percentages – for example, `10%`, `20%`, `30%`, and so on. However, a CSS transition
    does not have this ability to add these keyframes. So, we can say that a CSS transition
    is a simple form of a CSS animation.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`0%`是动画的起始状态，而`100%`是结束状态。您可以通过添加增量百分比（例如`10%`，`20%`，`30%`等）在这两个状态之间添加更多中间状态。但是，CSS转换没有这种添加关键帧的能力。因此，我们可以说CSS转换是CSS动画的简单形式。'
- en: 'Because of the fact that CSS transitions are "actually" CSS animations, we
    can apply CSS animations just as we apply CSS transitions in the Vue/Nuxt app.
    Let''s find out how with the following steps:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 由于CSS过渡实际上是“实际上”是CSS动画，我们可以在Vue/Nuxt应用程序中应用CSS动画，就像我们应用CSS过渡一样。让我们通过以下步骤了解如何做到这一点：
- en: 'Add the following CSS animation code to the `transitions.css` file, just as
    you did in the previous section:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下CSS动画代码添加到`transitions.css`文件中，就像您在上一节中所做的那样：
- en: '[PRE106]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Change the global default `page-` prefix to `bounce-` in the Nuxt config file:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件中将全局默认的`page-`前缀更改为`bounce-`：
- en: '[PRE107]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Once you have added the preceding code, refresh your browser and you will see
    the page bounces in and out when switching between pages.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您添加了上述代码，请刷新您的浏览器，您将会看到在页面之间切换时页面会弹入和弹出。
- en: You can find this example in `/chapter-4/nuxt-universal/transition/css-animations/`
    in our GitHub repository.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-4/nuxt-universal/transition/css-animations/`中找到这个示例。
- en: Depending on how complex and detailed you want to animate, as well as the level
    of your CSS animation skills, you can create very stunning transitions for your
    pages and layouts. You just have to focus on writing the code and register it
    through the Nuxt config file, then Nuxt will take care of the rest of the job
    of adding and removing the CSS animation classes at appropriate timings for you.
    But what about JavaScript? Can we use jQuery instead, or any other JavaScript
    animation libraries to create animations for transitioning our pages and layouts?
    The answer is yes, you can. Let's find out how in the next section.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您想要进行动画的复杂程度和详细程度，以及您的CSS动画技能水平，您可以为页面和布局创建非常令人惊叹的过渡效果。您只需专注于编写代码并通过Nuxt配置文件注册它，然后Nuxt将负责在适当的时间添加和删除CSS动画类的其余工作。但JavaScript呢？我们可以使用jQuery，或者任何其他JavaScript动画库来创建页面和布局的过渡动画吗？答案是肯定的，您可以。让我们在下一节中了解如何做到这一点。
- en: Making transitions with JavaScript hooks
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JavaScript钩子进行过渡
- en: 'Besides making transitions with CSS, you can also do so with JavaScript by
    adding the following hooks to the `<transition>` component in a Vue app:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用CSS进行过渡，您还可以通过在Vue应用程序的`<transition>`组件中添加以下钩子来使用JavaScript进行过渡：
- en: '[PRE108]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Note that you also can declare the hook without adding `v-on` at the beginning.
    So, writing the hook as `:before-enter` is the same as writing `v-on:before-enter`.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您也可以在开头不添加`v-on`的情况下声明钩子。因此，将钩子写为`:before-enter`与写`v-on:before-enter`是相同的。
- en: 'Then, on the JavaScript side, you should have the following default methods
    in the `methods` property to correspond with the preceding hooks:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在JavaScript方面，您应该在`methods`属性中有以下默认方法，以对应上述的钩子：
- en: '[PRE109]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'You can use these JavaScript hooks alone or together with the CSS transitions.
    If you are using them alone, the `done` callback must be used in the `enter` and
    `leave` hooks (methods), or these two methods will run synchronously and the animation
    or transition you are trying to apply this to will end immediately. Also, if they
    are used alone, you should use `v-bind:css="false"` on the `<transition>` wrapper
    as well so that Vue will ignore your element safely, just in case you have the
    CSS transition in your app as well but it is being used for other elements. Let''s
    make a simple Vue app with these JavaScript hooks with the following steps:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以单独使用这些JavaScript钩子，也可以与CSS过渡一起使用。如果您单独使用它们，则必须在`enter`和`leave`钩子（方法）中使用`done`回调，否则这两个方法将同步运行，并且您尝试应用的动画或过渡将立即结束。此外，如果它们单独使用，您还应该在`<transition>`包装器上使用`v-bind:css="false"`，这样Vue将安全地忽略您的元素，以防万一您的应用程序中也有CSS过渡，但它正在用于其他元素。让我们通过以下步骤创建一个简单的Vue应用程序，使用这些JavaScript钩子：
- en: 'Add the following CDN links to the HTML `<head>` block:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下CDN链接添加到HTML的`<head>`块中：
- en: '[PRE110]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Add the app markups and the `<transition>` component with the hooks to the
    `<body>` block:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<body>`块中添加应用标记和`<transition>`组件与钩子：
- en: '[PRE111]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Follow this with the `<script>` block with the following methods to coordinate
    with the preceding hooks:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来使用以下方法在`<script>`块中协调前面的钩子：
- en: '[PRE112]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: In this example, we use the `fadeTo` method from jQuery to control the transition,
    instead of using pure CSS. You should see the route components fade in and out
    when switching between them, just like the `.v-enter` and `.v-leave` CSS transitions.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用jQuery的`fadeTo`方法来控制过渡，而不是使用纯CSS。当在路由组件之间切换时，您应该看到它们淡入淡出，就像`.v-enter`和`.v-leave`CSS过渡一样。
- en: You can find this example in `/chapter-4/vue/transition/js-hooks.html` in our
    GitHub repository.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-4/vue/transition/js-hooks.html`中找到这个例子。
- en: 'In Nuxt, we don''t need to define the JavaScript hooks to the `<transition>`
    component, just the JavaScript methods in `pageTransition` for the Nuxt config
    file and `transition` for any `.vue` files in the `/pages/` directory. Let''s
    create a quick example in a Nuxt app with the following steps:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuxt中，我们不需要将JavaScript钩子定义为`<transition>`组件，只需要在Nuxt配置文件的`pageTransition`中定义JavaScript方法，以及在`/pages/`目录中的任何`.vue`文件中定义`transition`。让我们在Nuxt应用程序中创建一个快速示例，步骤如下：
- en: 'Install jQuery via npm on your terminal:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上通过npm安装jQuery：
- en: '[PRE113]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Since we are using jQuery in the Nuxt config file and other pages, we can load
    jQuery *globally* through webpack in the Nuxt config file:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们在Nuxt配置文件和其他页面中使用jQuery，我们可以通过Nuxt配置文件在webpack中*全局*加载jQuery：
- en: '[PRE114]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Create a global transition with jQuery in the `pageTransition` option in the
    Nuxt config file:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件的`pageTransition`选项中使用jQuery创建全局过渡：
- en: '[PRE115]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: This example will apply the transition *globally* across all pages when the
    route is changed. Also, we have turned off the CSS transition by setting the `css`
    option to `false`.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 当路由更改时，此示例将在所有页面*全局*应用过渡。此外，我们通过将`css`选项设置为`false`来关闭CSS过渡。
- en: Note that we write the JavaScript functions with object keys as an alternative
    to associating with the attribute hooks in the transition component.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将JavaScript函数写为对象键的替代方法，以便与过渡组件中的属性钩子关联。
- en: 'Create an `about.vue` page in the `/pages/` directory and apply a different
    transition to override the preceding global transition through the `transition`
    property on the `about.vue` page:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/pages/`目录中创建一个`about.vue`页面，并通过`about.vue`页面上的`transition`属性应用不同的过渡，以覆盖前面的全局过渡：
- en: '[PRE116]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: So, in this example, it will take 3 seconds for the transition to take place
    on this particular page, while it takes 1 second for other pages.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这个例子中，这个特定页面的过渡需要3秒钟，而其他页面只需要1秒钟。
- en: 'Note that you must import jQuery to the `.vue` page if it is not loaded in
    the Nuxt config file; for example, assume that you just want to set the transition
    on this particular page only:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果在Nuxt配置文件中未加载jQuery，则必须将jQuery导入`.vue`页面；例如，假设您只想在这个特定页面上设置过渡：
- en: '[PRE117]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Once the code is in place, refresh your browser and you should see the page
    fade in and out as it does with the Vue app when the route is changed between
    pages.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码就位，刷新您的浏览器，您应该看到页面在页面路由更改时淡入淡出，就像Vue应用程序在页面之间切换时一样。
- en: You can find this example in `/chapter-4/nuxt-universal/transition/js-hooks/`
    in our GitHub repository.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-4/nuxt-universal/transition/js-hooks/`中找到这个例子。
- en: Well done; you have completed the sections on creating transitions in Nuxt!
    You can see that JavaScript is another great way for writing transitions and animations
    in your Nuxt app. But before ending this chapter, let's take a look at the transition
    modes that we have been seeing throughout these sections on transitions. So, let's
    find out what they are used for.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好；您已经完成了在Nuxt中创建过渡的部分！您可以看到JavaScript是在Nuxt应用程序中编写过渡和动画的另一种很好的方式。但在结束本章之前，让我们来看看我们在过渡部分一直看到的过渡模式。因此，让我们找出它们的用途。
- en: Note that even though jQuery is not encouraged these days, it is used occasionally
    in this book because it is a dependency of Foundation, which you learned about
    in the previous chapter. So, we will be reusing it sometimes. Alternatively, you
    can use Anime.js to make JavaScript animations. For more information about this
    library, please visit [https://animejs.com/](https://animejs.com/).
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管如今不鼓励使用jQuery，但在本书中偶尔会使用它，因为它是Foundation的依赖项，您在上一章中了解过。因此，我们有时会重新使用它。或者，您可以使用Anime.js来制作JavaScript动画。有关此库的更多信息，请访问[https://animejs.com/](https://animejs.com/)。
- en: Understanding transition modes
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解过渡模式
- en: 'You have probably wondered what `mode="out-in"` (in Vue) or `mode: ''out-in''`
    (in Nuxt) is – for example, in our previous Vue apps with the `<div>about</div>`
    and `<div>contact</div>` components in them. They are there because the transition
    between `<div>about</div>` and `<div>contact</div>` is rendered simultaneously.
    This is the default behavior of `<transition>`: entering and leaving simultaneously.
    But sometimes, you may not want this kind of simultaneous transition, so Vue provides
    a solution with the following transition modes:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '您可能想知道`mode="out-in"`（在Vue中）或`mode: ''out-in''`（在Nuxt中）是什么意思-例如，在我们以前的Vue应用程序中，其中包含`<div>about</div>`和`<div>contact</div>`组件。它们存在是因为`<div>about</div>`和`<div>contact</div>`之间的过渡是同时渲染的。这是`<transition>`的默认行为：同时进入和离开。但有时，您可能不希望这种同时过渡，因此Vue提供了以下过渡模式的解决方案：'
- en: '**The `in-out` mode**'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`in-out`模式**'
- en: This mode is used to let the new element transit in first until its transition
    is complete, then the current element will transit out.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式用于让新元素首先过渡进入，直到其过渡完成，然后当前元素将过渡出去。
- en: '**The `out-in` mode**'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`out-in`模式**'
- en: This mode is used to let the current element transit out first until its transition
    is complete, then the new element will transit in.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式用于让当前元素首先过渡出去，直到其过渡完成，然后新元素将过渡进入。
- en: 'So, you can use these modes in the following ways:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以按以下方式使用这些模式：
- en: 'In a Vue.js app, use them as follows:'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Vue.js应用程序中，使用它们如下：
- en: '[PRE118]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'In a Nuxt app, use them as follows:'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Nuxt应用程序中，使用它们如下：
- en: '[PRE119]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'In JavaScript hooks, use them as follows:'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JavaScript hooks中，使用它们如下：
- en: '[PRE120]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: We have come a long way on this topic on creating custom transitions for our
    Nuxt/Vue apps. You can now make some decent transitions and animations from what
    you have learned in this chapter. Hence, we won't cover too much more on this
    topic any further due to the limited space in this book, but for more information
    and further reading on Vue transitions and animations, please visit [https://vuejs.org/v2/guide/transitions.html](https://vuejs.org/v2/guide/transitions.html).
    Let's now summarise what you have learned in this chapter!
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Nuxt/Vue应用程序的自定义过渡方面，我们已经走了很长的路。您现在可以根据本章学到的知识制作一些体面的过渡和动画。因此，由于本书空间有限，我们不会进一步深入探讨这个主题，但是有关Vue过渡和动画的更多信息和进一步阅读，请访问[https://vuejs.org/v2/guide/transitions.html](https://vuejs.org/v2/guide/transitions.html)。现在让我们总结一下您在本章学到的内容！
- en: Summary
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned what a page is in Nuxt and how to create different
    kinds of routes for your app. You learned how to customize the default app template
    and layout, as well as how to create new layouts and a 404 page. You learned how
    to use CSS transitions and animations, as well as JavaScript hooks and methods,
    to make the transition between your app pages interesting. If you have been following
    the guides from the start, you should be able to deliver a small project with
    a nice looking layout by now. You can find a website example in `/chapter-4/nuxt-universal/sample-website/`
    in our GitHub repository that has used what we have learned in this and previous
    chapters.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了Nuxt中页面的概念以及如何为应用程序创建不同类型的路由。您学会了如何自定义默认应用程序模板和布局，以及如何创建新的布局和404页面。您学会了如何使用CSS过渡和动画，以及JavaScript钩子和方法，使应用程序页面之间的过渡变得有趣。如果您从头开始一直在跟随指南，那么现在您应该能够交付一个外观漂亮的小项目了。您可以在我们的GitHub存储库中的`/chapter-4/nuxt-universal/sample-website/`找到一个网站示例，该示例使用了我们在本章和之前章节中学到的知识。
- en: In the next chapter, we are going to explore the `/components/` directory. You
    will learn how to make use of it in Nuxt apps to refine the layouts and pages
    we have covered in this chapter by understanding Vue components in more detail,
    including passing data to them from the page and layout components, creating single-file
    Vue components, registering global and local Vue components, and so on. Also,
    you will learn how to write reusable code with mixins, using the naming convention
    from the Vue style guide to define component names so that your components are
    organized and standardized for better future maintenance. All of these things
    will be worth knowing and exploring. So, let's get going.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索`/components/`目录。您将学习如何在Nuxt应用程序中使用它，以便通过更详细地了解Vue组件来完善本章中涵盖的布局和页面，包括从页面和布局组件向它们传递数据，创建单文件Vue组件，注册全局和本地Vue组件等。此外，您还将学习如何使用mixin编写可重用的代码，使用Vue风格指南中的命名约定来定义组件名称，以便使您的组件组织和标准化，以便更好地进行未来维护。所有这些知识和探索都是值得的。所以，让我们开始吧。
