["```js\n<div id=\"app\"></div>\n\nnew Vue({\n  // state\n  data () {\n    return { message: '' }\n  },\n\n  // view\n  template: `\n    <div>\n      <p>{{ message }}</p>\n      <button v-on:click=\"greet\">Greet</button>\n    </div>\n  `,\n\n  // actions\n  methods: {\n    greet () {\n      this.message = 'Hello World'\n    }\n  }\n}).$mount('#app')\n```", "```js\n$ npm i vuex\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n```", "```js\n<script src=\"/path/to/vue.js\"></script>\n<script src=\"/path/to/vuex.js\"></script>\n```", "```js\n<script type=\"text/javascript\">\n  const store = new Vuex.Store({\n    state: { count: 0 },\n    mutations: {\n      increment (state) { state.count++ }\n    }\n  })\n  store.commit('increment')\n  console.log(store.state.count) // -> 1\n</script>\n```", "```js\nstore.commit('increment')\nconsole.log(store.state.count)\n```", "```js\n// vuex-sfc/state/basic/src/app.vue\n<p>{{ number }}</p>\n\nimport Vue from 'vue/dist/vue.js'\nimport Vuex from 'vuex'\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state: { number: 1 }\n})\n\nexport default {\n  computed: {\n    number () {\n      return store.state.number\n    }\n  }\n}\n```", "```js\n// vuex-sfc/state/inject/src/entry.js\nimport Vue from 'vue/dist/vue.js'\nimport App from './app.vue'\n\nimport Vuex from 'vuex'\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state: { number: 0 }\n})\n\nnew Vue({\n  el: 'app',\n  template: '<App/>',\n  store,\n  components: {\n    App\n  }\n})\n```", "```js\n// vuex-sfc/state/inject/src/app.vue\n<p>{{ number }}</p>\n\nexport default {\n  computed: {\n    number () {\n      return this.$store.state.number\n    }\n  }\n}\n```", "```js\n// vuex-sfc/state/mapstate/src/entry.js\nconst store = new Vuex.Store({\n  state: {\n    experience: 1,\n    name: 'John',\n    age: 20,\n    job: 'designer'\n  }\n})\n```", "```js\n// vuex-sfc/state/mapstate/src/app.vue\nimport { mapState } from 'vuex'\n\nexport default {\n  computed: mapState([\n    'experience', 'name', 'age', 'job'\n  ])\n}\n```", "```js\ncomputed: {\n  ...mapState({\n    // ...\n  })\n}\n```", "```js\n// vuex-sfc/state/mapstate/src/app.vue\nimport { mapState } from 'vuex'\n\nexport default {\n  data () {\n    return { localExperience: 2 }\n  },\n  computed: {\n    ...mapState([\n      'experience', 'name', 'age', 'job'\n    ]),\n    ...mapState({\n      experienceTotal (state) {\n        return state.experience + this.localExperience\n      }\n    })\n  }\n}\n```", "```js\n...mapState({\n  experienceAlias: 'experience'\n})\n```", "```js\n// vuex-sfc/state/mapstate/src/app.vue\n<p>{{ name }}, {{ age }}, {{ job }}</p>\n<p>{{ experience }}, {{ experienceAlias }}, {{ experienceTotal }}</p>\n```", "```js\nJohn, 20, designer\n1, 1, 3\n```", "```js\n// vuex-sfc/getters/basic/src/entry.js\nconst store = new Vuex.Store({\n  state: {\n    fruits: [\n      { name: 'strawberries', type: 'berries' },\n      { name: 'orange', type: 'citrus' },\n      { name: 'lime', type: 'citrus' }\n    ]\n  },\n  getters: {\n    getCitrus: state => {\n      return state.fruits.filter(fruit => fruit.type === 'citrus')\n    },\n    countCitrus: (state, getters) => {\n      return getters.getCitrus.length\n    },\n    getFruitByName: (state, getters) => (name) => {\n      return state.fruits.find(fruit => fruit.name === name)\n    }\n  }\n})\n```", "```js\n// vuex-sfc/getters/basic/src/app.vue\nexport default {\n  computed: {\n    totalCitrus () {\n      return this.$store.getters.countCitrus\n    },\n    getOrange () {\n      return this.$store.getters.getFruitByName('orange')\n    }\n  }\n}\n```", "```js\n// vuex-sfc/getters/basic/src/app.vue\n<p>{{ totalCitrus }}</p>\n<p>{{ getOrange }}</p>\n```", "```js\n2\n{ \"name\": \"orange\", \"type\": \"citrus\" }\n```", "```js\n// vuex-sfc/getters/mapgetters/src/app.vue\nimport { mapGetters } from 'vuex'\n\nexport default {\n  computed: {\n    ...mapGetters([\n      'countCitrus'\n    ]),\n    ...mapGetters({\n      totalCitrus: 'countCitrus'\n    })\n  }\n}\n```", "```js\n// vuex-sfc/getters/mapgetters/src/app.vue\nexport default {\n  computed: {\n    // ... mapGetters\n    getOrange () {\n      return this.$store.getters.getFruitByName('orange')\n    }\n  }\n}\n```", "```js\n// vuex-sfc/getters/mapgetters/src/app.vue\n<p>{{ countCitrus }}</p>\n<p>{{ totalCitrus }}</p>\n<p>{{ getOrange }}</p>\n```", "```js\n2\n2\n{ \"name\": \"orange\", \"type\": \"citrus\" }\n```", "```js\n// vuex-sfc/mutations/basic/src/entry.js\nconst store = new Vuex.Store({\n  state: { number: 1 },\n  mutations: {\n    multiply (state) {\n      state.number = state.number * 2\n    },\n    divide (state) {\n      state.number = state.number / 2\n    },\n    multiplyBy (state, n) {\n      state.number = state.number  n\n    }\n  }\n})\n```", "```js\n// vuex-sfc/mutations/basic/src/app.js\nexport default {\n  methods: {\n    multiply () {\n      this.$store.commit('multiply')\n    },\n    multiplyBy (number) {\n      this.$store.commit('multiply', number)\n    },\n    divide () {\n      this.$store.commit('divide')\n    }\n  }\n}\n```", "```js\n// vuex-sfc/mutations/mapmutations/src/app.vue\nimport { mapMutations } from 'vuex'\n\nexport default {\n  computed: {\n    number () {\n      return this.$store.state.number\n    }\n  },\n  methods: {\n    ...mapMutations([\n      'multiply',\n      'multiplyBy',\n      'divide'\n    ]),\n    ...mapMutations({\n      square: 'multiply'\n    })\n  }\n}\n```", "```js\n// vuex-sfc/mutations/mapmutations/src/app.vue\n<p>{{ number }}</p>\n<p>\n  <button v-on:click=\"multiply\">x 2</button>\n  <button v-on:click=\"divide\">/ 2</button>\n  <button v-on:click=\"square\">x 2 (square)</button>\n  <button v-on:click=\"multiplyBy(10)\">x 10</button>\n</p>\n```", "```js\n// vuex-sfc/actions/basic/src/entry.js\nconst store = new Vuex.Store({\n  state: { number: 1 },\n  mutations: { ... },\n  actions: {\n    multiplyAsync (context) {\n      setTimeout(() => {\n        context.commit('multiply')\n      }, 1000)\n    },\n    multiply (context) {\n      context.commit('multiply')\n    },\n    multiplyBy (context, n) {\n      context.commit('multiplyBy', n)\n    },\n    divide (context) {\n      context.commit('divide')\n    }\n  }\n})\n```", "```js\ndivide ({ commit }) {\n  commit('divide')\n}\n```", "```js\n// vuex-sfc/actions/basic/src/app.js\nexport default {\n  methods: {\n    multiply () {\n      this.$store.dispatch('multiply')\n    },\n    multiplyAsync () {\n      this.$store.dispatch('multiplyAsync')\n    },\n    multiplyBy (number) {\n      this.$store.dispatch('multiply', number)\n    },\n    divide () {\n      this.$store.dispatch('divide')\n    }\n  }\n}\n```", "```js\n// vuex-sfc/actions/mapactions/src/app.vue\nimport { mapActions } from 'vuex'\n\nexport default {\n  methods: {\n    ...mapActions([\n      'multiply',\n      'multiplyAsync',\n      'multiplyBy',\n      'divide'\n    ]),\n    ...mapActions({\n      square: 'multiply'\n    })\n  }\n}\n```", "```js\n// vuex-sfc/mapactions/src/app.vue\n<p>{{ number }}</p>\n<p>\n  <button v-on:click=\"multiply\">x 2</button>\n  <button v-on:click=\"square\">x 2 (square)</button>\n  <button v-on:click=\"multiplyAsync\">x 2 (multiplyAsync)</button>\n  <button v-on:click=\"divide\">/ 2</button>\n  <button v-on:click=\"multiplyBy(10)\">x 10</button>\n</p>\n\nexport default {\n  computed: {\n    number () {\n      return this.$store.state.number\n    }\n  },\n}\n```", "```js\nconst module1 = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst module2 = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: module1,\n    b: module2\n  }\n})\n```", "```js\nstore.state.a\nstore.state.b\n```", "```js\nconst module1 = {\n  state: { number: 1 },\n  mutations: {\n    multiply (state) {\n      console.log(state.number)\n    }\n  },\n\n  getters: {\n    getNumber (state) {\n      console.log(state.number)\n    }\n  }\n}\n```", "```js\nconst module1 = {\n  actions: {\n    doSum ({ state, commit, rootState }) {\n      //...\n    }\n  }\n}\n```", "```js\nconst module1 = {\n  getters: {\n    getSum (state, getters, rootState) {\n      //...\n    }\n  }\n}\n```", "```js\n// entry.js\nconst module1 = {\n  getters: {\n    getNumber (state) {\n      return state.number\n    }\n  }\n}\n\nconst module2 = {\n  getters: {\n    getNumber (state) {\n      return state.number\n    }\n  }\n}\n```", "```js\n[vuex] duplicate getter key: getNumber\n```", "```js\ngetNumberModule1\ngetNumberModule2\n```", "```js\n// app.js\nimport { mapGetters } from 'vuex'\n\nexport default {\n  computed: {\n    ...mapGetters({\n      getNumberModule1: 'getNumberModule1',\n      getNumberModule2: 'getNumberModule2'\n    })\n  }\n}\n```", "```js\n// app.js\nexport default {\n  computed: {\n    getNumberModule1 (state) {\n      return this.$store.getters.getNumberModule1\n    },\n    getNumberModule2 (state) {\n      return this.$store.getters.getNumberModule2\n    }\n  }\n}\n```", "```js\n// app.js\nexport default {\n  computed: {\n    ...mapState({\n      numberModule1 (state) {\n        return this.$store.state.a.number\n      }\n    }),\n    ...mapState({\n      numberModule2 (state) {\n        return this.$store.state.b.number\n      }\n    })\n  }\n}\n```", "```js\nconst module1 = {\n  namespaced: true\n}\n```", "```js\n// entry.js\nconst module1 = {\n  namespaced: true\n  state: { number:1 }\n}\n\nconst module2 = {\n  namespaced: true\n  state: { number:2 }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: module1,\n    b: module2\n  }\n})\n```", "```js\n// app.js\nimport { mapState } from 'vuex'\n\nexport default {\n  computed: {\n    ...mapState('a', {\n      numberModule1 (state) {\n        return state.number\n      }\n    }),\n    ...mapState('b', {\n      numberModule2 (state) {\n        return state.number\n      }\n    })\n  }\n}\n```", "```js\n// entry.js\nconst module1 = {\n  getters: {\n    getNumber (state) {\n      return state.number\n    }\n  }\n}\n\nconst module2 = {\n  getters: {\n    getNumber (state) {\n      return state.number\n    }\n  }\n}\n```", "```js\n// app.js\nimport { mapGetters } from 'vuex'\n\nexport default {\n  computed: {\n    ...mapGetters('a', {\n      getNumberModule1: 'getNumber',\n    }),\n    ...mapGetters('b', {\n      getNumberModule2: 'getNumber',\n    })\n  }\n}\n```", "```js\n// vuex-sfc/structuring-modules/basic/\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 entry.js\n\u251c\u2500\u2500 components\n\u2502 \u251c\u2500\u2500 app.vue\n\u2502 \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 store\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 actions.js\n    \u251c\u2500\u2500 getters.js\n    \u251c\u2500\u2500 mutations.js\n    \u2514\u2500\u2500 modules\n        \u251c\u2500\u2500 module1.js\n        \u2514\u2500\u2500 module2.js\n```", "```js\n// store/index.js\nimport Vue from 'vue'\nimport actions from './actions'\nimport getters from './getters'\nimport mutations from './mutations'\nimport module1 from './modules/module1'\nimport module2 from './modules/module2'\n\nimport Vuex from 'vuex'\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    number: 3\n  },\n  actions,\n  getters,\n  mutations,\n  modules: {\n    a: module1,\n    b: module2\n  }\n})\n```", "```js\n// store/mutations.js\nexport default {\n  mutation1 (state) {\n    //...\n  },\n  mutation2 (state, n) {\n    //...\n  }\n}\n```", "```js\n// store/modules/module1.js\nexport default {\n  namespaced: true,\n  state: {\n    number: 1\n  },\n  mutations: { ... },\n  getters: { ... },\n  actions: { ... }\n}\n```", "```js\n// vuex-sfc/structuring-modules/advanced/\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 entry.js\n\u251c\u2500\u2500 components\n\u2502 \u2514\u2500\u2500 app.vue\n\u2514\u2500\u2500 store\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 action.js\n    \u2514\u2500\u2500 ...\n      \u251c\u2500\u2500 module1\n      \u2502 \u251c\u2500\u2500 index.js\n      \u2502 \u251c\u2500\u2500 state.js\n      \u2502 \u251c\u2500\u2500 mutations.js\n      \u2502 \u2514\u2500\u2500 ...\n      \u2514\u2500\u2500 module2\n          \u251c\u2500\u2500 index.js\n          \u251c\u2500\u2500 state.js\n          \u251c\u2500\u2500 mutations.js\n          \u2514\u2500\u2500 ...\n```", "```js\n// store/module1/index.js\nimport state from './state'\nimport getters from './getters'\nimport actions from './actions'\nimport mutations from './mutations'\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}\n```", "```js\n// store/module1/state.js\nexport default () => ({\n  number: 1\n})\n```", "```js\n// store/module1/mutations.js\nexport default {\n  mutation1 (state) {\n    //...\n  },\n  mutation2 (state, n) {\n    //...\n  }\n}\n```", "```js\n// store/index.js\nimport module1 from './module1'\nimport module2 from './module2'\n```", "```js\nconst store = new Vuex.Store({\n  strict: true,\n  ...\n})\n```", "```js\n// store/index.js\nconst debug = process.env.NODE_ENV !== 'production'\n\nconst store = new Vuex.Store({\n  strict: debug,\n  ...\n})\n```", "```js\n// vuex-non-sfc/handling-forms/v-model.html\n<input v-model=\"user.message\" />\n\nconst store = new Vuex.Store({\n  strict: true,\n  state: {\n    message: ''\n  }\n})\n\nnew Vue({\n  el: 'demo',\n  store: store,\n  computed: {\n    user () {\n      return this.$store.state.user\n    }\n  }\n})\n```", "```js\nError: [vuex] do not mutate vuex store state outside mutation handlers.\n```", "```js\n// vuex-sfc/form-handling/value-event/store/index.js\nexport default new Vuex.Store({\n  strict: true,\n  state: {\n    message: ''\n  },\n  mutations: {\n    updateMessage (state, message) {\n      state.message = message\n    }\n  }\n})\n```", "```js\n// vuex-sfc/form-handling/value-event/components/app.vue\n<input v-bind:value=\"message\" v-on:input=\"updateMessage\" />\n\nimport { mapState } from 'vuex'\n\nexport default {\n  computed: {\n    ...mapState({\n      message: state => state.message\n    })\n  },\n  methods: {\n    updateMessage (e) {\n      this.$store.commit('updateMessage', e.target.value)\n    }\n  }\n}\n```", "```js\n// vuex-sfc/form-handling/getter-setter/components/app.vue\n<input v-model=\"message\" />\n\nexport default {\n  computed: {\n    message: {\n      get () {\n        return this.$store.state.message\n      },\n      set (value) {\n        this.$store.commit('updateMessage', value)\n      }\n    }\n  }\n}\n```", "```js\n// store/index.js\nexport const state = () => ({\n  number: 3\n})\n\nexport const mutations = {\n  mutation1 (state) { ... }\n}\n\nexport const getters = {\n  getter1 (state, getter) { ... }\n}\n\nexport const actions = {\n  action1 ({ state, commit }) { ... }\n}\n```", "```js\n// store/index.js\nexport const strict = false\n```", "```js\n// store/module1.js\nexport const state = () => ({\n  number: 1\n})\n\nexport const mutations = {\n  mutation1 (state) { ... }\n}\n\nexport const getters = {\n  getter1 (state, getter, rootState) { ... }\n}\n\nexport const actions = {\n  action1 ({ state, commit, rootState }) { ... }\n}\n```", "```js\nnew Vuex.Store({\n  state: () => ({\n    number: 3\n  }),\n  mutations: {\n    mutation1 (state) { ... }\n  },\n  getters: {\n    getter1 (state, getter) { ... }\n  },\n  actions: {\n    action1 ({ state, commit }) { ... }\n  },\n  modules: {\n    module1: {\n      namespaced: true,\n      state: () => ({\n        number: 1\n      }),\n      mutations: {\n        mutation1 (state) { ... }\n      }\n      ...\n    }\n  }\n})\n```", "```js\n// pages/index.vue\nimport { mapState, mapGetters, mapActions } from 'vuex'\n\nexport default {\n  computed: {\n    ...mapState({\n      numberRoot: state => state.number,\n    }),\n    ...mapState('module1', {\n      numberModule1: state => state.number,\n    }),\n    ...mapGetters({\n      getNumberRoot: 'getter1'\n    }),\n    ...mapGetters('module1', {\n      getNumberModule1: 'getter1'\n    })\n  },\n  methods: {\n    ...mapActions({\n      doNumberRoot:'action1'\n    }),\n    ...mapActions('module1', {\n      doNumberModule1:'action1'\n    })\n  }\n}\n```", "```js\n// pages/index.vue\n<p>{{ numberRoot }}, {{ getNumberRoot }}</p>\n<button v-on:click=\"doNumberRoot\">x 2 (root)</button>\n\n<p>{{ numberModule1 }}, {{ getNumberModule1 }}</p>\n<button v-on:click=\"doNumberModule1\">x 2 (module1)</button>\n```", "```js\n3, 3\n1, 1\n```", "```js\n// chapter-10/nuxt-universal/module-mode/\n\u2514\u2500\u2500 store\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 module1.js\n    \u251c\u2500\u2500 module2.js\n    \u2514\u2500\u2500 ...\n```", "```js\n// chapter-10/vuex-sfc/structuring-modules/basic/\n\u2514\u2500\u2500 store\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 ...\n    \u2514\u2500\u2500 modules\n        \u251c\u2500\u2500 module1.js\n        \u2514\u2500\u2500 module2.js\n```", "```js\nERROR [vuex] module namespace not found in mapState(): module1/\nERROR [vuex] module namespace not found in mapGetters(): module1/\n```", "```js\nexport default {\n  computed: {\n    ..mapState('modules/module1', {\n      numberModule1: state => state.number,\n    }),\n    ...mapGetters('modules/module1', {\n      getNumberModule1: 'getter1'\n    })\n  },\n  methods: {\n    ...mapActions('modules/module1', {\n      doNumberModule1:'action1'\n    })\n  }\n}\n```", "```js\n// store/state.js\nexport default () => ({\n  number: 3\n})\n\n// store/mutations.js\nexport default {\n  mutation1 (state) { ... }\n}\n```", "```js\n// store/module1/state.js\nexport default () => ({\n  number: 1\n})\n\n// store/module1/mutations.js\nexport default {\n  mutation1 (state) { ... }\n}\n```", "```js\n// chapter-10/nuxt-universal/module-files/\n\u2514\u2500\u2500 store\n    \u251c\u2500\u2500 state.js\n    \u251c\u2500\u2500 action.js\n    \u2514\u2500\u2500 ...\n      \u251c\u2500\u2500 module1\n      \u2502 \u251c\u2500\u2500 state.js\n      \u2502 \u251c\u2500\u2500 mutations.js\n      \u2502 \u2514\u2500\u2500 ...\n      \u2514\u2500\u2500 module2\n          \u251c\u2500\u2500 state.js\n          \u251c\u2500\u2500 mutations.js\n          \u2514\u2500\u2500 ...\n```", "```js\n// chapter-10/vuex-sfc/structuring-modules/advanced/\n\u2514\u2500\u2500 store\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 action.js\n    \u2514\u2500\u2500 ...\n      \u251c\u2500\u2500 module1\n      \u2502 \u251c\u2500\u2500 index.js\n      \u2502 \u251c\u2500\u2500 state.js\n      \u2502 \u251c\u2500\u2500 mutations.js\n      \u2502 \u2514\u2500\u2500 ...\n      \u2514\u2500\u2500 module2\n          \u251c\u2500\u2500 index.js\n          \u251c\u2500\u2500 state.js\n          \u251c\u2500\u2500 mutations.js\n          \u2514\u2500\u2500 ...\n```", "```js\n// pages/index.vue\nimport axios from 'axios'\n\nexport default {\n  async fetch () {\n    const { store } = this.$nuxt.context\n    await store.dispatch('users/getUsers')\n  }\n}\n```", "```js\n// store/users/state.js\nexport default () => ({\n  list: {}\n})\n\n// store/users/mutations.js\nexport default {\n  setUsers (state, data) {\n    state.list = data\n  },\n  removeUser (state, id) {\n    let found = state.list.find(todo => todo.id === id)\n    state.list.splice(state.list.indexOf(found), 1)\n  }\n}\n\n// store/users/actions.js\nexport default {\n  setUsers ({ commit }, data) {\n    commit('setUsers', data)\n  },\n  removeUser ({ commit }, id) {\n    commit('removeUser', id)\n  }\n}\n```", "```js\n// pages/index.vue\nimport { mapState, mapActions } from 'vuex'\n\nexport default {\n  computed: {\n    ...mapState ('users', {\n      users (state) {\n        return state.list\n      }\n    })\n  },\n  methods: {\n    ...mapActions('users', {\n      removeUser: 'removeUser'\n    })\n  }\n}\n```", "```js\n// pages/index.vue\n<li v-for=\"(user, index) in users\" v-bind:key=\"user.id\">\n  {{ user.name }}\n  <button class=\"button\" v-on:click=\"removeUser(user.id)\">Remove</button>\n</li>\n```", "```js\n// store/users/actions.js\nimport axios from 'axios'\n\nexport const actions = {\n  async getUsers ({ commit }) {\n    const { data } = await axios.get('https://jsonplaceholder.typicode.com/users')\n    commit('setUsers', data)\n  }\n}\n```", "```js\n// pages/index.vue\nexport default {\n  async fetch () {\n    const { store } = this.$nuxt.context\n    await store.dispatch('users/getUsers')\n  }\n}\n```", "```js\n$ npm install koa-session\n```", "```js\n// server/middlewares.js\nimport session from 'koa-session'\n\napp.keys = ['some secret hurr']\napp.use(session(app))\n```", "```js\n// server/routes.js\nrouter.post('/login', async (ctx, next) => {\n  let request = ctx.request.body || {}\n  if (request.username === 'demo' && request.password === 'demo') {\n    ctx.session.authUser = { username: 'demo' }\n    ctx.body = { username: 'demo' }\n  } else {\n    ctx.throw(401)\n  }\n})\n\nrouter.post('/logout', async (ctx, next) => {\n  delete ctx.session.authUser\n  ctx.body = { ok: true }\n})\n```", "```js\n// store/state.js\nexport default () => ({\n  authUser: null\n})\n```", "```js\n// store/mutations.js\nexport default {\n  setUser (state, data) {\n    state.authUser = data\n  }\n}\n```", "```js\n// store/index.js\nexport const actions = {\n  nuxtServerInit({ commit }, { req }) {\n    if (req.ctx.session && req.ctx.session.authUser) {\n      commit('setUser', req.ctx.session.authUser)\n    }\n  },\n  async login({ commit }, { username, password }) {\n    const { data } = await axios.post('/api/login', { username, \n     password })\n    commit('setUser', data.data)\n  },\n  async logout({ commit }) {\n    await axios.post('/api/logout')\n    commit('setUser', null)\n  }\n}\n```", "```js\nactions: {\n  nuxtServerInit ({ commit }, { req }) {\n    if (req.session.user) {\n      commit('user', req.session.user)\n    }\n  }\n}\n```", "```js\nactions: {\n  async nuxtServerInit({ commit }) {\n    await commit('setUser', req.ctx.session.authUser)\n  }\n}\n\n```", "```js\n// pages/index.vue\n<form v-on:submit.prevent=\"login\">\n  <input v-model=\"username\" type=\"text\" name=\"username\" />\n  <input v-model=\"password\" type=\"password\" name=\"password\" />\n  <button class=\"button\" type=\"submit\">Login</button>\n</form>\n\nexport default {\n  data() {\n    return {\n      username: '',\n      password: ''\n    }\n  },\n  methods: {\n    async login() {\n      await this.$store.dispatch('login', {\n        username: this.username,\n        password: this.password\n      })\n    },\n    async logout() {\n      await this.$store.dispatch('logout')\n    }\n  }\n}\n```"]