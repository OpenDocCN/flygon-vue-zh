- en: Writing End-to-End Tests
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 编写端到端测试
- en: Writing tests is part of web development. The more complex and the bigger your
    app gets, the more you need to test the app, otherwise, it will break at some
    point and you will spend lots of time fixing bugs and patching things up. In this
    chapter, you will write end-to-end tests with AVA and jsdom for Nuxt apps, and
    also get hands-on experience of browser automated testing with Nightwatch. You
    will learn how to install these tools and set up the testing environment – so
    let's get started.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编写测试是Web开发的一部分。您的应用程序变得越来越复杂和庞大，您就越需要测试应用程序，否则它将在某个时候出现故障，并且您将花费大量时间修复错误和补丁。在本章中，您将使用AVA和jsdom为Nuxt应用编写端到端测试，并且还将亲身体验使用Nightwatch进行浏览器自动化测试。您将学习如何安装这些工具并设置测试环境-让我们开始吧。
- en: 'The topics we will cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题如下：
- en: End-to-end testing versus unit testing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端到端测试与单元测试
- en: End-to-end testing tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端到端测试工具
- en: Writing tests with `jsdomn` and AVA for Nuxt apps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`jsdomn`和AVA为Nuxt应用编写测试
- en: Introducing Nightwatch
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Nightwatch
- en: Writing tests with Nightwatch for Nuxt apps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nightwatch为Nuxt应用编写测试
- en: End-to-end testing versus unit testing
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端到端测试与单元测试
- en: 'There are two types of tests commonly practiced for web applications: unit
    testing and end-to-end testing. You might have heard a lot about unit testing
    and have done some (or loads) in the past. Unit testing is used to test the small
    and individual parts of your app, while in contrast, end-to-end testing is to
    test the overall functions of your app. End-to-end testing involves ensuring the
    integrated components of an app function as expected. In other words, the entire
    app is tested in a real-world scenario similar to how a real user would interact
    with your app. For example, the simplified end-to-end testing of your user login
    page might involve the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通常有两种类型的测试用于Web应用程序：单元测试和端到端测试。你可能听说过很多关于单元测试，并且在过去做过一些（或者很多）。单元测试用于测试应用程序的小部分和个体部分，而相反，端到端测试用于测试应用程序的整体功能。端到端测试涉及确保应用程序的集成组件按预期运行。换句话说，整个应用程序在类似于真实用户与应用程序交互的真实场景中进行测试。例如，用户登录页面的简化端到端测试可能涉及以下内容：
- en: Load the login page.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载登录页面。
- en: Provide valid details to the inputs in the login form.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在登录表单中输入有效的详细信息。
- en: Click on the Submit button.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“提交”按钮。
- en: Log in to the page successfully and see a greeting message.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功登录到页面并看到问候消息。
- en: Log out of the system.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出系统。
- en: What about unit testing? Unit testing runs fast and allows us to precisely identify
    exact problems and bugs. The main downside of unit testing is that it is time-consuming
    to write tests for every aspect of your app. And despite the fact that your app
    has passed the unit tests, the app as a whole may still break.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么单元测试呢？单元测试运行速度快，可以精确识别确切的问题和错误。单元测试的主要缺点是为应用程序的每个方面编写测试非常耗时。而且尽管您的应用程序已通过了单元测试，但整体应用程序仍可能出现故障。
- en: End-to-end testing can implicitly test many things at once and assure you that
    you have a working system. End-to-end testing runs slowly compared to unit testing
    and it can't explicitly point you to the root of the failure of your app. A small
    change in seemingly insignificant parts of your app can break your entire testing
    suite.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试可以隐式测试许多方面，并确保您拥有一个正常工作的系统。与单元测试相比，端到端测试运行速度较慢，并且无法明确指出应用程序失败的根本原因。应用程序中看似不重要的部分发生微小变化可能会破坏整个测试套件。
- en: Combining unit and end-to-end tests for an app can be ideal and compelling because
    that gives you a more thorough test of your app, but again it can be time-consuming
    and costly. In this book, we focus on **end-to-end testing** because by default,
    Nuxt is configured seamlessly with the end-to-end testing tools that you will
    discover in the next section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序的单元测试和端到端测试结合在一起可能是理想和令人信服的，因为这样可以更彻底地测试您的应用程序，但这可能会耗费时间和金钱。在本书中，我们专注于**端到端测试**，因为默认情况下，Nuxt与端到端测试工具无缝配置，您将在下一节中发现。
- en: End-to-end testing tools
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端到端测试工具
- en: Nuxt makes end-to-end testing very easy and fun by using the AVA and jsdom Node.js
    modules together. But before implementing and combining them for the tests in
    a Nuxt app, let's dive into each of these Node.js modules to see how they work
    separately so you have a solid basic understanding of these tools. Let's start
    with jsdom in the next section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt通过将AVA和jsdom Node.js模块一起使用，使端到端测试变得非常简单和有趣。但在Nuxt应用程序中实现并结合它们进行测试之前，让我们深入了解这些Node.js模块的每一个，看看它们是如何分开工作的，这样您就可以对这些工具有一个扎实的基本理解。让我们从下一节开始学习jsdom。
- en: jsdom
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jsdom
- en: 'In a nutshell, `jsdom` is a JavaScript-based implementation of the W3C Document
    Object Model (DOM) for Node.js. But, what does it mean? What do we need it for?
    Imagine you need to manipulate DOM from a raw HTML on the server side in a Node.js
    app, such as Express and Koa apps, but there is no DOM on the server side and
    hence there isn''t much you can do. This is when jsdom comes to our rescue. It
    turns the raw HTML into a DOM fragment that works like the DOM on the client side,
    but inside Node.js. And then, you can use a client-side JavaScript library such
    as jQuery to manipulate the DOM on Node.js like a charm. The following is an example
    of basic usage of this for server-side apps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`jsdom`是基于JavaScript的W3C文档对象模型（DOM）在Node.js中的实现。但是，这意味着什么？我们需要它做什么？想象一下，您需要在Node.js应用程序中从原始HTML的服务器端操作DOM，例如Express和Koa应用程序，但服务器端没有DOM，因此您无法做太多事情。这就是jsdom拯救我们的时候。它将原始HTML转换为在Node.js中像客户端DOM一样工作的DOM片段。然后，您可以使用客户端JavaScript库，如jQuery，在Node.js上操作DOM。以下是用于服务器端应用程序的基本用法示例：
- en: 'Import jsdom on a server-side app:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上导入jsdom：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Pass in a string of any raw HTML to the `JSDOM` constructor and you will get
    back a DOM object:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任何原始HTML字符串传递给`JSDOM`构造函数，您将获得一个DOM对象：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The DOM object you get from the preceding code snippet has many useful properties,
    notably the `window` object, and then you can start manipulating the HTML string
    you pass in just like on the client side. Now let''s apply this tool on the **Koa
    API**, which you learned about in the previous chapter and which can be found
    in `/chapter-12/nuxt-universal/cross-domain/jwt/axios-module/backend/` in our
    GitHub repository, to print the `Hello world` message. Follow these steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您从前面的代码片段中获得的DOM对象具有许多有用的属性，特别是`window`对象，然后您可以开始像在客户端上一样操作传递的HTML字符串。现在让我们在**Koa
    API**上应用这个工具，您在上一章中了解过，并且可以在我们的GitHub存储库中的`/chapter-12/nuxt-universal/cross-domain/jwt/axios-module/backend/`中找到，以打印`Hello
    world`消息。按照以下步骤进行：
- en: 'Install `jsdom` and jQuery via npm:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm安装`jsdom`和jQuery：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Import `jsdom` and pass an HTML string, just like we did in the preceding basic
    usage example:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`jsdom`并传递HTML字符串，就像我们在前面的基本用法示例中所做的那样：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Output the `text` to the endpoint:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`text`输出到端点：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see the "Hello world" message in JSON format (shown in the following
    snippet) at `localhost:4000/public` when you run `npm run dev` on your terminal:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在终端上运行`npm run dev`时，您应该在`localhost:4000/public`看到以JSON格式显示的“Hello world”消息（在下面的代码片段中显示）：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a `movie` module in our API and use Axios to fetch an HTML page from
    the IMDb website, pass the HTML to the JSDOM constructor, import jQuery, and then
    apply it to the DOM window object created by jsdom as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的API中创建一个`movie`模块，并使用Axios从IMDb网站获取HTML页面，将HTML传递给JSDOM构造函数，导入jQuery，然后将其应用于由jsdom创建的DOM窗口对象如下：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that Axios must be installed in your project directory via npm, which you
    do with `npm i axios`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Axios必须通过npm在您的项目目录中安装，您可以使用`npm i axios`进行安装。
- en: 'Apply the jQuery object to all movies with the `list_item` class and extract
    the data (the name and showtime of each movie) as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将jQuery对象应用于所有具有`list_item`类的电影，并提取数据（每部电影的名称和放映时间）如下：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Output the `list` to the endpoint:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`list`输出到端点：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should see a similar list of movies in the following JSON format at `localhost:4000/public/movies`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在`localhost:4000/public/movies`看到以下JSON格式的类似电影列表：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can find these examples in `/chapter-13/jsdom/` in our GitHub repository.
    For more information about this npm package, visit [https://github.com/jsdom/jsdom](https://github.com/jsdom/jsdom).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub存储库的`/chapter-13/jsdom/`中找到这些示例。有关此npm包的更多信息，请访问[https://github.com/jsdom/jsdom](https://github.com/jsdom/jsdom)。
- en: You can see how useful this tool is on the server side. It gives us the ability
    to manipulate the raw HTML as if we were on the client side. Now let's move on
    to AVA and learn some basic usage of it in the next section before using it together
    with **jsdom** in our Nuxt app.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到此工具在服务器端有多有用。它使我们能够像在客户端一样操纵原始HTML。现在让我们在下一节中继续学习AVA的一些基本用法，然后在我们的Nuxt应用程序中与**jsdom**一起使用。
- en: AVA
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AVA
- en: 'In short, AVA (not Ava or ava, pronounced `/ˈeɪvə/`) is a JavaScript test runner
    for Node.js. There are a lot of test runners out there: Mocha, Jasmine, and tape,
    among others. AVA is another alternative to the existing list. First of all, AVA
    is simple. It is really easy to set up. Besides, it runs the test in parallel
    by default, which means your tests will run fast. It works for both frontend and
    backend Javascript apps. All in all, it''s certainly worth a try. Let''s get started
    by creating a simple and basic Node.js app in the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，AVA（不是Ava或ava，发音为`/ˈeɪvə/`）是一个用于Node.js的JavaScript测试运行器。有很多测试运行器：Mocha、Jasmine和tape等。AVA是现有列表的另一种选择。首先，AVA很简单。它真的很容易设置。此外，默认情况下它并行运行测试，这意味着您的测试将运行得很快。它适用于前端和后端的JavaScript应用程序。总而言之，它绝对值得一试。让我们通过以下步骤开始创建一个简单的基本Node.js应用程序：
- en: 'Install AVA via npm and save it to the `devDependencies` option in the `package.json`
    file:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm安装AVA并将其保存到`package.json`文件的`devDependencies`选项中：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Install Babel core and other Babel packages for us to write ES6 code in our
    tests for the app:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Babel核心和其他Babel包，以便我们可以在应用程序的测试中编写ES6代码：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Configure the `test` script in the `package.json` file as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`文件中配置`test`脚本如下：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a `setup.js` file in the root directory with the following code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根目录中创建一个`setup.js`文件，其中包含以下代码：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the following class and function that we want to test later in these
    two separate files in our app:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的应用程序中的两个单独文件中创建以下类和函数，以便稍后进行测试：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a `hello.js` test in the `/test/` directory for testing `/src/hello.js`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/test/`目录中为测试`/src/hello.js`创建一个`hello.js`测试：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create another test in a separate file in the `/test/` directory again for
    testing `/src/add.js` :'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/test/`目录中的另一个文件中创建另一个测试，用于测试`/src/add.js`：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run all the tests on your terminal:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上运行所有测试：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You also can run the test with the `--watch` flag to enable AVA''s watch mode:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`--watch`标志运行测试，以启用AVA的观察模式：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should get the following result if the tests pass:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试通过，您应该会得到以下结果：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can find the preceding examples in `/chapter-13/ava/` in our GitHub repository.
    For more information about this npm package, visit [https://github.com/avajs/ava](https://github.com/avajs/ava).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-13/ava/`中找到前面的示例。有关此npm包的更多信息，请访问[https://github.com/avajs/ava](https://github.com/avajs/ava)。
- en: That is easy and fun, isn't it? It is always rewarding to see our code pass
    its tests. Now you have a basic understanding of this tool, so it is time to implement
    it with jsdom in the Nuxt app. Let's get to it in the next section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易也很有趣，不是吗？看到我们的代码通过测试总是令人满意的。现在您已经对这个工具有了基本的了解，所以现在是时候在Nuxt应用程序中使用jsdom来实现它了。让我们在下一节中开始吧。
- en: Writing tests with jsdomn and AVA for Nuxt apps
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jsdomn和AVA为Nuxt应用程序编写测试
- en: 'You have learned about jsdom and AVA independently and have done some simple
    tests. Now, we can bring these two packages together into our Nuxt apps. Let''s
    install them in our Nuxt app, which you created in the previous chapter, in `/chapter-12/nuxt-universal/cross-domain/jwt/axios-module/frontend/`
    using the following steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经独立学习了`jsdom`和`AVA`，并进行了一些简单的测试。现在，我们可以将这两个包合并到我们的Nuxt应用程序中。让我们在我们在上一章中创建的Nuxt应用程序中安装它们，路径为`/chapter-12/nuxt-universal/cross-domain/jwt/axios-module/frontend/`，使用以下步骤：
- en: 'Install these two tools via npm and save them to the `devDependencies` option
    in the `package.json` file:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm安装这两个工具，并将它们保存到`package.json`文件中的`devDependencies`选项中：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Install Babel core and other Babel packages for us to write ES6 code in our
    tests in the app:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`Babel`核心和其他Babel包，以便我们可以在应用程序中编写ES6代码：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the AVA configuration to the `package.json` file as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将AVA配置添加到`package.json`文件中，如下所示：
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a `setup.js` file in the root directory, just like you did in the previous
    section, but using the following code:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根目录中创建一个`setup.js`文件，就像您在上一节中所做的那样，但使用以下代码：
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Prepare the following test template for writing tests in the `/test/` directory:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备以下测试模板，以便在`/test/`目录中编写测试：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The tests will run on `localhost:5000` (or any port you like). You should test
    on the production build, so turn development mode off in the `config.dev` key
    and use `universal` in the `config.mode` key if your app was developed for both
    server and client sides. Then, make sure to close the Nuxt server after the test
    process is finished.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 测试将在`localhost:5000`上运行（或者您喜欢的任何端口）。您应该在生产构建上进行测试，因此在`config.dev`键中关闭开发模式，并在`config.mode`键中使用`universal`，如果您的应用程序同时为服务器端和客户端开发。然后，在测试过程完成后，请确保关闭Nuxt服务器。
- en: 'Write the first test to test our home page to ensure that we have correct HTML
    rendered on this page:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写第一个测试，测试我们的主页，以确保在此页面上呈现了正确的HTML：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Write the second test for the `/about` route to ensure that we have correct
    HTML rendered on this page:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`/about`路由编写第二个测试，以确保在此页面上呈现了正确的HTML。
- en: '[PRE26]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Write the third test for the `/about` page to ensure the text content, class
    name, and style are as expected via DOM manipulation on the server side with `jsdom`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`/about`页面编写第三个测试，以确保通过服务器端的`jsdom`进行DOM操作，文本内容、类名和样式符合预期。
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should get the following result if the tests pass with `npm run test`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试通过`npm run test`，您应该会得到以下结果：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can see that in our third test, we created a `hexify` function to convert
    a decimal code (R, G, B), computed by the `Window.getComputedStyle` method, to
    a hex code. For example, you will get `rgb(255, 255, 255)` for the colour you
    set as `color: white` in your CSS style. So, you will get `rgb(0, 0, 255)` for
    `0000ff` and the app must convert that to pass the test.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以看到，在我们的第三个测试中，我们创建了一个`hexify`函数，用于将由`Window.getComputedStyle`方法计算的十进制代码（R、G、B）转换为十六进制代码。例如，您将得到`rgb(255,
    255, 255)`，对应于您在CSS样式中设置为`color: white`的颜色。因此，对于`0000ff`，您将得到`rgb(0, 0, 255)`，应用程序必须将其转换以通过测试。'
- en: You can find these tests in `/chapter-13/nuxt-universal/ava/` in our GitHub
    repository.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-13/nuxt-universal/ava/`中找到这些测试。
- en: Well done. You have managed to write simple tests for Nuxt apps. We hope you
    find it easy and fun to write tests in Nuxt. The complexity of your test depends
    on what you want to test. Hence, it is very important to first understand what
    you want to test. Then, you can start writing a test that is sensible, meaningful,
    and relevant.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好。您已经成功为Nuxt应用程序编写了简单的测试。我们希望您发现在Nuxt中编写测试很容易且有趣。您的测试的复杂性取决于您想要测试什么。因此，首先了解您想要测试的内容非常重要。然后，您可以开始编写一个合理、有意义和相关的测试。
- en: However, using jsdom with AVA to test the Nuxt app has some limitations because
    it does not involve a browser. Remember that jsdom is meant for turning the raw
    HTML into the DOM on the server side, hence we use the async/await statement to
    request a page asynchronously for our tests in the preceding exercise. If you
    want to use a browser to test your Nuxt app, Nightwatch can be a good solution,
    so we will take a look at it in the next section. Let's move on.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用jsdom与AVA测试Nuxt应用程序存在一些限制，因为它不涉及浏览器。请记住，jsdom用于在服务器端将原始HTML转换为DOM，因此我们在前面的练习中使用了async/await语句来异步请求页面进行测试。如果您想要使用浏览器来测试您的Nuxt应用程序，Nightwatch可能是一个很好的解决方案，因此我们将在下一节中介绍它。让我们继续。
- en: Introducing Nightwatch
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Nightwatch
- en: 'Nightwatch is an automated testing framework that provides an end-to-end testing
    solution for web-based apps. It uses the W3C WebDriver API (it was called Selenium
    WebDriver formerly) behind the scenes to open the **web browser** to perform operations
    and assertions on DOM elements. It is a great tool if you want to use a browser
    to test your Nuxt apps. But before using it in a Nuxt app, let''s use it on its
    own in the following steps to write some simple tests so that you have a basic
    idea of how it works:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Nightwatch是一个自动化测试框架，为基于Web的应用程序提供端到端的测试解决方案。它在幕后使用W3C WebDriver API（以前称为Selenium
    WebDriver）来打开**web浏览器**，对DOM元素执行操作和断言。如果您想要使用浏览器来测试您的Nuxt应用程序，这是一个很好的工具。但在Nuxt应用程序中使用它之前，让我们按照以下步骤单独使用它来编写一些简单的测试，以便您对其工作原理有一个基本的了解：
- en: 'Install Nightwatch via npm and save it to the `devDependencies` option in the
    `package.json` file:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm安装Nightwatch，并将其保存到`package.json`文件的`devDependencies`选项中：
- en: '[PRE29]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Install GeckoDriver via npm and also save it to the `devDependencies` option
    in the `package.json` file:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm安装GeckoDriver，并将其保存到`package.json`文件的`devDependencies`选项中：
- en: '[PRE30]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Nightwatch relies on WebDriver, so we need to install a specific WebDriver server
    depending on your **target browser** – for example, if you want to write tests
    against Firefox only, then you will need to install GeckoDriver.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Nightwatch依赖于WebDriver，因此我们需要根据您的**目标浏览器**安装特定的WebDriver服务器-例如，如果您只想针对Firefox编写测试，则需要安装GeckoDriver。
- en: 'In this book, we focus on writing tests against a single browser. But if you
    want to target multiple browsers such as Chrome, Edge, Safari, and Firefox in
    parallel, then you will need to install the **Selenium Standalone Server** (also
    known as Selenium Grid), as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们专注于针对单个浏览器编写测试。但是，如果您想要并行地针对多个浏览器（如Chrome、Edge、Safari和Firefox）进行测试，那么您需要安装**Selenium
    Standalone Server**（也称为Selenium Grid），如下所示：
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note that we will be testing on Firefox and Chrome in this book, so this `selenium-server`
    package will not be used.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在本书中我们将在Firefox和Chrome上进行测试，因此不会使用`selenium-server`包。
- en: 'Add `nightwatch` to the `test` script in the `package.json` file:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`文件的`test`脚本中添加`nightwatch`：
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a `nightwatch.json` file to configure Nightwatch as follows:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`nightwatch.json`文件来配置Nightwatch如下：
- en: '[PRE33]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this simple exercise, we want to test the repository search function of github.com
    on a specific contributor called **Lau Tiam Kok**, so we set `https://github.com/lautiamkok`
    in the `launch_url` option in this configuration.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的练习中，我们想要测试github.com上特定贡献者**Lau Tiam Kok**的仓库搜索功能，所以我们在这个配置中的`launch_url`选项中设置了`https://github.com/lautiamkok`。
- en: We will write tests in the `/tests/` directory, so we indicate the directory
    location in the `src_folders` option. We will test against Firefox only at `4444`
    (the server port) so we set this information in the `webdriver` and `test_settings`
    options.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`/tests/`目录中编写测试，所以我们在`src_folders`选项中指定了目录位置。我们将仅针对Firefox进行测试，端口为`4444`，所以我们在`webdriver`和`test_settings`选项中设置了这些信息。
- en: You can find the options for the rest of test settings such as `output_folder`
    at [https://nightwatchjs.org/gettingstarted/configuration/](https://nightwatchjs.org/gettingstarted/configuration/).
    If you want to find out the test settings for the Selenium Server, please visit
    [https://nightwatchjs.org/gettingstarted/configuration/selenium-server-settings](https://nightwatchjs.org/gettingstarted/configuration/#selenium-server-settings)[.](https://nightwatchjs.org/gettingstarted/configuration/#selenium-server-settings)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://nightwatchjs.org/gettingstarted/configuration/](https://nightwatchjs.org/gettingstarted/configuration/)找到其余测试设置的选项，比如`output_folder`。如果你想找出Selenium服务器的测试设置，请访问[https://nightwatchjs.org/gettingstarted/configuration/selenium-server-settings](https://nightwatchjs.org/gettingstarted/configuration/#selenium-server-settings)。
- en: 'Create a `nightwatch.conf.js` file in the project root for setting the driver
    path **dynamically** to the server path:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录中创建一个`nightwatch.conf.js`文件，用于将驱动程序路径**动态**设置为服务器路径：
- en: '[PRE34]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Prepare the following Nightwatch test template in a `.js` file (for example,
    `demo.js`) in the `/tests/` directory, as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/tests/`目录中的一个`.js`文件（例如`demo.js`）中准备以下Nightwatch测试模板，如下所示：
- en: '[PRE35]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a `github.js` file in the `/tests/` directory with the following code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/tests/`目录中创建一个`github.js`文件，其中包含以下代码：
- en: '[PRE36]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In this test, we want to assert that the repository search function is working
    as expected so we need to make sure that certain elements and text contents exist
    and are visible, such as the `<body>` and `<input>` elements, and the text for
    `nuxt` and `lautiamkok (LAU TIAM KOK) · GitHub`. You should get the following
    result (assuming the test passes) when you run it with `npm run test`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，我们想要断言仓库搜索功能是否按预期工作，所以我们需要确保某些元素和文本内容存在并可见，比如`<body>`和`<input>`元素，以及`nuxt`和`lautiamkok
    (LAU TIAM KOK) · GitHub`的文本。当你用`npm run test`运行它时，你应该得到以下结果（假设测试通过）：
- en: '[PRE37]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You can find the preceding test in `/chapter-13/nightwatch/` in our GitHub repository.
    For more information on Nightwatch, please visit [https://nightwatchjs.org/](https://nightwatchjs.org/).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub仓库的`/chapter-13/nightwatch/`中找到上述测试。有关Nightwatch的更多信息，请访问[https://nightwatchjs.org/](https://nightwatchjs.org/)。
- en: Compared to AVA, Nightwatch is not as minimal as it requires some configuration
    that can be lengthy and complex, but if you follow the simplest `nightwatch.json`
    file, it should get you started with Nightwatch quite quickly. So, let's apply
    what you just have learned in this section to the Nuxt app in the next section.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 与AVA相比，Nightwatch并不那么简洁，因为它需要一些可能会很冗长和复杂的配置，但如果你遵循最简单的`nightwatch.json`文件，它应该能让你很快地开始使用Nightwatch。所以，让我们在下一节将你刚学到的内容应用到Nuxt应用中。
- en: Writing tests with Nightwatch for Nuxt apps
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nightwatch为Nuxt应用编写测试。
- en: 'In this exercise, we want to test the user login authentication that we created
    in the previous chapter, [Chapter 12](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml),
    *Creating User Logins and API Authentication*, against the **Chrome browser**.
    We want to make sure the user can log in with their credentials and obtain their
    user data as expected. We will write the tests in the `/frontend/` directory where
    we kept the Nuxt app, so we will need to modify the `package.json` file accordingly
    and write the tests in the following steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们希望针对**Chrome浏览器**测试我们在上一章[第12章](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml)中创建的用户登录验证和API身份验证。我们希望确保用户可以使用他们的凭据登录并按预期获取他们的用户数据。我们将在存放Nuxt应用程序的`/frontend/`目录中编写测试，因此我们需要相应地修改`package.json`文件，并按以下步骤编写测试：
- en: 'Install ChromeDriver via npm and save it to the `devDependencies` option in
    the `package.json` file:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm安装ChromeDriver并将其保存到`package.json`文件中的`devDependencies`选项中：
- en: '[PRE38]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Change the launch URL to `localhost:3000` and other settings as shown in the
    following code block in the `nightwatch.json` file for testing against Chrome
    in the Nightwatch configuration file:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`nightwatch.json`文件中将启动URL更改为`localhost:3000`，并根据以下代码块中显示的其他设置修改Nightwatch配置文件，以便针对Chrome进行测试：
- en: '[PRE39]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create a `nightwatch.conf.js` file in the project root for setting the driver
    path **dynamically** to the server path:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录中创建一个`nightwatch.conf.js`文件，用于将驱动程序路径**动态**设置为服务器路径：
- en: '[PRE40]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a `login.js` file in the `/tests/` directory with the following code:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/tests/`目录中创建一个`login.js`文件，其中包含以下代码：
- en: '[PRE41]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The logic of this test is the same as the test in the previous section. We want
    to make sure that certain elements and texts are present on the login page before
    and after logging in.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试的逻辑与上一节的测试相同。我们希望在登录前后确保登录页面上存在某些元素和文本。
- en: 'Before running the test, run the Nuxt and API apps at `localhost:3000` and
    `localhost:4000` on your terminal and then open another terminal with `npm run
    test` in the `/frontend/` directory. You should get the following result if the
    test passes:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行测试之前，在终端上运行Nuxt和API应用程序，分别在`localhost:3000`和`localhost:4000`上运行，然后在`/frontend/`目录中打开另一个终端并运行`npm
    run test`。如果测试通过，您应该会得到以下结果：
- en: '[PRE42]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note that you must run the Nuxt app and the API concurrently before running
    the tests. You can find the preceding test in `/chapter-13/nuxt-universal/nightwatch/`
    in our GitHub repository.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在运行测试之前，您必须同时运行Nuxt应用程序和API。您可以在我们的GitHub存储库的`/chapter-13/nuxt-universal/nightwatch/`中找到前面的测试。
- en: Well done. You have finished this short chapter on writing tests for Nuxt apps.
    The steps and exercises in this chapter have provided you with the basic foundation
    to expand your tests as your app gets larger and complicated. Let's summarize
    what you have learned in this chapter in the final section.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 做得好。您已经完成了关于为Nuxt应用程序编写测试的简短章节。本章中的步骤和练习为您提供了扩展测试的基本基础，使您的应用程序变得更大更复杂。让我们在最后一节总结一下您在本章学到的内容。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned to use jsdom for server-side DOM manipulation
    and for writing simple tests with AVA and Nightwatch separately, and then tried
    using these tools together to run end-to-end tests on our Nuxt app. You also have
    learned the difference between end-to-end testing and unit testing and their respective
    pros and cons. Last but not least, you have learned from the exercises in this
    chapter that Nuxt is configured perfectly by default for you to write end-to-end
    tests with jsdom and AVA with much less effort.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学会了使用jsdom进行服务器端DOM操作，并分别使用AVA和Nightwatch编写简单的测试，然后尝试使用这些工具一起在我们的Nuxt应用程序上运行端到端测试。您还学会了端到端测试和单元测试之间的区别以及它们各自的优缺点。最后但同样重要的是，您从本章的练习中学到，Nuxt默认配置完美，可以让您使用jsdom和AVA轻松编写端到端测试。
- en: In the coming chapter, we will cover how to keep our code clean with linters
    such as ESLint, Prettier, and StandardJS, integrating and mixing them for Vue
    and Nuxt apps. Finally, you will learn the Nuxt deployment commands and use them
    to deploy your app to a live server. So, stay tuned.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍如何使用诸如ESLint、Prettier和StandardJS等代码检查工具来保持我们的代码整洁，以及如何将它们集成和混合到Vue和Nuxt应用程序中。最后，您将学习Nuxt部署命令，并使用它们将您的应用程序部署到实时服务器上。所以，请继续关注。
