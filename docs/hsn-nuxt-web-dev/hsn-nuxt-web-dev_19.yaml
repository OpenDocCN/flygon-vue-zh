- en: Using Linters, Formatters, and Deployment Commands
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Linter、Formatter和部署命令
- en: Besides writing tests (whether they are end-to-end tests or unit tests), code
    linting and formatting also are parts of web development. All developers, whether
    you are a Java, Python, PHP, or JavaScript developer, should know the coding standards
    in their fields and comply with them to keep your code clean, readable, and formatted
    for better maintenance in the future. The tools that we commonly use for JavaScript,
    Vue, and Nuxt apps are ESLint, Prettier, and StandardJS. In this chapter, you
    will learn to install, configure, and use them with our apps. Finally, after building,
    testing, and linting your app, you will learn the Nuxt deployment commands to
    deploy your app to a host.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 除了编写测试（无论是端到端测试还是单元测试），代码检查和格式化也是Web开发的一部分。所有开发人员，无论您是Java、Python、PHP还是JavaScript开发人员，都应该了解其领域的编码标准，并遵守这些标准，以保持您的代码清洁、可读，并为将来更好地维护格式化。我们通常用于JavaScript、Vue和Nuxt应用的工具是ESLint、Prettier和StandardJS。在本章中，您将学习如何安装、配置和使用它们。最后，在构建、测试和检查您的应用程序之后，您将学习Nuxt部署命令，以将您的应用程序部署到主机。
- en: 'The topics we will cover in this chapter are the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Introducing Linters – Prettier, ESLint, and StandardJS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍linter - Prettier、ESLint和StandardJS
- en: Integrating ESLint and Prettier
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成ESLint和Prettier
- en: Using ESLint and Prettier for Vue and Nuxt apps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Vue和Nuxt应用程序使用ESLint和Prettier
- en: Deploying Nuxt apps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署Nuxt应用程序
- en: Introducing linters – Prettier, ESLint, and StandardJS
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍linter - Prettier、ESLint和StandardJS
- en: In a nutshell, a linter is a tool that analyzes source code and flags errors
    and bugs in the code and styles. The term originated in 1978 from a Unix utility
    called `lint` that evaluated source code written in C, and was developed by computer
    scientist Stephen C. Johnson at Bell Labs while debugging the Yacc grammar he
    was writing. Today, the tools we focus on in this book are Prettier, ESLint, and
    StandardJS. Let's look into each of them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，linter是一种分析源代码并标记代码和样式中的错误和错误的工具。这个术语起源于1978年的一个名为`lint`的Unix实用程序，它评估了用C编写的源代码，并由贝尔实验室的计算机科学家Stephen
    C. Johnson开发，用于调试他正在编写的Yacc语法。今天，我们在本书中关注的工具是Prettier、ESLint和StandardJS。让我们来看看它们各自的情况。
- en: Prettier
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Prettier
- en: 'Prettier is a code formatter that supports many languages such as JavaScript,
    Vue, JSX, CSS, HTML, JSON, GraphQL, and more. It improves the readability of your
    code and ensures your code conforms to the rules that it has set for you. It sets
    a length limit for your lines of code; for example, take a look at the single
    following line of code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier是一个支持许多语言的代码格式化程序，如JavaScript、Vue、JSX、CSS、HTML、JSON、GraphQL等。它提高了代码的可读性，并确保您的代码符合它为您设置的规则。它为您的代码行设置了长度限制；例如，看一下以下单行代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code is considered lengthy on a single line and is difficult
    to read, so Prettier will reprint it into multiple lines for you as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码被认为是单行代码过长且难以阅读，因此Prettier将为您重新打印成多行，如下所示：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Also, any custom or messy styling is also parsed and reprinted, as in the following
    example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，任何自定义或混乱的样式也会被解析和重新打印，如下例所示：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Prettier will print and reformat this into the following, much neater format:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier会将其打印并重新格式化为以下更整洁的格式：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, if Prettier finds no semicolons in your code, it will insert them
    for you, just as in the preceding example code. You can turn this feature off
    if you prefer no semicolons in your code, as is the case with all the code used
    in this book. Let''s turn off this rule with the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果Prettier在您的代码中找不到分号，它将为您插入分号，就像前面的示例代码一样。如果您喜欢代码中没有分号，您可以关闭此功能，就像本书中使用的所有代码一样。让我们通过以下步骤关闭这个规则：
- en: 'Install Prettier via npm to your project:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm将Prettier安装到您的项目中：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Parse a specific JavaScript file:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析特定的JavaScript文件：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Or, parse all files in the recursive folders:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，解析递归文件夹中的所有文件：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or even try parsing the files in parallel folders:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至尝试解析并行文件夹中的文件：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Before committing any change **in-place** (beware!) with the `--write` option,
    you can use other output options such as the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交任何**原地**更改（注意！）之前，您可以使用其他输出选项，例如以下选项：
- en: Use `-c` or `--check` to check whether the given files are formatted and print
    a human-friendly summary message afterward with the paths to the unformatted files.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-c`或`--check`来检查给定的文件是否格式化，并在之后打印一个人性化的摘要消息，其中包含未格式化文件的路径。
- en: Use `-l` or `--list-different` to print the names of files that are different
    from Prettier's formatting.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-l`或`--list-different`来打印与Prettier格式不同的文件的名称。
- en: For more information about this tool, visit [https://prettier.io/](https://prettier.io/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此工具的更多信息，请访问[https://prettier.io/](https://prettier.io/)。
- en: Now let's take a look at how we can configure this tool in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何在下一节中配置这个工具。
- en: Configuring Prettier
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Prettier
- en: 'Prettier is built with many options for customization. You can configure Prettier
    via the following options:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier具有许多自定义选项。您可以通过以下选项配置Prettier：
- en: A `prettier.config.js` or `.prettierrc.js` script in a JavaScript object
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个JavaScript对象中的`prettier.config.js`或`.prettierrc.js`脚本
- en: A `package.json` file using a `prettier` key
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`prettier`键的`package.json`文件
- en: 'A .`prettierrc` file in YAML or JSON with optional extensions: `.json`, `.yaml`,
    or `.yml`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个YAML或JSON中的`.prettierrc`文件，可选扩展名：`.json`，`.yaml`或`.yml`
- en: A `.prettierrc.toml` file in TOML
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个TOML中的`.prettierrc.toml`文件
- en: 'It is a good idea to customize Prettier even though you can choose not to.
    For example, Prettier enforces double quotes and prints semicolons at the ends
    of statements by default. If we don''t want these defaults, we can create a `prettier.config.js`
    file in our project root directory. Let''s use Prettier in the API we have created
    (we made a copy at `/chapter-14/apps-to-fix/koa-api/` in our GitHub repository)
    with this configuration in the following steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您可以选择不这样做，但定制Prettier是一个好主意。例如，Prettier默认强制使用双引号，并在语句末尾打印分号。如果我们不想要这些默认设置，我们可以在项目根目录中创建一个`prettier.config.js`文件。让我们在以下步骤中使用Prettier在我们创建的API中（我们在GitHub存储库的`/chapter-14/apps-to-fix/koa-api/`中制作了一份副本）使用此配置：
- en: 'Create a `prettier.config.js` file in our project root directory with the following
    code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的项目根目录中创建一个`prettier.config.js`文件，其中包含以下代码：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Parse all the JavaScript code in the `/src/` directory with the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令解析`/src/`目录中的所有JavaScript代码：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, all our files are listed on the terminal when you run `npx
    prettier --write "src/**/*"`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，当您运行`npx prettier --write "src/**/*"`时，所有我们的文件都会在终端上列出：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Prettier will highlight the files that have been reprinted and formatted.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier将突出显示已重新打印和格式化的文件。
- en: For more format options, check out [https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html).
    You can find this example in `/chapter-14/prettier/` in our GitHub repository.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多格式选项，请查看[https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html)。您可以在我们的GitHub存储库的`/chapter-14/prettier/`中找到此示例。
- en: It is pretty sweet when you see your code "prettified" so effortlessly, isn't
    it? Let's move on to the next linter, ESLint, to see how it helps to tidy up our
    code in the next section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当您如此轻松地看到您的代码被“美化”时，这是相当不错的，不是吗？让我们继续下一个linter，ESLint，看看它如何在下一节中帮助整理我们的代码。
- en: ESLint
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ESLint
- en: 'ESLint is a pluggable linter for JavaScript. It is designed so that all of
    its rules are completely pluggable and allows developers to customize the linting
    rules. ESLint is shipped with some built-in rules to make it useful from the start,
    but you can dynamically load rules at any point in time. For example, ESLint disallows
    duplicate keys in object literals (`no-dupe-keys`), and you will get an error
    for the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint是一个用于JavaScript的可插拔代码检查工具。它被设计成所有规则都是完全可插拔的，并允许开发人员自定义代码检查规则。ESLint附带了一些内置规则，使其从一开始就很有用，但你可以在任何时候动态加载规则。例如，ESLint禁止对象字面量中的重复键（`no-dupe-keys`），你将会得到以下代码的错误：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The correct code under this rule will look like the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个规则的正确代码将如下所示：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'ESLint will flag the preceding error and we will have to fix it manually. However,
    can use the `--fix` option on the command line to automatically fix problems that
    are more easily fixed without human intervention. Let''s see how to do so in the
    following steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint将标记前面的错误，我们将不得不手动修复它。但是，可以在命令行上使用`--fix`选项来自动修复一些更容易在没有人为干预的情况下修复的问题。让我们看看如何在以下步骤中做到这一点：
- en: 'Install ESLint via npm in your project:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目中通过npm安装ESLint：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Set up a configuration file:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个配置文件：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will be asked a list of questions similar to the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被要求回答类似以下的问题列表：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These questions might vary depending on the options/answers you choose for each
    question.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题可能会根据你为每个问题选择的选项/答案而有所不同。
- en: 'Add the `lint` and `lint-fix` scripts to the `package.json` file:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`lint`和`lint-fix`脚本添加到`package.json`文件中：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a `.gitignore` file with the paths and files that we want ESLint to
    ignore:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`.gitignore`文件，包含我们希望ESLint忽略的路径和文件：
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Launch ESLint to scan for errors:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动ESLint进行错误扫描：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Use `lint-fix` to fix those errors:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`lint-fix`来修复这些错误：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can check out the list of ESLint rules at [https://eslint.org/docs/rules/](https://eslint.org/docs/rules/).
    Rules in ESLint are grouped by category: Possible Errors, Best Practices, Variables,
    Stylistic Issues, ECMAScript 6, and so on. No rules are enabled by default. You
    can use the `"extends": "eslint:recommended"` property in a configuration file
    to enable rules that report common problems, which have a checkmark (✓) in the
    list.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以在[https://eslint.org/docs/rules/](https://eslint.org/docs/rules/)查看ESLint规则列表。ESLint的规则按类别分组：可能的错误、最佳实践、变量、风格问题、ECMAScript
    6等等。默认情况下没有启用任何规则。你可以在配置文件中使用`"extends": "eslint:recommended"`属性来启用报告常见问题的规则，这些规则在列表中有一个勾号（✓）。'
- en: For more information about this tool, visit [https://eslint.org/](https://eslint.org/).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此工具的更多信息，请访问[https://eslint.org/](https://eslint.org/)。
- en: Now let's take a look at how we can configure this tool in the next section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何在下一节中配置这个工具。
- en: Configuring ESLint
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置ESLint
- en: 'As we mentioned before, ESLint is a pluggable linter. That means it is completely
    configurable and that you can switch off every rule, or some of them, or mix custom
    rules to make ESLint specifically suited for your project. Let''s use ESLint in
    the API we have created with one of the following configurations. There are two
    methods to configure ESLint:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，ESLint是一个可插拔的代码检查工具。这意味着它是完全可配置的，你可以关闭每个规则，或其中一些规则，或混合自定义规则，使ESLint特别适用于你的项目。让我们在我们创建的API中使用ESLint，并选择以下配置之一。有两种方法来配置ESLint：
- en: 'Use the JavaScript comments directly with the ESLint configuration information
    in a file, as in the following example:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文件中直接使用JavaScript注释与ESLint配置信息，就像下面的例子一样：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Use a JavaScript, JSON, or YAML file to specify configuration information for
    an entire directory and all of its subdirectories.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript、JSON或YAML文件来指定整个目录及其所有子目录的配置信息。
- en: 'Using the first method can be time-consuming because you may need to provide
    the ESLint configuration information in every `.js` file, while in the second
    method, you just need to configure it **once** in a `.json` file. So let''s use
    the second method for our API in the following steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第一种方法可能会耗费时间，因为您可能需要在每个`.js`文件中提供ESLint配置信息，而在第二种方法中，您只需要在`.json`文件中**一次**配置它。因此，在以下步骤中，让我们使用第二种方法来为我们的API进行配置：
- en: 'Create a `.eslintrc.js` file or generate it with `--init` in the root directory
    with the following rules:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`.eslintrc.js`文件，或者在根目录中使用`--init`生成它，其中包含以下规则：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In these rules, we want to make sure to do the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些规则中，我们希望确保执行以下操作：
- en: Allow undeclared variables (`no-undef`) by setting the `no-undef` option to
    `off`
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将`no-undef`选项设置为`off`来允许未声明的变量(`no-undef`)
- en: Disallow the use of the console (`no-console`) by setting the `no-console` option
    to `error`
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将`no-console`选项设置为`error`来禁止使用控制台(`no-console`)
- en: Enforce the consistent use of either backticks, double quotes, or single quotes
    (`quotes`) by setting the `quotes` option to `error` and `double`
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制使用反引号、双引号或单引号(`quotes`)，将`quotes`选项设置为`error`和`double`
- en: 'Add the `lint` and `lint-fix` scripts to the `package.json` file:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`lint`和`lint-fix`脚本添加到`package.json`文件中：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Launch ESLint to scan for errors:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动ESLint进行错误扫描：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You will get a report like the following if there are any errors:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有任何错误，您将收到以下类似的报告：
- en: '[PRE24]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Even though ESLint can fix your code automatically with the `--fix` option,
    you still need to fix some manually, as in the following example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管ESLint可以使用`--fix`选项自动修复您的代码，但您仍然需要手动修复一些，就像以下示例中一样：
- en: '[PRE25]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: For more information about the configuration, check out [https://eslint.org/docs/user-guide/configuring](https://eslint.org/docs/user-guide/configuring).
    You can find this example in `/chapter-14/eslint/` in our GitHub repository.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置的更多信息，请查看[https://eslint.org/docs/user-guide/configuring](https://eslint.org/docs/user-guide/configuring)。您可以在我们的GitHub存储库的`/chapter-14/eslint/`中找到此示例。
- en: It is user-friendly, isn't it? It is indeed another awesome tool just like Prettier.
    Let's move on to the last linter, StandardJS, to see how it tidies up our code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 它用户友好，不是吗？它确实是另一个像Prettier一样令人敬畏的工具。让我们继续介绍最后一个代码检查器StandardJS，看看它如何整理我们的代码。
- en: StandardJS
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: StandardJS
- en: 'StandardJS or JavaScript Standard Style is a JavaScript style guide, linter,
    and formatter. It is completely opinionated, meaning that it is completely uncustomizable
    – no configuration is needed, hence there are no `.eslintrc`, `.jshintrc`, or
    `.jscsrc` files to manage. It is uncustomizable and unconfigurable. The easiest
    way to use StandardJS is to install it globally as a Node command-line program. Let''s
    find out how you can use this tool in the following steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: StandardJS或JavaScript标准样式是JavaScript样式指南、代码检查器和格式化程序。它完全是主观的，这意味着它是完全不可定制的 -
    不需要配置，因此没有`.eslintrc`、`.jshintrc`或`.jscsrc`文件来管理。它是不可定制和不可配置的。使用StandardJS的最简单方法是将其作为Node命令行程序全局安装。让我们看看您可以如何在以下步骤中使用此工具：
- en: 'Install StandardJS via npm globally:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm全局安装StandardJS：
- en: '[PRE26]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can also install it locally for a single project:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以为单个项目在本地安装它：
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Navigate to the directory that you want to inspect and type the following command
    in the terminal:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到要检查的目录，并在终端中输入以下命令：
- en: '[PRE28]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If you install StandardJS locally, then run it with `npx` instead:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在本地安装了StandardJS，则使用`npx`来运行它：
- en: '[PRE29]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You also can add it to the `package.json` file as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将其添加到`package.json`文件中，如下所示：
- en: '[PRE30]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then the code of your JavaScript project is checked automatically when you
    run it with npm:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，当您使用npm运行JavaScript项目的代码时，代码将被自动检查：
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To fix any messy or inconsistent code, try the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要修复任何混乱或不一致的代码，请尝试以下命令：
- en: '[PRE32]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Even though StandardJS is uncustomizable, it relies on ESLint. The ESLint packages
    used by StandardJS are as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管StandardJS是不可定制的，但它依赖于ESLint。StandardJS使用的ESLint包如下：
- en: '`eslint`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eslint`'
- en: '`standard-engine`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`standard-engine`'
- en: '`eslint-config-standard`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eslint-config-standard`'
- en: '`eslint-config-standard-jsx`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eslint-config-standard-jsx`'
- en: '`eslint-plugin-standard`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eslint-plugin-standard`'
- en: While Prettier is a formatter, StandardJS is mostly a linter just like ESLint.
    If you use `--fix` on your code with StandardJS or ESLint and then run it again
    with Prettier, you will see that any long lines (which are ignored by StandardJS
    and ESLint) will be formatted by Prettier.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Prettier是一个格式化工具，StandardJS大多是一个类似ESLint的linter。如果你在你的代码上使用`--fix`来修复StandardJS或ESLint，然后再用Prettier运行它，你会发现任何长行（这些行被StandardJS和ESLint忽略）将被Prettier格式化。
- en: For more information about this tool, visit [https://standardjs.com/](https://standardjs.com/).
    You should also check out the summary of the standard JavaScript rules at [https://standardjs.com/rules.html](https://standardjs.com/rules.html).
    You can find an example that uses StandardJS in `/chapter-14/standard/` in our
    GitHub repository.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此工具的更多信息，请访问[https://standardjs.com/](https://standardjs.com/)。你还应该查看标准JavaScript规则的摘要，网址为[https://standardjs.com/rules.html](https://standardjs.com/rules.html)。你可以在我们的GitHub存储库的`/chapter-14/standard/`中找到一个使用StandardJS的示例。
- en: However, if you are looking for a more flexible and customizable solution that
    sits in between these tools, you can combine Prettier and ESLint for your project.
    Let's take a look at how you can achieve that in the next section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你正在寻找一个更灵活和可定制的解决方案，介于这些工具之间，你可以为你的项目结合使用Prettier和ESLint。让我们在下一节看看你如何实现这一点。
- en: Integrating ESLint and Prettier
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成ESLint和Prettier
- en: Prettier and ESLint complement each other. We can integrate Prettier into the
    workflow with ESLint. This allows you to use Prettier for formatting your code
    while letting ESLint focus on linting your code. So, to integrate them, first,
    we will need the `eslint-plugin-prettier` plugin from ESLint to use Prettier "under"
    ESLint. Then we can use Prettier to add rules for formatting the code as usual.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier和ESLint相辅相成。我们可以将Prettier集成到ESLint的工作流中。这样你就可以使用Prettier来格式化你的代码，同时让ESLint专注于linting你的代码。因此，为了集成它们，首先我们需要从ESLint中使用`eslint-plugin-prettier`插件来使用Prettier。然后我们可以像往常一样使用Prettier来添加格式化代码的规则。
- en: 'However, ESLint contains rules that are formatting-related that can conflict with
    Prettier, such as `arrow-parens` and `space-before-function-paren`, and that can
    cause some issues when using them together. To resolve these conflicting issues,
    we will need the **`eslint-config-prettier`** config for turning off the ESLint
    rules that conflict with Prettier. Let''s take a look at how you can achieve that
    in the following steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，ESLint包含与Prettier冲突的格式相关的规则，比如`arrow-parens`和`space-before-function-paren`，在一起使用时可能会引起一些问题。为了解决这些冲突问题，我们需要使用`eslint-config-prettier`配置来关闭与Prettier冲突的ESLint规则。让我们在以下步骤中看看你如何实现这一点：
- en: 'Install `eslint-plugin-prettier` and **`eslint-config-prettier`** via npm:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm安装`eslint-plugin-prettier`和`eslint-config-prettier`：
- en: '[PRE33]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Enable the plugin and rules of `eslint-plugin-prettier` in the `.eslintrc.json`
    file:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.eslintrc.json`文件中启用`eslint-plugin-prettier`的插件和规则：
- en: '[PRE34]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Override ESLint''s rules by extending Prettier''s with `eslint-config-prettier`
    in the `.eslintrc.json` file:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`eslint-config-prettier`在`.eslintrc.json`文件中通过扩展Prettier的规则来覆盖ESLint的规则：
- en: '[PRE35]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Note that the value "`prettier`" should be put last in the `extends` array
    so that Prettier''s configurations can override those of ESLint. Also, we can
    use an `.eslintrc.js` file instead of the JSON file for the preceding configurations
    because we can add comments in the JavaScript files that can be helpful. So, the
    following is our configuration for using Prettier under ESLint:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，值"`prettier`"应该放在`extends`数组的最后，以便Prettier的配置可以覆盖ESLint的配置。此外，我们可以使用`.eslintrc.js`文件而不是JSON文件来进行上述配置，因为我们可以在JavaScript文件中添加有用的注释。因此，以下是我们在ESLint下使用Prettier的配置：
- en: '[PRE36]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Configure Prettier in the `package.json` file (or in a `prettier.config.js`
    file) so that Prettier does not print semicolons in our code and always uses single
    quotes:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`文件（或`prettier.config.js`文件）中配置Prettier，以便Prettier不会在我们的代码中打印分号，并始终使用单引号：
- en: '[PRE37]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Run `npm run lint-fix` on the terminal to fix and format our code in one shot.
    After that, you can check the code again with Prettier alone using the `npx prettier`
    command as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上运行`npm run lint-fix`以一次性修复和格式化我们的代码。之后，您可以使用`npx prettier`命令再次仅使用Prettier检查代码：
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then you should get the following result on your terminal:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您应该在终端上获得以下结果：
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: That means our code has no formatting issues and complies successfully in Prettier
    code style. It is pretty cool to bring these two tools together to suit our needs
    and preferences, isn't it? But you are still only half-way through – let's apply
    these configurations for Vue and Nuxt apps in the next section.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的代码没有格式问题，并且在Prettier代码样式中成功编译。将这两个工具结合起来以满足我们的需求和偏好是非常酷的，不是吗？但是您仍然只完成了一半-让我们在下一节中为Vue和Nuxt应用程序应用这些配置。
- en: You can find this integration example in `/chapter-14/eslint+prettier/` in our
    GitHub repository.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-14/eslint+prettier/`中找到此集成示例。
- en: Using ESLint and Prettier for Vue and Nuxt apps
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Vue和Nuxt应用程序中使用ESLint和Prettier
- en: 'The eslint-plugin-vue plugin is an official ESLint plugin for Vue and Nuxt
    apps. It allows us to inspect the code in the `<template>` and `<script>` blocks
    in the `.vue` files with ESLint to find any syntax errors, the wrong use of Vue
    directives, and the Vue style violation against the Vue style guide. Also, we
    are using Prettier to enforce the code format, so install `eslint-plugin-prettier`
    and `eslint-config-prettier` just like we did in the previous section for the
    basic specific configurations that we prefer. Let''s get all these sorted in the
    following steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: eslint-plugin-vue插件是Vue和Nuxt应用程序的官方ESLint插件。它允许我们使用ESLint检查`.vue`文件中`<template>`和`<script>`块中的代码，以查找任何语法错误，错误使用Vue指令以及违反Vue风格指南的Vue样式。此外，我们正在使用Prettier来强制执行代码格式，因此像我们在上一节中所做的那样安装`eslint-plugin-prettier`和`eslint-config-prettier`以获取我们喜欢的基本特定配置。让我们在以下步骤中解决所有这些问题：
- en: 'Install this `eslint-plugin-vue` plugin using npm:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用npm安装`eslint-plugin-vue`插件：
- en: '[PRE40]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You may get some warning:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会收到一些警告：
- en: '[PRE41]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Ignore them because the minimum requirements for `eslint-plugin-vue` are ESLint
    v5.0.0 or later and Node.js v6.5.0 or later, and you should already have the latest
    versions.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略它们，因为`eslint-plugin-vue`的最低要求是ESLint v5.0.0或更高版本和Node.js v6.5.0或更高版本，而您应该已经拥有最新版本。
- en: You can check out the minimum requirements at [https://eslint.vuejs.org/user-guide/installation](https://eslint.vuejs.org/user-guide/#installation).
    Besides the Vue style guide, you should also check out the Vue rules at [https://eslint.vuejs.org/rules/](https://eslint.vuejs.org/rules/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://eslint.vuejs.org/user-guide/installation](https://eslint.vuejs.org/user-guide/#installation)查看最低要求。除了Vue风格指南，您还应该查看[https://eslint.vuejs.org/rules/](https://eslint.vuejs.org/rules/)上的Vue规则。
- en: 'Add the `eslint-plugin-vue` plugin with its generic rulesets in the ESLint
    config file:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ESLint配置文件中添加`eslint-plugin-vue`插件及其通用规则集：
- en: '[PRE42]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Install `eslint-plugin-prettier` and `eslint-config-prettier` and add them
    to the ESLint config file as well:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `eslint-plugin-prettier` 和 `eslint-config-prettier` 并将它们添加到 ESLint 配置文件中：
- en: '[PRE43]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: But these are still not enough. You may want to configure some Vue rules to
    suit your preference. Let's find out some default Vue key rules that we might
    want to configure in the next section.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 但这些还不够。您可能希望配置一些 Vue 规则以适应您的偏好。让我们在下一节中找出一些默认的 Vue 关键规则，我们可能希望配置。
- en: For more information about this `eslint-plugin-vue` plugin, visit [https://eslint.vuejs.org/](https://eslint.vuejs.org/).
    For Vue directives, please visit [https://vuejs.org/v2/api/Directives](https://vuejs.org/v2/api/#Directives),
    and for the Vue style guide, please visit [https://vuejs.org/v2/style-guide/](https://vuejs.org/v2/style-guide/).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此 `eslint-plugin-vue` 插件的更多信息，请访问 [https://eslint.vuejs.org/](https://eslint.vuejs.org/)。有关
    Vue 指令，请访问 [https://vuejs.org/v2/api/Directives](https://vuejs.org/v2/api/#Directives)，有关
    Vue 风格指南，请访问 [https://vuejs.org/v2/style-guide/](https://vuejs.org/v2/style-guide/)。
- en: Configuring Vue rules
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Vue 规则
- en: 'There are only four default Vue rules we want to override in this book. You
    only need to add the preferred rules in the `''rules''` option in the .`eslintrc.js`
    file just like we did for the `eslint-plugin-prettier` plugin in the previous
    section. Let''s get to it in the following steps:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们只想覆盖四个默认的 Vue 规则。您只需要在 `.eslintrc.js` 文件的 `'rules'` 选项中添加首选规则，就像我们在上一节中为
    `eslint-plugin-prettier` 插件所做的那样。让我们按照以下步骤进行：
- en: 'Configure the `vue/v-on-style` rule to "`longform`" as follows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `vue/v-on-style` 规则配置为 "`longform`" 如下：
- en: '[PRE44]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `vue/v-on-style` rule enforces `shorthand` or `longform` on the `v-on`
    directive style. The default is set to `shorthand`, for example:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue/v-on-style` 规则强制在 `v-on` 指令样式上使用 `shorthand` 或 `longform`。默认设置为 `shorthand`，例如：'
- en: '[PRE45]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'But in this book, `longform` is preferred, as in the following example:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 但在本书中，首选 `longform`，如下例所示：
- en: '[PRE46]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: For more information about this rule, visit [https://eslint.vuejs.org/rules/v-on-style.htmlvue-v-on-style](https://eslint.vuejs.org/rules/v-on-style.html#vue-v-on-style).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此规则的更多信息，请访问 [https://eslint.vuejs.org/rules/v-on-style.htmlvue-v-on-style](https://eslint.vuejs.org/rules/v-on-style.html#vue-v-on-style)。
- en: 'Configure the `vue/html-self-closing` rule to allow self-closing signs on the
    void elements as follows:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `vue/html-self-closing` 规则配置为允许在空元素上使用自闭合符号如下：
- en: '[PRE47]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: A void element is an HTML element that is not allowed to have contents in any
    circumstances, such as `<br>`, `<hr>`, `<img>`, `<input>`, `<link>`, and `<meta>`.
    In writing XHTML, it is mandatory to self-close these elements, such as `<br/>`
    and `<img src="..." />`. In this book, we want to allow that even though the `/`
    character is considered optional in HTML5.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 空元素是 HTML 元素，在任何情况下都不允许有内容，例如 `<br>`、`<hr>`、`<img>`、`<input>`、`<link>` 和 `<meta>`。在编写
    XHTML 时，必须自闭这些元素，例如 `<br/>` 和 `<img src="..." />`。在本书中，即使在 HTML5 中，`/` 字符被认为是可选的，我们也希望允许这样做。
- en: 'Under the `vue/html-self-closing` rule, you will get errors as a result of
    self-closing these void elements, even though it aims to enforce the self-closing
    sign in HTML elements. That''s rather confusing, right? In a Vue.js template,
    we can use either of the following two styles for elements that do not have content:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `vue/html-self-closing` 规则，自闭合这些空元素将导致错误，尽管它旨在强制 HTML 元素中的自闭合符号。这相当令人困惑，对吧？在
    Vue.js 模板中，我们可以使用以下两种样式来表示没有内容的元素：
- en: '`<YourComponent></YourComponent>`'
  id: totrans-165
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<YourComponent></YourComponent>`'
- en: '`<YourComponent/>` (self-closing)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<YourComponent/>`（自闭合）'
- en: 'Under this rule, the first option is rejected, as in the following example:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此规则，第一个选项将被拒绝，如下例所示：
- en: '[PRE48]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'However, it also rejects the self-closing void elements:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它也拒绝了自闭合的空元素：
- en: '[PRE49]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In other words, void elements are not allowed to have self-closing signs in
    the Vue rules. So the value for the `html.void` option is set to `'never'` by
    default. So if you want to allow self-closing signs on these void elements, as
    in this book, then set the value to `'always'`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，在Vue规则中，不允许空元素具有自闭合标记。因此，默认情况下，`html.void`选项的值设置为`'never'`。因此，如果您想要允许这些空元素上的自闭合标记，就像本书中一样，那么将值设置为`'always'`。
- en: For more information about this rule, visit [https://eslint.vuejs.org/rules/html-self-closing.htmlvue-html-self-closing](https://eslint.vuejs.org/rules/html-self-closing.html#vue-html-self-closing).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此规则的更多信息，请访问[https://eslint.vuejs.org/rules/html-self-closing.htmlvue-html-self-closing](https://eslint.vuejs.org/rules/html-self-closing.html#vue-html-self-closing)。
- en: 'Configure the `vue/max-attributes-per-line` rule to turn off this rule as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`vue/max-attributes-per-line`规则配置为关闭此规则如下：
- en: '[PRE50]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The `vue/max-attributes-per-line` rule aims to enforce one attribute per line.
    By default, an attribute is considered to be in a new line when there is a line
    break between two attributes. The following is an example of how this looks under
    this rule:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue/max-attributes-per-line`规则旨在强制每行一个属性。默认情况下，当两个属性之间有换行时，认为属性在新行中。以下是在此规则下的示例：'
- en: '[PRE51]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: However, this rule conflicts with Prettier. We should let Prettier handle cases
    like this, which is why we will turn this rule off.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，此规则与Prettier冲突。我们应该让Prettier处理这样的情况，这就是为什么我们会关闭这个规则。
- en: For more information about this rule, visit [https://eslint.vuejs.org/rules/max-attributes-per-line.htmlvue-max-attributes-per-line](https://eslint.vuejs.org/rules/max-attributes-per-line.html#vue-max-attributes-per-line).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此规则的更多信息，请访问[https://eslint.vuejs.org/rules/max-attributes-per-line.htmlvue-max-attributes-per-line](https://eslint.vuejs.org/rules/max-attributes-per-line.html#vue-max-attributes-per-line)。
- en: 'Configure the `eslint/space-before-function-paren` rule:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`eslint/space-before-function-paren`规则：
- en: '[PRE52]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `eslint/space-before-function-paren` rule aims to enforce a space before
    a function declaration''s parentheses. It is ESLint''s default behavior to add
    the space and it is also a defined rule in StandardJS. See the following examples:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`eslint/space-before-function-paren`规则旨在强制在函数声明的括号前添加一个空格。ESLint默认行为是添加空格，这也是StandardJS中定义的规则。请参阅以下示例：'
- en: '[PRE53]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'However, under the preceding rule, you will get errors like the following when
    you use Prettier:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在前述规则下，当您使用Prettier时，您将会收到以下错误：
- en: '[PRE54]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We will ignore the errors from Prettier because we want to follow the rule in
    Vue. But currently, there is no option from Prettier to disable that yet from
    [https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html).
    If you happen to remove that space because of Prettier, you can add it back by
    setting the value to `'always'` under this Vue rule.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将忽略Prettier的错误，因为我们想要遵循Vue中的规则。但是目前，Prettier还没有选项来禁用这个规则，可以从[https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html)查看。如果因为Prettier而删除了空格，您可以通过在Vue规则下将值设置为`'always'`来添加回来。
- en: For more information about this rule, visit [https://eslint.org/docs/rules/space-before-function-paren](https://eslint.org/docs/rules/space-before-function-paren)
    and [https://standardjs.com/rules.html](https://standardjs.com/rules.html).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此规则的更多信息，请访问[https://eslint.org/docs/rules/space-before-function-paren](https://eslint.org/docs/rules/space-before-function-paren)和[https://standardjs.com/rules.html](https://standardjs.com/rules.html)。
- en: 'Because ESLint targets only `.js` files by default, include the `.vue` extension
    with the `--ext` option (or a glob pattern) in the ESLint command to run ESLint
    with the preceding configurations on the terminal:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为ESLint默认只针对`.js`文件，所以在ESLint命令中使用`--ext`选项（或者glob模式）包含`.vue`扩展名，以在终端上运行ESLint并使用前述配置。
- en: '[PRE55]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You also can run it with the custom commands in the `scripts` option with `.gitignore`
    in the `package.json` file as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在`package.json`文件中的`.gitignore`选项中使用自定义命令来运行它，如下所示：
- en: '[PRE56]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'ESLint will ignore files defined in the preceding `.gitignore` snippet while
    linting all of the JavaScript and Vue files. It is a good idea to lint files on
    hot reloading via webpack. Just add the following snippet to the Nuxt config file
    to run ESLint whenever you save your code:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint将忽略在前面的`.gitignore`片段中定义的文件，同时对所有JavaScript和Vue文件进行lint。通过webpack进行热重载时对文件进行lint是一个好主意。只需将以下片段添加到Nuxt配置文件中，以便在保存代码时运行ESLint：
- en: '[PRE57]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: You can find an example that uses this plugin with ESLint in `/chapter-14/eslint-plugin-vue/integrate/`
    in our GitHub repository.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-14/eslint-plugin-vue/integrate/`中找到一个使用此插件与ESLint的示例。
- en: As you can see in this and the previous sections, mixing ESLint and Prettier
    in a single config file can be problematic. The hassle you get may not be worth
    the effort in making them work together "as a team." Why not try to run them separately
    without coupling them? Let's find out how you can do this for Nuxt apps in the
    next section.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在本节和前几节中所看到的，将ESLint和Prettier混合在单个配置文件中可能会有问题。您可能得到的麻烦可能不值得让它们“作为一个团队”一起工作。为什么不尝试在不耦合它们的情况下分别运行它们呢？让我们在下一节中找出如何为Nuxt应用程序做到这一点。
- en: Running ESLint and Prettier separately in Nuxt apps
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Nuxt应用程序中分别运行ESLint和Prettier
- en: 'Another possible solution to the conflict between ESLint and Prettier, especially
    on `space-before-function-paren`, is not to integrate them at all, but run them
    to format and lint our code separately. So let''s get this working in the following
    steps:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个解决ESLint和Prettier之间冲突的可能解决方案，特别是在`space-before-function-paren`上，是根本不集成它们，而是分别运行它们来格式化和检查我们的代码。所以让我们在以下步骤中让它们正常工作：
- en: 'Create the scripts separately for Prettier and ESLint in the `package.json`
    file as follows:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`文件中分别为Prettier和ESLint创建脚本，如下所示：
- en: '[PRE58]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'So now we can completely forget about `eslint-plugin-prettier` and the `eslint-config-prettier`
    config in our workflow. We still keep `eslint-plugin-vue` and the rules that we
    have already configured in this chapter, but remove Prettier completely from the
    `.eslintrc.js` file:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以完全忘记`eslint-plugin-prettier`和我们工作流程中的`eslint-config-prettier`配置。我们仍然保留`eslint-plugin-vue`和在本章中已经配置的规则，但是完全从`.eslintrc.js`文件中删除Prettier：
- en: '[PRE59]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Run Prettier first, then ESLint, when we want to analyze our code:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们想要分析我们的代码时，先运行Prettier，然后运行ESLint：
- en: '[PRE60]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Again, run Prettier first, then ESLint, when we want to fix the format and
    to lint our code:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，当我们想要修复格式并对我们的代码进行lint时，先运行Prettier，然后运行ESLint：
- en: '[PRE61]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: You can see that this solution keeps our workflow clearer and cleaner in this
    way. No more conflict – it's a breeze. Sweet.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，这个解决方案以这种方式使我们的工作流程更清晰和更干净。不再有冲突-一切都很顺利。很好。
- en: You can find an example that runs ESLint and Prettier separately in `/chapter-14/eslint-plugin-vue/separate/`
    in our GitHub repository.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-14/eslint-plugin-vue/separate/`中找到一个分别运行ESLint和Prettier的示例。
- en: Well done. You have made it through the first major part of this chapter. We
    hope you will start, or have already started, writing beautiful and readable code
    for your Vue and Nuxt apps, and making use of these amazing formatters and linters.
    As your Nuxt learning in the book nears its end, we will walk you through how
    you can deploy the Nuxt app in the next section. So keep reading.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好。您已经完成了本章的第一个重要部分。我们希望您将开始或已经开始为您的Vue和Nuxt应用程序编写美观且易读的代码，并利用这些令人惊叹的格式化程序和代码检查工具。随着本书中关于Nuxt的学习接近尾声，我们将在下一节中向您介绍如何部署Nuxt应用程序。所以请继续阅读。
- en: Deploying Nuxt apps
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Nuxt应用程序
- en: 'Besides the code linting and formatting, app deployment, too, is a part of
    the web development workflow. We need to deploy our apps to a server or a host
    somewhere remotely so that the public can access the app publicly. Nuxt comes
    with the built-in commands that we can use to deploy our app. They are as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 除了代码检查和格式化之外，应用程序部署也是Web开发工作流的一部分。我们需要将应用程序部署到远程服务器或主机上，以便公众可以公开访问应用程序。Nuxt带有内置命令，我们可以使用这些命令来部署我们的应用程序。它们如下：
- en: '`nuxt`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nuxt`'
- en: '`nuxt build`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nuxt build`'
- en: '`nuxt start`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nuxt start`'
- en: '`nuxt generate`'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nuxt generate`'
- en: 'The `nuxt` command is one that you are now familiar with using on your terminal:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`nuxt`命令是您现在在终端上熟悉使用的命令：'
- en: '[PRE62]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'If you open the `package.json` file that is generated by Nuxt when installing
    the project with the `create-nuxt-app` scaffolding tool, you can see these commands
    are pre-configured in the `"scripts"` snippet, as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开使用`create-nuxt-app`脚手架工具安装项目时Nuxt生成的`package.json`文件，您会看到这些命令预先配置在`"scripts"`片段中，如下所示：
- en: '[PRE63]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'You can launch the command on your terminal with the following Node.js command
    line:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下Node.js命令行在终端上启动命令：
- en: '[PRE64]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The `nuxt` command is used for development with hot-reloading on the development
    server on `localhost:3000`, while the others are for production deployment. Let's
    take a look at how you can use them to deploy your Nuxt app in the next section.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`nuxt`命令用于在开发服务器上进行开发，并具有热重新加载功能，而其他命令用于生产部署。让我们看看如何在下一节中使用它们来部署您的Nuxt应用。'
- en: You can also use common arguments such as `--help` with any of these commands.
    If you want to find out more, please visit [https://nuxtjs.org/guide/commandslist-of-commands](https://nuxtjs.org/guide/commands#list-of-commands).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在任何这些命令中使用常见参数，例如`--help`。如果您想了解更多信息，请访问[https://nuxtjs.org/guide/commandslist-of-commands](https://nuxtjs.org/guide/commands#list-of-commands)。
- en: Deploying a Nuxt universal server-side rendered app
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署Nuxt通用服务器端渲染应用程序
- en: 'We hope that from working through all the previous chapters, you know that
    you have been developing Nuxt universal **server-side rendered** (**SSR**) apps.
    An SSR app is an app that renders your app content on the server side. This kind
    of app requires a specific server to run your apps, such as a Node.js and Apache
    server, while a universal SSR app like that you''ve been creating with Nuxt runs
    on both the server and client sides. This kind of apps requires a specific server
    too. A Nuxt universal SSR app can be deployed with just two commands on the terminal.
    Let''s take a look at how you can do it in the following steps:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 希望通过学习之前的所有章节，您知道自己一直在开发Nuxt通用**服务器端渲染**（**SSR**）应用程序。SSR应用程序是在服务器端呈现应用程序内容的应用程序。这种应用程序需要特定的服务器来运行您的应用程序，例如Node.js和Apache服务器，而像您使用Nuxt创建的通用SSR应用程序在服务器端和客户端上都可以运行。这种应用程序也需要特定的服务器。使用Nuxt通用SSR应用程序可以在终端上使用两个命令进行部署。让我们看看您可以在以下步骤中如何执行此操作：
- en: 'Launch the `nuxt build` command via npm to build the app with webpack and minify
    the JavaScript and CSS:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm启动`nuxt build`命令来使用webpack构建应用程序并压缩JavaScript和CSS：
- en: '[PRE65]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You should get the following build result:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得以下构建结果：
- en: '[PRE66]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Launch the `nuxt start` command via npm to start the server in production mode:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm启动`nuxt start`命令以生产模式启动服务器：
- en: '[PRE67]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'You should get the following start status:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得以下启动状态：
- en: '[PRE68]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: That's all it takes to deploy a Nuxt universal SSR app – just two command lines.
    It's a piece of cake, isn't it? However, if you don't have a Node.js server to
    host your app, or for any reason you just want to deploy your app as a static
    site, you can generate it from a Nuxt universal SSR app. Let's find out how you
    can achieve that in the next section.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 部署Nuxt通用SSR应用程序只需要两条命令行。这很容易，不是吗？但是，如果您没有Node.js服务器来托管您的应用程序，或者出于任何原因，您只想将应用程序部署为静态站点，您可以从Nuxt通用SSR应用程序生成它。让我们在下一节中了解如何实现这一点。
- en: Deploying a Nuxt static-generated (pre-rendered) app
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署Nuxt静态生成（预渲染）应用程序
- en: 'To generate a Nuxt static generated app from the Nuxt universal SSR app, we
    will use the sample website we created in the previous chapters for this exercise.
    You can find this sample in `/chapter-14/deployment/sample-website/` in our GitHub
    repository. So let''s get cracking with the following steps:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Nuxt通用SSR应用程序生成Nuxt静态生成的应用程序，我们将使用我们在前几章中为此练习创建的示例网站。您可以在我们的GitHub存储库的`/chapter-14/deployment/sample-website/`中找到此示例。因此，让我们按照以下步骤开始：
- en: 'Make sure you have the following `"generate"` run script in the `package.json`
    file as follows:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的`package.json`文件中有以下`"generate"`运行脚本：
- en: '[PRE69]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Change the `target` project in the Nuxt config file to `static`:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Nuxt配置文件中的`target`项目更改为`static`：
- en: '[PRE70]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Generate the 404 page by configuring the `generate` option in the Nuxt config
    file:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在Nuxt配置文件中配置`generate`选项来生成404页面：
- en: '[PRE71]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Nuxt does not generate your custom 404 page, nor its default one. If you want
    to include this page in your static app, you can set `fallback: true` in the `generate`
    option in the config file.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 'Nuxt不会生成您的自定义404页面，也不会生成默认页面。如果您想在静态应用程序中包含此页面，可以在配置文件中的`generate`选项中设置`fallback:
    true`。'
- en: 'Launch the `nuxt generate` command via npm to build the app and generate an
    HTML file for each route:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm启动`nuxt generate`命令来构建应用程序并为每个路由生成HTML文件：
- en: '[PRE72]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Nuxt has a crawler that scans the links and generates dynamic routes and their
    async contents (the data rendered with the `asyncData` and `fetch` methods) automatically
    for you. So you should get every route of your app as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt具有一个爬虫，它会扫描链接并为您自动生成动态路由及其异步内容（使用`asyncData`和`fetch`方法呈现的数据）。因此，您应该按以下方式获取应用程序的每个路由：
- en: '[PRE73]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Note that you will still need to use `generate.routes` for generating routes
    that the crawler cannot detect.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您仍然需要使用`generate.routes`来生成爬虫无法检测到的路由。
- en: 'If you look inside your project root directory, you should find a `/dist/`
    folder generated by Nuxt with everything ready inside that you need to deploy
    the app to the static hosting server. But before that, you can test your production
    static app from the `/dist/` directory with the `nuxt serve` command on your terminal:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您查看项目根目录，您应该会发现Nuxt生成的`/dist/`文件夹，其中包含部署应用程序到静态托管服务器所需的一切。但在此之前，您可以使用终端上的`nuxt
    serve`命令从`/dist/`目录测试生产静态应用程序：
- en: '[PRE74]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'You should get the following output on your terminal:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在终端上获得以下输出：
- en: '[PRE75]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Now you can point your browser to `localhost:3000` and see that the app is running
    just like SSR, but in fact, it is a static-generated app.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以将浏览器指向`localhost:3000`，并查看应用程序是否像SSR一样运行，但实际上，它是一个静态生成的应用程序。
- en: 'We will come back to this configuration in the next chapter for deploying Nuxt
    **single-page application** (**SPA**) apps. You can see that it involves just
    a bit of work to go for this type of deployment and it is totally worth it because
    there are benefits in deploying your app "statically," such as you can get your
    static files hosted on static hosting servers, which are relatively cheaper than
    a Node.js server. We will show you how to serve your static site on this kind
    of server just like **GitHub Pages** in the next chapter. Even though there are
    benefits in deploying the Nuxt universal SSR app "statically," there are the following caveats that
    you must take into account:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章回到这个配置，用于部署Nuxt **单页面应用程序**（**SPA**）应用。您可以看到，选择这种部署方式只需要做一点工作，但完全值得，因为以“静态”方式部署您的应用程序有好处，比如您可以将静态文件托管在静态托管服务器上，这相对便宜于Node.js服务器。我们将在下一章向您展示如何在这种服务器上为您的静态站点提供服务，就像**GitHub
    Pages**一样。尽管以“静态”方式部署Nuxt通用SSR应用程序有好处，但您必须考虑以下注意事项：
- en: The Nuxt context given to the `asyncData` and `fetch` methods will lose the
    HTTP `req` and `res` objects from Node.js.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给`asyncData`和`fetch`方法的Nuxt上下文将失去来自Node.js的HTTP `req`和`res`对象。
- en: The `nuxtServerInit` action will not be available in the store.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nuxtServerInit`操作将不可用于存储。'
- en: So if you have a Nuxt app that relies heavily on these items in the preceding list,
    then it is probably not a good idea to generate your Nuxt universal SSR app into
    static files because they are server-side features. However, we can imitate the
    `nuxtServerInit` action on the client side with the client-side cookies, which
    we will also show you in the next chapter. But for now, let's move on to the next
    section to find out what kind of hosting servers you can choose from to host your
    Nuxt apps.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您的Nuxt应用程序在上述列表中严重依赖这些项目，那么将Nuxt通用SSR应用程序生成为静态文件可能不是一个好主意，因为它们是服务器端功能。但是，我们可以在客户端使用客户端cookie模仿`nuxtServerInit`操作，我们也将在下一章向您展示。但现在，让我们继续前进到下一节，找出您可以选择的托管服务器类型来托管您的Nuxt应用程序。
- en: If you want to find out more about the `generate` property/option and other
    options, such as the `fallback` and `routes` options, that you can configure with
    this property, please visit [https://nuxtjs.org/api/configuration-generate](https://nuxtjs.org/api/configuration-generate).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解有关`generate`属性/选项和其他选项的更多信息，例如您可以使用此属性进行配置的`fallback`和`routes`选项，请访问[https://nuxtjs.org/api/configuration-generate](https://nuxtjs.org/api/configuration-generate)。
- en: Hosting the Nuxt universal SSR app on virtual private servers
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在虚拟专用服务器上托管Nuxt通用SSR应用程序。
- en: When it comes to hosting Node.js apps, a **virtual private server** (**VPS**)
    and dedicated servers are better options because you will have the complete freedom
    to set up the Node.js environment for your apps. And whenever Node.js releases
    new versions, you should update your environment as well. Only with a VPS server
    can you upgrade and tweak your environment anytime you need to.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在托管Node.js应用程序时，**虚拟专用服务器**（**VPS**）和专用服务器是更好的选择，因为您将完全自由地为您的应用程序设置Node.js环境。每当Node.js发布新版本时，您也应该更新您的环境。只有使用VPS服务器，您才能随时升级和调整您的环境。
- en: 'A VPS provider such as Linode or Vultr offers affordable VPS hosting pricing
    if you are looking for a Linux server and will install the infrastructure that
    you need from scratch. What these VPS providers give you is an empty virtual machine
    with your preferred Linux distribution, for example, Ubuntu. The process of building
    the infrastructure of your needs is the same as how you install Node.js, MongoDB,
    MySQL, and so on, when you just have a Linux distribution freshly installed on
    your local machine. For more about these VPS providers, please visit the following
    links:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在寻找Linux服务器并且希望从头开始安装您需要的基础设施，VPS提供商如Linode或Vultr提供了实惠的VPS主机定价。这些VPS提供商提供给您的是一个空的虚拟机，您可以选择您喜欢的Linux发行版，例如Ubuntu。构建您所需基础设施的过程与在本地机器上刚刚安装Linux发行版时安装Node.js、MongoDB、MySQL等的过程是一样的。有关这些VPS提供商的更多信息，请访问以下链接：
- en: '[https://welcome.linode.com/](https://welcome.linode.com/) for Linode'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://welcome.linode.com/](https://welcome.linode.com/) for Linode'
- en: '[https://www.vultr.com/](https://www.vultr.com/) for Vultr'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.vultr.com/](https://www.vultr.com/) for Vultr'
- en: 'After you have the Node.js environment and the infrastructure set up to meet
    your requirements, you can upload your Nuxt app to this kind of host, then build
    and start the app very easily on your terminal through the **Secure Shell** (**SSH**) function
    provided by these hosting providers:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在满足您的要求的Node.js环境和基础设施设置好之后，您可以将Nuxt应用程序上传到这种类型的主机，然后通过这些主机提供的**安全外壳**（**SSH**）功能在终端上轻松构建和启动应用程序：
- en: '[PRE76]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: What about a shared hosting server? Let's take a look at what you have to choose
    from in the next section.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 共享主机服务器怎么样？让我们看看下一节中你可以选择的内容。
- en: Hosting the Nuxt universal SSR app on shared hosting servers
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在共享主机服务器上托管Nuxt通用SSR应用程序
- en: 'Bear in mind that not all hosts are Node.js-friendly and shared hosting servers
    for Node.js are relatively rare compared to the shared hosting servers for PHP.
    But all shared hosting servers are the same – what you can do is usually severely
    restricted and you must follow the strict rules set by the provider. You can check
    out the following shared hosting servers providers:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，并非所有主机都支持Node.js，并且与支持PHP的共享主机服务器相比，支持Node.js的共享主机服务器相对较少。但所有共享主机服务器都是一样的-通常你所能做的事情受到严格限制，你必须遵循提供者制定的严格规则。您可以查看以下共享主机服务器提供商：
- en: '**Reclaim Hosting**, at [https://reclaimhosting.com/shared-hosting/](https://reclaimhosting.com/shared-hosting/)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Reclaim Hosting**，网址为[https://reclaimhosting.com/shared-hosting/](https://reclaimhosting.com/shared-hosting/)'
- en: '**A2 Hosting**, at [https://www.a2hosting.com/nodejs-hosting](https://www.a2hosting.com/nodejs-hosting)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A2 Hosting**，网址为[https://www.a2hosting.com/nodejs-hosting](https://www.a2hosting.com/nodejs-hosting)'
- en: In a shared hosting server, for example, at Reclaim Hosting, most likely you
    cannot run the Nuxt commands to start your app. Instead, you will need to provide
    an application start file to the server and this file must be called `app.js`
    and placed in your project root directory.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Reclaim Hosting的共享主机服务器上，您很可能无法运行Nuxt命令来启动您的应用程序。相反，您需要向服务器提供一个应用程序启动文件，这个文件必须被称为`app.js`并放在您的项目根目录中。
- en: 'If you would like to go for Reclaim Hosting, you can use their test environment
    at [https://stateu.org/](https://stateu.org/) to see how it works for you. But
    keep in mind that advanced setups are not possible. The good news is that Nuxt
    provides a Node.js module, `nuxt-start`, to start Nuxt apps in production mode
    in a shared hosting server like this. So let''s find out how in the following
    steps:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想选择Reclaim Hosting，您可以使用他们的测试环境[https://stateu.org/](https://stateu.org/)来看看它对您的工作方式。但请记住，高级设置是不可能的。好消息是，Nuxt提供了一个Node.js模块`nuxt-start`，可以在这样的共享主机服务器上以生产模式启动Nuxt应用程序。所以让我们在以下步骤中找出如何做：
- en: 'Install `nuxt-start` via npm locally:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm在本地安装`nuxt-start`：
- en: '[PRE77]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Create an `app.js` file in your project root directory with the following code
    to start the Nuxt app:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目根目录中创建一个`app.js`文件，并使用以下代码启动Nuxt应用程序：
- en: '[PRE78]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Alternatively, you can use Express or Koa to start your Nuxt app. The following
    example assumes you are using Express:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用Express或Koa来启动你的Nuxt应用。以下示例假设你正在使用Express：
- en: '[PRE79]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: In this code, we import the `express` and `nuxt` modules and the `nuxt.config.js`
    file, and then use the Nuxt app as the middleware. It is the same if you are using
    Koa – you only need to use Nuxt as the middleware.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们导入了`express`和`nuxt`模块以及`nuxt.config.js`文件，然后将Nuxt应用程序用作中间件。如果你使用Koa，情况也是一样的
    - 你只需要将Nuxt用作中间件。
- en: Upload the Nuxt app to the server with this `app.js` file in it and follow the
    instructions from the host to install the app dependencies via npm and then run
    `app.js` to start your app.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`app.js`文件将Nuxt应用程序上传到服务器，并按照主机的说明通过npm安装应用程序依赖项，然后运行`app.js`启动你的应用程序。
- en: That's all you need to do. There are limitations in these shared hosting servers.
    You have less control with the Node.js environment in these servers. But you can
    get your universal SSR Nuxt apps up and running if you follow the strict rules
    that are set by server providers.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你需要做的全部。这些共享主机服务器存在一些限制。在这些服务器中，你对Node.js环境的控制较少。但是，如果你遵循服务器提供商设定的严格规则，你可以让你的通用SSR
    Nuxt应用程序快速运行起来。
- en: You can find the preceding sample code and others in `/chapter-14/deployment/shared-hosting/reclaimhosting.com/`
    in our GitHub repository for hosting the Nuxt universal SSR app at Reclaim Hosting.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub存储库中的`/chapter-14/deployment/shared-hosting/reclaimhosting.com/`中找到上述示例代码和其他示例代码，用于在Reclaim
    Hosting上托管Nuxt通用SSR应用程序。
- en: For more information about `nuxt-start`, please visit [https://www.npmjs.com/package/nuxt-start](https://www.npmjs.com/package/nuxt-start).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`nuxt-start`的更多信息，请访问[https://www.npmjs.com/package/nuxt-start](https://www.npmjs.com/package/nuxt-start)。
- en: You can see that it is not perfect and has its limitations, but it is reasonable
    if you are looking for shared hosting. If this is not ideal for you, then the
    last option is to go for the static site hosting servers, as we'll see in the
    next section.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它并不完美，并且有其局限性，但如果你正在寻找共享主机，这是合理的。如果这对你来说不理想，那么最后的选择是选择静态站点主机，我们将在下一节中看到。
- en: Hosting the Nuxt static generated app on static site hosting servers
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在静态站点主机上托管Nuxt静态生成的应用程序
- en: 'With this option, you will have to lose the server side of Nuxt. But the good
    news is that there are many popular hosts for hosting a static-generated Nuxt
    app and you can serve it on almost any host online, quickly. Let''s find out how
    in the following steps:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，你将失去Nuxt的服务器端。但好消息是，有许多流行的主机可以托管静态生成的Nuxt应用程序，并且你可以快速在几乎任何在线主机上提供服务。让我们在以下步骤中看看如何做到这一点：
- en: 'Change `server` to `static` as the target in the Nuxt config file, as follows:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件中将`server`更改为`static`作为目标。
- en: '[PRE80]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Launch the `nuxt generate` commands locally via npm to generate the static
    files for your Nuxt app:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm在本地启动`nuxt generate`命令来生成Nuxt应用程序的静态文件：
- en: '[PRE81]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Upload all the content in the `/dist/` folder generated by Nuxt to the host.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Nuxt生成的`/dist/`文件夹中的所有内容上传到主机。
- en: 'The following list details the hosts you can choose from. The deployment processes
    for all of them are well documented on the Nuxt site. You should check out the
    Nuxt FAQ at [https://nuxtjs.org/faq](https://nuxtjs.org/faq) to check deployment
    examples and see how to deploy the static generated Nuxt app to any of these specific
    hosts:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表详细介绍了你可以选择的主机。所有这些主机的部署过程都在Nuxt网站上有详细说明。你应该查看Nuxt FAQ [https://nuxtjs.org/faq](https://nuxtjs.org/faq)
    来查看部署示例，并了解如何将静态生成的Nuxt应用程序部署到这些特定主机中的任何一个：
- en: AWS w/ S3 (Amazon Web Services) at [https://nuxtjs.org/faq/deployment-aws-s3-cloudfront](https://nuxtjs.org/faq/deployment-aws-s3-cloudfront)
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS w/ S3 (Amazon Web Services) at [https://nuxtjs.org/faq/deployment-aws-s3-cloudfront](https://nuxtjs.org/faq/deployment-aws-s3-cloudfront)
- en: GitHub Pages at [https://nuxtjs.org/faq/github-pages](https://nuxtjs.org/faq/github-pages)
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Pages at [https://nuxtjs.org/faq/github-pages](https://nuxtjs.org/faq/github-pages)
- en: Netlify at [https://nuxtjs.org/faq/netlify-deployment](https://nuxtjs.org/faq/netlify-deployment)
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netlify at [https://nuxtjs.org/faq/netlify-deployment](https://nuxtjs.org/faq/netlify-deployment)
- en: Surge at [https://nuxtjs.org/faq/surge-deployment](https://nuxtjs.org/faq/surge-deployment)
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Surge at [https://nuxtjs.org/faq/surge-deployment](https://nuxtjs.org/faq/surge-deployment)
- en: We will guide you through the deployment of Nuxt SPA appson GitHub Pages in
    the next chapter. But for now, this is the end of this chapter on formatting,
    linting, and deploying the Nuxt universal SSR app. Let's summarize what you have
    learned in this chapter.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将指导您在GitHub Pages上部署Nuxt SPA应用程序。但现在，这是本章关于格式化、检查和部署Nuxt通用SSR应用程序的结束。让我们总结一下您在本章中学到的内容。
- en: Summary
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Well done. You have made it this far. It is been quite a journey. In this chapter,
    we covered JavaScript linters and formatters, notably ESLint, Prettier, and StandardJS
    for Nuxt apps and also for JavaScript apps in general. You have learned how to
    install and configure them for your needs and preferences. We also covered the
    Nuxt commands to deploy Nuxt apps and the options available for hosting the Nuxt
    app, whether it is a universal SSR app or a static generated site.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好。你已经走了这么远。这是一段相当漫长的旅程。在本章中，我们涵盖了JavaScript的检查器和格式化程序，特别是ESLint，Prettier和StandardJS用于Nuxt应用程序以及一般的JavaScript应用程序。您已经学会了如何安装和配置它们以满足您的需求和偏好。我们还介绍了部署Nuxt应用程序的Nuxt命令以及可用于托管Nuxt应用程序的选项，无论是通用SSR应用程序还是静态生成的站点。
- en: In the coming chapter, we will learn how to create an SPA with Nuxt and deploy
    it to GitHub Pages. You will see the slight difference between traditional SPAs
    and the SPA in Nuxt (let's called it **Nuxt SPA**). We will guide you through
    the process of setting up the SPA development environment in Nuxt, refactoring
    the universal SSR Nuxt authentication app that you have created in the previous
    chapters, and turning it into a Nuxt SPA and a static-generated Nuxt SPA. Lastly,
    you will learn to deploy the static-generated SPA to GitHub Pages. So keep reading.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何使用Nuxt创建SPA，并将其部署到GitHub Pages。您将看到传统SPA和Nuxt中SPA（让我们称之为**Nuxt
    SPA**）之间的细微差别。我们将指导您完成在Nuxt中设置SPA开发环境的过程，重构您在前几章中创建的通用SSR Nuxt身份验证应用程序，并将其转换为Nuxt
    SPA和静态生成的Nuxt SPA。最后，您将学会将静态生成的SPA部署到GitHub Pages。所以请继续阅读。
