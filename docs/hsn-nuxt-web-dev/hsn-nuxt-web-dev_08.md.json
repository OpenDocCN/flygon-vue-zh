["```js\n// src/entry.js\nimport Vue from 'vue'\nimport Meta from 'vue-meta'\n\nVue.use(Meta)\nnew VueRouter({ ... })\n```", "```js\nVue.use(<plugin>, <options>)\n```", "```js\nVue.use(Meta, {\n  keyName: metaData, // default => metaInfo\n  refreshOnceOnNavigation: true // default => false\n})\n```", "```js\n// plugin.js\nexport default {\n  install (Vue, options) {\n    // ...\n  }\n}\n```", "```js\n// src/plugins/basic.js\nexport default {\n  install (Vue, options) {\n    if (options === undefined) {\n      options = {}\n    }\n    let { language } = options\n    let languages = {\n      'EN': 'Hello!',\n      'ES': 'Hola!'\n    }\n    if (language === undefined) {\n      language = 'EN'\n    }\n    Vue.prototype.$greet = (name) => {\n      return languages[language] + ' ' + name\n    }\n    Vue.prototype.$message = 'Hell\u00f3 Vil\u00e1g!'\n  }\n}\n```", "```js\n// src/entry.js\nimport PluginSample from './plugins/basic'\nVue.use(PluginBasic, {\n  language: 'ES'\n})\n```", "```js\n// src/components/home.vue\n<p>{{ $greet('John') }}</p>\n<p>{{ $message }}</p>\n<p>{{ messages }}</p>\n\nexport default {\n  data () {\n    let helloWorld = []\n    helloWorld.push(this.$message)\n\n    this.$message = 'Ciao mondo!'\n    helloWorld.push(this.$message)\n\n    return { messages: helloWorld }\n  }\n}\n```", "```js\nHola! John\nCiao mondo!\n[ \"Hell\u00f3 Vil\u00e1g!\", \"Ciao mondo!\" ]\n```", "```js\n// src/plugins/component.js\nexport default {\n  install (Vue, options) {\n    Vue.component('custom-component', {\n     // ...\n    })\n  }\n}\n\n// src/plugins/directive.js\nexport default {\n  install (Vue, options) {\n    Vue.directive('custom-directive', {\n      bind (el, binding, vnode, oldVnode) {\n        // ...\n      }\n    })\n  }\n}\n```", "```js\n// src/plugins/plugin-mixin.js\nexport default {\n  install (Vue, options) {\n    Vue.mixin({\n      // ...\n    })\n  }\n}\n```", "```js\n// plugins/basic-import.js\nimport Vue from 'vue'\nimport PluginSample from './basic'\n\nVue.use(PluginSample)\n```", "```js\nexport default {\n  plugins: [\n    '~/plugins/basic-import',\n  ]\n}\n```", "```js\n// pages/index.vue\n<p>{{ $greet('Jane') }}</p>\n<p>{{ $message }}</p>\n<p>{{ messages }}</p>\n\nexport default {\n  data () {\n    let helloWorld = []\n    helloWorld.push(this.$message)\n\n    this.$message = 'Ol\u00e1 Mundo!'\n    helloWorld.push(this.$message)\n\n    return { messages: helloWorld }\n  }\n}\n```", "```js\nHello! Jane\nOl\u00e1 Mundo!\n[ \"Hell\u00f3 Vil\u00e1g!\", \"Ol\u00e1 Mundo!\" ]\n```", "```js\n$ npm i vue-notification\n```", "```js\n// plugins/vue-notifications.js\nimport Vue from 'vue'\nimport VueNotifications from 'vue-notifications'\n\nVue.use(VueNotifications)\n```", "```js\n// nuxt.config.js:\nexport default {\n  plugins: ['~/plugins/vue-notifications']\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  plugins: [\n    { src: '~/plugins/vue-notifications', mode: 'client' }\n  ]\n}\n```", "```js\n// plugins/<function-name>.js\nimport Vue from 'vue'\nVue.prototype.$<function-name> = () => {\n  //...\n}\n```", "```js\n// plugins/<function-name>.js\nexport default (context, inject) => {\n  context.app.$<function-name> = () => {\n    //...\n  }\n}\n```", "```js\n// plugins/<function-name>.js\nexport default (context, inject) => {\n  inject('<function-name>', () => {\n    //...\n  })\n}\n```", "```js\n// plugins/vue-injections/sum.js\nimport Vue from 'vue'\nVue.prototype.$sum = (x, y) => x + y\n```", "```js\n// nuxt.config.js\nexport default {\n  plugins: ['~/plugins/vue-injections/sum']\n}\n```", "```js\n// pages/vue-injections.vue\n<p>{{ this.$sum(1, 2) }}</p>\n<p>{{ sum }}</p>\n\nexport default {\n  data () {\n    return {\n      sum: this.$sum(2, 3)\n    }\n  }\n}\n```", "```js\n3\n5\n```", "```js\n// plugins/ctx-injections/square.js\nexport default ({ app }, inject) => {\n  app.$square = (x) => x * x\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  plugins: ['~/plugins/ctx-injections/square']\n}\n```", "```js\n// pages/ctx-injections.vue\n<p>{{ square }}</p>\n\nexport default {\n  asyncData (context) {\n    return {\n      square: context.app.$square(5)\n    }\n  }\n}\n```", "```js\n25\n```", "```js\n// plugins/combined-injections/multiply.js\nexport default ({ app }, inject) => {\n  inject('multiply', (x, y) => x  y)\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  plugins: ['~/plugins/combined-injections/multiply']\n}\n```", "```js\n// pages/combined-injections.vue\n<p>{{ this.$multiply(4, 3) }}</p>\n<p>{{ multiply }}</p>\n\nexport default {\n  asyncData (context) {\n    return { multiply: context.app.$multiply(2, 3) }\n  }\n}\n```", "```js\n12\n6\n```", "```js\nmounted () {\n  console.log(this.$multiply(5, 3))\n}\n```", "```js\n// store/index.js\nexport const state = () => ({\n  xNumber: 1,\n  yNumber: 3\n})\n\nexport const mutations = {\n  changeNumbers (state, newValue) {\n    state.xNumber = this.$multiply(3, 8)\n    state.yNumber = newValue\n  }\n}\n\nexport const actions = {\n  setNumbers ({ commit }) {\n    const newValue = this.$multiply(9, 6)\n    commit('changeNumbers', newValue)\n  }\n}\n```", "```js\n// pages/combined-injections.vue\n<p>{{ $store.state }}</p>\n<button class=\"button\" v-on:click=\"updateStore\">Update Store</button>\n\nexport default {\n  methods: {\n    updateStore () {\n      this.$store.dispatch('setNumbers')\n    }\n  }\n}\n```", "```js\n{ \"xNumber\": 1, \"yNumber\": 3 }\n```", "```js\n{ \"xNumber\": 24, \"yNumber\": 54 }\n```", "```js\n// plugins/name-conventions/divide.client.js\nimport Vue from 'vue'\nVue.prototype.$divide = (x, y) => x / y\n\n// plugins/name-conventions/subtract.server.js\nexport default ({ app }, inject) => {\n  inject('subtract', (x, y) => x - y)\n}\n```", "```js\n// nuxt.config.js:\nexport default {\n  plugins: [\n    '~/plugins/name-conventions/divide.client.js',\n    '~/plugins/name-conventions/subtract.server.js'\n  ]\n}\n```", "```js\n// pages/name-conventions.vue\n<p>{{ divide }}</p>\n<p>{{ subtract }}</p>\n\nexport default {\n  data () {\n    let divide = ''\n    if (process.client) {\n      divide = this.$divide(8, 2)\n    }\n    return { divide }\n  },\n  asyncData (context) {\n    let subtract = ''\n    if (process.server) {\n      subtract = context.app.$subtract(10, 4)\n    }\n    return { subtract }\n  }\n}\n```", "```js\n4\n6\n```", "```js\n4\n```", "```js\nthis.$divide is not a function\n```", "```js\nthis.$subtract is not a function\n```", "```js\nmounted () {\n  console.log(this.$divide(8, 2))\n}\n```", "```js\nexport const actions = {\n  nuxtServerInit ({ commit }, context) {\n    console.log(context.app.$subtract(10, 4))\n  }\n}\n```", "```js\n$ npm install @nuxtjs/axios\n```", "```js\n// nuxt.config.js\nmodule.exports = {\n  modules: [\n    '@nuxtjs/axios'\n  ]\n}\n```", "```js\n// pages/index.vue\nasync asyncData ({ $axios }) {\n  const ip = await $axios.$get('http://icanhazip.com')\n  console.log(ip)\n}\n```", "```js\n// pages/index.vue\nasync mounted () {\n  const ip = await this.$axios.$get('http://icanhazip.com')\n  console.log(ip)\n}\n```", "```js\n// modules/basic.js\nexport default function (moduleOptions) {\n  // ....\n}\n```", "```js\nmodule.exports.meta = require('./package.json')\n```", "```js\n// nuxt.config.js\nexport default {\n  modules: [\n    ['~/modules/basic/module', { language: 'ES' }],\n  ]\n}\n```", "```js\n// modules/basic/module.js\nexport default function (moduleOptions) {\n  console.log(moduleOptions)\n}\n```", "```js\n{\n  language: 'ES'\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  modules: [\n    ['~/modules/basic/module'],\n  ],\n  basic: { // custom option\n    option1: false,\n    option2: true,\n  }\n}\n```", "```js\n// modules/basic/module.js\nexport default function (moduleOptions) {\n  console.log(this.options['basic'])\n}\n```", "```js\n{\n  option1: false,\n  option2: true\n}\n```", "```js\n// modules/basic/module.js\nexport default function (moduleOptions) {\n  const options = {\n    ...this.options['basic'],\n    ...moduleOptions\n  }\n  console.log(options)\n}\n```", "```js\n{\n  option1: false,\n  option2: true\n}\n```", "```js\n// modules/basic/module.js\nconst { resolve } = require('path')\n\nexport default function (moduleOptions) {\n  const options = {\n    ...this.options['basic'],\n    ...moduleOptions\n  }\n\n  // Add plugin.\n  this.addPlugin({\n    src: resolve(__dirname, 'plugin.js'),\n    fileName: 'basic.js',\n    options\n  })\n}\n```", "```js\n// modules/basic/plugin.js\nvar options = []\n\n<% if (options.option1 === true) { %>\n  options.push('option 1')\n<% } %>\n\n<% if (options.option2 === true) { %>\n  options.push('option 2')\n<% } %>\n\n<% if (options.language === 'ES') { %>\n  options.push('language ES')\n<% } %>\n\nconst basic = function () {\n  return options\n}\n\nexport default ({ app }, inject) => {\n  inject('basic', basic)\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  modules: [\n    ['~/modules/basic/module', { language: 'ES' }],\n  ],\n\n  basic: {\n    option1: false,\n    option2: true,\n  }\n}\n```", "```js\n// pages/index.vue\nmounted () {\n  const basic = this.$basic()\n  console.log(basic)\n}\n```", "```js\n[\"option 2\", \"language ES\"]\n```", "```js\n// modules/async-await/module.js\nimport axios from 'axios'\n\nexport default async function () {\n  let { data } = await axios.get(\n   'https://jsonplaceholder.typicode.com/posts')\n  let routes = data.map(post => '/posts/' + post.id)\n  console.log(routes)\n}\n\n// nuxt.config.js\nmodules: [\n  ['~/modules/async-await/module']\n]\n```", "```js\n[\n  '/posts/1',\n  '/posts/2',\n  '/posts/3',\n  ...\n]\n```", "```js\n// modules/promise-sample/module.js\nimport axios from 'axios'\n\nexport default function () {\n  return axios.get('https://jsonplaceholder.typicode.com/comments')\n    .then(res => res.data.map(comment => '/comments/' + comment.id))\n    .then(routes => {\n      console.log(routes)\n    })\n}\n\n// nuxt.config.js\nmodules: [\n  ['~/modules/promise-sample/module']\n]\n```", "```js\n[\n  '/comments/1',\n  '/comments/2',\n  '/comments/3',\n  ...\n]\n```", "```js\n$ npm i @nuxtjs/axios\n$ npm i @nuxtjs/proxy\n```", "```js\n// nuxt.config.js\nexport default {\n  modules: [\n    '@nuxtjs/axios'\n  ],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api/': { target: 'https://jsonplaceholder.typicode.com/', \n     pathRewrite: {'^/api/': ''} },\n  }\n}\n```", "```js\n// pages/index.vue\n<template>\n  <ul>\n    <li v-for=\"user in users\">\n      {{ user.name }}\n    </li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  async asyncData({ $axios }) {\n    const users = await $axios.$get('/api/users')\n    return { users }\n  }\n}\n</script>\n```", "```js\n$ npm i bootstrap-vue\n$ npm i bootstrap\n```", "```js\n// modules/bootstrap/plugin.js\nimport Vue from 'vue'\nimport BootstrapVue from 'bootstrap-vue/dist/bootstrap-vue.esm'\n\nVue.use(BootstrapVue)\n```", "```js\n// modules/bootstrap/module.js\nimport path from 'path'\n\nexport default function (moduleOptions) {\n  this.addPlugin(path.resolve(__dirname, 'plugin.js'))\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  modules: [\n    ['~/modules/bootstrap/module']\n  ]\n}\n```", "```js\n// pages/index.vue\n<b-button @click=\"toggle\">\n  {{ show ? 'Hide' : 'Show' }} Alert\n</b-button>\n<b-alert v-model=\"show\">\n  Hello {{ name }}!\n</b-alert>\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap-vue/dist/bootstrap-vue.css'\n\nexport default {\n  data () {\n    return {\n      name: 'BootstrapVue',\n      show: true\n    }\n  }\n}\n```", "```js\n// modules/users/plugin.js\nimport axios from 'axios'\n\nlet users = []\n<% if (options.url) { %>\n  users = axios.get('<%= options.url %>')\n<% } %>\n\n<% if (options.debug) { %>\n  // Dev only code\n  users.then((response) => {\n    console.log(response);\n  })\n  .catch((error) => {\n    console.log(error);\n  })\n<% } %>\n\nexport default ({ app }, inject) => {\n  inject('getUsers', async () => {\n    return users\n  })\n}\n```", "```js\n// modules/users/module.js\nimport path from 'path'\n\nexport default function (moduleOptions) {\n  this.addPlugin({\n    src: path.resolve(__dirname, 'plugin.js'),\n    options: {\n      url: 'https://jsonplaceholder.typicode.com/users',\n      debug: this.options.dev\n    }\n  })\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  modules: [\n      ['~/modules/users/module']\n    ]\n}\n```", "```js\n// pages/index.vue\n<li v-for=\"user in users\">\n  {{ user.name }}\n</li>\n\nexport default {\n  async asyncData({ app }) {\n    const { data: users } = await app.$getUsers()\n    return { users }\n  }\n}\n```", "```js\n// pages/index.vue\n<b-button size=\"sm\" @click=\"toggle\">\n  {{ show ? 'Hide' : 'Show' }} Alert\n</b-button>\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap-vue/dist/bootstrap-vue.css'\nexport default {\n  //...\n}\n```", "```js\n// modules/bootstrap/module.js\nimport path from 'path'\nexport default function (moduleOptions) {\n  const options = Object.assign({}, this.options.bootstrap, \n    moduleOptions)\n\n  if (options.styles !== false) {\n    this.options.css.push('bootstrap/dist/css/bootstrap.css')\n    this.options.css.push('bootstrap-vue/dist/bootstrap-vue.css')\n  }\n\n  this.addPlugin({\n    src: path.resolve(__dirname, 'plugin.js'),\n    options\n  })\n}\n```", "```js\n// modules/bootstrap/plugin.js\nimport Vue from 'vue'\nimport BootstrapVue from 'bootstrap-vue/dist/bootstrap-vue.esm'\n\nVue.use(BootstrapVue)\n\n<% if (options.debug) { %>\n  <% console.log (options) %>\n<% } %>\n```", "```js\n// nuxt.config.js\nexport default {\n  modules: [\n    ['~/modules/bootstrap/module', { styles: true }]\n  ],\n\n  bootstrap: {\n    debug: process.env.NODE_ENV === 'development' ? true : false\n  }\n}\n```", "```js\n// pages/index.vue\n<script>\n- import 'bootstrap/dist/css/bootstrap.css'\n- import 'bootstrap-vue/dist/bootstrap-vue.css'\nexport default {\n  //...\n}\n</script>\n```", "```js\n// modules/bootstrap/module.js\nexport default function (moduleOptions) {\n  if (moduleOptions.fontAwesome !== false) {\n    this.options.css.push('font-awesome/css/font-awesome.css')\n  }\n}\n```", "```js\nexport default function (moduleOptions) {\n  this.extendBuild((config, { isClient, isServer }) => {\n    //...\n  })\n}\n```", "```js\n.img {\n  background-image: url('./img.svg?fill=fff');\n}\n```", "```js\n$stroke-color: fff;\n\n.img {\n  background-image: url('./img.svg?stroke={$stroke-color}');\n}\n```", "```js\n$ npm i svg-transform-loader\n```", "```js\n// modules/svg-transform-loader/module.js\nexport default function (moduleOptions) {\n  this.extendBuild((config, { isClient, isServer }) => {\n    //...\n  })\n}\n```", "```js\nconst rule = config.module.rules.find(\n  r => r.test.toString() === '/\\\\.(png|jpe?g|gif|svg|webp)$/i'\n)\nrule.test = /\\.(png|jpe?g|gif|webp)$/i\n```", "```js\nconfig.module.rules.push({\n  test: /\\.svg(\\?.)?$/, // match img.svg and img.svg?param=value\n  use: [\n    'url-loader',\n    'svg-transform-loader'\n  ]\n})\n```", "```js\n// nuxt.config.js\nexport default {\n  modules: [\n    ['~/modules/svg-transform-loader/module']\n  ]\n}\n```", "```js\n// pages/index.vue\n<template>\n  <div>\n    <div class=\"background\"></div>\n    <img src=\"~/assets/bug.svg?stroke=red&stroke-\n     width=4&fill=blue\">\n  </div>\n</template>\n\n<style lang=\"less\">\n.background {\n   height: 100px;\n   width: 100px;\n   border: 4px solid red;\n   background-image: url('~assets/bug.svg?stroke=red&stroke-\n    width=2');\n}\n</style>\n```", "```js\nexport default function (moduleOptions) {\n  this.options.build.plugins.push({\n    apply(compiler) {\n      compiler.hooks.<hookType>.<tap>('<PluginName>', (param) => {\n        //...\n      })\n    }\n  })\n}\n```", "```js\n// modules/hello-world/module.js\nexport default function (moduleOptions) {\n  this.options.build.plugins.push({\n    apply(compiler) {\n      compiler.hooks.done.tap('HelloWordPlugin', (stats) => {\n        console.log('Hello World!')\n      })\n    }\n  })\n}\n\n```", "```js\n// nuxt.config.js\nexport default {\n modules: [\n ['~/modules/hello-world/module']\n}\n```", "```js\nexport default function (moduleOptions) {\n  this.nuxt.hook('modules:done', moduleContainer => {\n    //...\n  })\n}\n```", "```js\nexport default function (moduleOptions) {\n  this.nuxt.hook('render:before', renderer => {\n    //...\n  })\n}\n```", "```js\nexport default function (moduleOptions) {\n  this.nuxt.hook('build:compile', async ({ name, compiler }) => {\n    //...\n  })\n}\n```", "```js\nexport default function (moduleOptions) {\n  this.nuxt.hook('generate:before', async generator => {\n    //...\n  })\n}\n```", "```js\nexport default function (moduleOptions) {\n  this.nuxt.hook('ready', async nuxt => {\n    //...\n  })\n}\n```", "```js\n// modules/tasks/module.js\nexport default function (moduleOptions) {\n  this.nuxt.hook('modules:done', moduleContainer => {\n    console.log('All modules are loaded')\n  })\n}\n```", "```js\n// modules/module1.js\nexport default function (moduleOptions) {\n  console.log('Module 1')\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  modules: [\n    ['~/modules/tasks/module'],\n    ['~/modules/module3'],\n    ['~/modules/module1'],\n    ['~/modules/module2']\n  ]\n}\n```", "```js\nModule 3\nModule 1\nModule 2\nAll modules are loaded\n```"]