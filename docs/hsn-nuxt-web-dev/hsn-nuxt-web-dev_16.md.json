["```js\n// store/index.js\nnuxtServerInit({ commit }, { req }) {\n  if (req.ctx.session && req.ctx.session.authUser) {\n    commit('setUser', req.ctx.session.authUser)\n  }\n}\n\n// middleware/token.js\nexport default async ({ store, error }) => {\n  if (!store.state.auth.token) {\n    // handle error\n  }\n  axios.defaults.headers.common['Authorization'] = Bearer: ${store.state.auth.token}\n}\n```", "```js\nheader.payload.signature\n```", "```js\n{\n  \"typ\": \"JWT\",\n  \"alg\": \"HS256\"\n}\n```", "```js\n{\n  \"userId\": \"b08f86af-35da-48f2-8fab-cef3904660bd\",\n  \"name\": \"Jane Doe\"\n}\n```", "```js\n// signature algorithm\ndata = base64urlEncode(header) + '.' + base64urlEncode(payload)\nhashedData = hash(data, secret)\nsignature = base64urlEncode(hashedData)\n```", "```js\n// JWT Token\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJiMDhmODZhZi0zNWRhLTQ4ZjItOGZhYi1jZWYzOTA0NjYwYmQifQ.-xN_h82PHVTCMA9vdoHrcZxH-x5mb11y1537t3rGzcM\n```", "```js\nAuthorization: Bearer <token>\n```", "```js\n$ npm i jsonwebtoken\n```", "```js\nimport jwt from 'jsonwebtoken'\nvar token = jwt.sign({ name: 'john' }, 'secret', { expiresIn: '1h' })\n```", "```js\ntry {\n  var verified = jwt.verify(token, 'secret')\n} catch(err) {\n  // handle error\n}\n```", "```js\n// server/modules/public/user/_routes/login.js\nrouter.post('/login', async (ctx, next) => {\n  let request = ctx.request.body || {}\n\n  if (request.username === 'demo' && request.password === 'demo') {\n    let payload = { id: 1, name: 'Alexandre', username: 'demo' }\n    let token = jwt.sign(payload, config.JWT_SECRET, { expiresIn: 1 * 60 })\n    //...\n  }\n})\n```", "```js\nDROP TABLE IF EXISTS users;\nCREATE TABLE users (\n  id int(11) NOT NULL AUTO_INCREMENT,\n  name varchar(255) NOT NULL,\n  email varchar(255) NOT NULL,\n  username varchar(255) NOT NULL,\n  password varchar(255) NOT NULL,\n  created_on datetime NOT NULL,\n  last_on datetime NOT NULL,\n  PRIMARY KEY (id),\n  UNIQUE KEY email (email),\n  UNIQUE KEY username (username)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nINSERT INTO users (id, name, email, username, password, created_on, last_on) VALUES\n(1, 'Alexandre', 'demo@gmail.com', 'demo', '$2a$10$pyMYtPfIvE.PAboF3cIx9.IsyW73voMIRxFINohzgeV0I2BxwnrEu', '2019-06-17 00:00:00', '2019-01-21 23:32:58');\n```", "```js\n<project-name>\n\u251c\u2500\u2500 frontend\n\u2514\u2500\u2500 backend\n```", "```js\nfrontend\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 nuxt.config.js\n\u251c\u2500\u2500 store\n\u2502 \u251c\u2500\u2500 index.js\n\u2502 \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 pages\n    \u251c\u2500\u2500 index.vue\n    \u2514\u2500\u2500 ...\n```", "```js\nbackend\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 backpack.config.js\n\u251c\u2500\u2500 assets\n\u2502 \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 static\n\u2502 \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 ...\n    \u251c\u2500\u2500 modules\n    \u2502 \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 core\n        \u2514\u2500\u2500 ...\n```", "```js\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 middlewares.js\n    \u251c\u2500\u2500 routes-private.js\n    \u251c\u2500\u2500 routes-public.js\n    \u251c\u2500\u2500 config\n    \u2502 \u2514\u2500\u2500 index.js\n    \u251c\u2500\u2500 core\n    \u2502 \u2514\u2500\u2500 database\n    \u251c\u2500\u2500 middlewares\n    \u2502 \u251c\u2500\u2500 authenticate.js\n    \u2502 \u251c\u2500\u2500 errorHandler.js\n```", "```js\n    \u2502 \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 modules\n        \u2514\u2500\u2500 ...\n```", "```js\n\u2514\u2500\u2500 modules\n    \u251c\u2500\u2500 private\n    \u2502 \u2514\u2500\u2500 home\n    \u2514\u2500\u2500 public\n        \u251c\u2500\u2500 home\n        \u251c\u2500\u2500 user\n        \u2514\u2500\u2500 login\n```", "```js\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 index.js\n    \u2514\u2500\u2500 _routes\n        \u251c\u2500\u2500 index.js\n        \u2514\u2500\u2500 fetch-user.js\n```", "```js\n// src/modules/public/user/index.js\nimport Router from 'koa-router'\nimport fetchUsers from './_routes'\nimport fetchUser from './_routes/fetch-user'\n\nconst router = new Router({\n  prefix: '/users'\n})\nconst routes = [fetchUsers, fetchUser]\n\nfor (var route of routes) {\n  router.use(route.routes(), route.allowedMethods())\n}\n```", "```js\n// src/modules/public/user/_routes/index.js\nimport Router from 'koa-router'\nimport pool from 'core/database/mysql'\n\nconst router = new Router()\n\nrouter.get('/', async (ctx, next) => {\n  // code goes here....\n})\nexport default router\n```", "```js\n// src/modules/public/home/_routes/index.js\nimport Router from 'koa-router'\nconst router = new Router()\n\nrouter.get('/', async (ctx, next) => {\n  ctx.type = 'json'\n  ctx.body = {\n    message: 'Hello World!'\n  }\n})\nexport default router\n```", "```js\n// src/modules/public/home/index.js\nimport Router from 'koa-router'\nimport index from './_routes'\n\nconst router = new Router() // no prefix\nconst routes = [index]\n\nfor (var route of routes) {\n  router.use(route.routes(), route.allowedMethods())\n}\nexport default router\n```", "```js\n// src/routes-public.js\nimport Router from 'koa-router'\n\nimport home from './modules/public/home'\nimport user from './modules/public/user'\nimport login from './modules/public/login'\n\nconst router = new Router({ prefix: '/public' })\nconst modules = [home, user, login]\n\nfor (var module of modules) {\n  router.use(module.routes(), module.allowedMethods())\n}\nexport default router\n```", "```js\n// src/routes-private.js\nimport Router from 'koa-router'\n\nimport home from './modules/private/home'\nimport authenticate from './middlewares/authenticate'\n\nconst router = new Router({ prefix: '/private' })\nconst modules = [home]\n\nfor (var module of modules) {\n  router.use(authenticate, module.routes(), module.allowedMethods())\n}\nexport default router\n```", "```js\n// backpack.config.js\nmodule.exports = {\n  webpack: (config, options, webpack) => {\n    config.resolve.modules = ['./src', './src/core',\n      './src/modules']\n    return config\n  }\n}\n```", "```js\nimport pool from '../../../../core/database/mysql'\n```", "```js\n$ npm i backpack-core\n$ npm i cross-env\n$ npm i koa\n$ npm i koa-bodyparser\n$ npm i koa-favicon\n$ npm i koa-router\n$ npm i koa-static\n```", "```js\n// package.json \n{\n  \"scripts\": {\n    \"dev\": \"backpack\",\n    \"build\": \"backpack build\",\n    \"start\": \"cross-env NODE_ENV=production node build/main.js\"\n  }\n}\n```", "```js\n// src/config/index.js\nexport default {\n  server: {\n    port: 4000\n  },\n}\n```", "```js\n// src/middlewares.js\nimport serve from 'koa-static'\nimport favicon from 'koa-favicon'\nimport bodyParser from 'koa-bodyparser'\n\nexport default (app) => {\n  app.use(serve('assets'))\n  app.use(favicon('static/favicon.ico'))\n  app.use(bodyParser())\n}\n```", "```js\n// src/middlewares/okOutput.js\nexport default async (ctx, next) => {\n  await next()\n  if (ctx.status === 200) {\n    ctx.body = {\n      status: 200,\n      data: ctx.body\n    }\n  }\n}\n```", "```js\n{\"status\":200,\"data\":{\"message\":\"Hello World!\"}}\n```", "```js\nexport default async (ctx, next) => {\n  try {\n    await next()\n  } catch (err) {\n    ctx.status = err.status || 500\n\n    ctx.type = 'json'\n    ctx.body = {\n      status: ctx.status,\n      message: err.message\n    }\n\n    ctx.app.emit('error', err, ctx)\n  }\n}\n```", "```js\n{\"status\":400,\"message\":\"username param is required.\"}\n```", "```js\n// src/middlewares/notFound.js\nexport default async (ctx, next) => {\n  await next()\n  if (ctx.status === 404) {\n    ctx.throw(404, 'Not found')\n  }\n}\n```", "```js\n{\"status\":404,\"message\":\"Not found\"}\n```", "```js\n// src/middlewares.js\nimport errorHandler from './middlewares/errorHandler'\nimport notFound from './middlewares/notFound'\nimport okOutput from './middlewares/okOutput'\n\nexport default (app) => {\n  app.use(errorHandler)\n  app.use(notFound)\n  app.use(okOutput)\n}\n```", "```js\n// Import custom local middlewares.\nimport routesPublic from './routes-public'\nimport routesPrivate from './routes-private'\n\nexport default (app) => {\n  app.use(routesPublic.routes(), routesPublic.allowedMethods())\n  app.use(routesPrivate.routes(), routesPrivate.allowedMethods())\n}\n```", "```js\n// index.js\nimport Koa from 'koa'\nimport config from './config'\nimport middlewares from './middlewares'\n\nconst app = new Koa()\nconst host = process.env.HOST || '127.0.0.1'\nconst port = process.env.PORT || config.server.port\n\nmiddlewares(app)\napp.listen(port, host)\n```", "```js\n{\"status\":404,\"message\":\"Not found\"}\n```", "```js\n{\"status\":200,\"data\":{\"message\":\"Hello World!\"}}\n```", "```js\nlocalhost:4000/sample-asset.jpg\nlocalhost:4000/favicon.ico\n```", "```js\n$ npm i bcryptjs\n```", "```js\n// src/modules/public/user/_routes/create-user.js\nimport bcrypt from 'bcryptjs'\n\nconst saltRounds = 10\nconst salt = bcrypt.genSaltSync(saltRounds)\nconst hashed = bcrypt.hashSync(request.password, salt)\n```", "```js\n// src/modules/public/login/_routes/local.js\nimport bcrypt from 'bcryptjs'\n\nconst isMatched = bcrypt.compareSync(request.password,\n  user.password)\nif (isMatched === false) { ... }\n```", "```js\n$ npm i mysql\n```", "```js\n// src/core/database/mysql.js\nimport util from 'util'\nimport mysql from 'mysql'\n\nconst pool = mysql.createPool({\n  connectionLimit: 10,\n  host : 'localhost',\n  user : '<username>',\n  password : '<password>',\n  database : '<database>'\n})\n\npool.getConnection((err, connection) => {\n  if (error) {\n    // Handle errors ...\n  }\n  // Release the connection to the pool if no error.\n  if (connection) {\n    connection.release()\n  }\n  return\n})\npool.query = util.promisify(pool.query)\nexport default pool\n```", "```js\nconnection.query('SELECT ...', function (error, results, fields) {\n  if (error) {\n    throw error\n  }\n  // Do something ...\n})\n\n```", "```js\nlet result = null\ntry {\n  result = await pool.query('SELECT ...')\n} catch (error) {\n  // Handle errors ...\n}\n```", "```js\nimport mysql from 'mysql'\nconst pool = mysql.createPool(...)\n\npool.getConnection(function(error, connection) {\n  if (error) { throw error }\n\n  connection.query('SELECT ...', function (error, results,\n   fields) {\n    connection.release()\n    if (error) { throw error }\n  })\n})\n```", "```js\n// backend/src/modules/public/user/_routes/index.js\nimport Router from 'koa-router'\nimport pool from 'core/database/mysql'\nconst router = new Router()\n\nrouter.get('/', async (ctx, next) => {\n  try {\n    var users = await pool.query(\n     'SELECT `id`, `name`, `created_on`\n      FROM `users`'\n    )\n  } catch (err) { ... }\n\n  ctx.type = 'json'\n  ctx.body = users\n})\n\nexport default router\n```", "```js\n{\"status\":200,\"data\":[{\"id\":1,\"name\":\"Alexandre\",\"created_on\":\"2019-06-16T22:00:00.000Z\"}]}\n```", "```js\n// src/modules/public/login/_routes/local.js\nimport Router from 'koa-router'\nimport jwt from 'jsonwebtoken'\nimport bcrypt from 'bcrypt'\nimport pool from 'core/database/mysql'\nimport config from 'config'\n\nconst router = new Router()\n\nrouter.post('/login', async (ctx, next) => {\n  let request = ctx.request.body || {}\n  //...\n})\n\nexport default router\n```", "```js\nif (request.username === undefined) {\n  ctx.throw(400, 'username param is required.')\n}\nif (request.password === undefined) {\n  ctx.throw(400, 'password param is required.')\n}\nif (request.username === '') {\n  ctx.throw(400, 'username is required.')\n}\nif (request.password === '') {\n  ctx.throw(400, 'password is required.')\n}\n```", "```js\nlet username = request.username\nlet password = request.password\n\nlet users = []\ntry {\n  users = await pool.query('SELECT  FROM users WHERE \n   username = ?', [username])\n} catch(err) {\n  ctx.throw(400, err.sqlMessage)\n}\n\nif (users.length === 0) {\n  ctx.throw(404, 'no user found')\n}\n```", "```js\nlet user = users[0]\nlet match = false\n\ntry {\n  match = await bcrypt.compare(password, user.password)\n} catch(err) {\n  ctx.throw(401, err)\n}\nif (match === false) {\n  ctx.throw(401, 'invalid password')\n}\n```", "```js\nlet payload = { name: user.name, email: user.email }\nlet token = jwt.sign(payload, config.JWT_SECRET, { expiresIn:\n  1 * 60 })\n\nctx.body = {\n  user: payload,\n  message: 'logged in ok',\n  token: token\n}\n```", "```js\n$ curl -X POST -d \"username=demo&password=123123\" -H \"Content-Type: application/x-www-form-urlencoded\" http://localhost:4000/public/login/local\n```", "```js\n{\"status\":200,\"data\":{\"user\":{\"name\":\"Alexandre\",\"email\":\"thiamkok.lau@gmail.com\"},\"message\":\"logged in ok\",\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQWxleGFuZHJlIiwiZW1haWwiOiJ0aGlhbWtvay5sYXVAZ21haWwuY29tIiwiaWF0IjoxNTgwMDExNzAwLCJleHAiOjE1ODAwMTE3NjB9.Lhd78jokSGALup6DUYAqWAjl7C-8dLhXjEba-KAxy4k\"}}\n```", "```js\n// src/middlewares/authenticate.js\nimport jwt from 'jsonwebtoken'\nimport config from 'config'\n\nexport default async (ctx, next) => {\n  if (!ctx.headers.authorization) {\n    ctx.throw(401, 'Protected resource, use Authorization header \n    to get access')\n  }\n  const token = ctx.headers.authorization.split(' ')[1]\n\n  try {\n    ctx.state.jwtPayload = jwt.verify(token, config.JWT_SECRET)\n  } catch (err) {\n    // handle error.\n  }\n  await next()\n}\n```", "```js\n// src/routes-private.js\nimport Router from 'koa-router'\nimport home from './modules/private/home'\nimport authenticate from './middlewares/authenticate'\n\nconst router = new Router({ prefix: '/private' })\nconst modules = [home]\n\nfor (var module of modules) {\n  router.use(authenticate, module.routes(), module.allowedMethods())\n}\n```", "```js\n$ npm i @nuxtjs/axios\n$ npm i @nuxtjs/proxy\n```", "```js\n// nuxt.config.js\nmodule.exports = {\n  modules: [\n    '@nuxtjs/axios',\n  ],\n\n  axios: {\n    proxy: true\n  },\n\n  proxy: {\n    '/api/': { target: 'http://localhost:4000/', pathRewrite:\n     {'^/api/': ''} },\n  }\n}\n```", "```js\n// pages/secured.vue\nimport axios from '~/plugins/axios'\n```", "```js\n// pages/secured.vue\nasync asyncData ({ $axios, redirect }) {\n  const { data } = await $axios.$get('/api/private')\n}\n```", "```js\nCookies.set(<name>, <value>)\n```", "```js\nCookies.set(<name>, <value>, { expires: 30 })\n```", "```js\nCookies.get(<name>)\n```", "```js\n// store/actions.js\nconst cookies = process.client ? require('js-cookie') : undefined\n```", "```js\n// store/actions.js\nexport default {\n  async login(context, { username, password }) {\n    const { data } = await \n     this.$axios.$post('/api/public/login/local', \n     { username, password })\n    cookies.set('auth', data)\n    context.commit('setAuth', data)\n  }\n}\n```", "```js\n// store/actions.js\nexport default {\n  logout({ commit }) {\n    cookies.remove('auth')\n    commit('setAuth', null)\n  }\n}\n```", "```js\n// store/index.js\nconst cookie = process.server ? require('cookie') : undefined\n```", "```js\n// store/index.js\nexport const actions = {\n  nuxtServerInit({ commit }, { req }) {\n    if (req.headers.cookie && req.headers.cookie.indexOf('auth') >\n      -1) {\n      let auth = cookie.parse(req.headers.cookie)['auth']\n      commit('setAuth', JSON.parse(auth))\n    }\n  }\n}\n```", "```js\n// middleware/token.js\nexport default async ({ store, error, $axios }) => {\n  if (!store.state.auth.token) {\n    // handle error\n  }\n  $axios.setHeader('Authorization', Bearer: ${store.state.auth.token})\n}\n```", "```js\n$ npm i googleapis\n```", "```js\n// backend/src/config/google.js\nexport default {\n  clientId: '<client ID>',\n  clientSecret: '<client secret>',\n  redirect: 'http://localhost:3000/login'\n}\n```", "```js\n// backend/src/modules/public/login/_routes/google/url.js\nimport Router from 'koa-router'\nimport { google } from 'googleapis'\nimport googleConfig from 'config/google'\n\nconst router = new Router()\n\nrouter.get('/google/url', async (ctx, next) => {\n\n  const oauth = new google.auth.OAuth2(\n    googleConfig.clientId,\n    googleConfig.clientSecret,\n    googleConfig.redirect\n  )\n\n  const scopes = [\n    'https://www.googleapis.com/auth/userinfo.email',\n    'https://www.googleapis.com/auth/userinfo.profile',\n  ]\n\n  const url = oauth.generateAuthUrl({\n    access_type: 'offline',\n    prompt: 'consent',\n    scope: scopes\n  })\n\n  ctx.body = url\n})\n```", "```js\n// backend/src/modules/public/login/_routes/google/me.js\nimport Router from 'koa-router'\nimport { google } from 'googleapis'\nimport jwt from 'jsonwebtoken'\nimport pool from 'core/database/mysql'\nimport config from 'config'\nimport googleConfig from 'config/google'\n\nconst router = new Router()\n\nrouter.get('/google/me', async (ctx, next) => {\n\n  // Get the code from url query.\n  const code = ctx.query.code\n\n  // Create a new google oauth2 client instance.\n  const oauth2 = new google.auth.OAuth2(\n    googleConfig.clientId,\n    googleConfig.clientSecret,\n    googleConfig.redirect\n  )\n  //...\n})\n```", "```js\n// backend/src/modules/public/login/_routes/google/me.js\n...\nconst {tokens} = await oauth2.getToken(code)\noauth.setCredentials(tokens)\n\nconst people = google.people({\n  version: 'v1',\n  auth: oauth2,\n})\n\nconst me = await people.people.get({\n  resourceName: 'people/me',\n  personFields: 'names,emailAddresses'\n})\n```", "```js\n// backend/src/modules/public/login/_routes/google/me.js\n...\nlet email = me.data.emailAddresses[0].value\nlet users = []\n\ntry {\n  users = await pool.query('SELECT  FROM users WHERE email = ?',\n   [email])\n} catch(err) {\n  ctx.throw(400, err.sqlMessage)\n}\n```", "```js\n// backend/src/modules/public/login/_routes/google/me.js\n...\nif (users.length === 0) {\n  ctx.body = {\n    user: me.data,\n    message: 'signup required'\n  }\n  return\n}\nlet user = users[0]\n```", "```js\n// backend/src/modules/public/login/_routes/google/me.js\n...\nlet payload = { name: user.name, email: user.email }\nlet token = jwt.sign(payload, config.JWT_SECRET, { expiresIn: 1 * 60 })\n\nctx.body = {\n  user: payload,\n  message: 'logged in ok',\n  token: token\n}\n```", "```js\nhttp://localhost:3000/login?code=4%2F1QGpS37E21TcgQhhIvJZlK1cG4M1jpPJ0I_XPQgrFjvKUFUJQ3aYuO1zYsqPmKgNb4Wfd8ito88yDjUTD6CKD3E&scope=email%20profile%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile%20openid&authuser=1&prompt=consent\n```", "```js\n<redirect URL>?\ncode=4/1QFvWYDSrW...\n&scope=email profile...\n&authuser=1\n&prompt=consent\n```", "```js\nconst queryString = require('query-string')\nconst parsed = queryString.parse(location.search)\nconsole.log(parsed)\n```", "```js\n{authuser: \"1\", code: \"4/1QFvWYDSrWLklhIgRfVR0LJy6Pk0gn5TkjTKWKlRr9pdZveGAHV_pMrxBhicy7Zd6d9nfz0IQrcLl-VGS-Gu9Xk\", prompt: \"consent\", scope: \"email profile https://www.googleapis.com/auth/user\u2026//www.googleapis.com/auth/userinfo.profile openid\"}\n```", "```js\n$ npm i query-string\n```", "```js\n// frontend/pages/login.vue\n<button v-on:click=\"loginWithGoogle\">Google Login</button>\n\nexport default {\n  methods: {\n    async loginWithGoogle() {\n      try {\n        await this.$store.dispatch('getGoogleUrl')\n      } catch (error) {\n        let errorData = error.response.data\n        this.formError = errorData.message\n      }\n    }\n  }\n}\n```", "```js\n// frontend/store/actions.js\nexport default {\n  async getGoogleUrl(context) {\n    const { data } = await this.$axios.$get('/api/public/login/\n     google/url')\n    window.location.replace(data)\n  }\n}\n```", "```js\n// frontend/pages/login.vue\nexport default {\n  async mounted () {\n    let query = window.location.search\n\n    if (query) {\n      try {\n        await this.$store.dispatch('loginWithGoogle', query)\n      } catch (error) {\n        // handle error\n      }\n    }\n  }\n}\n```", "```js\n// frontend/store/actions.js\nimport queryString from 'query-string'\n\nexport default {\n  async loginWithGoogle (context, query) {\n    const parsed = queryString.parse(query)\n    const { data } = await this.$axios.$get('/api/public/login/\n     google/me', {\n      params: {\n        code: parsed.code\n      }\n    })\n\n    if (data.message === 'signup required') {\n      localStorage.setItem('user', JSON.stringify(data.user))\n      this.$router.push({ name: 'signup'})\n    } else {\n      cookies.set('auth', data)\n      context.commit('setAuth', data)\n    }\n  }\n}\n```"]