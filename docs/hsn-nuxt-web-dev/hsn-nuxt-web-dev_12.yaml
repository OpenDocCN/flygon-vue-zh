- en: Adding a Server-Side Database
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 添加服务器端数据库
- en: We added Koa as the server-side framework for our Nuxt app in the previous chapter
    with some dummy data. In this chapter, we will set up MongoDB as the server-side
    database to replace that dummy data. We will write some MongoDB CRUD queries,
    add data to the database, and use `asyncData` to fetch the data from the database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们为Nuxt应用程序添加了Koa作为服务器端框架，并添加了一些虚拟数据。在本章中，我们将设置MongoDB作为服务器端数据库，以替换虚拟数据。我们将编写一些MongoDB
    CRUD查询，向数据库添加数据，并使用`asyncData`从数据库中获取数据。
- en: 'The topics we will cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题如下：
- en: Introducing MongoDB
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍MongoDB
- en: Writing basic MongoDB queries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写基本的MongoDB查询
- en: Writing MongoDB CRUD operations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写MongoDB CRUD操作
- en: Injecting data with MongoDB CRUD queries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MongoDB CRUD查询注入数据
- en: Integrating MongoDB with Koa
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将MongoDB集成到Koa中
- en: Integrating with Nuxt pages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Nuxt页面集成
- en: Introducing MongoDB
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍MongoDB
- en: 'MongoDB is an open source document-oriented database management system (DBMS)
    that stores data in JSON-like documents called Binary JSON (BSON) – a binary representation
    of MongoDB''s JSON-like documents that can be parsed more quickly than ordinary
    JSON. It is one of the most popular NoSQL database systems since 2009 that does
    not use tables and rows, in contrast with relational database management systems
    (RDBMSes). Every record of your data in MongoDB is a document composed of name-value
    pairs (or field and value pairs) that are similar to JSON objects but binary encoded
    to support data types that are outside the scope of JSON, such as ObjectId, Date,
    and Binary data ([https://docs.mongodb.com/manual/reference/bson-types/](https://docs.mongodb.com/manual/reference/bson-types/)). Hence,
    it is called Binary JSON. For example, a document of `{"hello":"world"}` will
    be stored in a `.bson` file as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB是一个开源的面向文档的数据库管理系统（DBMS），它以类似JSON的文档形式存储数据，称为二进制JSON（BSON）- MongoDB的JSON文档的二进制表示，可以比普通JSON更快地解析。自2009年以来，它是最受欢迎的NoSQL数据库系统之一，不使用表和行，与关系数据库管理系统（RDBMS）相反。在MongoDB中，您的数据记录是由名称-值对（或字段和值对）组成的文档，类似于JSON对象，但是二进制编码以支持JSON范围之外的数据类型，例如ObjectId、Date和Binary
    data（https://docs.mongodb.com/manual/reference/bson-types/）。因此，它被称为二进制JSON。例如，`{"hello":"world"}`的文档将存储在`.bson`文件中，如下所示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In practice, the encoded data in BSON is not human-readable, but we don't have
    to worry much about it when working with MongoDB because they will be encoded
    and decoded by the MongoDB driver for you out of the box. You just need to use
    the MongoDB syntax, methods, operations, and selectors with the JSON document
    that you are familiar with when constructing the document for BSON storage. Let's
    get MongoDB installed and start writing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，BSON中编码的数据不是人类可读的，但是在使用MongoDB时，我们不必过多担心，因为它们将由MongoDB驱动程序为您自动编码和解码。您只需要使用MongoDB的语法、方法、操作和选择器与您熟悉的JSON文档一起构建BSON存储的文档。让我们安装MongoDB并开始编写。
- en: Installing MongoDB
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装MongoDB
- en: 'There are a few ways to install MongoDB depending on the edition (Community
    Edition or Enterprise) and the platform (Windows, Ubuntu, or macOS). You can follow
    the links provided here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据版本（社区版或企业版）和平台（Windows、Ubuntu或macOS），安装MongoDB有几种方法。您可以按照这里提供的链接进行操作：
- en: '**MongoDB Community Edition:** [https://docs.mongodb.com/manual/installation/#mongodb-community-edition-installation-tutorials](https://docs.mongodb.com/manual/installation/#mongodb-community-edition-installation-tutorials)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoDB社区版：**[https://docs.mongodb.com/manual/installation/#mongodb-community-edition-installation-tutorials](https://docs.mongodb.com/manual/installation/#mongodb-community-edition-installation-tutorials)'
- en: '**MongoDB Enterprise:** [https://docs.mongodb.com/manual/installation/#mongodb-enterprise-edition-installation-tutorial](https://docs.mongodb.com/manual/installation/#mongodb-enterprise-edition-installation-tutorials)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoDB企业版：** [https://docs.mongodb.com/manual/installation/#mongodb-enterprise-edition-installation-tutorial](https://docs.mongodb.com/manual/installation/#mongodb-enterprise-edition-installation-tutorials)'
- en: '**Install MongoDB Community Edition on Ubuntu:** [https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在Ubuntu上安装MongoDB社区版：** [https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/)'
- en: Installing on Ubuntu 20.04
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Ubuntu 20.04上安装
- en: 'In this book, we will install MongoDB 4.2 (Community Edition) on Ubuntu 20.04
    (Focal Fossa). It works the same, too, if you are on Ubuntu 19.10 (Eoan Ermine).
    If you are using other older versions of Ubuntu, such as 14.04 LTS (Trusty Tahr),
    16.04 LTS (Xenial Xerus), or 18.04 LTS (Bionic Beaver), please follow the MongoDB
    Community Edition on Ubuntu link in the previous section. So, let''s get started:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将在Ubuntu 20.04（Focal Fossa）上安装MongoDB 4.2（社区版）。如果您使用的是Ubuntu 19.10（Eoan
    Ermine），它也是一样的。如果您使用其他旧版本的Ubuntu，比如14.04 LTS（Trusty Tahr）、16.04 LTS（Xenial Xerus）或18.04
    LTS（Bionic Beaver），请在上一节中的链接中查看《在Ubuntu上安装MongoDB社区版》。所以，让我们开始吧：
- en: 'Import the public key from `mongodb.org`:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`mongodb.org`导入公钥：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You should get an `OK` in the response.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到一个`OK`的响应。
- en: 'Create a list file for MongoDB:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为MongoDB创建一个列表文件：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Update all the local packages in your system:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新系统中的所有本地软件包：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Install the MongoDB packages:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装MongoDB软件包：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Starting MongoDB
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动MongoDB
- en: 'Once you have the MongoDB packages installed, the next thing you should do
    is see whether you can start and connect the MongoDB server from your terminal.
    So, let''s begin:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了MongoDB软件包，您接下来应该做的是查看您是否可以从终端启动和连接MongoDB服务器。所以，让我们开始吧：
- en: 'Start MongoDB manually or automatically at boot time in the following commands:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下命令中手动或自动启动MongoDB：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Verify it by checking its version:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过检查其版本来验证它：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should get a similar output to this on your terminal:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会在终端上得到类似的输出：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Optionally, check the MongoDB server status with the following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用以下命令检查MongoDB服务器的状态：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should get the similar output to this on your terminal:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会在终端上得到类似的输出：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Optionally, check whether MongoDB has been started on port 27017 with the `netstat`
    command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用`netstat`命令检查MongoDB是否已在端口27017上启动：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see the following similar output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到类似的输出：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Connect to the MongoDB Shell:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到MongoDB Shell：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Exit the MongoDB Shell (when you want to):'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出MongoDB Shell（当您想要时）：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If, for any reason, you want to remove MongoDB completely from your system,
    then use this command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于任何原因，您想要从系统完全删除MongoDB，那么使用此命令：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the next section, you will start writing some basic queries from the MongoDB
    Shell you have just learned about. Let's get right to it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将开始从您刚刚学习的MongoDB Shell中编写一些基本查询。让我们开始吧。
- en: Writing basic MongoDB queries
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写基本的MongoDB查询
- en: 'Before you can write MongoDB queries and inject some data, first you must connect
    to MongoDB, so open a terminal and type the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以编写MongoDB查询和注入一些数据之前，首先您必须连接到MongoDB，因此打开一个终端并输入以下内容：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then you can list the databases that you have in the MongoDB system:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您可以列出MongoDB系统中的数据库：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should get the following output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到以下输出：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These two databases (`admin` and `config`) are the default ones from MongoDB.
    However, we should create new databases according to our needs and purposes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个数据库（`admin`和`config`）是MongoDB的默认数据库。但是，根据我们的需求和目的，我们应该创建新的数据库。
- en: Creating a database
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个数据库
- en: 'As soon as you have logged in the MongoDB shell, you can create a fresh database
    in MongoDB by using the `use` command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你登录了MongoDB shell，你可以使用`use`命令在MongoDB中创建一个新的数据库：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should get the following result:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'However, note that it is the same when you want to select an existing database:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请注意，当你想选择一个现有的数据库时，情况是一样的：
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should get the following result:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE21]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you want to drop a database, first select the database using the `use` command,
    for example, `use nuxt-app`, followed by the `dropDatabase` function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想删除一个数据库，首先使用`use`命令选择数据库，例如，`use nuxt-app`，然后使用`dropDatabase`函数：
- en: '[PRE22]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should get the following result:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE23]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The next thing we will learn is how to create or add collections to the database
    that we have created.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要学习的是如何在我们创建的数据库中创建或添加集合。
- en: Creating a new collection
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的集合
- en: 'What is a MongoDB collection? If you are familiar with RDBMSes, a collection
    is akin to an RDBMS table, which can consist of different fields, except the enforcement
    of schema. We use the `createCollection` method to create a collection with the
    following format:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是MongoDB集合？如果你熟悉关系型数据库，集合类似于关系型数据库表，可以包含不同的字段，除了强制执行模式。我们使用`createCollection`方法以以下格式创建一个集合：
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `<name`> parameter is the name of the collection, such as user, article,
    or whatever. The `<options>` parameter is optional, and is used to specify fields
    for creating a fixed-sized collection, or a collection that validates updates
    and inserts. For more information about these options, please visit [https://docs.mongodb.com/manual/reference/method/db.createCollection/](https://docs.mongodb.com/manual/reference/method/db.createCollection/).
    Let''s create a document and see what else you can do with the document in the
    following steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`<name>`参数是集合的名称，比如user、article或其他。`<options>`参数是可选的，用于指定创建一个固定大小的集合或验证更新和插入的集合字段。有关这些选项的更多信息，请访问[https://docs.mongodb.com/manual/reference/method/db.createCollection/](https://docs.mongodb.com/manual/reference/method/db.createCollection/)。让我们创建一个文档，看看在接下来的步骤中还可以做什么：'
- en: 'Create a collection without any options:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个没有任何选项的集合：
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should get the following result:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'List all collections in the database with the `getCollectionNames` method:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`getCollectionNames`方法列出数据库中的所有集合：
- en: '[PRE27]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should get the following result:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Drop the `users` collection with the `drop` method:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`drop`方法删除`users`集合：
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You should get the following result:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now that we know how to create a collection, the next thing you should know
    is how to add documents to the collection. Let's get to it in the next section.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道如何创建一个集合，下一件你应该知道的事情是如何向集合中添加文档。让我们在下一节中来看看。
- en: Writing MongoDB CRUD operations
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写MongoDB CRUD操作
- en: 'When it comes to managing and manipulating data in a database system, we are
    bound to create, read, update, and delete (CRUD) documents. We can use MongoDB''sCRUD
    operations for this. You can read more information about MongoDB CRUD operations
    at [https://docs.mongodb.com/manual/crud/](https://docs.mongodb.com/manual/crud/).
    In this book, we will just see a simple example of how we can use each of these:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到在数据库系统中管理和操作数据时，我们必须创建、读取、更新和删除（CRUD）文档。我们可以使用MongoDB的CRUD操作来实现这一点。你可以在[https://docs.mongodb.com/manual/crud/](https://docs.mongodb.com/manual/crud/)上阅读更多关于MongoDB
    CRUD操作的信息。在本书中，我们只会看到如何使用每一个的简单示例：
- en: '**The Create operations**:We can use the following methods to create or insert
    fresh documents to a collection:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建操作**：我们可以使用以下方法向集合中创建或插入新文档：'
- en: '[PRE31]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note that if the collection does not exist in your database, these `insert`
    operations will create it for you automatically.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您的数据库中不存在该集合，这些`insert`操作将自动为您创建它。
- en: '**The Read operations**:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取操作**：'
- en: 'We can use the following method to fetch documents from a collection:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下方法从集合中获取文档：
- en: '[PRE32]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**The Update operations**:We can use the following methods to modify the existing
    documents in a collection:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新操作**：我们可以使用以下方法修改集合中现有的文档：'
- en: '[PRE33]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**The Delete operations**:We can use the following methods to remove documents
    from a collection:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除操作**：我们可以使用以下方法从集合中删除文档：'
- en: '[PRE34]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: With these simplified CRUD operations, you can start injecting data to the database
    in the next section, and then you are another step closer to create a fully functional
    API. Let's get going!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些简化的CRUD操作，您可以开始在下一节向数据库注入数据，然后您离创建一个完全功能的API又近了一步。让我们开始吧！
- en: Injecting data with MongoDB CRUD
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB CRUD注入数据
- en: We will inject some data in the nuxt-app database with the MongoDB CRUD operations
    that you have learned about in the previous section.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用您在上一节中学到的MongoDB CRUD操作向nuxt-app数据库中注入一些数据。
- en: Inserting documents
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入文档
- en: 'We can insert new documents by using the `insertOne` or `insertMany` methods
    as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`insertOne`或`insertMany`方法插入新文档如下：
- en: '**Insert a single document**:We can insert a new document like this:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插入单个文档**：我们可以像这样插入新文档：'
- en: '[PRE35]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s insert one document with the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下代码插入一个文档：
- en: '[PRE36]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You should get a similar result to this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似于这样的结果：
- en: '[PRE37]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '**Insert multiple documents**:We can insert multiple new documents like this:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插入多个文档**：我们可以像这样插入多个新文档：'
- en: '[PRE38]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let''s insert two documents with the following code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下代码插入两个文档：
- en: '[PRE39]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You should get a similar result to this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似于这样的结果：
- en: '[PRE40]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: After adding documents to the `user` collection, we would like to fetch them,
    and that can be done simply by using the read operations in the next section.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在向`user`集合添加文档后，我们希望获取它们，这可以通过下一节中的读取操作简单完成。
- en: Querying documents
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询文档
- en: 'We can fetch documents by using the `find` method as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式使用`find`方法获取文档：
- en: '**Selecting all documents in a collection**:We can fetch all the documents
    from a collection like this:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择集合中的所有文档**：我们可以像这样从集合中获取所有文档：'
- en: '[PRE41]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This operation is the same as the following SQL statement:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作与以下SQL语句相同：
- en: '[PRE42]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Let''s fetch all the documents from the `user` collection as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按以下方式从`user`集合中获取所有文档：
- en: '[PRE43]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You should get a similar result to this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似于这样的结果：
- en: '[PRE44]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**Specifying equality condition**:We can fetch specific documents from a collection
    like this:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指定相等条件**：我们可以像这样从集合中获取特定文档：'
- en: '[PRE45]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You can see that we use the same `find` method as the previous example but
    pass in the options in the `<query>` parameter to filter the documents that match
    the specific queries. For example, the following line selects the document where
    the `status` equals `ok`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们使用与上一个示例相同的`find`方法，但是在`<query>`参数中传入选项来过滤匹配特定查询的文档。例如，以下行选择了`status`等于`ok`的文档：
- en: '[PRE46]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This operation is the same as the following SQL statement:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作与以下SQL语句相同：
- en: '[PRE47]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You should get a similar result to this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似于这样的结果：
- en: '[PRE48]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '**Specifying conditions using query operators**:We also can use MongoDB query
    selectors, such as `$eq`, `$gt`, or `$in`, in the `find` method''s `<query>` parameter.
    For example, the following line fetches documents where the `status` equals either
    `ok` or `pending`:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用查询操作符指定条件**：我们还可以在`find`方法的`<query>`参数中使用MongoDB查询选择器，例如`$eq`，`$gt`或`$in`。例如，以下行获取了`status`等于`ok`或`pending`的文档：'
- en: '[PRE49]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This operation is the same as the following SQL statement:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作与以下SQL语句相同：
- en: '[PRE50]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: You can find out more information about the query selectors at [https://docs.mongodb.com/manual/reference/operator/query/query-selectors](https://docs.mongodb.com/manual/reference/operator/query/#query-selectors).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.mongodb.com/manual/reference/operator/query/query-selectors](https://docs.mongodb.com/manual/reference/operator/query/#query-selectors)找到有关查询选择器的更多信息。
- en: '**Specifying AND conditions**:You also can mix filters with query selectors.
    For example, the following line fetches documents where the `status` equals `ok` **and**
    the `age` is less than ($lt) 30:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定AND条件：您还可以将过滤器与查询选择器混合使用。例如，以下行获取`status`等于`ok` **并且** `age`小于($lt) 30的文档：
- en: '[PRE51]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You should get a similar result to this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似于这样的结果：
- en: '[PRE52]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This operation is the same as the following SQL statement:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作与以下SQL语句相同：
- en: '[PRE53]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '**Specifying OR conditions**:You also can create OR conditions by using the
    `$or` selector to fetch the documents that match at least one condition. For example,
    the following line fetches documents where the `status` equals `ok` **or** the
    `age` is less than ($lt) 30:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定OR条件：您还可以使用`$or`选择器创建OR条件，以获取至少满足一个条件的文档。例如，以下行获取`status`等于`ok` **或** `age`小于($lt)
    30的文档：
- en: '[PRE54]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This operation is the same as the following SQL statement:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作与以下SQL语句相同：
- en: '[PRE55]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You should get a similar result to this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似于这样的结果：
- en: '[PRE56]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: You can find out more about the query and projection operators at [https://docs.mongodb.com/manual/reference/operator/query/](https://docs.mongodb.com/manual/reference/operator/query/)
    and the `$or` selector at [https://docs.mongodb.com/manual/reference/operator/query/logical](https://docs.mongodb.com/manual/reference/operator/query/#logical).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.mongodb.com/manual/reference/operator/query/](https://docs.mongodb.com/manual/reference/operator/query/)找到有关查询和投影操作符的更多信息，以及在[https://docs.mongodb.com/manual/reference/operator/query/logical](https://docs.mongodb.com/manual/reference/operator/query/#logical)找到`$or`选择器的更多信息。
- en: Now, the next thing we are interested in is updating existing documents, so
    let's move on to the next section.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们感兴趣的下一件事是更新现有文档，所以让我们继续下一节。
- en: Updating documents
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新文档
- en: 'We can update the existing documents by using the `updateOne` and `updateMany`
    methods as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`updateOne`和`updateMany`方法更新现有文档，如下所示：
- en: '**Updating a single document**:We can update an existing document like this:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新单个文档：我们可以像这样更新现有文档：
- en: '[PRE57]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Let''s update the document where the `name` equals `Sébastien` in the `<filter>`
    parameter with the update data using the `$set` operator in the `<update>` parameter,
    as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`$set`操作符在`<update>`参数中更新数据，更新`<filter>`参数中`name`等于`Sébastien`的文档，如下所示：
- en: '[PRE58]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'You should get the following result:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下结果：
- en: '[PRE59]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The `$set` operator is used to replace the value of a field with the new value.
    It takes the following format:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`$set`操作符用于用新值替换字段的值。它采用以下格式：'
- en: '[PRE60]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `$currentDate` operator is used to set the value of a field to the current
    date. The value it returns can be a human-readable date (which is the default),
    for example `2013-10-02T01:11:18.965Z` or a timestamp, such as `1573612039`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`$currentDate`操作符用于将字段的值设置为当前日期。它返回的值可以是人类可读的日期（默认值），例如`2013-10-02T01:11:18.965Z`，也可以是时间戳，例如`1573612039`。'
- en: You can find out more information about the `$set` operator at [https://docs.mongodb.com/manual/reference/operator/update/set/](https://docs.mongodb.com/manual/reference/operator/update/set/).
    You can find out more information about `$currentDate` at [https://docs.mongodb.com/manual/reference/operator/update/currentDate/](https://docs.mongodb.com/manual/reference/operator/update/currentDate/).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.mongodb.com/manual/reference/operator/update/set/](https://docs.mongodb.com/manual/reference/operator/update/set/)找到有关`$set`运算符的更多信息。您可以在[https://docs.mongodb.com/manual/reference/operator/update/currentDate/](https://docs.mongodb.com/manual/reference/operator/update/currentDate/)找到有关`$currentDate`的更多信息。
- en: '**Updating multiple documents**:We can update multiple existing documents like
    this:'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新多个文档**：我们可以像这样更新多个现有文档：'
- en: '[PRE61]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Let''s update documents where the `status` is `ok`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`status`为`ok`的文档：
- en: '[PRE62]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You should get the following result:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE63]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: You can find out more information about the update operators at [https://docs.mongodb.com/manual/reference/operator/update/](https://docs.mongodb.com/manual/reference/operator/update/).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.mongodb.com/manual/reference/operator/update/](https://docs.mongodb.com/manual/reference/operator/update/)找到有关更新运算符的更多信息。
- en: '**Replacing a document**:We can replace the content of existing documents,
    except the `_id` field, like this:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**替换文档**：我们可以像这样替换现有文档的内容，除了`_id`字段：'
- en: '[PRE64]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Let''s replace the document where `name` equals `Pooya` with a completely new
    document in the `<replacement>` parameter as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按如下方式用`<replacement>`参数替换`name`等于`Pooya`的文档为全新的文档：
- en: '[PRE65]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You should get the following result:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE66]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: After learning how to update existing documents, the next thing you should learn
    is how to delete existing documents. Let's dive into the next section.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何更新现有文档之后，你应该学会的下一件事是如何删除现有文档。让我们深入下一节。
- en: Deleting documents
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除文档
- en: 'We can delete existing documents by using the `deleteOne` and `deleteMany`
    methods as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式使用`deleteOne`和`deleteMany`方法删除现有文档：
- en: '**Deleting only one document that matches a condition**:We can delete an existing
    document like this:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅删除匹配条件的一个文档**：我们可以像这样删除现有文档：'
- en: '[PRE67]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Let''s delete the document where the `status` field equals `pending` as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按如下方式删除`status`字段等于`pending`的文档：
- en: '[PRE68]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'You should get the following result:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE69]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '**Deleting documents that match a condition**:We can delete multiple existing
    documents like this:'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除匹配条件的文档**：我们可以像这样删除多个现有文档：'
- en: '[PRE70]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Let''s delete documents where the `status` field equals `ok`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除`status`字段等于`ok`的文档：
- en: '[PRE71]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'You should get the following result:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE72]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '**Deleting all documents**:We can delete all documents in a collection by passing
    an empty filter to the `deleteMany` method as follows:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除所有文档**：我们可以通过将空过滤器传递给`deleteMany`方法来删除集合中的所有文档，如下所示：'
- en: '[PRE73]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Let''s delete all documents from the `user` collection with the following code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下代码从`user`集合中删除所有文档：
- en: '[PRE74]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'You should get the following result:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下结果：
- en: '[PRE75]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Well done! You have managed to complete the MongoDB CRUD operations in these
    sections. You can find out more other methods at [https://docs.mongodb.com/manual/reference/method/js-collection/](https://docs.mongodb.com/manual/reference/method/js-collection/).
    In the next section, we will guide you through how to integrate CRUD operations
    with the server-side framework by using the MongoDB Driver. Let's get going.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！您已经成功完成了这些部分中的MongoDB CRUD操作。您可以在[https://docs.mongodb.com/manual/reference/method/js-collection/](https://docs.mongodb.com/manual/reference/method/js-collection/)找到更多其他方法。在下一节中，我们将指导您如何使用MongoDB驱动程序将CRUD操作与服务器端框架集成。让我们开始吧。
- en: Integrating MongoDB with Koa
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将MongoDB与Koa集成
- en: We have studied a handful of MongoDB queries for performing CRUD operations
    through the MongoDB Shell. Now we only need the MongoDB driver to help us to connect
    to the MongoDB server and perform the same CRUD operations that we did with the
    MongoDB Shell. We will install this driver in our app as a dependency in our server-side
    framework – Koa.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了一些通过MongoDB Shell执行CRUD操作的MongoDB查询。现在我们只需要MongoDB驱动程序来帮助我们连接到MongoDB服务器，并执行与MongoDB
    Shell相同的CRUD操作。我们将在我们的服务器端框架Koa中将此驱动程序安装为依赖项。
- en: Installing the MongoDB driver
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装MongoDB驱动程序
- en: The official MongoDB driver is `mongodb` for Node.js apps. It is a high-level
    API, built on top of the MongoDB Core driver, `mongodb-core`, a low-level API.
    The former is made for end users, while the latter is made for MongoDB library
    developers. `mongodb` contains abstractions and helpers that make MongoDB connections,
    CRUD operations, and authentication easy, while `mongodb-core` only contains the
    basic management of MongoDB topology connections, core CRUD operations, and authentication.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js应用程序的官方MongoDB驱动程序是`mongodb`。它是一个高级API，构建在MongoDB核心驱动程序`mongodb-core`之上，后者是一个低级API。前者是为最终用户而设计的，而后者是为MongoDB库开发人员而设计的。`mongodb`包含了使MongoDB连接、CRUD操作和身份验证变得容易的抽象和辅助功能，而`mongodb-core`只包含MongoDB拓扑连接的基本管理、核心CRUD操作和身份验证。
- en: 'For more information about these two packages, visit the following sites:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这两个软件包的更多信息，请访问以下网站：
- en: '[https://www.npmjs.com/package/mongodb](https://www.npmjs.com/package/mongodb)
    for the MongoDB driver'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.npmjs.com/package/mongodb](https://www.npmjs.com/package/mongodb)
    用于MongoDB驱动程序'
- en: '[https://www.npmjs.com/package/mongodb-core](https://www.npmjs.com/package/mongodb-core)
    for the MongoDB Core driver'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.npmjs.com/package/mongodb-core](https://www.npmjs.com/package/mongodb-core)
    用于MongoDB核心驱动程序'
- en: '[http://mongodb.github.io/node-mongodb-native/3.0/api/](http://mongodb.github.io/node-mongodb-native/3.0/api/)
    for the MongoDB driver API'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://mongodb.github.io/node-mongodb-native/3.0/api/](http://mongodb.github.io/node-mongodb-native/3.0/api/)
    用于MongoDB驱动程序API'
- en: 'We can install the MongoDB driver with npm:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用npm安装MongoDB驱动程序：
- en: '[PRE76]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Next, we will look into how we can use it with a quick example in the coming
    section.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在接下来的部分中通过一个快速示例来了解如何使用它。
- en: Creating a simple app with the MongoDB driver
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用MongoDB驱动程序创建一个简单的应用程序
- en: 'Let''s set up a simple app with the MongoDB driver to perform a simple connection
    check. In this test, we will use the Backpack build system that we covered in
    the previous chapter to run our test. So, let''s get it started with the following
    steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用MongoDB驱动程序设置一个简单的应用程序来执行简单的连接检查。在这个测试中，我们将使用我们在上一章中介绍的Backpack构建系统来运行我们的测试。所以，让我们按照以下步骤开始：
- en: 'Install the MongoDB driver as shown in the previous section, followed by Backpack
    and cross-env:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照前一节中所示的步骤安装MongoDB驱动程序，然后安装Backpack和cross-env：
- en: '[PRE77]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Create a `/src/` folder as the default entry directory and create an `index.js` file
    in it, and then import the MongoDB driver and the Assert module from Node.js as
    follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`/src/`文件夹作为默认入口目录，并在其中创建一个`index.js`文件，然后从Node.js中导入MongoDB驱动程序和Assert模块，如下所示：
- en: '[PRE78]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'In this step, we should also provide the MongoDB connection details: the MongoDB
    server default address, which is `mongodb://localhost:27017`, and the database
    that we want to connect to, which is `nuxt-app`.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们还应该提供MongoDB连接详细信息：MongoDB服务器的默认地址是`mongodb://localhost:27017`，我们要连接的数据库是`nuxt-app`。
- en: Note that Assert is a Node.js built-in module that comes with a set of assertion
    functions for unit testing your code, so we don't have to install this module.
    If you want to find out more about this module, please visit [https://nodejs.org/api/assert.html#assert_assert](https://nodejs.org/api/assert.html#assert_assert).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Assert是一个Node.js内置模块，其中包含一组用于单元测试代码的断言函数，因此我们不必安装此模块。如果您想了解更多关于此模块的信息，请访问[https://nodejs.org/api/assert.html#assert_assert](https://nodejs.org/api/assert.html#assert_assert)。
- en: 'Next, establish the connection to the database in the MongoDB server and use
    Assert to confirm the connection as follows:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在MongoDB服务器中建立与数据库的连接，并使用Assert来确认连接，如下所示：
- en: '[PRE79]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: In this example, we have used the `equal` method from the `assert` module to
    make sure that the `err` callback is `null`, before creating a database instance
    with the `client` callback. We should always close the connection with the `close`
    method whenever we finish a task.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了`assert`模块中的`equal`方法来确保在使用`client`回调创建数据库实例之前，`err`回调是`null`的。每当完成一个任务时，我们应该始终使用`close`方法关闭连接。
- en: 'If you run this connection test on your terminal with `npm run dev`, you should
    get the following output on your terminal:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在终端上使用`npm run dev`运行此连接测试，您应该在终端上获得以下输出：
- en: '[PRE80]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: You can find this simple example in `/chapter-9/mongo-driver/` in our GitHub
    repository.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-9/mongo-driver/`中找到这个简单的例子。
- en: Notice that we are connecting to MongoDB with any authentication because we
    have not secured our MongoDB yet. You will learn how to set up a new administrative
    user to secure your MongoDB in the last chapter of this book – [Chapter 18](a2720301-9e1c-4c28-8af8-39bd5c093fb9.xhtml), *Creating
    a Nuxt App with CMS and GraphQL*. To flatten your learning curve and to speed
    up the development process in the coming sections in this chapter, we will opt
    out of securing MongoDB. Now, let's take a deeper look at how we can configure
    the MongoDB driver in the next section.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们连接到MongoDB时没有进行任何身份验证，因为我们尚未保护我们的MongoDB。您将在本书的最后一章[第18章]“使用CMS和GraphQL创建Nuxt应用程序”中学习如何设置新的管理用户来保护您的MongoDB。为了降低学习曲线并加快本章后续部分的开发过程，我们将选择不保护MongoDB。现在，让我们更深入地了解如何配置MongoDB驱动程序。
- en: Configuring the MongoDB driver
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置MongoDB驱动程序
- en: 'From the code in the previous section, you can see that we should always import
    `MongoClient`, providing the MongoDB server URL, database name, and so on whenever
    performing a MongoDB CRUD task. This can be tedious and counter-productive. Let''s
    abstract the preceding MongoDB connection code into a class in the following steps:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 从前一节的代码中，您可以看到我们在执行MongoDB CRUD任务时应该始终导入`MongoClient`，提供MongoDB服务器URL、数据库名称等。这可能很繁琐且低效。让我们将前面的MongoDB连接代码抽象成一个类，以下是具体步骤：
- en: 'Abstract the database connection details into a file:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据库连接细节抽象到一个文件中：
- en: '[PRE81]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Create a `class` function to construct the database connection so that we don''t
    have to repeat this process whenever we perform the CRUD operations. We also construct
    an `objectId` property in our `class` function for storing the `ObjectId` method
    that we will need in order to parse the ID data coming from the client side so
    that this ID data will become an object from a string:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`class`函数来构建数据库连接，这样我们在执行CRUD操作时就不必重复这个过程。我们还在`class`函数中构建了一个`objectId`属性，用于存储我们需要的`ObjectId`方法，以便解析来自客户端的ID数据，使这个ID数据从字符串变为对象：
- en: '[PRE82]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Import the `class` and instantiate it with the `new` statement as follows:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`class`并使用`new`语句进行实例化，如下所示：
- en: '[PRE83]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'For example, we can import it in our API routes where we need to connect to
    the MongoDB database to perform CRUD operations as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以在需要连接到MongoDB数据库执行CRUD操作的API路由中导入它，如下所示：
- en: '[PRE84]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Before creating the CRUD operations with the MongoDB driver and our server-side
    framework, Koa, we should understand `ObjectId` and the `ObjectId` method. Let's
    get into it.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用MongoDB驱动程序和我们的服务器端框架Koa创建CRUD操作之前，我们应该了解`ObjectId`和`ObjectId`方法。让我们开始吧。
- en: Understanding ObjectId and the ObjectId method
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解ObjectId和ObjectId方法
- en: '`ObjectId` is a fast-generated and probably unique value that MongoDB uses
    as a primary key in a collection. It consists of 12 bytes; a timestamp takes the
    first 4 bytes to record the time when the `ObjectId` value is created. It is stored
    in a unique `_id` field for each document in a collection. This `_id` field will
    be automatically generated if it is not declared when a document is injected.
    On the other hand, `ObjectId(<hexadecimal>)` is a MongoDB method that we can use
    to return a new `ObjectId` value, and to parse an `ObjectId` value from a string
    to become an object. Here''s an example:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`ObjectId`是MongoDB在集合中用作主键的快速生成且可能唯一的值。它由12个字节组成；时间戳占据前4个字节，记录了`ObjectId`值创建时的时间。它存储在集合中每个文档的唯一`_id`字段中。如果在注入文档时没有声明，此`_id`字段将自动生成。另一方面，`ObjectId(<十六进制>)`是我们可以使用的MongoDB方法，用于返回一个新的`ObjectId`值，并将`ObjectId`值从字符串解析为对象。这里有一个例子：'
- en: '[PRE85]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'In the preceding pseudocode, you can see that we use the `getTimestamp` method
    from the object created by the `ObjectId` method to obtain the timestamp from
    the `ObjectId` value. Here''s an example:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的伪代码中，您可以看到我们使用`ObjectId`方法创建的对象中的`getTimestamp`方法来从`ObjectId`值中获取时间戳。这里有一个例子：
- en: '[PRE86]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'For more information about `ObjectId` and the `ObjectId` method, check out
    the following links:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`ObjectId`和`ObjectId`方法的更多信息，请查看以下链接：
- en: '[https://docs.mongodb.com/manual/reference/bson-types/#objectid](https://docs.mongodb.com/manual/reference/bson-types/#objectid)
    for `ObjectId`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.mongodb.com/manual/reference/bson-types/#objectid](https://docs.mongodb.com/manual/reference/bson-types/#objectid)
    用于`ObjectId`'
- en: '[https://docs.mongodb.com/manual/reference/method/ObjectId/](https://docs.mongodb.com/manual/reference/method/ObjectId/)
    for `ObjectId()`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.mongodb.com/manual/reference/method/ObjectId/](https://docs.mongodb.com/manual/reference/method/ObjectId/)
    用于`ObjectId()`'
- en: Now, let's write some CRUD operations with the MongoDB driver in the coming
    sections. Firstly, we will write the operation of injecting a document.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在接下来的部分中使用MongoDB驱动程序编写一些CRUD操作。首先，我们将编写注入文档的操作。
- en: Injecting one document
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注入一个文档
- en: 'Before we start, we should look at the code structure that we need for every
    route that we will be creating:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们应该看一下我们将要创建的每个路由所需的代码结构：
- en: '[PRE87]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Let''s discuss the structure:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下结构：
- en: '**Catching and throwing errors**:When we use the `async/await` statement instead
    of the `Promise` object for an asynchronous operation, we must always wrap them
    in `try`/`catch` blocks to handle errors:'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捕获和抛出错误**：当我们使用`async/await`语句而不是`Promise`对象进行异步操作时，我们必须始终将它们包装在`try`/`catch`块中以处理错误。'
- en: '[PRE88]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '**Connecting to MongoDB databases and collections**:Before performing any CRUD
    operation, we must establish the connection and connect to the specific collection
    that we want to manipulate. In our case, the collection is `users`:'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接到MongoDB数据库和集合**：在执行任何CRUD操作之前，我们必须建立连接并连接到我们想要操作的特定集合。在我们的情况下，集合是`users`：'
- en: '[PRE89]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '**Performing the CRUD operation**:This is where we use the MongoDB API methods
    to read, inject, update, and delete users:'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行CRUD操作：这是我们使用MongoDB API方法读取、注入、更新和删除用户的地方：
- en: '[PRE90]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '**Closing the MongoDB connection**:We must make sure to close the connection
    after the CRUD operation:'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关闭MongoDB连接**：在执行CRUD操作后，我们必须确保关闭连接：'
- en: '[PRE91]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Now let''s use the preceding code structure to inject new users in the following
    steps:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用前面的代码结构来在以下步骤中注入新用户：
- en: 'Create a route with the `post` method to inject a new user document:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个使用“post”方法来注入新用户文档的路由：
- en: '[PRE92]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Inside the `post` route, perform checks on the keys and values we receive from
    the client side before performing a CRUD operation with MongoDB:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“post”路由内，在执行与MongoDB的CRUD操作之前，对从客户端接收到的键和值进行检查：
- en: '[PRE93]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Before allowing a new document to be injected into the `user` collection, we
    want to make sure the `slug` value does not exist yet. To do that, we need to
    use the `findOne` API method with the `slug` key. If the result is positive, that
    means the `slug` value has been taken by other user documents, so we throw an
    error to the client:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在允许将新文档注入到“用户”集合之前，我们希望确保“slug”值尚不存在。为此，我们需要使用带有“slug”键的“findOne”API方法。如果结果是积极的，那意味着“slug”值已被其他用户文档占用，因此我们向客户端抛出错误：
- en: '[PRE94]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'If the `slug` is unique, then we use the `insertOne` API method to inject a
    new document with the provided data:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果“slug”是唯一的，那么我们使用“insertOne”API方法来注入具有提供的数据的新文档：
- en: '[PRE95]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: After injecting the document, the next thing we will need is to fetch and view
    the documents we have injected, which we'll do in the next section.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在注入文档之后，我们需要做的下一件事是获取和查看我们已经注入的文档，这将在下一节中进行。
- en: Fetching all documents
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取所有文档
- en: 'After adding the users to the `users` collection, we can retrieve all or just
    one of them through the routes that we created in [Chapter 8](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml),
    *Adding a Server-Side Framework*. Now we just have to refactor them using the
    same code structure as in the previous section for fetching real data from the
    database:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在将用户添加到“users”集合后，我们可以通过在[第8章](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml)中创建的路由中检索所有或其中一个用户。现在我们只需要重构它们，使用与上一节中获取数据库中真实数据相同的代码结构：
- en: 'Refactor the route for listing all user documents with the `get` method:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构使用“get”方法列出所有用户文档的路由：
- en: '[PRE96]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Inside the `get` router, fetch all documents from the `user` collection by
    using the `find` API method:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“get”路由内，使用“find”API方法从“user”集合中获取所有文档：
- en: '[PRE97]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'If you want to exclude the fields from the query result, use the `projection`
    key and a value of `0` for the field you don''t want to show in the result. For
    example, if you don''t want the `_id` field on each document in the result, do
    this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要从查询结果中排除字段，请使用“projection”键和值“0”来表示不想在结果中显示的字段。例如，如果不希望在结果中的每个文档中看到“_id”字段，可以这样做：
- en: '[PRE98]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Refactor the route for fetching a user document with the `get` method:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构使用“get”方法获取用户文档的路由：
- en: '[PRE99]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Fetch a single document by using the `findOne` method with `_id`. We must parse
    the `id` string with the `ObjectId` method, which we have a copy of in our `constructor` function
    in the `class` function as `objectId`:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“findOne”方法通过“_id”获取单个文档。我们必须使用“ObjectId”方法解析“id”字符串，我们在“constructor”函数中的“class”函数中有一个副本，名为“objectId”：
- en: '[PRE100]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: The `mongo.objectId(id)` method parses the `id` string into an `ObjectID` object,
    and then we can use it to query the document from the collection. Now that we
    can fetch the documents we have created, the next thing we need to do is update
    them. Let's get to it in the next section.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: “mongo.objectId(id)”方法将“id”字符串解析为“ObjectID”对象，然后我们可以使用它来从集合中查询文档。现在我们可以获取我们创建的文档，接下来需要做的是更新它们。让我们在下一节中进行。
- en: Updating one document
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新一个文档
- en: 'After adding the users to the `users` collection, we also can update them using
    the same code structure as in the previous section in the following steps:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在将用户添加到“users”集合后，我们还可以在以下步骤中使用与上一节中相同的代码结构来更新它们：
- en: 'Create a route with the `put` method for updating the existing user document
    as follows:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`put`方法的路由，用于更新现有用户文档如下：
- en: '[PRE101]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Before updating a document, we want to make sure the `slug` value is unique.
    So, inside the `put` route, we search for a match with the `findOne` API with `$ne` to
    exclude the document that we are updating. If there is no match, then we go on
    updating the document with the `updateOne` API method:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更新文档之前，我们希望确保`slug`值是唯一的。因此，在`put`路由内，我们使用`findOne` API和`$ne`来排除我们正在更新的文档。如果没有匹配项，那么我们将使用`updateOne`
    API方法来更新文档：
- en: '[PRE102]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'We use three operators in this CRUD operation: the `$set` operator, the `$currentDate` operator,
    and the `$ne` selector. These are some of the update operators and query selectors
    that you will frequently use for updating documents:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个CRUD操作中使用了三个操作符：`$set`操作符，`$currentDate`操作符和`$ne`选择器。这些是您经常用于更新文档的一些更新操作符和查询选择器：
- en: '**The update operators**:The `$set` operator is used to replace the value of
    a field with the new specified value in the following format:'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新操作符**：`$set`操作符用于以以下格式替换字段的值为新指定的值：'
- en: '[PRE103]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'The `$currentDate` operator is used to set the current date to a specified
    field, either as a BSON Date type (the default) or a BSON Timestamp type, in the
    following format:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`$currentDate`操作符用于将当前日期设置为指定字段，可以是BSON日期类型（默认）或BSON时间戳类型，格式如下：'
- en: '[PRE104]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: For more information about these two and other update operators, please visit
    [https://docs.mongodb.com/manual/reference/operator/update/](https://docs.mongodb.com/manual/reference/operator/update/).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这两个和其他更新操作符的更多信息，请访问[https://docs.mongodb.com/manual/reference/operator/update/](https://docs.mongodb.com/manual/reference/operator/update/)。
- en: '**The query selectors**:The `$ne` selector is used to select documents where
    the value of the field is not equal to the specified value, including those do
    not contain the field. Here''s an example:'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询选择器**：`$ne`选择器用于选择字段值不等于指定值的文档，包括那些不包含该字段的文档。以下是一个例子：'
- en: '[PRE105]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: This query will select all documents in the `user` collection where the `age`
    field value does not equal `18`, including those documents that do not contain
    the `age` field.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询将选择`user`集合中所有`age`字段值不等于`18`的文档，包括那些不包含`age`字段的文档。
- en: For more information about this and other query selectors, please visit [https://docs.mongodb.com/manual/reference/operator/query/](https://docs.mongodb.com/manual/reference/operator/query/).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此及其他查询选择器的更多信息，请访问[https://docs.mongodb.com/manual/reference/operator/query/](https://docs.mongodb.com/manual/reference/operator/query/)。
- en: Now, let's take a look at how we can delete the document we have created in
    the next section.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在下一节中删除我们创建的文档。
- en: Deleting one document
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除一个文档
- en: 'Lastly, we also will be using the same code structure as in the previous section
    to delete existing users from the `users` collection in the following steps:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还将使用与上一节相同的代码结构来从`users`集合中删除现有用户，步骤如下：
- en: 'Create a route with the `del` method to delete an existing user document:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`del`方法的路由来删除现有用户文档：
- en: '[PRE106]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Before deleting the document with the `deleteOne` API method, inside the `del`
    route, as always, we use the `findOne` API method to find this document to make
    sure we have it in the `user` collection first:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`del`路由内使用`deleteOne` API方法删除文档之前，我们通常会使用`findOne` API方法来查找`user`集合中的文档，以确保我们首先拥有它：
- en: '[PRE107]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Well done! You have managed to get through writing MongoDB CRUD operations and
    integrating them into the API (Koa). The final part of this chapter involves integrating
    these operations with Nuxt pages. Let's get to this in the next section.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！您已成功编写了MongoDB CRUD操作并将其集成到API（Koa）中。本章的最后一部分涉及将这些操作与Nuxt页面集成。让我们在下一节中进行。
- en: Integrating with Nuxt Pages
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Nuxt页面集成
- en: 'We have the server side ready, and now we need a user interface on the client
    side so we can send and fetch data. We will create three new pages in the `/pages/users/`
    directory. This is our structure:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好了服务器端，现在我们需要在客户端上创建用户界面，以便我们可以发送和获取数据。我们将在`/pages/users/`目录中创建三个新页面。这是我们的结构：
- en: '[PRE108]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: As soon as we have the structure in place, we are ready to create pages and
    write the CRUD tasks from the Nuxt side (the client) in the following sections.
    Let's start with the *create* CRUD task in the next section.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了结构，我们就准备好在接下来的部分从Nuxt端（客户端）创建页面并编写CRUD任务。让我们从下一部分的*创建* CRUD任务开始。
- en: Creating an add page for adding new users
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个添加新用户的添加页面
- en: 'We will create this page to communicate with the server-side `POST` route,
    `/api/user/`, to add a new user in the following steps:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤创建此页面与服务器端的`POST`路由`/api/user/`进行通信，以添加新用户：
- en: 'Create a form to collect the new user data in the `<template>` block as follows:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`块中创建一个表单来收集新用户数据，如下所示：
- en: '[PRE109]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Create an `add` method to send the data to the server and a `cancel` method
    to cancel the form in the `<script>` block as follows:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<script>`块中创建一个`add`方法来将数据发送到服务器，并创建一个`cancel`方法来取消表单，如下所示：
- en: '[PRE110]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: With these two steps, we have established the *create* CRUD task successfully
    on the client side (Nuxt) with the server side (API). So now you add new users
    to the database from the client side at `localhost:3000/users/add` by using the
    form you have just created to collect the user data and send them to the API's `POST`
    route at `localhost:3000/api/user/`. After being able to add new users, we should
    move on to the *update* CRUD task on the client side. Let's get to it.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这两个步骤，我们已经成功在客户端（Nuxt）与服务器端（API）上建立了*创建* CRUD任务。现在，您可以使用刚刚创建的表单从客户端在`localhost:3000/users/add`向数据库添加新用户，并将它们发送到API的`POST`路由`localhost:3000/api/user/`。在能够添加新用户之后，我们应该继续在客户端进行*更新*
    CRUD任务。让我们开始吧。
- en: Creating an update page for updating existing users
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为更新现有用户创建一个更新页面
- en: 'The update page is basically quite similar to the add page. This page will
    communicate with the server-side `PUT` route, `/api/user/`, to update the existing
    user with the following steps:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 更新页面基本上与添加页面非常相似。此页面将与服务器端的`PUT`路由`/api/user/`通信，以更新现有用户，步骤如下：
- en: 'Create a form to display the existing data and to collect the new data in the
    `<template>` block. The difference in the update page is the method that we bind
    to the `<form>` element:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`块中创建一个表单来显示现有数据并收集新数据。更新页面的区别在于我们绑定到`<form>`元素的方法：
- en: '[PRE111]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Create an `update` method to send the data to the server in the `<script>`
    block. We will use the `asyncData` method to fetch the existing data as follows:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<script>`块中创建一个`update`方法来将数据发送到服务器。我们将使用`asyncData`方法来获取现有数据，如下所示：
- en: '[PRE112]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Again, we have established the update CRUD task successfully in these two steps
    on the client side (Nuxt) with the server side (API). So now you can update the
    existing users in the database from the client side at `localhost:3000/users/update`
    by using the form to collect the user data and send them to the API's `PUT` route
    at `localhost:3000/api/user/`. After being able to update the user, we should
    now move on to the *delete* CRUD task on the client side. Let's get to it.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在客户端（Nuxt）与服务器端（API）上成功建立了更新CRUD任务的这两个步骤。现在，您可以使用表单从客户端在`localhost:3000/users/update`更新数据库中的现有用户，并将它们发送到API的`PUT`路由`localhost:3000/api/user/`。在能够更新用户之后，我们现在应该继续在客户端进行*删除*
    CRUD任务。让我们开始吧。
- en: Creating a delete page for deleting existing users
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个删除页面来删除现有用户
- en: 'This page will communicate with the server-side `DELETE` route, `/api/user/`,
    to delete the existing user:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面将与服务器端的`DELETE`路由`/api/user/`通信，以删除现有用户：
- en: 'Create a `<button>` element that we can use to delete the document in the `<template>`
    block. We don''t need a form to send the data because we can collect the data
    (which is only the document `_id` data) in the `remove` method. We only need the
    button to trigger this method as follows:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`块中创建一个`<button>`元素，我们可以使用它来删除文档。我们不需要一个表单来发送数据，因为我们可以在`remove`方法中收集数据（仅为文档`_id`数据）。我们只需要按钮来触发这个方法，如下所示：
- en: '[PRE113]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Create the `remove` method to send the data to the server as we explained in
    the `<script>` block. But first, we will need to use the `asyncData` method to
    fetch the existing data:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`remove`方法，将数据发送到服务器，就像我们在`<script>`块中解释的那样。但首先，我们需要使用`asyncData`方法来获取现有数据。
- en: '[PRE114]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Finally, we have established the *delete* CRUD task successfully in these two
    steps on the client side (Nuxt) with the server side (API). Now you can remove
    the existing users from the database from the client side at `localhost:3000/users/delete`
    by sending the user data, which is an ID only, and send it to the API's `DELETE`
    route at `localhost:3000/api/user/`. So if you launch the app with `npm run dev`,
    you should see it running at `localhost:3000`.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经成功在客户端（Nuxt）和服务器端（API）上完成了*删除* CRUD 任务的两个步骤。现在，您可以通过在`localhost:3000/users/delete`发送用户数据（仅为ID），并将其发送到API的`DELETE`路由`localhost:3000/api/user/`，从客户端删除数据库中的现有用户。因此，如果您使用`npm
    run dev`启动应用程序，您应该可以在`localhost:3000`上看到它运行。
- en: 'Navigate to the following routes to add, update, read, and delete users:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到以下路由以添加、更新、读取和删除用户：
- en: '`localhost:3000/users` for reading/listing all users'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`localhost:3000/users` 用于读取/列出所有用户'
- en: '`localhost:3000/users/add` for injecting a new user'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`localhost:3000/users/add` 用于添加新用户'
- en: '`localhost:3000/users/update/<id>` for updating an existing user by their ID'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`localhost:3000/users/update/<id>` 用于按ID更新现有用户'
- en: '`localhost:3000/users/delete/<id>` for deleting an existing user by their ID'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`localhost:3000/users/delete/<id>` 用于按ID删除现有用户'
- en: Well done! You have finally managed to get through the milestones we set in
    this chapter. MongoDB can be an overwhelming subject to pick up as a beginner,
    but if you have followed through the guides and milestones we set in this chapter,
    you can create a pretty decent API with little effort. Use the links we provided
    when you need to venture beyond the CRUD operations that we have explained in
    this book. Let's now summarize what you have learned in this chapter.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！您终于成功完成了本章设定的里程碑。对于初学者来说，MongoDB可能是一个令人难以置信的主题，但是如果您按照本章中设定的指南和里程碑进行操作，您可以轻松创建一个相当不错的API。当您需要超越我们在本书中解释的CRUD操作时，请使用我们提供的链接。现在让我们总结一下您在本章学到的内容。
- en: You can find the code we have created for this chapter in `/chapter-9/nuxt-universal/koa-mongodb/axios/`
    in our GitHub repository.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-9/nuxt-universal/koa-mongodb/axios/`中找到我们为本章创建的代码。
- en: Summary
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned how to install MongoDB on your local machine,
    and you have used some basic MongoDB queries for CRUD operations on the MongoDB
    Shell. You also learned how to install and use the MongoDB driver to connect to
    MongoDB from the server-side framework, and you have written the code to perform
    CRUD operations in the Koa environment. Finally, you have created the front pages
    from the client side, Nuxt, for adding new users to the MongoDB database, and
    for updating and deleting existing users by communicating with the API that you
    have developed with Koa.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学会了如何在本地计算机上安装MongoDB，并在MongoDB Shell上使用一些基本的MongoDB查询进行CRUD操作。您还学会了如何安装和使用MongoDB驱动程序来从服务器端框架连接到MongoDB，并编写了在Koa环境中执行CRUD操作的代码。最后，您已经从客户端Nuxt创建了前端页面，用于向MongoDB数据库添加新用户，并通过与使用Koa开发的API进行通信来更新和删除现有用户。
- en: In the next chapter, we will explore the Vuex store and use it in Nuxt apps.
    You will learn about the Vuex architecture before installing it and writing a
    simple Vuex store in a Vue app. You will also learn about the Vuex core concepts,
    including the state, getters, actions, and modules, before writing a Vuex store
    in a Nuxt app with these concepts. We will guide you through them, so stay tuned.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索Vuex存储并在Nuxt应用程序中使用它。在安装和编写Vue应用程序中的简单Vuex存储之前，您将了解Vuex架构。您还将学习有关Vuex核心概念的知识，包括状态、获取器、操作和模块，然后使用这些概念在Nuxt应用程序中编写Vuex存储。我们将引导您完成这些内容，敬请关注。
