- en: Adding UI Frameworks
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 添加UI框架
- en: In this chapter, we will guide you through the process of installing a selection
    of frontend UI frameworks in your Nuxt project that will style your app templates.
    The frameworks we have selected in this book are Foundation for designing your
    layouts, Motion UI for creating animations, Less as the style sheet language,
    jQuery UI for adding animations to your DOM, AOS for animating your contents on
    scrolling, and Swiper for creating carousel images. These frameworks can speed
    up frontend development in your Nuxt project, making it fun and easy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将指导您安装一些前端UI框架到您的Nuxt项目中，这些框架将为您的应用模板添加样式。本书中我们选择的框架有Foundation用于设计布局，Motion
    UI用于创建动画，Less作为样式表语言，jQuery UI用于为DOM添加动画，AOS用于在滚动时为内容添加动画，以及Swiper用于创建轮播图像。这些框架可以加快Nuxt项目的前端开发速度，使其变得有趣且简单。
- en: 'The topics we will be covering in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题如下：
- en: Adding Foundation and Motion UI
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加基础和Motion UI
- en: Adding Less (Leaner Style Sheets)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Less（更轻量的样式表）
- en: Adding jQuery UI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加jQuery UI
- en: Adding AOS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加AOS
- en: Adding Swiper
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Swiper
- en: Adding Foundation and Motion UI
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加基础和Motion UI
- en: 'Foundation is a frontend framework for creating responsive sites. It is shipped
    with HTML and CSS templates for grid layouts, typography, buttons, tables, navigation, forms,
    and much more, as well as optional JavaScript plugins. It works with any device,
    mobile or desktop, and is an alternative to Bootstrap ([https://getbootstrap.com/](https://getbootstrap.com/)),
    another popular frontend framework. We focus on Foundation in this book. So, just
    as in the previous chapter, we have a list of suggested UI frameworks that you
    can choose from for your app when using the `create-nuxt-app` scaffolding to install
    the skeleton of your Nuxt project. We should choose `None` so that we can add Foundation
    as the UI framework:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation是一个用于创建响应式网站的前端框架。它提供了用于网格布局、排版、按钮、表格、导航、表单等的HTML和CSS模板，以及可选的JavaScript插件。它适用于任何设备，移动或桌面，并且是Bootstrap（https://getbootstrap.com/）的另一种流行的前端框架。我们在本书中专注于Foundation。因此，就像在上一章中一样，当使用`create-nuxt-app`脚手架安装Nuxt项目的骨架时，我们有一系列建议的UI框架供您选择。我们应该选择`None`，以便我们可以添加Foundation作为UI框架：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once you have answered the questions in the installation process, navigate
    to your project directory, and then you can install and integrate Foundation into
    your Nuxt app. The easiest way is to use **content delivery networks** (**CDNs**),
    but is not encouraged. The simplest reason is that the CDN link won''t work if
    you are developing offline. Also, you will lose control of the source files because
    they are handled by large web companies, such as Google, Microsoft, and Amazon. However,
    if you want to use a CDN in your Nuxt project for a quick start, simply add the
    CDN source to the `head` option in the Nuxt config file as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您回答了安装过程中的问题，导航到您的项目目录，然后您可以安装并集成Foundation到您的Nuxt应用程序中。最简单的方法是使用**内容交付网络**（**CDN**），但不鼓励这样做。最简单的原因是，如果您离线开发，CDN链接将无法工作。此外，您将失去对源文件的控制，因为它们由大型网络公司（如Google、Microsoft和Amazon）处理。但是，如果您想在Nuxt项目中使用CDN快速启动，只需将CDN源添加到Nuxt配置文件中的`head`选项中，如下所示：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can find the latest CDN links from the official Foundation site at [https://get.foundation/sites/docs/installation.html#cdn-links](https://get.foundation/sites/docs/installation.html#cdn-links).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方Foundation网站上找到最新的CDN链接：https://get.foundation/sites/docs/installation.html#cdn-links。
- en: 'That''s easy, isn''t it? But it is not ideal if you want to host the source
    files locally. Let''s find out the proper way of integrating with Nuxt in the
    following steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易，不是吗？但如果您想要在本地托管源文件，这并不理想。让我们在以下步骤中找出与Nuxt集成的正确方法：
- en: 'Install Foundation and its dependencies (jQuery and what-input) via npm on
    your terminal:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm在终端上安装Foundation及其依赖项（jQuery和what-input）：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the Foundation CSS source from the `/node_modules/` folder to the `css`
    option in the Nuxt config file as follows:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`/node_modules/`文件夹中的Foundation CSS源添加到Nuxt配置文件中的`css`选项中，如下所示：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a `foundation.client.js`  file in the `/plugins/` directory with this
    code:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/plugins/`目录中创建一个`foundation.client.js`文件，并添加以下代码：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This plugin will make sure that Foundation runs on the client side only. We
    will cover plugins in more detail in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml),
    *Writing Plugins and Modules*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件将确保Foundation仅在客户端运行。我们将在[第6章](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml)中更详细地介绍插件和模块。
- en: 'Register the preceding Foundation plugin in the `plugins` option in the Nuxt
    config file as follows:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件的`plugins`选项中注册上述Foundation插件，如下所示：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then you can use the JavaScript plugins from Foundationin any page where you
    need them, for example:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以在需要的任何页面中使用Foundation的JavaScript插件，例如：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That's it. You have installed and integrated it successfully in your Nuxt project.
    Now, let's explore how you can create a grid-structure layout and website navigation
    with Foundation to accelerate frontend web development in the next section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。您已经成功在您的Nuxt项目中安装并成功集成了它。现在，让我们在下一节中探讨如何使用Foundation创建网格结构布局和网站导航，以加速前端网页开发。
- en: Creating grid layouts and website navigations with Foundation
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Foundation创建网格布局和网站导航
- en: 'The very first thing we should look at is the grid system from Foundation,
    which is called XY Grid. In web development, a grid system is a system that structures
    our HTML elements into a grid-based layout. Foundation comes with CSS classes
    that we can use to structure our HTML elements easily and effortlessly, for example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该首先看一下Foundation的网格系统，它被称为XY Grid。在网页开发中，网格系统是一种将我们的HTML元素结构化为基于网格的布局的系统。Foundation带有我们可以轻松使用的CSS类来结构化我们的HTML元素，例如：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will responsively structure our elements into two columns on large screens
    (for example, iPad, Windows Surface), but a single column on small screens (for
    example, iPhone). Let''s create a responsive layout in the default `index.vue` page
    and website navigation in the `default.vue` layout generated by the `create-nuxt-app` scaffolding
    tool in the following steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在大屏幕上（例如iPad，Windows Surface）将我们的元素响应地结构化为两列，但在小屏幕上（例如iPhone）将其结构化为单列。让我们在默认的`index.vue`页面和由`create-nuxt-app`脚手架工具生成的`default.vue`布局中创建一个响应式布局和网站导航：
- en: Delete the `Logo.vue` component in the `/components/` directory.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`/components/`目录中的`Logo.vue`组件。
- en: 'Remove the `<style>` and `<script>` blocks in the `index.vue` page in the `/pages/` directory,
    but replace the `<template>` block with the following elements and grid classes:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`/pages/`目录中`index.vue`页面中的`<style>`和`<script>`块，但用以下元素和网格类替换`<template>`块：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this template, the images are structured side by side when the page is loaded
    on a large screen. But they will responsively stack upon each other when the page
    is resized to, or loaded on, a small screen.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模板中，当页面在大屏幕上加载时，图像会并排结构。但当页面调整大小或在小屏幕上加载时，它们会自适应地堆叠在一起。
- en: 'Remove the `<style>` and `<script>` blocks in the `default.vue` layout in the
    `/layouts/` directory, but replace the `<template>` block with the following navigation:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`/layouts/`目录中`default.vue`布局中的`<style>`和`<script>`块，但用以下导航替换`<template>`块：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this new layout, we have just created a basic website horizontal menu with
    a `<ul>` element filled with three `<li>` elements and `<nuxt-link>` components
    by adding a `.menu` class to the `<ul>` element. We also have aligned the menu
    items to center by just adding `.align-center` right after the `.menu` class.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新布局中，我们只是创建了一个基本的网站水平菜单，其中包含一个填充有三个`<li>`元素和`<nuxt-link>`组件的`<ul>`元素，并通过在`<ul>`元素后添加`.align-center`类将菜单项对齐到中心。
- en: That's it. You now have a responsive layout with navigation that works beautifully
    on any device. You can see how quickly you can get it done without writing any
    CSS styles yourself. It's sweet, isn't it? But what about JavaScript? Foundation
    comes with some JavaScript utilities and plugins that we can make use of too.
    Let's find out in the next section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在您拥有一个可以在任何设备上完美运行的具有响应式布局和导航的网站。您可以看到，您可以在不编写任何CSS样式的情况下快速完成它。很棒，不是吗？但JavaScript呢？Foundation还附带了一些JavaScript实用程序和插件，我们也可以利用它们。让我们在下一节中找出。
- en: For more information about the XY gridand navigation in Foundation, please visit
    [https://get.foundation/sites/docs/xy-grid.html](https://get.foundation/sites/docs/xy-grid.html).
    and [https://get.foundation/sites/docs/menu.html](https://get.foundation/sites/docs/menu.html).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Foundation中XY网格和导航的更多信息，请访问[https://get.foundation/sites/docs/xy-grid.html](https://get.foundation/sites/docs/xy-grid.html)和[https://get.foundation/sites/docs/menu.html](https://get.foundation/sites/docs/menu.html)。
- en: Using JavaScript utilities and plugins from Foundation
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Foundation的JavaScript实用程序和插件
- en: 'Foundation comes with many useful JavaScript utilities, such as MediaQuery.
    This MediaQuery utility can be used to get the screen size breakpoints (small,
    medium, large, extra-large) for creating responsive layouts in your app. Let''s
    find out how you can make use of it in the following steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation附带许多有用的JavaScript实用程序，例如MediaQuery。此MediaQuery实用程序可用于获取应用程序中创建响应式布局所需的屏幕大小断点（小，中，大，超大）。让我们在以下步骤中找出如何使用它：
- en: 'Create a `utils.js` file for keeping your custom global utilities in the `/plugins/` directory
    and add the following code:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`utils.js`文件，将您的自定义全局实用程序保存在`/plugins/`目录中，并添加以下代码：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this code, we have created a global plugin (which is a JavaScript function)
    that will get the current screen size from the `current` property in the MediaQuery
    utility and log the output whenever the browser's screen size is changed. A resize
    event listener is added to the window object by using the JavaScript `EventTarget`
    method, `addEventListener`. This plugin is then injected into the Vue instance
    by naming it `$getCurrentScreenSize`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们创建了一个全局插件（即JavaScript函数），它将从MediaQuery实用程序的`current`属性中获取当前屏幕大小，并在浏览器的屏幕大小更改时记录输出。通过使用JavaScript的`EventTarget`方法`addEventListener`，将调整大小事件监听器添加到window对象中。然后通过将其命名为`$getCurrentScreenSize`将此插件注入到Vue实例中。
- en: 'Call this `$getCurrentScreenSize` function in the default layout as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在默认布局中调用`$getCurrentScreenSize`函数如下：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So, if you open the console tab on your Chrome browser, you should see the
    log of the current screen size when you are resizing your screen, such as `Current
    screen size: medium`.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您在Chrome浏览器上打开控制台选项卡，当您调整屏幕大小时，您应该会看到当前屏幕大小的日志，例如`当前屏幕大小：中等`。
- en: For more information about Foundation MediaQuery and other utilities, please
    visit [https://get.foundation/sites/docs/javascript-utilities.html#mediaquery](https://get.foundation/sites/docs/javascript-utilities.html#mediaquery)
    and [https://get.foundation/sites/docs/javascript-utilities.html](https://get.foundation/sites/docs/javascript-utilities.html).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Foundation MediaQuery和其他实用程序的更多信息，请访问[https://get.foundation/sites/docs/javascript-utilities.html#mediaquery](https://get.foundation/sites/docs/javascript-utilities.html#mediaquery)和[https://get.foundation/sites/docs/javascript-utilities.html](https://get.foundation/sites/docs/javascript-utilities.html)。
- en: For more information about the JavaScript EventTarget and addEventListener,
    please visit [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) and [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有关JavaScript EventTarget和addEventListener的更多信息，请访问[https://developer.mozilla.org/en-US/docs/Web/API/EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget)和[https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)。
- en: 'Apart from the JavaScript utilities, there are many JavaScript plugins that
    come with Foundation, such as Dropdown Menu for creating dropdown navigation,
    Abide for form validation, and Tooltip for displaying extended information on
    an element in your HTML page. These plugins can be activated by simply adding
    their class names to your elements. Furthermore, you can modify and interact with
    them by writing JavaScript just like we have shown you in this section. Let''s
    take a look at the Abide plugin in the following steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了JavaScript实用程序之外，Foundation还提供了许多JavaScript插件，例如Dropdown Menu用于创建下拉导航，Abide用于表单验证，Tooltip用于在HTML页面中显示元素的扩展信息。这些插件可以通过简单地将它们的类名添加到您的元素中来激活。此外，您可以通过编写JavaScript来修改和与它们交互，就像我们在本节中向您展示的那样。让我们在以下步骤中看一下Abide插件：
- en: 'Create a `form.vue` page in the `/pages/` directory with the following HTML
    elements to create a form containing two blocks of `.grid-container` elements:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含提交按钮和重置按钮的最后一个`<div>`块，如下所示：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this form, the first grid container contains the general error message while
    the second container will contain the form input fields. We activated the Abide
    plugin just by adding `data-abide` to the form element. We also added a `novalidate`
    attribute to the form element to prevent the native validation from the browser
    so that we can pass the job to the Abide plugin.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个表单中，第一个网格容器包含一般错误消息，而第二个容器将包含表单输入字段。我们通过向表单元素添加`data-abide`来激活Abide插件。我们还向表单元素添加了一个`novalidate`属性，以防止浏览器的本机验证，这样我们就可以将工作交给Abide插件。
- en: 'Create a `<div>` block with the `.cell` and `.small-12` classes containing
    an email `<input>` element and two default error messages in `<span>` elements
    as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`.cell`和`.small-12`类的`<div>`块，其中包含一个电子邮件`<input>`元素和两个默认错误消息`<span>`元素，如下所示：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this cell block, there are three custom attributes that come from Foundation:
    the `pattern` attribute is used to validate the email string, the `data-form-error-on`
    attribute is used to display the input error responding to the `required` and
    `pattern` attributes, and the `placeholder` attribute is used to display an input
    hint in the input field. Note that the `required` attribute is an HTML5 default
    attribute.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建两个包含两个`<input>`元素的`<div>`块，用于收集密码，其中第二个密码用于通过在第二个密码`<input>`元素中添加`data-equalto`属性来匹配第一个密码，如下所示：
- en: 'Create two `<div>` blocks containing two `<input>` elements for collecting passwords
    in which the second password is used to match the first password by adding a `data-equalto`
    attribute from Foundation to the second password `<input>` element as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/pages/`目录中创建一个`form.vue`页面，其中包含以下HTML元素，以创建包含两个`.grid-container`元素的表单：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the last `<div>` block containing a submit button and reset button as
    follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个单元格块中，有三个来自Foundation的自定义属性：`pattern`属性用于验证电子邮件字符串，`data-form-error-on`属性用于显示与`required`和`pattern`属性相应的输入错误，`placeholder`属性用于在输入字段中显示输入提示。请注意，`required`属性是HTML5的默认属性。
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Initiate the Foundation JavaScript plugin in the `<script>` block when the
    Vue component is mounted:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue组件挂载时，在`<script>`块中初始化Foundation JavaScript插件：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: That's it. Without writing any JavaScript, you have created a beautiful frontend
    form validation by just adding HTML elements with classes and attributes. That
    is extremely useful!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。不需要编写任何JavaScript，只需添加带有类和属性的HTML元素，就可以创建一个漂亮的前端表单验证。这非常有用！
- en: For more information about the Abide plugin in Foundation, please visit [https://get.foundation/sites/docs/abide.html](https://get.foundation/sites/docs/abide.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Foundation中Abide插件的更多信息，请访问[https://get.foundation/sites/docs/abide.html](https://get.foundation/sites/docs/abide.html)。
- en: 'Besides JavaScript utilities and plugins, there are a few useful libraries
    from Zurb Foundation that we can benefit from: Motion UI for creating Sass/CSS
    animations, Panini for creating pages and layouts with reusable partials, and Style
    Sherpa for creating style guides for your code base. We will explore how we can
    use Motion UI to create CSS animations and transitions in the next section. Let''s
    find out!'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了JavaScript实用程序和插件外，Zurb Foundation还有一些有用的库，我们可以从中受益：Motion UI用于创建Sass/CSS动画，Panini用于使用可重用部分创建页面和布局，Style
    Sherpa用于为代码库创建样式指南。我们将在下一节中探讨如何使用Motion UI创建CSS动画和过渡。让我们找出！
- en: Creating CSS animations and transitions with Motion UI
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Motion UI创建CSS动画和过渡
- en: 'Motion UI is a handy Sass library from Zurb Foundation for creating CSS transitions
    and animations quickly. You can download the Starter Kit from the Motion UI site
    and fiddle around with it, but that lacks the control of your own because it comes
    with many built-in defaults and effects that you have to stick with. So, if you
    want to have more control and take full advantage of Motion UI, you must know
    how to customize and compile the Sass code yourself. Let''s find out how you can
    write your Sass animations in the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Motion UI是Zurb Foundation的一个方便的Sass库，用于快速创建CSS过渡和动画。您可以从Motion UI网站下载Starter
    Kit并进行调试，但这缺乏自己的控制，因为它带有许多内置的默认值和效果，您必须遵循。因此，如果您想要更多的控制并充分利用Motion UI，您必须知道如何自定义和编译Sass代码。让我们在以下步骤中找出如何编写您的Sass动画：
- en: 'Install Motion UI and its dependencies (Sass and Sass loader) via npm on your
    terminal:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm在终端上安装Motion UI及其依赖项（Sass和Sass loader）：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a `main.scss` file in a `/css/` folder in the `/assets/` directory and
    import Motion UI as follows:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/assets/`目录中的`/css/`文件夹中创建一个`main.scss`文件，并按以下方式导入Motion UI：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Followed by the custom CSS animation as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随后是自定义CSS动画如下：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Register the custom Motion UI CSS resource in the `css` option in the Nuxt
    config file:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件的`css`选项中注册自定义Motion UI CSS资源：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Apply the animation to any element by using its class name, for example:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用其类名将动画应用于任何元素，例如：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Then you should see that the preceding image is taking 2 seconds to fade in
    gradually whenever the page is loaded.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您应该看到上述图像在页面加载时逐渐淡入需要2秒钟的时间。
- en: 'Motion UI also provides two public functions that we can interact with to trigger
    its built-in animations and transitions: `animationIn` and `animateOut`. Let''s
    find out how you can use them in the following steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Motion UI还提供了两个公共函数，我们可以与其交互以触发其内置动画和过渡：`animationIn`和`animateOut`。让我们在以下步骤中找出如何使用它们：
- en: 'Create a `motion-ui.client.js` file in the `/plugins/` directory with this
    code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/plugins/`目录中创建一个`motion-ui.client.js`文件，其中包含以下代码：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This plugin will make sure that Motion UI runs on the client side only. We will
    cover plugins in more detail in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml),
    *Writing Plugins and Modules*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件将确保Motion UI仅在客户端运行。我们将在[第6章](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml)中更详细地介绍插件和模块的内容。
- en: 'Register the preceding Motion UI plugin in the `plugins` option in the Nuxt
    config file as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件的`plugins`选项中注册上述Motion UI插件如下：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Use the Motion UI functions in the template anywhere you like, for example:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板中随意使用Motion UI函数，例如：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this page, we store the transition name `spin-in` in the `data` attribute
    in the element and then pass it to the Motion UI `animateIn` function to apply
    the animation when the element is clicked. Note that we use jQuery to get the
    data from the `data` attribute.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面中，我们将过渡名称`spin-in`存储在元素的`data`属性中，然后将其传递给Motion UI的`animateIn`函数，在元素被点击时应用动画。请注意，我们使用jQuery从`data`属性中获取数据。
- en: If you want to find out the rest of the built-in transition names, please visit
    [https://get.foundation/sites/docs/motion-ui.html#built-in-transitions](https://get.foundation/sites/docs/motion-ui.html#built-in-transitions).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解其余内置过渡名称，请访问[https://get.foundation/sites/docs/motion-ui.html#built-in-transitions](https://get.foundation/sites/docs/motion-ui.html#built-in-transitions)。
- en: It is cool, isn't it? It can be handy if you need CSS animations or transitions
    on your elements and you don't need to write tons of CSS lines yourself. This
    can keep your CSS styles small and focus on the main and custom presentation of
    your template. Talking of saving and not having to write genetic code yourself,
    it is worth mentioning the common icon font that's offered by Zurb Foundation
    as well – Foundation Icon Font 3\. Let's find out how you can benefit from it
    in the next section.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这很酷，不是吗？如果您需要在元素上使用CSS动画或过渡，而又不想自己编写大量的CSS代码，这将非常方便。这可以使您的CSS样式保持简洁，并专注于模板的主要和自定义呈现。说到节省时间和不必亲自编写通用代码，还值得一提的是Zurb
    Foundation提供的常用图标字体——Foundation Icon Font 3。让我们在下一节中了解一下您可以从中受益的方式。
- en: For more information about Motion UI, please visit [https://get.foundation/sites/docs/motion-ui.html](https://get.foundation/sites/docs/motion-ui.html). As
    for Panini and Style Sherpa, please visit [https://get.foundation/sites/docs/panini.html](https://get.foundation/sites/docs/panini.html)
    and [https://get.foundation/sites/docs/style-sherpa.html](https://get.foundation/sites/docs/style-sherpa.html).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Motion UI的更多信息，请访问[https://get.foundation/sites/docs/motion-ui.html](https://get.foundation/sites/docs/motion-ui.html)。至于Panini和Style
    Sherpa，请访问[https://get.foundation/sites/docs/panini.html](https://get.foundation/sites/docs/panini.html)和[https://get.foundation/sites/docs/style-sherpa.html](https://get.foundation/sites/docs/style-sherpa.html)。
- en: Adding icons with Foundation Icon Fonts 3
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Foundation Icon Fonts 3添加图标
- en: 'Foundation Icon Fonts 3 is one of the useful icon font sets that we can use
    with CSS on projects for frontend development. It can save you from creating common
    icons yourself such as social media icons (Facebook, Twitter, YouTube), arrow
    icons (arrow up, arrow down, and so on), accessibility icons (wheelchair, elevator,
    and so on), e-commerce icons (shopping cart, credit card, and so on), and text
    editor icons (bold, italic, and so on). Let''s find out how you can install it
    for your Nuxt project in the following steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation Icon Fonts 3是我们可以在前端开发项目中使用的有用图标字体集之一。它可以帮助您避免自己创建常见的图标，例如社交媒体图标（Facebook、Twitter、YouTube）、箭头图标（向上箭头、向下箭头等）、辅助功能图标（轮椅、电梯等）、电子商务图标（购物车、信用卡等）和文本编辑器图标（加粗、斜体等）。让我们在以下步骤中了解如何在您的Nuxt项目中安装它：
- en: 'Install Foundation Icon Fonts 3 via npm:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm安装Foundation Icon Fonts 3：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the path of Foundation Icon Fonts globally in the Nuxt config file:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件中全局添加Foundation Icon Fonts的路径：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Apply the icon to any `<i>` element using the icon name prefixed with `fi`,
    for example:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用图标名称前缀为`fi`的任何`<i>`元素应用图标，例如：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You can find out the rest of the icon names at [https://zurb.com/playground/foundation-icon-fonts-3](https://zurb.com/playground/foundation-icon-fonts-3).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://zurb.com/playground/foundation-icon-fonts-3](https://zurb.com/playground/foundation-icon-fonts-3)找到其余图标名称。
- en: Well done! In this section and in the previous sections on adding Foundation
    to your Nuxt project, you have managed to use the grid system to structure your
    layouts and Sass to create CSS animations with Motion UI.  But adding a grid system
    and writing CSS animations is not enough for a building an app; we would need
    specific CSS to describe the presentation of HTML documents and Vue pages in our
    Nuxt app. We can just use Sass throughout our project to create custom styles
    that cannot be done by just using Foundation alone, but let's try another popular
    styling preprocessor and add it to your Nuxt project – **Less**. Let's find out
    in the next section.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！在本节和之前关于将Foundation添加到您的Nuxt项目的章节中，您已经成功地使用了网格系统来构建您的布局，并使用Sass创建了CSS动画。但是，添加网格系统和编写CSS动画还不足以构建一个应用程序；我们需要特定的CSS来描述Nuxt应用程序中HTML文档和Vue页面的呈现。我们可以在整个项目中使用Sass来创建无法仅通过使用Foundation完成的自定义样式，但让我们尝试另一种流行的样式预处理器并将其添加到您的Nuxt项目中——**Less**。让我们在下一节中找出。
- en: You can find all the example code that you have learned so far on Foundation
    in `/chapter-3/nuxt-universal/adding-foundation/` in our GitHub repository.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-3/nuxt-universal/adding-foundation/`中找到到目前为止学到的所有示例代码。
- en: Adding Less (**Leaner Style Sheets)**
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Less（**Leaner Style Sheets**）
- en: 'Less, standing for Leaner Style Sheets, is a language extension for CSS. It
    looks just like CSS, so it is extremely easy to pick it up in "less" time. Less
    only makes a few convenient additions to the CSS language, which is one of the
    reasons it can be learned so quickly. You can have variables, mixins, nesting,
    nested at-rules and bubbling, operations, functions, and so on in writing CSS
    with Less; for example, the following is what the variables look like:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Less代表Leaner Style Sheets，是CSS的语言扩展。它看起来就像CSS，因此非常容易学习。Less只对CSS语言进行了一些方便的添加，这也是它可以被迅速学习的原因之一。您可以在使用Less编写CSS时使用变量、mixin、嵌套、嵌套at-rules和冒泡、操作、函数等等；例如，以下是变量的样子：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'These variables can be used just like those in other programming languages;
    for example, you can use the preceding variables in the following way in your
    ordinary CSS:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量可以像其他编程语言中的变量一样使用；例如，您可以在普通的CSS中以以下方式使用前面的变量：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The preceding code will be converted to the following CSS, which our browsers
    will understand:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将转换为以下CSS，我们的浏览器将理解：
- en: '[PRE30]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'It is very easy and neat, isn''t it? In Nuxt, you can use Less as your CSS
    preprocessor by using the `lang` attribute in the `<style>` block:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单和整洁，不是吗？在Nuxt中，您可以通过在`<style>`块中使用`lang`属性来将Less作为您的CSS预处理器使用：
- en: '[PRE31]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This way is good and manageable if you want to apply local styles to specific
    pages or layouts. And you should add a `scoped` attribute before the `lang` attribute
    so that the local style is applied locally to the specific page and does not interfere
    with the styles in other pages. However, if you have multiple pages and layouts
    sharing a common style, then you should create the style globally in the `/assets/`
    directory in your project. So, let''s find out how you can create global styles
    with Less in the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要将本地样式应用于特定页面或布局，这种方式是很好和可管理的。您应该在`lang`属性之前添加一个`scoped`属性，以便本地样式仅在特定页面上本地应用，并且不会干扰其他页面的样式。但是，如果您有多个页面和布局共享一个公共样式，那么您应该在项目的`/assets/`目录中全局创建样式。因此，让我们看看您如何在以下步骤中使用Less创建全局样式：
- en: 'Install Less and its webpack loader via npm on your terminal:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过终端在npm上安装Less及其webpack加载器：
- en: '[PRE32]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a `main.less` file in the `/assets/` directory and add the following
    styles:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/assets/`目录中创建一个`main.less`文件，并添加以下样式：
- en: '[PRE33]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Install the preceding global styles in the Nuxt config file as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件中安装上述全局样式如下：
- en: '[PRE34]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Apply the preceding styles anywhere in your project, for example:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，在项目的任何地方应用上述样式：
- en: '[PRE35]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You should see the borders that you just added to the CSS classes when you launch
    your app on the browser. These borders can be useful as guidelines when developing
    layouts because the grid lines underneath the grid system are "invisible" and
    it can be difficult to visualize them without any visible lines.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器上启动应用程序时，你应该看到刚刚添加到CSS类的边框。这些边框在开发布局时可以作为指南，因为网格系统下面的网格线是“不可见的”，没有可见的线可能很难将它们可视化。
- en: You can find the preceding code in `/chapter-3/nuxt-universal/adding-less/`
    in our GitHub repository.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的GitHub存储库的`/chapter-3/nuxt-universal/adding-less/`中找到上述代码。
- en: 'Since we are covering the CSS preprocessor in this section, it is worth mentioning
    that we can use any preprocessor, whether in the `<style>` block, `<template>`
    block, or `<script>` block, for example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在本节中涵盖了CSS预处理器，值得一提的是我们可以在`<style>`块、`<template>`块或`<script>`块中使用任何预处理器，例如：
- en: 'If you want to write JavaScript with CoffeeScript, you can do that as follows:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想用CoffeeScript编写JavaScript，可以按照以下步骤进行：
- en: '[PRE36]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: For more information about CoffeeScript, please visit [https://coffeescript.org/](https://coffeescript.org/).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有关CoffeeScript的更多信息，请访问[https://coffeescript.org/](https://coffeescript.org/)。
- en: 'If you want to write HTML tags using Pug in Nuxt, you can do it as follows:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想在Nuxt中使用Pug编写HTML标签，可以按照以下步骤进行：
- en: '[PRE37]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: For more information about Pug, please visit [https://coffeescript.org/](https://pugjs.org/).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Pug的更多信息，请访问[https://pugjs.org/](https://pugjs.org/)。
- en: 'If you want to write CSS styles using Sass (Syntactically Awesome Style Sheets)
    or Scss (Sassy Cascaded Style Sheets) instead of Less, you can do that as follows:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想使用Sass（Syntactically Awesome Style Sheets）或Scss（Sassy Cascaded Style Sheets）来编写CSS样式，可以按照以下步骤进行：
- en: '[PRE38]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: For more information about Sassand Scss, please visit [https://coffeescript.org/](https://sass-lang.com/).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Sass和Scss的更多信息，请访问[https://sass-lang.com/](https://sass-lang.com/)。
- en: In this book, we use Less, vanilla HTML, and JavaScript (mostly ECMAScript 6
    or ECMAScript 2015) throughout the chapters. But you are free to venture with
    any preprocessor we have mentioned. Now let's take a look at another way of adding
    effects and animations to the HTML elements in your Nuxt project – jQuery UI.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们在各章节中主要使用Less、原生HTML和JavaScript（主要是ECMAScript 6或ECMAScript 2015）。但你可以自由选择任何我们提到的预处理器。现在让我们来看看在Nuxt项目中为HTML元素添加效果和动画的另一种方法——jQuery
    UI。
- en: Adding jQuery UI
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加jQuery UI
- en: 'jQuery UI is a set of user interface (UI) interactions, effects, widgets, and
    utilities that are built on top of jQuery. It is a useful tool for designers and
    developers alike. Just like Motion UI and Foundation, jQuery UI helps you write
    less code and do more with the elements in your project. It can be added to a
    plain HTML page easily by using its CDN resources and jQuery as its dependency,
    for example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI是建立在jQuery之上的一组用户界面（UI）交互、效果、小部件和实用工具。它对设计师和开发人员都是一个有用的工具。与Motion UI和Foundation一样，jQuery
    UI可以帮助你用更少的代码在项目中做更多事情。它可以通过使用CDN资源和以jQuery为依赖项轻松地添加到普通HTML页面中，例如：
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Again, it is the same as Foundation. It is a bit complicated when you want
    to integrate jQuery UI with Nuxt. We can use the preceding CDN resources and add
    them to the `head` option in the Nuxt config file as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，与Foundation一样。当你想要将jQuery UI与Nuxt集成时会有一些复杂。我们可以使用上述CDN资源，并将它们添加到Nuxt配置文件中的`head`选项中，如下所示：
- en: '[PRE40]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'But still, just like integrating with Foundation, it is not encouraged to do
    it this way. Here is the proper way of doing it:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，就像与Foundation集成一样，不鼓励这样做。以下是正确的做法：
- en: 'Install jQuery UI via npm on your terminal:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上通过npm安装jQuery UI：
- en: '[PRE41]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add the CSS source of jQuery UI from the `/node_modules/` folder to the `css`
    option in the Nuxt config file:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将jQuery UI的CSS源文件从`/node_modules/`文件夹添加到Nuxt配置文件的`css`选项中：
- en: '[PRE42]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a file called `jquery-ui-bundle.js` in the `/plugins/` directory and
    import jQuery UI as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/plugins/`目录中创建一个名为`jquery-ui-bundle.js`的文件，并按以下方式导入jQuery UI：
- en: '[PRE43]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Again, this plugin will make sure that jQuery UI runs on the client side onlyand
    we will cover plugins in more detail in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml), *Writing
    Plugins and Modules*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，此插件将确保jQuery UI仅在客户端上运行，并且我们将在[第6章](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml)中更详细地介绍插件和模块的内容。
- en: 'Register the preceding jQuery UI plugin in the `plugins` option in the Nuxt
    config file as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件的`plugins`选项中注册前面的jQuery UI插件，如下所示：
- en: '[PRE44]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now you can use jQuery UI anywhere you like, for example:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以在任何地方使用jQuery UI，例如：
- en: '[PRE45]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In this example, we use one of the widgets from jQuery UI, Accordion, for displaying
    collapsible content panels. You can find the details of the HTML code at [https://jqueryui.com/accordion/](https://jqueryui.com/accordion/).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用了jQuery UI的一个小部件Accordion来显示可折叠的内容面板。您可以在[https://jqueryui.com/accordion/](https://jqueryui.com/accordion/)找到HTML代码的详细信息。
- en: 'Besides widgets, jQuery UI comes with effects such as animation easing effects. Let''s
    find out how you can create animations with the easing effects in the following
    steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 除了小部件，jQuery UI还带有动画缓动效果等效果。让我们看看如何在以下步骤中使用缓动效果创建动画：
- en: 'Create a new page, `animate.vue`, in the `/pages/` directory with the following
    element in the `<template>` block:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/pages/`目录中创建一个名为`animate.vue`的新页面，并在`<template>`块中添加以下元素：
- en: '[PRE46]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create the animation using the jQuery `animate` function with the jQuery UI easing
    effect,as follows, in the `<template>` block:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`块中使用jQuery的`animate`函数和jQuery UI的缓动效果创建动画，如下所示：
- en: '[PRE47]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In this code, we use the `easeInQuint` easing effect when the element is clicked
    and the `easeOutExpo` easing effect when it is clicked again. The font size of
    the element is animated from `2em` to `10em` upon clicking and from `10em` to
    `2em` when it is clicked again. It is the same for the text color, which is animated
    between `red` and `black` when the element is clicked.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，当单击元素时，我们使用`easeInQuint`缓动效果，再次单击时使用`easeOutExpo`缓动效果。单击时，元素的字体大小从`2em`变化到`10em`，再次单击时从`10em`变化到`2em`。对于文本颜色也是一样，当单击元素时，它在`red`和`black`之间进行动画变化。
- en: Refresh your browser and you should see that we have applied the animation and
    the easing effects to `H1`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新您的浏览器，您应该会看到我们已经将动画和缓动效果应用到`H1`上。
- en: For more easing effects, please visit [https://api.jqueryui.com/easings/](https://api.jqueryui.com/easings/),
    while for more information about the jQuery animate function, please visit [https://api.jquery.com/animate/](https://api.jquery.com/animate/).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多缓动效果，请访问[https://api.jqueryui.com/easings/](https://api.jqueryui.com/easings/)，有关jQuery动画函数的更多信息，请访问[https://api.jquery.com/animate/](https://api.jquery.com/animate/)。
- en: If you want to find out the rest of the effects, widgets, and utilities from
    jQuery UI, please visit [https://jqueryui.com/](https://jqueryui.com/).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解jQuery UI的其他效果、小部件和实用工具，请访问[https://jqueryui.com/](https://jqueryui.com/)。
- en: Even though you can create animations and transitions with Motion UI using CSS,
    jQuery UI is another option for applying animations to your HTML elements using
    JavaScript. Besides jQuery and jQuery UI, there are other JavaScript libraries
    that we can benefit from to present our content interactively and interestingly
    in specific ways, such as animating our content when scrolling the page up or
    down and swiping in the contents from left or right. These last two animation
    tools that we will look into are AOS and Swiper. So, let's do that in the next
    section.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以使用CSS使用Motion UI创建动画和过渡效果，但是jQuery UI是另一种选项，可以使用JavaScript对HTML元素应用动画。除了jQuery和jQuery
    UI之外，还有其他JavaScript库，我们可以从中受益，以特定方式交互地和有趣地呈现我们的内容，例如在向上或向下滚动页面时对内容进行动画处理，以及从左侧或右侧滑入内容。我们将在接下来的部分中了解这两个动画工具，即AOS和Swiper。让我们在下一节中进行。
- en: You can find all the code we have used for this section in `/chapter-3/nuxt-universal/adding-jquery-ui/`
    in our GitHub repository.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-3/nuxt-universal/adding-jquery-ui/`中找到本节中使用的所有代码。
- en: Adding AOS
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加AOS
- en: 'AOS is a JavaScript animation library that animates your DOM elements beautifully
    into view as you scroll down (or up) the page. It is a small library and very
    easy to use for triggering animations as you scroll a page without having to code
    them yourself. To animate an element, simply use the `data-aos` attribute:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: AOS是一个JavaScript动画库，可以在您向下（或向上）滚动页面时将DOM元素美观地动画显示出来。这是一个小型库，非常容易使用，可以在滚动页面时触发动画，而无需自己编写代码。要对元素进行动画处理，只需使用`data-aos`属性：
- en: '[PRE48]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Just as simple as this, the element will fade in gradually as you scroll the
    page. You can even set how long in seconds for the animation to complete. So,
    let''s find out how you can add this library to your Nuxt project in the following
    steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这样简单，当您滚动页面时，元素将逐渐淡入。您甚至可以设置动画完成的持续时间。因此，让我们找出如何在以下步骤中将此库添加到您的Nuxt项目中：
- en: 'Install AOS via npm on your terminal:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上通过npm安装AOS：
- en: '[PRE49]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add the following elements to `index.vue` as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下元素添加到`index.vue`中：
- en: '[PRE50]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In this template, we use Foundation to add the grid structure to the elements
    and apply the AOS `fade-up` animation on each element by using the `data-aos`
    attribute.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模板中，我们使用Foundation为元素添加网格结构，并通过使用`data-aos`属性在每个元素上应用AOS `fade-up`动画。
- en: 'Import the AOS JavaScript and CSS resources in the `<script>` block and initiate
    AOS when the Vue component is mounted:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<script>`块中导入AOS JavaScript和CSS资源，并在Vue组件挂载时初始化AOS：
- en: '[PRE51]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: When you refresh your screen, you should see the elements are fading in upward,
    one after another, in order, as you are scrolling down the page. It is wonderful
    that it allows you to present your content beautifully so effortlessly, isn't
    it?
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当您刷新屏幕时，您应该看到元素逐个向上淡入，按顺序出现，就像您向下滚动页面一样。这样可以让您如此轻松地美观地呈现您的内容，是不是很棒？
- en: 'However, the way we have just applied AOS isn''t good if you have multiple
    pages that you want to animate as well. You''d have to duplicate the preceding
    script to every page where you need the AOS animations. So, if you have more than
    one page that you want to animate with AOS, then you should register and initiate
    it globally. Let''s find out how it can be done in the following steps:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们刚刚应用AOS的方式并不适合如果您还有其他页面需要进行动画处理。您需要将前面的脚本复制到需要AOS动画的每个页面上。因此，如果您有多个页面需要使用AOS进行动画处理，那么您应该进行全局注册和初始化。让我们在以下步骤中找出如何做到这一点：
- en: 'Create an `aos.client.js` plugin in the `/plugins/` directory, import the AOS
    resources, and initiate AOS as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/plugins/`目录中创建一个`aos.client.js`插件，导入AOS资源，并初始化AOS如下：
- en: '[PRE52]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In this plugin, we instruct AOS to take 2 seconds to animate our elements –
    globally. You can find out the rest of the setting options at [https://github.com/michalsnik/aos#1-initialize-aos](https://github.com/michalsnik/aos#1-initialize-aos).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个插件中，我们指示AOS全局地花费2秒来动画化我们的元素。您可以在https://github.com/michalsnik/aos#1-initialize-aos找到其余的设置选项。
- en: 'Register the preceding AOS plugin in the `plugins` option in the Nuxt config
    file as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件的`plugins`选项中注册前面的AOS插件如下：
- en: '[PRE53]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: That's it. Now you can apply the AOS animations to multiple pages without duplicating
    the script.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在您可以将AOS动画应用于多个页面，而无需复制脚本。
- en: 'Note that we import the CSS resource directly in the AOS plugin instead of
    importing it globally through the `css` option in the Nuxt config file, as opposed
    to what we did for Foundation and Motion UI in the past sections. So, if you want
    to do the same for Foundation, you can import its CSS resource to the plugin file
    directly as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在AOS插件中直接导入CSS资源，而不是通过Nuxt配置文件中的`css`选项全局导入，与我们在以前的部分中为Foundation和Motion
    UI所做的相反。因此，如果您想为Foundation做同样的事情，可以直接将其CSS资源导入到插件文件中，如下所示：
- en: '[PRE54]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Then, you don't have to use the global `css` option in the Nuxt config file.
    This way is preferred if you want to keep your config file "thin" and keep the
    CSS and JavaScript resources of your UI frameworks in their plugin files.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您无需在Nuxt配置文件中使用全局的`css`选项。如果您希望保持配置文件“轻量”并将UI框架的CSS和JavaScript资源保留在其插件文件中，这种方式是首选。
- en: You can find the source code of this example Nuxt app in `/chapter-3/nuxt-universal/adding-aos/` from
    our GitHub repository.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-3/nuxt-universal/adding-aos/`中找到此示例Nuxt应用程序的源代码。
- en: If you want to find out more information about AOS and the rest of its animation
    names, please visit [https://michalsnik.github.io/aos/](https://michalsnik.github.io/aos/).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解有关AOS和其余动画名称的更多信息，请访问https://michalsnik.github.io/aos/。
- en: Now let's explore the last JavaScript helper that can help accelerate your frontend
    development – **Swiper**.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们探索最后一个JavaScript助手，可以帮助加速您的前端开发 - **Swiper**。
- en: Adding Swiper
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Swiper
- en: 'Swiperis a JavaScript touch slider that can be used in modern web apps (desktop
    or mobile) and mobile native or hybrid apps. It is part of Framework7 ([https://framework7.io/](https://framework7.io/))
    and Ionic Framework ([https://ionicframework.com/](https://ionicframework.com/))
    for building mobile hybrid apps. We can get Swiper set up for a web app easily
    using its CDN resources, just like we did with other frameworks and libraries
    in the past sections. But let''s find out how you can install and use it in a
    proper way with Nuxt in the following steps:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Swiper是一个JavaScript触摸滑块，可用于现代Web应用程序（桌面或移动）和移动本机或混合应用程序。它是Framework7（https://framework7.io/）和Ionic
    Framework（https://ionicframework.com/）的一部分，用于构建移动混合应用程序。我们可以像在以前的部分中使用CDN资源一样轻松地为Web应用程序设置Swiper。但让我们看看您如何在以下步骤中以正确的方式在Nuxt中安装和使用它：
- en: 'Install Swiper in your Nuxt project via npm through your terminal:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Nuxt项目中通过终端使用npm安装Swiper：
- en: '[PRE55]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add the following HTML elements to create an image slider in the `<template>`
    block:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下HTML元素以在`<template>`块中创建图像滑块：
- en: '[PRE56]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: From these elements, we want to create an image slider with three images that
    can be slid into the view from left or right and two buttons – a next button and
    a previous button.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些元素中，我们希望创建一个图像滑块，其中包含三个图像，可以从左侧或右侧滑入视图，以及两个按钮 - 下一个按钮和上一个按钮。
- en: 'Import Swiper resources in the `<script>` block and create a new Swiper instance when
    the page is mounted:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<script>`块中导入Swiper资源并在页面挂载时创建一个新的Swiper实例：
- en: '[PRE57]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: In this script, we provide the class name of our image slider to Swiper so that
    a new instance can be initiated. Also, we register our next and previous buttons
    to the new instance through Swiper's `pagination` option.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们向Swiper提供了我们图像滑块的类名，以便可以初始化一个新实例。此外，我们通过Swiper的`pagination`选项将下一个和上一个按钮注册到新实例。
- en: You can find the rest of the setting options for initializing Swiper and the
    API that you can use to interact with the instantiated instance at [https://swiperjs.com/api/](https://swiperjs.com/api/).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://swiperjs.com/api/](https://swiperjs.com/api/)找到用于初始化Swiper和与实例交互的API的其余设置选项。
- en: 'Add the following CSS styles to customize the image slider in the `<style>`
    block:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<style>`块中添加以下CSS样式来自定义图像滑块：
- en: '[PRE58]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: In this style, we just want to make the slide occupy the screen fully by using
    100% on the CSS `width` and `height` properties and to centralize the image in
    the slider container by using the CSS `flex` property.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个样式中，我们只想通过在CSS的`width`和`height`属性上使用100%，并通过使用CSS的`flex`属性将图像置于滑块容器中央，使幻灯片占据整个屏幕。
- en: Now you can run Nuxt and load the page on your browser and you should see an
    interactive image slider working nicely.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以运行Nuxt并在浏览器中加载页面，您应该会看到一个交互式图像滑块很好地工作。
- en: You can find out about some great example slides from the Swiper official website
    at [https://swiperjs.com/demos/](https://swiperjs.com/demos/).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Swiper官方网站[https://swiperjs.com/demos/](https://swiperjs.com/demos/)找到一些很棒的示例幻灯片。
- en: 'Note that the way we just used Swiper is meant for a single page only. If you
    want to create sliders on multiple pages, then you can register Swiper globally
    through a plugin. So let''s find out how to do that in the following steps:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们刚刚使用的Swiper方式仅适用于单个页面。如果您想在多个页面上创建滑块，则可以通过插件全局注册Swiper。因此，让我们在以下步骤中了解如何做到这一点：
- en: 'Create a `swiper.client.js` plugin in the `/plugins/` directory, import Swiper
    resources, and create a property called `$swiper`. Attach Swiper to this property
    and inject it into the Vue instance as follows:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/plugins/`目录中创建一个名为`swiper.client.js`的插件，导入Swiper资源，并创建一个名为`$swiper`的属性。将Swiper附加到此属性，并将其注入到Vue实例中，如下所示：
- en: '[PRE59]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Register this Swiper plugin in the `plugins` option in the Nuxt config file:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件的`plugins`选项中注册此Swiper插件：
- en: '[PRE60]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now you can create the new instance of Swiper in multiple pages in your app
    by calling the `$swiper` property through the `this` keyword, for example:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以通过使用`this`关键字调用`$swiper`属性，在应用的多个页面中创建Swiper的新实例，例如：
- en: '[PRE61]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Again, we have organized the CSS resource in the plugin file instead of registering
    it globally through the `css` option in the Nuxt config file. However, if you
    want to override some styles in any of these UI frameworks and libraries globally,
    then it is easier to override them by registering their CSS resources globally
    in the `css` option followed by your custom styles in a CSS file that's stored
    in the `/assets/` directory.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将CSS资源组织在插件文件中，而不是通过Nuxt配置文件中的`css`选项全局注册它。但是，如果您想要全局覆盖这些UI框架和库中的一些样式，那么通过在`css`选项中全局注册它们的CSS资源，然后在`/assets/`目录中存储的CSS文件中添加自定义样式，更容易覆盖它们。
- en: You can download the source code of this chapter in `/chapter-3/nuxt-universal/adding-swiper/` from
    our GitHub repository. If you want to find out more information about Swiper,
    please visit [https://swiperjs.com/](https://swiperjs.com/).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从我们的GitHub存储库的`/chapter-3/nuxt-universal/adding-swiper/`中下载本章的源代码。如果您想了解更多关于Swiper的信息，请访问[https://swiperjs.com/](https://swiperjs.com/)。
- en: Well done! You have managed to pick up some of the popular UI frameworks and
    libraries that we selected for you to accelerate your frontend development. We
    hope that they will be useful in the Nuxt projects you create in the future. We
    will use some of these frameworks and libraries occasionally in the coming chapters,
    especially in the final chapter – [Chapter 18](a2720301-9e1c-4c28-8af8-39bd5c093fb9.xhtml), *Creating
    a Nuxt App with CMS and GraphQL*. Right now, let's summarize what you have learned
    in this chapter.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！您已经成功掌握了我们为您选择的一些流行的UI框架和库，以加速您的前端开发。我们希望它们将对您未来创建的Nuxt项目有所帮助。在接下来的章节中，我们将偶尔使用这些框架和库，特别是在最后一章
    - [第18章]《使用CMS和GraphQL创建Nuxt应用》中。现在，让我们总结一下您在本章学到的内容。
- en: Summary
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have installed Foundation as the main UI framework in your
    Nuxt project and used Foundation's grid system, JavaScript utilities, and plugins
    to create a simple grid layout, form, and navigation. You have used Motion UI
    from Foundation to create Sass animations and transitions and Foundation Icon
    Fonts 3, also from Foundation, for adding common and useful icons to your HTML
    page. You have installed Less as the styling preprocessor and created some variables
    in the Less style sheet.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经将Foundation安装为Nuxt项目中的主要UI框架，并使用Foundation的网格系统、JavaScript实用程序和插件来创建简单的网格布局、表单和导航。您已经使用Foundation的Motion
    UI来创建Sass动画和过渡，还使用了Foundation Icon Fonts 3来向HTML页面添加常见和有用的图标。您已经安装了Less作为样式预处理器，并在Less样式表中创建了一些变量。
- en: You have installed jQuery UI, adding its Accordion widget to your app, and created
    an animation using its easing effects. You have installed AOS and used it to animate
    your elements into the viewport when scrolling the page down or up. Lastly, you
    have installed Swiper for creating a simple image slide. Last but not least, you
    have learned how to install these frameworks and libraries globally through the
    Nuxt config file or just using them locally on specific pages individually.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经安装了jQuery UI，并将其手风琴小部件添加到您的应用程序中，并使用其缓动效果创建了动画。您已经安装了AOS，并在向下或向上滚动页面时使用它来使元素动画进入视口。最后，您已经安装了Swiper来创建一个简单的图像幻灯片。最后但同样重要的是，您已经学会了如何通过Nuxt配置文件全局安装这些框架和库，或者仅在特定页面上局部使用它们。
- en: In the coming chapter, we will cover the view, routing, and transition in Nuxt.
    You will create custom pages, routes, and CSS transitions and learn how to use
    the `/assets/` directory to serve assets like images and fonts. Also, you will
    learn how to customize the default layout and add new ones in the `/layouts/` directory.
    You will be given a simple website example that uses all these Nuxt features so
    that you can grab a sense of concrete use of what you have learned from this book.
    So, let's explore Nuxt further in the next chapter!
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍Nuxt中的视图、路由和过渡。您将创建自定义页面、路由和CSS过渡，并学习如何使用`/assets/`目录来提供图像和字体等资源。此外，您还将学习如何自定义默认布局并在`/layouts/`目录中添加新的布局。我们将提供一个简单的网站示例，该示例使用了所有这些Nuxt功能，以便您可以从本书中学到的内容中获得具体用途的感觉。因此，让我们在下一章中进一步探索Nuxt！
