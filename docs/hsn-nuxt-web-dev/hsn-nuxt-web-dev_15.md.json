["```js\nhttps://unpkg.com/vue-router/dist/vue-router.js\n```", "```js\n<script src=\"/path/to/vue.js\"></script>\n<script src=\"/path/to/vue-router.js\"></script>\n```", "```js\n$ npm i vue-router\n```", "```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n```", "```js\nconst router = new VueRouter({ ... })\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n```", "```js\nconst router = new VueRouter({ ... })\nrouter.beforeEach((to, from, next) => { ... })\n```", "```js\nconst router = new VueRouter({ ... })\nrouter.afterEach((to, from) => { ... })\n```", "```js\n<div id=\"app\">\n  <p>\n    <router-link to=\"/page1\">Page 1</router-link>\n    <router-link to=\"/page2\">Page 2</router-link>\n  </p>\n  <router-view></router-view>\n</div>\n```", "```js\nconst Page1 = { template: '<div>Page 1</div>' }\nconst Page2 = { template: '<div>Page 2</div>' }\n\nconst routes = [\n  { path: '/page1', component: Page1 },\n  { path: '/page2', component: Page2 }\n]\n\nconst router = new VueRouter({\n  routes\n})\n```", "```js\nrouter.beforeEach((to, from, next) => {\n  console.log('global before hook')\n  next()\n})\n\nrouter.afterEach((to, from,) => {\n  console.log('global after hook')\n})\n```", "```js\nconst app = new Vue({\n  router\n}).$mount('#app')\n```", "```js\nglobal before hook\nglobal after hook\n```", "```js\nbeforeEnter: (to, from, next) => { ... }\n// or:\nbeforeEnter (to, from, next) { ... }\n```", "```js\nconst routes = [\n  {\n    path: '/page1',\n    component: Page1,\n    beforeEnter: (to, from, next) => {\n      console.log('before entering page 1')\n      next()\n    }\n  },\n  {\n    path: '/page2',\n    component: Page2,\n    beforeEnter (to, from, next) {\n      console.log('before entering page 2')\n      next()\n    }\n  }\n]\n```", "```js\nbeforeRouteEnter (to, from, next) { ... }\n```", "```js\nbeforeRouteEnter (to, from, next) {\n  next(vueComponent => { ... })\n}\n```", "```js\nbeforeRouteLeave (to, from, next) { ... }\n```", "```js\nbeforeRouteLeave (to, from, next) {\n  const confirmed = window.confirm('Are you sure you want to leave?')\n  if (confirmed) {\n    next()\n  } else {\n    next(false)\n  }\n}\n```", "```js\nbeforeRouteUpdate (to, from, next) { ... }\n```", "```js\nbeforeRouteUpdate (to, from, next) {\n  this.name = to.params.name\n  next()\n}\n```", "```js\nconst Page1 = {\n  template: '<div>Page 1 {{ $route.params.slug }}</div>',\n  beforeRouteEnter (to, from, next) {\n    console.log('before entering page 1')\n    next(vueComponent => {\n      console.log('before entering page 1: ', \n       vueComponent.$route.path)\n    })\n  },\n  beforeRouteUpdate (to, from, next) {\n    console.log('before updating page 1: ', this.$route.path)\n    next()\n  },\n  beforeRouteLeave (to, from, next) {\n    console.log('before leaving page 1: ', this.$route.path)\n    next()\n  }\n}\n```", "```js\nconst Page2 = {\n  template: '<div>Page 2</div>',\n  beforeRouteEnter (to, from, next) {\n    console.log('before entering page 2')\n    next(vueComponent => {\n      console.log('before entering page 2: ', \n       vueComponent.$route.path)\n    })\n  },\n  beforeRouteLeave (to, from, next) {\n    console.log('before leaving page 2: ', this.$route.path)\n    next()\n  }\n}\n```", "```js\nconst routes = [\n  {\n    path: '/page1',\n    component: Page1,\n    children: [\n      {\n        path: ':slug'\n      }\n    ]\n  },\n  {\n    path: '/page2',\n    component: Page2\n  }\n]\n```", "```js\n<div id=\"app\">\n  <ul>\n    <li><router-link to=\"/\">Home</router-link></li>\n    <li><router-link to=\"/page1\">Page 1</router-link></li>\n    <li><router-link to=\"/page1/foo\">Page 1: foo</router-link></li>\n    <li><router-link to=\"/page1/bar\">Page 1: bar</router-link></li>\n    <li><router-link to=\"/page2\">Page 2</router-link></li>\n  </ul>\n  <router-view></router-view>\n</div>\n```", "```js\nbefore entering page 1\nbefore entering page 1: /page1\n```", "```js\nbefore leaving page 1: /page1\nbefore entering page 2\nbefore entering page 2: /page2\n```", "```js\nbefore leaving page 2: /page2\nbefore entering page 1\nbefore entering page 1: /page1/foo\n```", "```js\nbefore updating page 1: /page1/foo\n```", "```js\nbefore leaving page 1: /page1/bar\n```", "```js\nnext(false)\n```", "```js\nnext('/')\n// or\nnext({ path: '/' })\n```", "```js\nconst error = new Error('An error occurred!')\nnext(error)\n```", "```js\nrouter.onError(err\n => { ... })\n```", "```js\nconst Page1 = {\n  template: '<div>Page 1</div>',\n  beforeRouteEnter (to, from, next) {\n    const error = new Error('An error occurred!')\n    error.statusCode = 500\n    console.log('before entering page 1')\n    next(error)\n  }\n}\n\n const Page2 = {\n  template: '<div>Page 2</div>',\n  beforeRouteEnter (to, from, next) {\n    console.log('before entering page 2')\n    next({ path: '/' })\n  }\n}\n```", "```js\nconst routes = [\n  {\n    path: '/page1',\n    component: Page1\n  },\n  {\n    path: '/page2',\n    component: Page2\n  }\n]\n```", "```js\nconst router = new VueRouter({\n  routes\n})\n\nrouter.onError(err => {\n  console.error('Handling this error: ', err.message)\n  console.log(err.statusCode)\n})\n```", "```js\n<div id=\"app\">\n  <ul>\n    <li><router-link to=\"/\">Home</router-link></li>\n    <li><router-link to=\"/page1\">Page 1</router-link></li>\n    <li><router-link to=\"/page2\">Page 2</router-link></li>\n  </ul>\n  <router-view></router-view>\n</div>\n```", "```js\nbefore entering page 1\nHandling this error: An error occurred!\n500\n```", "```js\nbefore entering page 2\n```", "```js\n$ npm i -g @vue/cli\n```", "```js\n$ vue create my-project\n```", "```js\nVue CLI v4.4.6\n? Please pick a preset: (Use arrow keys)\n> default (babel, eslint) \n  Manually select features \n```", "```js\nSuccessfully created project my-project. \nGet started with the following commands: \n\n **$ cd my-project**\n **$ npm run serve** \n```", "```js\n$ npm run serve\n```", "```js\n DONE Compiled successfully in 3469ms\n\n  App running at:\n  - Local: http://localhost:8080/\n  - Network: http://199.188.0.44:8080/\n\n  Note that the development build is not optimized.\n  To create a production build, run npm run build.\n```", "```js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 babel.config.js\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 public\n\u2502 \u251c\u2500\u2500 index.html\n\u2502 \u2514\u2500\u2500 favicon.ico\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 App.vue\n    \u251c\u2500\u2500 main.js\n    \u251c\u2500\u2500 router.js\n    \u251c\u2500\u2500 components\n    \u2502 \u2514\u2500\u2500 HelloWorld.vue\n    \u2514\u2500\u2500 assets\n        \u2514\u2500\u2500 logo.png\n```", "```js\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 middlewares/\n    \u251c\u2500\u2500 store/\n    \u251c\u2500\u2500 routes/\n    \u2514\u2500\u2500 router.js\n```", "```js\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 App.vue\n    \u251c\u2500\u2500 main.js\n    \u251c\u2500\u2500 router.js\n    \u251c\u2500\u2500 components\n    \u2502 \u251c\u2500\u2500 secured.vue\n    \u2502 \u2514\u2500\u2500 login.vue\n    \u251c\u2500\u2500 assets\n    \u2502 \u2514\u2500\u2500 ...\n    \u251c\u2500\u2500 middlewares\n    \u2502 \u251c\u2500\u2500 isLoggedIn.js\n    \u2502 \u2514\u2500\u2500 isAdult.js\n    \u251c\u2500\u2500 store\n    \u2502 \u251c\u2500\u2500 index.js\n    \u2502 \u251c\u2500\u2500 mutations.js\n    \u2502 \u2514\u2500\u2500 actions.js\n    \u2514\u2500\u2500 routes\n        \u251c\u2500\u2500 index.js\n        \u251c\u2500\u2500 secured.js\n        \u2514\u2500\u2500 login.js\n```", "```js\n// package.json\n\"dependencies\": {\n  \"core-js\": \"^2.6.5\",\n  \"vue\": \"^2.6.10\"\n}\n```", "```js\n$ npm i vuex\n$ npm i vue-router\n$ npm i vue-router-multiguard\n```", "```js\n// src/store/index.js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nimport actions from './actions'\nimport mutations from './mutations'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: { user: null },\n  actions,\n  mutations\n})\n```", "```js\n// src/store/actions.js\nconst actions = {\n  async login({ commit }, { name, age }) {\n    if (!name || !age) {\n      throw new Error('Bad credentials')\n    }\n    const data = {\n      name: name,\n      age: age\n    }\n    commit('setUser', data)\n  },\n\n  async logout({ commit }) {\n    commit('setUser', null)\n  }\n}\nexport default actions\n```", "```js\n// src/store/mutations.js\nconst mutations = {\n  setUser (state, user) {\n    state.user = user\n  }\n}\nexport default mutations\n```", "```js\n// src/middlewares/isLoggedIn.js\nimport store from '../store'\n\nexport default (to, from, next) => {\n  if (!store.state.user) {\n    const err = new Error('You are not connected')\n    err.statusCode = 403\n    next(err)\n  } else {\n    next()\n  }\n}\n```", "```js\n// src/middlewares/isAdult.js\nimport store from '../store'\n\nexport default (to, from, next) => {\n  if (store.state.user.age < 18) {\n    const err = new Error('You must be over 18')\n    err.statusCode = 403\n    next(err)\n  } else {\n    next()\n  }\n}\n```", "```js\n// src/routes/secured.js\nimport multiguard from 'vue-router-multiguard'\nimport secured from '../components/secured.vue'\nimport isLoggedIn from '../middlewares/isLoggedIn'\nimport isAdult from '../middlewares/isAdult'\n\nexport default {\n  name: 'secured',\n  path: '/secured',\n  component: secured,\n  beforeEnter: multiguard([isLoggedIn, isAdult])\n}\n```", "```js\n// src/components/login.vue\n<form @submit.prevent=\"login\">\n  <p>Name: <input v-model=\"name\" type=\"text\" name=\"name\"></p>\n  <p>Age: <input v-model=\"age\" type=\"number\" name=\"age\"></p>\n  <button type=\"submit\">Submit</button>\n</form>\n\nexport default {\n  data() {\n    return {\n      error: null,\n      name: '',\n      age: ''\n    }\n  },\n  methods: {\n    async login() { ... },\n    async logout() { ... }\n  }\n}\n```", "```js\nasync login() {\n  try {\n    await this.$store.dispatch('login', {\n      name: this.name,\n      age: this.age\n    })\n    this.name = ''\n    this.age = ''\n    this.error = null\n  } catch (e) {\n    this.error = e.message\n  }\n},\nasync logout() {\n  try {\n    await this.$store.dispatch('logout')\n  } catch (e) {\n    this.error = e.message\n  }\n}\n```", "```js\n// src/routes/login.js\nimport Login from '../components/login.vue'\n\nexport default {\n  name: 'login',\n  path: '/',\n  component: Login\n}\n```", "```js\n// src/routes/index.js\nimport login from './login'\nimport secured from './secured'\n\nconst routes = [\n  login,\n  secured\n]\n\nexport default routes\n```", "```js\n// src/router.js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport Routes from './routes'\n\nVue.use(VueRouter)\n\nconst router = new VueRouter({\n  routes: Routes\n})\n\nrouter.onError(err => {\n  alert(err.message)\n  router.push({ name: 'login' })\n})\n\nexport default router\n```", "```js\n// src/main.js\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App),\n}).$mount('#app')\n```", "```js\nName: John\nAge: 20\n```", "```js\nexport default (context) => { ... }\n```", "```js\nexport default async (context) => {\n   const { data } = await axios.get('/api/path')\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  router: {\n    middleware: 'auth'\n  }\n}\n```", "```js\n// middleware/user-agent.js\nexport default (context) => {\n  context.userAgent = process.server ? context.req.headers[\n    'user-agent'] : navigator.userAgent\n}\n\n// middleware/visits.js\nexport default ({ store, route, redirect }) => {\n  store.commit('addVisit', route.path)\n}\n```", "```js\n// nuxt.config.js\nmodule.exports = {\n  router: {\n    middleware: ['visits', 'user-agent']\n  }\n}\n```", "```js\n// store/state.js\nexport default () => ({\n  visits: []\n})\n\n// store/mutations.js\nexport default {\n  addVisit (state, path) {\n    state.visits.push({\n      path,\n      date: new Date().toJSON()\n    })\n  }\n}\n```", "```js\n// pages/about.vue\n<p>{{ userAgent }}</p>\n\nexport default {\n  asyncData ({ userAgent }) {\n    return {\n      userAgent\n    }\n  }\n}\n```", "```js\n// components/visits.vue\n<li v-for=\"(visit, index) in visits\" :key=\"index\">\n  <i>{{ visit.date | dates }} | {{ visit.date | times }}</i> - {{ \n    visit.path }}\n</li>\n\nexport default {\n  filters: {\n    dates(date) {\n      return date.split('T')[0]\n    },\n    times(date) {\n      return date.split('T')[1].split('.')[0]\n    }\n  },\n  computed: {\n    visits() {\n      return this.$store.state.visits.slice().reverse()\n    }\n  }\n}\n```", "```js\n// layouts/default.vue\n<template>\n  <Visits />\n</template>\n\nimport Visits from '~/components/visits.vue'\nexport default {\n  components: {\n    Visits\n  }\n}\n```", "```js\n2019-06-06 | 01:55:44 - /contact\n2019-06-06 | 01:55:37 - /about\n2019-06-06 | 01:55:30 - /\n```", "```js\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36\n```", "```js\n// pages/index.vue or layouts/default.vue\nexport default {\n  middleware: 'auth'\n}\n```", "```js\n// middleware/auth.js\nexport default function ({ store, error }) {\n  if (!store.state.auth) {\n    error({\n      message: 'You are not connected',\n      statusCode: 403\n    })\n  }\n}\n```", "```js\n// middleware/token.js\nexport default async ({ store, error }) => {\n  if (!store.state.auth.token) {\n    error({\n      message: 'No token',\n      statusCode: 403\n    })\n  }\n  axios.defaults.headers.common['Authorization'] = `Bearer: ${store.state.auth.token}`\n}\n```", "```js\n// pages/secured.vue\n<p>{{ greeting }}</p>\n\nexport default {\n  async asyncData ({ redirect }) {\n    try {\n      const { data } = await axios.get('/api/private')\n      return {\n        greeting: data.data.message\n      }\n    } catch (error) {\n      if(process.browser){\n        alert(error.response.data.message)\n      }\n      return redirect('/login')\n    }\n  },\n  middleware: ['auth', 'token']\n}\n```", "```js\n// store/state.js\nexport default () => ({\n  auth: null\n})\n\n// store/mutations.js\nexport default {\n  setAuth (state, data) {\n    state.auth = data\n  }\n}\n\n// store/actions.js\nexport default {\n  async login({ commit }, { username, password }) {\n    try {\n      const { data } = await axios.post('/api/public/users/login', \n      { username, password })\n      commit('setAuth', data.data)\n    } catch (error) {\n      // handle error\n    }\n  },\n\n  async logout({ commit }) {\n    await axios.post('/api/public/users/logout')\n    commit('setAuth', null)\n  }\n}\n```", "```js\n// store/index.js\nconst cookie = process.server ? require('cookie') : undefined\n\nexport const actions = {\n  nuxtServerInit({ commit }, { req }) {\n    var session = null\n    var auth = null\n    if (req.headers.cookie && req.headers.cookie.indexOf('koa:sess') > -1) {\n      session = cookie.parse(req.headers.cookie)['koa:sess']\n    }\n    if (session) {\n      auth = JSON.parse(Buffer.from(session, 'base64'))\n      commit('setAuth', auth)\n    }\n  }\n}\n```", "```js\n// package.json\n\"scripts\": {\n  \"dev\": \"cross-env NODE_ENV=development nodemon server/index.js --watch \n   server\",\n  \"build\": \"nuxt build\",\n  \"start\": \"cross-env NODE_ENV=production node server/index.js\",\n  \"generate\": \"nuxt generate\"\n}\n```", "```js\n// package.json\n\"scripts\": {\n  \"dev\": \"nuxt\",\n  \"build\": \"nuxt build\",\n  \"start\": \"nuxt start\",\n  \"generate\": \"nuxt generate\"\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  serverMiddleware: [\n    '~/api'\n  ]\n}\n```", "```js\n// nuxt.config.js\nimport bodyParser from 'body-parser'\nimport cookieSession from 'cookie-session'\n\nexport default {\n  serverMiddleware: [\n    bodyParser.json(),\n    cookieSession({\n      name: 'express:sess',\n      secret: 'super-secret-key',\n      maxAge: 60000\n    }),\n    '~/api'\n  ]\n}\n```", "```js\n// api/index.js\nimport express from 'express'\nconst app = express()\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\n// Export the server middleware\nexport default {\n  path: '/api',\n  handler: app\n}\n```", "```js\n// api/index.js\napp.post('/login', (req, res) => {\n  if (req.body.username === 'demo' && req.body.password === 'demo') {\n    req.session.auth = { username: 'demo' }\n    return res.json({ username: 'demo' })\n  }\n  res.status(401).json({ message: 'Bad credentials' })\n})\n\napp.post('/logout', (req, res) => {\n  delete req.session.auth\n  res.json({ ok: true })\n})\n```", "```js\n// store/state.js\nexport default () => ({\n  auth: null,\n})\n\n// store/mutations.js\nexport default {\n  setAuth (state, data) {\n    state.auth = data\n  }\n}\n```", "```js\n// store/actions.js\nimport axios from 'axios'\n\nexport default {\n  async login({ commit }, { username, password }) {\n    try {\n      const { data } = await axios.post('/api/login', { username,\n        password })\n      commit('setAuth', data)\n    } catch (error) {\n      // handle error...\n    }\n  },\n\n  async logout({ commit }) {\n    await axios.post('/api/logout')\n    commit('setAuth', null)\n  }\n}\n```", "```js\n// store/index.js\nexport const actions = {\n  nuxtServerInit({ commit }, { req }) {\n    if (req.session && req.session.auth) {\n      commit('setAuth', req.session.auth)\n    }\n  }\n}\n```", "```js\n// pages/index.vue\n<form v-if=\"!$store.state.auth\" @submit.prevent=\"login\">\n  <p v-if=\"error\" class=\"error\">{{ error }}</p>\n  <p>Username: <input v-model=\"username\" type=\"text\"\n     name=\"username\"></p>\n  <p>Password: <input v-model=\"password\" type=\"password\" \n     name=\"password\"></p>\n  <button type=\"submit\">Login</button>\n</form>\n\nexport default {\n  data () {\n    return {\n      error: null,\n      username: '',\n      password: ''\n    }\n  },\n  methods: {\n    async login () { ... },\n    async logout () { ... }\n  }\n}\n```", "```js\n// Connect\nconst connect = require('connect')\nconst app = connect()\napp.use((req, res, next) => res.end('Hello World'))\n\n// Express\nconst express = require('express')\nconst app = express()\napp.get('/', (req, res, next) => res.send('Hello World'))\n\n// Koa\nconst Koa = require('koa')\nconst app = new Koa()\napp.use(async (ctx, next) => ctx.body = 'Hello World')\n```", "```js\n// nuxt.config.js\nexport default {\n  serverMiddleware: [\n    '~/api'\n  ]\n}\n```", "```js\n// api/index.js\nimport Koa from 'koa'\nimport Router from 'koa-router'\n\nrouter.get('/', async (ctx, next) => {\n  ctx.type = 'json'\n  ctx.body = {\n    message: 'Hello World!'\n  }\n})\n\napp.use(router.routes())\napp.use(router.allowedMethods())\n\n// Export the server middleware\nexport default {\n  path: '/api',\n  handler: app.listen()\n}\n```", "```js\n// api/index.js\nimport bodyParser from 'koa-bodyparser'\nimport session from 'koa-session'\n\nconst CONFIG = {\n  key: 'koa:sess',\n  maxAge: 60000,\n}\n\napp.use(session(CONFIG, app))\napp.use(bodyParser())\n```", "```js\n// api/index.js\nrouter.post('/login', async (ctx, next) => {\n  let request = ctx.request.body || {}\n  if (request.username === 'demo' && request.password === 'demo') {\n    ctx.session.auth = { username: 'demo' }\n    ctx.body = {\n      username: 'demo'\n    }\n  } else {\n    ctx.throw(401, 'Bad credentials')\n  }\n})\n\nrouter.post('/logout', async (ctx, next) => {\n  ctx.session = null\n  ctx.body = { ok: true }\n})\n```", "```js\n// store/index.js\nexport const actions = {\n  nuxtServerInit({ commit }, { req }) {\n    // ...\n  }\n}\n```", "```js\n// pages/index.vue\n<form v-if=\"!$store.state.auth\" @submit.prevent=\"login\">\n  //...\n</form>\n\nexport default {\n  methods: {\n    async login () { ... },\n    async logout () { ... }\n  }\n}\n```", "```js\n// nuxt.config.js\nserverMiddleware: [\n  { path: '/api', handler: '~/api/index.js' }\n]\n```", "```js\n// api/index.js\nexport default function (req, res, next) {\n  res.end('Hello world!')\n}\n```"]