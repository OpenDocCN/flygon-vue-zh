["```js\nimport jsdom from 'jsdom'\nconst { JSDOM } = jsdom\n```", "```js\nconst dom = new JSDOM(<!DOCTYPE html><p>Hello World</p>)\nconsole.log(dom.window.document.querySelector('p').textContent)\n```", "```js\n$ npm i jsdom --save-dev\n$ npm i jquery --save-dev\n```", "```js\n// src/modules/public/home/_routes/index.js\nimport Router from 'koa-router'\nimport jsdom from 'jsdom'\n\nconst { JSDOM } = jsdom\nconst router = new Router()\n\nconst html = '<!DOCTYPE html><p>Hello World</p>'\nconst dom = new JSDOM(html)\nconst window = dom.window\nconst text = window.document.querySelector('p').textContent\n```", "```js\nrouter.get('/', async (ctx, next) => {\n  ctx.type = 'json'\n  ctx.body = {\n    message: text\n  }\n})\n```", "```js\n{\"status\":200,\"data\":{\"message\":\"Hello world\"}}\n```", "```js\n// src/modules/public/movie/_routes/index.js\nconst url = 'https://www.imdb.com/movies-in-theaters/'\nconst { data } = await axios.get(url)\n\nconst dom = new JSDOM(data)\nconst $ = (require('jquery'))(dom.window)\n```", "```js\nvar items = $('.list_item')\nvar list = []\n$.each(items, function( key, item ) {\n  var movieName = $('h4 a', item).text()\n  var movieShowTime = $('h4 span', item).text()\n  var movie = {\n    name: movieName,\n    showTime: movieShowTime\n  }\n  list.push(movie)\n})\n```", "```js\nctx.type = 'json'\nctx.body = {\n  list: list\n}\n```", "```js\n{\n  \"status\": 200,\n  \"data\": {\n    \"list\": [{\n      \"name\": \" Onward (2020)\",\n      \"showTime\": \"\"\n    }, {\n      \"name\": \" Finding the Way Back (2020)\",\n      \"showTime\": \"\"\n    },\n    ...\n    ...\n    ]\n  }\n}\n```", "```js\n$ npm i ava --save-dev\n```", "```js\n$ npm i @babel/polyfill\n$ npm i @babel/core --save-dev\n$ npm i @babel/preset-env --save-dev\n$ npm i @babel/register --save-dev\n```", "```js\n// package.json\n{\n  \"scripts\": {\n    \"test\": \"ava --verbose\",\n    \"test:watch\": \"ava --watch\"\n  },\n  \"ava\": {\n    \"require\": [\n      \"./setup.js\",\n      \"@babel/polyfill\"\n    ],\n    \"files\": [\n      \"test/**/*\"\n    ]\n  }\n}\n```", "```js\n// setup.js\nrequire('@babel/register')({\n  babelrc: false,\n  presets: ['@babel/preset-env']\n})\n```", "```js\n// src/hello.js\nexport default class Greeter {\n  static greet () {\n    return 'hello world'\n  }\n}\n\n// src/add.js\nexport default function (num1, num2) {\n  return num1 + num2\n}\n```", "```js\n// test/hello.js\nimport test from 'ava'\nimport hello from '../src/hello'\n\ntest('should say hello world', t => {\n  t.is('hello world', hello.greet())\n})\n```", "```js\n// test/add.js\nimport test from 'ava'\nimport add from '../src/add'\n\ntest('amount should be 50', t => {\n  t.is(add(10, 50), 60)\n})\n```", "```js\n$ npm run test\n```", "```js\n$ npm run test:watch\n```", "```js\n\u2713 add \u203a amount should be 50\n\u2713 hello \u203a should say hello world\n\n2 tests passed\n```", "```js\n$ npm i ava --save-dev\n$ npm i jsdom --save-dev\n```", "```js\n$ npm i @babel/polyfill\n$ npm i @babel/core --save-dev\n$ npm i @babel/preset-env --save-dev\n$ npm i @babel/register --save-dev\n```", "```js\n// package.json\n{\n  \"scripts\": {\n    \"test\": \"ava --verbose\",\n    \"test:watch\": \"ava --watch\"\n  },\n  \"ava\": {\n    \"require\": [\n      \"./setup.js\",\n      \"@babel/polyfill\"\n    ],\n    \"files\": [\n      \"test/**/*\"\n    ]\n  }\n}\n```", "```js\n// setup.js\nrequire('@babel/register')({\n  babelrc: false,\n  presets: ['@babel/preset-env']\n})\n```", "```js\n// test/tests.js\nimport test from 'ava'\nimport { Nuxt, Builder } from 'nuxt'\nimport { resolve } from 'path'\n\nlet nuxt = null\n\ntest.before('Init Nuxt.js', async t => {\n  const rootDir = resolve(__dirname, '..')\n  let config = {}\n  try { config = require(resolve(rootDir, 'nuxt.config.js')) } \n   catch (e) {}\n  config.rootDir = rootDir\n  config.dev = false\n  config.mode = 'universal'\n  nuxt = new Nuxt(config)\n  await new Builder(nuxt).build()\n  nuxt.listen(5000, 'localhost')\n})\n\n// write your tests here...\n\ntest.after('Closing server', t => {\n  nuxt.close()\n})\n```", "```js\n// test/tests.js\ntest('Route / exits and renders correct HTML', async (t) => {\n  let context = {}\n  const { html } = await nuxt.renderRoute('/', context)\n  t.true(html.includes('<p class=\"blue\">My marvelous Nuxt.js \n   project</p>'))\n})\n```", "```js\n// test/tests.js\ntest('Route /about exits and renders correct HTML', async (t) => {\n  let context = {}\n  const { html } = await nuxt.renderRoute('/about', context)\n  t.true(html.includes('<h1>About page</h1>'))\n  t.true(html.includes('<p class=\"blue\">Something awesome!</p>'))\n})\n```", "```js\n// test/tests.js\ntest('Route /about exists and renders correct HTML and style', \nasync (t) => {\n\n  function hexify (number) {\n    const hexChars = \n     ['0','1','2','3','4','5','6','7','8','9','a','b',\n      'c','d','e','f']\n    if (isNaN(number)) {\n      return '00'\n    }\n    return hexChars[(number - number % 16) / 16] + \n     hexChars[number % 16]\n  }\n\n  const window = await nuxt.renderAndGetWindow(\n   'http://localhost:5000/about')\n  const element = window.document.querySelector('.blue')\n  const rgb = window.getComputedStyle(element).color.match(/\\d+/g)\n  const hex = '' + hexify(rgb[0]) + hexify(rgb[1]) + hexify(rgb[2])\n\n  t.not(element, null)\n  t.is(element.textContent, 'Something awesome!')\n  t.is(element.className, 'blue')\n  t.is(hex, '0000ff')\n})\n```", "```js\n\u2713 Route / exits and renders correct HTML (369ms)\n\u2713 Route /about exits and renders correct HTML (369ms)\n\u2713 Route /about exists and renders correct HTML and style (543ms)\n\n3 tests passed\n```", "```js\n$ npm i nightwatch --save-dev\n```", "```js\n$ npm install geckodriver --save-dev\n```", "```js\n$ npm i selenium-server --save-dev\n```", "```js\n// package.json\n{\n  \"scripts\": {\n    \"test\": \"nightwatch\"\n  }\n}\n```", "```js\n// nightwatch.json\n{\n  \"src_folders\" : [\"tests\"],\n\n  \"webdriver\" : {\n    \"start_process\": true,\n    \"server_path\": \"node_modules/.bin/geckodriver\",\n    \"port\": 4444\n  },\n\n  \"test_settings\" : {\n    \"default\" : {\n      \"desiredCapabilities\": {\n        \"browserName\": \"firefox\"\n      }\n    }\n  },\n\n  \"launch_url\": \"https://github.com/lautiamkok\"\n}\n```", "```js\n// nightwatch.conf.js\nconst geckodriver = require(\"geckodriver\")\nmodule.exports = (function (settings) {\n  settings.test_workers = false\n  settings.webdriver.server_path = geckodriver.path\n  return settings\n})(require(\"./nightwatch.json\"))\n```", "```js\n// tests/demo.js\nmodule.exports = {\n  'Demo test' : function (browser) {\n    browser\n      .url(browser.launchUrl)\n      // write your tests here...\n      .end()\n  }\n}\n```", "```js\n// tests/github.js\nmodule.exports = {\n  'Demo test GitHub' : function (browser) {\n    browser\n      .url(browser.launchUrl)\n      .waitForElementVisible('body', 1000)\n      .assert.title('lautiamkok (LAU TIAM KOK) \u00b7 GitHub')\n      .assert.visible('input[type=text][placeholder=Search]')\n      .setValue('input[type=text][placeholder=Search]', 'nuxt')\n      .waitForElementVisible('li[id=jump-to-suggestion-\n        search-scoped]', 1000)\n      .click('li[id=jump-to-suggestion-search-scoped]')\n      .pause(1000)\n      .assert.visible('ul[class=repo-list]')\n      .assert.containsText('em:first-child', 'nuxt')\n      .end()\n  }\n}\n```", "```js\n[Github] Test Suite\n===================\nRunning: Demo test GitHub\n\n\u2713 Element <body> was visible after 34 milliseconds.\n\u2713 Testing if the page title equals \"lautiamkok (LAU TIAM KOK) \u00b7 \n   GitHub\" - 4 ms.\n\u2713 Testing if element <input[type=text][placeholder=Search]> is \n   visible - 18 ms.\n\u2713 Element <li[id=jump-to-suggestion-search-scoped]> was visible \n   after 533 milliseconds.\n\u2713 Testing if element <ul[class=repo-list]> is visible - 25 ms.\n\u2713 Testing if element <em:first-child> contains text: \"nuxt\"\n  - 28 ms.\n\nOK. 6 assertions passed. (5.809s)\n```", "```js\n$ npm install chromedriver --save-dev\n```", "```js\n// nightwatch.json\n{\n  \"src_folders\" : [\"tests\"],\n\n  \"webdriver\" : {\n    \"start_process\": true,\n    \"server_path\": \"node_modules/.bin/chromedriver\",\n    \"port\": 9515\n  },\n\n  \"test_settings\" : {\n    \"default\" : {\n      \"desiredCapabilities\": {\n        \"browserName\": \"chrome\"\n      }\n    }\n  },\n\n  \"launch_url\": \"http://localhost:3000\"\n}\n```", "```js\n// nightwatch.conf.js\nconst chromedriver = require(\"chromedriver\")\nmodule.exports = (function (settings) {\n  settings.test_workers = false\n  settings.webdriver.server_path = chromedriver.path\n  return settings\n})(require(\"./nightwatch.json\"))\n```", "```js\n// tests/login.js\nmodule.exports = {\n  'Local login test' : function (browser) {\n    browser\n      .url(browser.launchUrl + '/login')\n      .waitForElementVisible('body', 1000)\n      .assert.title('nuxt-e2e-tests')\n      .assert.containsText('h1', 'Please login to see the \n       secret content')\n      .assert.visible('input[type=text][name=username]')\n      .assert.visible('input[type=password][name=password]')\n      .setValue('input[type=text][name=username]', 'demo')\n      .setValue('input[type=password][name=password]', \n       '123123')\n      .click('button[type=submit]')\n      .pause(1000)\n      .assert.containsText('h2', 'Hello Alexandre!')\n      .end()\n  }\n}\n```", "```js\n[Login] Test Suite\n==================\nRunning: Local login test\n\n\u2713 Element <body> was visible after 28 milliseconds.\n\u2713 Testing if the page title equals \"nuxt-e2e-tests\" - 4 ms.\n\u2713 Testing if element <h1> contains text: \"Please login to see the \n   secret content\" - 27 ms.\n\u2713 Testing if element <input[type=text][name=username]> is \n   visible - 25 ms.\n\u2713 Testing if element <input[type=password][name=password]> is \n   visible - 25 ms.\n\u2713 Testing if element <h2> contains text: \"Hello Alexandre!\" \n  - 75 ms.\n\nOK. 6 assertions passed. (1.613s)\n```"]