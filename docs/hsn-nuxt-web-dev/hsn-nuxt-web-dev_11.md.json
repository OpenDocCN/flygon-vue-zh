["```js\n$ npm i backpack-core\n```", "```js\n{\n  \"scripts\": {\n    \"dev\": \"backpack\"\n  }\n}\n```", "```js\n// backpack.config.js\nmodule.exports = {\n  webpack: (config, options, webpack) => {\n    // ....\n    return config\n  }\n}\n```", "```js\nwebpack: (config, options, webpack) => {\n  config.entry.main = './server/index.js'\n  return config\n}\n```", "```js\n$ npm run dev\n```", "```js\n$ npm i express\n```", "```js\n// package.json\n\"scripts\": {\n  \"dev\": \"backpack\",\n  \"build\": \"backpack build\",\n  \"start\": \"cross-env NODE_ENV=production node build/main.js\"\n}\n```", "```js\n// backpack.config.js\nmodule.exports = {\n  webpack: (config, options, webpack) => {\n    config.entry.main = './server/index.js'\n    return config\n  }\n}\n```", "```js\n// server/index.js\nimport express from 'express'\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) =>\n  res.send('Hello World')\n)\n\napp.listen(port, () =>\n  console.log(Example app listening on port ${port}!)\n)\n```", "```js\n$ npm run dev\n```", "```js\n$ npm i koa\n```", "```js\n// src/index.js\nconst Koa = require('koa')\nconst app = new Koa()\n\napp.use(async ctx => {\n  ctx.body = 'Hello World'\n})\napp.listen(3000)\n```", "```js\n$ npm run dev\n```", "```js\napp.use(async ctx => {\n  ctx.request\n  ctx.response\n})\n```", "```js\n// src/index.js\nconst Koa = require('koa')\nconst app = new Koa()\n\napp.use(async ctx => {\n  console.log('Hello World')\n  ctx.body = 'Hello World'\n})\napp.listen(3000)\n```", "```js\napp.use(async (ctx, next) => {\n  console.log('Time started at: ', Date.now())\n  await next()\n})\n\napp.use(async (ctx, next) => {\n  console.log('I am the first')\n  await next()\n  console.log('I am the last')\n})\n\napp.use(async (ctx, next) => {\n  console.log('I am the second')\n  await next()\n  console.log('I am the third')\n})\n```", "```js\nTime started at: 1554647742894\nI am the first\nI am the second\nHello World\nI am the third\nI am the last\n```", "```js\n$ npm i koa-router\n```", "```js\n// src/index.js\nconst Router = require('koa-router')\nconst router = new Router()\n\nrouter.get('/', (ctx, next) => {\n  ctx.body = 'Hello World'\n})\n\napp\n  .use(router.routes())\n  .use(router.allowedMethods())\n```", "```js\n$ npm i koa-bodyparser\n```", "```js\n// src/index.js\nconst bodyParser = require('koa-bodyparser')\napp.use(bodyParser())\n\nrouter.post('/post', (ctx, next) => {\n  ctx.body = ctx.request.body\n})\n```", "```js\n// application/x-www-form-urlencoding\n<form action=\"/update\" method=\"post\">\n  //...\n</form>\n\n// multipart/form-data\n<form action=\"/update\" method=\"post\" encrypt=\"multipart/form-data\">\n  //...\n</form>\n```", "```js\nctx.body = ctx.request.body\n```", "```js\n$ npm i koa-favicon\n```", "```js\n// src/index.js\nconst favicon = require('koa-favicon')\napp.use(favicon('public/favicon.ico'))\n```", "```js\n$ npm i koa-static\n```", "```js\nconst serve = require('koa-static')\napp.use(serve('.'))\napp.use(serve('static/fixtures'))\n```", "```js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 nuxt.config.js\n\u251c\u2500\u2500 server\n\u2502 \u251c\u2500\u2500 config\n\u2502 \u2502 \u2514\u2500\u2500 ...\n\u2502 \u251c\u2500\u2500 public\n\u2502 \u2502 \u2514\u2500\u2500 ...\n\u2502 \u251c\u2500\u2500 static\n\u2502 \u2502 \u2514\u2500\u2500 ...\n\u2502 \u2514\u2500\u2500 index.js\n\u2514\u2500\u2500 pages\n    \u2514\u2500\u2500 ...\n```", "```js\n// package.json\n\"scripts\": {\n  \"dev\": \"backpack\",\n  \"build\": \"nuxt build && backpack build\",\n  \"start\": \"cross-env NODE_ENV=production node build/main.js\",\n  \"generate\": \"nuxt generate\"\n}\n```", "```js\n// backpack.config.js\nmodule.exports = {\n  webpack: (config, options, webpack) => {\n    config.entry.main = './server/index.js'\n    return config\n  }\n}\n```", "```js\n// server/index.js\nimport Koa from 'koa'\nimport consola from 'consola'\nimport { Nuxt, Builder } from 'nuxt'\nconst app = new Koa()\nconst nuxt = new Nuxt(config)\n\nasync function start() {\n  app.use((ctx) => {\n    ctx.status = 200\n    ctx.respond = false\n    ctx.req.ctx = ctx\n    nuxt.render(ctx.req, ctx.res)\n  })\n}\nstart()\n```", "```js\n// server/index.js\nlet config = require('../nuxt.config.js')\nconfig.dev = !(app.env === 'production')\n\nif (config.dev) {\n  const builder = new Builder(nuxt)\n  await builder.build()\n} else {\n  await nuxt.ready()\n}\n```", "```js\napp.listen(port, host)\nconsola.ready({\n  message: `Server listening on http://${host}:${port}`,\n  badge: true\n})\n```", "```js\n$ npm run dev\n```", "```js\n$ npm i koa-route\n$ npm i koa-static\n```", "```js\n// server/config/index.js\nexport default {\n  static_dir: {\n    root: '../static'\n  }\n}\n```", "```js\n// server/routes.js\nimport Router from 'koa-router'\nconst router = new Router({ prefix: '/api' })\n\nconst users = [\n  { id: 1, name: 'Alexandre' },\n  { id: 2, name: 'Pooya' },\n  { id: 3, name: 'S\u00e9bastien' }\n]\n\nrouter.get('/', async (ctx, next) => {\n  ctx.type = 'json'\n  ctx.body = {\n    message: 'Hello World!'\n  }\n})\n\nrouter.get('/users', async (ctx, next) => {\n  ctx.type = 'json'\n  ctx.body = users\n})\n\nrouter.get('/users/:id', async (ctx, next) => {\n  const id = parseInt(ctx.params.id)\n  const found = users.find(function (user) {\n    return user.id == id\n  })\n  if (found) {\n    ctx.body = found\n  } else {\n    ctx.throw(404, 'user not found')\n  }\n})\n```", "```js\n// server/middlewares.js\nimport serve from 'koa-static'\nimport bodyParser from 'koa-bodyparser'\nimport config from './config'\nimport routes from './routes'\n\nexport default (app) => {\n  app.use(serve(config.static_dir.root))\n  app.use(bodyParser())\n  app.use(routes.routes(), routes.allowedMethods())\n}\n```", "```js\n{\"status\":<status code>,\"data\":<data>}\n```", "```js\n{\"status\":<status code>,\"message\":<error message>}\n```", "```js\napp.use(async (ctx, next) => {\n  try {\n    await next()\n    if (ctx.status === 404) {\n      ctx.throw(404)\n    }\n    if (ctx.status === 200) {\n      ctx.body = {\n        status: 200,\n        data: ctx.body\n      }\n    }\n  } catch (err) {\n    ctx.status = err.status || 500\n    ctx.type = 'json'\n    ctx.body = {\n      status: ctx.status,\n      message: err.message\n    }\n    ctx.app.emit('error', err, ctx)\n  }\n})\n```", "```js\n{\"status\":200,\"data\":{\"message\":\"Hello World!\"}}\n```", "```js\n// server/index.js\nimport middlewares from './middlewares'\n\nmiddlewares(app)\napp.use(ctx => {\n  ...\n  nuxt.render(ctx.req, ctx.res)\n})\n```", "```js\n$ npm run dev\n```", "```js\n{\"status\":200,\"data\":{\"message\":\"Hello World!\"}}\n```", "```js\n{\"status\":200,\"data\":[{\"id\":1,\"name\":\"Alexandre\"},{\"id\":2,\"name\":\"Pooya\"},{\"id\":3,\"name\":\"S\u00e9bastien\"}]}\n```", "```js\n{\"status\":200,\"data\":{\"id\":1,\"name\":\"Alexandre\"}}\n```", "```js\nexport default {\n  asyncData (context) {\n    // ...\n  }\n}\n```", "```js\n// pages/returning-promise.vue\nasyncData (context) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Hello World by returning a Promise')\n    }, 1000)\n  })\n\n  return promise.then((value) => {\n    return { message: value }\n  })\n}\n```", "```js\n// pages/using-async.vue\nasync asyncData (context) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Hello World by using async/await')\n    }, 2000)\n  })\n\n  const result = await promise\n  return { message: result }\n}\n```", "```js\n// pages/merging-data.vue\n<p>{{ message }}</p>\n\nexport default {\n  data () {\n    return { message: 'Hello World' }\n  },\n  asyncData (context) {\n    return { message: 'Data Merged' }\n  }\n}\n```", "```js\n<p>Data Merged</p>\n```", "```js\n// pages/index.vue\n<p>{{ host }}</p>\n\nexport default {\n  asyncData ({ req, res }) {\n    if (process.server) {\n     return { host: req.headers.host }\n    }\n    return { host: '' }\n  }\n}\n```", "```js\n// pages/users/_id.vue\n<p>{{ id }}</p>\n\nexport default {\n  asyncData ({ params }) {\n    return { id: params.id }\n  }\n}\n```", "```js\n// pages/users/index.vue\n<p>{{ id }}</p>\n<ul>\n  <li>\n    <nuxt-link :to=\"'users?id=1'\">1</nuxt-link>\n    <nuxt-link :to=\"'users?id=2'\">2</nuxt-link>\n  </li>\n</ul>\n\nexport default {\n  asyncData ({ query }) {\n    return { id: query.id }\n  },\n  watchQuery: ['id']\n}\n```", "```js\n// pages/users/error.vue\nexport default {\n  asyncData ({ error }) {\n    return error({\n      statusCode: 404,\n      message: 'User not found'\n    })\n  }\n}\n```", "```js\n// pages/users/error-custom.vue\nexport default {\n  asyncData ({ error }) {\n    return error({\n      status: 404,\n      text: 'User not found'\n    })\n  }\n}\n```", "```js\n// layouts/error.vue\n<template>\n  <div>\n    <h1>Custom Error Page</h1>\n    <h2>{{ error.status }} Error</h2>\n    <p>{{ error.text }}</p>\n    <nuxt-link to=\"/\">Home page</nuxt-link>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['error'],\n  layout: 'layout-error'\n}\n</script>\n```", "```js\n// layouts/layout-error.vue\n<template>\n  <nuxt />\n</template>\n```", "```js\n$ npm i axios\n```", "```js\naxios.get('https://jsonplaceholder.typicode.com/posts')\n```", "```js\naxios.get('/posts')\n```", "```js\n// plugins/axios-api.js\nimport axios from 'axios'\n\nexport default axios.create({\n  baseURL: 'http://localhost:3000'\n})\n```", "```js\nimport axios from '~/plugins/axios-api'\n```", "```js\n// pages/users/index.vue\n<li v-for=\"user in users\" v-bind:key=\"user.id\">\n  <nuxt-link :to=\"'users/' + user.id\">\n    {{ user.name }}\n  </nuxt-link>\n</li>\n\n<script>\nimport axios from '~/plugins/axios-api'\nexport default {\n  async asyncData({error}) {\n    try {\n      let { data } = await axios.get('/api/users')\n      return { users: data.data }\n    } catch (e) {\n      // handle error\n    }\n  }\n}\n</script>\n```", "```js\n{\"status\":200,\"data\":[{\"id\":1,\"name\":\"Alexandre\"},{\"id\":2,\"name\":\"Pooya\"},{\"id\":3,\"name\":\"S\u00e9bastien\"}]}\n```", "```js\n// pages/users/_id.vue\n<h2>\n  {{ user.name }}\n</h2>\n\n<script>\nimport axios from '~/plugins/axios-api'\nexport default {\n  name: 'id',\n  async asyncData ({ params, error }) {\n    try {\n      let { data } = await axios.get('/api/users/' + params.id)\n      return { user: data.data }\n    } catch (e) {\n      // handle error\n    }\n  }\n}\n</script>\n```", "```js\n{\"status\":200,\"data\":{\"id\":1,\"name\":\"Alexandre\"}}\n```", "```js\n// pages/users-query.vue\n<ul>\n  <li v-for=\"user in users\" v-bind:key=\"user.id\">\n    <nuxt-link :to=\"'users-query?id=' + user.id\">\n      {{ user.name }}\n    </nuxt-link>\n  </li>\n</ul>\n<p>{{ user }}</p>\n```", "```js\n// pages/users-query.vue\nimport axios from '~/plugins/axios-api'\n\nexport default {\n  async asyncData ({ query, error }) {\n    var user = null\n    if (Object.keys(query).length > 0) {\n      try {\n        let { data } = await axios.get('/api/users/' + query.id)\n        user = data.data\n      } catch (e) {\n        // handle error\n      }\n    }\n\n    try {\n      let { data } = await axios.get('/api/users')\n      return {\n        users: data.data,\n        user: user\n      }\n    } catch (e) {\n      // handle error\n    }\n  },\n  watchQuery: true\n}\n```", "```js\n{ \"id\": 1, \"name\": \"Alexandre\" }\n```"]