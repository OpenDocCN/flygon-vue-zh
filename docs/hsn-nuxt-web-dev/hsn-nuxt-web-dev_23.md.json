["```js\n$ source /etc/lsb-release && echo \"deb https://download.rethinkdb.com/apt $DISTRIB_CODENAME main\" | sudo tee /etc/apt/sources.list.d/rethinkdb.list\n```", "```js\n$ wget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -\n```", "```js\n$ sudo apt update\n$ sudo apt install rethinkdb\n```", "```js\n$ rethinkdb -v\n```", "```js\nrethinkdb 2.4.0~0eoan (CLANG 9.0.0 (tags/RELEASE_900/final))\n```", "```js\n$ sudo apt purge rethinkdb.\n$ sudo rm -r /var/lib/rethinkdb\n```", "```js\nr.dbCreate('nuxtdb')\n```", "```js\n{\n  \"config_changes\": [\n    {\n      \"new_val\": {\n      \"id\": \"353d11a4-adc8-4958-a4ae-a82c996dcb9f\" ,\n      \"name\": \"nuxtdb\"\n    } ,\n      \"old_val\": null\n    }\n  ] ,\n  \"dbs_created\": 1\n}\n```", "```js\nr.db('nuxtdb').tableCreate('user')\n```", "```js\n{\n  \"config_changes\": [{\n    \"new_val\": {\n      \"db\": \"nuxtdb\",\n      \"durability\": \"hard\",\n      \"id\": \"259e0066-1ffe-4064-8b24-d1c82e515a4a\",\n      \"indexes\": [],\n      \"name\": \"user\",\n      \"primary_key\": \"id\",\n      \"shards\": [{\n        \"nonvoting_replicas\": [],\n        \"primary_replica\": \"lau_desktop_opw\",\n        \"replicas\": [\"lau_desktop_opw\"]\n      }],\n      \"write_acks\": \"majority\",\n      \"write_hook\": null\n    },\n    \"old_val\": null\n  }],\n  \"tables_created\": 1\n}\n```", "```js\nr.db('nuxtdb').table('user').insert([\n { name: \"Jane Doe\", slug: \"jane\" },\n { name: \"John Doe\", slug: \"john\" }\n])\n```", "```js\n{\n  \"deleted\": 0,\n  \"errors\": 0,\n  \"generated_keys\": [\n    \"7f7d768d-0efd-447d-8605-2d460a381944\",\n    \"a144001c-d47e-4e20-a570-a29968980d0f\"\n  ],\n  \"inserted\": 2,\n  \"replaced\": 0,\n  \"skipped\": 0,\n  \"unchanged\": 0\n}\n```", "```js\nr.db('nuxtdb').table('user')\n```", "```js\n[{\n  \"id\": \"7f7d768d-0efd-447d-8605-2d460a381944\",\n  \"name\": \"Jane Doe\",\n  \"slug\": \"jane\"\n}, {\n  \"id\": \"a144001c-d47e-4e20-a570-a29968980d0f\",\n  \"name\": \"John Doe\",\n  \"slug\": \"john\"\n}]\n```", "```js\nr.db('nuxtdb').table('user').count()\n```", "```js\nr.db('nuxtdb').table('user')\n.filter(\n  r.row(\"slug\").eq(\"john\")\n)\n.update({\n  name: \"John Wick\"\n})\n```", "```js\n{\n  \"deleted\": 0,\n  \"errors\": 0,\n  \"inserted\": 0,\n  \"replaced\": 1,\n  \"skipped\": 0,\n  \"unchanged\": 0\n}\n```", "```js\nr.db('nuxtdb').table('user')\n.filter(\n  r.row(\"slug\").eq(\"john\")\n)\n.delete()\n```", "```js\n{\n  \"deleted\": 1,\n  \"errors\": 0,\n  \"inserted\": 0,\n  \"replaced\": 0,\n  \"skipped\": 0,\n  \"unchanged\": 0\n}\n```", "```js\nr.db('nuxtdb').table('user').delete()\n```", "```js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 babel.config.js\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 public\n\u2502 \u251c\u2500\u2500 index.html\n\u2502 \u2514\u2500\u2500 favicon.ico\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 App.vue\n    \u251c\u2500\u2500 main.js\n    \u251c\u2500\u2500 router.js\n    \u251c\u2500\u2500 components\n    \u2502 \u2514\u2500\u2500 HelloWorld.vue\n    \u2514\u2500\u2500 assets\n        \u2514\u2500\u2500 logo.png\n```", "```js\nbackend\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 backpack.config.js\n\u251c\u2500\u2500 static\n\u2502 \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 index.vue\n    \u251c\u2500\u2500 ...\n    \u251c\u2500\u2500 modules\n    \u2502 \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 core\n        \u2514\u2500\u2500 ...\n```", "```js\nbackend\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 backpack.config.js\n\u251c\u2500\u2500 middlewares.js\n\u251c\u2500\u2500 routes.js\n\u251c\u2500\u2500 configs\n\u2502 \u251c\u2500\u2500 index.js\n\u2502 \u2514\u2500\u2500 rethinkdb.js\n\u251c\u2500\u2500 core\n\u2502 \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 middlewares\n\u2502 \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 modules\n\u2502 \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 public\n    \u2514\u2500\u2500 index.js\n```", "```js\n// backpack.config.js\nmodule.exports = {\n  webpack: (config, options, webpack) => {\n    config.entry.main = './public/index.js'\n    return config\n  }\n}\n```", "```js\n// backpack.config.js\nconst path = require('path')\n\nconfig.resolve = {\n  alias: {\n    Configs: path.resolve(__dirname, 'configs/'),\n    Core: path.resolve(__dirname, 'core/'),\n    Modules: path.resolve(__dirname, 'modules/'),\n    Middlewares: path.resolve(__dirname, 'middlewares/')\n  }\n}\n```", "```js\nimport notFound from '../../Middlewares/notFound'\n```", "```js\nimport notFound from 'Middlewares/notFound'\n```", "```js\n$ npm i rethinkdb\n```", "```js\n// configs/rethinkdb.js\nexport default {\n  host: 'localhost',\n  port: 28015,\n  dbname: 'nuxtdb'\n}\n```", "```js\n// core/database/rethinkdb/connection.js\nimport config from 'Configs/rethinkdb'\nimport rethink from'rethinkdb'\n\nconst c = async() => {\n  const connection = await rethink.connect({\n    host: config.host,\n    port: config.port,\n    db: config.dbname\n  })\n  return connection\n}\nexport default c\n```", "```js\n// middlewares/database/rdb/connection/open.js\nimport config from 'Configs/rethinkdb'\nimport rdb from'rethinkdb'\n\nexport default async (ctx, next) => {\n  ctx._rdbConn = await rdb.connect({\n    host: config.host,\n    port: config.port,\n    db: config.dbname\n  })\n  await next()\n}\n```", "```js\n// middlewares/database/rdb/connection/close.js\nimport config from 'Configs/rethinkdb'\nimport rdb from'rethinkdb'\n\nexport default async (ctx, next) => {\n  ctx._rdbConn.close()\n  await next()\n}\n```", "```js\n// middlewares.js\nimport routes from './routes'\nimport rdbOpenConnection from 'Middlewares/database/rdb/connection/open'\nimport rdbCloseConnection from 'Middlewares/database/rdb/connection/close'\n\nexport default (app) => {\n  //...\n  app.use(rdbOpenConnection)\n  app.use(routes.routes(), routes.allowedMethods())\n  app.use(rdbCloseConnection)\n}\n```", "```js\n// modules/user/_routes/index.js\nimport Router from 'koa-router'\nimport rdb from 'rethinkdb'\n\nconst router = new Router()\nrouter.get('/', async (ctx, next) => {\n  try {\n    // perform verification on the incoming parameters...\n    // perform a CRUD operation:\n    let result = await rdb.table('user')\n      .run(ctx._rdbConn)\n\n    ctx.type = 'json'\n    ctx.body = result\n    await next()\n\n  } catch (err) {\n    ctx.throw(500, err)\n  }\n})\nexport default router\n```", "```js\n// modules/user/_routes/create-user.js\nrouter.post('/user', async (ctx, next) => {\n  let result = await rdb.table('user')\n    .insert(document, {returnChanges: true})\n    .run(ctx._rdbConn)\n\n  if (result.inserted !== 1) {\n    ctx.throw(404, 'insert user failed')\n  }\n\n  ctx.type = 'json'\n  ctx.body = result\n  await next()\n})\n```", "```js\n// modules/user/_routes/fetch-user.js\nrouter.get('/:slug', async (ctx, next) => {\n  const slug = ctx.params.slug\n  let user = await rdb.table('user')\n    .filter(searchQuery)\n    .nth(0)\n    .default(null)\n    .run(ctx._rdbConn)\n\n  if (!user) {\n    ctx.throw(404, 'user not found')\n  }\n\n  ctx.type = 'json'\n  ctx.body = user\n  await next()\n})\n```", "```js\n// modules/user/_routes/update-user.js\nrouter.put('/user', async (ctx, next) => {\n  let body = ctx.request.body || {}\n  let objectId = body.id\n\n  let timestamp = Date.now()\n  let updateQuery = {\n    name: body.name,\n    slug: body.slug,\n    updatedAt: timestamp\n  }\n\n  let result = await rdb.table('user')\n    .get(objectId)\n    .update(updateQuery, {returnChanges: true})\n    .run(ctx._rdbConn)\n\n  if (result.replaced !== 1) {\n    ctx.throw(404, 'update user failed')\n  }\n\n  ctx.type = 'json'\n  ctx.body = result\n  await next()\n})\n```", "```js\n// modules/user/_routes/delete-user.js\nrouter.del('/user', async (ctx, next) => {\n  let body = ctx.request.body || {}\n  let objectId = body.id\n\n  let result = await rdb.table('user')\n    .get(objectId)\n    .delete()\n    .run(ctx._rdbConn)\n\n  if (result.deleted !== 1) {\n    ctx.throw(404, 'delete user failed')\n  }\n\n  ctx.type = 'json'\n  ctx.body = result\n  await next()\n})\n```", "```js\n// modules/user/_routes/index.js\nrouter.get('/', async (ctx, next) => {\n  let cursor = await rdb.table('user')\n    .orderBy(rdb.desc('createdAt'))\n    .run(ctx._rdbConn)\n\n  let users = await cursor.toArray()\n\n  ctx.type = 'json'\n  ctx.body = users\n  await next()\n})\n```", "```js\n$ npm i lodash\n```", "```js\n// core/utils.js\nimport lodash from 'lodash'\n\nfunction sanitise (options, schema) {\n  let data = options || {}\n\n  if (schema === undefined) {\n    const err = new Error('Schema is required.')\n    err.status = 400\n    err.expose = true\n    throw err\n  }\n\n  let keys = lodash.keys(schema)\n  let defaults = lodash.defaults(data, schema)\n  let picked = lodash.pick(defaults, keys)\n\n  return picked\n}\nexport { sanitise }\n```", "```js\n// modules/user/schema.js\nexport default {\n  slug: null,\n  name: null,\n  createdAt: null,\n  updatedAt: null\n}\n```", "```js\n// modules/user/_routes/create-user.js\nlet timestamp = Date.now()\nlet options = {\n  name: body.name,\n  slug: body.slug,\n  createdAt: timestamp,\n  username: 'marymoe',\n  password: '123123'\n}\n\nlet document = sanitise(options, schema)\nlet result = await rdb.table('user')\n  .insert(document, {returnChanges: true})\n  .run(ctx._rdbConn)\n```", "```js\nr.db('nuxtdb').table('user').changes()\n```", "```js\nListening for events...\nWaiting for more results\n```", "```js\nr.db('nuxtdb').table('user').insert([\n  { name: \"Richard Roe\", slug: \"richard\" },\n  { name: \"Marry Moe\", slug: \"marry\" }\n])\n```", "```js\n{\n  \"deleted\": 0,\n  \"errors\": 0,\n  \"generated_keys\": [\n    \"f7305c97-2bc9-4694-81ec-c5acaed1e757\",\n    \"5862e1fa-e51c-4878-a16b-cb8c1f1d91de\"\n  ],\n  \"inserted\": 2,\n  \"replaced\": 0,\n  \"skipped\": 0,\n  \"unchanged\": 0\n}\n```", "```js\n{\n  \"new_val\": {\n    \"id\": \"f7305c97-2bc9-4694-81ec-c5acaed1e757\",\n    \"name\": \"Richard Roe\",\n    \"slug\": \"richard\"\n  },\n  \"old_val\": null\n}\n\n{\n  \"new_val\": {\n    \"id\": \"5862e1fa-e51c-4878-a16b-cb8c1f1d91de\",\n    \"name\": \"Marry Moe\",\n    \"slug\": \"marry\"\n  },\n  \"old_val\": null\n}\n```", "```js\nws://example.com:4000\n```", "```js\n$ npm i socket.io\n```", "```js\n// configs/index.js\nexport default {\n  server: {\n    port: 4000\n  },\n}\n```", "```js\n// backend/koa/public/index.js\nimport Koa from 'koa'\nimport socket from 'socket.io'\nimport http from 'http'\nimport config from 'Configs'\nimport middlewares from '../middlewares'\n\nconst app = new Koa()\nconst host = process.env.HOST || '127.0.0.1'\nconst port = process.env.PORT || config.server.port\nmiddlewares(app)\n\nconst server = http.createServer(app.callback())\nconst io = socket(server)\n\nio.sockets.on('connection', socket => {\n  console.log('a user connected: ' + socket.id)\n  socket.on('disconnect', () => {\n    console.log('user disconnected: ' + socket.id)\n  })\n})\nserver.listen(port, host)\n```", "```js\napp.listen(4000)\n```", "```js\n// frontend/html/socket-client.html\n<script src=\"https://cdn.jsdelivr.net/npm/socket.io-\n client@2/dist/socket.io.js\"></script>\n\n<script>\n  var socket = io('http://localhost:4000/')\n</script>\n```", "```js\na user connected: abeGnarBnELo33vQAAAB\n```", "```js\nuser disconnected: abeGnarBnELo33vQAAAB\n```", "```js\n// backend/koa/public/index.js\nio.sockets.on('connection', socket => {\n  io.emit('emit.onserver', 'Hi client, what you up to?')\n  console.log('Message to client: ' + socket.id)\n})\n```", "```js\n// frontend/html/socket-client.html\nsocket.on('emit.onserver', function (message) {\n  console.log('Message from server: ' + message)\n})\n```", "```js\nMessage to client: abeGnarBnELo33vQAAAB // server side\nMessage from server: Hi client, what you up to? // client side\n```", "```js\n// frontend/html/socket-client.html\n<script\n  src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\"\n  integrity=\"sha256-pasqAKBDmFT4eHoN2ndd6lN370kFiGUFyTiUHWhU7k8=\"\n  crossorigin=\"anonymous\"></script>\n\n<button class=\"button-sent\">Send</button>\n\n$('.button-sent').click(function(e){\n  e.preventDefault()\n\n  var message = 'Hi server, how are you holding up?'\n  socket.emit('emit.onclient', message)\n  console.log('Message sent to server.')\n\n  return false\n})\n```", "```js\n// backend/koa/public/index.js\nsocket.on('emit.onclient', (message) => {\n  console.log('Message from client, '+ socket.id + ' :' + message);\n})\n```", "```js\nMessage sent to server. // client side\nMessage from client, abeGnarBnELo33vQAAAB: Hi server, \nhow are you holding up? // server side\n```", "```js\nr.db('nuxtdb').table('user').changes()\n```", "```js\n$ npm i socket.io\n```", "```js\n// core/database/rethinkdb/changefeeds.js\nimport rdb from 'rethinkdb'\nimport rdbConnection from './connection'\n\nexport default async (io, tableName, eventName) => {\n  try {\n    const connection = await rdbConnection()\n    var cursor = await rdb.table(tableName)\n      .changes()\n      .run(connection)\n\n    cursor.each(function (err, row) {\n      if (err) {\n        throw err\n      }\n      io.emit(eventName, row)\n    })\n  } catch( err ) {\n    console.error(err);\n  }\n}\n\n```", "```js\n// public/index.js\nimport Koa from 'koa'\nimport socket from 'socket.io'\nimport http from 'http'\nimport config from 'Configs'\nimport middlewares from '../middlewares'\nimport rdbChangeFeeds from 'Core/database/rethinkdb/changefeeds'\n\nconst app = new Koa()\nconst host = process.env.HOST || '127.0.0.1'\nconst port = process.env.PORT || config.server.port\nmiddlewares(app)\n\nconst server = http.createServer(app.callback())\nconst io = socket(server)\nio.sockets.on('connection', socket => {\n  //...\n})\n\nrdbChangeFeeds(io, 'user', 'user.changefeeds')\nserver.listen(port, host)\n```", "```js\nusers\n\u251c\u2500\u2500 index.vue\n\u251c\u2500\u2500 _slug.vue\n\u251c\u2500\u2500 add\n\u2502 \u2514\u2500\u2500 index.vue\n\u251c\u2500\u2500 update\n\u2502 \u2514\u2500\u2500 _slug.vue\n\u2514\u2500\u2500 delete\n    \u2514\u2500\u2500 _slug.vue\n```", "```js\n$ npm i socket.io-client\n```", "```js\n// nuxt.config.js\nconst protocol = 'http'\nconst host = process.env.NODE_ENV === 'production' ? 'a-cool-domain-name.com' : 'localhost'\n\nconst ports = {\n  local: '8000',\n  remote: '4000'\n}\n\nconst remoteUrl = protocol + '://' + host + ':' + ports.remote + '/'\n```", "```js\n// nuxt.config.js\nexport default {\n  env: {\n    remoteUrl\n  },\n  server: {\n    port: ports.local,\n    host: host\n  }\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  modules: [\n    '@nuxtjs/axios'\n  ],\n\n  axios: {\n    proxy: true\n  },\n\n  proxy: {\n    '/api/': {\n      target: remoteUrl,\n      pathRewrite: {'^/api/': ''}\n    }\n  }\n}\n```", "```js\n// plugins/socket.io.js\nimport io from 'socket.io-client'\n\nconst remoteUrl = process.env.remoteUrl\nconst socket = io(remoteUrl)\n\nexport default socket\n```", "```js\n// pages/users/index.vue\nimport socket from '~/plugins/socket.io'\n\nexport default {\n  async asyncData ({ error, $axios }) {\n    try {\n      let { data } = await $axios.get('/api/users')\n      return { users: data.data }\n    } catch (err) {\n      // Handle the error.\n    }\n  }\n}\n```", "```js\n// pages/users/index.vue\nexport default {\n  async asyncData ({ error, $axios }) {\n    //...\n  },\n  mounted () {\n    socket.on('user.changefeeds', data => {\n      if (data.new_val === undefined && data.old_val === undefined) {\n        return\n      }\n      //...\n    })\n  }\n}\n```", "```js\n// pages/users/index.vue\nmounted () {\n  //...\n  if(data.old_val === null && data.new_val !== null) {\n    this.users.unshift(data.new_val)\n  }\n}\n```", "```js\n// pages/users/index.vue\nmounted () {\n  //...\n  if(data.new_val === null && data.old_val !== null) {\n    var id = data.old_val.id\n    var index = this.users.map(el => {\n      return el.id\n    }).indexOf(id)\n    this.users.splice(index, 1)\n  }\n}\n```", "```js\n// pages/users/index.vue\nmounted () {\n  //...\n  if(data.new_val !== null && data.old_val !== null) {\n    var id = data.new_val.id\n    var index = this.users.findIndex(item => item.id === id)\n    this.users.splice(index, 1, data.new_val)\n  }\n}\n```", "```js\n// pages/users/index.vue\n<div>\n  <h1>Users</h1>\n  <ul>\n    <li v-for=\"user in users\" v-bind:key=\"user.uuid\">\n      <nuxt-link :to=\"'/users/' + user.slug\">\n        {{ user.name }}\n      </nuxt-link>\n    </li>\n  </ul>\n  <nuxt-link to=\"/users/add\">\n    Add New\n  </nuxt-link>\n</div>\n```", "```js\nListening on: http://localhost:8000/\n```"]