["```js\nhello(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne())\n```", "```js\nhello(\n  reallyLongArg(),\n  omgSoManyParameters(),\n  IShouldRefactorThis(),\n  isThereSeriouslyAnotherOne()\n);\n```", "```js\nfruits({ type: 'citrus' },\n  'orange', 'kiwi')\n\nfruits(\n  { type: 'citrus' },\n  'orange',\n  'kiwi'\n)\n```", "```js\nfruits({ type: 'citrus' }, 'orange', 'kiwi');\n\nfruits({ type: 'citrus' }, 'orange', 'kiwi');\n```", "```js\n$ npm i prettier --save-dev --save-exact\n```", "```js\n$ npx prettier --write src/index.js\n```", "```js\n$ npx prettier --write \"src/**/*\"\n```", "```js\n$ npx prettier --write \"{scripts,config,bin}/**/*\"\n```", "```js\n// prettier.config.js\nmodule.exports = {\n  semi: false,\n  singleQuote: true\n}\n```", "```js\n$ npx prettier --write \"src/**/*\"\n```", "```js\nsrc/config/google.js 40ms\nsrc/config/index.js 11ms\nsrc/core/database/mysql.js 18ms\nsrc/index.js 8ms\n...\n```", "```js\nvar message = {\n  text: \"Hello World\",\n  text: \"qux\"\n}\n```", "```js\nvar message = {\n  text: \"Hello World\",\n  words: \"Hello World\"\n}\n```", "```js\n$ npm i eslint --save-dev\n```", "```js\n$ ./node_modules/.bin/eslint --init\n```", "```js\n? How would you like to use ESLint? To check syntax, find problems,\n  and enforce code style\n? What type of modules does your project use? JavaScript modules (import/export)\n? Which framework does your project use? None of these\n? Where does your code run? (Press <space> to select, <a> to \n  toggle all, <i> to invert selection)Browser\n? How would you like to define a style for your project? Use \n  a popular style guide\n? Which style guide do you want to follow? Standard (https://github.com/standard/standard)\n? What format do you want your config file to be in? JavaScript\n...\n\nSuccessfully created .eslintrc.js file in /path/to/your/project\n```", "```js\n\"scripts\": {\n  \"lint\": \"eslint --ignore-path .gitignore .\",\n  \"lint-fix\": \"eslint --fix --ignore-path .gitignore .\"\n}\n```", "```js\n// .gitignore\nnode_modules\nbuild\nbackpack.config.js\n```", "```js\n$ npm run lint\n```", "```js\n$ npm run lint-fix\n```", "```js\n// eslint-disable-next-line no-unused-vars\nimport authenticate from 'middlewares/authenticate'\n```", "```js\n// .eslintrc.js\nmodule.exports = {\n  'rules': {\n    'no-undef': ['off'],\n    'no-console': ['error']\n    'quotes': ['error', 'double']\n  }\n}\n```", "```js\n// package.json\n\"scripts\": {\n  \"lint\": \"eslint --ignore-path .gitignore .\",\n  \"lint-fix\": \"eslint --fix --ignore-path .gitignore .\"\n}\n```", "```js\n$ npm run lint\n```", "```js\n/src/modules/public/login/_routes/google/me.js \n   36:11  error  A space is required after '{'  object-\n          curly-spacing \n   36:18  error  A space is required before '}' object-\n          curly-spacing \n```", "```js\n/src/modules/public/user/_routes/fetch-user.js \n  9:9  error  'id' is assigned a value but never used  \n       no-unused-vars \n```", "```js\n$ npm i standard --global\n```", "```js\n$ npm i standard --save-dev\n```", "```js\n$ standard\n```", "```js\n$ npx standard\n```", "```js\n// package.json\n{\n  scripts\": {\n    \"jss\": \"standard\",\n    \"jss-fix\": \"standard --fix\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^12.0.1\"\n  },\n  \"standard\": {\n    \"ignore\": [\n      \"/node_modules/\",\n      \"/build/\",\n      \"backpack.config.js\"\n    ]\n  }\n}\n```", "```js\n$ npm run jss\n```", "```js\n$ npm run jss-fix\n```", "```js\n$ npm i eslint-plugin-prettier --save-dev\n$ npm i eslint-config-prettier --save-dev\n```", "```js\n{\n  \"plugins\": [\"prettier\"],\n  \"rules\": {\n    \"prettier/prettier\": \"error\"\n  }\n}\n```", "```js\n{\n  \"extends\": [\"prettier\"]\n}\n```", "```js\n// .eslintrc.js\nmodule.exports = {\n  //...\n  'extends': ['prettier']\n  'plugins': ['prettier'],\n  'rules': {\n    'prettier/prettier': 'error'\n  }\n}\n```", "```js\n{\n  \"scripts\": {\n    \"lint\": \"eslint --ignore-path .gitignore .\",\n    \"lint-fix\": \"eslint --fix --ignore-path .gitignore .\"\n  },\n  \"prettier\": {\n    \"semi\": false,\n    \"singleQuote\": true\n  }\n}\n```", "```js\n$ npx prettier --c \"src/**/*\"\n```", "```js\nChecking formatting...\nAll matched files use Prettier code style!\n```", "```js\n$ npm i eslint-plugin-vue --save-dev\n```", "```js\nnpm WARN eslint-plugin-vue@5.2.3 requires a peer of eslint@^5.0.0\n but none is installed. You must install peer dependencies\n  yourself.\nnpm WARN vue-eslint-parser@5.0.0 requires a peer of eslint@^5.0.0 \n but none is installed. You must install peer dependencies \n  yourself.\n```", "```js\n// .eslintrc.js\nmodule.exports = {\n  extends: [\n    'plugin:vue/recommended'\n  ]\n}\n```", "```js\n// .eslintrc.js\nmodule.exports = {\n  'extends': [\n    'plugin:vue/recommended',\n    'plugin:prettier/recommended'\n  ],\n  'plugins': [\n    'prettier'\n  ]\n}\n```", "```js\n// .eslintrc.js\n'rules': {\n  'vue/v-on-style': ['error', 'longform']\n}\n```", "```js\n<template>\n  <!-- \u2713 GOOD -->\n  <div @click=\"foo\"/>\n\n  <!-- \u2717 BAD -->\n  <div v-on:click=\"foo\"/>\n</template>\n```", "```js\n<template>\n  <!-- \u2713 GOOD -->\n  <div v-on:click=\"foo\"/>\n\n  <!-- \u2717 BAD -->\n  <div @click=\"foo\"/>\n</template>\n```", "```js\n// .eslintrc.js\n'rules': {\n  'vue/html-self-closing': ['error', {\n    'html': {\n      'void': 'always'\n    }\n  }]\n}\n```", "```js\n<template>\n  <!-- \u2713 GOOD -->\n  <MyComponent/>\n\n  <!-- \u2717 BAD -->\n  <MyComponent></MyComponent>\n</template>\n```", "```js\n<template>\n  <!-- \u2713 GOOD -->\n  <img src=\"...\">\n\n  <!-- \u2717 BAD -->\n  <img src=\"...\" />\n</template>\n```", "```js\n// .eslintrc.js\n'rules': {\n  'vue/max-attributes-per-line': 'off'\n}\n```", "```js\n<template>\n  <!-- \u2713 GOOD -->\n  <MyComponent lorem=\"1\"/>\n  <MyComponent\n    lorem=\"1\"\n    ipsum=\"2\"\n  />\n  <MyComponent\n    lorem=\"1\"\n    ipsum=\"2\"\n    dolor=\"3\"\n  />\n\n  <!-- \u2717 BAD -->\n  <MyComponent lorem=\"1\" ipsum=\"2\"/>\n  <MyComponent\n    lorem=\"1\" ipsum=\"2\"\n  />\n  <MyComponent\n    lorem=\"1\" ipsum=\"2\"\n    dolor=\"3\"\n  />\n</template>\n```", "```js\n// .eslintrc.js\n'rules': {\n  'space-before-function-paren': ['error', 'always']\n}\n```", "```js\nfunction message (text) { ... } // \u2713 ok\nfunction message(text) { ... } // \u2717 avoid\n\nmessage(function (text) { ... }) // \u2713 ok\nmessage(function(text) { ... }) // \u2717 avoid\n```", "```js\n/middleware/auth.js\n  1:24 error Delete \u00b7 prettier/prettier\n```", "```js\n$ eslint --ext .js,.vue src\n$ eslint \"src/**/*.{js,vue}\"\n```", "```js\n// package.json\n\"scripts\": {\n  \"lint\": \"eslint --ext .js,.vue --ignore-path .gitignore .\",\n  \"lint-fix\": \"eslint --fix --ext .js,.vue --ignore-path \n   .gitignore .\"\n}\n\n// .gitignore\nnode_modules\nbuild\nnuxt.config.js\nprettier.config.js\n```", "```js\n// nuxt.config.js\n...\nbuild: {\n extend(config, ctx) {\n    if (ctx.isDev && ctx.isClient) {\n      config.module.rules.push({\n        enforce: \"pre\",\n        test: /\\.(js|vue)$/,\n        loader: \"eslint-loader\",\n        exclude: /(node_modules)/\n      })\n    }\n  }\n}\n```", "```js\n// package.json\n\"scripts\": {\n\"prettier\": \"prettier --check \\\"\n {components,layouts,pages,store,middleware,plugins}/**/*.{vue,js}\n   \\\"\", \"prettier-fix\": \"prettier --write \n   {components,layouts,pages,store,middleware,plugins}\n    /**/*.{vue,js}\\\"\", \"lint\": \"eslint --ext .js,.vue \n    --ignore-path .gitignore .\",\n   \"lint-fix\": \"eslint --fix --ext .js,.vue --ignore-path\n     .gitignore .\"\n}\n```", "```js\n// .eslintrc.js\nmodule.exports = {\n  //...\n  'extends': [\n    'standard',\n    'plugin:vue/recommended',\n    // 'prettier' // <- removed this.\n  ]\n}\n```", "```js\n$ npm run prettier\n$ npm run lint\n```", "```js\n$ npm run prettier-fix\n$ npm run lint-fix\n```", "```js\n$ npm run dev\n```", "```js\n// package.json\n\"scripts\": {\n  \"dev\": \"nuxt\",\n  \"build\": \"nuxt build\",\n  \"start\": \"nuxt start\",\n  \"generate\": \"nuxt generate\"\n}\n```", "```js\n$ npm run <command>\n```", "```js\n$ npm run build\n```", "```js\n> [your-app-name]@[your-app-name] start /var/path/to/your/app\n> nuxt build\n\u2139 Production build\n\u2139 Bundling for server and client side\n\u2139 Target: server \n\u2713 Builder initialized\n\u2713 Nuxt files generated\n...\n...\n```", "```js\n$ npm run start\n```", "```js\n> [your-app-name]@[your-app-name] start /var/path/to/your/app\n> nuxt start\n\nNuxt.js @ v2.14.0\n\n> Environment: production\n> Rendering: server-side\n> Target: server\n\nMemory usage: 28.8 MB (RSS: 88.6 MB)\n```", "```js\n\"scripts\": {\n  \"generate\": \"nuxt generate\"\n} \n```", "```js\n// nuxt.config.js\nexport default {\n  target: 'static'\n}\n```", "```js\n// nuxt.config.js\nexport default {\n  generate: {\n    fallback: true\n  }\n}\n```", "```js\n$ npm run generate\n```", "```js\n\u2139 Generating output directory: dist/\n\u2139 Generating pages with full static mode\n\u2713 Generated route \"/contact\"\n\u2713 Generated route \"/work-nested\"\n\u2713 Generated route \"/about\"\n\u2713 Generated route \"/work\"\n\u2713 Generated route \"/\"\n\u2713 Generated route \"/work-nested/work-sample-4\"\n\u2713 Generated route \"/work-nested/work-sample-1\"\n\u2713 Generated route \"/work-nested/work-sample-3\"\n\u2713 Generated route \"/work-nested/work-sample-2\"\n\u2713 Generated route \"/work/work-sample-1\"\n\u2713 Generated route \"/work/work-sample-4\"\n\u2713 Generated route \"/work/work-sample-2\"\n\u2713 Generated route \"/work/work-sample-3\"\n\u2713 Client-side fallback created: 404.html\ni Ready to run nuxt serve or deploy dist/ directory \n```", "```js\n$ npm run start\n```", "```js\nNuxt.js @ v2.14.0 \n\n> Environment: production\n> Rendering: server-side\n> Target: static\nListening: http://localhost:3000/\n\n\u2139 Serving static application from dist/ \n```", "```js\n$ npm run build\n$ npm run start\n```", "```js\n$ npm i nuxt-start\n```", "```js\n// app.js\nconst { Nuxt } = require('nuxt-start')\nconst config = require('./nuxt.config.js')\n\nconst nuxt = new Nuxt(config)\nconst { host, port } = nuxt.options.server\n\nnuxt.listen(port, host)\n```", "```js\n// app.js\nconst express = require('express')\nconst { Nuxt } = require('nuxt')\nconst app = express()\n\nlet config = require('./nuxt.config.js')\nconst nuxt = new Nuxt(config)\nconst { host, port } = nuxt.options.server\n\napp.use(nuxt.render)\napp.listen(port, host)\n```", "```js\n// nuxt.config.js\nexport default {\n  target: 'static'\n}\n```", "```js\n$ npm run generate\n```"]