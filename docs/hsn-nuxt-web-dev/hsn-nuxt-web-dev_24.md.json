["```js\n$ php -S localhost:4000\n```", "```js\n// wp-content/themes/twentynineteen-child/style.css\n/*\n Theme Name: Twenty Nineteen Child\n Template: twentynineteen\n Text Domain: twentynineteenchild\n*/\n\n@import url(\"../twentynineteen/style.css\");\n```", "```js\n// wp-content/themes/twentynineteen-child/functions.php\nfunction create_something () {\n    register_post_type('<name>', <args>);\n}\nadd_action('init', 'create_something');\n```", "```js\n// wp-content/themes/twentynineteen-child/functions.php\nfunction create_project_post_type () {\n    register_post_type('project', $args);\n}\nadd_action('init', 'create_project_post_type');\n```", "```js\n$args = [\n    'labels' => [\n        'name' => __('Project (Pages)'),\n        'singular_name' => __('Project'),\n        'all_items' => 'All Projects'\n    ],\n    //...\n    'supports' => ['title', 'editor', 'thumbnail', 'page-attributes'],\n];\n```", "```js\n'taxonomies' => [\n    'category',\n    'post_tag'\n],\n```", "```js\n// wp-content/themes/twentynineteen-child/functions.php\nadd_action('init', 'create_project_categories');\nfunction create_project_categories() {\n    $args = [\n        'label' => __('Categories'),\n        'has_archive' => true,\n        'hierarchical' => true,\n        'rewrite' => [\n            'slug' => 'project',\n            'with_front' => false\n        ],\n    ];\n    $postTypes = ['project'];\n    $taxonomy = 'project-category';\n    register_taxonomy($taxonomy, $postTypes, $args);\n}\n```", "```js\n// wp-content/themes/twentynineteen-child/functions.php\nadd_filter('use_block_editor_for_post', '__return_false', 10);\nadd_filter('use_block_editor_for_post_type', '__return_false', 10);\n```", "```js\nadd_action('rest_api_init', function () { , and then followed by the available endpoint\n    $args = [\n        'methods' => 'GET',\n        'callback' => '<do_something>',\n    ];\n    register_rest_route(<namespace>, <route>, $args);\n});\n```", "```js\n// wp-content/themes/twentynineteen-child/functions.php\n$namespace = 'api/v1/';\n\nadd_action('rest_api_init', function () use ($namespace) {\n    $route = 'menu';\n    $args = [\n        'methods' => 'GET',\n        'callback' => 'fetch_menu',\n    ];\n    register_rest_route($namespace, $route, $args);\n});\n\nadd_action('rest_api_init', function () use ($namespace) {\n    $route = 'page/(?P<slug>[a-zA-Z0-9-]+)';\n    $args = [\n        'methods' => 'GET',\n        'callback' => 'fetch_page',\n    ];\n    register_rest_route($namespace, $route, $args);\n});\n```", "```js\n// wp-content/themes/twentynineteen-child/functions.php\nadd_action('rest_api_init', function () use ($namespace) {\n    $route = 'project/(?P<slug>[a-zA-Z0-9-]+)';\n    $args = [\n        'methods' => 'GET',\n        'callback' => 'fetch_project',\n    ];\n    register_rest_route($namespace, $route, $args);\n});\n\nadd_action('rest_api_init', function () use ($namespace) {\n    $route = 'projects/(?P<page_number>\\d+)';\n    $args = [\n        'methods' => 'GET',\n        'callback' => 'fetch_projects',\n    ];\n    register_rest_route($namespace, $route, $args);\n});\n```", "```js\n// wp-content/themes/twentynineteen-child/functions.php\nfunction fetch_menu ($data) {\n    $menu_items = wp_get_nav_menu_items('menu-main');\n\n    if (empty($menu_items)) {\n        return [];\n    }\n\n    return $menu_items;\n}\n```", "```js\n// wp-content/themes/twentynineteen-child/functions.php\nfunction fetch_page ($data) {\n    $post = get_page_by_path($data['slug'], OBJECT, 'page');\n\n    if (!count((array)$post)) {\n        return [];\n    }\n    $post->slides = get_field('slide_items', $post->ID);\n\n    return $post;\n}\n```", "```js\n// wp-content/themes/twentynineteen-child/functions.php\nfunction fetch_project ($data) {\n    $post = get_page_by_path($data['slug'], OBJECT, 'project');\n\n    if (!count((array)$post)) {\n        return [];\n    }\n    $post->fullscreen = get_field('full_screen_image', $post->ID);\n    $post->images = get_field('image_items', $post->ID);\n\n    return $post;\n}\n```", "```js\n// wp-content/themes/twentynineteen-child/functions.php\nfunction fetch_projects ($data) {\n    $paged = $data['page_number'] ? $data['page_number'] : 1;\n    $posts_per_page = 6;\n    $post_type = 'project';\n    $args = [\n        'post_type' => $post_type,\n        'post_status' => ['publish'],\n        'posts_per_page' => $posts_per_page,\n        'paged' => $paged,\n        'orderby' => 'date'\n    ];\n    $posts = get_posts($args);\n\n    if (empty($posts)) {\n        return [];\n    }\n\n    foreach ($posts as &$post) {\n        $post->featured_image = get_the_post_thumbnail_url($post->ID);\n    }\n    return $posts;\n}\n```", "```js\n$total = wp_count_posts($post_type);\n$total_max_pages = ceil($total->publish / $posts_per_page);\n\nreturn [\n    'items' => $posts,\n    'total_pages' => $total_max_pages,\n    'current_page' => (int)$paged,\n    'next_page' => (int)$paged === (int)$total_max_pages ? null :\n     $paged + 1,\n    'prev_page' => (int) $paged === 1 ? null : $paged - 1,\n];\n```", "```js\n/wp-json/api/v1/menu\n/wp-json/api/v1/page/<slug>\n/wp-json/api/v1/projects/<number>\n/wp-json/api/v1/project/<slug>\n```", "```js\n// nuxt.config.js\nconst protocol = 'http'\nconst host = process.env.NODE_ENV === 'production' ? 'your-domain.com' : 'localhost'\nconst ports = {\n  local: '3000',\n  remote: '4000'\n}\nconst remoteUrl = protocol + '://' + host + ':' + ports.remote\n\nmodule.exports = {\n  env: {\n    remoteUrl: remoteUrl,\n  }\n}\n```", "```js\n// plugins/axios.js\nimport axios from 'axios'\n\nlet baseURL = process.env.remoteUrl\nconst api = axios.create({ baseURL })\n\nexport default (ctx, inject) => {\n  ctx.$axios = api\n  inject('axios', api)\n}\n```", "```js\n// plugins/utils.js\nimport Vue from 'vue'\n\nVue.prototype.$loadAssetImage = src => {\n  var array = src.split('/')\n  var last = [...array].pop()\n  if (process.server && process.env.streamRemoteResource === true) {\n    var { streamResource } = require('~/assets/js/stream-resource')\n    streamResource(src, last)\n    return\n  }\n\n  try {\n    return require('~/assets/images/' + last)\n  } catch (e) {\n    return src\n  }\n}\n```", "```js\n// assets/js/stream-resource.js\nimport axios from 'axios'\nimport fs from 'fs'\n\nexport const streamResource = async (src, last) => {\n  const file = fs.createWriteStream('./assets/images/' + last)\n  const { data } = await axios({\n    url: src,\n    method: 'GET',\n    responseType: 'stream'\n  })\n  data.pipe(file)\n}\n```", "```js\n// nuxt.config.js\nplugins: [\n  '~/plugins/axios.js',\n  '~/plugins/utils.js',\n],\n```", "```js\n// pages/index.vue\nasync asyncData ({ error, $axios }) {\n  let { data } = await $axios.get('/wp-json/api/v1/page/home')\n  return {\n    post: data\n  }\n}\n\n<template v-for=\"slide in post.slides\">\n  <img :src=\"$loadAssetImage(slide.image.sizes.medium_large)\">\n</template>\n```", "```js\n// package.json\n\"scripts\": {\n  \"generate\": \"nuxt generate\",\n  \"stream\": \"NUXT_ENV_GEN=stream nuxt generate\"\n}\n```", "```js\n// nuxt.config.js\nenv: {\n  streamRemoteResource: process.env.NUXT_ENV_GEN === 'stream' ? \n   true : false\n},\n```", "```js\n// nuxt.config.js \nimport axios from 'axios'\nexport default {\n  generate: {\n    routes: async function () {\n      const projects = await axios.get(remoteUrl + '/wp-json/api/v1/projects')\n      const routesProjects = projects.data.map((project) => {\n        return {\n          route: '/projects/' + project.post_name,\n          payload: project\n        }\n      })\n\n      let totalMaxPages = Math.ceil(routesProjects.length / 6)\n      let pagesProjects = []\n      Array(totalMaxPages).fill().map((item, index) => {\n        pagesProjects.push({\n          route: '/projects/pages/' + (index + 1),\n          payload: null\n        })\n      })\n\n      const routes = [ ...routesProjects, ...pagesProjects ]\n      return routes\n    }\n  }\n}\n```", "```js\n$ npm run stream && npm run generate\n```", "```js\n$ sudo apt update\n$ sudo apt install postgresql postgresql-contrib\n```", "```js\n$ psql -v\n```", "```js\n/usr/lib/postgresql/12/bin/psql: option requires an argument -- 'v'\nTry \"psql --help\" for more information.\n```", "```js\n$ sudo -u postgres psql\n```", "```js\npostgres@lau-desktop:~$ psql\npsql (12.2 (Ubuntu 12.2-2.pgdg19.10+1))\nType \"help\" for help.\n\npostgres=\n```", "```js\npostgres= \\du\n```", "```js\nRole name \n-----------\npostgres \nroot\n```", "```js\npostgres= \\q\n```", "```js\n$ sudo -u postgres createuser --interactive\n```", "```js\nEnter name of role to add: user1\nShall the new role be a superuser? (y/n) y\n```", "```js\nALTER USER user1 PASSWORD 'password';\n```", "```js\nALTER ROLE\n```", "```js\npostgres://<username>:<password>@localhost/<dbname>\n```", "```js\n$ mongo\n```", "```js\n> use admin\n> db.createUser(\n  {\n    user: \"root\",\n    pwd: \"password\",\n    roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" }, \n     \"readWriteAnyDatabase\" ]\n  }\n)\n```", "```js\n$ sudo nano /etc/mongod.conf\n```", "```js\n// mongodb.conf\nsecurity:\n  authorization: \"enabled\"\n```", "```js\n$ sudo systemctl restart mongod\n```", "```js\n$ sudo systemctl status mongod\n```", "```js\n$ mongo --port 27017 -u \"root\" -p \"password\" --authenticationDatabase \"admin\"\n```", "```js\n> use test\ndb.createUser(\n  {\n    user: \"user1\",\n    pwd: \"password\",\n    roles: [ { role: \"readWrite\", db: \"test\" } ]\n  }\n)\n```", "```js\n$ mongo --port 27017 -u \"user1\" -p \"password\" --authenticationDatabase \"test\"\n```", "```js\n> show dbs\n```", "```js\nmogodb://<username>:<password>@localhost:27017/<dbname>\n```", "```js\n$ npm i @keystonejs/keystone\n$ npm i @keystonejs/app-graphql\n$ npm i @keystonejs/adapter-mongoose\n```", "```js\n$ npm i @keystonejs/app-admin-ui\n$ npm i @keystonejs/fields\n```", "```js\n// index.js\nconst { Keystone } = require('@keystonejs/keystone')\nconst { GraphQLApp } = require('@keystonejs/app-graphql')\nconst { AdminUIApp } = require('@keystonejs/app-admin-ui')\nconst { MongooseAdapter } = require('@keystonejs/adapter-mongoose')\nconst { Text } = require('@keystonejs/fields')\n```", "```js\nconst keystone = new Keystone({\n  name: 'My Keystone Project',\n  adapter: new MongooseAdapter({ mongoUri: 'mongodb://localhost/your-\n    db-name' }),\n})\n```", "```js\nkeystone.createList('Page', {\n  fields: {\n    name: { type: Text },\n  },\n})\n```", "```js\nmodule.exports = {\n  keystone,\n  apps: [new GraphQLApp(), new AdminUIApp()]\n}\n```", "```js\n\"scripts\": {\n  \"dev\": \"keystone\"\n}\n```", "```js\n$ npm run dev\n```", "```js\n Command: keystone dev\n\u2713 Validated project entry file ./index.js\n\u2713 Keystone server listening on port 3000\n\u2713 Initialised Keystone instance\n\u2713 Connected to database\n\u2713 Keystone instance is ready at http://localhost:3000\n\u221e Keystone Admin UI: http://localhost:3000/admin\n\u221e GraphQL Playground: http://localhost:3000/admin/graphiql\n\u221e GraphQL API: http://localhost:3000/admin/api\n```", "```js\n$ npm init keystone-app <app-name>\n```", "```js\n\u2713 What is your project name?\n\u2713 Select a starter project: Starter / Blank / Todo / Nuxt\n\u2713 Select a database type: MongoDB / Postgre\n```", "```js\n$ cd <app-name>\n```", "```js\n// index.js\nconst adapterConfig = { knexOptions: { connection: 'postgres://\n <username>:<password>@localhost/<dbname>' } }\n```", "```js\n$ npm run create-tables\n```", "```js\n// index.js\nconst adapterConfig = { mongoUri: 'mogodb://<username>:<password>@localhost:27017/<dbname>' }\n```", "```js\n// package.json\n\"scripts\": {\n  \"dev\": \"cross-env NODE_ENV=development PORT=4000 ...\",\n}\n```", "```js\n$ npm i nodemon --save-dev\n```", "```js\n// package.json\n\"scripts\": {\n  \"dev\": \"... nodemon --exec keystone dev\",\n}\n```", "```js\n$ npm run dev\n```", "```js\n\u2713 Keystone instance is ready at http://localhost:4000\n\u221e Keystone Admin UI: http://localhost:4000/admin\n\u221e GraphQL Playground: http://localhost:4000/admin/graphiql\n\u221e GraphQL API: http://localhost:4000/admin/api\n```", "```js\n// lists/Page.js\nconst { Text } = require('@keystonejs/fields')\n\nmodule.exports = {\n  fields: {...},\n}\n```", "```js\n$ npm i @keystonejs/app-static\n$ npm i @keystonejs/file-adapters\n$ npm i @keystonejs/fields-wysiwyg-tinymce\n```", "```js\n// index.js\nconst { StaticApp } = require('@keystonejs/app-static');\n\nmodule.exports = {\n  apps: [\n    new StaticApp({\n      path: '/public',\n      src: 'public'\n    }),\n  ],\n}\n```", "```js\n// lists/File.js\nconst { File, Text, Slug } = require('@keystonejs/fields')\nconst { LocalFileAdapter } = require('@keystonejs/file-adapters')\n\nconst fileAdapter = new LocalFileAdapter({\n  src: './public/files',\n  path: '/public/files',\n})\n\nmodule.exports = {\n  fields: {\n    title: { type: Text, isRequired: true },\n    alt: { type: Text },\n    caption: { type: Text, isMultiline: true },\n    name: { type: Slug },\n    file: { type: File, adapter: fileAdapter, isRequired: true },\n  }\n}\n```", "```js\n// lists/SlideImage.js\nconst { Relationship } = require('@keystonejs/fields')\n\nmodule.exports = {\n  fields: {\n    // ...\n    link: { type: Relationship, ref: 'Project' },\n  },\n}\n```", "```js\n// lists/Page.js\nconst { Text, Relationship, Slug } = require('@keystonejs/fields')\nconst { Wysiwyg } = require('@keystonejs/fields-wysiwyg-tinymce')\n\nmodule.exports = {\n  fields: {\n    title: { type: Text, isRequired: true },\n    excerpt: { type: Text, isMultiline: true },\n    content: { type: Wysiwyg },\n    name: { type: Slug },\n    featuredImage: { type: Relationship, ref: 'Image' },\n    slideImages: { type: Relationship, ref: 'SlideImage', many:\n     true },\n  },\n}\n```", "```js\n// lists/Project.js\nconst { Text, Relationship, Slug } = require('@keystonejs/fields')\nconst { Wysiwyg } = require('@keystonejs/fields-wysiwyg-tinymce')\n\nmodule.exports = {\n  fields: {\n    //...\n    fullscreenImage: { type: Relationship, ref: 'Image' },\n    projectImages: { type: Relationship, ref: 'Image', many:\n     true },\n  },\n}\n```", "```js\n// lists/NavLink.js\nconst { Text, Relationship, Slug, Integer } = require('@keystonejs/fields')\n\nmodule.exports = {\n  fields: {\n    title: { type: Text, isRequired: true },\n    order: { type: Integer, isRequired: true },\n    name: { type: Slug },\n    link: { type: Relationship, ref: 'Page' },\n    subLinks: { type: Relationship, ref: 'Project', many: true },\n  },\n}\n```", "```js\n// index.js\nconst PageSchema = require('./lists/Page.js')\nconst ProjectSchema = require('./lists/Project.js')\nconst FileSchema = require('./lists/File.js')\nconst SlideImageSchema = require('./lists/SlideImage.js')\nconst NavLinkSchema = require('./lists/NavLink.js')\n\nconst keystone = new Keystone({ ... })\n\nkeystone.createList('Page', PageSchema)\nkeystone.createList('Project', ProjectSchema)\nkeystone.createList('Image', FileSchema)\nkeystone.createList('SlideImage', SlideImageSchema)\nkeystone.createList('NavLink', NavLinkSchema)\n```", "```js\n$ npm run dev\n```", "```js\n{\n planet(name: \"earth\") {\n   id\n   age\n   population\n }\n}\n```", "```js\n{\n  \"data\": {\n    \"planet\": {\n      \"id\": 3,\n      \"age\": \"4543000000\",\n      \"population\": \"7594000000\"\n    }\n  }\n}\n```", "```js\ntype Planet {\n  id: Int\n  name: String\n  age: String\n  population: String\n}\n\ntype Query {\n  planet(name: String): Planet\n}\n```", "```js\nPlanet: {\n  id: (root, args, context, info) => root.id,\n  name: (root, args, context, info) => root.name,\n  age: (root, args, context, info) => root.age,\n  population: (root, args, context, info) => root.population,\n}\n\nQuery: {\n  planet: (root, args, context, info) => {\n    return planets.find(planet => planet.name === args.name)\n  },\n}\n```", "```js\n$ npm i express\n$ npm i express-graphql\n$ npm i graphql\n```", "```js\n// index.js\nconst express = require('express')\nconst graphqlHTTP = require('express-graphql')\nconst graphql = require('graphql')\n\nconst app = express()\nconst port = process.env.PORT || 4000\n```", "```js\n// index.js\nconst planets = [\n  { id: 3, name: \"earth\", age: 4543000000, population:\n    7594000000 },\n  { id: 4, name: \"mars\", age: 4603000000, population: 0 },\n]\n```", "```js\n// index.js\nconst planetType = new graphql.GraphQLObjectType({\n  name: 'Planet',\n  fields: {\n  id: { ... },\n  name: { ... },\n  age: { ... },\n  population: { ... },\n})\n```", "```js\n// index.js\nid: {\n  type: graphql.GraphQLInt,\n  resolve: (root, orgs, context, info) => root.id,\n},\nname: {\n  type: graphql.GraphQLString,\n  resolve: (root, orgs, context, info) => root.name,\n},\nage: {\n  type: graphql.GraphQLString,\n  resolve: (root, orgs, context, info) => root.age,\n},\npopulation: {\n  type: graphql.GraphQLString,\n  resolve: (root, orgs, context, info) => root.population,\n},\n```", "```js\n// index.js\nconst queryType = new graphql.GraphQLObjectType({\n  name: 'Query',\n  fields: {\n    hello: { ... },\n    planet: { ... },\n  },\n})\n```", "```js\n// index.js\nhello: {\n  type: graphql.GraphQLString,\n  resolve: (root, args, context, info) => 'world',\n}\n```", "```js\n// index.js\nplanet: {\n  type: planetType,\n  args: {\n    name: { type: graphql.GraphQLString }\n  },\n  resolve: (root, args, context, info) => {\n    return planets.find(planet => planet.name === args.name)\n  },\n}\n```", "```js\n// index.js\nconst schema = new graphql.GraphQLSchema({ query: queryType })\n```", "```js\n// index.js\napp.use(\n  '/graphiql',\n  graphqlHTTP({ schema, graphiql: true }),\n)\n```", "```js\ncontext: {\n  something: 'something to be shared',\n}\n```", "```js\n// index.js\napp.listen(port)\n```", "```js\n// localhost:4000/graphiql\n{\n  hello\n  planet (name: \"earth\") {\n    id\n    age\n    population\n  }\n}\n```", "```js\n// localhost:4000/graphiql\n{\n  \"data\": {\n    \"hello\": \"world\",\n    \"planet\": {\n      \"id\": 3,\n      \"age\": \"4543000000\",\n      \"population\": \"7594000000\"\n    }\n  }\n}\n```", "```js\nfields: {\n  id: { type: graphql.GraphQLInt },\n  name: { type: graphql.GraphQLString },\n  age: { type: graphql.GraphQLString },\n  population: { type: graphql.GraphQLString },\n}\n```", "```js\nroot.id\nroot.name\nroot.age\nroot.population\n```", "```js\nfields: {\n  id: {\n    type: graphql.GraphQLInt,\n    resolve: (root, orgs, context, info) => 2,\n  },\n}\n```", "```js\n{\n  planet (name: \"mars\") {\n    id\n  }\n}\n```", "```js\n{\n  \"data\": {\n    \"planet\": {\n      \"id\": 2\n    }\n  }\n}\n```", "```js\n$ npm i apollo-server\n$ npm i graphql\n```", "```js\n// index.js\nconst { ApolloServer, gql } = require('apollo-server')\n```", "```js\n// index.js\nconst authors = [\n  { id: 1, name: 'author A' },\n  { id: 2, name: 'author B' },\n]\n\nconst posts = [\n  { id: 1, title: 'Post 1', authorId: 1 },\n  { id: 2, title: 'Post 2', authorId: 1 },\n  { id: 3, title: 'Post 3', authorId: 2 },\n]\n```", "```js\n// index.js\nconst typeDefs = gql`\n  type Author {\n   id: Int\n   name: String\n  }\n\n  type Post {\n   id: Int\n   title: String\n   author: Author\n  }\n\n  type Query {\n    posts: [Post]\n  }\n`\n```", "```js\n// index.js\nconst resolvers = {\n  Query: {\n    posts: (root, args, context, info) => posts\n  },\n\n  Post: {\n    author: root => authors.find(author => author.id === \n     root.authorId)\n  },\n}\n```", "```js\nPost: {\n  author (root) {\n    return authors.find(author => author.id === root.authorId)\n  },\n}\n```", "```js\n// index.js\nconst server = new ApolloServer({ typeDefs, resolvers })\n\nserver.listen().then(({ url }) => {\n  console.log(`Server ready at ${url}`)\n})\n```", "```js\n$ node index.js\n```", "```js\n{\n  posts {\n    title\n    author {\n      name\n    }\n  }\n}\n```", "```js\n{\n  \"data\": {\n    \"posts\": [\n      {\n        \"title\": \"Post 1\",\n        \"author\": {\n          \"name\": \"author A\"\n        }\n      },\n      ...\n    ]\n  }\n}\n```", "```js\n{\n  allPages (orderBy: \"name_DESC\", skip: 0, first: 6) {\n    title\n    content\n  }\n}\n```", "```js\n{\n  _allPagesMeta (search: \"a\") {\n    count\n  }\n}\n```", "```js\n{\n  Page (where: { id: $id }) {\n    title\n    content\n  }\n}\n```", "```js\n{\n  _PagesMeta {\n    name\n    access {\n      read\n    }\n    schema {\n      queries\n      fields {\n        name\n      }\n    }\n  }\n}\n```", "```js\n{\n  _allPagesMeta {\n    count\n  },\n  allPages (orderBy: \"name_DESC\", skip: 0, first: 6) {\n    title\n    content\n  }\n}\n```", "```js\n// pages/index.vue\nconst GET_PAGE = `\n  query {\n    allPages (search: \"home\") {\n      title\n      slideImages {\n        alt\n        link {\n          name\n        }\n        file {\n          publicUrl\n        }\n      }\n    }\n  }\n`\n```", "```js\n// pages/index.vue\nexport default {\n  async asyncData ({ $axios }) {\n    let { data } = await $axios.post('/admin/api', {\n      query: GET_PAGE\n    })\n    return {\n      post: data.data.allPages[0]\n    }\n  },\n}\n```", "```js\n// components/projects/project-items.vue\nconst GET_PROJECTS = `\n  query {\n    _allProjectsMeta {\n      count\n    }\n    allProjects (orderBy: \"name_DESC\", skip: ${ skip }, first: ${ \n     postsPerPage }) {\n      name\n      title\n      excerpt\n      featuredImage {\n        alt\n        file {\n          publicUrl\n        }\n      }\n    }\n  }\n`\n```", "```js\n// components/projects/project-items.vue\ndata () {\n  return {\n    posts: [],\n    totalPages: null,\n    currentPage: null,\n    nextPage: null,\n    prevPage: null,\n  }\n},\n\nasync fetch () {\n  const postsPerPage = 6\n  const number = this.$route.params.number\n  const pageNumber = number === undefined ? 1 : Math.abs(\n    parseInt(number))\n  const skip = number === undefined ? 0 : (pageNumber - 1) \n   * postsPerPage\n\n  const GET_PROJECTS = `... `\n\n  let { data } = await $axios.post('/admin/api', {\n    query: GET_PROJECTS\n  })\n\n  //... continued in step 5.\n}\n```", "```js\n// components/projects/project-items.vue\nlet totalPosts = data.data._allProjectsMeta.count\nlet totalMaxPages = Math.ceil(totalPosts / postsPerPage)\n\nthis.posts = data.data.allProjects\nthis.totalPages = totalMaxPages\nthis.currentPage = pageNumber\nthis.nextPage = pageNumber === totalMaxPages ? null : pageNumber + 1\nthis.prevPage = pageNumber === 1 ? null : pageNumber - 1\n```", "```js\n// pages/projects/_slug.vue\nconst GET_PAGE = `\n  query {\n    allProjects (search: \"${ params.slug }\") {\n      title\n      content\n      excerpt\n      fullscreenImage { ... }\n      projectImages { ... }\n    }\n  }\n`\n```", "```js\n// pages/projects/_slug.vue\nasync asyncData ({ params, $axios }) {\n  const GET_PAGE = `...`\n\n  let { data: { data: result } } = await $axios.post('/admin/api', \n   {\n    query: GET_PAGE\n  })\n\n  return {\n    post: result.allProjects[0],\n  }\n}\n```", "```js\n// store/index.js\nconst GET_LINKS = `\n  query {\n    allNavLinks (orderBy: \"order_ASC\") {\n      title\n      link {\n        name\n      }\n    }\n  }\n`\n```", "```js\n// store/index.js\nasync nuxtServerInit({ commit }, { $axios }) {\n  const GET_LINKS = `...`\n  let { data } = await $axios.post('/admin/api', {\n    query: GET_LINKS\n  })\n  commit('setMenu', data.data.allNavLinks)\n}\n```", "```js\n// nuxt.config.js\nimport axios from 'axios'\n\nexport default {\n  generate: {\n    routes: async function () {\n      const GET_PROJECTS = `\n        query {\n          allProjects { name }\n        }\n      `\n      const { data } = await axios.post(remoteUrl + '/admin/api', {\n        query: GET_PROJECTS\n      })\n      const routesProjects = data.data.allProjects.map(project => {\n        return {\n          route: '/projects/' + project.name,\n          payload: project\n        }\n      })\n\n      let totalMaxPages = Math.ceil(routesProjects.length / 6)\n      let pagesProjects = []\n      Array(totalMaxPages).fill().map((item, index) => {\n        pagesProjects.push({\n          route: '/projects/pages/' + (index + 1),\n          payload: null\n        })\n      })\n\n      const routes = [ ...routesProjects, ...pagesProjects ]\n      return routes\n    }\n  },\n}\n```", "```js\n$ npm run dev\n$ npm run build && npm run start\n$ npm run stream && npm run generate\n```"]