["```js\n1600 0000 0268 656c 6c6f 0006 0000 0077\n 6f72 6c64 0000\n```", "```js\n$ wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -\n```", "```js\n$ echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list\n```", "```js\n$ sudo apt-get update\n```", "```js\n$ sudo apt-get install -y mongodb-org\n```", "```js\n$ sudo systemctl start mongod\n$ sudo systemctl enable mongod\n```", "```js\n$ mongo --version\n```", "```js\nMongoDB shell version v4.2.1\ngit version: edf6d45851c0b9ee15548f0f847df141764a317e\nOpenSSL version: OpenSSL 1.1.1d 10 Sep 2019\nallocator: tcmalloc\nmodules: none\nbuild environment:\n    distmod: ubuntu1804\n    distarch: x86_64\n    target_arch: x86_64\n```", "```js\n$ sudo service mongod status\n```", "```js\n\u25cf mongod.service - MongoDB Database Server\n   Loaded: loaded (/lib/systemd/system/mongod.service; enabled;\n     vendor preset: enabled)\n   Active: active (running) since Fri 2019-08-30 03:37:15 UTC;\n     29s ago\n     Docs: https://docs.mongodb.org/manual\n Main PID: 31961 (mongod)\n   Memory: 68.2M\n   CGroup: /system.slice/mongod.service\n           \u2514\u250031961 /usr/bin/mongod --config /etc/mongod.conf\n```", "```js\n$ sudo netstat -plntu\n```", "```js\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address Foreign Address State PID/Program name\ntcp 0 0 127.0.0.1:27017 0.0.0.0: LISTEN 792/mongod\n```", "```js\n$ mongo\n```", "```js\n> exit\n```", "```js\n$ sudo apt-get purge mongodb-org*\n```", "```js\n$ mongo\n```", "```js\n> show dbs\n```", "```js\nadmin 0.000GB\nconfig 0.000GB\n```", "```js\n> use nuxt-app\n```", "```js\nswitched to db nuxt-app\n```", "```js\n> use admin\n```", "```js\nswitched to db admin\n```", "```js\n> db.dropDatabase()\n```", "```js\n{ \"dropped\" : \"nuxt-app\", \"ok\" : 1 }\n```", "```js\n> db.createCollection(<name>, <options>)\n```", "```js\n> db.createCollection(\"users\", {})\n```", "```js\n{ \"ok\" : 1 }\n```", "```js\n> db.getCollectionNames()\n```", "```js\n[ \"users\" ]\n```", "```js\n> db.users.drop()\n```", "```js\ntrue\n```", "```js\ndb.<collection>.insertOne(<document>)\ndb.<collection>.insertMany([<document>, <document>, <document>, ...])\n```", "```js\ndb.<collection>.find(<query>, <projection>)\n```", "```js\ndb.<collection>.updateOne(<filter>, <update>, <options>)\ndb.<collection>.updateMany(<filter>, <update>, <options>)\ndb.<collection>.replaceOne(<filter>, <replacement>, <options>)\n```", "```js\ndb.<collection>.deleteOne(<filter>, <options>)\ndb.<collection>.deleteMany(<filter>, <options>)\n```", "```js\n> db.<collection>.insertOne(<document>)\n```", "```js\ndb.user.insertOne(\n  {\n    name: \"Alexandre\",\n    age: 30,\n    slug: \"alexandre\",\n    role: \"admin\",\n    status: \"ok\"\n  }\n)\n```", "```js\n{\n  \"acknowledged\" : true,\n  \"insertedId\" : ObjectId(\"5ca...\")\n}\n```", "```js\n> db.<collection>.insertMany([<document>,<document>,<document>,...])\n```", "```js\n> db.user.insertMany([\n  {\n    name: \"Pooya\",\n    age: 25,\n    slug: \"pooya\",\n    role: \"admin\",\n    status: \"ok\"\n  },\n  {\n    name: \"S\u00e9bastien\",\n    age: 22,\n    slug: \"sebastien\",\n    role: \"writer\",\n    status: \"pending\"\n  }\n])\n```", "```js\n{\n  \"acknowledged\" : true,\n  \"insertedIds\" : [\n    ObjectId(\"5ca...\"),\n    ObjectId(\"5ca...\")\n  ]\n}\n```", "```js\n> db.<collection>.find()\n```", "```js\nSELECT  FROM <table>\n```", "```js\n> db.user.find()\n```", "```js\n{ \"_id\" : ObjectId(\"5ca...\"), \"name\" : \"Alexandre\", \"slug\" :\n \"alexandre\", ... }\n{ \"_id\" : ObjectId(\"5ca...\"), \"name\" : \"Pooya\", \"slug\" : \"pooya\", ... }\n{ \"_id\" : ObjectId(\"5ca...\"), \"name\" : \"S\u00e9bastien\", \"slug\" : \n \"sebastien\", ... }\n```", "```js\n> db.<collection>.find(<query>, <projection>)\n```", "```js\n> db.user.find( { status: \"ok\" } )\n```", "```js\nSELECT  FROM user WHERE status = \"ok\"\n```", "```js\n{ \"_id\" : ObjectId(\"5ca...\"), \"name\" : \"Alexandre\", ... \"status\" : \"ok\" }\n{ \"_id\" : ObjectId(\"5ca...\"), \"name\" : \"Pooya\", ... \"status\" : \"ok\" }\n```", "```js\n> db.user.find( { status: { $in: [ \"ok\", \"pending\" ] } } )\n```", "```js\nSELECT  FROM user WHERE status in (\"ok\", \"pending\")\n```", "```js\n> db.user.find( { status: \"ok\", age: { $lt: 30 } } )\n```", "```js\n{ \"_id\" : ObjectId(\"5ca...\"), \"name\" : \"Pooya\", \"age\" : 25, ... }\n```", "```js\nSELECT  FROM user WHERE status = \"ok\" AND age < 30\n```", "```js\n> db.user.find( { $or: [ { status: \"ok\" }, { age: { $lt: 30 } } ] } )\n```", "```js\nSELECT  FROM user WHERE status = \"ok\" OR age < 30\n```", "```js\n{ \"_id\" : ObjectId(\"5ca...\"), \"name\" : \"Pooya\", \"age\" : 25, ... }\n```", "```js\n> db.<collection>.updateOne(<filter>, <update>, <options>)\n```", "```js\n> db.user.updateOne(\n   { name: \"S\u00e9bastien\" },\n   {\n     $set: { status: \"ok\" },\n     $currentDate: { lastModified: true }\n   }\n)\n```", "```js\n{ \"acknowledged\" : true, \"matchedCount\" : 1, \"modifiedCount\" : 1 }\n```", "```js\n{ $set: { <field1>: <value1>, ... } }\n```", "```js\n> db.<collection>.updateMany(<filter>, <update>, <options>)\n```", "```js\n> db.user.updateMany(\n   { \"status\": \"ok\" },\n   {\n     $set: { status: \"pending\" },\n     $currentDate: { lastModified: true }\n   }\n)\n```", "```js\n{ \"acknowledged\" : true, \"matchedCount\" : 3, \"modifiedCount\" : 3 }\n```", "```js\n> db.<collection>.replaceOne(<filter>, <replacement>, <options>)\n```", "```js\n> db.user.replaceOne(\n    { name: \"Pooya\" },\n    {\n      name: \"Paula\",\n      age: \"31\",\n      slug: \"paula\",\n      role: \"admin\",\n      status: \"ok\"\n    }\n)\n```", "```js\n{ \"acknowledged\" : true, \"matchedCount\" : 1, \"modifiedCount\" : 1 }\n```", "```js\n> db.<collection>.deleteOne(<filter>, <options>)\n```", "```js\n> db.user.deleteOne( { status: \"pending\" } )\n```", "```js\n{ \"acknowledged\" : true, \"deletedCount\" : 3 }\n```", "```js\n> db.<collection>.deleteMany(<filter>, <options>)\n```", "```js\n> db.user.deleteMany({ status : \"ok\" })\n```", "```js\n{ \"acknowledged\" : true, \"deletedCount\" : 2 }\n```", "```js\n> db.<collection>.deleteMany({})\n```", "```js\n> db.user.deleteMany({})\n```", "```js\n{ \"acknowledged\" : true, \"deletedCount\" : 1 }\n```", "```js\n$ npm i mongodb\n```", "```js\n$ npm i backpack-core\n$ npm i cross-env\n```", "```js\n// src/index.js\nimport { MongoClient } from 'mongodb'\nimport assert from 'assert'\n\nconst url = 'mongodb://localhost:27017'\nconst dbName = 'nuxt-app'\n```", "```js\n// src/index.js\nMongoClient.connect(url, {\n  useUnifiedTopology: true,\n  useNewUrlParser: true \n  }, (err, client) => {\n  assert.equal(null, err)\n  console.log('Connected to the MongoDB server')\n\n  const db = client.db(dbName)\n  client.close()\n})\n```", "```js\nConnected successfully to server \n```", "```js\n// server/config/mongodb.js\nconst database = {\n  host: 'localhost',\n  port: 27017,\n  dbname: 'nuxt-app'\n}\n\nexport default {\n  host: database.host,\n  port: database.port,\n  dbname: database.dbname,\n  url: 'mongodb://' + database.host + ':' + database.port\n}\n```", "```js\n// server/mongo.js\nimport mongodb from 'mongodb'\nimport config from './config/mongodb'\n\nconst MongoClient = mongodb.MongoClient\n\nexport default class Mongo {\n  constructor () {\n    this.connection = null\n    this.objectId = mongodb.ObjectId\n  }\n\n  async connect () {\n    this.connection = await MongoClient.connect(config.url, {\n      useUnifiedTopology: true,\n      useNewUrlParser: true\n    })\n    return this.connection.db(config.dbname)\n  }\n\n  close () {\n    this.connection.close()\n  }\n}\n```", "```js\nimport Mongo from './mongo'\nconst mongo = new Mongo()\n```", "```js\n// server/routes.js\nimport Router from 'koa-router'\nimport Mongo from './mongo'\nconst mongo = new Mongo()\nconst router = new Router({ prefix: '/api' })\n\nrouter.post('/user', async (ctx, next) => {\n  //...\n})\n```", "```js\n// Pseudo code\nvar id = '5d2ba2bf089a7754e9094af5'\nconsole.log(typeof id) // string\nconsole.log(typeof ObjectId(id)) // object\n```", "```js\n// Pseudo code\nvar object = ObjectId(id)\nvar timestamp = object.getTimestamp()\nconsole.log(timestamp) // 2019-07-14T21:46:39.000Z\n```", "```js\n// server/routes.js\nrouter.get('/user', async (ctx, next) => {\n  let result\n  try {\n    const connection = await mongo.connect()\n    const collectionUsers = connection.collection('users')\n    result = await collectionUsers...\n    mongo.close()\n  } catch (err) {\n    ctx.throw(500, err)\n  }\n  ctx.type = 'json'\n  ctx.body = result\n})\n```", "```js\ntry {\n  // async/await code\n} catch (err) {\n  // handle error\n}\n```", "```js\nconst connection = await mongo.connect()\nconst collectionUsers = connection.collection('users')\n```", "```js\nresult = await collectionUsers...\n```", "```js\nmongo.close()\n```", "```js\n// server/routes.js\nrouter.post('/user', async (ctx, next) => {\n  let result\n  //...\n})\n```", "```js\nlet body = ctx.request.body || {}\n\nif (body.name === undefined) {\n  ctx.throw(400, 'name is undefined')\n}\nif (body.slug === undefined) {\n  ctx.throw(400, 'slug is undefined')\n}\nif (body.name === '') {\n  ctx.throw(400, 'name is required')\n}\nif (body.slug === '') {\n  ctx.throw(400, 'slug is required')\n}\n```", "```js\nconst found = await collectionUsers.findOne({\n  slug: body.slug\n})\nif (found) {\n  ctx.throw(404, 'slug has been taken')\n}\n```", "```js\nresult = await collectionUsers.insertOne({\n  name: body.name,\n  slug: body.slug\n})\n```", "```js\n// server/routes.js\nrouter.get('/users', async (ctx, next) => {\n  let result\n  //...\n})\n```", "```js\nresult = await collectionUser.find({\n}, {\n  // Exclude some fields\n}).toArray()\n```", "```js\nprojection:{ _id: 0 }\n```", "```js\n// server/routes.js\nrouter.get('/users/:id', async (ctx, next) => {\n  let result\n  //...\n})\n```", "```js\nconst id = ctx.params.id\nresult = await collectionUsers.findOne({\n  _id: mongo.objectId(id)\n}, {\n  // Exclude some fields\n})\n```", "```js\n// server/routes.js\nrouter.put('/user', async (ctx, next) => {\n  let result\n  //...\n})\n```", "```js\nconst found = await collectionUser.findOne({\n  slug: body.slug,\n  _id: { $ne: mongo.objectId(body.id) }\n})\nif (found) {\n  ctx.throw(404, 'slug has been taken')\n}\n\nresult = await collectionUser.updateOne({\n  _id: mongo.objectId(body.id)\n}, {\n   $set: { name: body.name, slug: body.slug },\n   $currentDate: { lastModified: true }\n})\n```", "```js\n{ $set: { <field1>: <value1>, ... } }\n```", "```js\n{ $currentDate: { <field1>: <typeSpecification1>, ... } }\n```", "```js\ndb.user.find( { age: { $ne: 18 } } )\n```", "```js\n// server/routes.js\nrouter.del('/user', async (ctx, next) => {\n  let result\n  //...\n})\n```", "```js\nlet body = ctx.request.body || {}\nconst found = await collectionUser.findOne({\n  _id: mongo.objectId(body.id)\n})\nif (!found) {\n  ctx.throw(404, 'no user found')\n}\n\nresult = await collectionUser.deleteOne({\n  _id: mongo.objectId(body.id)\n})\n```", "```js\nusers\n\u251c\u2500\u2500 index.vue\n\u251c\u2500\u2500 _id.vue\n\u251c\u2500\u2500 add\n\u2502 \u2514\u2500\u2500 index.vue\n\u251c\u2500\u2500 update\n\u2502 \u2514\u2500\u2500 _id.vue\n\u2514\u2500\u2500 delete\n  \u2514\u2500\u2500 _id.vue\n```", "```js\n// pages/users/add/index.vue\n<form v-on:submit.prevent=\"add\">\n  <p>Name: <input v-model=\"name\" type=\"text\" name=\"name\"></p>\n  <p>Slug: <input v-model=\"slug\" type=\"text\" name=\"slug\"></p>\n  <button type=\"submit\">Add</button>\n  <button v-on:click=\"cancel\">Cancel</button>\n</form>\n```", "```js\n// pages/users/add/index.vue\nexport default {\n  methods: {\n    async add () {\n      let { data } = await axios.post('/api/user/', {\n        name: this.name,\n        slug: this.slug,\n      })\n    },\n    cancel () {\n      this.$router.push('/users/')\n    }\n  }\n}\n```", "```js\n// pages/users/update/_id.vue\n<form v-on:submit.prevent=\"update\">\n  //...\n  <button type=\"submit\">Update</button>\n</form>\n```", "```js\n// pages/users/update/_id.vue\nexport default {\n  async asyncData ({ params, error }) {\n    let { data } = await axios.get('/api/users/' + params.id)\n    let user = data.data\n    return { \n      id: user._id, \n      name: user.name, \n      slug: user.slug,\n    }\n  },\n  methods: {\n    async update () {\n      let { data } = await axios.put('/api/user/', {\n        name: this.name,\n        slug: this.slug,\n        id: this.id,\n      })\n    }\n  }\n}\n```", "```js\n// pages/users/delete/_id.vue\n<button v-on:click=\"remove\">Delete</button>\n```", "```js\n// pages/users/delete/_id.vue\nexport default {\n async asyncData ({ params, error }) {\n    // Fetch the existing user\n    // Same as in update page\n  },\n  methods: {\n    async remove () {\n      let payload = { id: this.id }\n      let { data } = await axios.delete('/api/user/', {\n        data: payload,\n      })\n    }\n  }\n}\n```"]