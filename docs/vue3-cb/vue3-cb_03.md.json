["```js\n> npm install -g @vue/cli @vue/cli-service-global\n```", "```js\n> vue create my-component\n```", "```js\n?  Please pick a preset: **(Use arrow keys)** \u276f default (babel, eslint) \n  Manually select features  \u200c\n```", "```js\n<template>\n  <div class='cardBox'>\n    <div class='container'>\n      <h2>Today is:</h2>\n      <h3>{{ getCurrentDate }}</h3>\n    </div>\n  </div>\n</template>\n```", "```js\n<script>\nexport default {\n  name: 'CurrentTime',\n  computed: {\n    getCurrentDate() {\n      const browserLocale =\n        navigator.languages && navigator.languages.length\n          ? navigator.languages[0]\n          : navigator.language;\n      const intlDateTime = new Intl.DateTimeFormat(\n        browserLocale, \n        {\n          year: 'numeric',\n          month: 'numeric',\n          day: 'numeric',\n          hour: 'numeric',\n          minute: 'numeric'\n        });\n\n      return intlDateTime.format(new Date());\n    }\n  }\n};\n</script>\n```", "```js\n.cardBox {\n  box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.2);\n  transition: 0.3s linear;\n  max-width: 33%;\n  border-radius: 3px;\n  margin: 20px;\n}\n\n.cardBox:hover {\n  box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.2);\n}\n\n.cardBox>.container {\n  padding: 4px 18px;\n}\n\n[class*='col-'] {\n  display: inline-block;\n}\n\n@media only screen and (max-width: 600px) {\n  [class*='col-'] {\n    width: 100%;\n  }\n\n  .cardBox {\n    margin: 20px 0;\n  }\n}\n\n@media only screen and (min-width: 600px) {\n  .col-1 {width: 8.33%;}\n  .col-2 {width: 16.66%;}\n  .col-3 {width: 25%;}\n  .col-4 {width: 33.33%;}\n  .col-5 {width: 41.66%;}\n  .col-6 {width: 50%;}\n  .col-7 {width: 58.33%;}\n  .col-8 {width: 66.66%;}\n  .col-9 {width: 75%;}\n  .col-10 {width: 83.33%;}\n  .col-11 {width: 91.66%;}\n  .col-12 {width: 100%;}\n}\n\n@media only screen and (min-width: 768px) {\n  .col-1 {width: 8.33%;}\n  .col-2 {width: 16.66%;}\n  .col-3 {width: 25%;}\n  .col-4 {width: 33.33%;}\n  .col-5 {width: 41.66%;}\n  .col-6 {width: 50%;}\n  .col-7 {width: 58.33%;}\n  .col-8 {width: 66.66%;}\n  .col-9 {width: 75%;}\n  .col-10 {width: 83.33%;}\n  .col-11 {width: 91.66%;}\n  .col-12 {width: 100%;}\n}\n\n@media only screen and (min-width: 992px) {\n  .col-1 {width: 8.33%;}\n  .col-2 {width: 16.66%;}\n  .col-3 {width: 25%;}\n  .col-4 {width: 33.33%;}\n  .col-5 {width: 41.66%;}\n  .col-6 {width: 50%;}\n  .col-7 {width: 58.33%;}\n  .col-8 {width: 66.66%;}\n  .col-9 {width: 75%;}\n  .col-10 {width: 83.33%;}\n  .col-11 {width: 91.66%;}\n  .col-12 {width: 100%;}\n}\n\n@media only screen and (min-width: 1200px) {\n  .col-1 {width: 8.33%;}\n  .col-2 {width: 16.66%;}\n  .col-3 {width: 25%;}\n  .col-4 {width: 33.33%;}\n  .col-5 {width: 41.66%;}\n  .col-6 {width: 50%;}\n  .col-7 {width: 58.33%;}\n  .col-8 {width: 66.66%;}\n  .col-9 {width: 75%;}\n  .col-10 {width: 83.33%;}\n  .col-11 {width: 91.66%;}\n  .col-12 {width: 100%;}\n}\n```", "```js\n<template>\n  <div id='app'>\n    <current-time />\n  </div>\n</template>\n\n<script>\nimport CurrentTime from './components/CurrentTime.vue';\n\nexport default {\n  name: 'app',\n  components: {\n    CurrentTime\n  }\n}\n</script>\n```", "```js\nimport Vue from 'vue';\nimport App from './App.vue';\nimport './style.css';\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n```", "```js\n> npm run serve\n```", "```js\n<template>\n  <div class='cardBox'>\n    <div class='container tasker'>\n      <strong>My task is: {{ task }}</strong>\n      <input \n        type='text'\n        v-model='task'\n        class='taskInput' />\n    </div>\n  </div>\n</template>\n```", "```js\n<script>\nexport default {\n  name: 'TaskInput',\n  data: () => ({\n    task: '',\n  }),\n};\n</script>\n```", "```js\n<style scoped>\n  .tasker{\n    margin: 20px;\n  }\n  .tasker .taskInput {\n    font-size: 14px;\n    margin: 0 10px;\n    border: 0;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.75);\n  }\n  .tasker button {\n    border: 1px solid rgba(0, 0, 0, 0.75);\n    border-radius: 3px;\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2);\n  }\n</style>\n```", "```js\n<template>\n  <div id='app'>\n    <current-time class='col-4' />\n    <task-input class='col-6' />\n  </div>\n</template>\n\n<script>\nimport CurrentTime from './components/CurrentTime.vue';\nimport TaskInput from './components/TaskInput';\n\nexport default {\n  name: 'app',\n  components: {\n    CurrentTime,\n    TaskInput,\n  }\n}\n</script>\n```", "```js\n> npm run serve\n```", "```js\n<template>\n  <div class='cardBox'>\n    <div class='container tasker'>\n      <strong>My task is:</strong>\n      <input \n        type='text' \n        v-model='task' \n        class='taskInput' />\n      <button \n        v-on:click='addTask'>\n            Add Task\n      </button>\n    </div>\n  </div>\n</template>\n```", "```js\n<script>\nexport default {\n  name: 'TaskInput',\n  data: () => ({\n    task: '',\n  }),\n  methods: {\n    addTask(){\n      this.$emit('add-task', this.task);\n      this.task = '';\n    },\n  }\n};\n</script>\n```", "```js\n<template>\n  <div id='app'>\n    <current-time class='col-4' />\n    <task-input \n      class='col-6'\n      @add-task='addNewTask'\n    />\n  </div>\n</template>\n```", "```js\n<script>\nimport CurrentTime from './components/CurrentTime.vue';\nimport TaskInput from './components/TaskInput';\n\nexport default {\n  name: 'app',\n  components: {\n    CurrentTime,\n    TaskInput,\n  },\n  methods:{\n    addNewTask(task){\n      alert(`New task added: ${task}`);\n    },\n  },\n}\n</script>\n```", "```js\n> npm run serve\n```", "```js\n<template>\n  <div class='cardBox'>\n    <div class='container tasker'>\n      <strong>My task is:</strong>\n      <input \n        type='text' \n        :value='task' \n        @input='task = $event.target.value' \n        class='taskInput' \n      />\n      <button v-on:click='addTask'>\n        Add Task\n      </button>\n    </div>\n  </div>\n</template>\n```", "```js\n> npm run serve \n```", "```js\n<script>\nimport CurrentTime from './components/CurrentTime.vue';\nimport TaskInput from './components/TaskInput';\n\nexport default {\n  name: 'TodoApp',\n  components: {\n    CurrentTime,\n    TaskInput,\n  },\n  data: () => ({\n    taskList: [],\n  }),\n  methods:{\n    addNewTask(task){\n      this.taskList.push({\n        task,\n        createdAt: Date.now(),\n        finishedAt: undefined,\n      })\n    },\n  },\n}\n</script>\n```", "```js\n<template>\n  <div id='app'>\n    <current-time class='col-4' />\n    <task-input class='col-6' @add-task='addNewTask' />\n    <div class='col-12'>\n      <div class='cardBox'>\n        <div class='container'>\n          <h2>My Tasks</h2>\n          <ul class='taskList'>\n            <li \n              v-for='(taskItem, index) in taskList'\n              :key='`${index}_${Math.random()}`'\n            >\n              <input type='checkbox' \n                :checked='!!taskItem.finishedAt' \n                @input='changeStatus(index)'\n              /> \n              {{ taskItem.task }} \n              <span v-if='taskItem.finishedAt'>\n                {{ taskItem.finishedAt }}\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n```", "```js\nchangeStatus(taskIndex){\n  const task = this.taskList[taskIndex];\n    if(task.finishedAt){\n      task.finishedAt = undefined;\n    } else {\n      task.finishedAt = Date.now();\n    }\n}\n```", "```js\n<style scoped>\n  .taskList li{\n    text-align: left;\n  }\n</style>\n```", "```js\n> npm run serve\n```", "```js\n<script>\nimport CurrentTime from './components/CurrentTime.vue';\nimport TaskInput from './components/TaskInput';\n\nexport default {\n  name: 'TodoApp',\n  components: {\n    CurrentTime,\n    TaskInput\n  },\n  data: () => ({\n    taskList: []\n  }),\n  computed: {\n    displayList(){\n      return this.taskList;\n    },\n  },\n  methods: {\n    addNewTask(task) {\n      this.taskList.push({\n        task,\n        createdAt: Date.now(),\n        finishedAt: undefined\n      });\n    },\n    changeStatus(taskIndex){\n      const task = this.taskList[taskIndex];\n      if(task.finishedAt){\n        task.finishedAt = undefined;\n      } else {\n        task.finishedAt = Date.now();\n      }\n    }\n  }\n};\n</script>\n```", "```js\n<template>\n  <div id='app'>\n    <current-time class='col-4' />\n    <task-input class='col-6' @add-task='addNewTask' />\n    <div class='col-12'>\n      <div class='cardBox'>\n        <div class='container'>\n          <h2>My Tasks</h2>\n          <ul class='taskList'>\n            <li \n              v-for='(taskItem, index) in displayList'\n              :key='`${index}_${Math.random()}`'\n            >\n              <input type='checkbox' \n                :checked='!!taskItem.finishedAt' \n                @input='changeStatus(index)'\n              /> \n              {{ taskItem.task }} \n              <span v-if='taskItem.finishedAt'>\n                {{ taskItem.finishedAt }}\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n```", "```js\n> npm run serve\n```", "```js\n<script>\n  import CurrentTime from './components/CurrentTime.vue';\n  import TaskInput from './components/TaskInput';\n\n  export default {\n    name: 'TodoApp',\n    components: {\n      CurrentTime,\n      TaskInput\n    },\n    data: () => ({\n      taskList: []\n    }),\n    computed: {\n      displayList() {\n        return this.taskList;\n      }\n    },\n    methods: {\n      formatDate(value) {\n        if (!value) return '';\n        if (typeof value !== 'number') return value;\n\n        const browserLocale =\n          navigator.languages && navigator.languages.length\n            ? navigator.languages[0]\n            : navigator.language;\n        const intlDateTime = new Intl.DateTimeFormat(\n          browserLocale, \n          {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric'\n          });\n\n        return intlDateTime.format(new Date(value));\n      },\n      addNewTask(task) {\n        this.taskList.push({\n          task,\n          createdAt: Date.now(),\n          finishedAt: undefined\n        });\n      },\n      changeStatus(taskIndex) {\n        const task = this.taskList[taskIndex];\n        if (task.finishedAt) {\n          task.finishedAt = undefined;\n        } else {\n          task.finishedAt = Date.now();\n        }\n      }\n    }\n  };\n</script>\n```", "```js\n<template>\n  <div id='app'>\n    <current-time class='col-4' />\n    <task-input class='col-6' @add-task='addNewTask' />\n    <div class='col-12'>\n      <div class='cardBox'>\n        <div class='container'>\n          <h2>My Tasks</h2>\n          <ul class='taskList'>\n            <li \n              v-for='(taskItem, index) in displayList'\n              :key='`${index}_${Math.random()}`'\n            >\n              <input type='checkbox' \n                :checked='!!taskItem.finishedAt' \n                @input='changeStatus(index)'\n              /> \n              {{ taskItem.task }} \n              <span v-if='taskItem.finishedAt'> | \n                Done at: \n                {{ formatDate(taskItem.finishedAt) }}\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n```", "```js\n> npm run serve\n```", "```js\n> npm install vuelidate --save\n```", "```js\nimport Vue from 'vue';\nimport App from './App.vue';\nimport Vuelidate from 'vuelidate';\nimport './style.css';\n\nVue.config.productionTip = false\nVue.use(Vuelidate);\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n```", "```js\n<script>\nexport default {\n  name: 'TaskInput',\n  data: () => ({\n    task: ''\n  }),\n  methods: {\n    addTask() {\n      this.$emit('add-task', this.task);\n      this.task = '';\n    }\n  },\n  validations: {\n    task: {}\n  }\n};\n</script>\n```", "```js\n<script>\nimport { required, minLength } from 'vuelidate/lib/validators';\n\nexport default {\n  name: 'TaskInput',\n  data: () => ({\n    task: ''\n  }),\n  methods: {\n    addTask() {\n      this.$emit('add-task', this.task);\n      this.task = '';\n    }\n  },\n  validations: {\n    task: {\n      required,\n      minLength: minLength(5),\n    }\n  }\n};\n</script>\n```", "```js\naddTask() {\n    this.$v.task.$touch();\n\n    if (this.$v.task.$error) return false;\n\n    this.$emit('add-task', this.task);\n    this.task = '';\n    this.$v.task.$reset();\n    return true;\n}\n```", "```js\n<template>\n  <div class='cardBox'>\n    <div class='container tasker'>\n      <strong>My task is:</strong>\n      <input \n        type='text' \n        :value='task' \n        @input='task = $event.target.value' \n        class='taskInput'\n        :class=\"$v.task.$error ? 'fieldError' : ''\" \n      />\n      <button v-on:click='addTask'>Add Task</button>\n    </div>\n  </div>\n</template>\n```", "```js\n.fieldError {\n  border: 2px solid red !important;\n  color: red;\n  border-radius: 3px;\n}\n```", "```js\n> **npm run serve**\n```", "```js\n<script>\nimport CurrentTime from \"./components/CurrentTime.vue\";\nimport TaskInput from \"./components/TaskInput\";\n\nexport default {\n  name: \"TodoApp\",\n  components: {\n    CurrentTime,\n    TaskInput\n  },\n  data: () => ({\n    taskList: [],\n  }),\n  computed: {\n    baseList() {\n      return [...this.taskList]\n        .map((t, index) => ({\n            ...t,\n            id: index + 1\n          }));\n    },\n    filteredList() {\n      return [...this.baseList]\n            .filter(t => !t.finishedAt);\n    },\n    sortedList() {\n      return [...this.filteredList]\n          .sort((a, b) => b.id - a.id);\n    },\n    displayList() {\n      return this.sortedList;\n    }\n  },\n  methods: {\n    formatDate(value) {\n      if (!value) return \"\";\n      if (typeof value !== \"number\") return value;\n\n      const browserLocale =\n        navigator.languages && navigator.languages.length\n          ? navigator.languages[0]\n          : navigator.language;\n      const intlDateTime = new Intl.DateTimeFormat(browserLocale, {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\"\n      });\n\n      return intlDateTime.format(new Date(value));\n    },\n    addNewTask(task) {\n      this.taskList.push({\n        task,\n        createdAt: Date.now(),\n        finishedAt: undefined\n      });\n    },\n    changeStatus(taskIndex) {\n      const task = this.taskList[taskIndex];\n\n      if (task.finishedAt) {\n        task.finishedAt = undefined;\n      } else {\n        task.finishedAt = Date.now();\n      }\n    }\n  }\n};\n</script>\n```", "```js\n<template>\n  <div id=\"app\">\n    <current-time class=\"col-4\" />\n    <task-input class=\"col-6\" @add-task=\"addNewTask\" />\n    <div class=\"col-12\">\n      <div class=\"cardBox\">\n        <div class=\"container\">\n          <h2>My Tasks</h2>\n          <ul class=\"taskList\">\n            <li \n              v-for=\"(taskItem, index) in displayList\"\n              :key=\"`${index}_${Math.random()}`\"\n            >\n              <input type=\"checkbox\" \n                :checked=\"!!taskItem.finishedAt\" \n                @input=\"changeStatus(taskItem.id)\"\n              /> \n              #{{ taskItem.id }} - {{ taskItem.task }} \n              <span v-if=\"taskItem.finishedAt\"> | \n                Done at: \n                {{ formatDate(taskItem.finishedAt) }}\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n```", "```js\nchangeStatus(taskId) {\n    const task = this.taskList[taskId - 1];\n\n    if (task.finishedAt) {\n    task.finishedAt = undefined;\n    } else {\n    task.finishedAt = Date.now();\n    }\n}\n```", "```js\n> npm run serve\n```", "```js\n<script>\nimport CurrentTime from \"./components/CurrentTime.vue\";\nimport TaskInput from \"./components/TaskInput\";\n\nexport default {\n  name: \"TodoApp\",\n  components: {\n    CurrentTime,\n    TaskInput\n  },\n  data: () => ({\n    taskList: [],\n    hideDone: false,\n    reverse: false,\n    sortById: false,\n  }),\n  computed: {\n    baseList() {\n      return [...this.taskList]\n        .map((t, index) => ({\n            ...t,\n            id: index + 1\n          }));\n    },\n    filteredList() {\n      return this.hideDone\n        ? [...this.baseList]\n            .filter(t => !t.finishedAt)\n        : [...this.baseList];\n    },\n    sortedList() {\n      return [...this.filteredList]\n          .sort((a, b) => (\n            this.sortById\n              ? b.id - a.id\n              : (a.finishedAt || 0) - (b.finishedAt || 0)\n          ));\n    },\n    displayList() {\n      const taskList = [...this.sortedList];\n\n      return this.reverse \n      ? taskList.reverse() \n      : taskList;\n    }\n  },\n  methods: {\n    formatDate(value) {\n      if (!value) return \"\";\n      if (typeof value !== \"number\") return value;\n\n      const browserLocale =\n        navigator.languages && navigator.languages.length\n          ? navigator.languages[0]\n          : navigator.language;\n\n      const intlDateTime = new Intl.DateTimeFormat(browserLocale, {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\"\n      });\n\n      return intlDateTime.format(new Date(value));\n    },\n    addNewTask(task) {\n      this.taskList.push({\n        task,\n        createdAt: Date.now(),\n        finishedAt: undefined\n      });\n    },\n    changeStatus(taskId) {\n      const task = this.taskList[taskId - 1];\n\n      if (task.finishedAt) {\n        task.finishedAt = undefined;\n      } else {\n        task.finishedAt = Date.now();\n      }\n    }\n  }\n};\n</script>\n```", "```js\n<template>\n  <div id=\"app\">\n    <current-time class=\"col-4\" />\n    <task-input class=\"col-6\" @add-task=\"addNewTask\" />\n    <div class=\"col-12\">\n      <div class=\"cardBox\">\n        <div class=\"container\">\n          <h2>My Tasks</h2>\n          <hr /> \n          <div class=\"col-4\">\n            <input \n              v-model=\"hideDone\"\n              type=\"checkbox\"\n              id=\"hideDone\"\n              name=\"hideDone\"\n            />\n            <label for=\"hideDone\">\n              Hide Done Tasks\n            </label>\n          </div>\n          <div class=\"col-4\">\n            <input \n              v-model=\"reverse\"\n              type=\"checkbox\"\n              id=\"reverse\"\n              name=\"reverse\"\n            />\n            <label for=\"reverse\">\n              Reverse Order\n            </label>\n          </div>\n          <div class=\"col-4\">\n            <input \n              v-model=\"sortById\"\n              type=\"checkbox\"\n              id=\"sortById\"\n              name=\"sortById\"\n            />\n            <label for=\"sortById\">\n              Sort By Id\n            </label>\n          </div>\n          <ul class=\"taskList\">\n            <li \n              v-for=\"(taskItem, index) in displayList\"\n              :key=\"`${index}_${Math.random()}`\"\n            >\n              <input type=\"checkbox\" \n                :checked=\"!!taskItem.finishedAt\" \n                @input=\"changeStatus(taskItem.id)\"\n              /> \n              #{{ taskItem.id }} - {{ taskItem.task }} \n              <span v-if=\"taskItem.finishedAt\"> | \n                Done at: \n                {{ formatDate(taskItem.finishedAt) }}\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n```", "```js\n> npm run serve\n```", "```js\n<template>\n  <div id=\"app\">\n    <current-time class=\"col-4\" />\n    <task-input class=\"col-6\" @add-task=\"addNewTask\" />\n    <div class=\"col-12\">\n      <div class=\"cardBox\">\n        <div class=\"container\">\n          <h2>My Tasks</h2>\n          <hr /> \n          <div class=\"col-4\">\n            <input \n              v-model=\"hideDone\"\n              type=\"checkbox\"\n              id=\"hideDone\"\n              name=\"hideDone\"\n            />\n            <label for=\"hideDone\">\n              Hide Done Tasks\n            </label>\n          </div>\n          <div class=\"col-4\">\n            <input \n              v-model=\"reverse\"\n              type=\"checkbox\"\n              id=\"reverse\"\n              name=\"reverse\"\n            />\n            <label for=\"reverse\">\n              Reverse Order\n            </label>\n          </div>\n          <div class=\"col-4\">\n            <input \n              v-model=\"sortById\"\n              type=\"checkbox\"\n              id=\"sortById\"\n              name=\"sortById\"\n            />\n            <label for=\"sortById\">\n              Sort By Id\n            </label>\n          </div>\n          <ul class=\"taskList\">\n            <li \n              v-for=\"(taskItem, index) in displayList\"\n              :key=\"`${index}_${Math.random()}`\"\n              :class=\"!!taskItem.finishedAt ? 'taskDone' : ''\"\n            >\n              <input type=\"checkbox\" \n                :checked=\"!!taskItem.finishedAt\" \n                @input=\"changeStatus(taskItem.id)\"\n              /> \n              #{{ taskItem.id }} - {{ taskItem.task }} \n              <span v-if=\"taskItem.finishedAt\"> | \n                Done at: \n                {{ formatDate(taskItem.finishedAt) }}\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n```", "```js\n<style scoped>\n  .taskList li {\n    list-style: none;\n    text-align: left;\n    padding: 5px 10px;\n    border-bottom: 1px solid rgba(0,0,0,0.15);\n  }\n\n  .taskList li:last-child {\n    border-bottom: 0px;\n  }\n\n  .taskList li:nth-child(even){\n    background-color: rgba(0,0,0,0.05);\n  }\n</style>\n```", "```js\n<style scoped>\n  .taskList li {\n    list-style: none;\n    text-align: left;\n    padding: 5px 10px;\n    border-bottom: 1px solid rgba(0,0,0,0.15);\n  }\n\n  .taskList li:last-child {\n    border-bottom: 0px;\n  }\n\n  .taskList li:nth-child(even){\n    background-color: rgba(0,0,0,0.05);\n  }\n\n  @keyframes colorChange {\n    from{\n      background-color: inherit;\n    }\n    to{\n      background-color: rgba(0, 160, 24, 0.577); \n    }\n  }\n\n  .taskList li.taskDone{\n    animation: colorChange 1s ease;\n    background-color: rgba(0, 160, 24, 0.577);\n  }\n</style>\n```", "```js\n> npm run serve\n```"]