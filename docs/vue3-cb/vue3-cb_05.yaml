- en: Fetching Data from the Web via HTTP Requests
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 通过HTTP请求从网络获取数据
- en: Data is a part of everyday life nowadays. If it weren't for data, you wouldn't
    be reading this book or trying to learn more about Vue.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据现在是日常生活的一部分。如果没有数据，你就不会读到这本书，也不会试图了解更多关于Vue的知识。
- en: Knowing how to fetch and send your data inside an application is a requirement
    for a developer, not just an extra skill that's nice to have. The best way to
    learn it is by practicing it and finding out how it is done behind the scenes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何在应用程序中获取和发送数据是开发人员的要求，而不仅仅是一个额外的技能。学习的最佳方式是通过实践，并找出它在幕后是如何完成的。
- en: In this chapter, we will learn how to build our own API data manipulation with
    the Fetch API and the most popular API library in the web right now, `axios`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将学习如何使用Fetch API和当前最流行的API库`axios`来构建自己的API数据操作。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下的配方：
- en: Creating a wrapper for the Fetch API as an HTTP client
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Fetch API的HTTP客户端包装器
- en: Creating a random cat image or GIF component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个随机猫图片或GIF组件
- en: Creating your local fake JSON API server with `MirageJS`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`MirageJS`创建本地虚拟JSON API服务器
- en: Using `axios` as the new HTTP client
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`axios`作为新的HTTP客户端
- en: Creating different `axios` instances
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建不同的`axios`实例
- en: Creating a request and response interceptor for `axios`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`axios`创建请求和响应拦截器
- en: Creating a CRUD interface with `axios` and `Vuesax`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`axios`和`Vuesax`创建CRUD接口
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using Node.js and Vue CLI.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用Node.js和Vue CLI。
- en: 'Attention, Windows users! You need to install an NPM package called `windows-build-tools`
    to be able to install the following required packages. To do this, open PowerShell
    as administrator and execute the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Windows用户！你需要安装一个名为`windows-build-tools`的NPM包，以便能够安装以下所需的包。要做到这一点，以管理员身份打开PowerShell并执行以下命令：
- en: '`> npm install -g windows-build-tools`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`'
- en: 'To install Vue CLI, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Vue CLI，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a wrapper for the Fetch API as an HTTP client
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Fetch API的HTTP客户端包装器
- en: The Fetch API is the child of the old `XMLHttpRequest`. It has an improved API
    and a new and powerful set of features completely based on `Promises`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Fetch API是旧的`XMLHttpRequest`的子代。它有一个改进的API和一个基于`Promises`的新而强大的功能集。
- en: The Fetch API is both simple and based on a generic definition of two objects,
    `Request`, and `Response`, which allow it to be used everywhere in the browser.
    The browser Fetch API can be executed inside the `window` or the `service worker`
    as well. There is no limitation on the usage of this API.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Fetch API既简单又基于两个对象`Request`和`Response`的通用定义，使其可以在浏览器中的任何地方使用。浏览器的Fetch API也可以在`window`或`service
    worker`中执行。对于这个API的使用没有限制。
- en: In this recipe, we will learn how to create a wrapper around the Fetch API to
    make the API calls more simple.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何创建一个Fetch API的包装器，使API调用更简单。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的先决条件如下：
- en: Node.js 12+
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we can use the Vue project with Vue CLI we created in
    the '*Creating Your first project with Vue CLI*' recipe in [Chapter 2,](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)
    *Introducing TypeScript and the Vue Ecosystem*, or we can start a new one.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的组件，我们可以使用在[第2章](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)中创建的使用Vue CLI创建的Vue项目，或者我们可以开始一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键导航，*Enter*键继续，*Spacebar*选择选项。选择`default`选项：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating the wrapper
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建包装器
- en: First, we need to create a new API wrapper to be used in this recipe. This will
    be the main file we will use on all the HTTP methods.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个新的API包装器来在这个教程中使用。这将是我们将在所有HTTP方法中使用的主要文件。
- en: 'Let''s create the base wrapper by following these steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建基本包装器：
- en: Create a new file called `baseFetch.js` in the `src/http` folder.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/http`文件夹中创建一个名为`baseFetch.js`的新文件。
- en: 'We will create an asynchronous function that will receive as an argument the
    three variables of `url`, `method`, and `options`. This will be a currying function,
    which the second function will receive as an argument, `type`:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个异步函数，它将作为参数接收`url`，`method`和`options`的三个变量。这将是一个柯里化函数，第二个函数将接收`type`作为参数：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating the API methods
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建API方法
- en: Now we need to make our HTTP method function. These functions will use the wrapper
    to execute the browser Fetch API and return the response.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要制作我们的HTTP方法函数。这些函数将使用包装器来执行浏览器的Fetch API并返回响应。
- en: 'Follow these steps to create each one of the API method calls:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建每一个API方法调用：
- en: Let's create a new file called `fetchApi.js` in the `src/http` folder.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/http`文件夹中创建一个名为`fetchApi.js`的新文件。
- en: 'We need to import the `baseHttp` from the file we created in the first step:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要从我们在第一步创建的文件中导入`baseHttp`：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now in the following parts, we will create each one of the HTTP methods that
    will be available in our wrapper.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在接下来的部分，我们将创建我们包装器中可用的每一个HTTP方法。
- en: GET method function
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: GET方法函数
- en: 'In these steps, we are going to create the *HTTP GET* method. Follow each of
    the following instructions to create the `getHttp` function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些步骤中，我们将创建*HTTP GET*方法。按照以下每一条指示来创建`getHttp`函数：
- en: Create a constant called `getHttp`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getHttp`的常量。
- en: Define that constant as an asynchronous function that receives three arguments,
    `url`, `type`, and `options`. The `type` argument will have the default value
    of `'json'`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个常量作为一个异步函数，接收三个参数，`url`，`type`和`options`。`type`参数将默认值为`'json'`。
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` that we received, `''get''` as the second argument, the `options` as the
    third argument, and immediately execute the function with the `type` argument
    we received:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数返回中，我们将执行`baseHttp`函数，传递我们收到的`url`，`'get'`作为第二个参数，`options`作为第三个参数，并立即执行带有我们收到的`type`参数的函数：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: POST method function
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: POST方法函数
- en: 'In this part, we are creating the *HTTP POST* method. Follow these steps to
    create the `postHttp` function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建*HTTP POST*方法。按照以下步骤来创建`postHttp`函数：
- en: Create a constant called `postHttp`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`postHttp`的常量。
- en: Assign to that constant an asynchronous function that receives four arguments,
    `url`, `body`, `type`, and `options`. The `type` argument will have the default
    value of `'json'`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个异步函数分配给该常量，该函数接收四个参数，`url`、`body`、`type`和`options`。`type`参数将具有默认值`'json'`。
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` argument that we received, and `''post''` as the second argument. In the
    third argument, we will pass an object with the `body` variable, and the deconstructed
    `options` argument that we received. Because of the currying property of `baseHttp`,
    we will execute the returned function with the `type` argument we received. The
    `body` is usually a JSON or a JavaScript object. If this request is going to be
    a file upload, `body` needs to be a `FormData` object:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数返回中，我们将执行`baseHttp`函数，传递我们收到的`url`参数和`'post'`作为第二个参数。在第三个参数中，我们将传递一个带有`body`变量和我们收到的解构`options`参数的对象。由于`baseHttp`的柯里化属性，我们将使用收到的`type`参数执行返回的函数。`body`通常是JSON或JavaScript对象。如果这个请求将是文件上传，`body`需要是一个`FormData`对象：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: PUT method function
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PUT方法函数
- en: 'Now we are creating an *HTTP PUT* method. Use the following steps to create
    the `putHttp` function:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在创建一个*HTTP PUT*方法。使用以下步骤创建`putHttp`函数：
- en: Create a constant called `putHttp`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`putHttp`的常量。
- en: Assign to that constant an asynchronous function that receives four arguments,
    `url`, `body`, `type`, and `options`. The `type` argument will have the default
    value of `'json'`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个异步函数分配给该常量，该函数接收四个参数，`url`、`body`、`type`和`options`。`type`参数将具有默认值`'json'`。
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` that we received, and `''put''` as the second argument. In the third argument,
    we will pass an object with the `body` variable, and the deconstructed `options`
    argument that we received. Because of the currying property of `baseHttp`, we
    will execute the returned function with the `type` argument we received. `body`
    is usually a JSON or a JavaScript object, but if this request is going to be a
    file upload, `body` needs to be a `FormData` object:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数返回中，我们将执行`baseHttp`函数，传递我们收到的`url`和`'put'`作为第二个参数。在第三个参数中，我们将传递一个带有`body`变量和我们收到的解构`options`参数的对象。由于`baseHttp`的柯里化属性，我们将使用收到的`type`参数执行返回的函数。`body`通常是JSON或JavaScript对象，但如果这个请求将是文件上传，`body`需要是一个`FormData`对象：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: PATCH method function
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PATCH方法函数
- en: 'It''s time to create an *HTTP PATCH* method. Follow these steps to create the
    `patchHttp` function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候创建一个*HTTP PATCH*方法了。按照以下步骤创建`patchHttp`函数：
- en: Create a constant called `patchHttp`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`patchHttp`的常量。
- en: Assign to that constant an asynchronous function that receives four arguments,
    `url`, `body`, `type`, and `options`. The `type` argument will have the default
    value of `'json'`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个异步函数分配给该常量，该函数接收四个参数，`url`、`body`、`type`和`options`。`type`参数将具有默认值`'json'`。
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` that we received, and `''patch''` as the second argument. In the third argument,
    we will pass an object with the `body` variable, and the deconstructed `options`
    argument that we received. Because of the currying property of `baseHttp`, we
    will execute the returned function with the `type` we received. `body` is usually
    a JSON or a JavaScript object, but if this request is going to be a file upload,
    `body` needs to be a `FormData` object:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数返回中，我们将执行`baseHttp`函数，传递我们收到的`url`和`'patch'`作为第二个参数。在第三个参数中，我们将传递一个带有`body`变量和我们收到的解构`options`参数的对象。由于`baseHttp`的柯里化属性，我们将使用收到的`type`执行返回的函数。`body`通常是JSON或JavaScript对象，但如果这个请求将是文件上传，`body`需要是一个`FormData`对象：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: UPDATE method function
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新方法函数
- en: 'In this section, we are creating an *HTTP UPDATE* method. Follow these steps
    to create the `updateHttp` function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们正在创建一个*HTTP UPDATE*方法。按照以下步骤创建`updateHttp`函数：
- en: Create a constant called `updateHttp`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`updateHttp`的常量。
- en: Assign to that constant an asynchronous function that receives four arguments,
    `url`, `body`, `type`, and `options`. The `type` argument will have the default
    value of `'json'`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个异步函数分配给该常量，该函数接收四个参数，`url`、`body`、`type`和`options`。`type`参数将具有默认值`'json'`。
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` that we received, and `''update''` as the second argument. In the third
    argument, we will pass an object with the `body` variable, and the deconstructed
    `options` argument that we received. Because of the currying property of `baseHttp`,
    we will execute the returned function with the `type` we received. `body` is usually
    a JSON or a JavaScript object, but if this request is going to be a file upload,
    `body` needs to be a `FormData` object:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数返回中，我们将执行`baseHttp`函数，传递我们收到的`url`和`'update'`作为第二个参数。在第三个参数中，我们将传递一个带有`body`变量和我们收到的解构`options`参数的对象。由于`baseHttp`的柯里化属性，我们将使用收到的`type`执行返回的函数。`body`通常是JSON或JavaScript对象，但如果这个请求将是文件上传，`body`需要是一个`FormData`对象：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: DELETE method function
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: DELETE方法函数
- en: 'In this final step, we will create a *DELETE HTTP* method. Follow these steps
    to create the `deleteHttp` function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一步，我们将创建一个*DELETE HTTP*方法。按照以下步骤创建`deleteHttp`函数：
- en: Create a constant called `deleteHttp`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`deleteHttp`的常量。
- en: Assign to that constant an asynchronous function that receives four arguments,
    `url`, `body`, `type`, and `options`. The type argument will have the default
    value of `'json'`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个异步函数分配给该常量，该函数接收四个参数，`url`、`body`、`type`和`options`。类型参数将具有默认值`'json'`。
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` that we received, and `''delete''` as the second argument. In the third
    argument, we will pass an object with the `body` variable, and the deconstructed
    `options` argument that we received. Because of the currying property of `baseHttp`,
    we will execute the returned function with the `type` we received. `body` is usually
    a JSON or a JavaScript object, but if this request is going to be a file upload,
    `body` needs to be a `FormData` object:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数返回中，我们将执行`baseHttp`函数，传递我们收到的`url`和`'delete'`作为第二个参数。在第三个参数中，我们将传递一个带有`body`变量和我们收到的解构`options`参数的对象。由于`baseHttp`的柯里化属性，我们将使用收到的`type`执行返回的函数。`body`通常是JSON或JavaScript对象，但如果这个请求将是文件上传，`body`需要是一个`FormData`对象：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a wrapper for the `Fetch` API that is presented on
    the `window` element. This wrapper consists of a currying and closure function,
    where the first function receives the URL data, method, and options for the Fetch
    API, and the resulting function is the Fetch API response translator.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们为`window`元素上呈现的`Fetch` API创建了一个包装器。这个包装器由一个柯里化和闭包函数组成，第一个函数接收Fetch
    API的URL数据、方法和选项，而结果函数是Fetch API的响应转换器。
- en: In the wrapper, the first part of the function will create our `fetch` request.
    There, we need to check whether it's a *GET* method, so we just need to execute
    it with the `url` parameter and omit the others. The second part of the function
    is responsible for the conversion of the `fetch` response. It will switch between
    the `type` parameter and execute the retrieving function according to the correct
    one.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在包装器中，函数的第一部分将创建我们的`fetch`请求。在那里，我们需要检查它是否是*GET*方法，所以我们只需要用`url`参数执行它并省略其他参数。函数的第二部分负责将`fetch`响应转换。它将在`type`参数之间切换，并根据正确的参数执行检索函数。
- en: 'To receive the final data for your request, you always need to call the response
    translator after the request, as in the following example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要接收请求的最终数据，您始终需要在请求之后调用响应翻译器，就像以下示例中一样：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will get the data from the URL and transform the response into a JSON/JavaScript
    object.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从URL获取数据，并将响应转换为JSON/JavaScript对象。
- en: The second part we made was the methods translator. We made functions for each
    one of the REST verbs to be used more easily. The GET verb doesn't have the ability
    to pass any `body` but all the others are capable of passing a `body` in the request.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们制作的第二部分是方法翻译器。我们为每个REST动词制作了函数，以便更轻松地使用。 GET动词没有能力传递任何`body`，但所有其他动词都能够在请求中传递`body`。
- en: See also
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about the Fetch API at [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)找到有关Fetch
    API的更多信息。
- en: You can find more information about FormData at [https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData)找到有关FormData的更多信息。
- en: You can find more information about the Fetch response body at [https://developer.mozilla.org/en-US/docs/Web/API/Body/body](https://developer.mozilla.org/en-US/docs/Web/API/Body/body).
    [](https://developer.mozilla.org/en-US/docs/Web/API/Body/body)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/API/Body/body](https://developer.mozilla.org/en-US/docs/Web/API/Body/body)找到有关Fetch响应主体的更多信息。
    [](https://developer.mozilla.org/en-US/docs/Web/API/Body/body)
- en: You can find more information about headers at [https://developer.mozilla.org/en-US/docs/Web/API/Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/API/Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers)找到有关标头的更多信息。
- en: You can find more information about requests at [https://developer.mozilla.org/](https://developer.mozilla.org/en-US/docs/Web/API/Request)[en-US/docs/Web/API/Request](https://developer.mozilla.org/en-US/docs/Web/API/Request).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/](https://developer.mozilla.org/en-US/docs/Web/API/Request)[en-US/docs/Web/API/Request](https://developer.mozilla.org/en-US/docs/Web/API/Request)找到有关请求的更多信息。
- en: Creating a random cat image or GIF component
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个随机猫图像或GIF组件
- en: It's common knowledge that the internet is made of many GIFs and videos of cats.
    I'm sure that if we took down all cat-related content, we would have a web blackout.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，互联网上有许多猫的GIF和视频。我相信如果我们删除所有与猫有关的内容，我们将会出现网络黑屏。
- en: The best way to understand more about the Fetch API and how it can be used inside
    a component is to make a random cat image or GIF component.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 了解有关Fetch API以及如何在组件内使用它的最佳方法是制作一个随机猫图像或GIF组件。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的先决条件如下：
- en: Node.js 12+
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we can use the Vue project with Vue CLI that we used
    in the '*Creating a wrapper for the Fetch API as an HTTP client*' recipe, or we
    can start a new one.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用在“*将Fetch API包装为HTTP客户端”配方中使用的Vue项目和Vue CLI，或者我们可以启动一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动新的项目，打开Terminal（macOS或Linux）或Command Prompt/PowerShell（Windows），并执行以下命令：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键导航，*Enter*键继续，*Spacebar*选择选项。选择`default`选项：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating the component
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建组件
- en: In this recipe, we will be using the components created in [Chapter 4](497a6a24-00bb-44d6-b184-887f3c30a401.xhtml)*,
    Components, Mixins, and Functional Components*, for visual elements. You can achieve
    the same results with simple HTML elements.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用[第4章](497a6a24-00bb-44d6-b184-887f3c30a401.xhtml)*组件、混合和功能组件*中创建的组件进行视觉元素。您也可以使用简单的HTML元素来实现相同的结果。
- en: 'We will divide the creation of this component in three steps: `<script>`, `<template>`,
    and `<style>`.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个组件的创建分为三个步骤：`<script>`、`<template>`和`<style>`。
- en: Single file component <script> section
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'Follow these steps to create the `<script>` section of the single file component:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建单文件组件的`<script>`部分：
- en: Create a new file called `RandomCat.vue` in the `src/components` folder and
    open it.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个名为`RandomCat.vue`的新文件并打开它。
- en: 'Import the `getHttp` function from the `fetchApi` wrapper we made in the ''*Creating
    a wrapper for the Fetch API as an HTTP client*'' recipe:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们在'*将Fetch API包装为HTTP客户端创建包装器*'教程中制作的`fetchApi`包装器中导入`getHttp`函数：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Asynchronously import the `MaterialButton` and `MaterialCardBox` components
    in the `component` property:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`component`属性中异步导入`MaterialButton`和`MaterialCardBox`组件：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `data` property, we need to create a new data value named `kittyImage`,
    which will be by default an empty string:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性中，我们需要创建一个名为`kittyImage`的新数据值，默认为空字符串：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `methods` property, we need to create the `getImage` method, which will
    fetch the image as a `Blob` and return it as a `URL.createObjectURL`. We also
    need to create the `newCatImage` method that will fetch a new still image of a
    cat and the `newCatGif` method that will fetch a new cat GIF:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性中，我们需要创建`getImage`方法，它将以`Blob`的形式获取图片，并将其作为`URL.createObjectURL`返回。我们还需要创建`newCatImage`方法，它将获取一张新的猫的静态图片，以及`newCatGif`方法，它将获取一个新的猫的GIF：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `beforeMount` life cycle hook, we need to make it asynchronous and execute
    the `newCatImage` method:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`beforeMount`生命周期钩子中，我们需要将其设置为异步，并执行`newCatImage`方法：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Single file component <template> section
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'Follow these steps to create the `<template>` section of the single file component:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建单文件组件的`<template>`部分：
- en: 'First, we need to add the `MaterialCardBox` component with a header and sub-header,
    activate the `media` and `action` sections, and create the `<template>` named
    slots for `media` and `action`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要添加带有标题和副标题的`MaterialCardBox`组件，激活`media`和`action`部分，并为`media`和`action`创建`<template>`命名插槽：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `<template>` named slot for `media`, we need to add an `<img>` element
    that will receive a URI `Blob`, which will be displayed when there is any data
    in the `kittyImage` variable, or it will display a loading icon:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`中名为`media`的插槽中，我们需要添加一个`<img>`元素，它将接收一个URI`Blob`，当`kittyImage`变量中有任何数据时，它将显示出来，否则将显示一个加载图标：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At the `<template>` named slot for `action`, we will create two buttons, one
    for fetching cat images and another for fetching cat GIFs, and both will have
    an event listener on the `@click` directive that calls a function that fetches
    the corresponding image:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`中名为`action`的插槽中，我们将创建两个按钮，一个用于获取猫的图片，另一个用于获取猫的GIF，两者都将在`@click`指令上有一个事件监听器，调用一个函数来获取相应的图片：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Single file component <style> section
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<style>`部分
- en: 'In the `<style>` part of the component, we need to set the `body font-size`
    for the CSS style calculation based on `rem` and `em`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件的`<style>`部分中，我们需要设置`body font-size`以便基于`rem`和`em`进行CSS样式计算：
- en: '[PRE22]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Getting up and running with your new component
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动和运行您的新组件
- en: 'Follow these steps to add your component to your Vue application:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将您的组件添加到Vue应用程序中：
- en: Open the `App.vue` file in the `src` folder.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中的`App.vue`文件中打开。
- en: 'In the `components` property, asynchronously import the `RandomCat.vue` component:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`components`属性中，异步导入`RandomCat.vue`组件：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the `<template>` section of the file, declare the imported component:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件的`<template>`部分中，声明导入的组件：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here is your component rendered and running:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的方式：
- en: '![](assets/9adf427e-c7ae-401c-91ac-37c077f575ed.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9adf427e-c7ae-401c-91ac-37c077f575ed.png)'
- en: How it works...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Using the `getHttp` wrapper, the component was able to get the URL and retrieve
    it as a `Blob` type. With this response, we can use the `URL.createObjectUrl`
    navigator method and pass the `Blob` as an argument to get a valid image URL that
    can be used as the `src` attribute.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`getHttp`包装器，组件能够获取URL并将其作为`Blob`类型检索出来。有了这个响应，我们可以使用`URL.createObjectUrl`导航方法，并将`Blob`作为参数传递，以获取一个有效的图像URL，该URL可以用作`src`属性。
- en: See also
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `URL.createObjectUrl` at [https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL)找到有关`URL.createObjectUrl`的更多信息。
- en: You can find more information about the `Blob` response type at [https://developer.mozilla.org/en-US/docs/Web/API/Body/blob](https://developer.mozilla.org/en-US/docs/Web/API/Body/blob).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/API/Body/blob](https://developer.mozilla.org/en-US/docs/Web/API/Body/blob)找到有关`Blob`响应类型的更多信息。
- en: Creating your fake JSON API server with MirageJS
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MirageJS创建您的虚假JSON API服务器
- en: Faking data for testing, developing, or designing is always a problem. You need
    to have a big JSON or make a custom server to handle any data changes when presenting
    the application at the development stage.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试、开发或设计而伪造数据总是一个问题。在开发阶段展示应用程序时，您需要有一个大的JSON或者制作一个自定义服务器来处理任何数据更改。
- en: There is now a way to help developers and UI designers achieve this without
    needing to code an external server – a new tool called MirageJS, a server emulator
    that runs on the browser.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一种方法可以帮助开发人员和UI设计师在不需要编写外部服务器的情况下实现这一点 - 一个名为MirageJS的新工具，它是在浏览器上运行的服务器模拟器。
- en: In this recipe, we will learn how to use the MirageJS as a mock server and execute
    HTTP requests on it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何使用MirageJS作为模拟服务器并在其上执行HTTP请求。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we can use the Vue project with Vue CLI that we did
    in the '*Creating a wrapper for the Fetch API as an HTTP client*' recipe, or we
    can start a new one.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用我们在“*将Fetch API作为HTTP客户端创建包装器*”配方中使用的Vue项目和Vue CLI，或者我们可以启动一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE26]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这将有助于创建项目。您可以使用箭头键进行导航，使用*Enter*键继续，使用*Spacebar*选择选项。选择`default`选项：
- en: '[PRE27]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Creating the mock server
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建模拟服务器
- en: In this recipe, we will be using the `getHttp` function from the `fetchApi`
    wrapper we made in the 'Creating a wrapper for the Fetch API as an HTTP client' recipe.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用在“将Fetch API包装为HTTP客户端的创建包装器”配方中制作的`fetchApi`包装器的`getHttp`函数。
- en: 'Work through the next steps and sections to create your `MirageJS` mock server:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通过下一步和部分来创建您的`MirageJS`模拟服务器：
- en: 'Install the `MirageJS` server to your packages. You need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 将`MirageJS`服务器安装到您的软件包中。您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE28]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The version used in this recipe was 0.1.32\. Watch for any changes to `MirageJS`,
    as there are no current LTS versions of the library yet.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方使用的版本是0.1.32。注意`MirageJS`的任何更改，因为目前还没有当前的LTS版本。
- en: Now in the following sections, we will create each one of the HTTP methods that
    will be mocked by the MirageJS server.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在接下来的部分中，我们将创建每一个由MirageJS服务器模拟的HTTP方法。
- en: Creating the mock database
  id: totrans-177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建模拟数据库
- en: 'In this section, we will create a `MirageJS` database that will be used to
    store the temporary data. Follow these steps to create it:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建一个`MirageJS`数据库，用于存储临时数据。按照以下步骤创建它：
- en: Create a new file called `db.js` file in the `src/server` folder for the initial
    loaded data.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/server`文件夹中创建一个名为`db.js`的新文件，用于初始加载的数据。
- en: 'We need to make a JavaScript object the default export for this file, containing
    the initial data that we want the server to have:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为这个文件创建一个JavaScript对象作为默认导出，其中包含我们希望服务器具有的初始数据：
- en: '[PRE29]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Creating the GET route function
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建GET路由函数
- en: 'In this section, we are going to create the *HTTP GET* method that will be
    mocked by the `MirageJS` server. Follow these steps to create it:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建一个由`MirageJS`服务器模拟的*HTTP GET*方法。按照以下步骤创建它：
- en: For the *GET* methods, we need to create a new file called `get.js` in the `src/server`
    folder.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于*GET*方法，我们需要在`src/server`文件夹中创建一个名为`get.js`的新文件。
- en: 'For this recipe, we will make a generic `getFrom` function that receives a
    key as an argument and returns a function. This returned function returns a direct
    point to the local database with the indicated key:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将创建一个通用的`getFrom`函数，该函数接收一个键作为参数并返回一个函数。这个返回的函数返回一个直接指向本地数据库的指定键：
- en: '[PRE30]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Creating the POST route function
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建POST路由函数
- en: 'In this section, we are going to create the *HTTP POST* method, that will be
    mocked by the `MirageJS` server. Follow these steps to create it:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建*HTTP POST*方法，这将由`MirageJS`服务器模拟。按照以下步骤创建它：
- en: For the *POST* methods, we need to create a new file called `post.js` in the
    `src/server` folder.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于*POST*方法，我们需要在`src/server`文件夹中创建一个名为`post.js`的新文件。
- en: 'For this recipe, we will make a generic `postFrom` function that receives a
    key as an argument and returns a function. This returned function will parse the
    `data` property of the HTTP request body and returns an internal function of the
    server schema that inserts the data inside the database. Using the `key` argument,
    the schema knows which table we are handling:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将创建一个通用的`postFrom`函数，该函数接收一个键作为参数并返回一个函数。这个返回的函数将解析HTTP请求体的`data`属性，并返回服务器模式的内部函数，将数据插入数据库。使用`key`参数，模式知道我们正在处理哪个表：
- en: '[PRE31]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Creating the PATCH route function
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建PATCH路由函数
- en: 'In this section, we are going to create the *HTTP PATCH* method that will be
    mocked by the `MirageJS` server. Follow these steps to create it:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建`MirageJS`服务器模拟的*HTTP PATCH*方法。按照以下步骤创建它：
- en: For the *PATCH* methods, we need to create a new file called `patch.js` in the
    `src/server` folder.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于*PATCH*方法，我们需要在`src/server`文件夹中创建一个名为`patch.js`的新文件。
- en: 'For this recipe, we will make a generic `patchFrom` function that receives
    a key as an argument and returns a function. This returned function will parse
    the `data` property of the HTTP request body and returns an internal function
    of the server schema that updates a specific object with the `id` property that
    was passed along with the data. Using the `key` argument, the schema knows which
    table we are handling:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将制作一个通用的`patchFrom`函数，该函数接收一个键作为参数并返回一个函数。返回的函数将解析HTTP请求体的`data`属性，并返回一个服务器模式的内部函数，该函数更新具有与数据一起传递的`id`属性的特定对象。使用`key`参数，模式知道我们正在处理哪个表：
- en: '[PRE32]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Creating the DELETE route function
  id: totrans-197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建DELETE路由函数
- en: 'In this section, we are going to create the *HTTP DELETE* method that will
    be mocked by the `MirageJS` server. Follow these steps to create it:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建`MirageJS`服务器模拟的*HTTP DELETE*方法。按照以下步骤创建它：
- en: For the *DELETE* methods, we need to create a new file called `delete.js` in
    the `src/server` folder.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于*DELETE*方法，我们需要在`src/server`文件夹中创建一个名为`delete.js`的新文件。
- en: 'For this recipe, we will make a generic `patchFrom` function that receives
    a key as an argument and returns a function. This returned function will parse
    the `data` property of the HTTP request body and return an internal function of
    the server schema that deletes a specific object with the `id` property, which
    was passed to the server via the route *REST* parameter. Using the `key` argument,
    the schema knows which table we are handling:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将制作一个通用的`patchFrom`函数，该函数接收一个键作为参数并返回一个函数。返回的函数将解析HTTP请求体的`data`属性，并返回一个服务器模式的内部函数，该函数删除具有通过路由*REST*参数传递给服务器的`id`属性的特定对象。使用`key`参数，模式知道我们正在处理哪个表：
- en: '[PRE33]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Creating the server
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建服务器
- en: 'In this section, we are going to create the `MirageJS` server and the routes
    that will be available. Follow these steps to create the server:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建`MirageJS`服务器和可用的路由。按照以下步骤创建服务器：
- en: Create a new file called `server.js` inside the `src/server` folder.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/server`文件夹中创建一个名为`server.js`的新文件。
- en: 'Next, we need to import the `Server` class, the `baseData`, and the router
    methods:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要导入`Server`类，`baseData`和路由方法：
- en: '[PRE34]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a global variable to the `window` scope, called `server`, and set this
    variable as a new execution of the `Server` class:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个全局变量`server`，并将此变量设置为`Server`类的新执行：
- en: '[PRE35]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the `Server` class construction options, add a new property called `seeds`.
    This property is a function that receives the server (`srv`) as an argument and
    executes the `srv.db.loadData` function passing the `baseDate` as a parameter:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Server`类的构造选项中，添加一个名为`seeds`的新属性。此属性是一个接收服务器（`srv`）作为参数并执行`srv.db.loadData`函数传递`baseDate`作为参数的函数：
- en: '[PRE36]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now we need to add in the same construction options to a new property called
    `routes`, which will create the mock server routes. This property is a function
    and on the function body, we will need to set the `namespace` of the mock server
    and the delay in milliseconds within which the server will respond. There will
    be four routes. For the **Create** route, we will make a new route called `/users`
    that listen to the *POST* method. For the **Read** route, we will make a new route
    called `/users` that listen to the *GET* method. For the **Update** route, we
    will make a new route called `/users/:id` that listens to the *PATCH* method,
    and finally, for the **Delete** route, we will make a new route called `/users`
    that listen to the *DELETE* method:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加相同的构造选项到一个名为`routes`的新属性中，它将创建模拟服务器路由。这个属性是一个函数，在函数体内，我们需要设置模拟服务器的`namespace`和服务器响应的毫秒延迟。将有四个路由。对于**创建**路由，我们将创建一个名为`/users`的新路由，监听*POST*方法。对于**读取**路由，我们将创建一个名为`/users`的新路由，监听*GET*方法。对于**更新**路由，我们将创建一个名为`/users/:id`的新路由，监听*PATCH*方法，最后，对于**删除**路由，我们将创建一个名为`/users`的新路由，监听*DELETE*方法：
- en: '[PRE37]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Adding to the application
  id: totrans-213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加到应用程序
- en: 'In this section, we will add the `MirageJS` server to the Vue application.
    Follow these steps to make the server available to your Vue application:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将`MirageJS`服务器添加到Vue应用程序中。按照以下步骤使服务器对您的Vue应用程序可用：
- en: Open the `main.js` file in the `src` folder.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`main.js`文件。
- en: 'We need to declare the server as the first imported declaration, so it''s available
    on the initial loading of the application:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将服务器声明为第一个导入声明，这样它就可以在应用程序的初始加载时可用：
- en: '[PRE38]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Creating the component
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建组件
- en: Now that we have our server, we need to test it. To do so, we will create a
    simple application that will run each of the HTTP methods and show the results
    of each call.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了服务器，我们需要测试它。为了这样做，我们将创建一个简单的应用程序，运行每个HTTP方法，并显示每个调用的结果。
- en: In the following parts, we will create a simple Vue application.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将创建一个简单的Vue应用程序。
- en: Single file component <script> section
  id: totrans-221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these steps to create it:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照以下步骤创建它：
- en: Open the `App.vue` file in the `src` folder.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`App.vue`文件。
- en: 'Import the `getHttp`, `postHttp`, `patchHttp`, and `deleteHTTP` methods from
    the `fetchHttp` wrapper that we made in the ''Creating a wrapper for the Fetch
    API as an HTTP client'' recipe:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们在'将Fetch API包装为HTTP客户端的创建包装器'中制作的`fetchHttp`包装器中导入`getHttp`，`postHttp`，`patchHttp`和`deleteHTTP`方法：
- en: '[PRE39]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the `data` property, we need to create three new properties to be used,
    `response`, `userData`, and `userId`:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性中，我们需要创建三个新属性来使用，`response`，`userData`和`userId`：
- en: '[PRE40]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the `methods` property, we need to create four new methods, `getAllUsers`,
    `createUser`, `updateUser`, and `deleteUser`:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性中，我们需要创建四个新方法，`getAllUsers`，`createUser`，`updateUser`和`deleteUser`：
- en: '[PRE41]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the `getAllUsers` method, we will set the response data property as the
    result of the `getHttp` function of the `api/users` route:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getAllUsers`方法中，我们将设置响应数据属性为`api/users`路由的`getHttp`函数的结果：
- en: '[PRE42]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the `createUser` method, we will receive a `data` argument, which will be
    an object that we will pass to the `postHttp` on the `api/users` route, and after
    that, we will execute the `getAllUsers` method:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`createUser`方法中，我们将接收一个`data`参数，这将是一个对象，我们将把它传递给`api/users`路由上的`postHttp`，然后执行`getAllUsers`方法：
- en: '[PRE43]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'For the `updateUser` method, we will receive a `data` argument, which will
    be an object that we will pass to the `patchHttp` on the `api/users/:id` route,
    using the `id` property on the object as the `:id` on the route. After that, we
    will execute the `getAllUsers` method:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`updateUser`方法，我们将接收一个`data`参数，这将是一个对象，我们将其传递给`patchHttp`，在`api/users/:id`路由上使用对象上的`id`属性作为路由上的`:id`。之后，我们将执行`getAllUsers`方法：
- en: '[PRE44]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, on the `deleteUser` method, we receive the user `id` as the argument,
    which is a number, then we pass it to the `deleteHttp` on the `api/users/:id`
    route, using the ID as `:id`. After that, we execute the `getAllUsers` method:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`deleteUser`方法中，我们接收用户`id`作为参数，该参数是一个数字，然后我们将其传递给`deleteHttp`，在`api/users/:id`路由上使用ID作为`:id`。之后，我们执行`getAllUsers`方法：
- en: '[PRE45]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Single file component <template> section
  id: totrans-238
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these steps to create it:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照以下步骤创建它：
- en: 'At the top of the template, we need to add the `response` property, wrapped
    in an `<pre>` HTML element:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板的顶部，我们需要添加`response`属性，包裹在一个`<pre>`HTML元素中：
- en: '[PRE46]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'For the creation and updating of a user, we need to create a `textarea` HTML
    input with a `v-model` directive bound to the `userData` property:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于用户的创建和更新，我们需要创建一个带有`v-model`指令绑定到`userData`属性的`textarea`HTML输入：
- en: '[PRE47]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'To send this data, we need to create two buttons, both having an event listener
    bound on the click event with the `@click` directive targeting the `createUser`
    and `updateUser` respectively, and passing the `userData` in the execution:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要发送这些数据，我们需要创建两个按钮，两者都在单击事件上绑定了事件侦听器，使用`@click`指令分别指向`createUser`和`updateUser`，并在执行时传递`userData`：
- en: '[PRE48]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'To execute the *DELETE* method, we need to create an input HTML element of
    type `number` with a `v-model` directive bound to the `userId` property:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行*DELETE*方法，我们需要创建一个类型为`number`的输入HTML元素，并将`v-model`指令绑定到`userId`属性：
- en: '[PRE49]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, to execute this action we need to create a button that will have an
    event listener bound on the click event with the `@click` directive, targeting
    the `deleteUser` method and passing the `userId` property on the execution:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，要执行此操作，我们需要创建一个按钮，该按钮将在单击事件上绑定一个事件侦听器，使用`@click`指令，将其指向`deleteUser`方法，并在执行时传递`userId`属性：
- en: '[PRE50]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE51]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Here is your component rendered and running:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的方式：
- en: '![](assets/f170dcb7-058b-45da-ade2-13a97c97fb8a.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f170dcb7-058b-45da-ade2-13a97c97fb8a.png)'
- en: How it works...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`MirageJS` works like an interceptor of every HTTP request that happens on
    the application. The server intercepts all **XHR (XMLHttpRequest)** executions
    on the browsers and checks for the route to see whether it matches any one of
    the routes created on server creation. If it matches, the server will execute
    the function accordingly on the respective route.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`MirageJS`的工作原理类似于拦截应用程序上发生的每个HTTP请求的拦截器。服务器拦截浏览器上的所有**XHR (XMLHttpRequest)**执行，并检查路由，以查看它是否与服务器创建的任何一个路由匹配。如果匹配，服务器将根据相应的路由执行函数。'
- en: Working as a simple REST server with basic CRUD functions, the server has a
    schema-like database structure that helps in the process of making a virtual database
    for storing the data.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 作为具有基本CRUD功能的简单REST服务器，服务器具有类似模式的数据库结构，有助于创建用于存储数据的虚拟数据库。
- en: See also
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about MirageJS at [https://github.com/miragejs/miragejs](https://github.com/miragejs/miragejs).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/miragejs/miragejs](https://github.com/miragejs/miragejs)找到有关MirageJS的更多信息。
- en: Using axios as the new HTTP client
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用axios作为新的HTTP客户端
- en: When you need a library for HTTP requests, there is no doubt that `axios` is
    the one you should go to. Used by more than 1.5 million open-source projects and
    countless closed ones, this library is the king of HTTP libraries.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要一个用于HTTP请求的库时，毫无疑问`axios`是您应该选择的。这个库被超过150万个开源项目和无数个闭源项目使用，是HTTP库之王。
- en: It's built to work with most browsers and provides one of the most complete
    sets of options out there – you can customize everything in your request.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 它构建成适用于大多数浏览器，并提供了最完整的选项集之一-您可以自定义请求中的一切。
- en: In this recipe, we will learn how to change our Fetch API wrapper to `axios`
    and start working around it.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何将我们的Fetch API包装器更改为`axios`并开始围绕它工作。
- en: Getting ready
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we can use the Vue project with Vue CLI that we made
    in the '*Creating your fake JSON API Server with MirageJS*' recipe, or we can
    start a new one.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用在'*使用MirageJS创建您的虚拟JSON API服务器*'食谱中制作的Vue项目，或者我们可以开始一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE52]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: CLI会询问一些问题，这些问题将有助于创建项目。您可以使用箭头键进行导航，*Enter*键继续，*Spacebar*键选择选项。选择`default`选项：
- en: '[PRE53]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Changing from the Fetch API to Axios
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Fetch API更改为Axios
- en: 'In the next steps, we will change the Fetch API used in the HTTP wrapper for
    the `axios` library. Follow these steps to change it correctly:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将为HTTP包装器中使用的Fetch API更改为`axios`库。按照以下步骤正确更改它：
- en: 'Install `axios` in your packages. You need to open Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的包中安装`axios`。您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE54]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The version used in this recipe was 0.19.0\. Watch for changes to `axios`, as
    there is no LTS version of the library yet.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱中使用的版本是0.19.0。注意`axios`的更改，因为该库尚无LTS版本。
- en: Open the `baseFetch.js` file inside the `src/http` folder.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/http`文件夹中的`baseFetch.js`文件。
- en: 'Simplify the method so that it will receive three arguments, `url`, `method`,
    and `options`, and return an `axios` method, calling the HTTP request with the
    methods passed as the constructor of the instance:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简化该方法，使其接收三个参数，`url`、`method`和`options`，并返回一个`axios`方法，使用传递给实例构造函数的方法调用HTTP请求：
- en: '[PRE55]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Changing the GET method function
  id: totrans-283
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改GET方法函数
- en: 'In this part, we are changing the *HTTP GET* method. Follow these instructions
    to change the `getHttp` function:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们正在更改*HTTP GET*方法。按照以下说明更改`getHttp`函数：
- en: Open the `fetchApi.js` file inside the `src/http` folder.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/http`文件夹中的`fetchApi.js`文件。
- en: 'In the `getHttp` function, we will add a new argument param, and remove the
    currying functions:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getHttp`函数中，我们将添加一个新的参数param，并删除柯里化函数：
- en: '[PRE56]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Changing the POST method function
  id: totrans-288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改POST方法函数
- en: 'In this part, we are changing the *HTTP POST* method. Follow these instructions
    to change the `postHttp` function:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们正在更改*HTTP POST*方法。按照以下说明更改`postHttp`函数：
- en: Open the `fetchApi.js` file inside the `http` folder.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`http`文件夹中的`fetchApi.js`文件。
- en: 'In the `postHttp` function, we will change the `body` argument to `data`, and
    remove the currying functions:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`postHttp`函数中，我们将把`body`参数改为`data`，并删除柯里化函数：
- en: '[PRE57]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Changing the PUT method function
  id: totrans-293
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改PUT方法函数
- en: 'In this part, we are changing the *HTTP PUT* method. Follow these instructions
    to change the `putHttp` function:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们正在更改*HTTP PUT*方法。按照以下说明更改`putHttp`函数：
- en: Open the `fetchApi.js` file inside the `http` folder.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`http`文件夹内的`fetchApi.js`文件。
- en: 'In the `putHttp` function, we will change the `body` argument to `data`, and
    remove the currying functions:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`putHttp`函数中，我们将把`body`参数改为`data`，并删除柯里化函数：
- en: '[PRE58]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Changing the PATCH method function
  id: totrans-298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改PATCH方法函数
- en: 'In this part, we are changing the *HTTP PATCH* method. Follow these instructions
    to change the `patchHttp` function:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们正在更改*HTTP PATCH*方法。按照以下说明更改`patchHttp`函数：
- en: Open the `fetchApi.js` file inside the `http` folder.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`http`文件夹内的`fetchApi.js`文件。
- en: 'In the `patchHttp` function, we will change the `body` argument to `data`,
    and remove the currying functions:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`patchHttp`函数中，我们将把`body`参数改为`data`，并删除柯里化函数：
- en: '[PRE59]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Changing the UPDATE method function
  id: totrans-303
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改UPDATE方法函数
- en: 'In this part, we are changing the *HTTP UPDATE* method. Follow these instructions
    to change the `updateHttp` function:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们正在更改*HTTP UPDATE*方法。按照以下说明更改`updateHttp`函数：
- en: Open the `fetchApi.js` file inside the `http` folder.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`http`文件夹内的`fetchApi.js`文件。
- en: 'In the `updateHttp` function, we will add a new argument param, and remove
    the currying functions:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`updateHttp`函数中，我们将添加一个新的参数param，并删除柯里化函数：
- en: '[PRE60]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Changing the DELETE method function
  id: totrans-308
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改DELETE方法函数
- en: 'In this part, we are changing the *HTTP DELETE* method. Follow these instructions
    to change the `deleteHttp` function:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们正在更改*HTTP DELETE*方法。按照以下说明更改`deleteHttp`函数：
- en: Open the `fetchApi.js` file inside the `http` folder.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`http`文件夹内的`fetchApi.js`文件。
- en: 'On the `deleteHttp` function, we will change the `body` argument to `data`,
    and remove the currying functions:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`deleteHttp`函数中，我们将把`body`参数改为`data`，并删除柯里化函数：
- en: '[PRE61]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Changing the component
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改组件
- en: 'In this part, we will change how the component works with the new functions.
    Follow these instructions to change it correctly:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将改变组件与新函数的工作方式。按照以下说明正确更改它：
- en: Open the `App.vue` file inside the `src` folder.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src`文件夹内的`App.vue`文件。
- en: 'In the `getAllUsers` method, we will need to change the way the response is
    defined because `axios` gives us a completely different response object than the
    Fetch API:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getAllUsers`方法中，我们需要更改响应的定义方式，因为`axios`给我们提供了一个完全不同的响应对象，而不是Fetch API：
- en: '[PRE62]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the `deleteUser` method, we can just pass the URL as the parameter:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`deleteUser`方法中，我们可以直接将URL作为参数传递：
- en: '[PRE63]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE64]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: How it works...
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we made the wrapper for the Fetch API, we used a technique of abstracting
    the API into another interface, which made it possible to change from the Fetch
    API to the `axios` library. By doing this we were able to improve the methods
    and simplify how the functions are called and handled. For example, the GET method
    can now receive a new argument called **params**, which are objects of URL query
    parameters that will be automatically injected into the URL.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为Fetch API创建包装器时，我们使用了一种将API抽象成另一个接口的技术，这使得从Fetch API更改到`axios`库成为可能。通过这样做，我们能够改进方法并简化函数的调用和处理方式。例如，GET方法现在可以接收一个名为**params**的新参数，这些参数是URL查询参数的对象，将自动注入到URL中。
- en: We also had to change the way that the responses were interpreted because `axios`
    have a more robust and complete response object than the Fetch API, which returns
    just the fetched response itself.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须更改响应的解释方式，因为`axios`比Fetch API具有更健壮和完整的响应对象，后者只返回获取的响应本身。
- en: See also
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `axios` at [https://github.com/axios/axios](https://github.com/axios/axios).
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/axios/axios](https://github.com/axios/axios)找到有关`axios`的更多信息。
- en: Creating different axios instances
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建不同的axios实例
- en: When using `axios`, you can have multiple instances of it running with none
    of them interfering with each other. For example, you have an instance pointing
    to a user API that is on version 1 and another pointing to the payment API that
    is on version 2, both sharing the same namespace.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`axios`时，您可以运行多个实例，而它们互不干扰。例如，您可以有一个指向版本1的用户API的实例，另一个指向版本2的支付API，两者共享相同的命名空间。
- en: Here, we are going to learn how to create various `axios` instances, so you
    are able to work with as many API namespaces as you want without problems or interference.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将学习如何创建各种`axios`实例，因此您可以在不受问题或干扰的情况下使用尽可能多的API命名空间。
- en: Getting ready
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: To start our component, we can use the Vue project with Vue CLI that we did
    in the '*Using axios as the new HTTP client*' recipe, or we can start a new one.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用在“*使用axios作为新的HTTP客户端*”食谱中使用的Vue CLI创建的Vue项目，或者我们可以启动一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新的实例，请打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE65]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键进行导航，*Enter*键继续，*Spacebar*键选择选项。选择`default`选项：
- en: '[PRE66]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Changing the HTTP function
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改HTTP函数
- en: When creating multiple `axios` instances, the process of calling the `axios`
    library changes. Because of that, we need to change how our HTTP wrapper instantiates
    the `axios` library.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 创建多个`axios`实例时，调用`axios`库的过程会发生变化。因此，我们需要更改HTTP包装器实例化`axios`库的方式。
- en: In the following parts, we will change how the HTTP wrapper works with the creation
    of a new `axios` instance, and make it available to the application.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将改变HTTP包装器与创建新的`axios`实例的工作方式，并使其可用于应用程序。
- en: Changing the HTTP Fetch wrapper
  id: totrans-345
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改HTTP Fetch包装器
- en: 'In the following steps, we will create a new custom `axios` instance that will
    be used in the HTTP wrapper. Follow these instructions to add the new instance
    to the application:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将创建一个新的自定义`axios`实例，该实例将用于HTTP包装器。按照以下说明将新实例添加到应用程序中：
- en: Open the `baseFetch.js` file in the `src/http` folder.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/http`文件夹中打开`baseFetch.js`文件。
- en: 'We need to create a new factory function called `createAxios` to generate a
    new `axios` instance each time it''s executed:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个名为`createAxios`的新工厂函数，以便每次执行时生成一个新的`axios`实例：
- en: '[PRE67]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Now we need to create the `localApi` constant, the value of which will be the
    result of the execution of the `createAxios` factory:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建`localApi`常量，其值将是`createAxios`工厂的执行结果：
- en: '[PRE68]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'For the `JSONPlaceHolder` we will create a constant that will be exported,
    named `jsonPlaceholderApi`, the value of which will be the execution of the `createAxios`
    factory. We will also pass an object as an argument with the `baseURL` property
    defined:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`JSONPlaceHolder`，我们将创建一个名为`jsonPlaceholderApi`的常量，该常量将被导出，其值将是`createAxios`工厂的执行。我们还将传递一个对象作为参数，其中包含定义的`baseURL`属性：
- en: '[PRE69]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In the `export default` function, we need to change from `axios` to `localApi`:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`export default`函数中，我们需要从`axios`更改为`localApi`：
- en: '[PRE70]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Changing the HTTP methods function
  id: totrans-356
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改HTTP方法函数
- en: 'In this part, we will change how the HTTP methods will work with the new `axios`
    instances. Follow the instructions to do it correctly:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将改变HTTP方法如何与新的`axios`实例一起工作。按照说明正确执行：
- en: Open the `fetchApi.js` file in the `src/http` folder.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/http`文件夹中打开`fetchApi.js`文件。
- en: 'We will import the `jsonPlaceholderApi` function from `baseFetch` as an extra
    imported value:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从`baseFetch`导入`jsonPlaceholderApi`函数作为额外导入的值：
- en: '[PRE71]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'We need to create a new constant called `getTodos` that will be exported. This
    constant will be a function that will receive a `userId` as a parameter and return
    the GET function from `axios`, with the `userId` parameter we just received, inside
    a configuration object in a property called `params`:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个名为`getTodos`的新常量，该常量将被导出。此常量将是一个函数，将接收`userId`作为参数，并返回`axios`的GET函数，其中`userId`参数将在名为`params`的属性的配置对象中接收：
- en: '[PRE72]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Changing the MirageJS server
  id: totrans-363
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改MirageJS服务器
- en: 'In this part, we will change how the `MirageJS` server works with the new `axios`
    instance that was created. Follow the instructions to do it correctly:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将更改`MirageJS`服务器如何与新创建的`axios`实例一起工作。按照说明正确执行：
- en: Open the `server.js` file in the `src/server` folder.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/server`文件夹中打开`server.js`文件。
- en: 'On the `routes` property in the constructor object, we need to add a `passthrough`
    declaration, which will indicate to the MirageJS that all the calls to that URL
    won''t be intercepted:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数对象的`routes`属性上，我们需要添加一个`passthrough`声明，这将指示MirageJS不会拦截对该URL的所有调用：
- en: '[PRE73]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Changing the component
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改组件
- en: After the changes in the wrapper functions, the `MirageJS` server methods, and
    the HTTP methods, we need to change the component to the new library that was
    implemented.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在包装函数、`MirageJS`服务器方法和HTTP方法更改后，我们需要将组件更改为已实现的新库。
- en: In the following parts, we will change the component to match the new library
    that was implemented.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将更改组件以匹配已实现的新库。
- en: Single file component <script> section
  id: totrans-371
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'In this part, we will change the `<script>` section of the single file component.
    Follow these steps to do it:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将更改单文件组件的`<script>`部分。按照以下步骤执行：
- en: Open the `App.vue` file in the `src` folder.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`App.vue`文件。
- en: 'We need to import the new `getTodos` function as follows:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要按以下方式导入新的`getTodos`函数：
- en: '[PRE74]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'In the `data` property of the `Vue` object, we need to create a new property
    called `userTodo`, with the default value of an empty array:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Vue`对象的`data`属性中，我们需要创建一个名为`userTodo`的新属性，其默认值为一个空数组：
- en: '[PRE75]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'In the `methods` property, we need to create a new method called `getUserTodo`
    that receives the `userId` argument. This method will fetch the list of to-do
    items of the user and will attribute the response to the `userTodo` property:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性中，我们需要创建一个名为`getUserTodo`的新方法，该方法接收`userId`参数。此方法将获取用户的待办事项列表，并将响应属性分配给`userTodo`属性：
- en: '[PRE76]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Single file component <template> section
  id: totrans-380
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'In this part, we will change the `<template>` section of the single file component.
    Follow these steps to do it:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将更改单文件组件的`<template>`部分。按照以下步骤执行：
- en: Open the `App.vue` file in the `src` folder.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`App.vue`文件。
- en: 'At the bottom of the template, we need to create a new `input` HTML element,
    with the `v-model` directive bound to the `userId` property:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板底部，我们需要创建一个新的`input` HTML元素，使用`v-model`指令绑定到`userId`属性：
- en: '[PRE77]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'To fetch the list of items, we need to create a button with an event listener
    bound on the click event with the `@click` directive, targeting the `getUserTodo`,
    and passing the `userId` in the execution:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取项目列表，我们需要创建一个按钮，该按钮绑定了点击事件的事件监听器，使用`@click`指令，目标是`getUserTodo`，并在执行中传递`userId`：
- en: '[PRE78]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE79]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Here is your component rendered and running:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的地方：
- en: '![](assets/9364d3c2-9016-4ecc-a920-ab4bdb6d3634.png)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9364d3c2-9016-4ecc-a920-ab4bdb6d3634.png)'
- en: How it works...
  id: totrans-391
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we create a new instance of `axios`, a new object is created, and new configurations,
    headers, interceptors, and manipulators are defined. This happens because `axios`
    declares the `create` functions as the same as `new Class`. It's the same interface
    but different objects.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建`axios`的新实例时，会创建一个新对象，并定义新的配置、标头、拦截器和操纵器。这是因为`axios`声明`create`函数与`new Class`相同。它是相同的接口但不同的对象。
- en: Using this possibility, we were able to create two connection drivers, one for
    the local API and another for the `JSONPlaceHolder` API, which has a different
    `baseURL`.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这个可能性，我们能够创建两个连接驱动程序，一个用于本地API，另一个用于`JSONPlaceHolder` API，它有一个不同的`baseURL`。
- en: Because of MirageJS server integration, all the HTTP requests are intercepted
    by MirageJS, so we needed to add a directive in the router constructor that indicates
    the routes that MirageJS won't intercept.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MirageJS服务器集成，所有HTTP请求都被MirageJS拦截，因此我们需要在路由构造函数中添加一个指令，指示MirageJS不会拦截的路由。
- en: See also
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about the JSONPlaceHolder API at [https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/).
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/)找到有关JSONPlaceHolder
    API的更多信息。
- en: You can find more information about `axios` instances at [https://github.com/axios/axios#creating-an-instance](https://github.com/axios/axios#creating-an-instance).
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/axios/axios#creating-an-instance](https://github.com/axios/axios#creating-an-instance)找到有关`axios`实例的更多信息。
- en: You can find more information about MirageJS at [https://github.com/miragejs/miragejs](https://github.com/miragejs/miragejs).
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/miragejs/miragejs](https://github.com/miragejs/miragejs)找到有关MirageJS的更多信息。
- en: Creating a request and response interceptor for axios
  id: totrans-399
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为axios创建请求和响应拦截器
- en: Using `axios` as the main HTTP manipulator in our application allows us to use
    request and response interceptors. Those are used to manipulate the data before
    sending it to the server or when receiving the data, manipulating it before sending
    it back to the JavaScript code.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中使用`axios`作为主要的HTTP操作器，允许我们使用请求和响应拦截器。这些用于在将数据发送到服务器之前或在接收数据时操纵数据，然后将其发送回JavaScript代码之前对其进行操纵。
- en: The most common way an interceptor is used is in JWT token validation and refreshing
    the requests that receive a specific error or API error manipulation.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截器最常用的方式是在JWT令牌验证和刷新接收特定错误或API错误操纵的请求时使用。
- en: In this recipe, we will learn how to create a request interceptor to check the
    *POST*, *PATCH*, and *DELETE* methods and a response error manipulator.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何创建一个请求拦截器来检查*POST*、*PATCH*和*DELETE*方法以及一个响应错误操纵器。
- en: Getting ready
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的先决条件如下：
- en: Node.js 12+
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we can use the Vue project with Vue CLI that we made
    in the '*Creating different axios instances*' recipe, or we can start a new one.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用我们在'*创建不同的axios实例*'食谱中制作的Vue CLI项目，也可以启动一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE80]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键导航，*Enter*键继续，*Spacebar*选择选项。选择`default`选项：
- en: '[PRE81]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Creating the interceptor
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建拦截器
- en: 'In the following steps, we will create an `axios` interceptor that will work
    as a middleware. Follow the instructions do it correctly:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将创建一个`axios`拦截器，它将作为中间件工作。按照说明正确执行：
- en: 'Install the `Sweet Alert` package. To do this you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`Sweet Alert`包。要做到这一点，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE82]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Create a new file called `interceptors.js` in the `src/http` folder and open
    it.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/http`文件夹中创建一个名为`interceptors.js`的新文件并打开它。
- en: 'Then, we import the Sweet Alert package:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们导入Sweet Alert包：
- en: '[PRE83]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'We need to create a constant with an array of the *POST* methods that will
    be intercepted:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个包含将被拦截的*POST*方法的数组的常量：
- en: '[PRE84]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'We need to create a function named `requestInterceptor` and export it. This
    function will receive one argument, `config`, which is an `axios` configuration
    object. We need to check whether the request method is included in the array we
    created earlier and whether the `data` property of the data body has an `id` property.
    If any of the checks didn''t pass, we will throw an `Error`, otherwise, we will
    return `config`:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个名为`requestInterceptor`的函数并导出它。这个函数将接收一个参数`config`，它是一个`axios`配置对象。我们需要检查请求方法是否包含在我们之前创建的数组中，以及数据主体的`data`属性是否有一个`id`属性。如果任何检查未通过，我们将抛出一个`Error`，否则，我们将返回`config`：
- en: '[PRE85]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'For the response interceptor, we need to create a new function called `responseInterceptor`
    that returns the response, as we won''t change anything in this interceptor:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于响应拦截器，我们需要创建一个名为`responseInterceptor`的新函数，它返回响应，因为我们在这个拦截器中不会改变任何东西：
- en: '[PRE86]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'For catching the error, we need to create an `errorInterceptor` function, which
    will be exported. This function receives an `error` as an argument and will display
    a `sweetalert2` alert error message and return a `Promise.reject` with the `error`:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了捕获错误，我们需要创建一个`errorInterceptor`函数，它将被导出。这个函数接收一个`error`作为参数，并显示一个`sweetalert2`警报错误消息，并返回一个带有`error`的`Promise.reject`：
- en: '[PRE87]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Adding the interceptors to the HTTP methods functions
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将拦截器添加到HTTP方法函数中
- en: 'In the following steps, we will add the `axios` interceptor to the HTTP method
    functions. Follow these steps to do it correctly:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将向HTTP方法函数添加`axios`拦截器。按照以下步骤正确执行：
- en: Open the `baseFetch.js` file in the `src/http` folder.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/http`文件夹中打开`baseFetch.js`文件。
- en: 'We need to import the three interceptors we just created:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要导入刚刚创建的三个拦截器：
- en: '[PRE88]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'After the creation of the `localApi` instance, we declare the use of the request
    and response interceptor:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建`localApi`实例之后，我们声明了请求和响应拦截器的使用：
- en: '[PRE89]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'After the creation of the `jsonPlaceholderApi` instance, we declare the use
    of the request and response interceptor:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建`jsonPlaceholderApi`实例之后，我们声明了请求和响应拦截器的使用：
- en: '[PRE90]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: How it works...
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Each request that `axios` do passes through each of any one of the interceptors
    in the set. The same thing happens for the response. If any error is thrown on
    the interceptor, it will automatically be passed to the error manipulator, so
    the request won't be executed at all, or the response will be sent to the JavaScript
    code as an error.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '`axios`执行的每个请求都会通过拦截器集中的任何一个。响应也是一样。如果在拦截器上抛出任何错误，它将自动传递给错误处理程序，因此请求根本不会被执行，或者响应将作为错误发送到JavaScript代码。'
- en: We checked each request that was done for the *POST*, *PATCH*, and *DELETE*
    method to see if there was an `id` property in the body data. If there wasn't,
    we threw an error to the user, saying that they need to pass an ID for the request.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查了每个*POST*，*PATCH*和*DELETE*方法所做的每个请求，以查看在请求体数据中是否有`id`属性。如果没有，我们向用户抛出错误，告诉他们需要为请求传递一个ID。
- en: See also
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about Sweet Alert 2 at [https://sweetalert2.github.io](https://sweetalert2.github.io).
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://sweetalert2.github.io](https://sweetalert2.github.io)找到有关Sweet
    Alert 2的更多信息。
- en: You can find more information about the `axios` request interceptor at **[https://github.com/axios/axios#interceptors](https://github.com/axios/axios#interceptors).**
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在**[https://github.com/axios/axios#interceptors](https://github.com/axios/axios#interceptors)**找到有关`axios`请求拦截器的更多信息。
- en: Creating a CRUD interface with Axios and Vuesax
  id: totrans-445
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Axios和Vuesax创建CRUD界面
- en: 'When dealing with data, there is something that we will always need to do:
    a CRUD process. Regardless of what kind of application you are developing, a CRUD
    interface is needed in order to input and manipulate any data on the server, the
    administrator panel, the backend of your application, or even the client side.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理数据时，我们总是需要做一些事情：CRUD过程。无论您正在开发什么类型的应用程序，都需要CRUD界面以便在服务器上输入和操作任何数据，管理面板，应用程序的后端，甚至客户端。
- en: Here, we will learn how to create a simple CRUD interface using the `Vuesax`
    framework for the UI and `axios` for the HTTP request.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将学习如何使用`Vuesax`框架和`axios`进行HTTP请求来创建一个简单的CRUD界面。
- en: Getting ready
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, use the Vue project with Vue CLI that we used in the '*Creating
    a request and response interceptor for axios*' recipe, or start a new one.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，请使用我们在“*为axios创建请求和响应拦截器*”配方中使用的Vue CLI的Vue项目，或者启动一个新项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新项目，请打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE91]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键导航，*Enter*键继续，*Spacebar*选择选项。选择`default`选项：
- en: '[PRE92]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Adding Vuesax to the application
  id: totrans-460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Vuesax添加到应用程序
- en: 'In the following steps, we will cover how to add the `Vuesax` UI library to
    your Vue application. Follow these instructions to do it correctly:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将介绍如何将`Vuesax`UI库添加到您的Vue应用程序中。按照这些说明正确执行：
- en: 'Open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows) and execute
    the following command:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE93]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Create a file called `style.css` in the `src` folder and open it.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建一个名为`style.css`的文件并打开它。
- en: 'Import the `vuesax`, `material-icon`, and `Open Sans` font stylesheets:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`vuesax`，`material-icon`和`Open Sans`字体样式表：
- en: '[PRE94]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Open the `main.js` file in the `src` folder.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src`文件夹中的`main.js`文件。
- en: 'Import the `style.css` file and `Vuesax`. After that, you need to inform Vue
    to use `Vuesax`:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`style.css`文件和`Vuesax`。之后，您需要通知Vue使用`Vuesax`：
- en: '[PRE95]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Creating the component routing
  id: totrans-470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建组件路由
- en: 'We will continue the recipe in five parts: `List`, `Create`, `Read`, `Update`,
    and `Delete`. Our application will be a dynamic component application, so we will
    create five components, one for each part. Those components will be like our pages.'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在五个部分中继续这个过程：`List`，`Create`，`Read`，`Update`和`Delete`。我们的应用将是一个动态组件应用程序，因此我们将创建五个组件，每个部分一个。这些组件将类似于我们的页面。
- en: First, we need to change `App.vue` to be our main route manager and create a
    mixin for changing the component.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将`App.vue`更改为我们的主路由管理器，并创建一个用于更改组件的混合器。
- en: Single file component <script> section
  id: totrans-473
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照以下说明正确创建组件：
- en: Open `App.vue` in the `src` folder.
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`App.vue`。
- en: 'Import each one of the components that will be created here:'
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入将在此处创建的每个组件：
- en: '[PRE96]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'In the `data` property, create two new values: `componentIs` with a default
    value of `''list''`, and `userId` with a default value of `0`:'
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性中，创建两个新值：`componentIs`默认值为`'list'`，`userId`默认值为`0`：
- en: '[PRE97]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'We need to add a new property to the Vue object, called `provide`. This property
    will be a function, so the provided values to the components can be reactive:'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要向Vue对象添加一个名为`provide`的新属性。该属性将是一个函数，因此提供给组件的值可以是响应式的：
- en: '[PRE98]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'In the `computed` properties, we need to create a new property called `component`.
    This will be a switch case that will return our component, based on the `componentIs`
    property:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`computed`属性中，我们需要创建一个名为`component`的新属性。这将是一个switch case，根据`componentIs`属性返回我们的组件：
- en: '[PRE99]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Finally, in the methods, we need to create a `changeComponent` method that
    will update the current component to a new one:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在方法中，我们需要创建一个`changeComponent`方法，将当前组件更新为新组件：
- en: '[PRE100]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Single file component <template> section
  id: totrans-486
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照以下说明正确创建组件：
- en: 'In the `div#app` HTML element, we need to add a `vs-row` component:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`div#app` HTML元素中，我们需要添加一个`vs-row`组件：
- en: '[PRE101]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'In the `vs-row` component, we need to add a `vs-col` component with the following
    attributes: `vs-type` defined as `flex`, `vs-justify` defined as `left`, `vs-align`
    defined as `left`, and `vs-w` defined as `12`:'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`vs-row`组件中，我们需要添加一个`vs-col`组件，具有以下属性：`vs-type`定义为`flex`，`vs-justify`定义为`left`，`vs-align`定义为`left`，`vs-w`定义为`12`：
- en: '[PRE102]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Finally, inside the `vs-col` component, we will add a dynamic component that
    has an `is` attribute to the computed property `component` and point the event
    listener at the `"change-component"` event that will execute the `changeComponent`
    method:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`vs-col`组件内部，我们将添加一个动态组件，该组件具有一个`is`属性，指向计算属性`component`，并将事件侦听器指向将执行`changeComponent`方法的`"change-component"`事件：
- en: '[PRE103]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Creating the route mixin
  id: totrans-494
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建路由混合器
- en: 'In this part, we will create the component mixin to be re-used in other components.
    Follow these instructions to create the component correctly:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建组件混合器，以便在其他组件中重复使用。按照以下说明正确创建组件：
- en: Create a new file called `changeComponent.js` in the `src/mixin` folder and
    open it.
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/mixin`文件夹中创建一个名为`changeComponent.js`的新文件并打开它。
- en: 'This mixin will have a method called `changeComponent`, which will emit a `''change-component''`
    event with the name of the new component that needs to be rendered, and the `userId`:'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个混合器将有一个名为`changeComponent`的方法，它将发出一个名为`'change-component'`的事件，其中包含需要呈现的新组件的名称和`userId`：
- en: '[PRE104]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Creating the list component
  id: totrans-499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建列表组件
- en: The list component will be the index component. It will list the users in the
    application and have all the links for the other CRUD actions.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 列表组件将是索引组件。它将列出应用程序中的用户，并具有其他CRUD操作的所有链接。
- en: Single file component <script> section
  id: totrans-501
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照这些说明正确创建组件：
- en: Create a new file called `list.vue` in the `src/components` folder and open
    it.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个名为`list.vue`的新文件并打开它。
- en: 'Import the `getHttp` and `deleteHttp` from `fetchApi` and the `changeComponent`
    mixin:'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`fetchApi`导入`getHttp`和`deleteHttp`，以及`changeComponent`混合器：
- en: '[PRE105]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'In the component `mixins` property, we need to add the imported `changeComponent`
    mixin:'
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件的`mixins`属性中，我们需要添加导入的`changeComponent`混合器：
- en: '[PRE106]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'In the `data` property of the component, we add a new property named `userList`,
    with a default empty array:'
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件的`data`属性中，我们添加了一个名为`userList`的新属性，其默认为空数组：
- en: '[PRE107]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'For the methods, we create `getAllUsers` and `deleteUsers` methods. In the
    `getAllUsers` method, we fetch the user lists and set the `userList` value as
    the response from the `getHttp` function execution. The `deleteUser` method will
    execute the `deleteHttp` function, and then execute the `getAllUsers` method:'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于方法，我们创建了`getAllUsers`和`deleteUsers`方法。在`getAllUsers`方法中，我们获取用户列表，并将`userList`的值设置为`getHttp`函数执行的响应。`deleteUser`方法将执行`deleteHttp`函数，然后执行`getAllUsers`方法：
- en: '[PRE108]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Lastly, we make the `beforeMount` life cycle hook asynchronous, calling the
    `getAllUsers` method:'
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将`beforeMount`生命周期钩子异步化，调用`getAllUsers`方法：
- en: '[PRE109]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Single file component <template> section
  id: totrans-514
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照这些说明正确创建组件：
- en: 'Create a `vs-card` component with the `style` attribute defined as `margin:
    20px`:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建一个带有`style`属性定义为`margin: 20px`的`vs-card`组件：'
- en: '[PRE110]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Inside the `vs-card` component, create a dynamic `<template>` named slot for
    `header`, with an `<h3>` tag and your title:'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`vs-card`组件内部，为`header`创建一个动态的`<template>`，其中包含一个`<h3>`标签和您的标题：
- en: '[PRE111]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'After that, create a `vs-row` component with a `vs-col` component inside of
    it, with the following attributes: `vs-type` defined as `flex`, `vs-justify` defined
    as `left`, `vs-align` defined as `left`, and `vs-w` defined as `12`:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，创建一个`vs-row`组件，其中包含一个`vs-col`组件，具有以下属性：`vs-type`定义为`flex`，`vs-justify`定义为`left`，`vs-align`定义为`left`，`vs-w`定义为`12`：
- en: '[PRE112]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Inside the `vs-col` component, we need to create a `vs-table` component. This
    component will have the `data` attribute pointed to the `userList` variable, and
    will have the `search`, `stripe`, and `pagination` attributes defined as true.
    The `max-items` attribute will be defined as `10` and the `style` attribute will
    have the value of `width: 100%; padding: 20px;`:'
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`vs-col`组件内部，我们需要创建一个`vs-table`组件。该组件将具有指向`userList`变量的`data`属性，并将`search`，`stripe`和`pagination`属性定义为true。`max-items`属性将被定义为`10`，`style`属性将具有`width:
    100%; padding: 20px;`的值：'
- en: '[PRE113]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'For the table header, we need to create a dynamic `<template>` named slot `thead`,
    and create for each column a `vs-th` component with the `sort-key` attribute defined
    as the respective object key property and the display as the name you want:'
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于表头，我们需要创建一个名为 `thead` 的动态 `<template>`，并为每一列创建一个带有 `sort-key` 属性定义为相应对象键属性和显示为您想要的名称的
    `vs-th` 组件：
- en: '[PRE114]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'For the table body, we need to create a dynamic `<template>` with a `slot-scope`
    attribute defined as the `data` property. Inside this `<template>` we need to
    create a `vs-tr` component that will iterate the data property and have a `vs-td`
    component for each column that you set on the head of the table. Each `vs-td`
    component has a data property set to the respective column data object property,
    and the content will be the same data rendered. The final column that is the actions
    column will have three buttons, one for Read, another for Update, and the last
    for Delete. The Read button will have an event listener on the `"click"` event
    pointing to the `changeComponent`, and the same goes for the Update button. The
    Delete button `"click"` event listener will be pointing to the `deleteUser` method:'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于表格主体，我们需要创建一个动态的 `<template>`，其中定义了一个 `slot-scope` 属性作为 `data` 属性。在这个 `<template>`
    中，我们需要创建一个 `vs-tr` 组件，它将迭代数据属性，并为表格头部设置的每一列创建一个 `vs-td` 组件。每个 `vs-td` 组件都有一个设置为相应列数据对象属性的数据属性，并且内容将是相同的数据渲染。最后一列是操作列，将有三个按钮，一个用于读取，另一个用于更新，最后一个用于删除。读取按钮将在
    `"click"` 事件上有一个指向 `changeComponent` 的事件监听器，更新按钮也是如此。删除按钮的 `"click"` 事件监听器将指向
    `deleteUser` 方法：
- en: '[PRE115]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Finally, in the card footer, we need to create a dynamic `<template>` named
    slot for `footer`. Inside this `<template>` we will add a `vs-row` component with
    the `vs-justify` attribute defined as `flex-start` and insert a `vs-button` with
    the `color` attribute defined as `primary`, `type` defined as `filled`, `icon`
    defined as `fiber_new`, and `size` defined as `small`. The `@click` event listener
    will target the `changeComponent` method with the parameters `''create''` and
    `0`:'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在卡片页脚中，我们需要创建一个名为 `footer` 的动态 `<template>`。在这个 `<template>` 中，我们将添加一个带有
    `vs-justify` 属性定义为 `flex-start` 的 `vs-row` 组件，并插入一个带有 `color` 属性定义为 `primary`、`type`
    属性定义为 `filled`、`icon` 属性定义为 `fiber_new` 和 `size` 属性定义为 `small` 的 `vs-button`。`@click`
    事件监听器将以参数 `'create'` 和 `0` 目标 `changeComponent` 方法：
- en: '[PRE116]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Single file component <style> section
  id: totrans-530
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件 <style> 部分
- en: 'In this part, we will create the `<style>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的 `<style>` 部分。按照以下说明正确创建组件：
- en: 'Create a declaration of margin to the `vs-button` component class:'
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `vs-button` 组件类创建一个边距声明：
- en: '[PRE117]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS 或 Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE118]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Here is your component rendered and running:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件渲染和运行的地方：
- en: '![](assets/32cc6d50-9ad1-4037-ad9a-cdf3639463ef.png)'
  id: totrans-537
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/32cc6d50-9ad1-4037-ad9a-cdf3639463ef.png)'
- en: Creating a generic user form component
  id: totrans-538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个通用的用户表单组件
- en: In the following parts, we will create a generic user form component that will
    be used by other components. This component is considered generic because it is
    a component that can be used by anyone.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将创建一个通用的用户表单组件，它将被其他组件使用。这个组件被认为是通用的，因为它是一个可以被任何人使用的组件。
- en: Single file component <script> section
  id: totrans-540
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件 <script> 部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的 `<script>` 部分。按照以下说明正确创建组件：
- en: Create a new file called `userForm.vue` in the `src/components` folder and open
    it.
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个名为`userForm.vue`的新文件并打开它。
- en: 'In the `props` Vue property, create two new properties called `value` and `disabled`,
    both being objects and having the three properties of `type`, `required`, and
    `default`. For the `value` property, the `type` will be `Object`, `required` will
    be `false`, and `default` will be a factory returning an object. For the `disabled`
    property, the `type` will be `Boolean`, `required` will be `false`, and the `default`
    will also be `false`:'
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`props`属性中，创建两个名为`value`和`disabled`的新属性，都是对象，并具有`type`、`required`和`default`三个属性。对于`value`属性，`type`将是`Object`，`required`将是`false`，`default`将是返回一个对象的工厂。对于`disabled`属性，`type`将是`Boolean`，`required`将是`false`，`default`也将是`false`：
- en: '[PRE119]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'In the `data` property, we need to add a new value of `tmpForm`, with the default
    value of an empty object:'
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性中，我们需要添加一个名为`tmpForm`的新值，其默认值为一个空对象：
- en: '[PRE120]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'In the Vue `watch` property, we need to create the handler for the `tmpForm`
    and the `value`. For the `tmpForm` watcher, we will add a `handler` function that
    will emit an `''input''` event on each change with the new `value`, and add the
    `deep` property to `true`. Finally, on the `value` watcher, we will add a `handler`
    function that will set the value of the `tmpForm` as the new `value`. We also
    need to define the `deep` and `immediate` properties as `true`:'
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`watch`属性中，我们需要为`tmpForm`和`value`创建处理程序。对于`tmpForm` watcher，我们将添加一个`handler`函数，它将在每次更改时发出一个`'input'`事件，带有新的`value`，并将`deep`属性添加为`true`。最后，在`value`
    watcher中，我们将添加一个`handler`函数，它将将`tmpForm`的值设置为新的`value`。我们还需要将`deep`和`immediate`属性定义为`true`：
- en: '[PRE121]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: When using watchers, declaring the `deep` property makes the watcher checks
    for deep changes on arrays or objects, and the `immediate` property executes the
    watcher as soon as the component is created.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用watchers时，声明`deep`属性使watcher检查数组或对象的深层更改，而`immediate`属性在组件创建时立即执行watcher。
- en: Single file component <template> section
  id: totrans-550
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照这些说明正确创建组件：
- en: 'For the inputs wrapper, we need to create a `vs-row` component. Inside the
    `vs-row` component, we will create each input for our user form:'
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于输入包装器，我们需要创建一个`vs-row`组件。在`vs-row`组件内部，我们将为我们的用户表单创建每个输入：
- en: '[PRE122]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'For the name input, we need to create a `vs-col` component, with the attributes
    of `vs-type` defined as `''flex''`, `vs-justify` defined as `''left''`, `vs-align`
    defined as `''left''`, and `vs-w` defined as `''6''`. Inside of the `vs-col` component,
    we need to create a `vs-input` component, with the `v-model` directive bound to
    `tmpForm.name`, the attributes of `disabled` bound to the `disabled` props, `label`
    defined as `''Name''`, `placeholder` defined as `''User Name''`, and `class` defined
    as `''inputMargin full-width''`:'
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于名称输入，我们需要创建一个`vs-col`组件，其中`vs-type`属性定义为`'flex'`，`vs-justify`定义为`'left'`，`vs-align`定义为`'left'`，`vs-w`定义为`'6'`。在`vs-col`组件内部，我们需要创建一个`vs-input`组件，其中`v-model`指令绑定到`tmpForm.name`，`disabled`属性绑定到`disabled`
    props，`label`定义为`'Name'`，`placeholder`定义为`'User Name'`，`class`定义为`'inputMargin
    full-width'`：
- en: '[PRE123]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'For the email input, we need to create a `vs-col` component, with the attributes
    of `vs-type` defined as `''flex''`, `vs-justify` defined as `''left''`, `vs-align`
    defined as `''left''`, and `vs-w` defined as `''6''`. Inside of the `vs-col` component,
    we need to create a `vs-input` component, with the `v-model` directive bound to
    `tmpForm.email`, the `disabled` attributes bound to the `disabled` props, `label`
    defined as `''Email''`, `placeholder` defined as `''User Email''`, and `class`
    defined as `''inputMargin full-width''`:'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于电子邮件输入，我们需要创建一个`vs-col`组件，其中`vs-type`属性定义为`'flex'`，`vs-justify`属性定义为`'left'`，`vs-align`属性定义为`'left'`，`vs-w`属性定义为`'6'`。在`vs-col`组件内部，我们需要创建一个`vs-input`组件，其中`v-model`指令绑定到`tmpForm.email`，`disabled`属性绑定到`disabled`属性，`label`定义为`'Email'`，`placeholder`定义为`'User
    Email'`，`class`定义为`'inputMargin full-width'`：
- en: '[PRE124]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'For the country input, we need to create a `vs-col` component, with the attributes
    of `vs-type` defined as `''flex''`, `vs-justify` defined as `''left''`, `vs-align`
    defined as `''left''`, and `vs-w` defined as `''6''`. Inside of the `vs-col` component,
    we need to create a `vs-input` component, with the `v-model` directive bound to
    `tmpForm.country`, the `disabled` attributes bound to the `disabled` props, `label`
    defined as `''Country''`, `placeholder` defined as `''User Country''`, and `class`
    defined as `''inputMargin full-width''`:'
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于国家输入，我们需要创建一个`vs-col`组件，其中`vs-type`属性定义为`'flex'`，`vs-justify`属性定义为`'left'`，`vs-align`属性定义为`'left'`，`vs-w`属性定义为`'6'`。在`vs-col`组件内部，我们需要创建一个`vs-input`组件，其中`v-model`指令绑定到`tmpForm.country`，`disabled`属性绑定到`disabled`属性，`label`定义为`'Country'`，`placeholder`定义为`'User
    Country'`，`class`定义为`'inputMargin full-width'`：
- en: '[PRE125]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'For the phone input, we need to create a `vs-col` component, with the attributes
    of `vs-type` defined as `''flex''`, `vs-justify` defined as `''left''`, `vs-align`
    defined as `''left''`, and `vs-w` defined as `''6''`. Inside of the `vs-col` component,
    we need to create a `vs-input` component, with the `v-model` directive bound to
    `tmpForm.phone`, the `disabled` attributes bound to the `disabled` props, `label`
    defined as `''Phone''`, `placeholder` defined as `''User Phone''`, and `class`
    defined as `''inputMargin full-width''`:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于电话输入，我们需要创建一个`vs-col`组件，其中`vs-type`属性定义为`'flex'`，`vs-justify`属性定义为`'left'`，`vs-align`属性定义为`'left'`，`vs-w`属性定义为`'6'`。在`vs-col`组件内部，我们需要创建一个`vs-input`组件，其中`v-model`指令绑定到`tmpForm.phone`，`disabled`属性绑定到`disabled`属性，`label`定义为`'Phone'`，`placeholder`定义为`'User
    Phone'`，`class`定义为`'inputMargin full-width'`：
- en: '[PRE126]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'For the birthday input, we need to create a `vs-col` component, with the attributes
    of `vs-type` defined as `''flex''`, `vs-justify` defined as `''left''`, `vs-align`
    defined as `''left''`, and `vs-w` defined as `''6''`. Inside of the `vs-col` component,
    we need to create a `vs-input` component, with the `v-model` directive bound to
    `tmpForm.birthday`, the `disabled` attributes bound to the `disabled` props, `label`
    defined as `''Birthday''`, `placeholder` defined as `''User Birthday''`, and `class`
    defined as `''inputMargin full-width''`:'
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于生日输入，我们需要创建一个`vs-col`组件，其中`vs-type`属性定义为`'flex'`，`vs-justify`属性定义为`'left'`，`vs-align`属性定义为`'left'`，`vs-w`属性定义为`'6'`。在`vs-col`组件内部，我们需要创建一个`vs-input`组件，其中`v-model`指令绑定到`tmpForm.birthday`，`disabled`属性绑定到`disabled`属性，`label`定义为`'Birthday'`，`placeholder`定义为`'User
    Birthday'`，`class`定义为`'inputMargin full-width'`：
- en: '[PRE127]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Single file component <style> section
  id: totrans-564
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<style>`部分
- en: 'In this part, we will create the `<style>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<style>`部分。按照以下说明正确创建组件：
- en: 'Create a new scoped class called `inputMargin` with the `margin` property defined
    as `15px`:'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`inputMargin`的新的作用域类，其中`margin`属性定义为`15px`：
- en: '[PRE128]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Creating the create user component
  id: totrans-568
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建创建用户组件
- en: To start our process with user manipulation, we need to create an initial base
    user form to be shared between the `View`, `Create`, and `Update` components.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的用户操作过程，我们需要创建一个初始的基本用户表单，以便在`View`、`Create`和`Update`组件之间共享。
- en: Single file component <script> section
  id: totrans-570
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照这些说明正确创建组件：
- en: Create a new file called `create.vue` in the `src/components` folder and open
    it.
  id: totrans-572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个名为`create.vue`的新文件并打开它。
- en: 'Import the `UserForm` component, the `changeComponent` mixin, and `postHttp`
    from `fetchApi`:'
  id: totrans-573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`fetchApi`中导入`UserForm`组件、`changeComponent`混合和`postHttp`：
- en: '[PRE129]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'It the `data` property, we will add a `userData` object with the `name`, `email`,
    `birthday`, `country`, and `phone` properties all defined as empty strings:'
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性中，我们将添加一个`userData`对象，其中`name`、`email`、`birthday`、`country`和`phone`属性都定义为空字符串：
- en: '[PRE130]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'In the Vue `mixins` property, we need to add the `changeComponent`:'
  id: totrans-577
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`mixins`属性中，我们需要添加`changeComponent`：
- en: '[PRE131]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'In the Vue `components` property, add the `UserForm` component:'
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`components`属性中，添加`UserForm`组件：
- en: '[PRE132]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'In the `methods` property, we need to create the `createUser` method that will
    use the data on the `userData` property and will create a new user on the server
    and then redirect the user to the users lists:'
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`methods`属性中，我们需要创建`createUser`方法，该方法将使用`userData`属性上的数据，并在服务器上创建一个新用户，然后将用户重定向到用户列表：
- en: '[PRE133]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Single file component <template> section
  id: totrans-583
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照这些说明正确创建组件：
- en: 'Create a `vs-card` component with the `style` attribute defined as `margin:
    20px`:'
  id: totrans-585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建一个`vs-card`组件，其中`style`属性定义为`margin: 20px`：'
- en: '[PRE134]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Inside the `vs-card` component, create a dynamic `<template>` named slot for
    `header`, with an `<h3>` tag and your title:'
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`vs-card`组件内部，为`header`创建一个动态的`<template>`插槽，其中包含一个`<h3>`标签和您的标题：
- en: '[PRE135]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'After that, create a `vs-row` component with a `vs-col` component inside of
    it, with the attributes of `vs-type` defined as `flex`, `vs-justify` defined as
    `left`, `vs-align` defined as `left`, and `vs-w` defined as `12`:'
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，创建一个`vs-row`组件，其中包含一个`vs-col`组件，其属性为`vs-type`定义为`flex`，`vs-justify`定义为`left`，`vs-align`定义为`left`，`vs-w`定义为`12`：
- en: '[PRE136]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'Inside the `vs-col` component, we will add the `user-form` component with the
    `v-model` directive bound to `userData`:'
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`vs-col`组件内部，我们将添加`user-form`组件，并将`v-model`指令绑定到`userData`上：
- en: '[PRE137]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Finally, in the card footer, we need to create a dynamic `<template>` named
    slot for `footer`. Inside this `<template>` we will add a `vs-row` component with
    the `vs-justify` attribute defined as `flex-start` and insert two `vs-button`
    components. The first will be for creating the user and will have the attributes
    of `color` defined as `success`, `type` defined as `filled`, `icon` defined as
    `save`, and `size` defined as `small`. The `@click` event listener will target
    the `createUser` method and the second `vs-button` component will be for canceling
    this action and returning to the users lists. It will have the attributes of `color`
    defined as `danger`, `type` defined as `filled`, `icon` defined as `cancel`, `size`
    defined as `small`, `style` defined as `margin-left: 5px`, and the `@click` event
    listener target to the `changeComponent`  method with the `''list''` and `0` parameters:'
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '最后，在卡片页脚中，我们需要为`footer`创建一个动态的`<template>`插槽。在这个`<template>`中，我们将添加一个带有`vs-justify`属性定义为`flex-start`的`vs-row`组件，并插入两个`vs-button`组件。第一个将用于创建用户，其属性为`color`定义为`success`，`type`定义为`filled`，`icon`定义为`save`，`size`定义为`small`。`@click`事件监听器将针对`createUser`方法，第二个`vs-button`组件将用于取消此操作并返回到用户列表。它的属性为`color`定义为`danger`，`type`定义为`filled`，`icon`定义为`cancel`，`size`定义为`small`，`style`定义为`margin-left:
    5px`，`@click`事件监听器将目标设置为`changeComponent`方法，参数为`''list''`和`0`：'
- en: '[PRE138]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE139]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Here is your component rendered and running:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的地方：
- en: '![](assets/87bf2b8e-ab56-4b75-965a-d7f4f71677ad.png)'
  id: totrans-598
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/87bf2b8e-ab56-4b75-965a-d7f4f71677ad.png)'
- en: View component
  id: totrans-599
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图组件
- en: In the following parts, we will create the visualization component. This component
    will be used for viewing the information of the user only.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将创建可视化组件。此组件仅用于查看用户信息。
- en: Single file component <script> section
  id: totrans-601
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照以下说明正确创建组件：
- en: Create a file named `view.vue` in the `src/components` folder and open it.
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建名为`view.vue`的文件并打开它。
- en: 'Import the `UserForm` component, the `changeComponent` mixin, and the `getHttp`
    from `fetchApi`:'
  id: totrans-604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`UserForm`组件，`changeComponent` mixin和`fetchApi`中的`getHttp`：
- en: '[PRE140]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'In the `data` property, we will add a `userData` object with the `name`, `email`,
    `birthday`, `country`, and `phone` properties all defined as empty strings:'
  id: totrans-606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性中，我们将添加一个`userData`对象，其中`name`，`email`，`birthday`，`country`和`phone`属性都定义为空字符串：
- en: '[PRE141]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'In the Vue `mixins` property, we need to add the `changeComponent` mixin:'
  id: totrans-608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`mixins`属性中，我们需要添加`changeComponent` mixin：
- en: '[PRE142]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'In the Vue `inject` property, we need to declare the `''userId''` property:'
  id: totrans-610
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`inject`属性中，我们需要声明`'userId'`属性：
- en: '[PRE143]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'In the Vue `components` property, add the `UserForm` component:'
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`components`属性中，添加`UserForm`组件：
- en: '[PRE144]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'For the methods, we will create the `getUserById` method. This method will
    fetch the user data by the current ID and set the `userData` value as the response
    from the `getHttp` function execution:'
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于方法，我们将创建`getUserById`方法。此方法将通过当前ID获取用户数据，并将`userData`值设置为`getHttp`函数执行的响应：
- en: '[PRE145]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'In the `beforeMount` life cycle hook, we will make it asynchronous, calling
    the `getUserById` method:'
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`beforeMount`生命周期钩子中，我们将使其异步，调用`getUserById`方法：
- en: '[PRE146]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Single file component <template> section
  id: totrans-618
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照以下说明正确创建组件：
- en: 'Create a `vs-card` component with the `style` attribute defined as `margin:
    20px`:'
  id: totrans-620
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建一个带有`style`属性定义为`margin: 20px`的`vs-card`组件：'
- en: '[PRE147]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'Inside the `vs-card` component, create a dynamic `<template>` named slot for
    `header`, with an `<h3>` tag and your title:'
  id: totrans-622
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`vs-card`组件内，为`header`创建一个动态的`<template>`，并添加一个`<h3>`标签和您的标题：
- en: '[PRE148]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'After that, create a `vs-row` component with a `vs-col` component inside of
    it, with the attributes of `vs-type` defined as `flex`, `vs-justify` defined as
    `left`, `vs-align` defined as `left`, and `vs-w` defined as `12`:'
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，创建一个带有`vs-col`组件的`vs-row`组件，其中`vs-type`属性定义为`flex`，`vs-justify`属性定义为`left`，`vs-align`属性定义为`left`，`vs-w`属性定义为`12`：
- en: '[PRE149]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Inside the `vs-col` component, we will add the `UserForm` component with the
    `v-model` directive bound to `userData` and the `disabled` attribute set to `true`:'
  id: totrans-626
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`vs-col`组件内，我们将添加`UserForm`组件，并将`v-model`指令绑定到`userData`，并将`disabled`属性设置为`true`：
- en: '[PRE150]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Finally, in the card footer, we need to create a dynamic `<template>` named
    slot for `footer`. Inside this `<template>` we will add a `vs-row` component with
    the `vs-justify` attribute defined as `flex-start` and insert two `vs-button`
    components. The first will be for canceling this action and returning to the users
    lists. It will have the attributes of `color` defined as `danger`, `type` defined
    as `filled`, `icon` defined as `cancel`, `size` defined as `small`, and the`@click`
    event listener target to the `changeComponent` method with the `''list''` and
    `0` parameters. The second `vs-button` component will be for the editing the user
    and will have the attributes of `color` defined as `success`, `type` defined as
    `filled`, `icon` defined as `save`, `size` defined as `small` `style` defined
    as `margin-left: 5px`, and the `@click` event listener target to the `changeComponent`
    method with the `''list''` parameter and the injected `userId`:'
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '最后，在卡片页脚中，我们需要为`footer`创建一个动态的`<template>`。在这个`<template>`中，我们将添加一个带有`vs-justify`属性定义为`flex-start`的`vs-row`组件，并插入两个`vs-button`组件。第一个是用于取消此操作并返回到用户列表的。它将具有`color`定义为`danger`，`type`定义为`filled`，`icon`定义为`cancel`，`size`定义为`small`的属性，以及`@click`事件监听器目标为`changeComponent`方法，参数为`''list''`和`0`。第二个`vs-button`组件将用于编辑用户，并具有`color`定义为`success`，`type`定义为`filled`，`icon`定义为`save`，`size`定义为`small`，`style`定义为`margin-left:
    5px`，以及`@click`事件监听器目标为`changeComponent`方法，参数为`''list''`和注入的`userId`：'
- en: '[PRE151]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE152]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Here is your component rendered and running:'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 您的组件已呈现并运行：
- en: '![](assets/2c55f576-a545-4245-a55c-163383606213.png)'
  id: totrans-633
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c55f576-a545-4245-a55c-163383606213.png)'
- en: Updating the user component
  id: totrans-634
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新用户组件
- en: We just viewed the user data, and now we want to update it. We need to make
    a new component that is almost the same as the view component but has the method
    of updating the user and has the form enabled.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚查看了用户数据，现在我们想要更新它。我们需要制作一个新的组件，几乎与查看组件相同，但具有更新用户的方法并启用表单。
- en: Single file component <script> section
  id: totrans-636
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照以下说明正确创建组件：
- en: Create a file named `update.vue` in the `src/components` folder and open it.
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建名为`update.vue`的文件并打开它。
- en: 'Import the `UserForm` component, the `changeComponent` mixin, and the `getHttp`
    and `patchHttp` functions from `fetchApi`:'
  id: totrans-639
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`fetchApi`中导入`UserForm`组件、`changeComponent` mixin以及`getHttp`和`patchHttp`函数：
- en: '[PRE153]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'In the `data` property, we will add a `userData` object, with the `name`, `email`,
    `birthday`, `country`, and `phone` properties, all defined as empty strings:'
  id: totrans-641
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data`属性中，我们将添加一个`userData`对象，其中包含`name`、`email`、`birthday`、`country`和`phone`属性，全部定义为空字符串：
- en: '[PRE154]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'In the Vue `mixins` property, we need to add the `changeComponent` mixin:'
  id: totrans-643
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`mixins`属性中，我们需要添加`changeComponent` mixin：
- en: '[PRE155]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'In the Vue `inject` property, we need to declare the `''userId''` property:'
  id: totrans-645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`inject`属性中，我们需要声明`'userId'`属性：
- en: '[PRE156]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'In the Vue `components` property, add the `UserForm` component:'
  id: totrans-647
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`components`属性中，添加`UserForm`组件：
- en: '[PRE157]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'For the methods, we will create two: `getUserById` and `updateUser`. The `getUserById`
    method will fetch the user data by the current ID and set the `userData` value
    as the response from the `getHttp` function execution, and the `updateUser` will
    send the current `userDate` to the server via the `patchHttp` function and redirect
    back to the users list:'
  id: totrans-649
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于方法，我们将创建两个：`getUserById`和`updateUser`。`getUserById`方法将通过当前ID获取用户数据，并将`userData`值设置为`getHttp`函数执行的响应，而`updateUser`将通过`patchHttp`函数将当前`userDate`发送到服务器，并重定向回用户列表：
- en: '[PRE158]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'On the `beforeMount` life cycle hook, we will make it asynchronous, calling
    the `getUserById` method:'
  id: totrans-651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`beforeMount`生命周期钩子上，我们将使其异步化，调用`getUserById`方法：
- en: '[PRE159]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Single file component <template> section
  id: totrans-653
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照以下说明正确创建组件：
- en: 'Create a `vs-card` component with the `style` attribute defined as `margin:
    20px`:'
  id: totrans-655
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建一个带有`style`属性定义为`margin: 20px`的`vs-card`组件：'
- en: '[PRE160]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'Inside the `vs-card` component, create a dynamic `<template>` named slot for
    `header`, with an `<h3>` tag and your title:'
  id: totrans-657
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`vs-card`组件内部，为`header`创建一个动态的`<template>`命名插槽，其中包含一个`<h3>`标签和您的标题：
- en: '[PRE161]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'After that, create a `vs-row` component with a `vs-col` component inside of
    it, with the attributes of `vs-type` defined as `flex`, `vs-justify` defined as
    `left`, `vs-align` defined as `left`, and `vs-w` defined as `12`:'
  id: totrans-659
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，创建一个带有`vs-col`组件的`vs-row`组件，其中`vs-type`属性定义为`flex`，`vs-justify`属性定义为`left`，`vs-align`属性定义为`left`，`vs-w`属性定义为`12`：
- en: '[PRE162]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'Inside the `vs-col` component, we will add the `UserForm` component with the
    `v-model` directive bound to `userData` and the `disabled` attribute set to `true`:'
  id: totrans-661
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`vs-col`组件内部，我们将添加`UserForm`组件，其中`v-model`指令绑定到`userData`，并将`disabled`属性设置为`true`：
- en: '[PRE163]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Finally, in the card footer, we need to create a dynamic `<template>` named
    slot for `footer`. Inside `<template>`, we will add a `vs-row` component with
    the `vs-justify` attribute defined as `flex-start` and insert two `vs-button`
    components. The first will be for creating the user and will have the attributes
    of `color` defined as `success`, `type` defined as `filled`, `icon` defined as
    `save`, `size` defined as `small`, and the `@click` event listener target to the
    `updateUser` method. The second `vs-button` component will be for canceling this
    action and returning to the users lists. It will have the attributes of `color`
    defined as `danger`, `type` defined as `filled`, `icon` defined as `cancel`, `size`
    defined as `small`, `style` defined as `margin-left: 5px`, and the `@click` event
    listener target to the `changeComponent` method with the `''list''` and `0` parameters:'
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '最后，在卡片页脚中，我们需要为`footer`创建一个动态的`<template>`命名插槽。在`<template>`内，我们将添加一个带有`vs-justify`属性定义为`flex-start`的`vs-row`组件，并插入两个`vs-button`组件。第一个将用于创建用户，并具有`color`定义为`success`，`type`定义为`filled`，`icon`定义为`save`，`size`定义为`small`的属性，并且`@click`事件监听器指向`updateUser`方法。第二个`vs-button`组件将用于取消此操作并返回到用户列表。它将具有`color`定义为`danger`，`type`定义为`filled`，`icon`定义为`cancel`，`size`定义为`small`，`style`定义为`margin-left:
    5px`的属性，并且`@click`事件监听器指向`changeComponent`方法，参数为`''list''`和`0`：'
- en: '[PRE164]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE165]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'Here is your component rendered and running:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件渲染并运行的情况：
- en: '![](assets/55f3448e-e4c1-46c5-8a37-35eec0f0695e.png)'
  id: totrans-668
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/55f3448e-e4c1-46c5-8a37-35eec0f0695e.png)'
- en: How it works...
  id: totrans-669
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The CRUD interface that we created works like a router application, with three
    routes, the index or list, the view, and the edit route. Each route has its own
    screen and components, with separated logic functions.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的CRUD接口就像一个路由应用程序，有三个路由，即索引或列表、查看和编辑路由。每个路由都有自己的屏幕和组件，具有分离的逻辑功能。
- en: We created an abstract `UserForm` component that was used on the `View` and
    `Update` components. This abstract component can be used in many other components,
    as it does not require any base logic to work; it's like an input but made of
    several inputs.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个抽象的`UserForm`组件，该组件用于`View`和`Update`组件。这个抽象组件可以在许多其他组件中使用，因为它不需要任何基本逻辑来工作；它就像一个由几个输入组成的输入框。
- en: Using the provide/inject API of Vue, we were able to pass the `userId` to each
    of the components in an observable way, which means that when the variable is
    updated, the component receives the updated variable. This is not achievable using
    the normal Vue API, so we had to use the `Object.defineProperty` and use the `provide`
    property as a factory function to return the final object.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue的provide/inject API，我们能够以可观察的方式将`userId`传递给每个组件，这意味着当变量更新时，组件会接收到更新后的变量。这是无法通过普通的Vue
    API实现的，因此我们必须使用`Object.defineProperty`并使用`provide`属性作为返回最终对象的工厂函数。
- en: See also
  id: totrans-673
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `Vuesax` at [https://lusaxweb.github.io/vuesax/](https://lusaxweb.github.io/vuesax/).
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://lusaxweb.github.io/vuesax/](https://lusaxweb.github.io/vuesax/)找到有关`Vuesax`的更多信息。
- en: You can find more information about `Object.defineProperty` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)找到有关`Object.defineProperty`的更多信息。
- en: You can find more information about the Vue provide/inject API at [https://vuejs.org/v2/guide/components-edge-cases.html](https://vuejs.org/v2/guide/components-edge-cases.html).
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuejs.org/v2/guide/components-edge-cases.html](https://vuejs.org/v2/guide/components-edge-cases.html)找到有关Vue
    provide/inject API的更多信息。
