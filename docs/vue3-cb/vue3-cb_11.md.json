["```js\n> npm install -g @vue/cli @vue/cli-service-global\n```", "```js\n> npm install -g cordova\n```", "```js\n> npm install -g ios-sim ios-deploy\n```", "```js\n> npm install -g electron\n```", "```js\n> npm install -g @quasar/cli\n```", "```js\n> npm install -g create-nuxt-app\n```", "```js\n> vue create router-import\n```", "```js\n?  Please pick a preset: (Use arrow keys) default (babel, eslint) \u276f Manually select features  \u200c\n```", "```js\n?  Check the features needed for your project: (Use arrow keys) \u276f Babel\n TypeScript Progressive Web App (PWA) Support \u276f Router   Vuex\n  CSS Pre-processors \u276f Linter / Formatter\n Unit Testing   E2E Testing\n```", "```js\n?  Pick a linter / formatter config: (Use arrow keys) ESLint with error prevention only \u276f ESLint + Airbnb config   ESLint + Standard config \n  ESLint + Prettier\n```", "```js\n?  Pick additional lint features: (Use arrow keys)   Lint on save \u276f Lint and fix on commit\n```", "```js\n?  Where do you prefer placing config for Babel, ESLint, etc.?  (Use \n  arrow keys) \u276f In dedicated config files  **In package.json** \n```", "```js\n?  Save this as a preset for future projects?  (y/N) n\n```", "```js\n> vue ui\n```", "```js\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n\nVue.use(VueRouter);\n\nexport default new VueRouter({});\n```", "```js\nimport Vue from 'vue'; import VueRouter from 'vue-router';   Vue.use(VueRouter);   const routes = []; const requireRoutes = require.context(\n  './routes',\n  true,\n  /^(?!.*test).*\\.js$/is, );   const router = new VueRouter({\n  routes, });   export default router; \n```", "```js\nimport Vue from 'vue'; import VueRouter from 'vue-router';   Vue.use(VueRouter);   const routes = []; const requireRoutes = require.context(\n  './routes',\n  true,\n  /^(?!.*test).*\\.js$/is, );   requireRoutes.keys().forEach((fileName) => {\n  routes.push({\n  ...requireRoutes(fileName).default,\n  }); });   const router = new VueRouter({\n  routes, });   export default router;\n```", "```js\n> vue create vuex-import\n```", "```js\n?  Please pick a preset: (Use arrow keys) default (babel, eslint) \u276f Manually select features  \u200c\n```", "```js\n?  Check the features needed for your project: (Use arrow keys) \u276f Babel\n TypeScript Progressive Web App (PWA) Support Router \u276fVuex\n  CSS Pre-processors \u276f Linter / Formatter\n Unit Testing E2E Testing\n```", "```js\n?  Pick a linter / formatter config: (Use arrow keys) ESLint with error prevention only \u276f ESLint + Airbnb config   ESLint + Standard config \n  ESLint + Prettier\n```", "```js\n?  Pick additional lint features: (Use arrow keys)  Lint on save \u276f Lint and fix on commit\n```", "```js\n?  Where do you prefer placing config for Babel, ESLint, etc.?  (Use \n  arrow keys) \u276f In dedicated config files  **In package.json** \n```", "```js\n?  Save this as a preset for future projects?  (y/N) n\n```", "```js\n> vue ui\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({});\n```", "```js\nconst toCamel = (s) => s.replace(/([-_][a-z])/ig, (c) => c.toUpperCase()\n  .replace(/[-_]/g, '')); const requireModule = require.context('./modules/', false, \n   /^(?!.*test).*\\.js$/is); const modules = {};   requireModule.keys().forEach((fileName) => {\n  const moduleName = toCamel(fileName.replace(/(\\.\\/|\\.js)/g, ''));    modules[moduleName] = {\n  namespaced: true,\n  ...requireModule(fileName).default,\n  }; });   export default modules; \n```", "```js\nmodules\n\u251c\u2500\u2500 user.js\n\u251c\u2500\u2500 user\n\u2502 \u2514\u2500\u2500 types.js\n\u2502   \u2514\u2500\u2500 state.js\n\u2502   \u2514\u2500\u2500 actions.js\n\u2502   \u2514\u2500\u2500 mutations.js\n\u2502   \u2514\u2500\u2500 getters.js\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n```", "```js\nimport state from './user/state'; import actions from './user/actions'; import mutations from './user/mutations'; import getters from './user/getters';   export default {\n  state,\n  actions,\n  mutations,\n  getters, }; \n```", "```js\nimport Vue from 'vue'; import Vuex from 'vuex'; import modules from './loader';   Vue.use(Vuex);   export default new Vuex.Store({\n  modules, }); \n```", "```js\n> vue create vue-directive\n```", "```js\n?  Please pick a preset: (Use arrow keys) default (babel, eslint) \u276f Manually select features  \u200c\n```", "```js\n?  Check the features needed for your project: (Use arrow keys) \u276f Babel TypeScript Progressive Web App (PWA) SupportRouter\n  Vuex\n  CSS Pre-processors \u276f Linter / Formatter\n Unit Testing E2E Testing\n```", "```js\n?  Pick a linter / formatter config: (Use arrow keys) ESLint with error prevention only \u276f ESLint + Airbnb config   ESLint + Standard config \n  ESLint + Prettier\n```", "```js\n?  Pick additional lint features: (Use arrow keys) Lint on save \u276f Lint and fix on commit\n```", "```js\n?  Where do you prefer placing config for Babel, ESLint, etc.?  (Use arrow keys) \u276f In dedicated config files  **In package.json** \n```", "```js\n?  Save this as a preset for future projects?  (y/N) n\n```", "```js\n> vue ui\n```", "```js\nexport default {\n  \"#\": { pattern: /[\\x2A\\d]/ },\n  0: { pattern: /\\d/ },\n  9: { pattern: /\\d/ },\n  X: { pattern: /[0-9a-zA-Z]/ },\n  S: { pattern: /[a-zA-Z]/ },\n  A: { pattern: /[a-zA-Z]/, transform: v => v.toLocaleUpperCase() },\n  a: { pattern: /[a-zA-Z]/, transform: v => v.toLocaleLowerCase() },\n  \"!\": { escape: true }\n};\n```", "```js\nimport tokens from './tokens';\n\nfunction maskerValue() {\n  // Code will be developed in this recipe\n}\n\nfunction eventDispatcher() {\n  // Code will be developed in this recipe\n}\n\nfunction maskDirective() {\n // Code will be developed in this recipe\n}\n\nexport default maskDirective;\n```", "```js\nfunction maskDirective(el, binding) {\n  let config;\n\n  if (!binding.value) return false;\n\n  if (typeof config === 'string') {\n    config = {\n      mask: binding.value,\n      tokens,\n    };\n  } else {\n    throw new Error('Invalid input entered');\n  }\n```", "```js\nlet element = el;\n\n  if (element.tagName.toLocaleUpperCase() !== 'INPUT') {\n    const els = element.getElementsByTagName('input');\n\n    if (els.length !== 1) {\n      throw new Error(`v-input-mask directive requires 1 input, \n         found ${els.length}`);\n    } else {\n      [element] = els;\n    }\n  }\n```", "```js\nelement.oninput = (evt) => {\n    if (!evt.isTrusted) return;\n    let position = element.selectionEnd;\n\n    const digit = element.value[position - 1];\n    element.value = maskerValue(element.value, config.mask, \n       config.tokens);\n    while (\n      position < element.value.length\n      && element.value.charAt(position - 1) !== digit\n    ) {\n      position += 1;\n    }\n    if (element === document.activeElement) {\n      element.setSelectionRange(position, position);\n      setTimeout(() => {\n        element.setSelectionRange(position, position);\n      }, 0);\n    }\n    element.dispatchEvent(eventDispatcher('input'));\n  };\n\n  const newDisplay = maskerValue(element.value, config.mask, \n     config.tokens);\n  if (newDisplay !== element.value) {\n    element.value = newDisplay;\n    element.dispatchEvent(eventDispatcher('input'));\n  }\n\n  return true;\n}\n// end of maskDirective function\n```", "```js\nfunction eventDispatcher(name) {\n  const evt = document.createEvent('Event');\n\n  evt.initEvent(name, true, true);\n\n  return evt;\n}\n```", "```js\nfunction maskerValue(v, m, tkn) {\n  const value = v || '';\n\n  const mask = m || '';\n\n  let maskIndex = 0;\n\n  let valueIndex = 0;\n\n  let output = '';\n\n  while (maskIndex < mask.length && valueIndex < value.length) {\n    let maskCharacter = mask[maskIndex];\n    const masker = tkn[maskCharacter];\n    const valueCharacter = value[valueIndex];\n\n    if (masker && !masker.escape) {\n      if (masker.pattern.test(valueCharacter)) {\n        output += masker.transform ? \n           masker.transform(valueCharacter) : valueCharacter;\n        maskIndex += 1;\n      }\n\n      valueIndex += 1;\n    } else {\n      if (masker && masker.escape) {\n        maskIndex += 1;\n        maskCharacter = mask[maskIndex];\n      }\n\n      output += maskCharacter;\n\n      if (valueCharacter === maskCharacter) valueIndex += 1;\n\n      maskIndex += 1;\n    }\n  }\n\n  let outputRest = '';\n  while (maskIndex < mask.length) {\n    const maskCharacter = mask[maskIndex];\n\n    if (tkn[maskCharacter]) {\n      outputRest = '';\n      break;\n    }\n\n    outputRest += maskCharacter;\n\n    maskIndex += 1;\n  }\n\n  return output + outputRest;\n}\n//end of maskerValue function\n```", "```js\nimport Vue from 'vue';\nimport App from './App.vue';\nimport InputMaskDirective from './directives/formMaskInputDirective';\n\nVue.config.productionTip = false;\n\nVue.directive('input-mask', InputMaskDirective);\n\nnew Vue({\n  render: (h) => h(App),\n}).$mount('#app');\n```", "```js\n<template>\n  <div id=\"app\">\n    <input\n      type=\"text\"\n      v-input-mask=\"'###-###-###'\"\n      v-model=\"inputMask\"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app',\n  data: () => ({\n    inputMask: '',\n  }),\n};\n</script>\n```", "```js\n> vue create vue-plugin\n```", "```js\n?  Please pick a preset: (Use arrow keys) default (babel, eslint) \u276f Manually select features  \u200c\n```", "```js\n?  Check the features needed for your project: (Use arrow keys) \u276f Babel\n TypeScript Progressive Web App (PWA) Support Router\n  Vuex\n  CSS Pre-processors \u276f   Linter / Formatter\n Unit Testing E2E Testing\n```", "```js\n?  Pick a linter / formatter config: (Use arrow keys) ESLint with error prevention only \u276f ESLint + Airbnb config   ESLint + Standard config \n  ESLint + Prettier\n```", "```js\n?  Pick additional lint features: (Use arrow keys) Lint on save \u276f Lint and fix on commit\n```", "```js\n?  Where do you prefer placing config for Babel, ESLint, etc.?  (Use\n  arrow keys) \u276f In dedicated config files  **In package.json** \n```", "```js\n?  Save this as a preset for future projects?  (y/N) n\n```", "```js\n> vue ui\n```", "```js\n/* eslint no-param-reassign: 0 */\n\nconst defaultOption = {\n  useSaveFunction: true,\n  useRetrieveFunction: true,\n  onSave: value => JSON.stringify(value),\n  onRetrieve: value => JSON.parse(value),\n};\n\nexport default {\n  install(Vue, option) {\n    const baseOptions = {\n      ...defaultOption,\n      ...option,\n    };\n\n    Vue.prototype.$localStorage = generateStorageObject(\n       window.localStorage,\n        baseOptions,\n      ); // We will add later this code\n\n    Vue.prototype.$sessionStorage = generateStorageObject(\n        window.localStorage,\n        baseOptions,\n      ); // We will add later this code\n  },\n};\n```", "```js\nconst generateStorageObject = (windowStorage, options) => ({\n  set(key, value) {\n    windowStorage.setItem(\n      key,\n      options.useSaveFunction\n        ? options.onSave(value)\n        : value,\n    );\n  },\n\n  get(key) {\n    const item = windowStorage.getItem(key);\n    return options.useRetrieveFunction ? options.onRetrieve(item) : \n      item;\n  },\n\n  remove(key) {\n    windowStorage.removeItem(key);\n  },\n\n  clear() {\n    windowStorage.clear();\n  },\n});\n```", "```js\nimport Vue from 'vue';\nimport App from './App.vue';\nimport StorageManipulatorPlugin from './plugin/storageManipulator';\n\nVue.config.productionTip = false;\n\nVue.use(StorageManipulatorPlugin);\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app');\n```", "```js\n> quasar create quasar-project\n```", "```js\n> Project name: quasar_project\n```", "```js\n> Project product name (must start with letter if building mobile \n    apps) (Quasar App)\n```", "```js\n> Project description: (A Quasar Framework app)\n```", "```js\n> Author: <You>\n```", "```js\nPick your favorite CSS preprocessor: (can be changed later) (Use arrow keys) \u276f Sass with indented syntax (recommended)\n Sass with SCSS syntax (recommended)\n Stylus\n None (the others will still be available)\n```", "```js\nPick a Quasar components & directives import strategy: (can be   \n  changed later) (Use arrow keys ) \u276f * Auto-import in-use Quasar components & directives - also \n treeshakes Quasar; minimum bundle size\n * Import everything from Quasar - not treeshaking Quasar;         \n    biggest bundle size\n```", "```js\nCheck the features needed for your project: EsLint\n```", "```js\nPick an ESLint preset: Airbnb\n```", "```js\nContinue to install project dependencies after the project has been \n  created? (recommended) (Use arrow keys) \u276f Yes, use Yarn (recommended)\n Yes, use npm\n No, I will handle that myself\n```", "```js\n> quasar new page About\n```", "```js\nconst routes = [\n  {\n    path: '/',\n    component: () => import('layouts/MainLayout.vue'),\n    children: [\n      { path: '', name: 'home', component: () => \n         import('pages/Index.vue') },\n      { path: 'about', name: 'about', component: () => \n         import('pages/About.vue') },\n    ],\n  },\n  {\n    path: '*',\n    component: () => import('pages/Error404.vue'),\n  }\n];\n\nexport default routes;\n```", "```js\n<template>\n<q-page\n    padding\n    class=\"flex flex-start\"\n  >\n    <h1 class=\"full-width\">About</h1>\n    <h2>This is an About Us Page</h2>\n  </q-page>\n</template>\n\n<script>\nexport default {\n  name: 'PageAbout',\n};\n</script>\n```", "```js\n<template>\n  <q-layout view=\"lHh Lpr lFf\">\n    <q-header elevated>\n      <q-toolbar>\n        <q-btn flat dense round \n        @click=\"leftDrawerOpen = !leftDrawerOpen\" \n        aria-label=\"Menu\">\n          <q-icon name=\"menu\" />\n        </q-btn>\n\n        <q-toolbar-title>\n          Quasar App\n          </q-toolbar-title>\n\n        <div>Quasar v{{ $q.version }}</div>\n      </q-toolbar>\n    </q-header>\n\n    <q-drawer v-model=\"leftDrawerOpen\" \n    bordered content-class=\"bg-grey-2\">\n      <q-list>\n        <q-item-label header>Menu</q-item-label>\n        <q-item clickable tag=\"a\" :to=\"{name: 'home'}\">\n          <q-item-section avatar>\n            <q-icon name=\"home\" />\n          </q-item-section>\n          <q-item-section>\n            <q-item-label>Home</q-item-label>\n          </q-item-section>\n        </q-item>\n        <q-item clickable tag=\"a\" :to=\"{name: 'about'}\">\n          <q-item-section avatar>\n            <q-icon name=\"school\" />\n          </q-item-section>\n          <q-item-section>\n            <q-item-label>About</q-item-label>\n          </q-item-section>\n        </q-item>\n      </q-list>\n    </q-drawer>\n\n    <q-page-container>\n      <router-view />\n    </q-page-container>\n  </q-layout>\n</template>\n\n<script>\nexport default {\n  name: \"MyLayout\",\n  data() {\n    return {\n      leftDrawerOpen: this.$q.platform.is.desktop\n    };\n  }\n};\n</script>\n\n```", "```js\n> quasar mode add pwa\n```", "```js\n> eslint --fix --ext .js ./src-pwa\n```", "```js\npwa: {\n  // workboxPluginMode: 'InjectManifest',\n  // workboxOptions: {},\n  manifest: {\n    // ...\n  },\n\n  // variables used to inject specific PWA\n  // meta tags (below are default values)\n  metaVariables: {\n    appleMobileWebAppCapable: 'yes',\n    appleMobileWebAppStatusBarStyle: 'default',\n    appleTouchIcon120: 'statics/icons/apple-icon-120x120.png',\n    appleTouchIcon180: 'statics/icons/apple-icon-180x180.png',\n    appleTouchIcon152: 'statics/icons/apple-icon-152x152.png',\n    appleTouchIcon167: 'statics/icons/apple-icon-167x167.png',\n    appleSafariPinnedTab: 'statics/icons/safari-pinned-tab.svg',\n    msapplicationTileImage: 'statics/icons/ms-icon-144x144.png',\n    msapplicationTileColor: '#000000'\n  }\n}\n```", "```js\n> quasar mode add ssr\n```", "```js\nssr: {\n  pwa: true/false, // should a PWA take over (default: false), or just \n                                                            // a SPA?\n},\n```", "```js\n> quasar mode add cordova\n```", "```js\nsrc-cordova/\n\u251c\u2500\u2500 config.xml\n\u251c\u2500\u2500 packages.json\n\u251c\u2500\u2500 cordova-flag.d.ts\n\u251c\u2500\u2500 hooks/\n\u251c\u2500\u2500 www/\n\u251c\u2500\u2500 platforms/\n\u251c\u2500\u2500 plugins/\n```", "```js\ncordova:  { iosStatusBarPadding:  true/false,  // add the dynamic top padding on \n     // iOS mobile devices backButtonExit:  true/false  // Quasar handles app exit on mobile phone \n      // back button  },\n```", "```js\n> quasar mode add electron\n```", "```js\nsrc-electron/\n\u251c\u2500\u2500 icons/\n\u251c\u2500\u2500 main-process/\n\u251c\u2500\u2500 electron-flag.d.ts\n```", "```js\nelectron: {\n  // optional; webpack config Object for\n  // the Main Process ONLY (/src-electron/main-process/)\n  extendWebpack (cfg) {\n    // directly change props of cfg;\n    // no need to return anything\n  },\n\n  // optional; EQUIVALENT to extendWebpack() but uses webpack-chain;\n  // for the Main Process ONLY (/src-electron/main-process/)\n  chainWebpack (chain) {\n    // chain is a webpack-chain instance\n    // of the Webpack configuration\n  },\n\n  bundler: 'packager', // or 'builder'\n\n  // electron-packager options\n  packager: {\n    //...\n  },\n\n  // electron-builder options\n  builder: {\n    //...\n  }\n},\n```", "```js\n<script>\nexport default {\n  watch: {\n    myField: 'myFunction',\n  },\n  data: () => ({\n    myField: '',\n  }),\n  methods: {\n    myFunction() {\n      console.log('Watcher using method name.');\n    },\n },\n};\n</script>\n```", "```js\n<script>\nexport default {\n  watch: {\n    myDeepField: {\n      handler(newVal, oldVal) {\n        console.log('Using Immediate Call, and Deep Watch');\n        console.log('New Value', newVal);\n        console.log('Old Value', oldVal);\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  data: () => ({\n    myDeepField: '',\n  }),\n};\n</script>\n```", "```js\n<script>\nexport default {\n  watch: {\n    myMultiField: [\n      'myFunction',\n      {\n        handler(newVal, oldVal) {\n          console.log('Using Immediate Call, and Deep Watch');\n          console.log('New Value', newVal);\n          console.log('Old Value', oldVal);\n        },\n        immediate: true,\n      },\n    ],\n  },\n  data: () => ({\n    myMultiField: '',\n  }),\n  methods: {\n    myFunction() {\n      console.log('Watcher Using Method Name');\n    },\n  },\n};\n</script>\n```", "```js\n<script>\nexport default {\n  computed: {\n    field: {\n      get() {\n       return Date.now();\n      },\n      cache: false,\n   },\n  },\n};\n</script>\n```", "```js\n<script>\nexport default {\n  data: () => ({\n    dateMs: '',\n  }),\n  computed: {\n    dateIso: {\n      get() {\n        return new Date(this.dateMs).toISOString();\n      },\n      set(v) {\n        this.dateMs = new Date(v).getTime();\n      },\n   },\n  },\n};\n</script>\n```", "```js\n> npm  install -g create-nuxt-app\n```", "```js\n> **pip** install **flask**\n> **pip install flask-restful**\n> **pip install flask-cors**\n```", "```js\n> **pip** install flask\n```", "```js\n> **pip install flask-restful**\n```", "```js\n> **pip install flask-cors**\n```", "```js\nimport sqlite3 as sql\nfrom flask import Flask\nfrom flask_restful import Resource, Api, reqparse\nfrom flask_cors import CORS\n\napp = Flask(__name__)\napi = Api(app)\nCORS(app)\n\nparser = reqparse.RequestParser()\n\nconn = sql.connect('tasks.db')\nconn.execute('CREATE TABLE IF NOT EXISTS tasks (id INTEGER PRIMARY \n   KEY AUTOINCREMENT, task TEXT)')\nconn.close()\n```", "```js\nclass ToDo(Resource):\n    def get(self):\n        con = sql.connect('tasks.db')\n        cur = con.cursor()\n        cur.execute('SELECT * from tasks')\n        tasks = cur.fetchall()\n        con.close()\n\n        return {\n            'tasks': tasks\n        }\n```", "```js\n def post(self):\n        parser.add_argument('task', type=str)\n        args = parser.parse_args()\n\n        con = sql.connect('tasks.db')\n        cur = con.cursor()\n        cur.execute('INSERT INTO tasks(task) values (\"\n                       {}\")'.format(args['task']))\n        con.commit()\n        con.close()\n\n        return {\n            'status': True,\n            'task': '{} added.'.format(args['task'])\n        }\n```", "```js\ndef put(self, id):\n        parser.add_argument('task', type=str)\n        args = parser.parse_args()\n\n        con = sql.connect('tasks.db')\n        cur = con.cursor()\n        cur.execute('UPDATE tasks set task = \"{}\" WHERE id = \n           {}'.format(args['task'], id))\n        con.commit()\n        con.close()\n\n        return {\n            'id': id,\n            'status': True,\n            'task': 'The task {} was updated.'.format(id)\n        }\n```", "```js\n def delete(self, id):\n        con = sql.connect('tasks.db')\n        cur = con.cursor()\n        cur.execute('DELETE FROM tasks WHERE id = {}'.format(id))\n        con.commit()\n        con.close()\n\n        return {\n            'id': id,\n            'status': True,\n            'task': 'The task {} was deleted.'.format(id)\n        }\n```", "```js\napi.add_resource(ToDo, '/', '/<int:id>')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```", "```js\n> python server/app.py\n```", "```js\n> create-nuxt-app client\n```", "```js\n**Project Name:** **client**\n```", "```js\n> Programming language: (Use arrow keys)\n   \u276f JavaScript\n TypeScript\n```", "```js\n> Package manager: (Use arrow keys) \n   \u276f Yarn\n npm\n```", "```js\n**> UI Framework:** **Bulma**\n```", "```js\n**> Nuxt.JS modules:**  **Axios**\n```", "```js\n**> Choose Linting tools:**  **None**\n```", "```js\n**> Choose Test Framework:  None**\n```", "```js\n**> Choose  Rendering Mode:  Universal (SSR)**\n```", "```js\n> Deployment target: Server (Node.js hosting)\n```", "```js\n> Development tools: jsconfig.json\n```", "```js\nexport default {\n  /* We need to change only the css property for now, */\n  /* the rest we will maitain the same */\n  /*\n   ** Global CSS\n   */\n  css: ['bulma/css/bulma.css'],\n}\n\n```", "```js\nexport default {\n  /* We need to change only the axios property for now, */\n  /* the rest we will maitain the same */\n  axios: {},\n}\n```", "```js\naxios: {\n  HOST: '127.0.0.1',\n  PORT: '5000',\n  https: false,\n  debug: true, // Only on development\n},\n```", "```js\nexport default {\n  name: 'TodoList',\n  data: () => ({\n    taskList: [],\n  }),\n  computed: {},\n  async beforeMount() {},\n  methods: {},\n};\n```", "```js\ntaskObject() {\n      return Object.fromEntries(new Map(this.taskList));\n    },\n```", "```js\nasync getTasks() {\n      try {\n        const { tasks } = await \n           this.$axios.$get('http://localhost:5000');\n        this.taskList = tasks;\n      } catch (err) {\n        console.error(err);\n      }\n    },\n```", "```js\nasync deleteTask(i) {\n      try {\n        const { status } = await \n           this.$axios.$delete(`http://localhost:5000/${i}`);\n        if (status) {\n          await this.getTasks();\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    },\n```", "```js\nasync beforeMount() {\n    await this.getTasks();\n  },\n```", "```js\n<div class=\"box\"></div>\n```", "```js\n<div class=\"content\">\n  <ol type=\"1\"></ol>\n</div>\n```", "```js\n<li\n  v-for=\"(task, i) in taskObject\"\n  :key=\"i\">\n</li>\n```", "```js\n{{ task }}\n<button\n  class=\"delete is-small\"\n  @click=\"deleteTask(i)\"\n/>\n```", "```js\nexport default {\n  name: 'TodoForm',\n  data: () => ({\n    task: '',\n  }),\n  methods: {},\n};\n```", "```js\nasync save() {\n      try {\n        const { status } = await \n          this.$axios.$post('http://localhost:5000/', {\n          task: this.task,\n        });\n        if (status) {\n          this.$emit('new-task', this.task);\n          this.task = '';\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    },\n```", "```js\n<div class=\"box\"></div>\n```", "```js\n<div class=\"field has-addons\"></div>\n```", "```js\n<div class=\"control is-expanded\">\n  <input\n    v-model=\"task\"\n    class=\"input\"\n    type=\"text\"\n    placeholder=\"ToDo Task\"\n    @keypress.enter=\"save\"\n  >\n</div>\n```", "```js\n<div class=\"control\">\n  <a\n    class=\"button is-info\"\n    @click=\"save\"\n  >\n    Save Task\n  </a>\n</div>\n```", "```js\n<template>   \n    <nuxt />\n</template>\n```", "```js\n<script>\nimport TodoForm from '../components/TodoForm.vue';\nimport TodoList from '../components/TodoList.vue';\n\nexport default {\n  components: { TodoForm, TodoList },\n};\n</script>\n```", "```js\n<section class=\"hero is-primary\">\n <div class=\"hero-body\">\n <div class=\"container\">\n <h1 class=\"title\">\n  Todo App\n      </h1>\n </div>\n </div> </section>\n```", "```js\n<section\n  class=\"section\"\n  style=\"padding: 1rem\" >\n <div class=\"container\">\n <todo-list\n  ref=\"list\"\n  />\n </div> </section>\n```", "```js\n<section\n  class=\"section\"\n  style=\"padding: 1rem\" >\n <div class=\"container\">\n <todo-form\n  @new-task=\"$refs.list.getTasks()\"   />\n </div> </section>\n```", "```js\nmodule.exports = {\n  root: true,\n  env: {\n    node: true,\n  },\n  extends: [\n    'plugin:vue/essential',\n    'plugin:vue/recommended',\n    'plugin:vue/strongly-recommended',\n    '@vue/airbnb',\n  ],\nparserOptions: {\n    parser: 'babel-eslint',\n  },\nrules: {\n 'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n 'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n }, \n};\n```"]