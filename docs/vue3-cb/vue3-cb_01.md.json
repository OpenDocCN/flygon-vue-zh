["```js\n<template>\n <div>\n <p>This is two</p>\n  <p>children elements</p>\n  </div> </template>\n```", "```js\n<template>\n <p>This is two</p>\n  <p>root elements</p> </template>\n```", "```js\n<template>\n  <header>\n    <div id=\"blue-portal\" />\n  </header>\n</header>  \n```", "```js\n<template>\n  <page>\n   <Teleport to=\"blue-portal\">\n     <button class=\"orange-portal\">Cake</button>\n   </Teleport>\n  </page>\n</template>\n```", "```js\n<template>\n  <Suspense>\n    <template #default>\n      <data-table />\n    </template>\n    <template #fallback>\n      <loading-gears />\n    </template>\n  </Suspense>\n</template>\n```", "```js\n{{ textString | filter }}\n```", "```js\n{{ filter(textString) }}\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport App from './App.vue';\n\nVue.use(Vuex);\nconst store = new Vuex.store({});\n\nnew Vue({\n  store,\n  render: (h) => h(App),\n}).$mount('#app');\n```", "```js\nimport { createApp } from 'vue';\nimport { createStore } from 'vuex';\nimport App from './App.vue';\n\nconst store = createStore({});\n\ncreateApp(App)\n  .use(store)\n  .mount('#app');\n```", "```js\n<template>\n  <input \n    :value=\"value\" \n    @input=\"$emit('input', $event)\" \n  />\n</template>\n<script>\nexport default {\n  props: {\n    value: String,\n  },\n}\n</script>\n```", "```js\n<template>\n  <input \n    :modelValue=\"modelValue\" \n    v-on:['update:modelValue']=\"$emit('update:modelValue', $event)\" \n  />\n</template>\n<script>\nexport default {\n  props: {\n    modelValue: String,\n  },\n}\n</script>\n```", "```js\n<script>\nexport default {\n  props: {\n    name: String,\n    email: String,\n  },\n  methods: {\n   updateUser(name, email) {\n    this.$emit('update:name', name);\n    this.$emit('update:email', email);\n   }\n  }\n}\n</script>\n```", "```js\n<template>\n  <custom-component\n    v-model:name=\"name\"\n    v-model:email=\"email\"\n  />\n</template>\n```", "```js\n<template>\n <p @click=\"increaseCounter\">{{ state.count }}</p> </template> <script> import { reactive, ref } from 'vue';   export default {\n  setup(){\n  const state = reactive({\n  count: ref(0)\n });    const increaseCounter = () => {\n  state.count += 1;\n }    return { state, increaseCounter }\n } } </script>\n```", "```js\n> npm install -g @vue/cli @vue/cli-service-global\n```", "```js\n<html>  <head>\n <script src=\"https://unpkg.com/vue@next\"></script>\n </head>\n</html>\n```", "```js\n<body>\n <div id=\"app\">\n </div>\n</body>\n```", "```js\n<script></script>\n```", "```js\n> npm install @vue/cli-service@latest\n```", "```js\n> npm install vue@next eslint-plugin-vue@next vue-loader@next\n```", "```js\n> npm install @vue/compiler-sfc@latest\n```", "```js\n> npm install @vue/test-utils@next @vue/server-test-utils@latest\n```", "```js\n> npm install vue-router@next\n```", "```js\n> npm install vuex@next\n```", "```js\nimport Vue from 'vue';\n```", "```js\nimport { createApp } from 'vue';\n```", "```js\nnew Vue({\n  router,\n  store,\n  render: (h) => h(App),\n}).$mount('#app');\n```", "```js\ncreateApp(App)\n  .use(router)\n  .use(store)\n  .mount('#app')\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: { /* ... */ },\n  mutations: { /* ... */ },\n  actions: { /* ... */ },\n  getters: { /* ... */ },\n  modules: { /* ... */ },\n});\n```", "```js\nimport { createStore } from 'vuex';\n\nexport default createStore({\n  state: { /* ... */ },\n  mutations: { /* ... */ },\n  actions: { /* ... */ },\n  getters: { /* ... */ },\n  modules: { /* ... */ },\n});\n```", "```js\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n\nVue.use(VueRouter);\n\nexport default new VueRouter({\n  routes: [{\n    path: '/',\n    name: 'HomePage',\n    component: () => import('pages/home'),\n  }]\n});\n```", "```js\nimport {\n  createRouter,\n  createWebHistory,\n} from 'vue-router';\n\nVue.use(VueRouter);\n\nexport default createRouter({\n  history: createWebHistory(),\n  routes: [{\n    path: '/',\n    name: 'HomePage',\n    component: () => import('pages/home'),\n  }]\n});\n```", "```js\nconst {\n  defineComponent,   createApp, } = Vue;\n```", "```js\nconst component = defineComponent({\n  data: () => ({}),\n  methods: {},\n  template: `` });\n```", "```js\ndata: () => ({\n  count: 0 }),\n```", "```js\nmethods: {\n  addOne() {\n  this.count += 1;\n  }, },\n```", "```js\ntemplate: `\n  <h1>  This is a Vue 3 Root Element!  </h1>\n <button @click=\"addOne\">  Pressed {{ count }} times.  </button> `\n```", "```js\ncreateApp(component)\n  .mount('#app');\n```", "```js\nconst {\n  defineComponent,\n h,  createApp, } = Vue;\n```", "```js\nconst component = defineComponent({\n  data: () => ({}),\n  methods: {},\n  render() {},  });\n```", "```js\ndata: () => ({\n  count: 0 }),\n```", "```js\nmethods: {\n  addOne() {\n  this.count += 1;\n  }, },\n```", "```js\nrender() {\n  const h1 = h('h1', 'This is a Vue 3 Root Element!');\n  const button = h('button', {\n  onClick: this.addOne,\n  }, `Pressed ${this.count} times.`);    return [\n  h1,\n  button,\n  ]; },\n```", "```js\ncreateApp(component)\n  .mount('#app');\n```", "```js\nconst {\n  defineComponent,   createApp, } = Vue;\n```", "```js\nconst nameInput = defineComponent({\n  name: 'NameInput',\n  props: {},\n  inheritAttrs: false,\n  template: `` });\n```", "```js\nprops: {\n  modelValue: String, },\n```", "```js\ntemplate: ` <label>\n <input\n v-bind=\"{  ...$attrs,  }\"\n :value=\"modelValue\" type=\"text\" @change=\"(event) => $emit('update:modelValue', \n                             event.target.value)\"\n  /> </label>`\n```", "```js\nconst component = defineComponent({\n  data: () => ({}),\n  template: ``,  });\n```", "```js\ndata: () => ({\n  name: ''  }),\n```", "```js\ntemplate: ` <name-input\n v-model=\"name\" style=\"border:0; border-bottom: 2px solid red;\"\n data-test=\"name-input\" />`\n```", "```js\nconst  app  =  createApp(component);  app.component('NameInput', nameInput); app.mount('#app');\n```", "```js\n<meta charset=\"utf-8\"/>\n```", "```js\n<div\n  id=\"marathon\"\n  style=\"font-size: 50px;\" > </div>\n```", "```js\nconst {\n  reactive,\n  watch, } = Vue;\n```", "```js\nconst mod = (a, b) => (a % b);\n```", "```js\nconst maxRoadLength = 50; const competitor  = reactive({\n  position: 0,\n  speed: 1, });\n```", "```js\nwatch(() => {\n  const street = Array(maxRoadLength).fill('_');\n  const marathonEl = document.getElementById('marathon');\n  street[competitor.position] = (competitor.position % 2 === 1)\n  ? '![](assets/c8b07311-36a4-4df3-98fd-3b68200deed3.png)'\n  : '![](assets/562ed724-a630-4193-a9c6-4e143a9690e2.png)';    marathonEl.innerHTML = '';\n  marathonEl.innerHTML = street.reverse().join(''); });\n```", "```js\nsetInterval(() => {\n competitor.position = mod(competitor.position +competitor.speed, \n    maxRoadLength) }, 100);\n```", "```js\nconst {\n  createApp,\n  defineComponent,\n  setup,\n  ref,\n  onMounted,\n  onUnmounted, } = Vue;\n```", "```js\nfunction fetchLocation() {\n  let watcher;\n  const geoLocation = navigator.geolocation;\n  const gpsTime = ref(Date.now());\n  const coordinates = ref({\n  accuracy: 0,\n  latitude: 0,\n  longitude: 0,\n  altitude: 0,\n  altitudeAccuracy: 0,\n  heading: 0,\n  speed: 0,\n  }); }\n```", "```js\nfunction setPosition(payload) {\n  gpsTime.value = payload.timestamp\n  coordinates.value = payload.coords\n}  \n```", "```js\nonMounted(() => {\n  if (geoLocation) watcher = geoLocation.watchPosition(setPosition); });\n```", "```js\nonUnmounted(() => {\n  if (watcher) geoLocation.clearWatch(watcher); });\n```", "```js\nreturn {\n  coordinates,\n  gpsTime, };\n```", "```js\nconst appComponent = defineComponent({\n  setup() {},\n  template: `` });\n```", "```js\nsetup() {\n  const {\n  coordinates,\n  gpsTime,\n  } = fetchLocation(); }\n```", "```js\nconst formatOptions = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  hour12: true,\n  };\n```", "```js\nconst formatDate = (date) => (new \n  Intl.DateTimeFormat(navigator.language, \n     formatOptions).format(date)); \n```", "```js\nreturn {\n  coordinates,\n  gpsTime,\n  formatDate };\n```", "```js\ntemplate: `\n  <h1>My Geo Position at {{formatDate(new \n                          Date(gpsTime))}}</h1>\n <ul>\n <li>Latitude: {{ coordinates.latitude }}</li>\n <li>Longitude: {{ coordinates.longitude }}</li>\n <li>Altitude: {{ coordinates.altitude  }}</li>\n </ul> `\n```", "```js\ncreateApp(appComponent)\n  .mount('#app');\n```"]