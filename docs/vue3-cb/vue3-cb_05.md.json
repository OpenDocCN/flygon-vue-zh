["```js\n> npm install -g @vue/cli @vue/cli-service-global\n```", "```js\n> vue create http-project\n```", "```js\n?  Please pick a preset: **(Use arrow keys)** \u276f default (babel, eslint) \n  Manually select features  \u200c\n```", "```js\nexport default async (url, method, options = {}) => {\n  let httpRequest;\n  if (method.toUpperCase() === 'GET') {\n  httpRequest = await fetch(url, {\n  cache: 'reload',\n  ...options,\n  });\n  } else {\n  httpRequest = fetch(url, {\n  method: method.toUpperCase(),\n  cache: 'reload',\n  ...options,\n  });\n  }\n  return (type) => {\n  switch (type.toLocaleLowerCase()) {\n  case 'json':\n  return httpRequest.json();\n  case 'blob':\n  return httpRequest.blob();\n  case 'text':\n  return httpRequest.text();\n  case 'formdata':\n  return httpRequest.formData();\n  default:\n  return httpRequest.arrayBuffer();\n  }\n }; };\n```", "```js\nimport baseHttp from './baseFetch';\n```", "```js\nexport const getHttp = async (url, type = 'json', options) => (await   \n   baseHttp(url, 'get', options))(type);\n```", "```js\nexport const postHttp = async (\n  url,\n  body,\n  type = 'json',\n  options,\n) => (await baseHttp(url,\n  'post',\n  {\n body,\n  ...options,\n  }))(type);\n```", "```js\nexport const putHttp = async (\n  url,\n  body,\n  type = 'json',\n  options,\n) => (await baseHttp(url,\n  'put',\n  {\n body,\n  ...options,\n  }))(type);\n```", "```js\nexport const patchHttp = async (\n  url,\n  body,\n  type = 'json',\n  options,\n) => (await baseHttp(url,\n  'patch',\n  {\n body,\n  ...options,\n  }))(type);  \n```", "```js\nexport const updateHttp = async (\n  url,\n  body,\n  type = 'json',\n  options,\n) => (await baseHttp(url,\n  'update',\n  {\n body,\n  ...options,\n  }))(type);  \n```", "```js\nexport const deleteHttp = async (\n url,\n  body,\n  type = 'json',\n  options,\n) => (await baseHttp(url,\n  'delete',\n  {\n body,\n  ...options,\n  }))(type);  \n```", "```js\ngetHttp('https://jsonplaceholder.typicode.com/todos/1', 'json').then((response) => { console.log(response)); }\n```", "```js\n> vue create http-project\n```", "```js\n?  Please pick a preset: **(Use arrow keys)** \u276f default (babel, eslint) \n  Manually select features  \u200c\n```", "```js\nimport { getHttp } from '../http/fetchApi';\n```", "```js\ncomponents: {\n  MaterialButton: () => import('./MaterialButton.vue'),\n  MaterialCardBox: () => import('./MaterialCardBox.vue'), },\n```", "```js\ndata: () => ({\n  kittyImage: '', }),\n```", "```js\nmethods: {\n  async getImage(url) {\n  return URL.createObjectURL(await getHttp(url, 'blob'));\n  },\n  async newCatImage() {\n  this.kittyImage = await this.getImage('https://cataas.com/cat');\n  },\n  async newCatGif() {\n  this.kittyImage = await \n          this.getImage('https://cataas.com/cat/gif');\n  },\n  },\n```", "```js\nasync beforeMount() {\n  await this.newCatImage();\n  },\n```", "```js\n<MaterialCardBox\n  header=\"Cat as a Service\"\n  sub-header=\"Random Cat Image\"\n  show-media\n show-actions >\n <template\n  v-slot:media>  </template>\n <template v-slot:action>  </template> </MaterialCardBox>\n```", "```js\n<img\n  v-if=\"kittyImage\"\n  alt=\"Meow!\"\n :src=\"kittyImage\"\n  style=\"width: 300px;\" >\n <p v-else style=\"text-align: center\">\n <i class=\"material-icons\">\n  cached\n   </i>\n </p>\n```", "```js\n<MaterialButton\n  background-color=\"#4ba3c7\"\n  text-color=\"#fff\"\n  @click=\"newCatImage\" >\n <i class=\"material-icons\">\n  pets\n  </i> Cat Image\n</MaterialButton> <MaterialButton\n  background-color=\"#005b9f\"\n  text-color=\"#fff\"\n  @click=\"newCatGif\" >\n <i class=\"material-icons\">\n  pets\n  </i> Cat GIF\n</MaterialButton>\n```", "```js\n<style>\n  body {\n  font-size: 14px;\n  } </style>\n```", "```js\n<script> export default {   name: 'App',\n  components: {\n  RandomCat: () => import('./components/RandomCat'),\n  }, }; </script>\n```", "```js\n<template>\n <div id=\"app\">\n <random-cat />\n </div> </template>\n```", "```js\n> npm run serve\n```", "```js\n> vue create visual-component\n```", "```js\n?  Please pick a preset: **(Use arrow keys)** \u276f default (babel, eslint) \n  Manually select features  \u200c\n```", "```js\n> npm install --save miragejs\n```", "```js\nexport default {\n  users: [\n {  name: 'Heitor Ramon Ribeiro',\n  email: 'heitor@example.com',\n  age: 31,\n  country: 'Brazil',\n  active: true,\n  },\n  ], };\n```", "```js\nexport const getFrom = key => ({ db }) => db[key];   export default {\n  getFrom, };\n```", "```js\nexport const postFrom = key => (schema, request) => {\n  const { data } = typeof request.requestBody === 'string'\n  ? JSON.parse(request.requestBody)\n  : request.requestBody;    return schema.db[key].insert(data); };   export default {\n  postFrom, };  \n```", "```js\nexport const patchFrom = key => (schema, request) => {\n  const { data } = typeof request.requestBody === 'string'\n  ? JSON.parse(request.requestBody)\n  : request.requestBody;    return schema.db[key].update(data.id, data); };   export default {\n  patchFrom, };\n```", "```js\nexport const deleteFrom = key => (schema, request) => \n   schema.db[key].remove(request.params.id);   export default {\n  deleteFrom, };\n```", "```js\nimport { Server } from 'miragejs'; import baseData from './db'; import { getFrom } from './get'; import { postFrom } from './post'; import { patchFrom } from './patch'; import { deleteFrom } from './delete'; \n```", "```js\nwindow.server = new Server({});\n```", "```js\nseeds(srv) {\n srv.db.loadData({ ...baseData }); },\n```", "```js\nroutes() {\n  this.namespace = 'api';    this.timing = 750;    this.get('/users', getFrom('users'));    this.post('/users', postFrom('users'));    this.patch('/users/:id', patchFrom('users'));    this.delete('/users/:id', deleteFrom('users'));\n  },  \n```", "```js\nimport './server/server'; import Vue from 'vue'; import App from './App.vue';   Vue.config.productionTip = false;   new Vue({\n  render: h => h(App), }).$mount('#app');\n```", "```js\nimport {\n  getHttp,\n  postHttp,\n  patchHttp,\n  deleteHttp, } from './http/fetchApi';\n```", "```js\ndata: () => ({\n  response: undefined,\n  userData: '',\n  userId: undefined,\n  }),\n```", "```js\nmethods: {\n  async getAllUsers() {\n },\n  async createUser() {\n },\n  async updateUser() {\n },\n  async deleteUser() {\n }, },\n```", "```js\nasync getAllUsers() {\n  this.response = await getHttp(`${window.location.href}api/users`); },\n```", "```js\nasync createUser(data) {\n  await postHttp(`${window.location.href}api/users`, { data });\n  await this.getAllUsers(); },\n```", "```js\nasync updateUser(data) {\n  await patchHttp(`${window.location.href}api/users/${data.id}`, \n     { data });\n  await this.getAllUsers(); },\n```", "```js\nasync deleteUser(id) {\n  await deleteHttp(`${window.location.href}api/users/${id}`, {}, 'text');\n  await this.getAllUsers(); },\n```", "```js\n<h3>Response</h3> <pre>{{ response }}</pre>\n```", "```js\n<hr/> <h1> Create / Update User </h1> <label for=\"userData\">\n User JSON:\n <textarea\n id=\"userData\"\n v-model=\"userData\"\n rows=\"10\"\n cols=\"40\"\n style=\"display: block;\"\n ></textarea> </label>\n```", "```js\n<button\n style=\"margin: 20px;\"\n @click=\"createUser(JSON.parse(userData))\" >\n  Create User\n</button> <button\n style=\"margin: 20px;\"\n @click=\"updateUser(JSON.parse(userData))\" >\n  Update User\n</button>\n```", "```js\n<h1> Delete User </h1> <label for=\"userData\">\n  User Id:\n<input type=\"number\" step=\"1\" v-model=\"userId\"> </label>\n```", "```js\n<button\n style=\"margin: 20px;\"\n @click=\"deleteUser(userId)\" >\n  Delete User\n</button>\n```", "```js\n> npm run serve\n```", "```js\n> vue create http-project\n```", "```js\n?  Please pick a preset: **(Use arrow keys)** \u276f default (babel, eslint) \n  Manually select features  \u200c\n```", "```js\n> npm install --save axios\n```", "```js\nimport axios from 'axios';\n\nexport default async (url, method, options = {}) => axios({\n  method: method.toUpperCase(),\n  url,\n  ...options,\n});\n```", "```js\nexport const getHttp = async (\n url,\n  params,\n  options, ) => baseHttp(url,\n  'get',\n  {\n  ...options,\n  params,\n  });\n```", "```js\nexport const postHttp = async (\n url,\n  data,\n  options, ) => baseHttp(url,\n  'post',\n  {\n data,\n  ...options,\n  });\n```", "```js\nexport const putHttp = async (\n url,\n  data,\n  options, ) => baseHttp(url,\n  'put',\n  {\n data,\n  ...options,\n  });\n```", "```js\nexport const patchHttp = async (\n url,\n  data,\n  options, ) => baseHttp(url,\n  'patch',\n  {\n data,\n  ...options,\n  });\n```", "```js\nexport const updateHttp = async (\n url,\n  data,\n  options, ) => baseHttp(url,\n  'update',\n  {\n data,\n  ...options,\n  });\n```", "```js\nexport const deleteHttp = async (\n url,\n  data,\n  options, ) => baseHttp(url,\n  'delete',\n  {\n data,\n  ...options,\n  });\n```", "```js\nasync getAllUsers() {\n const { data } = await getHttp(`${window.location.href}api/users`);\n this.response = data;\n },\n```", "```js\nasync deleteUser(id) {\n await deleteHttp(`${window.location.href}api/users/${id}`);\n await this.getAllUsers();\n },\n```", "```js\n> npm run serve\n```", "```js\n> vue create http-project\n```", "```js\n?  Please pick a preset: **(Use arrow keys)** \u276f default (babel, eslint) \n  Manually select features  \u200c\n```", "```js\nexport function createAxios(options = {}) {\n  return axios.create({\n  ...options,\n  }); }\n```", "```js\nconst localApi = createAxios();\n```", "```js\nexport const jsonPlaceholderApi = createAxios({\n  baseURL: 'https://jsonplaceholder.typicode.com/', });\n```", "```js\nexport default async (url, method, options = {}) => localApi({\n  method: method.toUpperCase(),\n  url,\n  ...options, });\n```", "```js\nimport baseHttp, { jsonPlaceholderApi } from './baseFetch';\n```", "```js\nexport const getTodos = async userId => jsonPlaceholderApi.get('todos',\n  {\n  params: {\n userId,\n  },\n  });\n```", "```js\nimport { Server } from 'miragejs'; import baseData from './db'; import { getFrom } from './get'; import { postFrom } from './post'; import { patchFrom } from './patch'; import { deleteFrom } from './delete';   window.server = new Server({\n  seeds(srv) {\n srv.db.loadData({ ...baseData });\n  },    routes() {\n  this.passthrough();\n  this.passthrough('https://jsonplaceholder.typicode.com/**');    this.namespace = 'api';    this.timing = 750;    this.get('/users', getFrom('users'));    this.post('/users', postFrom('users'));    this.patch('/users/:id', patchFrom('users'));    this.delete('/users/:id', deleteFrom('users'));\n  }, });\n```", "```js\nimport {\n  getHttp,\n  postHttp,\n  patchHttp,\n  deleteHttp,\n  getTodos, } from './http/fetchApi'; \n```", "```js\ndata: () => ({\n  response: undefined,\n  userData: '',\n  userId: undefined,\n  userTodo: [], }),\n```", "```js\nasync getUserTodo(userId) {\n this.userTodo = await getTodos(userId); },\n```", "```js\n<h1> Get User ToDos </h1> <label for=\"userData\">\n  User Id:\n  <input type=\"number\" step=\"1\" v-model=\"userId\"> </label>\n```", "```js\n<button\n  style=\"margin: 20px;\"\n  @click=\"getUserTodo(userId)\" >\n  Fetch Data\n</button>\n```", "```js\n> npm run serve\n```", "```js\n> vue create http-project\n```", "```js\n?  Please pick a preset: **(Use arrow keys)** \u276f default (babel, eslint) \n  Manually select features  \u200c\n```", "```js\n> npm install --save sweetalert2\n```", "```js\nimport Swal from 'sweetalert2';\n```", "```js\nconst postMethods = ['post', 'patch'];\n```", "```js\nexport function requestInterceptor(config) {\n  if (\n  postMethods.includes(config.method.toLocaleLowerCase()) &&\n Object.prototype.hasOwnProperty.call('id', config.data.data) && \n      !config.data.data.id) \n    {\n  throw new Error('You need to pass an ID for this request');\n  }    return config; } \n```", "```js\nexport function responseInterceptor(response) {\n  return response; }\n```", "```js\nexport function errorInterceptor(error) {\n  Swal.fire({\n  type: 'error',\n  title: 'Error!',\n  text: error.message,\n  });    return Promise.reject(error); }\n```", "```js\nimport {\n  errorInterceptor,\n  requestInterceptor,\n  responseInterceptor, } from './interceptors';\n```", "```js\nlocalApi.interceptors\n  .request.use(requestInterceptor, errorInterceptor);   localApi.interceptors\n  .response.use(responseInterceptor, errorInterceptor);\n```", "```js\njsonPlaceholderApi.interceptors\n  .request.use(requestInterceptor, errorInterceptor);   jsonPlaceholderApi.interceptors\n  .response.use(responseInterceptor, errorInterceptor);\n```", "```js\n> vue create http-project\n```", "```js\n?  Please pick a preset: **(Use arrow keys)** \u276f default (babel, eslint) \n  Manually select features  \u200c\n```", "```js\n> npm install --save vuesax material-icons\n```", "```js\n@import url('https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800,\n    800i&display=swap'); @import url('~vuesax/dist/vuesax.css'); @import url('~material-icons/iconfont/material-icons.css');   * {\n  font-family: 'Open Sans', sans-serif; }\n```", "```js\nimport './server/server'; import Vue from 'vue'; import App from './App.vue'; import Vuesax from 'vuesax'; import './style.css';   Vue.use(Vuesax);   Vue.config.productionTip = false;   new Vue({\n  render: h => h(App), }).$mount('#app');\n```", "```js\nimport List from './components/list'; import Create from './components/create'; import View from './components/view'; import Update from './components/update';\n```", "```js\ndata: () => ({\n  componentIs: 'list',\n  userId: 0, }),\n```", "```js\nprovide () {\n  const base = {};    Object.defineProperty(base, 'userId', {\n  enumerable: true,\n  get: () => Number(this.userId),\n });    return base; },\n```", "```js\ncomputed: {\n  component() {\n  switch (this.componentIs) {\n  case 'list':\n  return List;\n  case 'create':\n  return Create;\n  case 'view':\n  return View;\n  case 'edit':\n  return Update;\n  default:\n  return undefined;\n  }\n } },\n```", "```js\nmethods: {\n  changeComponent(payload) {\n  this.componentIs = payload.component;\n  this.userId = Number(payload.userId);\n  }, },\n```", "```js\n<div id=\"app\">\n <vs-row></vs-row> </div>\n```", "```js\n<vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"12\"> </vs-col>\n```", "```js\n<component\n :is=\"component\"\n @change-component=\"changeComponent\" />\n```", "```js\nexport default {\n  methods: {\n    changeComponent(component, userId = 0) {\n      this.$emit('change-component', { component, userId });\n    },\n  }\n}\n```", "```js\nimport {\n  getHttp,\n  deleteHttp,\n } from '../http/fetchApi';\n  import changeComponent from '../mixin/changeComponent';\n```", "```js\nmixins: [changeComponent],\n```", "```js\ndata: () => ({\n  userList: [], }),\n```", "```js\nmethods: {\n  async getAllUsers() {\n  const { data } = await getHttp(`${window.location.href}api/users`);\n  this.userList = data;\n  },\n  async deleteUser(id) {\n  await deleteHttp(`${window.location.href}api/users/${id}`);\n  await this.getAllUsers();\n  }, }\n```", "```js\nasync beforeMount() {\n  await this.getAllUsers(); },\n```", "```js\n<vs-card   style=\"margin: 20px;\"\n  >\n</vs-card>\n```", "```js\n<template slot=\"header\">\n <h3>\n  Users\n  </h3> </template>\n```", "```js\n<vs-row>\n <vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"12\">\n  </vs-col>\n</vs-row>\n```", "```js\n<vs-table\n  :data=\"userList\"\n  search\n stripe pagination max-items=\"10\"\n  style=\"width: 100%; padding: 20px;\" ></vs-table>\n```", "```js\n<template slot=\"thead\">\n <vs-th sort-key=\"id\">\n  #\n  </vs-th>\n <vs-th sort-key=\"name\">\n  Name\n  </vs-th>\n <vs-th sort-key=\"email\">\n  Email\n  </vs-th>\n <vs-th sort-key=\"country\">\n  Country\n  </vs-th>\n <vs-th sort-key=\"phone\">\n  Phone\n  </vs-th>\n <vs-th sort-key=\"Birthday\">\n  Birthday\n  </vs-th>\n <vs-th>\n  Actions\n  </vs-th> </template>\n```", "```js\n<template slot-scope=\"{data}\">\n <vs-tr :key=\"index\" v-for=\"(tr, index) in data\">\n <vs-td :data=\"data[index].id\">\n  {{data[index].id}}\n    </vs-td>\n <vs-td :data=\"data[index].name\">\n  {{data[index].name}}\n    </vs-td>\n <vs-td :data=\"data[index].email\">\n <a :href=\"`mailto:${data[index].email}`\">\n  {{data[index].email}}\n      </a>\n </vs-td>\n <vs-td :data=\"data[index].country\">\n  {{data[index].country}}\n    </vs-td>\n <vs-td :data=\"data[index].phone\">\n  {{data[index].phone}}\n    </vs-td>\n <vs-td :data=\"data[index].birthday\">\n  {{data[index].birthday}}\n    </vs-td>\n <vs-td :data=\"data[index].id\">\n <vs-button\n  color=\"primary\"\n  type=\"filled\"\n  icon=\"remove_red_eye\"\n  size=\"small\"\n  @click=\"changeComponent('view', data[index].id)\"\n  />\n <vs-button\n  color=\"success\"\n  type=\"filled\"\n  icon=\"edit\"\n  size=\"small\"\n  @click=\"changeComponent('edit', data[index].id)\"\n  />\n <vs-button\n  color=\"danger\"\n  type=\"filled\"\n  icon=\"delete\"\n  size=\"small\"\n  @click=\"deleteUser(data[index].id)\"\n  />\n </vs-td>\n </vs-tr> </template>\n```", "```js\n<template slot=\"footer\">\n <vs-row vs-justify=\"flex-start\">\n <vs-button\n  color=\"primary\"\n  type=\"filled\"\n  icon=\"fiber_new\"\n  size=\"small\"\n  @click=\"changeComponent('create', 0)\"\n  >\n  Create User\n    </vs-button>\n </vs-row> </template>  \n```", "```js\n<style scoped>\n  .vs-button {\n  margin-left: 5px;\n } </style>\n```", "```js\n> npm run serve\n```", "```js\nprops: {\n  value: {\n  type: Object,\n  required: false,\n  default: () => {\n },\n  },\n  disabled: {\n  type: Boolean,\n  required: false,\n  default: false,\n  } },\n```", "```js\ndata: () => ({\n  tmpForm: {}, }),\n```", "```js\nwatch: {\n  tmpForm: {\n  handler(value) {\n  this.$emit('input', value);\n  },\n  deep: true,\n  },\n  value: {\n  handler(value) {\n  this.tmpForm = value;\n  },\n  deep: true,\n  immediate: true,\n  } },\n```", "```js\n<vs-row></vs-row>\n```", "```js\n<vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"6\">\n <vs-input\n  v-model=\"tmpForm.name\"\n  :disabled=\"disabled\"\n  label=\"Name\"\n  placeholder=\"User Name\"\n  class=\"inputMargin full-width\"\n  /> </vs-col>\n```", "```js\n<vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"6\">\n <vs-input\n  v-model=\"tmpForm.email\"\n  :disabled=\"disabled\"\n  label=\"Email\"\n  placeholder=\"User Email\"\n  class=\"inputMargin full-width\"\n  /> </vs-col>\n```", "```js\n<vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"6\">\n <vs-input\n  v-model=\"tmpForm.country\"\n  :disabled=\"disabled\"\n  label=\"Country\"\n  placeholder=\"User Country\"\n  class=\"inputMargin full-width\"\n  /> </vs-col>\n```", "```js\n<vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"6\">\n <vs-input\n  v-model=\"tmpForm.phone\"\n  :disabled=\"disabled\"\n  label=\"Phone\"\n  placeholder=\"User Phone\"\n  class=\"inputMargin full-width\"\n  /> </vs-col>\n```", "```js\n<vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"6\">\n <vs-input\n  v-model=\"tmpForm.birthday\"\n  :disabled=\"disabled\"\n  label=\"Birthday\"\n  placeholder=\"User Birthday\"\n  class=\"inputMargin full-width\"\n  /> </vs-col>\n```", "```js\n<style>\n  .inputMargin {\n  margin: 15px;\n } </style>\n```", "```js\nimport UserForm from './userForm'; import changeComponent from '../mixin/changeComponent'; import { postHttp } from '../http/fetchApi';\n```", "```js\ndata: () => ({\n  userData: {\n  name: '',\n  email: '',\n  birthday: '',\n  country: '',\n  phone: '',\n  }, }),\n```", "```js\nmixins: [changeComponent],\n```", "```js\ncomponents: {\n  UserForm, },\n```", "```js\nmethods: {\n  async createUser() {\n  await postHttp(`${window.location.href}api/users`, {\n  data: {\n  ...this.userData,\n  }\n });\n  this.changeComponent('list', 0);\n  }, },\n```", "```js\n<vs-card\n  style=\"margin: 20px;\"\n  >\n</vs-card>\n```", "```js\n<template slot=\"header\">\n <h3>\n Create User\n  </h3> </template>\n```", "```js\n<vs-row>\n <vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"12\">\n  </vs-col>\n</vs-row>\n```", "```js\n<user-form\n  v-model=\"userData\"  />\n```", "```js\n<template slot=\"footer\">\n <vs-row vs-justify=\"flex-start\">\n <vs-button\n  color=\"success\"\n  type=\"filled\"\n  icon=\"save\"\n  size=\"small\"\n  @click=\"createUser\"\n  >\n  Create User\n    </vs-button>\n <vs-button\n  color=\"danger\"\n  type=\"filled\"\n  icon=\"cancel\"\n  size=\"small\"\n  style=\"margin-left: 5px\"\n  @click=\"changeComponent('list', 0)\"\n  >\n  Cancel\n    </vs-button>\n </vs-row> </template>\n```", "```js\n> npm run serve\n```", "```js\nimport {\n  getHttp, } from '../http/fetchApi'; import UserForm from './userForm'; import changeComponent from '../mixin/changeComponent';\n```", "```js\ndata: () => ({\n  userData: {\n  name: '',\n  email: '',\n  birthday: '',\n  country: '',\n  phone: '',\n  }, }),\n```", "```js\nmixins: [changeComponent],\n```", "```js\ninject: ['userId'],\n```", "```js\ncomponents: {\n  UserForm, },\n```", "```js\nmethods: {\n  async getUserById() {\n  const { data } = await getHttp(`${window.location.href}api/users/${this.userId}`);\n  this.userData = data;\n  }, }\n```", "```js\nasync beforeMount() {\n  await this.getUserById(); },\n```", "```js\n<vs-card\n  style=\"margin: 20px;\"\n  >\n</vs-card>\n```", "```js\n<template slot=\"header\">\n <h3>\n  View User\n  </h3> </template>\n```", "```js\n<vs-row>\n <vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"12\">\n  </vs-col>\n</vs-row>\n```", "```js\n<user-form\n  v-model=\"userData\"\n  disabled />\n```", "```js\n<template slot=\"footer\">\n <vs-row vs-justify=\"flex-start\">\n <vs-button\n  color=\"primary\"\n  type=\"filled\"\n  icon=\"arrow_back\"\n  size=\"small\"\n  style=\"margin-left: 5px\"\n  @click=\"changeComponent('list', 0)\"\n  >\n  Back\n    </vs-button>\n <vs-button\n  color=\"success\"\n  type=\"filled\"\n  icon=\"edit\"\n  size=\"small\"\n  style=\"margin-left: 5px\"\n  @click=\"changeComponent('edit', userId)\"\n  >\n  Edit User\n    </vs-button>\n </vs-row> </template>\n```", "```js\n> npm run serve\n```", "```js\nimport UserForm from './userForm'; import changeComponent from '../mixin/changeComponent'; import {\n  getHttp,\n  patchHttp, } from '../http/fetchApi';\n```", "```js\ndata: () => ({\n  userData: {\n  name: '',\n  email: '',\n  birthday: '',\n  country: '',\n  phone: '',\n  }, }),\n```", "```js\nmixins: [changeComponent],\n```", "```js\ninject: ['userId'],\n```", "```js\ncomponents: {\n  UserForm, },\n```", "```js\nmethods: {\n  async getUserById() {\n  const { data } = await \n      getHttp(`${window.location.href}api/users/${this.userId}`);\n  this.userData = data;\n  },\n  async updateUser() {\n  await patchHttp\n (`${window.location.href}api/users/${this.userData.id}`, {\n  data: {\n  ...this.userData,\n  }\n });\n  this.changeComponent('list', 0);\n  }, },\n```", "```js\nasync beforeMount() {   await this.getUserById(); },\n```", "```js\n<vs-card\n  style=\"margin: 20px;\"\n  >\n</vs-card>\n```", "```js\n<template slot=\"header\">\n <h3>\n  Update User\n  </h3> </template>\n```", "```js\n<vs-row>\n <vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"12\">\n  </vs-col>\n</vs-row>\n```", "```js\n<user-form\n  v-model=\"userData\"\n  disabled />\n```", "```js\n<template slot=\"footer\">\n <vs-row vs-justify=\"flex-start\">\n <vs-button\n  color=\"success\"\n  type=\"filled\"\n  icon=\"save\"\n  size=\"small\"\n  @click=\"updateUser\"\n  >\n  Update User\n    </vs-button>\n <vs-button\n  color=\"danger\"\n  type=\"filled\"\n  icon=\"cancel\"\n  size=\"small\"\n  style=\"margin-left: 5px\"\n  @click=\"changeComponent('list', 0)\"\n  >\n  Cancel\n    </vs-button>\n </vs-row> </template>\n```", "```js\n> npm run serve\n```"]