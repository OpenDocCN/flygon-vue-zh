- en: Creating Beautiful Applications Using UI Frameworks
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UI框架创建漂亮的应用程序
- en: Using UI frameworks and libraries is a good way to increase productivity and
    help the development of your application. You can focus more on the code and less
    on the design.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UI框架和库是提高生产力并帮助应用程序开发的好方法。您可以更多地专注于代码，而不是设计。
- en: Learning how to use such frameworks means that you know how these frameworks
    behave and work. This will help you in the process of developing an application
    or a framework in the future.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何使用这些框架意味着您知道这些框架的行为和工作原理。这将有助于您在将来开发应用程序或框架的过程中。
- en: Here, you will learn more about the usage of frameworks when creating user registration
    forms and all the components that are needed for a page. In this chapter, we will
    learn how to create a layout, a page, and a form using Buefy, Vuetify, and Ant-Design.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将学习在创建用户注册表单和页面所需的所有组件时，使用框架的更多用法。在本章中，我们将学习如何使用Buefy、Vuetify和Ant-Design创建布局、页面和表单。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Creating a page, a layout, and a user form with Buefy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Buefy创建页面、布局和用户表单
- en: Creating a page, a layout, and a user form with Vuetify
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vuetify创建页面、布局和用户表单
- en: Creating a page, a layout, and a user form with Ant-Design
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ant-Design创建页面、布局和用户表单
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using Node.js and Vue-CLI.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用Node.js和Vue-CLI。
- en: 'Attention Windows users: you need to install an `npm` package called `windows-build-tools`.
    To do so, open PowerShell as administrator and execute the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意Windows用户：您需要安装一个名为`windows-build-tools`的`npm`包。为此，请以管理员身份打开PowerShell并执行以下命令：
- en: '`> npm install -g windows-build-tools`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`'
- en: 'To install `Vue-CLI`, you need to open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`Vue-CLI`，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a page, a layout, and a user form with Buefy
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Buefy创建页面、布局和用户表单
- en: Bulma was one of the first frameworks to be used for rapid prototyping and web
    development that didn't require a JavaScript library attached to it. All the special
    components that needed to be coded were the responsibility of the developer using
    the framework.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Bulma是最早用于快速原型设计和Web开发的框架之一，它不需要附加JavaScript库。所有需要编码的特殊组件都是使用框架的开发人员的责任。
- en: With the advent of JavaScript frameworks and the community that was created
    around the Bulma framework, a wrapper for Vue was created. This wrapper takes
    all the responsibility of JavaScript component development and delivers a complete
    solution for developers to use the Bulma framework within their applications,
    without the need to re-invent the wheel.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 随着JavaScript框架的出现和围绕Bulma框架创建的社区，为Vue创建了一个包装器。这个包装器承担了JavaScript组件开发的所有责任，并为开发人员提供了在其应用程序中使用Bulma框架的完整解决方案，而无需重新发明轮子。
- en: In this recipe, we will learn how to use the Buefy framework with Vue and how
    to create a layout, a page, and a user registration form.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何在Vue中使用Buefy框架，以及如何创建布局、页面和用户注册表单。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisites for this recipe are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例的先决条件如下：
- en: Node.js 12+
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: A Vue-CLI project
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Vue-CLI项目
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To create a Vue-CLI project with the Buefy framework, we need to create a Vue-CLI
    project first and then add the Buefy framework to the project. We will divide
    this recipe into four parts: creating the Vue-CLI project, adding the Buefy framework
    to the project, creating the layout and the page, and finally creating the user
    registration form.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Buefy框架创建一个Vue-CLI项目，我们首先需要创建一个Vue-CLI项目，然后将Buefy框架添加到项目中。我们将把这个步骤分为四个部分：创建Vue-CLI项目，将Buefy框架添加到项目中，创建布局和页面，最后创建用户注册表单。
- en: Creating the Vue-CLI project
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Vue-CLI项目
- en: 'Here we will create the Vue-CLI project to be used in this recipe. This project
    will have custom settings to be able to work with the Buefy framework:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建用于此示例的Vue-CLI项目。这个项目将具有自定义设置，以便能够与Buefy框架一起工作：
- en: 'We need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Vue-CLI will ask for you to choose a preset – select `Manually select features`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vue-CLI会要求您选择一个预设 - 选择`手动选择功能`：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now the Vue-CLI will ask for the features, and you will need to select `CSS
    Pre-processors` as an additional feature on top of the default ones:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在Vue-CLI会要求选择功能，您需要在默认功能之上选择`CSS预处理器`作为附加功能：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here the Vue-CLI will ask which CSS pre-processor you want to use; select `Sass/SCSS
    (with node-sass)`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，Vue-CLI会询问您想要使用哪种CSS预处理器；选择`Sass/SCSS（使用node-sass）`：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Continue this process by selecting a linter and formatted. In our case, we
    will select the `ESLint + Airbnb` config:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续这个过程，选择一个linter和格式化程序。在我们的情况下，我们将选择`ESLint + Airbnb`配置：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Choose the additional features of the linter (here, `Lint and fix on commit`):'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择linter的附加功能（这里是`在提交时进行Lint和修复`）：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Select where you want to place the linter and formatter configuration files
    (here, `In dedicated config files`):'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您想要放置linter和格式化程序配置文件的位置（这里是`在专用配置文件中`）：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, the Vue-CLI will ask you whether you want to save the settings for
    future projects; you should select `N`. After that, Vue-CLI will create the folder
    and install the dependencies for you:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，Vue-CLI会询问您是否要保存设置以供将来使用；您应该选择`N`。之后，Vue-CLI将为您创建文件夹并安装依赖项：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding Buefy to the Vue-CLI project
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Buefy添加到Vue-CLI项目中
- en: 'To use Bulma in a Vue project, we are going to use the Buefy UI library. This
    library is a wrapper around the Bulma framework and provides all the components
    that are available with the original framework and some additional components
    to use:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Vue项目中使用Bulma，我们将使用Buefy UI库。这个库是Bulma框架的一个包装器，并提供了所有原始框架可用的组件以及一些额外的组件来使用：
- en: 'In the folder that you created for your Vue-CLI project, open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在为Vue-CLI项目创建的文件夹中，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Vue-CLI will ask whether you want to choose a style to work with Buefy; we
    will go with `scss`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vue-CLI会询问您是否要选择一个样式来使用Buefy；我们将选择`scss`：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, Vue-CLI will ask whether you want to include the Material Design icons; for
    this project, we won''t use them:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，Vue-CLI会询问您是否要包括Material Design图标；对于这个项目，我们不会使用它们：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now Vue-CLI will ask whether you want to include Font Awesome icons; we will
    add them to the project:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在Vue-CLI会询问您是否要包括Font Awesome图标；我们将把它们添加到项目中：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating the layout and a page with Buefy
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Buefy创建布局和页面
- en: To create a page, we need to create a layout structure and the base components
    for the page, such as a header menu, a footer, and the hero section of the page.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个页面，我们需要创建一个布局结构和页面的基本组件，比如页眉菜单、页脚和页面的主要部分。
- en: Creating the header menu component
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建页眉菜单组件
- en: 'In our design, we will have a header menu, with a basic combination of links
    and call-to-action buttons:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设计中，我们将有一个页眉菜单，其中包含链接和呼吁行动按钮的基本组合：
- en: Create a new file named `top-menu.vue` in the `src/components` folder and open
    it.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个名为`top-menu.vue`的新文件并打开它。
- en: 'In the `<script>` section of the single file component, we will export a `default`
    JavaScript object, with the `name` property defined as `TopMenu`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<script>`部分，我们将导出一个`default` JavaScript对象，其中`name`属性定义为`TopMenu`：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `<template>` section of the single file component, create a `section`
    HTML element with the `section` class, and add a child `div` HTML element with
    the `container` class:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<template>`部分，创建一个带有`section`类的`section` HTML元素，并添加一个带有`container`类的子`div`
    HTML元素：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now create a `b-navbar` component as a child of the `div.container` HTML element,
    and add as a child a `template` placeholder component, with the named slot as
    `brand`. Inside that, add a `b-navbar-item` component with the `href` attribute
    defined as `#` and add an `img` HTML element as a child:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`div.container` HTML元素的子级中创建一个`b-navbar`组件，并添加一个具有命名插槽`brand`的`template`占位符组件作为子级。在其中，添加一个带有`href`属性定义为`#`的`b-navbar-item`组件，并添加一个`img`
    HTML元素作为子级：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After this `template` placeholder, create another `template` placeholder with
    the named slot as `start`. Inside it, create two `b-navbar-item` components with
    the `href` attribute defined as `#`. Create, as a sibling component, a `b-navbar-dropdown`
    component with the `label` attribute defined as `Info`. In this component, add
    two `b-navbar-item` components as children with the `href` attribute defined as
    `#`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`template`占位符之后，创建另一个具有命名插槽`start`的`template`占位符。在其中，创建两个带有`href`属性定义为`#`的`b-navbar-item`组件。作为同级组件，创建一个带有`label`属性定义为`Info`的`b-navbar-dropdown`组件。在这个组件中，添加两个带有`href`属性定义为`#`的`b-navbar-item`组件作为子级：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, create another `template` placeholder with the named slot as `end`.
    Create a `b-navbar-item` component as a child component with the `tag` attribute
    defined as `div`, and add a `div` HTML element as a child of this component with
    the `buttons` class. In the `div` HTML element, create an `a` HTML element with
    the `button is-primary` class, and another `a` HTML element with the `button is-light` class:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`template`中创建另一个具有命名插槽`end`的占位符。创建一个`b-navbar-item`组件作为子组件，`tag`属性定义为`div`，并在该组件的子级中添加一个带有`buttons`类的`div`
    HTML元素。在`div` HTML元素中，创建一个带有`button is-primary`类的`a` HTML元素，以及另一个带有`button is-light`类的`a`
    HTML元素：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Creating the hero section component
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建英雄区组件
- en: 'We will create a hero section component. A hero component is a full-width banner
    that provides visual information on the page to the user:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个英雄区组件。英雄组件是一个全宽的横幅，为用户提供页面上的视觉信息：
- en: Create a new file named `hero-section.vue` in the `src/components` folder and
    open it.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个名为`hero-section.vue`的新文件并打开它。
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object, with the `name` property defined as `HeroSection`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<script>`部分，我们将导出一个`default` JavaScript对象，其中`name`属性定义为`HeroSection`：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the `<template>` section of the single file component, create a `section`
    HTML element with the `hero is-primary` class, then add  a `div` HTML element
    as a child, with the `hero-body` class:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<template>`部分，创建一个带有`hero is-primary`类的`section` HTML元素，然后添加一个带有`hero-body`类的`div`
    HTML元素作为子级：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Inside the `div.hero-body` HTML element, create a child `div` HTML element
    with the `container` class. Then, add an `h1` HTML element as a child with the
    `title` class and an `h2` HTML element with the `subtitle` class:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`div.hero-body` HTML元素内部，创建一个带有`container`类的子`div` HTML元素。然后，添加一个带有`title`类的`h1`
    HTML元素作为子级，以及一个带有`subtitle`类的`h2` HTML元素：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating the footer component
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建页脚组件
- en: 'The final component that we are going to use in our layout is the footer component.
    This will be displayed as the footer of our page:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在布局中使用的最终组件是页脚组件。这将显示为我们页面的页脚：
- en: Create a new file named `Footer.vue` in the `src/components` folder and open
    it.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个名为`Footer.vue`的新文件并打开它。
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object, with the `name` property defined as `FooterSection`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<script>`部分，我们将导出一个`default` JavaScript对象，其中`name`属性定义为`FooterSection`：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the `<template>` section of the single file component, create a `footer`
    HTML element with the `footer` class, and then add a `div` HTML element with the
    `content has-text-centered` class:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<template>`部分，创建一个带有`footer`类的`footer` HTML元素，然后添加一个带有`content has-text-centered`类的`div`
    HTML元素：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Inside the `div.content` HTML element, create a `p` HTML element for the initial
    footer line, and create a second `p` HTML element for the second line:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`div.content` HTML元素内，创建一个`p` HTML元素作为初始页脚行，并创建第二个`p` HTML元素作为第二行：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Creating the layout component
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建布局组件
- en: 'To create the layout component, we are going to use all the created components,
    and add a slot that will hold the page content:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建布局组件，我们将使用所有创建的组件，并添加一个将容纳页面内容的插槽：
- en: Create a new folder called `layouts` in the `src` folder, and create a new file
    named `Main.vue` and open it.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建一个名为`layouts`的新文件夹，并创建一个名为`Main.vue`的新文件并打开它。
- en: 'In the `<script>` section of the single file component, import the `footer-section`
    component and the `top-menu` component:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<script>`部分，导入`footer-section`组件和`top-menu`组件：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, we will export a `default` JavaScript object, with the `name` property defined
    as `Mainlayout`, and define the `components` property with the imported components:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将导出一个`default` JavaScript对象，其中`name`属性定义为`Mainlayout`，并定义`components`属性为导入的组件：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, in the `<template>` section of the single file component, create a
    `div` HTML element with the child `top-menu` component, a `slot` placeholder,
    and the `footer-section` component:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在单文件组件的`<template>`部分，创建一个带有子`top-menu`组件、一个`slot`占位符和`footer-section`组件的`div`
    HTML元素：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Creating the user registration form with Buefy
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Buefy创建用户注册表单
- en: 'Now we are going to create the user registration form and make the final page.
    In this step, we will join the outputs of all the other steps into a single page:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要创建用户注册表单并制作最终页面。在这一步中，我们将把所有其他步骤的输出合并到一个页面中：
- en: 'Open the `App.vue` file in the `src` folder. In the `<script>` section of the
    single file component, import the `main-layout` component and the `hero-section` component:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src`文件夹中的`App.vue`文件。在单文件组件的`<script>`部分，导入`main-layout`组件和`hero-section`组件：
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, we will export a `default` JavaScript object with the `name` property
    defined as `App`, then define the `components` property with the imported components.
    Add the `data` property to the JavaScript object, with the `name`, `username`,
    `password`, `email`, `phone`, `cellphone`, `address`, `zipcode`, and `country`
    properties:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将导出一个`default` JavaScript对象，其中`name`属性定义为`App`，然后定义`components`属性为导入的组件。在JavaScript对象中添加`data`属性，包括`name`、`username`、`password`、`email`、`phone`、`cellphone`、`address`、`zipcode`和`country`属性：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `<template>` section of the single file, add the imported `main-layout`
    component and add `hero-section` as a child component:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件的`<template>`部分，添加导入的`main-layout`组件，并将`hero-section`作为子组件添加：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'After the `hero-section` component, create a sibling `section` HTML element,
    with the `section` class, and add a child `div` HTML element with the `container` class. In
    this `div` HTML element, create a `h1` HTML element with the `title is-3` class and
    a sibling `hr` HTML element:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`hero-section`组件之后，创建一个兄弟`section` HTML元素，带有`section`类，并添加一个带有`container`类的子`div`
    HTML元素。在这个`div` HTML元素中，创建一个带有`title is-3`类的`h1` HTML元素和一个兄弟`hr` HTML元素：
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, create a `b-field` component as a sibling of the `hr` HTML element, with
    `Name` for `label`, and add a child `b-input` with the `v-model` directive bound
    to `name`. Do the same for the `email` field, changing `label` to `Email`, and
    the `v-model` directive bound to `email`. In the email `b-input`, add a `type`
    attribute defined as `email`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个带有`Name`作为`label`的`b-field`组件，作为`hr` HTML元素的兄弟，并添加一个带有`v-model`指令绑定到`name`的子`b-input`。对于`email`字段，做同样的操作，将`label`更改为`Email`，并将`v-model`指令绑定到`email`。在email的`b-input`中，添加一个定义为`email`的`type`属性：
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a `b-field` component as a sibling of the `b-field` component, with
    the `grouped` attribute. Then, as child components, create the following:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`grouped`属性的`b-field`组件作为`b-field`组件的兄弟。然后，作为子组件，创建以下内容：
- en: A `b-field` component with the `expanded` attribute and `label` defined as `Phone`*.* Add
    a child `b-input` component with the `v-model` directive bound to `phone` and `type`
    as `tel`.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有`expanded`属性和`label`定义为`Phone`的`b-field`组件。添加一个带有`v-model`指令绑定到`phone`和`type`为`tel`的子`b-input`组件。
- en: 'A `b-field` component with the `expanded` attribute and `label` defined as `Cellphone`.
    Add a child `b-input` component with the `v-model` directive bound to `cellphone` and `type` as `tel`:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有`expanded`属性和`label`定义为`Cellphone`的`b-field`组件。添加一个带有`v-model`指令绑定到`cellphone`和`type`为`tel`的子`b-input`组件：
- en: '[PRE32]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, create an `h1` HTML element as a sibling of the `b-field` component with
    the `title is-3` class, and add an `hr` HTML element as a sibling. Create a `b-field`
    component with `label` defined as `Address`, and add a `b-input` component with
    the `v-model` directive bound to `address`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个带有`title is-3`类的`h1` HTML元素作为`b-field`组件的兄弟，并添加一个`hr` HTML元素作为兄弟。创建一个带有`label`定义为`Address`的`b-field`组件，并添加一个带有`v-model`指令绑定到`address`的`b-input`组件：
- en: '[PRE33]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a `b-field` component as a sibling of the `b-field` component, with
    the `grouped` attribute. Then, as child components, create the following:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`b-field`组件作为`b-field`组件的兄弟，带有`grouped`属性。然后，作为子组件，创建以下内容：
- en: A child `b-field` component with the `expanded` attribute and `label` defined
    as `Zipcode`. Add a `b-input` component with the `v-model` directive bound to `zipcode`
    and the `type` attribute defined as `tel`.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有`expanded`属性和`label`定义为`Zipcode`的子`b-field`组件。添加一个带有`v-model`指令绑定到`zipcode`和`type`属性定义为`tel`的`b-input`组件。
- en: 'A child `b-field` component with the `expanded` attribute and `label` defined
    as `Country`*. *Add a `b-input` component with the `v-model` directive bound to `country` and
    the `type` attribute defined as `tel`:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有`expanded`属性和`label`定义为`Country`的子`b-field`组件。添加一个带有`v-model`指令绑定到`country`和`type`属性定义为`tel`的`b-input`组件：
- en: '[PRE34]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, create an `h1` HTML element as a sibling of the `b-field` component,
    with the `title is-3` class, and add an `hr` HTML element as a sibling. Create
    a `b-field` component with the `grouped` attribute. Create a child `b-field` component
    with the `expanded` attribute and `label` defined as `username`, and add a `b-input` component
    with the `v-model` directive bound to `username`. Do the same for the `Password`
    input, changing `label` to `Password`, in the `b-input` component defining the `v-model` directive
    as bound to `password`, and adding the `type` attribute as `password`:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个`h1` HTML元素作为`b-field`组件的同级元素，使用`title is-3`类，并添加一个`hr` HTML元素作为同级元素。创建一个带有`grouped`属性的`b-field`组件。创建一个子`b-field`组件，带有`expanded`属性和`label`定义为`username`，并添加一个带有`v-model`指令绑定到`username`的`b-input`组件。对于`Password`输入，做同样的事情，将`label`更改为`Password`，在`b-input`组件中定义`v-model`指令绑定到`password`，并添加`type`属性为`password`：
- en: '[PRE35]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, create a `b-field` component as a sibling of the `b-field` component,
    with the `position` attribute defined as `is-right` and the `grouped` attribute.
    Then, create two `div` HTML element with the `control` class. In the first `div`
    HTML element, add a `button` HTML element as a child with the `button is danger
    is-light` class,  and in the second `div` HTML element, create a child `button`
    HTML element with the `button is-success` class:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个`b-field`组件作为`b-field`组件的同级元素，定义`position`属性为`is-right`和`grouped`属性。然后，创建两个带有`control`类的`div`
    HTML元素。在第一个`div` HTML元素中，添加一个`button` HTML元素作为子元素，使用`button is danger is-light`类，而在第二个`div`
    HTML元素中，创建一个带有`button is-success`类的子`button` HTML元素：
- en: '[PRE36]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we create a Vue-CLI project, with the basic configurations, and the additional
    CSS pre-processor `node-sass`. Then, we were able to add the Buefy framework to
    our project, using Vue-CLI and the Buefy plugin. Using the Buefy framework, we
    created a layout page component, with a header menu component and a footer component.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个Vue-CLI项目，进行基本配置，并添加额外的CSS预处理器`node-sass`。然后，我们能够使用Vue-CLI和Buefy插件将Buefy框架添加到我们的项目中。使用Buefy框架，我们创建了一个布局页面组件，带有页眉菜单组件和页脚组件。
- en: For the page, we used the Bulma CSS container structure to define our page,
    and place our user registration form on a default grid size. Then, we added the
    hero section component, for the page identification, and finally, we created the
    user registration form and inputs.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于页面，我们使用Bulma CSS容器结构来定义我们的页面，并将用户注册表单放在默认的网格大小上。然后，我们添加了hero部分组件，用于页面标识，最后，我们创建了用户注册表单和输入。
- en: 'Here is a screenshot of the final project up and running:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终项目正在运行的屏幕截图：
- en: '![](assets/b1d76a75-1cbf-4562-813c-d15ac38a51b1.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b1d76a75-1cbf-4562-813c-d15ac38a51b1.png)'
- en: See also
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about Bulma at [http://bulma.io/](http://bulma.io/).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://bulma.io/](http://bulma.io/)找到有关Bulma的更多信息。
- en: Find more information about Buefy at [https://buefy.org/](https://buefy.org/).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://buefy.org/](https://buefy.org/)找到有关Buefy的更多信息。
- en: Creating a page, a layout, and a user form with Vuetify
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vuetify创建页面、布局和用户表单
- en: Vuetify is on the top three list of the most well-known UI frameworks for Vue.
    Based on Material Design by Google, this framework was initially designed by John
    Leider and is now gathering ground in the Vue ecosystem as the go-to UI framework
    for the initial development of an application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Vuetify是Vue最知名的三个UI框架之一。基于Google的Material Design，这个框架最初是由John Leider设计的，现在作为Vue生态系统中的首选UI框架，用于应用程序的初始开发。
- en: In this recipe, we will learn how to use Vuetify to create a layout component
    wrapper, a page, and a user registration form.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何使用Vuetify创建一个布局组件包装器、一个页面和一个用户注册表单。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisites for this recipe are as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的食谱先决条件如下：
- en: Node.js 12+
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: A Vue-CLI project
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Vue-CLI项目
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will divide this recipe into four main sections. The first and second sections
    are dedicated to the creation of the project and the installation of the framework
    and the last two sections are dedicated to the creation of the user registration
    page and the components needed to create it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个教程分为四个主要部分。前两部分专门用于创建项目和安装框架，后两部分专门用于创建用户注册页面和创建所需组件。
- en: Creating the Vue-CLI project
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Vue-CLI项目
- en: 'To use Vuetify with a Vue-CLI project, we need to create a custom Vue-CLI project
    with pre-defined configurations, so that we are able to take full advantage of
    the framework and the styling options it provides:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Vue-CLI项目中使用Vuetify，我们需要创建一个自定义的Vue-CLI项目，并预定义配置，以便充分利用框架和提供的样式选项：
- en: 'We need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)and
    execute the following command:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在终端（macOS或Linux）或命令提示符/PowerShell（Windows）中执行以下命令：
- en: '[PRE37]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'First, Vue-CLI will ask for you to choose a preset; select `Manually select
    features` using the space bar:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，Vue-CLI会要求你选择一个预设；使用空格键选择`手动选择特性`：
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now Vue-CLI will ask for the features, and you will need to select `CSS Pre-processors` as
    an additional feature on top of the default ones:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在Vue-CLI会要求选择特性，你需要选择`CSS预处理器`作为默认特性之外的附加特性：
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here, Vue-CLI will ask which `CSS pre-processor` you want to use; select `Sass/SCSS
    (with node-sass)`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，Vue-CLI会问你想使用哪种`CSS预处理器`；选择`Sass/SCSS（使用node-sass）`：
- en: '[PRE40]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Continue this process by selecting a linter and formatted. In our case, we
    will select the `ESLint + Airbnb` config:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续这个过程，选择一个代码检查工具和格式化工具。在我们的情况下，我们将选择`ESLint + Airbnb`配置：
- en: '[PRE41]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Choose the additional features of the linter (here, `Lint and fix on commit`):'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择代码检查工具的附加特性（这里是`提交时进行代码检查和修复`）：
- en: '[PRE42]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Select where you want to place the linter and formatter configuration files
    (here, `In dedicated config files`):'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你想要放置代码检查工具和格式化工具配置文件的位置（这里是`在专用配置文件中`）：
- en: '[PRE43]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Finally, Vue-CLI will ask you whether you want to save the settings for future
    projects; you will select `N`. After that, Vue-CLI will create a folder and install
    the dependencies for you:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，Vue-CLI会问你是否要保存设置以供将来的项目使用；你会选择`N`。之后，Vue-CLI会为你创建一个文件夹并安装依赖项：
- en: '[PRE44]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Adding Vuetify to the Vue-CLI project
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Vuetify添加到Vue-CLI项目中
- en: 'To use Vuetify in a Vue project, we will use the Vue-CLI plugin installation
    of the framework:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Vue项目中使用Vuetify，我们将使用Vue-CLI插件安装框架：
- en: 'In the folder that you created your Vue-CLI project in, open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows)and execute the following command:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你创建Vue-CLI项目的文件夹中，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），执行以下命令：
- en: '[PRE45]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Vue-CLI will ask whether you want to choose an installation preset. Choose
    the default preset. Then, Vue-CLI will finish the installation of the framework
    on the project:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vue-CLI会问你是否要选择安装预设。选择默认预设。然后，Vue-CLI将完成在项目上安装框架：
- en: '[PRE46]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: After the installation is finished, Vuetify will have configured the files inside
    your project to load the framework. Now you are ready to use it.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，Vuetify将配置项目内的文件以加载框架。现在你可以开始使用它了。
- en: Creating the layout with Vuetify
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Vuetify创建布局
- en: Using Vuetify as the UI framework, we are using the Material Design guide as
    a base, because by using Material Design, we can follow a design guideline to
    create our design structure, which will mean a more appealing structure. You can
    find the Material Design guidelines at [https://material.io/design/introduction#goals](https://material.io/design/introduction#goals).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vuetify作为UI框架，我们使用Material Design指南作为基础，因为通过使用Material Design，我们可以遵循设计指南来创建我们的设计结构，这将意味着更具吸引力的结构。您可以在[https://material.io/design/introduction#goals](https://material.io/design/introduction#goals)找到Material
    Design指南。
- en: Creating the top bar component
  id: totrans-170
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建顶部栏组件
- en: 'In this part, we will create the `top-bar` component that will be used in the
    layout of our page:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建一个`top-bar`组件，该组件将用于我们页面的布局中：
- en: In the `src/components` folder, create a file named `TopBar.vue` and open it.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中，创建一个名为`TopBar.vue`的文件并打开它。
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object, with the `name` property defined as `TopBar`:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<script>`部分，我们将导出一个具有`name`属性定义为`TopBar`的`default` JavaScript对象：
- en: '[PRE47]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Inside the `<template>` section, create a `v-app-bar` component with the `app`,  `dark`,
    and `dense` attributes defined as `true`, and the `color` attribute defined as
    `primary`:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分内，创建一个带有`app`，`dark`和`dense`属性定义为`true`，以及`color`属性定义为`primary`的`v-app-bar`组件：
- en: '[PRE48]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Inside the component, create a `v-app-bar-nav-icon` component with an event
    listener on the `click` event, sending an event `''open-drawer''` when the button
    is clicked:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件内部，创建一个带有`click`事件的事件监听器的`v-app-bar-nav-icon`组件，在按钮被点击时发送一个名为`'open-drawer'`的事件：
- en: '[PRE49]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, as a sibling of the `v-app-bar-nav-icon` component, add a `v-toolbar-title`
    component with the title of the page or application:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，作为`v-app-bar-nav-icon`组件的兄弟，添加一个`v-toolbar-title`组件，其中包含页面或应用程序的标题：
- en: '[PRE50]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Creating the drawer menu component
  id: totrans-181
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建抽屉菜单组件
- en: 'Inside a Material Design application, we have a drawer menu that pops up over
    the page. This menu will be opened when the user clicks on the button we have
    just created in the `TopBar` component:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在Material Design应用程序中，我们有一个弹出在页面上方的抽屉菜单。当用户点击我们刚刚在`TopBar`组件中创建的按钮时，这个菜单将被打开：
- en: In the `src/components` folder, create a file named `DrawerMenu.vue` and open
    it.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中，创建一个名为`DrawerMenu.vue`的文件并打开它。
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object with three properties:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<script>`部分，我们将导出一个具有三个属性的`default` JavaScript对象：
- en: The `name` property, defined as `DrawerMenu`.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`属性，定义为`DrawerMenu`。'
- en: The `props` property, defined as a JavaScript object, with a property called
    `value`. This property will be another JavaScript object, with the `type`, `required`,
    and `default` properties. The `type` property is defined as `Boolean`, the `required`
    property as `true`, and the `default` property as `false`.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`props`属性，定义为一个JavaScript对象，具有一个名为`value`的属性。这个属性将是另一个JavaScript对象，具有`type`，`required`和`default`属性。`type`属性定义为`Boolean`，`required`属性定义为`true`，`default`属性定义为`false`。'
- en: 'The `data` property, as a singleton function returning a JavaScript object.
    This object will have a `menu` property, which we will define as an array of the
    menu items that will be used. The array will contain Javascript objects with the
    `name`, then `link`, and `icon` properties. The first menu item will have `name`
    defined as `Home`, then `link` defined as `*#*`, and `icon` defined as `mdi-home`. The
    second menu item will have `name` defined as `Contact`, then `link` defined as
    `#`, and `icon` defined as `mdi-email`. Finally, the third menu item will have `name`
    defined as `Vuetify`, then `link` defined as `#`, and `icon` defined as `mdi-vuetify`:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`属性，作为返回JavaScript对象的单例函数。该对象将具有一个`menu`属性，我们将其定义为将要使用的菜单项数组。数组将包含具有`name`、`link`和`icon`属性的Javascript对象。第一个菜单项的`name`定义为`Home`，`link`定义为`*#*`，`icon`定义为`mdi-home`。第二个菜单项的`name`定义为`Contact`，`link`定义为`#`，`icon`定义为`mdi-email`。最后，第三个菜单项的`name`定义为`Vuetify`，`link`定义为`#`，`icon`定义为`mdi-vuetify`。'
- en: '[PRE51]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the `<template>` section, create a `v-navigation-drawer` component with
    the `value` attribute as a variable attribute bound to the `value` props, the
    `app` attribute defined as `true`, and the event listener on the `click` event, sending
    an `''input''` event:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，创建一个`v-navigation-drawer`组件，其中`value`属性作为绑定到`value` props的变量属性，`app`属性定义为`true`，并在`click`事件上添加事件监听器，发送一个`'input'`事件：
- en: '[PRE52]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create a `v-list` component with the `dense` attribute defined as `true`. As
    a child element, create a `v-list-item` component and define the following:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`dense`属性定义为`true`的`v-list`组件。作为子元素，创建一个`v-list-item`组件并定义以下内容：
- en: The `v-for` directive iterating over the `menu` items.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-for`指令遍历`menu`项。'
- en: The `key` attribute with `index` of the item menu.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`属性与菜单项的`index`。'
- en: The `link` attribute defined as `true`.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`link`属性定义为`true`。'
- en: Inside `v-list-item`, create `v-list-item-action` with a `VIcon` child, with
    the inner text as `item.icon`.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`v-list-item`内部，创建一个带有`VIcon`子元素的`v-list-item-action`，内部文本为`item.icon`。
- en: 'Create, as a sibling of `v-list-item-action`, a `v-list-item-content` component
    with `v-list-item-title` as a child element, with `item.name` as the inner text:'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`v-list-item-action`的同级位置创建一个`v-list-item-content`组件，其中`v-list-item-title`作为子元素，内部文本为`item.name`：
- en: '[PRE53]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Creating the layout component
  id: totrans-198
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建布局组件
- en: 'To create the layout component, we are going to use all the created components
    and add a slot that will hold the page content:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建布局组件，我们将使用所有创建的组件，并添加一个插槽来容纳页面内容：
- en: In the `src/components` folder, create a new file named `Layout.vue` and open
    it.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中，创建一个名为`Layout.vue`的新文件并打开它。
- en: 'In the `<script>` section of the single file component, import the `top-bar` component
    and the `drawer-menu` component:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<script>`部分，导入`top-bar`组件和`drawer-menu`组件：
- en: '[PRE54]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Then, we will export a `default` JavaScript object, with the `name` property defined
    as `Layout`, then create the `components` property with the imported components.
    Finally, add the `data` property as a singleton function returning a JavaScript
    object, with the `drawer` property with the value defined as `false`:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将导出一个`default` JavaScript对象，其中`name`属性定义为`Layout`，然后创建`components`属性并导入组件。最后，将`data`属性添加为返回JavaScript对象的单例函数，其中`drawer`属性的值定义为`false`：
- en: '[PRE55]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Inside the `<template>` section, create a `v-app` component. As the first child,
    add the `top-bar` component, with the event listener on the `open-drawer` event
    listener, changing the `drawer` data property as the negation of the `drawer` property.
    Then, as a sibling of `top-bar`, create a `drawer-menu` component with the `v-model`
    directive bound to `drawer`. Finally, create a `v-content` component with a child
    `<slot>` element:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分内，创建一个`v-app`组件。作为第一个子元素，添加`top-bar`组件，并在`open-drawer`事件监听器上添加事件监听器，将`drawer`数据属性更改为`drawer`属性的否定。然后，作为`top-bar`的同级，创建一个`drawer-menu`组件，其`v-model`指令绑定到`drawer`。最后，创建一个`v-content`组件，其中包含一个子`<slot>`元素：
- en: '[PRE56]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Creating the user registration form with Vuetify
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Vuetify创建用户注册表单
- en: Now, with the layout component ready, we will create the user registration form.
    Because Vuetify has built-in validation in forms, we will be using that to validate
    some fields in our form.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，布局组件准备好了，我们将创建用户注册表单。因为Vuetify在表单中内置了验证，我们将使用它来验证表单中的一些字段。
- en: Single file component <script> section
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'Here, we will create the `<script>` section of the single file component:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建单文件组件的`<script>`部分：
- en: In the `src` folder, open the `App.vue` file and clear its contents.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中，打开`App.vue`文件并清空其内容。
- en: 'Import the `layout` component:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`layout`组件：
- en: '[PRE57]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then, we will export a `default` JavaScript object, with a `name` property defined
    as `App`, then define the `components` property with the imported component. Define the `computed` and `methods` properties
    as an empty JavaScript object. Then create a `data` property defined as a singleton
    function returning a JavaScript object. In the `data` property, create the following:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将导出一个`default` JavaScript对象，其中`name`属性定义为`App`，然后定义导入组件的`components`属性。将`computed`和`methods`属性定义为空的JavaScript对象。然后创建一个`data`属性，定义为返回JavaScript对象的单例函数。在`data`属性中，创建以下内容：
- en: A `valid` property with the value defined as `false`;
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`valid`属性，其值定义为`false`；
- en: 'A `name`, `username`, `password`, `email`, `phone`, `cellphone`, `address`,
    `zipcode`, and `country` properties defined as empty strings:'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`，`username`，`password`，`email`，`phone`，`cellphone`，`address`，`zipcode`和`country`属性定义为空字符串：'
- en: '[PRE58]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In the `computed` property, create a property called `nameRules`; this property
    is a function that returns an array, with an anonymous function that receives
    a value and returns the verification of the value or the error text. Do the same
    for the `passwordRules` and `emailRules` properties. In the `emailRules` property,
    add another anonymous function to the returned array that checks whether the value
    is a valid email through a regular expression, and if the value is not a valid
    email it returns the error message:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`computed`属性中，创建一个名为`nameRules`的属性；这个属性是一个返回数组的函数，其中包含一个匿名函数，该函数接收一个值并返回该值的验证或错误文本。对`passwordRules`和`emailRules`属性也做同样的操作。在`emailRules`属性中，向返回的数组中添加另一个匿名函数，该函数通过正则表达式检查值是否为有效的电子邮件，如果值不是有效的电子邮件，则返回错误消息：
- en: '[PRE59]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Finally, inside the `methods` property, create a new property named `register` that
    is a function that calls the `$refs.form.validate` function. Also, create another
    property named `cancel` that is another function that calls the `$refs.form.reset`
    function:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`methods`属性内，创建一个名为`register`的新属性，它是一个调用`$refs.form.validate`函数的函数。还创建另一个名为`cancel`的属性，它是另一个调用`$refs.form.reset`函数的函数：
- en: '[PRE60]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Single file component <template> section
  id: totrans-222
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'It''s time to create the `<template>` section of the single file component:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建单文件组件的`<template>`部分的时候。
- en: In the `src` folder, open the `App.vue` file.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中，打开`App.vue`文件。
- en: 'In the `<template>` section, create a `layout` component element, and add a
    `v-container` component as a child with the `fluid` attribute defined as `true`:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，创建一个`layout`组件元素，并添加一个带有`fluid`属性定义为`true`的`v-container`组件作为子元素。
- en: '[PRE61]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Inside the `v-container` component, create a child HTML `h1` element with the
    page title and a sibling `v-subheader` component with the page description:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`v-container`组件内部，创建一个子HTML `h1`元素作为页面标题，以及一个同级的`v-subheader`组件作为页面描述。
- en: '[PRE62]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'After that, create a `v-form` component with the `ref` attribute defined as
    `form` and the `lazy-validation` attribute as `true`. Then, the `v-model` directive
    of the component gets bound to the `valid` variable. Create a child `v-container`
    component with the `fluid` attribute defined as `true`:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，创建一个带有`ref`属性定义为`form`和`lazy-validation`属性定义为`true`的`v-form`组件。然后，该组件的`v-model`指令绑定到`valid`变量。创建一个子`v-container`组件，其中`fluid`属性定义为`true`。
- en: '[PRE63]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Inside the `v-container` component, create a `v-row` component, and then add
    a `v-col` component as a child with the `cols` attribute defined as `12`. Inside
    the `v-col` component, create a `v-card` component with the `outlined` attribute and
    `flat` defined as `true`, and `class` defined as `mx-auto`:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`v-container`组件内部，创建一个`v-row`组件，然后添加一个`v-col`组件作为子元素，其中`cols`属性定义为`12`。在`v-col`组件内部，创建一个带有`outlined`属性和`flat`定义为`true`，以及`class`定义为`mx-auto`的`v-card`组件。
- en: '[PRE64]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'As a child element of the `v-card` component, create a `v-card-title` component
    with the card title, then as a sibling element create a `v-divider` component.
    After that, create a `v-container` element with the `fluid` attribute defined
    as `true`. Inside the `v-container` element, create a child `v-row` component:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为`v-card`组件的子元素，创建一个带有卡片标题的`v-card-title`组件，然后作为同级元素创建一个`v-divider`组件。之后，创建一个带有`fluid`属性定义为`true`的`v-container`元素。在`v-container`元素内部，创建一个子`v-row`组件。
- en: '[PRE65]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Inside the `v-row` component, create a child `v-col` element with the `cols` attribute
    defined as `12`. Then inside the `v-col` component, create `v-text-field` with
    the `v-model` directive bound to the `name` variable, the `rules` variable attribute defined
    as the `nameRules` computed property, the `label` attribute defined as `Name`,
    and finally, the `required` attribute defined as `true`:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`v-row`组件内部，创建一个子`v-col`元素，其中`cols`属性定义为`12`。然后在`v-col`组件内部，创建一个`v-text-field`，其中`v-model`指令绑定到`name`变量，`rules`变量属性定义为`nameRules`计算属性，`label`属性定义为`Name`，最后，`required`属性定义为`true`。
- en: '[PRE66]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'As a sibling of the `v-col` component, create another `v-col` component with
    the `cols` attribute defined as `12`. Then, add the `v-text-field` component as
    a child, with the `v-model` directive bound to the `email` variable, the `rules`
    variable attribute defined as the `emailRules` computed property, the `type` attribute
    as `email`, the `label` attribute as `E-mail`, and finally, the `required` attribute
    defined as `true`:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为`v-col`组件的同级元素，创建另一个`v-col`组件，其中`cols`属性定义为`12`。然后，将`v-text-field`组件作为子元素添加，其中`v-model`指令绑定到`email`变量，`rules`变量属性定义为`emailRules`计算属性，`type`属性为`email`，`label`属性为`E-mail`，最后，`required`属性定义为`true`。
- en: '[PRE67]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Create a `v-col` component as a sibling of the `v-col` component, and define
    the `cols` attribute as `6`. Then, add as a child component the `v-text-field`
    component, with the `v-model` directive bound to the `phone` variable and the
    `label` attribute defined as `Phone`. Do the same for the `Cellphone` input; you
    must change the `v-model` directive bound to the `cellphone` variable and the
    `label` to `Cellphone`*:*
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个作为`v-col`组件同级的`v-col`组件，并将`cols`属性定义为`6`。然后，作为子组件添加`v-text-field`组件，其中`v-model`指令绑定到`phone`变量，`label`属性定义为`Phone`。对于`Cellphone`输入，必须更改`v-model`指令绑定到`cellphone`变量和`label`为`Cellphone`。
- en: '[PRE68]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now we will create the `Address` card, as a sibling of `v-col` in the `v-row`
    component. Create a `v-col` component with the `cols` attribute defined as `12`.
    Inside the `v-col` component, create a `v-card` component with the `outlined` attribute and `flat` defined
    as `true`, and `class` defined as `mx-auto`. As a child element of the `v-card` component,
    create a `v-card-title` component with the card title; then, as a sibling element,
    create a `v-divider` component. After that, create a `v-container` element with
    the `fluid` attribute defined as `true`. Inside the `v-container` element, create
    a child `v-row` component:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建`地址`卡，作为`v-row`组件中`v-col`的同级元素。创建一个`v-col`组件，其中`cols`属性定义为`12`。在`v-col`组件内部，创建一个带有`outlined`属性和`flat`定义为`true`，以及`class`定义为`mx-auto`的`v-card`组件。作为`v-card`组件的子元素，创建一个`v-card-title`组件作为卡片标题；然后，作为同级元素，创建一个`v-divider`组件。之后，创建一个带有`fluid`属性定义为`true`的`v-container`元素。在`v-container`元素内部，创建一个子`v-row`组件：
- en: '[PRE69]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Inside the `v-row` component in the `v-container` component, create a `v-col`
    component with the `cols` attribute defined as `12`. Then, add  `v-text-field`
    as a child component with the `v-model` directive bound to the `address` variable
    and the `label` attribute defined as `Address`:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`v-container`组件中的`v-row`组件内，创建一个`v-col`组件，其中`cols`属性定义为`12`。然后，添加一个`v-text-field`作为子组件，其中`v-model`指令绑定到`address`变量，`label`属性定义为`Address`：
- en: '[PRE70]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'As a sibling element, create a `v-col` component with the `cols` attribute
    defined as `6`. Add a `v-text-field` component as a child. Define the `v-model`
    directive of the `v-text-field` component bound to the `zipcode` variable and
    the `label` attribute defined as `Zipcode`:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为同级元素，创建一个`v-col`组件，其中`cols`属性定义为`6`。添加一个`v-text-field`组件作为子元素。将`v-text-field`组件的`v-model`指令绑定到`zipcode`变量，并将`label`属性定义为`Zipcode`：
- en: '[PRE71]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Then, create a `v-col` component with the `cols` attribute defined as `6`.
    Add a `v-text-field` component as a child with the `v-model` directive bound to
    the `country` variable and the `label` attribute defined as `Country`:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个`v-col`组件，其中`cols`属性定义为`6`。作为子元素添加一个`v-text-field`组件，其中`v-model`指令绑定到`country`变量，`label`属性定义为`Country`：
- en: '[PRE72]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Now we will create the `user Information` card as a sibling of `v-col` in the
    `v-row` component. Create a `v-col` component with the `cols` attribute defined
    as `12`. Inside the `v-col` component, create a `v-card` component with the `outlined` attribute and `flat` defined
    as `true`, and `class` defined as `mx-auto`. As a child element of the `v-card` component,
    create a `v-card-title` component with the card title; then, as a sibling element,
    create a `v-divider` component. After that, create a `v-container` element with
    the `fluid` attribute defined as `true`. Inside the `v-container` element, create
    a child `v-row` component:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建`用户信息`卡作为`v-row`组件中`v-col`的同级元素。创建一个`v-col`组件，其中`cols`属性定义为`12`。在`v-col`组件内部，创建一个带有`outlined`属性和`flat`定义为`true`，以及`class`定义为`mx-auto`的`v-card`组件。作为`v-card`组件的子元素，创建一个`v-card-title`组件作为卡片标题；然后，作为同级元素，创建一个`v-divider`组件。之后，创建一个带有`fluid`属性定义为`true`的`v-container`元素。在`v-container`元素内部，创建一个子`v-row`组件：
- en: '[PRE73]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Inside the `v-row` component in the `v-container` component, create a `v-col` component
    with the `cols` attribute defined as `6`. Then, add  `v-text-field` as a child
    component with the `v-model` directive bound to the `username` variable and the `label` attribute
    defined as `username`:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`v-container`组件中的`v-row`组件内，创建一个`v-col`组件，其中`cols`属性定义为`6`。然后，添加一个`v-text-field`作为子组件，其中`v-model`指令绑定到`username`变量，`label`属性定义为`username`：
- en: '[PRE74]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'As a sibling create a `v-col` component with the `cols` attribute defined as `6`,
    and add a `v-text-field` component as a child with the `v-model` directive bound
    to the `password` variable, the `rules` variable attribute defined as the `passwordRules`
    computed property, and the `label` attribute defined as `Password`:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为兄弟创建一个`v-col`组件，其中`cols`属性定义为`6`，并添加一个`v-text-field`组件作为子级，其中`v-model`指令绑定到`password`变量，`rules`变量属性定义为`passwordRules`计算属性，`label`属性定义为`Password`：
- en: '[PRE75]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now we will create the action buttons. As a sibling of the `v-col` on the top `v-row`
    component, create a `v-col` component with the `cols` attribute defined as `12` and
    the `class` attribute defined as `text-right`. Inside the `v-col` component, create
    a `v-btn` component with the `color` attribute defined as `error`, the `class`
    attribute as `mr-4`, and the `click` event listener attached to the `cancel` method.
    Finally, create a `v-btn` component as a sibling, with the `disabled` variable
    attribute as the negation of the `valid` variable, the `color` attribute as `success`,
    the `class` attribute as `mr-4`, and the  `click` event listener attached to the
    `register` method:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建操作按钮。作为顶部`v-row`组件上的`v-col`的兄弟，创建一个`v-col`组件，其中`cols`属性定义为`12`，`class`属性定义为`text-right`。在`v-col`组件内部，创建一个`v-btn`组件，其中`color`属性定义为`error`，`class`属性为`mr-4`，并将`click`事件侦听器附加到`cancel`方法。最后，创建一个`v-btn`组件作为兄弟，其中`disabled`变量属性为`valid`变量的否定，`color`属性为`success`，`class`属性为`mr-4`，并将`click`事件侦听器附加到`register`方法：
- en: '[PRE76]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: How it works...
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we learned how to create a user registration page with Vuetify
    and Vue-CLI. To create this page, we first needed to create the project using
    the Vue-CLI tool and then add the Vuetify plugin to it, so that the framework
    was available to be used.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们学习了如何使用Vuetify和Vue-CLI创建用户注册页面。要创建此页面，我们首先需要使用Vue-CLI工具创建项目，然后将Vuetify插件添加到其中，以便可以使用该框架。
- en: Then, we created the `top-bar` component, which holds the application title
    and the menu button toggle. To use the menu, we created the `drawer-menu` component
    to hold the navigation items. Finally, we created the `layout` component to hold
    together the `top-bar` and `drawer-menu` components and added a `<slot>` component
    to place the page content.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了`top-bar`组件，其中包含应用程序标题和菜单按钮切换。为了使用菜单，我们创建了`drawer-menu`组件来容纳导航项。最后，我们创建了`layout`组件来将`top-bar`和`drawer-menu`组件组合在一起，并添加了一个`<slot>`组件来放置页面内容。
- en: For the user registration form page, we created three cards that hold the input
    forms, which were bound to the variables on the component. Some of the inputs
    on the form are attached to a set of validation rules that checks for required
    fields and email validation.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户注册表单页面，我们创建了三个包含输入表单的卡片，这些表单与组件上的变量绑定。表单中的一些输入与一组验证规则相关联，用于检查必填字段和电子邮件验证。
- en: Finally, the user registration form is checked to see whether it's valid before
    sending the data to the server.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在将数据发送到服务器之前，将检查用户注册表单是否有效。
- en: 'Here is a screenshot of the final project up and running:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终项目正在运行的屏幕截图：
- en: '![](assets/3a8d48ee-0302-4b60-83f6-e827179bf7bc.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3a8d48ee-0302-4b60-83f6-e827179bf7bc.png)'
- en: See also
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about Vuetify at [https://vuetifyjs.com/en/](https://vuetifyjs.com/en/).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vuetifyjs.com/en/](https://vuetifyjs.com/en/)找到有关Vuetify的更多信息。
- en: You can find more information about Material Design at [https://material.io/](https://material.io/).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://material.io/](https://material.io/)找到有关Material Design的更多信息。
- en: Creating a page, a layout, and a user form with Ant-Design
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ant-Design创建页面、布局和用户表单
- en: The Ant-Design framework was created by the AliBaba group, specifically by the
    tech team behind AliPay and Ant Financial. It's an ecosystem design that is being
    mainly used by Asian tech giants and it has a large presence in the React and
    Vue communities. Focused on the back office UI, the main core of the framework
    is its solutions for custom data inputs and data tables.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Ant-Design框架是由阿里巴巴集团创建的，具体由AliPay和Ant Financial背后的技术团队创建。它是一个生态系统设计，主要被亚洲科技巨头使用，并且在React和Vue社区中占据重要地位。专注于后台UI，框架的主要核心是其解决自定义数据输入和数据表格的解决方案。
- en: Here, we will learn how to create a user registration form using the Ant-Design
    and Vue, by creating a top bar component, a drawer menu, a layout wrapper, and
    a user registration page with a form.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将学习如何使用Ant-Design和Vue创建一个用户注册表单，方法是创建一个顶部栏组件，一个抽屉菜单，一个布局包装器，以及一个带有表单的用户注册页面。
- en: Getting ready
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisites for this recipe are as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程的先决条件如下：
- en: Node.js 12+
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: A Vue-CLI project
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Vue-CLI项目
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this recipe, we will create a user registration form using the Ant-Design
    framework. To do so, we will create a layout wrapper and the components needed
    for the wrapper, and finally, we will create the page that will hold the user
    registration form.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将使用Ant-Design框架创建一个用户注册表单。为此，我们将创建一个布局包装器和所需的包装器组件，最后，我们将创建包含用户注册表单的页面。
- en: Creating the Vue-CLI project
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Vue-CLI项目
- en: 'We need to create a Vue-CLI project to be able to install the Ant-Design plugin
    and start developing the user registration form:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个Vue-CLI项目，以便安装Ant-Design插件并开始开发用户注册表单：
- en: 'We need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE77]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'First, Vue-CLI will ask for you to choose a preset; select `Manually select
    features` using the space bar:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，Vue-CLI会要求您选择一个预设；使用空格键选择`手动选择功能`：
- en: '[PRE78]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Now Vue-CLI will ask for the features, and you will need to select `CSS Pre-processors` as
    an additional feature on top of the default ones:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在Vue-CLI将要求选择功能，您需要选择`CSS预处理器`作为默认功能的附加功能：
- en: '[PRE79]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Here, Vue-CLI will ask which `CSS pre-processor` you want to use; select `Less`:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，Vue-CLI将询问您要使用哪种`CSS预处理器`；选择`Less`：
- en: '[PRE80]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Continue this process by selecting a linter and formatted. In our case, we
    will select `ESLint + Airbnb` config:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择一个linter和格式化程序来继续这个过程。在我们的情况下，我们将选择`ESLint + Airbnb`配置：
- en: '[PRE81]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Choose the additional features of the linter (here, `Lint on save`):'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择linter的附加功能（这里，`保存时进行lint`）：
- en: '[PRE82]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Select where you want to place the linter and formatter configuration files
    (here, `In dedicated config files`):'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您想要放置的linter和格式化程序配置文件的位置（这里，`在专用配置文件中`）：
- en: '[PRE83]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Finally, the CLI will ask you whether you want to save the settings for future
    projects; you should select `N`. After that, Vue-CLI will create a folder and
    install the dependencies for you:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，CLI会询问您是否要保存未来项目的设置；您应该选择`N`。之后，Vue-CLI将为您创建一个文件夹并安装依赖项：
- en: '[PRE84]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Adding Ant-Design to the Vue-CLI project
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Ant-Design添加到Vue-CLI项目
- en: 'To add the Ant-Design framework to a Vue-CLI project, we need to use the Vue-CLI
    plugin to install the framework as a project dependency and have it available
    in the global scope of the application:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 将Ant-Design框架添加到Vue-CLI项目中，我们需要使用Vue-CLI插件将框架安装为项目依赖项，并使其在应用程序的全局范围内可用：
- en: 'In the folder that you created your Vue-CLI project in, open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您创建Vue-CLI项目的文件夹中，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE85]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Vue-CLI will ask you how the import of the Ant-Design component should occur;
    we will select the `Fully import` option:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vue-CLI将询问您如何导入Ant-Design组件；我们将选择`Fully import`选项：
- en: '[PRE86]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Vue-CLI will ask you whether you want to overwrite the Ant-Design `LESS` variables;
    we will choose `N`:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vue-CLI将询问您是否要覆盖Ant-Design的`LESS`变量；我们将选择`N`：
- en: '[PRE87]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Finally, Vue-CLI will ask about the main language Ant-Design will use in the
    project; we will select `en_US`:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，Vue-CLI将询问项目中Ant-Design将使用的主要语言；我们将选择`en_US`：
- en: '[PRE88]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Creating the layout with Ant-Design
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Ant-Design创建布局
- en: To be able to create a user registration form, we will create a base layout
    that will wrap the page content and the form. Here, we will create the `top-bar`
    component, the `drawer-menu` component, and the `layout` wrapper.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够创建用户注册表单，我们将创建一个包装页面内容和表单的基本布局。在这里，我们将创建`top-bar`组件，`drawer-menu`组件和`layout`包装器。
- en: Creating the top-bar component
  id: totrans-309
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建顶部栏组件
- en: 'In the `layout` wrapper, we will have a `top-bar` component that will hold
    the breadcrumbs for where the user currently is. Now we will create the `top-bar`
    component and make it available for the layout:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在`layout`包装器中，我们将有一个`top-bar`组件，用于保存用户当前位置的面包屑。现在我们将创建`top-bar`组件并使其可用于布局：
- en: In the `src/components` folder, create a new file called `TopBar.vue` and open
    it.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中，创建一个名为`TopBar.vue`的新文件并打开它。
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object, with a `name` property defined as `TopBar`:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<script>`部分，我们将导出一个带有`name`属性定义为`TopBar`的`default` JavaScript对象：
- en: '[PRE89]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'In the `<style>` section of the single file component, we will make the `<style>`
    section `scoped` and create a class named `header-bread`. Now, `background-color` will
    be defined as `#f0f2f5` with a class named `bread-menu` with the margin defined
    as `16px 0`:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<style>`部分，我们将使`<style>`部分为`scoped`，并创建一个名为`header-bread`的类。现在，`background-color`将被定义为`#f0f2f5`，带有一个名为`bread-menu`的类，边距定义为`16px
    0`：
- en: '[PRE90]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'In the `<template>` section of the single file component, we will create an
    `a-layout-component` component with the `class` attribute defined as `header-bread`.
    Also, add an `a-breadcrumb` component as a child element with the `class` attribute
    as `bread-menu`:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<template>`部分，我们将创建一个`a-layout-component`组件，`class`属性定义为`header-bread`。还要添加一个`a-breadcrumb`组件作为子元素，`class`属性为`bread-menu`：
- en: '[PRE91]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'As a child of the `a-breadcrumb` component, create two `a-breadcrumb-item`
    components and add to each the directions for the user''s location. In our case,
    the first one will be `user` and the second `Registration Form`:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为`a-breadcrumb`组件的子组件，创建两个`a-breadcrumb-item`组件，并为每个添加用户位置的方向。在我们的情况下，第一个将是`user`，第二个将是`Registration
    Form`：
- en: '[PRE92]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Creating the drawer menu
  id: totrans-320
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建抽屉菜单
- en: 'In the layout design, we will have a drawer menu component as a navigation
    menu for the user. Here we will create the `Drawer` component:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局设计中，我们将有一个抽屉菜单组件作为用户的导航菜单。在这里，我们将创建`Drawer`组件：
- en: In the `src/components` folder, create a file named `Drawer.vue` and open it.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中，创建一个名为`Drawer.vue`的文件并打开它。
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object with two properties. The `name` property, defined as `Drawer`, and the `data` property,
    as a `singleton` function returning a JavaScript object. In the `data` property,
    create the following:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<script>`部分，我们将导出一个带有两个属性的`default` JavaScript对象。`name`属性定义为`Drawer`，`data`属性定义为返回JavaScript对象的`singleton`函数。在`data`属性中，创建以下内容：
- en: A `drawer` property defined as `false`.
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`drawer`属性，定义为`false`。
- en: 'A `menu` property, which we will define as an array of the menu items that
    will be used. The menu array will have three JavaScript objects with the `name` and
    `icon` properties. This array will have:'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`menu`属性，我们将其定义为将要使用的菜单项数组。菜单数组将包含三个JavaScript对象，具有`name`和`icon`属性。这个数组将包括：
- en: A JavaScript object with the properties `name` defined as `Home` and `icon` defined
    as `home`
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个JavaScript对象，属性`name`定义为`Home`，`icon`定义为`home`
- en: A JavaScript object with the properties `name` defined as `Ant Design Vue` and `icon` defined
    as `ant-design`
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个JavaScript对象，属性`name`定义为`Ant Design Vue`，`icon`定义为`ant-design`
- en: 'A JavaScript object with the properties `name` defined as `Contact` and `icon` defined
    as `mail`:'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个JavaScript对象，属性`name`定义为`Contact`，`icon`定义为`mail`：
- en: '[PRE93]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'In the `<template>` section of the single file component, create an `a-layout-sider`
    component, with the `v-model` directive bound to the `drawer` variable and the
    `collapsible` attribute defined as `true`. As a child, create a `a-menu` component
    with the `default-selected-keys` variable attribute defined as `[''1'']`, the
    `theme` attribute defined as `dark`, and the `mode` attribute as `inline`:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<template>`部分，创建一个`a-layout-sider`组件，`v-model`指令绑定到`drawer`变量，`collapsible`属性定义为`true`。作为子组件，创建一个`a-menu`组件，`default-selected-keys`变量属性定义为`['1']`，`theme`属性定义为`dark`，`mode`属性定义为`inline`：
- en: '[PRE94]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Finally, inside the `a-menu` component, create an `a-menu-item` component,
    with the `v-for` directive iterating over the `menu` variable, and create the `item`
    and `index` temporary variables. Then, define the `key` variable attribute as
    `index`. Create a child `AIcon` component with the `type` variable attribute as
    `item.icon` with a sibling `span` HTML element and the content as `item.name`:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`a-menu`组件内部，创建一个`a-menu-item`组件，使用`v-for`指令迭代`menu`变量，并创建`item`和`index`临时变量。然后，将`key`变量属性定义为`index`。创建一个子`AIcon`组件，`type`变量属性定义为`item.icon`，并创建一个兄弟`span`
    HTML元素，内容为`item.name`：
- en: '[PRE95]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Creating the layout component
  id: totrans-334
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建布局组件
- en: 'Here, we will create the `layout` component. This component will join together
    the `top-bar` component and the `Drawer` menu component to make a wrapper for
    the user registration page:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建`layout`组件。这个组件将把`top-bar`组件和`Drawer`菜单组件连接起来，作为用户注册页面的包装器：
- en: In the `src/components` folder, create a new file named `Layout.vue` and open
    it.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中，创建一个名为`Layout.vue`的新文件并打开它。
- en: 'In the `<script>` section of the single file component, import the `top-bar` component
    and the `drawer-menu` component:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件的`<script>`部分，导入`top-bar`组件和`drawer-menu`组件：
- en: '[PRE96]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Then, we will export a `default` JavaScript object, with a `name` property,
    defined as `layout`*.* Then define the `components` property with the imported
    components.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将导出一个`default`的JavaScript对象，带有一个`name`属性，定义为`layout`。然后定义`components`属性，包括导入的组件。
- en: '[PRE97]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'In the `<template>` section of the single file component, create an `a-layout`
    component with the `style` attribute defined as `min-height: 100vh`. Then, add
    the `Drawer` component as a child. As a sibling of the `drawer` component, create
    an `a-layout` component:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在单文件组件的`<template>`部分，创建一个`a-layout`组件，`style`属性定义为`min-height: 100vh`。然后，将`Drawer`组件作为子组件添加。作为`drawer`组件的兄弟，创建一个`a-layout`组件：'
- en: '[PRE98]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'To the `a-layout` component, add the `top-bar` component and a sibling `a-layout-content`
    component with the `style` attribute defined as `margin: 0 16px`. As a child of
    that component, create a `div` HTML element with the `style` attribute defined
    as `padding: 24px; background: #fff; min-height: auto;`, and add a `slot` placeholder.
    Finally, create an `a-layout-footer` component with the `style` attribute defined
    as `text-align:center;` with the footer text of the page:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '向`a-layout`组件添加`top-bar`组件和一个兄弟`a-layout-content`组件，其中`style`属性定义为`margin:
    0 16px`。作为该组件的子元素，创建一个`div` HTML元素，其中`style`属性定义为`padding: 24px; background: #fff;
    min-height: auto;`，并添加一个`slot`占位符。最后，创建一个`a-layout-footer`组件，其中`style`属性定义为`text-align:center;`，并添加页面的页脚文本：'
- en: '[PRE99]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Creating the user registration form with Ant-Design
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Ant-Design创建用户注册表单
- en: Now we will create the user registration page and form that will be placed inside
    the layout that was created in the preceding steps.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建用户注册页面和表单，该表单将放在前面步骤中创建的布局中。
- en: Single file component <script> section
  id: totrans-347
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'Here we will create the `<script>` section of the single file component:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建单文件组件的`<script>`部分：
- en: In the `src` folder, open the `App.vue` file and clear its contents.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中，打开`App.vue`文件并清空其内容。
- en: 'Import the `layout` component:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`layout`组件：
- en: '[PRE100]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Then, we will export a `default` JavaScript object, with the `name` property defined
    as `App`, define the `components` property with the imported component, and finally
    define the `data` property as a singleton function returning a JavaScript object.
    In the `data` property, create the following:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将导出一个`default`JavaScript对象，其中`name`属性定义为`App`，定义导入组件的`components`属性，并最后将`data`属性定义为返回JavaScript对象的单例函数。在`data`属性中，创建以下内容：
- en: A `labelCol` property defined as a JavaScript object, with the `span` property and
    the value `4`.
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`labelCol`属性，定义为JavaScript对象，其中`span`属性和值为`4`。
- en: A `wrapperCol` property defined as a JavaScript object, with the `span` property and
    the value `14`.
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`wrapperCol`属性，定义为JavaScript对象，其中`span`属性和值为`14`。
- en: 'A `form` property defined as a JavaScript object, with the `name`, `username`,
    `password`, `email`, `phone`, `cellphone`, `address`, `zipcode`, and `country`
    properties all defined as empty strings:'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`form`属性，定义为JavaScript对象，其中`name`，`username`，`password`，`email`，`phone`，`cellphone`，`address`，`zipcode`和`country`属性都定义为空字符串：
- en: '[PRE101]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Single file component <template> section
  id: totrans-357
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'It''s time to create the `<template>` section of the single file component:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建单文件组件的`<template>`部分了：
- en: In the `src` folder, open the `App.vue` file.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中，打开`App.vue`文件。
- en: 'In the `<template>` section, create a `layout` component element and add an `a-form-model` component as
    a child with the `model` variable attribute bound to `form`, the `label-col` variable
    attribute bound to `labelCol`, and the `wrapper-col` variable attribute bound
    to `wrapperCol`:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，创建一个`layout`组件元素，并添加一个`a-form-model`组件作为子元素，其中`model`变量属性绑定到`form`，`label-col`变量属性绑定到`labelCol`，`wrapper-col`变量属性绑定到`wrapperCol`：
- en: '[PRE102]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Then, as a sibling of the `layout` component, create an `h1` HTML element with
    the page title `User Registration`, and a `p` HTML element with the `Main user
    registration form` page subtitle. Then, create an `a-card` element with the `title`
    attribute defined as `Personal Information`:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，作为`layout`组件的兄弟组件，创建一个`h1` HTML元素，页面标题为`用户注册`，以及一个`p` HTML元素，页面副标题为`主用户注册表单`。然后，创建一个`a-card`元素，其中`title`属性定义为`个人信息`：
- en: '[PRE103]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'In the `a-card` component, create an `a-form-model-item` component as a child
    element with the `label` attribute defined as `Name`, and add a child `a-input`
    component with the `v-model` directive bound to the `form.name` variable:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`a-card`组件中，创建一个`a-form-model-item`组件作为子元素，其中`label`属性定义为`姓名`，并添加一个子`a-input`组件，其中`v-model`指令绑定到`form.name`变量：
- en: '[PRE104]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Next, as a sibling, create an `a-form-model-item` component with the `label` attribute defined
    as `Email` and add a child `a-input` component with the `v-model` directive bound
    to the `form.email` variable and the `type` attribute defined as `email`:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，作为兄弟元素，创建一个`a-form-model-item`组件，其中`label`属性定义为`电子邮件`，并添加一个子`a-input`组件，其中`v-model`指令绑定到`form.email`变量，`type`属性定义为`email`：
- en: '[PRE105]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Create an element an `a-form-model-item` component with the `label` attribute defined
    as `Phone`, and add a child `a-input` component with the `v-model` directive bound
    to the `form.phone` variable:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`a-form-model-item`组件，其中`label`属性定义为`电话`，并添加一个子`a-input`组件，其中`v-model`指令绑定到`form.phone`变量：
- en: '[PRE106]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Create an `a-form-model-item` component with the `label` attribute defined
    as `Cellphone`, and add a child `a-input` component with the `v-model` directive
    bound to the `form.cellphone` variable:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`a-form-model-item`组件，其中`label`属性定义为`手机号码`，并添加一个子`a-input`组件，其中`v-model`指令绑定到`form.cellphone`变量：
- en: '[PRE107]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'As a sibling of the `a-card` component, create an `a-card` component with the
    `title` attribute defined as `Address` and the `style` attribute as `margin-top:
    16px;`. Then, add a child `a-form-model-item` component with the `label` attribute defined
    as `Address`, and add a child `a-input` component with the `v-model` directive
    bound to the `form.address` variable:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '作为`a-card`组件的兄弟元素，创建一个`a-card`组件，其中`title`属性定义为`地址`，`style`属性定义为`margin-top:
    16px;`。然后，添加一个子`a-form-model-item`组件，其中`label`属性定义为`地址`，并添加一个子`a-input`组件，其中`v-model`指令绑定到`form.address`变量。'
- en: '[PRE108]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Next, as a sibling of the `a-card` component, create an `a-form-model-item` component
    with the `label` attribute defined as `Zipcode`, and add a child `a-input` component
    with the `v-model` directive bound to the `form.zipcode` variable:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，作为`a-card`组件的兄弟元素，创建一个`a-form-model-item`组件，其中`label`属性定义为`邮政编码`，并添加一个子`a-input`组件，其中`v-model`指令绑定到`form.zipcode`变量：
- en: '[PRE109]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Create an `a-form-model-item` component with the `label` attribute defined
    as `Country`, and add a child `a-input` component with the `v-model` directive
    bound to the `form.country` variable:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`a-form-model-item`组件，其中`label`属性定义为`国家`，并添加一个子`a-input`组件，其中`v-model`指令绑定到`form.country`变量：
- en: '[PRE110]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'As a sibling of the `a-card` component, create an `a-card` component with the `title` attribute
    defined as `User Information` and the `style` attribute as `margin-top: 16px;`.
    Then, add a child `a-form-model-item` component with the `label` attribute defined
    as `username`, and add a child `a-input` component with the `v-model` directive
    bound to the `form.username` variable:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '作为`a-card`组件的兄弟元素，创建一个`a-card`组件，其中`title`属性定义为`用户信息`，`style`属性定义为`margin-top:
    16px;`。然后，添加一个子`a-form-model-item`组件，其中`label`属性定义为`用户名`，并添加一个子`a-input`组件，其中`v-model`指令绑定到`form.username`变量：'
- en: '[PRE111]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Create an `a-form-model-item` component with the `label` attribute defined
    as `Password`, and add a child `a-input-password` component with the `v-model` directive
    bound to the `form.password` variable, the `visibility-toggle` attribute defined
    as `true`, and the `type` attribute defined as `password`:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`a-form-model-item`组件，其中`label`属性定义为`密码`，并添加一个子`a-input-password`组件，其中`v-model`指令绑定到`form.password`变量，`visibility-toggle`属性定义为`true`，`type`属性定义为`password`：
- en: '[PRE112]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Finally, as a sibling of the `a-card` component, create `a-form-model-item` with
    the `wrapper-col` variable attribute defined as a JavaScript object, `{span: 14,
    offset: 4}`. Then, add a child `a-button` with `type` defined as `primary` with
    the text `Create` and another `a-button` with the `style` attribute defined as
    `margin-left: 10px;` and the text `Cancel`:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '最后，作为`a-card`组件的一个兄弟组件，创建`a-form-model-item`，并将`wrapper-col`变量属性定义为JavaScript对象`{span:
    14, offset: 4}`。然后，添加一个子`a-button`，其中`type`定义为`primary`，文本为`Create`，另一个`a-button`，其中`style`属性定义为`margin-left:
    10px;`，文本为`Cancel`：'
- en: '[PRE113]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: How it works...
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we learned how to create a user registration page with Ant-Design
    and Vue-CLI. To create this page, we first needed to create a project using Vue-CLI
    and add the Ant-Design of Vue plugin to it, so that the framework was available
    to be used.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们学习了如何使用Ant-Design和Vue-CLI创建用户注册页面。为了创建这个页面，我们首先需要使用Vue-CLI创建一个项目，并向其中添加Ant-Design
    of Vue插件，以便可以使用该框架。
- en: Then, we created the `top-bar` component, which holds the navigation breadcrumbs.
    For user navigation, we created a custom `Drawer` component that has an inline
    toggle button at the bottom. Finally, we created the `layout` component to hold
    together both the components and we added a `<slot>` component to place the page
    content.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了`top-bar`组件，用于保存导航面包屑。为了用户导航，我们创建了一个自定义的`Drawer`组件，底部带有内联切换按钮。最后，我们创建了`layout`组件，将这两个组件放在一起，并添加了一个`<slot>`组件来放置页面内容。
- en: Finally, we created the user registration form page, with three cards that hold
    the input forms that are bound to the variables on the component.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了用户注册表单页面，其中包含三个卡片，用于保存与组件上的变量绑定的输入表单。
- en: 'Here is a screenshot of the final project up and running:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终项目正在运行的屏幕截图：
- en: '![](assets/b9e35ec5-200d-4c1a-9ae4-feed1cb1bb07.png)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b9e35ec5-200d-4c1a-9ae4-feed1cb1bb07.png)'
- en: See also
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about Ant-Design and Vue at [https://vue.ant.design/](https://vue.ant.design/).
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://vue.ant.design/](https://vue.ant.design/)找到有关Ant-Design和Vue的更多信息。
