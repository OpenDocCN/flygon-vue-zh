- en: Managing Routes with vue-router
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 使用vue-router管理路由
- en: One of the main parts of your application is router management. Here, it is
    possible to bring together infinite component combinations in a single place.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序的主要部分之一是路由管理。在这里，可以将无限的组件组合在一个地方。
- en: A router is capable of coordinating component rendering and dictating where
    the application should be, depending on the URL. There are many ways to increase
    the customization of `vue-router`. You can add route guards to check whether specific
    routes are navigatable by access level or fetch data before entering the route
    to manage errors on your application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 路由能够协调组件的渲染，并根据URL指示应用程序应该在哪里。有许多方法可以增加`vue-router`的定制化。您可以添加路由守卫来检查特定路由是否可由访问级别导航，或在进入路由之前获取数据以管理应用程序中的错误。
- en: In this chapter, you will learn how to create application routes, dynamic routes,
    alias and credited routes, and nested router views. We'll also look at how to
    manage errors, create router guards, and lazy load your pages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何创建应用程序路由、动态路由、别名和信任路由，以及嵌套路由视图。我们还将看看如何管理错误，创建路由守卫，并延迟加载您的页面。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下教程：
- en: Creating a simple route
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的路由
- en: Creating a programmatic navigation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个程序化导航
- en: Creating a dynamic router path
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个动态路由路径
- en: Creating a route alias
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个路由别名
- en: Creating a route redirect
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个路由重定向
- en: Creating a nested router view
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个嵌套路由视图
- en: Creating a 404 error page
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个404错误页面
- en: Creating an authentication middleware
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个身份验证中间件
- en: Lazy loading your pages asynchronously
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步延迟加载您的页面
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using **Node.js** and **Vue-CLI.**
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用**Node.js**和**Vue-CLI**。
- en: 'Attention Windows users: you need to install an npm package called `windows-build-tools`
    to be able to install the following required packages. To do so, open the PowerShell
    as an administrator and execute the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意Windows用户：您需要安装一个名为`windows-build-tools`的npm包，以便能够安装以下所需的包。为此，请以管理员身份打开PowerShell并执行以下命令：
- en: '`> npm install -g windows-build-tools`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`'
- en: 'To install Vue-CLI, you need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Vue-CLI，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a simple route
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的路由
- en: In your application, you can create an infinite combination of routes that can
    lead to any number of pages and components.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序中，您可以创建无限组合的路由，可以导向任意数量的页面和组件。
- en: '`vue-router` is the maintainer of this combination. We need to use this to
    set instructions on how to create paths and lay down routes for our visitors.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue-router`是这个组合的维护者。我们需要使用它来设置如何创建路径并为我们的访问者建立路由的指令。'
- en: In this recipe, we will learn how to create an initial route that will lead
    to a different component.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何创建一个初始路由，该路由将引导到不同的组件。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程的先决条件如下：
- en: Node.js 12+
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To create a Vue-CLI project, follow these steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个Vue-CLI项目，按照以下步骤进行：
- en: 'We need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将询问一些问题，这些问题将有助于创建项目。您可以使用箭头键导航，*Enter*键继续，*Spacebar*选择选项。
- en: 'There are two methods for starting a new project. The default method is a basic
    Babel and ESLint project without any plugins or configuration, and the `Manually`
    mode, where you can select more modes, plugins, linters, and options. We will
    go for `Manually`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两种方法可以启动新项目。默认方法是基本的Babel和ESLint项目，没有任何插件或配置，还有`手动`模式，您可以选择更多模式、插件、代码检查器和选项。我们将选择`手动`：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we are asked about the features that we will want on the project. Those
    features are some Vue plugins such as Vuex or Vue Router (Vue-Router), testers,
    linters, and more. Select `Babel`, `Router`, and `Linter / Formatter`**:**
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们被问及项目中想要的功能。这些功能包括一些Vue插件，如Vuex或Vue Router（Vue-Router）、测试器、代码检查器等。选择`Babel`、`Router`和`Linter
    / Formatter`**：**
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now Vue-CLI will ask if you want to use the history mode on the route management.
    We will choose `Y` (yes):'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在Vue-CLI会询问您是否要在路由管理中使用历史模式。我们会选择`Y`（是）：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Continue this process by selecting a linter and formatted. In our case, we
    will select `ESLint + Airbnb config`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续此过程，选择一个代码检查器和格式化程序。在我们的情况下，我们将选择`ESLint + Airbnb config`：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied on save or fixed on commit:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置完代码检查规则后，我们需要定义它们何时应用于您的代码。它们可以在保存时应用，也可以在提交时修复：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is in
    a dedicated file, but it is also possible to store them in the `package.json`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义了所有这些插件、代码检查器和处理器之后，我们需要选择设置和配置存储的位置。最佳存储位置是专用文件，但也可以将它们存储在`package.json`中：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you can choose whether you want to make this selection a preset for future
    projects, so you don''t need to reselect everything again:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以选择是否要将此选择作为将来项目的预设，这样您就不需要再次重新选择所有内容：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Our recipe will be divided into five parts:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的步骤将分为五个部分：
- en: Creating the `NavigationBar` component
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`NavigationBar`组件
- en: Creating the contact page
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建联系页面
- en: Creating the about page
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建关于页面
- en: Changing the application's main component
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改应用程序的主要组件
- en: Creating the routes
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建路由
- en: Let's get started.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Creating the NavigationBar component
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建NavigationBar组件
- en: Now we are going to create the `NavigationBar` component that will be used in
    our application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建将在我们的应用程序中使用的`NavigationBar`组件。
- en: Single file component <script> section
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建单文件组件的<script>部分。按照这些说明正确创建组件：
- en: Create a `navigationBar.vue` file in the `src/components` folder and open it.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹中创建一个`navigationBar.vue`文件并打开它。
- en: 'Create a default `export` object of the component, with the Vue property `name`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建组件的默认`export`对象，具有Vue属性`name`：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Single file component <template> section
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建单文件组件的<template>部分。按照这些说明正确创建组件：
- en: 'Create a `div` HTML element with the `id` attribute defined as `"nav"`, and
    inside of it, create three `RouterLink` components. Those components will point
    to the `Home`, `About`, and `Contact` routes. In the `RouterLink` component, we
    will add a `to` attribute that will be defined as the route for each component,
    respectively, and define the text content as the name of the menu:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建一个带有`id`属性定义为`"nav"`的`div` HTML元素，并在其中创建三个`RouterLink`组件。这些组件将指向`Home`、`About`和`Contact`路由。在`RouterLink`组件中，我们将添加一个`to`属性，分别定义为每个组件的路由，并将文本内容定义为菜单的名称： '
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating the contact page
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建联系页面
- en: We need to make sure the contact page gets rendered when the user enters the
    `/contact` URL. To do so, we need to create a single file component to be used
    as the contact page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保当用户输入`/contact` URL时，联系页面会被渲染。为此，我们需要创建一个单文件组件，用作联系页面。
- en: Single file component <script> section
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件 <script> 部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照以下说明正确创建组件：
- en: In the `src/views` folder, create a new file called `contact.vue` and open it.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/views`文件夹中，创建一个名为`contact.vue`的新文件并打开它。
- en: 'Create a default `export` object of the component, with the Vue property `name`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建组件的默认`export`对象，其中包含Vue属性`name`：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Single file component <template> section
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件 <template> 部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照以下说明正确创建组件：
- en: Create a `div` HTML element, with the `class` attribute defined as `"contact"`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`div` HTML元素，其中`class`属性定义为`"contact"`。
- en: 'Inside of the `<h1>` HTML element, add a text context displaying the current
    page:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<h1>`HTML元素内部，添加一个显示当前页面的文本内容：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating the about page
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建关于页面
- en: We need to make the contact page be rendered when the user enters the `/about` URL.
    In the following subsections, we will create the Single File component for the
    about page.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保当用户输入`/about` URL时，关于页面会被渲染。在接下来的小节中，我们将为关于页面创建单文件组件。
- en: Single file component <script> section
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件 <script> 部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照以下说明正确创建组件：
- en: In the `src/views` folder, create a new file called `About.vue` and open it.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/views`文件夹中，创建一个名为`About.vue`的新文件并打开它。
- en: 'Create a default export object of the component, with the Vue property `name`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建组件的默认导出对象，其中包含Vue属性`name`：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Single file component <template> section
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件 <template> 部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照以下说明正确创建组件：
- en: Create a `div` HTML element with the `class` attribute defined as `"about"` .
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`div` HTML元素，其中`class`属性定义为`"about"`。
- en: 'Inside of it, place an `<h1>` element with a text context displaying the current
    page:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中，放置一个带有显示当前页面文本内容的`<h1>`元素：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Changing the application's main component
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改应用程序的主要组件
- en: After creating the pages and the navigation bar, we need to change the application's
    main component to be able to render the routes and have the navigation bar at
    the top.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 创建页面和导航栏后，我们需要更改应用程序的主要组件，以便能够渲染路由并在顶部拥有导航栏。
- en: Single file component <script> section
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件 <script> 部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们将创建单文件组件的`<script>`部分。按照以下说明正确创建组件：
- en: Open `App.vue` in the `src` folder.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`App.vue`。
- en: 'Import the `NavigationBar` component:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`NavigationBar`组件：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the Vue `components` property, declare the imported `NavigationBar`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`components`属性中，声明导入的`NavigationBar`：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Single file component <template> section
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<template>`部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Inside the `div` HTML element, add the `NavigationBar` component and the `RouterView`
    component:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们将创建单文件组件的`<template>`部分。在`div` HTML元素内，添加`NavigationBar`组件和`RouterView`组件：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Creating the routes
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建路由
- en: 'Now we need to make the routes available in the application. To do so, first,
    we need to declare the routes and the components that the routes will render.
    Follow these steps to create your Vue application router correctly:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在应用程序中使路由可用。为此，首先需要声明路由和路由将呈现的组件。按照以下步骤正确创建Vue应用程序路由：
- en: In the `src/router` folder, open the `index.js` file.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中，打开`index.js`文件。
- en: 'Import the `Contact` component page:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Contact`组件页面：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the `routes` array, we need to create a new `route` object. This object
    will have the `path` property defined as `''/contact''`, `name` defined as `''contact''`,
    and `component` pointing to the imported `Contact` component:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes`数组中，我们需要创建一个新的`route`对象。该对象将具有`path`属性定义为`'/contact'`，`name`定义为`'contact'`，并且`component`指向导入的`Contact`组件：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here is your component rendered and running:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的地方：
- en: '![](assets/62dcc997-24fa-40f8-b29c-13cd4caca6cd.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62dcc997-24fa-40f8-b29c-13cd4caca6cd.png)'
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When `vue-router` is added to Vue as a plugin, it starts to watch for changes
    on `window.location.pathname`, and other URL properties, to check the weight of
    the current URL on the browser against the list of URLs on your router configurations.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当将`vue-router`添加到Vue作为插件时，它开始监视`window.location.pathname`和其他URL属性的更改，以检查当前URL在浏览器上的权重与路由配置中的URL列表的匹配情况。
- en: In this particular case, we are using a direct URL and a non-dynamic URL. Because
    of that, the `vue-router` plugin only needs to check direct matches of the URL
    paths and doesn't need to weigh the possible matches against a regex validator.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用直接URL和非动态URL。因此，`vue-router`插件只需要检查URL路径的直接匹配，而不需要将可能的匹配与正则表达式验证器进行比较。
- en: After a URL is matched, the `router-view` component acts as a **dynamic component**
    and renders the component we defined on the `vue-router` configuration.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配URL后，`router-view`组件充当**动态组件**，并呈现我们在`vue-router`配置中定义的组件。
- en: See also
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `vue-router` at [https://router.vuejs.org/.](https://router.vuejs.org/)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/.](https://router.vuejs.org/)找到有关`vue-router`的更多信息。
- en: You can find more information about Vue CLI at [https://cli.vuejs.org/.](https://cli.vuejs.org/)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://cli.vuejs.org/.](https://cli.vuejs.org/)找到有关Vue CLI的更多信息。
- en: Creating a programmatic navigation
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建程序化导航
- en: When using `vue-router`, it is also possible to change the current route of
    the application through function execution, without the need for special `vue-router`
    components for creating links.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`vue-router`时，还可以通过函数执行来更改应用程序的当前路由，而无需特殊的`vue-router`组件来创建链接。
- en: Using programmatic navigation, you can make sure all the route redirections
    can be executed anywhere in your code. Using this method enables the usage of
    special route directions, such as passing parameters and navigation with the route
    name.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用程序化导航，您可以确保所有路由重定向可以在代码的任何位置执行。使用此方法可以使用特殊的路由方向，例如传递参数和使用路由名称进行导航。
- en: In this recipe, we will learn how to execute a programmatic navigation function,
    using the extra possibilities it provides.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何执行程序化导航函数，以及它提供的额外可能性。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@vue/cli'
- en: '`@vue/cli-service-global`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we can use the Vue project with Vue-CLI that we created in
    the '*Creating a simple route*'recipe, or we can start a new one.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们可以使用在“*创建简单路由*”中创建的Vue项目与Vue-CLI，或者我们可以开始一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Choose the manual features and add the `Router` as a needed feature, as indicated
    in the '*How to do it...*' section in the '*Creating a simple route*' recipe.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能并将`Router`作为所需功能添加，如“*如何做...*”部分和“*创建简单路由*”食谱中所示。
- en: 'Our recipe will be divided into two parts:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的食谱将分为两部分：
- en: Changing the application's main component
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改应用程序的主要组件
- en: Changing the contact view
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改联系视图
- en: Let's get started.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Changing the application's main component
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改应用程序的主要组件
- en: We will start with the `App.vue` file. We will add a programmatic navigation
    function to be executed after a timeout, which will be added to the component
    life cycle hook.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`App.vue`文件开始。我们将添加一个在超时后执行的程序化导航函数，该函数将添加到组件生命周期钩子中。
- en: Single file component <script> section
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们将创建单文件组件的`<script>`部分。按照以下说明正确创建组件：
- en: Open `App.vue` in the `src` folder.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`App.vue`。
- en: 'Add a `mounted` property:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`mounted`属性：
- en: '[PRE22]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `mounted` property, we need to add a `setTimeout` function, which will
    execute the `$router.push` function. When executed, this function receives a JavaScript object as an
    argument, with two properties, `name`, and `params`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`mounted`属性中，我们需要添加一个`setTimeout`函数，该函数将执行`$router.push`函数。当执行时，此函数将接收一个JavaScript对象作为参数，其中包含两个属性，`name`和`params`：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Changing the contact view
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改联系视图
- en: On the contact view, we need to add an event listener, which will grab the route
    change and execute an action.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在联系视图上，我们需要添加一个事件侦听器，该侦听器将抓取路由更改并执行操作。
- en: Single file component <script> section
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件`<script>`部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们将创建单文件组件的`<script>`部分。按照以下说明正确创建组件：
- en: Open `contact.vue` in the `src/views` folder.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/views`文件夹中打开`contact.vue`。
- en: 'Add a new `mounted` property:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的`mounted`属性：
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In this property, we will add a verification that will check whether there
    are any parameters on the `$route.params` object and display an `alert` with that
    `$route.params`:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此属性中，我们将添加一个验证，检查`$route.params`对象上是否有任何参数，并显示具有该`$route.params`的`alert`：
- en: '[PRE25]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE26]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here is your component rendered and running:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现和运行的方式：
- en: '![](assets/751bd657-b3cf-44c2-9fbc-ad4027477d67.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/751bd657-b3cf-44c2-9fbc-ad4027477d67.png)'
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `$router.push` function, when executed, tells `vue-router` to change where
    the application is, and in this process, you are passing down some parameters
    to the new router that will replace the current route. In those parameters, there's
    a property called `params`, which sends a group of parameters to the new router.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行`$router.push`函数时，告诉`vue-router`改变应用程序所在的位置，在这个过程中，您将向新的路由器传递一些参数，这些参数将替换当前路由。在这些参数中，有一个名为`params`的属性，它将一组参数发送到新的路由器。
- en: When entering this new router, all the parameters that we will have called from
    within the router will be available in the `$route.params` object; there, we can
    use it in our view or component.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当进入这个新的路由器时，我们将从路由器内部调用的所有参数都将在`$route.params`对象中可用；在那里，我们可以在我们的视图或组件中使用它。
- en: There's more...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the programmatic navigation, it's possible to navigate through the routers,
    adding them to the browser history with the `$router.push` function, but there
    are other functions that can be used too.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序化导航中，可以通过`$router.push`函数导航到路由器，并将它们添加到浏览器历史记录中，但也可以使用其他函数。
- en: The `$router.replace` function will replace the user navigation history for
    a new one, making it unable to go back to the last page.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`$router.replace`函数将替换用户导航历史记录为新的历史记录，使其无法返回到上一页。'
- en: '`$router.go` is used to move the user navigation history in steps. To go forward,
    you need to pass positive numbers and to go backward, you will need to pass negative
    numbers.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`$router.go`用于以步骤方式移动用户导航历史记录。要前进，您需要传递正数，要后退，您需要传递负数。'
- en: See also
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: You can find more information about `vue-router` programmatic navigation at [https://router.vuejs.org/guide/essentials/navigation.html.](https://router.vuejs.org/guide/essentials/navigation.html)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/guide/essentials/navigation.html](https://router.vuejs.org/guide/essentials/navigation.html)找到有关`vue-router`程序化导航的更多信息。
- en: Creating a dynamic router path
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动态路由器路径
- en: Adding a route to your application is a must, but sometimes you need more than
    just simple routes. In this recipe, we'll take a look at how dynamic routes come
    into play. With dynamic routes, you can define custom variables that can be set
    via the URL, and your application can start with those variables already defined.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 向您的应用程序添加路由是必不可少的，但有时您需要的不仅仅是简单的路由。在这个食谱中，我们将看看动态路由是如何发挥作用的。通过动态路由，您可以定义可以通过URL设置的自定义变量，并且您的应用程序可以从这些变量开始定义。
- en: In this recipe, we will learn how to use a dynamic router path on a CRUD list.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何在CRUD列表上使用动态路由器路径。
- en: Getting ready
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱的先决条件如下：
- en: Node.js 12+
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To start our component, we will use the Vue project with Vue-CLI that we completed in
    the ''*Creating a CRUD interface with axios and Vuesax*'' recipe in [Chapter 5](626a2474-50de-4cba-a6a9-e75529ea0f92.xhtml),
    *Fetching Data from the Web via HTTP Requests*. In the following steps, we will
    add `vue-router` to the project through the Vue UI dashboard:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们将使用在[第5章](626a2474-50de-4cba-a6a9-e75529ea0f92.xhtml)中完成的Vue项目和Vue-CLI，*通过HTTP请求从Web获取数据*中的'*使用axios和Vuesax创建CRUD界面*'食谱。在接下来的步骤中，我们将通过Vue
    UI仪表板向项目添加`vue-router`：
- en: 'First, you will need to open `vue ui`. To do this, open Terminal (macOS or
    Linux) or Command Prompt/PowerShell(Windows) and execute the following command:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要打开`vue ui`。要做到这一点，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE27]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: There, you will need to import the project by locating the project folder. After importing
    `vue ui`, you will be redirected to the dashboard.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那里，您需要通过定位项目文件夹来导入项目。导入`vue ui`后，您将被重定向到仪表板。
- en: Add `vue-router` to the plugins by going to the plugins management page and
    clicking on the Add vue-router button. Then, click on the Continuebutton.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到插件管理页面并单击“添加vue-router”按钮，将`vue-router`添加到插件中。然后，单击“继续”按钮。
- en: The Vue-CLI will automatically install and configure vue-router on the project
    for us. We now need to create each view for the **List**, **View,** and **Edit**
    pages.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vue-CLI将自动为我们在项目上安装和配置vue-router。现在我们需要为**列表**，**视图**和**编辑**页面创建每个视图。
- en: To start view development, we will go first by the user list route. In each
    route, we will deconstruct the old component that we had made, and recreate it
    as a view.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始视图开发，我们将首先进入用户列表路由。在每个路由中，我们将解构我们之前制作的旧组件，并将其重新创建为视图。
- en: 'Our recipe will be divided into eight parts:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的步骤将分为八个部分：
- en: Changing the application's main component
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改应用程序的主要组件
- en: Changing the route mixin
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改路由mixin
- en: Axios instance configuration
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Axios实例配置
- en: User list view
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户列表视图
- en: User create view
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户创建视图
- en: User information view
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户信息视图
- en: User update view
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户更新视图
- en: Creating dynamic routes
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建动态路由
- en: Let's get started.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Changing the application's main component
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改应用程序的主要组件
- en: After adding the vue-router plugin, `App.vue` will change. We need to revert
    the changes made by the installation of the `vue-router`. This is needed because
    when `vue-ui` adds the `vue-router` plugin, it will change `App.vue`, adding an
    example code that we don't need.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 添加vue-router插件后，`App.vue`将发生变化。我们需要撤销安装`vue-router`所做的更改。这是因为当`vue-ui`添加`vue-router`插件时，它会更改`App.vue`，添加我们不需要的示例代码。
- en: Single file component <template> section
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们将创建单文件组件的`<template>`部分。按照以下说明正确创建组件：
- en: Open `App.vue` in the `src` folder.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中打开`App.vue`。
- en: 'Remove everything, leaving just the `div#app` HTML element and the `router-view`
    component:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除所有内容，只留下`div#app` HTML元素和`router-view`组件：
- en: '[PRE28]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Changing the route mixin
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改路由mixin
- en: 'In the previous recipe, we used a `changeComponent` mixin. Now that we are
    going to work with routes, we need to change this mixin to a `changeRoute` mixin
    and alter its behavior. In the following steps, we will change how the mixin works,
    to be able to change the route instead of the component:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个步骤中，我们使用了一个`changeComponent` mixin。现在我们要使用路由，我们需要将此mixin更改为`changeRoute`
    mixin并更改其行为。在接下来的步骤中，我们将更改mixin的工作方式，以便能够更改路由而不是组件：
- en: In the `src/mixin` folder, rename `changeComponent.js` to `changeRoute.js` and
    open it.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/mixin`文件夹中，将`changeComponent.js`重命名为`changeRoute.js`并打开它。
- en: 'We will remove the `changeComponent` method and create a new one called `changeRoute`.
    This new method will receive two arguments, `name` and `id`. The `name` argument
    is the route name, as set in the `vue-router` configuration and the `id` will
    be the user id that we will pass a parameter in the route change. This method
    will execute `$router.push`, passing those arguments as the parameters:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将删除`changeComponent`方法并创建一个名为`changeRoute`的新方法。这个新方法将接收两个参数，`name`和`id`。`name`参数是路由名称，在`vue-router`配置中设置，`id`将是我们将在路由更改中传递的用户id参数。此方法将执行`$router.push`，将这些参数作为参数传递：
- en: '[PRE29]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Axios instance configuration
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Axios实例配置
- en: 'To fetch the data in the MirageJS server, we will need to define some options
    in our axios instance. Now, in the following steps, we will configure the axios
    instance to work with the new routering system:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要在MirageJS服务器中获取数据，我们需要在axios实例中定义一些选项。现在，在以下步骤中，我们将配置axios实例以与新的路由系统一起工作：
- en: In the `src/http` folder, open the `baseFetch.js` file.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/http`文件夹中，打开`baseFetch.js`文件。
- en: 'At the creator of the `localApi` instance of `axios`, we will need to add an
    `options` object, passing the `baseURL` property. This `baseURL` will be the current
    browser navigation URL:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`axios`的`localApi`实例的创建者中，我们需要添加一个`options`对象，传递`baseURL`属性。这个`baseURL`将是当前浏览器导航的URL：
- en: '[PRE30]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: User list view
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户列表视图
- en: To create our view, we will extract the code from the `list.vue` component and
    reshape it as a page view.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的视图，我们将从`list.vue`组件中提取代码，并将其重塑为页面视图。
- en: Single file component <script> section
  id: totrans-217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照以下说明正确创建组件：
- en: Move the `list.vue` file from `components` to the `views` folder, and rename
    it `List.vue`.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`list.vue`文件从`components`移动到`views`文件夹，并将其重命名为`List.vue`。
- en: 'Remove the old `changeComponent` mixin import and import the new `changeRoute`
    mixin:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除旧的`changeComponent` mixin导入，并导入新的`changeRoute` mixin：
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'At the Vue `mixins` property, we need to replace `changeComponent` with `changeRoute`:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`mixins`属性中，我们需要用`changeRoute`替换`changeComponent`：
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the `getAllUsers` and `deleteUser` methods, we need to remove `${window.location.href}` from
    the `getHttp` and `deleteHttp` function parameters:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getAllUsers`和`deleteUser`方法中，我们需要从`getHttp`和`deleteHttp`函数参数中删除`${window.location.href}`：
- en: '[PRE33]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Single file component <template> section
  id: totrans-226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照以下说明正确创建组件：
- en: 'We need to wrap the `VsCard` component and its child contents with a `VsRow`
    and `VsCol` component. The `VsCol` component will have the `vs-type` attribute defined
    as `''flex''`, `vs-justify` defined as `''left''`, `vs-align` defined as `''left''`,
    and `vs-w` defined as `12`:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要用`VsRow`和`VsCol`组件包装`VsCard`组件及其子内容。`VsCol`组件将`vs-type`属性定义为`'flex'`，`vs-justify`定义为`'left'`，`vs-align`定义为`'left'`，`vs-w`定义为`12`：
- en: '[PRE34]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'On the actions buttons, we will change the `changeComponent` functions to `changeRoute`:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在操作按钮上，我们将把`changeComponent`函数改为`changeRoute`：
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'At the `VsCard` footer, we need to change the actions buttons, `changeComponent` method
    to the `changeRoute` method:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`VsCard`的页脚处，我们需要将操作按钮的`changeComponent`方法改为`changeRoute`方法：
- en: '[PRE36]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: User create view
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户创建视图
- en: To create our view, we will extract the code from the `create.vue` component
    and reshape it as a page view.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的视图，我们将从`create.vue`组件中提取代码，并将其重塑为页面视图。
- en: Single file component <script> section
  id: totrans-236
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照以下说明正确创建组件：
- en: Move the `create.vue` file from `components` to the `views` folder, and rename
    it `Create.vue`.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`create.vue`文件从`components`移动到`views`文件夹，并将其重命名为`Create.vue`。
- en: 'Remove the old `changeComponent` mixin import and import the new `changeRoute` mixin:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除旧的`changeComponent` mixin导入，并导入新的`changeRoute` mixin：
- en: '[PRE37]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'At the Vue `mixins` property, we need to replace `changeComponent` with `changeRoute`:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`mixins`属性中，我们需要用`changeRoute`替换`changeComponent`：
- en: '[PRE38]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'On the `getUserById` method, we need to remove `${window.location.href}` from
    the `postHttp` function URL and change the `changeComponent` functions to `changeRoute`:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getUserById`方法中，我们需要从`postHttp`函数的URL中移除`${window.location.href}`，并将`changeComponent`函数更改为`changeRoute`：
- en: '[PRE39]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Single file component <template> section
  id: totrans-245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照这些说明正确创建组件：
- en: 'We need to wrap the `VsCard` component and its child contents with a `VsRow` and `VsCol` component.
    The `VsCol` component will have the `vs-type` attribute defined as `''flex''`, `vs-justify` defined
    as `''left''`, `vs-align` defined as `''left''`, and `vs-w` defined as `12`:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要用`VsRow`和`VsCol`组件包裹`VsCard`组件及其子内容。`VsCol`组件将定义`vs-type`属性为`'flex'`，`vs-justify`属性为`'left'`，`vs-align`属性为`'left'`，`vs-w`属性为`12`：
- en: '[PRE40]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'On the `VsCard` footer, we need to change the `Cancel` button''s `changeComponent` functions
    to `changeRoute`:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`VsCard`的页脚上，我们需要将`Cancel`按钮的`changeComponent`函数更改为`changeRoute`：
- en: '[PRE41]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: User information view
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户信息视图
- en: To create our view, we will extract the code from the `view.vue` component and
    reshape it as a page view.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的视图，我们将从`view.vue`组件中提取代码，并将其重塑为页面视图。
- en: Single file component <script> section
  id: totrans-253
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照这些说明正确创建组件：
- en: Move the `view.vue` file from `src/components` to the `src/views` folder and
    rename it as `View.vue`.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`view.vue`文件从`src/components`移动到`src/views`文件夹，并将其重命名为`View.vue`。
- en: 'Remove the old `changeComponent` mixin import and import the new `changeRoute` mixin:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除旧的`changeComponent`混入导入，并导入新的`changeRoute`：
- en: '[PRE42]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'At the Vue `mixins` property, we need to replace `changeComponent` with `changeRoute`:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`mixins`属性中，我们需要用`changeRoute`替换`changeComponent`：
- en: '[PRE43]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a new `computed` property in the `component` object, with the property `userId`,
    which will return `$route.params.id`:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`component`对象中创建一个新的`computed`属性，属性为`userId`，它将返回`$route.params.id`：
- en: '[PRE44]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'On the `getUserById` method, we need to remove `${window.location.href}` from
    the `getHttp` function URL:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getUserById`方法中，我们需要从`getHttp`函数的URL中移除`${window.location.href}`：
- en: '[PRE45]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Single file component <template> section
  id: totrans-264
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照这些说明正确创建组件：
- en: 'We need to wrap the `VsCard` component and its child contents with a `VsRow` and `VsCol` component.
    The `VsCol` component will have the `vs-type` attribute defined as `''flex''`, `vs-justify` defined
    as `''left''`, `vs-align` defined as `''left''`, and `vs-w` defined as `12`:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要用`VsRow`和`VsCol`组件包裹`VsCard`组件及其子内容。`VsCol`组件将定义`vs-type`属性为`'flex'`，`vs-justify`属性为`'left'`，`vs-align`属性为`'left'`，`vs-w`属性为`12`：
- en: '[PRE46]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'On the `VsCard` footer, we need to change the back button `changeComponent` functions
    to `changeRoute`:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`VsCard`的页脚上，我们需要将返回按钮的`changeComponent`函数更改为`changeRoute`：
- en: '[PRE47]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: User update view
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户更新视图
- en: To create our view, we will extract the code from the `update.vue` component
    and reshape it as a page view.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的视图，我们将从`update.vue`组件中提取代码，并将其重塑为页面视图。
- en: Single file component <script> section
  id: totrans-272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照这些说明正确创建组件：
- en: Move the `update.vue` file from `src/components` to the `src/views` folder and
    rename it `Edit.vue`.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`update.vue`文件从`src/components`移动到`src/views`文件夹，并将其重命名为`Edit.vue`。
- en: 'Remove the old `changeComponent` mixin import and import the new `changeRoute` mixin:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除旧的`changeComponent`混入导入，并导入新的`changeRoute`混入：
- en: '[PRE48]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'At the Vue `mixins` property, we need to replace `changeComponent` with `changeRoute`:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`mixins`属性中，我们需要用`changeRoute`替换`changeComponent`：
- en: '[PRE49]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Create a new `computed` property in the `component` object, with the `userId` property ,
    which will return `$route.params.id`:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`component`对象中创建一个新的`computed`属性，具有`userId`属性，它将返回`$route.params.id`：
- en: '[PRE50]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: On the `getUserById` and `updateUser` methods, we need to remove
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getUserById`和`updateUser`方法中，我们需要移除
- en: '`${window.location.href}` from the `getHttp` and `patchHttp` function URLs
    and change the `changeComponent` functions to `changeRoute`:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 从`getHttp`和`patchHttp`函数的URL中删除`${window.location.href}`，并将`changeComponent`函数改为`changeRoute`：
- en: '[PRE51]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Single file component <template> section
  id: totrans-284
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件的<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照以下说明正确创建组件：
- en: 'We need to wrap the `VsCard` component and its child contents with a `VsRow` and `VsCol` component.
    The `VsCol` component will have the `vs-type`  attribute defined as `''flex''`, `vs-justify` defined
    as `''left''`, `vs-align` defined as `''left''`, and `vs-w` defined as `12`:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要用`VsRow`和`VsCol`组件包裹`VsCard`组件及其子内容。`VsCol`组件将`vs-type`属性定义为`'flex'`，`vs-justify`定义为`'left'`，`vs-align`定义为`'left'`，`vs-w`定义为`12`：
- en: '[PRE52]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'On the `VsCard` footer, we need to change the `Cancel` button''s change `Component` functions
    to `changeRoute`:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`VsCard`的页脚上，我们需要把`Cancel`按钮的`changeComponent`函数改为`changeRoute`：
- en: '[PRE53]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Creating dynamic routes
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建动态路由
- en: 'Now, with our page views created, we need to create our routes and make them
    accept parameters, transforming them into dynamic routes. In the following steps,
    we will create the dynamic routes of the application:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经创建了页面视图，我们需要创建路由并使其接受参数，将它们转换为动态路由。在接下来的步骤中，我们将创建应用程序的动态路由：
- en: Open `index.js` in the `src/router` folder.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/router`文件夹中的`index.js`。
- en: 'First, we need to import the four new pages – `List`, `View`, `Edit`, `Create`,
    and `Update`:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要导入四个新页面 - `List`，`View`，`Edit`，`Create`和`Update`：
- en: '[PRE54]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'On the `routes` array, we will add a new route object for each one of the pages
    that were imported. In this object, there will be three properties: `name`, `path`,
    and `component`.'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes`数组上，我们将为每个导入的页面添加一个新的路由对象。在这个对象中，将有三个属性：`name`，`path`和`component`。
- en: 'For the `list` route, we will define `name` as `''list''`, `path` as `''/''`,
    and `component` as the imported `List` component:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`list`路由，我们将把`name`定义为`'list'`，`path`定义为`'/'`，并把`component`定义为导入的`List`组件：
- en: '[PRE55]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'On the `view` route, we will define `name` as `''view''`, `path` as `''/view/:id''`, and `component` as
    the imported `View` component:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`view`路由上，我们将把`name`定义为`'view'`，`path`定义为`'/view/:id'`，并把`component`定义为导入的`View`组件：
- en: '[PRE56]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In the `edit` route, we will define `name` as `''edit''`, `path `as `''/edit/:id''`,
    and `component` as the imported `Edit` component:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`edit`路由上，我们将把`name`定义为`'edit'`，`path`定义为`'/edit/:id'`，并把`component`定义为导入的`Edit`组件：
- en: '[PRE57]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Finally, at the `create` route, we will define `name` as `''create''`, `path` as `''/create''`,
    and `component` as the imported `Create` component:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`create`路由上，我们将把`name`定义为`'create'`，`path`定义为`'/create'`，并把`component`定义为导入的`Create`组件：
- en: '[PRE58]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'When the `VueRouter` is created, we will add the `mode` options property and
    set it as `''history''`:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当创建`VueRouter`时，我们将添加`mode`选项属性，并将其设置为`'history'`：
- en: '[PRE59]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE60]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Here is your component rendered and running:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件渲染和运行的方式：
- en: '**List View Route -** `/` will be your user list page, containing a list of
    all the users in your application and buttons to view, edit, and delete it, as
    well as a button to create a new user:'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表视图路由 -** `/`将是您的用户列表页面，包含应用程序中所有用户的列表以及查看、编辑和删除用户的按钮，以及创建新用户的按钮：'
- en: '![](assets/4ba80475-521f-446f-8c30-8be4c9b739ed.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4ba80475-521f-446f-8c30-8be4c9b739ed.png)'
- en: '**User View Route -** `/view/:id` will be your user view page, where it''s
    possible to view your user information, such as the user''s name, email, country,
    birthday, and phone number:'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户视图路由 -** `/view/:id`将是您的用户查看页面，您可以在此页面查看用户信息，例如用户的姓名、电子邮件、国家、生日和电话号码：'
- en: '![](assets/10c4f103-0042-4f58-8c55-74f4ac6fbbef.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/10c4f103-0042-4f58-8c55-74f4ac6fbbef.png)'
- en: '**User Edit Route -** `/update/:id` will be your user edit page, where it''s
    possible to edit your user''s information, changing the user''s name, email, country,
    birthday, and phone number:'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户编辑路由 -** `/update/:id`将是您的用户编辑页面，您可以在此页面编辑用户信息，更改用户的姓名、电子邮件、国家、生日和电话号码：'
- en: '![](assets/9010ffcc-0c76-4b96-be5e-d363d55d90d6.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9010ffcc-0c76-4b96-be5e-d363d55d90d6.png)'
- en: '**Create User Route -** `/update/:id`will be your user creation page, where
    it''s possible to create a new user on the system:'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建用户路由别名 -** `/update/:id`将是您的用户创建页面，您可以在系统上创建新用户：'
- en: '![](assets/42da8529-0e65-41c5-a7af-81b391e14ab0.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/42da8529-0e65-41c5-a7af-81b391e14ab0.png)'
- en: How it works...
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When `vue-router` is created, and the route is passed for matching, the router
    analysis check for the best match for the route based on a RegEx for defining
    a weight on each route.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建`vue-router`并将路由传递进行匹配时，路由分析会根据每个路由的权重定义的正则表达式来寻找最佳匹配路由。
- en: When a route is defined and has a variable in its path, you need to add a `:` before
    the variable parameter. This parameter is passed down to the component in the
    `$route.params` property.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 当定义路由并在其路径中有一个变量时，您需要在变量参数之前添加`:`。此参数通过`$route.params`属性传递给组件。
- en: See also
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about the dynamic router matching at [https://router.vuejs.org/guide/essentials/dynamic-matching.html.](https://router.vuejs.org/guide/essentials/dynamic-matching.html)
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/guide/essentials/dynamic-matching.html](https://router.vuejs.org/guide/essentials/dynamic-matching.html)找到有关动态路由匹配的更多信息。
- en: Creating a route alias
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建路由别名
- en: Every application is a living organism – it evolves, mutates, and changes day
    by day. Sometimes these evolutions can come through the form of a router change,
    for better naming or for a deprecated service. In `vue-router`, it's possible
    to make all those changes invisible to the user, so when they use old links, they
    still can access the application.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都是一个活生生的有机体-它不断发展、突变和变化。有时，这些进化可以通过路由更改的形式来实现，以获得更好的命名或废弃的服务。在`vue-router`中，可以使所有这些更改对用户不可见，因此当他们使用旧链接时，仍然可以访问应用程序。
- en: In this recipe, we will learn how to create a route alias for our application
    and use it.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何为我们的应用程序创建路由别名并使用它。
- en: Getting ready
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 此教程的先决条件如下：
- en: Node.js 12+
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: To start our component, we will use the Vue project with Vue-CLI that we completed in
    the '*Creating a dynamic router path*' recipe, or we can start a new one.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们将使用在“创建动态路由路径”配方中完成的Vue项目，或者我们可以开始一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE61]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Choose the manual features and add `router` as a required feature, as indicated
    in the '*How to do it...*' section of the '*Creating a simple route*' recipe.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能，并按照“如何做…”部分的指示，将`router`添加为必需功能。
- en: 'Now, in the following steps, we will create the router alias:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在以下步骤中，我们将创建路由别名：
- en: Open `index.js` in the `src/router` folder.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中打开`index.js`。
- en: 'At the `list` object, we will change the `path` property from `''/''` to `''/user''`
    and for the `alias` property, we will set `''/''`:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`list`对象中，我们将把`path`属性从`'/'`改为`'/user'`，并为`alias`属性设置为`'/'`：
- en: '[PRE62]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the `view` object, we will change the `path` property from `''/view/:id''` to `''/user/:id''` and
    we will set the `alias` property to `''/view/:id''`:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`view`对象中，我们将把`path`属性从`'/view/:id'`改为`'/user/:id'`，并将`alias`属性设置为`'/view/:id'`：
- en: '[PRE63]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In the `edit` object, we will change the `path` property from `''/edit/:id''` to `''/user/edit/:id''` and
    set the `alias` property to `''/edit/:id''`:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`edit`对象中，我们将把`path`属性从`'/edit/:id'`改为`'/user/edit/:id'`，并将`alias`属性设置为`'/edit/:id'`。
- en: '[PRE64]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Finally, in the `create` object, we will change the `path` property from `''/create''` to `''/user/create''` and
    set the `alias` property to `''/create''`:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`create`对象中，我们将把`path`属性从`'/create'`改为`'/user/create'`，并将`alias`属性设置为`'/create'`：
- en: '[PRE65]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: How it works...
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: When the user enters your application, `vue-router` will try to match paths
    to the one that the user is trying to access. If there is a property called `alias` in
    the route object, this property will be used by the `vue-router` to maintain the
    old route under the hood and use the alias route instead. If an alias is found,
    the component of that alias is rendered, and the router remains as the alias,
    not showing the user the change, making it transparent.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户进入您的应用程序时，`vue-router`将尝试将路径与用户尝试访问的路径匹配。如果路由对象中有一个名为`alias`的属性，则`vue-router`将使用此属性在幕后维护旧路由，并使用别名路由。如果找到别名，则渲染该别名的组件，并且路由器保持为别名，不向用户显示更改，使其透明。
- en: In our scenario, we made a transformation for our application to now handle
    all the users called on the `/user` namespace, but still maintaining the old URL
    structure so that if an old visitor tries to access the website, they will be
    able to use the application normally.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的场景中，我们对应用程序进行了转换，现在处理所有在`/user`命名空间上调用的用户，但仍保持旧的URL结构，以便如果旧访问者尝试访问网站，他们将能够正常使用应用程序。
- en: See also
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about the `vue-router` alias at [https://router.vuejs.org/guide/essentials/redirect-and-alias.html#alias.](https://router.vuejs.org/guide/essentials/redirect-and-alias.html#alias)
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/guide/essentials/redirect-and-alias.html#alias](https://router.vuejs.org/guide/essentials/redirect-and-alias.html#alias)找到有关`vue-router`别名的更多信息。
- en: Creating route redirects
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建路由重定向
- en: Router redirect works almost the same as the router alias, but the main difference
    is that the user is truly redirected to the new URL. Using this process, you are
    able to manage how the new route can be loaded.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 路由重定向几乎与路由别名相同，但主要区别在于用户确实被重定向到新的URL。使用此过程，您可以管理如何加载新路由。
- en: Getting ready
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we will use the Vue project with Vue-CLI that we completed in
    the '*Creating a route alias*' recipe, or we can start a new one.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们将使用在'*创建路由别名*'配方中完成的Vue-CLI中的Vue项目，或者我们可以启动一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新的项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE66]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Choose the manual features and add `Router` as a required feature, as indicated
    in the '*How to do it...*' steps in the '*Creating a simple route*' recipe.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能并将`Router`作为必需的功能添加到'*如何做...*'步骤中的'*创建一个简单路由*'配方中。
- en: 'Now, in these steps, we will create the router redirect rules:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这些步骤中，我们将创建路由重定向规则：
- en: Open `index.js` in the `src/router` folder.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/router`文件夹中的`index.js`。
- en: 'Insert a new route object at the end of the `routes` array. This object will
    have two properties, `path` and `redirect`. In the `path` property, we need to
    define the path that the user will enter, `''/create-new-user''`, and in `redirect`,
    the path that the user will be redirected to, in this case, `''/user/create''`:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes`数组的末尾插入一个新的路由对象。这个对象将有两个属性，`path`和`redirect`。在`path`属性中，我们需要定义用户将输入的路径，`'/create-new-user'`，在`redirect`中，用户将被重定向到的路径，在这种情况下是`'/user/create'`。
- en: '[PRE67]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Create a new object, and this object will have two properties, `path` and `redirect`.
    In the `path` property, we need to define the path that the user will enter, `''/users''`,
    and in the `redirect`, we will create an object with a property called `name`
    and will put the value as `''list''`:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新对象，这个对象将有两个属性，`path`和`redirect`。在`path`属性中，我们需要定义用户将输入的路径，`'/users'`，在`redirect`中，我们将创建一个具有名为`name`的属性的对象，并将值设置为`'list'`。
- en: '[PRE68]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Create a new object. This object will have two properties, `path` and `redirect`.
    In the `path` property, we need to define the path that the user will enter, `''/my-user/:id?''`,
    and in the `redirect`, we will create a function, which will receive an argument,
    `to`, which is an object of the current route. We need to check whether the user
    ID is present in the route, to redirect the user to the edit page. Otherwise,
    we will redirect them to the user list:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新对象。这个对象将有两个属性，`path`和`redirect`。在`path`属性中，我们需要定义用户将输入的路径，`'/my-user/:id?'`，在`redirect`中，我们将创建一个函数，该函数将接收一个参数`to`，这是当前路由的对象。我们需要检查路由中是否存在用户ID，以便将用户重定向到编辑页面。否则，我们将把他们重定向到用户列表。
- en: '[PRE69]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Finally, in the end, we will create a route object with two properties, `path` and `redirect`.
    In the `path` property, we need to define the path that the user will enter, `''/*''`,
    and in the `redirect`, we need to define the `redirect` property as `''/''`:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在最后，我们将创建一个具有两个属性，`path`和`redirect`的路由对象。在`path`属性中，我们需要定义用户将输入的路径，`'/*'`，在`redirect`中，我们需要将`redirect`属性定义为`'/'`。
- en: '[PRE70]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Remember that the last route with the `'*'` will always be the route that will
    be rendered when there is no match in the URL that your user is trying to enter.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，具有`'*'`的最后一个路由将始终是在用户尝试输入的URL中没有匹配时呈现的路由。
- en: How it works...
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As we define `redirect` as a new route, it works similar to the alias, but
    the `redirect` property can receive three types of arguments: a string when redirecting
    for the route itself, objects when redirecting with other parameters such as the
    name of the route, and last but not least, the function type, which `redirect`
    can handle and return one of the first two objects so the user can be redirected.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`redirect`定义为一个新的路由时，它的工作方式类似于别名，但是`redirect`属性可以接收三种类型的参数：一个字符串，当重定向到路由本身时，对象，当使用其他参数重定向时，例如路由的名称，最后但并非最不重要的是函数类型，`redirect`可以处理并返回前两个对象中的一个，以便用户可以被重定向。
- en: See also
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about the `vue-router` redirect at [https://router.vuejs.org/guide/essentials/redirect-and-alias.html#redirect.](https://router.vuejs.org/guide/essentials/redirect-and-alias.html#redirect)
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/guide/essentials/redirect-and-alias.html#redirect](https://router.vuejs.org/guide/essentials/redirect-and-alias.html#redirect)找到有关`vue-router`重定向的更多信息。
- en: Creating a nested router view
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建嵌套路由视图
- en: In `vue-router`, nested routes are like a namespace for your routes, where you
    can have multiple levels of routes inside the same route, use a base view as the
    main view, and have the nested routes rendered inside.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在`vue-router`中，嵌套路由就像是路由的命名空间，您可以在同一个路由内拥有多个级别的路由，使用基本视图作为主视图，并在其中呈现嵌套路由。
- en: In a multi-module application, this is used to handle routes like CRUD, where
    you will have a base route, and the children will be the CRUD views.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在多模块应用程序中，这用于处理像CRUD这样的路由，其中您将拥有一个基本路由，而子路由将是CRUD视图。
- en: In this recipe, you will learn how to create a nested route.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，您将学习如何创建嵌套路由。
- en: Getting ready
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating a dynamic router path*' recipe, or we can start a new one.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们将使用在“创建动态路由路径”配方中使用的Vue项目与Vue-CLI，或者我们可以开始一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE71]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Choose the manual features and add `Router` as a required feature, as indicated
    in the '*How to do it...*' section in the '*Creating a simple route*' recipe.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能，并在“*如何操作...*”部分中将`Router`添加为必需功能，如“创建简单路由”配方中所示。
- en: 'Our recipe will be divided into two parts:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方将分为两部分：
- en: Creating the `router-view` on the layout
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在布局上创建`router-view`
- en: Changing the router files
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改路由文件
- en: Let's get started.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Creating the router-view on the layout
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在布局上创建`router-view`
- en: When using `vue-router` with children's routes, we need to create the main view,
    which will have a special component called `RouterView`. This component will render
    the current router inside the layout or page you are rendering.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用带有子路由的`vue-router`时，我们需要创建主视图，它将具有一个名为`RouterView`的特殊组件。此组件将在您呈现的布局或页面内呈现当前路由。
- en: 'Now, in the following steps, we will create the layout for the pages:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在接下来的步骤中，我们将为页面创建布局：
- en: In the `src/views` folder, we need to create a new folder called `user` and
    move the `Create`, `Edit`, `List`**,** and `View` pages to this new folder.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/views`文件夹中，我们需要创建一个名为`user`的新文件夹，并将`Create`、`Edit`、`List`、和`View`页面移动到这个新文件夹中。
- en: Create a new file called `Index.vue` in the `user `folder and open it.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`user`文件夹中创建一个名为`Index.vue`的新文件并打开它。
- en: 'In the single file component `<template>` section, add a `router-view` component:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单文件组件`<template>`部分中，添加一个`router-view`组件：
- en: '[PRE72]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Changing the router files
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改路由文件
- en: We will create a new file that will manage the user's specific routes, which
    will help us to maintain the code and make it cleaner.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新文件来管理用户的特定路由，这将帮助我们维护代码并使其更清晰。
- en: User routes
  id: totrans-407
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户路由
- en: 'In the following steps, we will create routes for the user:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将为用户创建路由：
- en: Create a new file called `user.js` in the `src/router` folder.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中创建一个名为`user.js`的新文件。
- en: 'Import the `Index`, `List`, `View`, `Edit`**,** and `Create` views:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Index`、`List`、`View`、`Edit`和`Create`视图：
- en: '[PRE73]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Create an array and make it the default export of the file. In this array,
    add a `route` object, with four properties – `path`, `name`, `component`, and
    `children`. Set the `path` property as `''/user''`, define the `name` property
    as `''user''`, define `component` as the imported `Index` component, and finally,
    define the `children` property as an empty array:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个数组，并将其设置为文件的默认导出。在这个数组中，添加一个`route`对象，具有四个属性-`path`，`name`，`component`和`children`。将`path`属性设置为`'/user'`，将`name`属性定义为`'user'`，将`component`定义为导入的`Index`组件，最后，将`children`属性定义为空数组：
- en: '[PRE74]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'In the `children` property, add a new route object with three properties – `path`,
    `name`, and `component`. Define `path` as `''''`, `name` as `''list''`, and finally,
    define the `component` property as the imported `List` component:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`children`属性中，添加一个新的路由对象，具有三个属性-`path`，`name`和`component`。将`path`定义为`''`，`name`定义为`'list'`，最后，将`component`属性定义为导入的`List`组件：
- en: '[PRE75]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Create a route object for the view route and use the same structure as the
    last `route` object. Define the `path` property as `'':id''`, define `name` as
    `''view''`, and define `component` as the imported `View` component:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为视图路由创建一个路由对象，并使用与上一个`route`对象相同的结构。将`path`属性定义为`':id'`，将`name`定义为`'view'`，将`component`定义为导入的`View`组件：
- en: '[PRE76]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Create a route object for the `edit` route and use the same structure as the
    last `route` object. Define the `path` property as `''edit/:id''`, define `name` as `''edit''`,
    and define `component` as the imported `Edit` component:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`edit`路由创建一个路由对象，并使用与上一个`route`对象相同的结构。将`path`属性定义为`'edit/:id'`，将`name`定义为`'edit'`，将`component`定义为导入的`Edit`组件：
- en: '[PRE77]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Create a route object for the `create` route, using the same structure as the
    last `route` object. Define the `path` property as `''create''`, define `name` as `''create''` , and
    define `component` as the imported `Create` component:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`create`路由创建一个路由对象，使用与上一个`route`对象相同的结构。将`path`属性定义为`'create'`，将`name`定义为`'create'`，将`component`定义为导入的`Create`组件：
- en: '[PRE78]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Router manager
  id: totrans-422
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 路由管理器
- en: 'In the following steps, we will create the router manager that will control
    all the routes on the application:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将创建路由管理器，该管理器将控制应用程序中的所有路由：
- en: Open the `index.js` in the `src/router` folder.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中打开`index.js`。
- en: 'Import the newly created `user.js` file in the `src/router` folder:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中导入新创建的`user.js`文件：
- en: '[PRE79]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'In the `routes` array, add the imported `UserRoutes` as a destructed array:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes`数组中，将导入的`UserRoutes`作为解构数组添加：
- en: '[PRE80]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: How it works...
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`vue-router` provides the ability to use child routes as internal components
    of a current view or layout. This gives the possibility to create an initial route
    with a special layout file, and render the child component inside this layout
    through the `RouterView` component.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue-router`提供了使用子路由作为当前视图或布局的内部组件的能力。这使得可以创建具有特殊布局文件的初始路由，并通过`RouterView`组件在此布局中呈现子组件。'
- en: This technique is commonly used for defining a layout in an application and
    setting a namespace for the modules where the parent route can have a set of specific
    orders that will be available for every one of its children.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术通常用于在应用程序中定义布局并为模块设置命名空间，其中父路由可以具有一组特定顺序，这些顺序将对其每个子路由都可用。
- en: See also
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about nested routes at [https://router.vuejs.org/guide/essentials/nested-routes.html#nested-routes](https://router.vuejs.org/guide/essentials/nested-routes.html#nested-routes).
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/guide/essentials/nested-routes.html#nested-routes](https://router.vuejs.org/guide/essentials/nested-routes.html#nested-routes)找到有关嵌套路由的更多信息。
- en: Creating a 404 error page
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建404错误页面
- en: There will be some occasions when your user may try to enter an old link or
    enter a typo and won't get to the correct route, and this should lead them directly
    to a not found error.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您的用户可能会尝试输入旧链接或输入拼写错误，无法到达正确的路由，这应该直接导致找不到错误。
- en: In this recipe, you will learn how to handle a 404 error in `vue-router`.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，您将学习如何在`vue-router`中处理404错误。
- en: Getting ready
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating a nested router view*' recipe, or we can start a new one.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的组件，我们将使用在“*创建嵌套路由视图*”配方中使用的Vue项目与Vue-CLI，或者我们可以开始一个新的。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE81]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Choose the manual features and add `Router` as a required feature, as indicated
    in the '*How to do it..*.' section in the '*Creating a simple route*' recipe.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能并将`Router`添加为所需功能，如“*如何做...*”部分在“*创建简单路由*”配方中所示。
- en: 'Our recipe will be divided into two parts:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方将分为两部分：
- en: Creating the `NotFound` view
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`NotFound`视图
- en: Changing the router files
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改路由文件
- en: Let's get started.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Creating the NotFound view
  id: totrans-452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建NotFound视图
- en: We need to create a new view to be displayed for the user when there is no matching
    route on the application. This page will be a simple, generic page.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的视图，当应用程序上没有匹配的路由时，将显示给用户。这个页面将是一个简单的通用页面。
- en: Single file component <template> section
  id: totrans-454
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们将创建单文件组件的`<template>`部分。按照这些说明正确创建组件：
- en: In the `src/views` folder, create a new file called `NotFound.vue` and open
    it.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/views`文件夹中，创建一个名为`NotFound.vue`的新文件并打开它。
- en: 'Create a `VsRow` component and inside of it create four `VsCol` components.
    All of those components will have the attribute `vs-w` defined as `12` and `class` as `text-center`:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`VsRow`组件，在其中创建四个`VsCol`组件。所有这些组件都将具有属性`vs-w`定义为`12`和`class`定义为`text-center`：
- en: '[PRE82]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'On the first `VsCol` component, we will add a `VsIcon` component, and set the
    attribute icon as `sentiment_dissatisfied` and define the `size` as `large`:'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个`VsCol`组件中，我们将添加一个`VsIcon`组件，并将属性icon定义为`sentiment_dissatisfied`，并将`size`定义为`large`：
- en: '[PRE83]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'In the second `VsCol` component, we will add a title for the page:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个`VsCol`组件中，我们将为页面添加一个标题：
- en: '[PRE84]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'In the third `VsCol` component, we need to create the text that will be placed
    on the page:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第三个`VsCol`组件中，我们需要创建将放置在页面上的文本：
- en: '[PRE85]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Finally, on the fourth `VsCol` component, we will add the `VsButton` component.
    This button will have the attribute `type` defined as `relief` and `to` defined
    as `''/''`:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在第四个`VsCol`组件上，我们将添加`VsButton`组件。此按钮将具有属性`type`定义为`relief`和`to`定义为`'/'`：
- en: '[PRE86]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Single file component <style> section
  id: totrans-467
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<style>部分
- en: 'In this part, we will create the `<style>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们将创建单文件组件的`<style>`部分。按照这些说明正确创建组件：
- en: 'Add the `scoped` tag to the `<style>` tag:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<style>`标签中添加`scoped`标签：
- en: '[PRE87]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Create a new rule named `.text-center`, with the `text-align` property defined
    as `center` and `margin-bottom` defined as `20px;`:'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`.text-center`的新规则，其中`text-align`属性定义为`center`，`margin-bottom`定义为`20px;`：
- en: '[PRE88]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Changing the router files
  id: totrans-473
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改路由文件
- en: After we have created the view, we need to add it to the router and make it
    available to the user. To do it, we will need to add the view route into the router
    manager.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 创建视图后，我们需要将其添加到路由并使其对用户可用。为此，我们需要将视图路由添加到路由管理器中。
- en: 'In these steps, we will change the router manager, to add the new error page:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些步骤中，我们将更改路由管理器，以添加新的错误页面：
- en: Open `index.js` in the `src/router` folder.
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中打开`index.js`。
- en: 'Import the `NotFound` component:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`NotFound`组件：
- en: '[PRE89]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'In the `routes` array, after `UserRoutes`, add a new `route` object with two
    properties, `path` and `redirect`. Define the `path` property as `''/''` and the
    `redirect` property as `''/user''`:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes`数组中，在`UserRoutes`之后，添加一个新的`route`对象，具有两个属性，`path`和`redirect`。将`path`属性定义为`'/'`，将`redirect`属性定义为`'/user'`：
- en: '[PRE90]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'For the not found page, we need to create a new route object that needs to
    be placed in the last position in the `routes` array. This route object will have
    two properties, `path`, and `component`. The `path` property will be defined as `''*''`
    and `component` as the imported `NotFound` view:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于未找到的页面，我们需要创建一个新的路由对象，该对象需要放在`routes`数组的最后位置。这个路由对象将有两个属性，`path`和`component`。`path`属性将被定义为`'*'`，`component`将被定义为导入的`NotFound`视图：
- en: '[PRE91]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE92]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Here is your component rendered and running:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的方式：
- en: '![](assets/1a7706e3-1b9c-4486-8750-851e47e3f35f.png)'
  id: totrans-486
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1a7706e3-1b9c-4486-8750-851e47e3f35f.png)'
- en: How it works...
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`vue-router` tries to find the best match for the URL that the user wants to
    access; if there isn''t a match, `vue-router` will use the `''*''` path as the
    default value for these scenarios, where the `*` represents any value that the
    user has entered that is not in the router lists.'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '`vue-router`尝试找到用户想要访问的URL的最佳匹配；如果没有匹配项，`vue-router`将使用`''*''`路径作为这些情况的默认值，其中`*`表示用户输入的不在路由列表中的任何值。'
- en: Because the process of matching in `vue-router` is determined by the weight
    of the route, we need to place the error page at the very bottom, so `vue-router`
    needs to pass in every possible route before actually calling the `NotFound` route.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 因为在`vue-router`中匹配的过程是由路由的权重决定的，所以我们需要将错误页面放在最底部，这样`vue-router`在实际调用`NotFound`路由之前需要通过每个可能的路由。
- en: See also
  id: totrans-490
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about handling 404 errors in the vue-router history
    mode at [https://router.vuejs.org/guide/essentials/history-mode.html#caveat.](https://router.vuejs.org/guide/essentials/history-mode.html#caveat)
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/guide/essentials/history-mode.html#caveat](https://router.vuejs.org/guide/essentials/history-mode.html#caveat)找到有关处理vue-router历史模式中的404错误的更多信息。
- en: Creating and applying authentication middleware
  id: totrans-492
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和应用身份验证中间件
- en: In `vue-router`, it's possible to create router guards – functions that run
    each time a router is changed. Those guards are used as middleware in the router
    management process. It's common to use them as an authentication middleware or
    session validators.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 在`vue-router`中，可以创建路由守卫-每次路由更改时运行的函数。这些守卫被用作路由管理过程中的中间件。通常将它们用作身份验证中间件或会话验证器。
- en: In this recipe, we will learn how to create authentication middleware, add metadata
    to our routes to make them restricted, and create a login page.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何创建身份验证中间件，向我们的路由添加元数据以使它们受限制，并创建登录页面。
- en: Getting ready
  id: totrans-495
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的先决条件如下：
- en: Node.js 12+
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-501
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating a 404 error page*' recipe, or we can start a new one.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们将使用在“创建404错误页面”配方中使用的Vue-CLI的Vue项目，或者我们可以启动一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新的项目，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE93]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Choose the manual features and add `Router` as a required feature, as indicated
    in the '*How to do it...*' section in the '*Creating a simple route*' recipe.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动特性，并在“*如何做...*”部分中添加`Router`作为必需特性，如“创建简单路由”配方中所示。
- en: 'Our recipe will be divided into three parts:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方将分为三个部分：
- en: Creating the authentication middleware
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建身份验证中间件
- en: Adding the metadata and the middleware to the router
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向路由添加元数据和中间件
- en: Attaching the middleware to vue-router and creating the login page
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将中间件附加到vue-router并创建登录页面
- en: Let's get started.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始。
- en: Creating the login view
  id: totrans-511
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建登录视图
- en: The login view will be the page that the user will see if they are not authenticated.
    We will construct a simple page with two inputs inside – a card and a button.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 登录视图将是用户在未经过身份验证时看到的页面。我们将构建一个简单的页面，里面有两个输入框 - 一个卡片和一个按钮。
- en: Single file component <script> section
  id: totrans-513
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<script>部分
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<script>`部分。按照这些说明正确创建组件：
- en: In the `src/views` folder, create a new file called `Login.vue` and open it.
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/views`文件夹中，创建一个名为`Login.vue`的新文件并打开它。
- en: 'Create a `data` property, containing `username`, `password`, and `error`:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`username`、`password`和`error`的`data`属性：
- en: '[PRE94]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Then create the `methods` property with a method called `userSignIn`. This
    method will validate if the `username` and `password` data are complete. If it
    is, it will create a new key called `''auth''` in `sessionStorage`, with encrypted
    stringified JSON of the `username` data. Then, set `error` to `false` and execute `$router.replace` to
    redirect the user to the user list `''/user''`. If any of the fields do not pass
    in any of the validations, the method will define the error as `true` and return
    `false`:'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建一个名为`userSignIn`的方法的`methods`属性。此方法将验证`username`和`password`数据是否完整。如果是，它将在`sessionStorage`中创建一个名为`'auth'`的新密钥，其中包含`username`数据的加密字符串化JSON。然后，将`error`设置为`false`并执行`$router.replace`将用户重定向到用户列表`'/user'`。如果任何字段未通过任何验证，该方法将将错误定义为`true`并返回`false`：
- en: '[PRE95]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Single file component <template> section
  id: totrans-520
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<template>部分
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<template>`部分。按照这些说明正确创建组件：
- en: 'Create a `div.container` HTML element with a `VsRow` component inside. The
    `VsRow` component will have the attribute `vs-align` defined as `"center"` and
    `vs-justify` defined as `"center"`:'
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`VsRow`组件的`div.container`HTML元素。`VsRow`组件将具有属性`vs-align`定义为`"center"`和`vs-justify`定义为`"center"`：
- en: '[PRE96]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Inside the `VsRow` component, add a `VsCol` component with the attribute `vs-lg`
    defined as `4`, `vs-sm` defined as `6`, and `vs-xs` defined as `10`. Then, inside
    the `VsCol` component, we will create a `VsCard` component with the `style` attribute
    defined as `margin: 20px;`:'
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`VsRow`组件内部，添加一个带有属性`vs-lg`定义为`4`，`vs-sm`定义为`6`和`vs-xs`定义为`10`的`VsCol`组件。然后，在`VsCol`组件内部，我们将创建一个带有`style`属性定义为`margin:
    20px;`的`VsCard`组件：'
- en: '[PRE97]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Inside the `VsCard` component, create a dynamic `<template>` with the `slot`
    named  `header`, an `h3` HTML element, and your title:'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`VsCard`组件内部，创建一个带有名称为`header`的`slot`的动态`<template>`，一个`h3`HTML元素和您的标题：
- en: '[PRE98]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'After that, create a `VsRow`component with the attribute `vs-align` defined
    as `"center"`, `vs-justify` defined as `"center"`, and two `VsCol` components
    inside of it, with the attribute `vs-w` defined as `12`:'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，创建一个`VsRow`组件，其中属性`vs-align`定义为`"center"`，`vs-justify`定义为`"center"`，并在其中放置两个`VsCol`组件，其中属性`vs-w`定义为`12`：
- en: '[PRE99]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'On the first `VsCol` component, we will add a `VsInput` component, with the
    attribute `danger` defined as the data `error` value, `danger-text` defined as
    the text that will display on error, `label` defined as `"Username"`, `placeholder` defined
    as `"Username or e-mail"`, and the `v-model` directive bound to `username`:'
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个`VsCol`组件上，我们将添加一个`VsInput`组件，其中属性`danger`定义为数据`error`的值，`danger-text`定义为错误时显示的文本，`label`定义为`"Username"`，`placeholder`定义为`"Username
    or e-mail"`，并且`v-model`指令绑定到`username`：
- en: '[PRE100]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'In the second `VsCol` component, we will add a `VsInput` component, with the
    attribute `danger` defined as the data `error` value, `danger-text` defined as
    the text that will display on error, `label` defined as `"Password"`, `type` defined
    as `password`, `placeholder` defined as `"Your password"`, and the `v-model` directive
    bound to `password`:'
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个`VsCol`组件中，我们将添加一个`VsInput`组件，其中属性`danger`定义为数据`error`的值，`danger-text`定义为错误时显示的文本，`label`定义为`"Password"`，`type`定义为`password`，`placeholder`定义为`"Your
    password"`，并且`v-model`指令绑定到`password`：
- en: '[PRE101]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Finally, in the card footer, we need to create a dynamic `<template>` with
    the slot named `footer`. Inside this `<template>`, we will add a `VsRow` component
    with the `vs-justify` attribute defined as `flex-start` and insert a `VsButton` with
    the attribute `color` defined as `success`, `type` defined as `filled`, `icon` defined
    as `account_circle`, `size` defined as `small` and the `@click` event listener
    targeted to the `userSignIn` method:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在卡片页脚中，我们需要创建一个动态的`<template>`，其中包含名为`footer`的插槽。在这个`<template>`中，我们将添加一个`VsRow`组件，其中`vs-justify`属性定义为`flex-start`，并插入一个`VsButton`，其中属性`color`定义为`success`，`type`定义为`filled`，`icon`定义为`account_circle`，`size`定义为`small`，并且`@click`事件监听器指向`userSignIn`方法：
- en: '[PRE102]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Single file component <style> section
  id: totrans-536
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单文件组件<style>部分
- en: 'In this part, we will create the `<style>` section of the single file component.
    Follow these instructions to create the component correctly:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将创建单文件组件的`<style>`部分。按照以下说明正确创建组件：
- en: 'First, we need to make this section scoped, so the CSS rules won''t affect
    any other component of the application:'
  id: totrans-538
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要使这个部分具有作用域，这样CSS规则就不会影响应用程序的任何其他组件：
- en: '[PRE103]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Then, we need to add the rules for the `container `class and the `VsInput` component:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要为`container`类和`VsInput`组件添加规则：
- en: '[PRE104]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器并查看您的组件，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE105]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Here is your component rendered and running:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的组件呈现并运行的方式：
- en: '![](assets/5b60b886-7306-4fd7-86ba-ea430ce27ea8.png)'
  id: totrans-545
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5b60b886-7306-4fd7-86ba-ea430ce27ea8.png)'
- en: Creating the middleware
  id: totrans-546
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建中间件
- en: All `vue-router` middleware can also be referred to as navigation guards, and
    they can be attached to the application route changes. Those changes have some
    hooks that you can apply to your middleware. The authentication middleware takes
    place before the router changes, so we can handle everything and send the user
    to the correct route.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 所有`vue-router`中间件也可以称为导航守卫，并且它们可以附加到应用程序路由更改上。这些更改有一些钩子，您可以将其应用于您的中间件。身份验证中间件在路由更改之前发生，因此我们可以处理一切并将用户发送到正确的路由。
- en: In the `src/router` folder, create a new folder called `middleware`, then create
    and open a new file called `authentication.js`.
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中，创建一个名为`middleware`的新文件夹，然后创建并打开一个名为`authentication.js`的新文件。
- en: 'In this file, we will create a default `export` function that will have three
    function parameters – `to`, `from`, and `next`. The `to` and `from` parameters
    are objects, and the `next` parameter is a callback function:'
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将创建一个默认的`export`函数，它将有三个函数参数 - `to`，`from`和`next`。`to`和`from`参数是对象，`next`参数是一个回调函数：
- en: '[PRE106]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'We need to check whether the route that we are being redirected to has an authenticated
    `meta` property set to `true` and whether we have a `sessionStorage` item with
    the `''auth''` key. If we pass those validations, we can execute the `next` callback:'
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要检查我们被重定向到的路由是否具有设置为`true`的经过身份验证的`meta`属性，并且我们是否有一个具有`'auth'`键的`sessionStorage`项。如果通过了这些验证，我们可以执行`next`回调：
- en: '[PRE107]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Then, if the first validation didn''t pass, we need to check whether the router
    that we are redirecting the user to has the authenticated `meta `property and
    check whether it''s a `false` value. If the validation did pass, we will execute
    the `next` callback:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，如果第一个验证没有通过，我们需要检查我们将用户重定向到的路由是否具有经过身份验证的`meta`属性，并检查它是否为`false`值。如果验证通过，我们将执行`next`回调：
- en: '[PRE108]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Finally, if none of our validations pass, execute the `next` callback, passing
    `''/login''` as an argument:'
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果我们的任何验证都没有通过，执行`next`回调，传递`'/login'`作为参数：
- en: '[PRE109]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Adding the metadata and the middleware to the router
  id: totrans-557
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将元数据和中间件添加到路由器
- en: 'After creating our middleware, we need to define which routes will be authenticated
    and which routes won''t. Then we have to import the middleware to the router and
    define it when it is executed:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完我们的中间件后，我们需要定义哪些路由将被验证，哪些路由不会被验证。然后我们需要将中间件导入到路由器中，并在执行时定义它：
- en: Open `user.js` in the `src/router` folder.
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中打开`user.js`。
- en: 'In each `route` object, add a new property called `meta`. This property will
    be an object with an authenticated `key`and a `value` defined as `true`. We need
    to do this to every route – even the children''s routes:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个`route`对象中，添加一个名为`meta`的新属性。这个属性将是一个对象，具有一个经过身份验证的`key`和一个值定义为`true`。我们需要对每个路由都这样做
    - 即使是子路由：
- en: '[PRE110]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Open `index.js` in the `src/router` folder.
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中打开`index.js`。
- en: 'Import the newly created middleware and the `Login` view component:'
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入新创建的中间件和`Login`视图组件：
- en: '[PRE111]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Create a new `route` object for the login page view. This route object will
    have `path` set to `''/login''`, `name` defined as `''login''`, `component` defined
    as `Login`, and the `meta` property will have the `authenticated` key with the
    value set to `false`:'
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为登录页面视图创建一个新的`route`对象。这个路由对象将`path`设置为`'/login'`，`name`定义为`'login'`，`component`定义为`Login`，并且`meta`属性将具有`authenticated`键，其值设置为`false`：
- en: '[PRE112]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'On the error handling route, we''ll define the `meta` property `authenticated` as
    `false` because the login view is a public route:'
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在错误处理路由上，我们将定义`meta`属性`authenticated`为`false`，因为登录视图是一个公共路由：
- en: '[PRE113]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Finally, after the creation of the `router` constructor, we need to inject
    the middleware in the `beforeEach` execution:'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在创建了`router`构造函数之后，我们需要在`beforeEach`执行中注入中间件：
- en: '[PRE114]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: How it works...
  id: totrans-571
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Router guards work as middleware; they have a hook that is executed in each
    life cycle of the `vue-router` process. For the purposes of this recipe, we chose
    the `beforeEach` hook to add our middleware.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 路由守卫作为中间件工作；它们在`vue-router`进程的每个生命周期中都有一个钩子被执行。对于这个示例，我们选择了`beforeEach`钩子来添加我们的中间件。
- en: In this hook, we checked whether the user was authenticated and whether the
    user needed authentication to navigate the route or not. After checking these
    variables, we continued the process by sending the user to the route they needed.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个钩子中，我们检查用户是否经过了身份验证，以及用户是否需要身份验证才能导航到该路由。在检查了这些变量之后，我们通过将用户发送到他们需要的路由来继续这个过程。
- en: See also
  id: totrans-574
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about vue-router router guards at [https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards](https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards).
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards](https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards)找到有关vue-router路由守卫的更多信息。
- en: Lazy loading your pages asynchronously
  id: totrans-576
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步加载您的页面
- en: Components can be loaded when needed, and so can routes. Using lazy loading
    techniques with `vue-router` allows more code-splitting and smaller final bundles
    in your application.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以在需要时加载，路由也可以。使用`vue-router`的惰性加载技术可以在应用程序中进行更多的代码拆分和更小的最终捆绑包。
- en: In this recipe, we will learn how to transform routes in order to load them
    asynchronously.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何转换路由以异步加载它们。
- en: Getting ready
  id: totrans-579
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The pre-requisite for this recipe is as follows:'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件如下：
- en: Node.js 12+
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@vue/cli`'
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli`'
- en: '`@vue/cli-service-global`'
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@vue/cli-service-global`'
- en: How to do it...
  id: totrans-585
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating an authentication middleware*' recipe, or we can start a new
    one.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的组件，我们将使用在“*创建身份验证中间件*”配方中使用的Vue项目与Vue-CLI，或者我们可以启动一个新的项目。
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动新的路由管理器，请打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE115]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Choose the manual features and add `Router` as a required feature, as indicated
    in the '*How to do it...*' section in the '*Creating a simple route*' recipe.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 选择手动功能，并将“Router”添加为所需的功能，如“*如何做...*”部分和“*创建简单路由*”配方中所示。
- en: 'Our recipe will be divided into two parts:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方将分为两部分：
- en: Updating the router manager
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新路由管理器
- en: Updating the user routes
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新用户路由
- en: Let's get started.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Updating the router manager
  id: totrans-594
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新路由管理器
- en: 'To update the router manager, follow these instructions:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新路由管理器，请按照以下说明进行操作：
- en: Open the `index.js` file in the `src/router` folder.
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中打开`index.js`文件。
- en: 'In each route that has a `component` property, we will transform the direct
    attribution of the component to a new function. This will be an arrow function
    returning the `import()` method of webpack:'
  id: totrans-597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个具有“component”属性的路由中，我们将把组件的直接赋值转换为一个新函数。这将是一个返回webpack的`import()`方法的箭头函数：
- en: '[PRE116]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Repeat the process on each one of the `route` objects that has a `component`
    property.
  id: totrans-599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个具有“component”属性的“route”对象上重复此过程。
- en: Updating the user routes
  id: totrans-600
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新用户路由
- en: 'To update the user routes, follow these instructions:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新用户路由，请按照以下说明进行操作：
- en: Open the `user.js` file in the `src/router` folder.
  id: totrans-602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router`文件夹中打开`user.js`文件。
- en: 'In each route that has a `component` property, we will transform the direct
    attribution of the component to a new function. This will be an arrow function
    returning the `import()` method of webpack:'
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个具有“component”属性的路由中，我们将把组件的直接赋值转换为一个新函数。这将是一个返回webpack的`import()`方法的箭头函数。
- en: '[PRE117]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Repeat the process on each one of the `route` objects that has a `component` property.
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个具有“component”属性的“route”对象上重复此过程。
- en: How it works...
  id: totrans-606
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In ECMAScript, `export` and `import` are objects with predefined values when
    we use the `export default` method. This means that when we `import` a new component,
    this component is already being pointed to the `default export` of that file.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 在ECMAScript中，当我们使用`export default`方法时，`export`和`import`是具有预定义值的对象。这意味着当我们`import`一个新组件时，该组件已经指向该文件的`default
    export`。
- en: To carry out the lazy loading process, we need to pass a function that will
    be executed at runtime, and the return of that function will be the part of the
    code that webpack divides in the bundling process.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行延迟加载过程，我们需要传递一个在运行时执行的函数，该函数的返回值将是webpack在捆绑过程中分割的代码的一部分。
- en: When we call this function in `vue-router`, instead of the direct component
    import, `vue-router` does a validation check that the present component import
    is a function and needs to be executed. After the execution of the function, the
    response is used as the component that will be displayed on the user's screen.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在`vue-router`中调用这个函数时，`vue-router`不直接导入组件，而是进行验证检查，确保当前组件导入是一个需要执行的函数。在函数执行后，响应被用作将显示在用户屏幕上的组件。
- en: Because the webpack `import()` method is asynchronous, this process can happen
    alongside other code execution, without tempering or blocking the main thread
    of the JavaScript VM.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 由于webpack的`import()`方法是异步的，这个过程可以与其他代码执行同时进行，而不会干扰或阻塞JavaScript虚拟机的主线程。
- en: See also
  id: totrans-611
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can find more information about `vue-router` lazy loading at [https://router.vuejs.org/guide/advanced/lazy-loading.html.](https://router.vuejs.org/guide/advanced/lazy-loading.html)
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://router.vuejs.org/guide/advanced/lazy-loading.html](https://router.vuejs.org/guide/advanced/lazy-loading.html)找到有关`vue-router`延迟加载的更多信息。
- en: You can find more information about `webpack` code-splitting at [https://webpack.js.org/guides/code-splitting/.](https://webpack.js.org/guides/code-splitting/)
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://webpack.js.org/guides/code-splitting/](https://webpack.js.org/guides/code-splitting/)找到有关`webpack`代码拆分的更多信息。
- en: You can find more information about the ECMAScript dynamic import proposal at [https://github.com/tc39/proposal-dynamic-import.](https://github.com/tc39/proposal-dynamic-import)
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/tc39/proposal-dynamic-import](https://github.com/tc39/proposal-dynamic-import)找到有关ECMAScript动态导入提案的更多信息。
