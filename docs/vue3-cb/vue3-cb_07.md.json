["```js\n> npm install -g @vue/cli @vue/cli-service-global\n```", "```js\n> vue create initial-vuex\n```", "```js\n? Please pick a preset: (Use arrow keys)\n default (babel, eslint)\n\u276f Manually select features\n```", "```js\n?  Check the features needed for your project: (Use arrow keys) \u276f Babel\n TypeScript Progressive Web App (PWA) Support \u276f Router \u276f Vuex\n  CSS Pre-processors \u276f Linter / Formatter\n Unit Testing E2E Testing\n```", "```js\n?  Pick a linter / formatter config: (Use arrow keys) ESLint with error prevention only \u276f **ESLint + Airbnb config** ESLint + Standard config \n  ESLint + Prettier\n```", "```js\n?  Pick additional lint features: (Use arrow keys)  Lint on save \u276f Lint and fix on commit\n```", "```js\n?  Where do you prefer placing config for Babel, ESLint, etc.?  (Use \n  arrow keys) \u276f **In dedicated config files****In package.json** \n```", "```js\n?  Save this as a preset for future projects?  (y/N) n\n```", "```js\nstate: {\n  counter: 0,\n},\n```", "```js\nmutations: {\n  increment: (state) => {\n    state.counter += 1;\n  },\n  decrement: (state) => {\n    state.counter -= 1;\n  },\n},\n```", "```js\nactions: {\n increment({ commit }) {\n commit('increment');\n },\n decrement({ commit }) {\n commit('decrement');\n },\n},  \n```", "```js\n<script>\n  export default {}; </script>\n```", "```js\ncomputed: {\n  counter() {\n  return this.$store.state.counter;\n  }, },\n```", "```js\nmethods: {\n  increment() {\n  this.$store.dispatch('increment');\n  },\n  decrement() {\n  this.$store.dispatch('decrement');\n  }, },\n```", "```js\n<button @click=\"increment\">+</button>\n```", "```js\n<button @click=\"decrement\">-</button>\n```", "```js\n> npm run serve\n```", "```js\n> vue create vuex-store\n```", "```js\n> vue ui\n```", "```js\nimport './server/server'; import Vue from 'vue'; import App from './App.vue'; import Vuesax from 'vuesax'; import './style.css'; import router from './router' import store from './store'   Vue.use(Vuesax);   Vue.config.productionTip = false;   new Vue({\n  router,\n  store,\n  render: h => h(App) }).$mount('#app');\n```", "```js\nconst generateState = () => ({\n  data: {\n  usersList: [],\n  userData: {\n  name: '',\n  email: '',\n  birthday: '',\n  country: '',\n  phone: '',\n  },\n  },\n  loading: false,\n  error: null, });\n```", "```js\nexport default { ...generateState() };\n```", "```js\nimport state from './state';\n```", "```js\nexport default {\n  state, };  \n```", "```js\nimport Vue from 'vue'; import Vuex from 'vuex'; import UserStore from './user';\n```", "```js\nexport default new Vuex.Store({\n  ...UserStore, })\n```", "```js\n> vue create vuex-store\n```", "```js\nexport default {\n  LOADING: 'LOADING',\n  ERROR: 'ERROR',\n  SET_USER_LIST: 'SET_USER_LIST',\n  SET_USER_DATA: 'SET_USER_DATA',\n  UPDATE_USER: 'UPDATE_USER',\n  REMOVE_USER: 'REMOVE_USER', }\n```", "```js\nimport MT from './types';\n```", "```js\nconst setLoading = state => {\n  state.loading = true; };\n```", "```js\nconst setError = (state, payload) => {\n  state.loading = false;\n  state.error = payload; };\n```", "```js\nconst setUserList = (state, payload) => {\n  state.data.usersList = payload;\n  state.loading = false;\n  state.error = null; };\n```", "```js\nconst setUserData = (state, payload) => {\n  state.data.userData = payload;\n  state.loading = false;\n  state.error = null; };\n```", "```js\nconst updateUser = (state, payload) => {\n  const userIndex = state.data.usersList.findIndex(u => u.id === \n     payload.id);\n  if (userIndex > -1) {\n state.data.usersList[userIndex] = payload;\n  }\n state.loading = false;\n  state.error = null; };\n```", "```js\nconst removeUser = (state, payload) => {\n  const userIndex = state.data.usersList.findIndex(u => u.id === \n     payload);\n  if (userIndex > -1) {\n state.data.usersList.splice(userIndex, 1);\n  }\n state.loading = false;\n  state.error = null; };\n```", "```js\nexport default {\n [MT.LOADING]: setLoading,\n [MT.ERROR]: setError,\n [MT.SET_USER_LIST]: setUserList,\n [MT.SET_USER_DATA]: setUserData,\n [MT.UPDATE_USER]: updateUser,\n [MT.REMOVE_USER]: removeUser, }\n```", "```js\nimport state from './state';\nimport mutations from './mutations';\n\nexport default {\n  state,\n  mutations,\n};\n```", "```js\n> vue create vuex-store\n```", "```js\nfunction getUsersList(state) {\n  return state.data.usersList;\n}\n```", "```js\nfunction getUserData(state) {\n  return state.data.userData; }\n```", "```js\nfunction getUserById(state) {\n  return (userId) => {\n return state.data.usersList.find(u => u.id === userId);\n  } }\n```", "```js\nfunction isLoading(state) {\n  return state.loading;\n}\n```", "```js\nfunction hasError(state) {\n  return state.error;\n}\n```", "```js\nexport default {\n  getUsersList,\n  getUserData,\n  getUserById,\n  isLoading,\n  hasError, };  \n```", "```js\nimport state from './state';\nimport mutations from './mutations';\nimport getters from './getters';\n\nexport default {\n  state,\n  mutations,\n  getters,\n};\n```", "```js\n> vue create vuex-store\n```", "```js\nimport {\n  getHttp,\n  patchHttp,\n  deleteHttp,\n  postHttp,\n} from '@/http/fetchApi';\nimport MT from './types';\n```", "```js\nasync function createUser({ commit }, userData) {\n  try {\n commit(MT.LOADING);\n  await postHttp(`/api/users`, {\n  data: {\n  ...userData,\n  }\n });\n  commit(MT.SET_USER_DATA, userData);\n  } catch (error) {\n commit(MT.ERROR, error);\n  } }\n```", "```js\nasync function fetchUsersList({ commit }) {\n  try {\n  commit(MT.LOADING);\n    const { data } = await getHttp(`api/users`);\n    commit(MT.SET_USER_LIST, data);\n  } catch (error) {\n  commit(MT.ERROR, error);\n  } }\n```", "```js\nasync function fetchUserData({ commit }, userId) {\n  try {\n commit(MT.LOADING);\n  const { data } = await getHttp(`api/users/${userId}`);\n  commit(MT.SET_USER_DATA, data);\n  } catch (error) {\n commit(MT.ERROR, error);\n  } }\n```", "```js\nasync function updateUser({ commit }, payload) {\n  try {\n  commit(MT.LOADING);\n    await patchHttp(`api/users/${payload.id}`, {\n  data: {\n  ...payload,\n      }\n });\n    commit(MT.UPDATE_USER, payload);\n  } catch (error) {\n  commit(MT.ERROR, error);\n  } }\n```", "```js\nasync function removeUser({ commit }, userId) {\n  try {\n  commit(MT.LOADING);\n    await deleteHttp(`api/users/${userId}`);\n    commit(MT.REMOVE_USER, userId);\n  } catch (error) {\n  commit(MT.ERROR, error);\n  } } \n```", "```js\nexport default {\n  createUser,\n  fetchUsersList,\n  fetchUserData,\n  updateUser,\n  removeUser, }   \n```", "```js\nimport state from './state';\nimport mutations from './mutations';\nimport getters from './getters';\nimport actions from './actions';\n\nexport default {\n  state,\n  mutations,\n  getters,\n  actions,\n};\n```", "```js\n> vue create vuex-store\n```", "```js\nimport changeRouteMixin from '@/mixin/changeRoute'; \n```", "```js\nmixins: [changeRouteMixin],\n```", "```js\ncomputed: {\n  userList() {\n  return this.$store.getters.getUsersList;\n  }, },  \n```", "```js\n<template>\n <vs-table\n  :data=\"userList\"\n  search\n stripe pagination max-items=\"10\"\n  style=\"width: 100%; padding: 20px;\"\n  >\n <template slot=\"thead\">\n <vs-th sort-key=\"name\">\n  #\n      </vs-th>\n <vs-th sort-key=\"name\">\n  Name\n      </vs-th>\n <vs-th sort-key=\"email\">\n  Email\n      </vs-th>\n <vs-th sort-key=\"country\">\n  Country\n      </vs-th>\n <vs-th sort-key=\"phone\">\n  Phone\n      </vs-th>\n <vs-th sort-key=\"Birthday\">\n  Birthday\n      </vs-th>\n <vs-th>\n  Actions\n      </vs-th>\n </template>\n <template slot-scope=\"{data}\">\n <vs-tr :key=\"index\" v-for=\"(tr, index) in data\">\n <vs-td :data=\"data[index].id\">\n  {{data[index].id}}\n        </vs-td>\n <vs-td :data=\"data[index].name\">\n  {{data[index].name}}\n        </vs-td>\n <vs-td :data=\"data[index].email\">\n <a :href=\"`mailto:${data[index].email}`\">\n  {{data[index].email}}\n          </a>\n </vs-td>\n <vs-td :data=\"data[index].country\">\n  {{data[index].country}}\n        </vs-td>\n <vs-td :data=\"data[index].phone\">\n  {{data[index].phone}}\n        </vs-td>\n <vs-td :data=\"data[index].birthday\">\n  {{data[index].birthday}}\n        </vs-td>\n <vs-td :data=\"data[index].id\">\n <vs-button\n  color=\"primary\"\n  type=\"filled\"\n  icon=\"remove_red_eye\"\n  size=\"small\"\n  @click=\"changeRoute('view', data[index].id)\"\n  />\n <vs-button\n  color=\"success\"\n  type=\"filled\"\n  icon=\"edit\"\n  size=\"small\"\n  @click=\"changeRoute('edit', data[index].id)\"\n  />\n <vs-button\n  color=\"danger\"\n  type=\"filled\"\n  icon=\"delete\"\n  size=\"small\"\n  @click=\"deleteUser(data[index].id)\"\n  />\n </vs-td>\n </vs-tr>\n </template>\n </vs-table> </template>  \n```", "```js\nimport changeRouteMixin from '@/mixin/changeRoute'; import UserTableList from '@/components/userList';\n```", "```js\ncomponents: { UserTableList },\n```", "```js\nasync getAllUsers() {\n  this.$store.dispatch('fetchUsersList'); },\n```", "```js\nasync deleteUser(id) {\n  this.$store.dispatch('removeUser', id);\n  await this.getAllUsers(); },\n```", "```js\n<vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"12\">\n <user-table-list /> </vs-col>  \n```", "```js\nuserData() {\n  return this.$store.getters.getUserData; },\n```", "```js\nasync getUserById() {\n  await this.$store.dispatch('fetchUserData', this.userId); },\n```", "```js\n<user-form\n  :value=\"userData\"\n  disabled />\n```", "```js\ndata: () => ({\n  tmpUserData: {\n  name: '',\n  email: '',\n  birthday: '',\n  country: '',\n  phone: '',\n  }, }),\n```", "```js\nuserData() {\n  return this.$store.getters.getUserData; }\n```", "```js\nwatch: {\n  userData: {\n  handler(newData) {\n  this.tmpUserData = newData;\n  },\n  immediate: true,\n  deep: true,\n  } },\n```", "```js\nasync getUserById() {\n  await this.$store.dispatch('fetchUserData', this.userId); },\n```", "```js\nasync updateUser() {\n  await this.$store.dispatch('updateUser', this.tmpUserData);\n  this.changeRoute('list'); },\n```", "```js\n<vs-col\n  vs-type=\"flex\"\n  vs-justify=\"left\"\n  vs-align=\"left\"\n  vs-w=\"12\"\n  style=\"margin: 20px\" >\n <user-form\n  v-model=\"tmpUserData\"\n  /> </vs-col>\n```", "```js\nasync createUser() {\n  await this.$store.dispatch('createUser', this.userData);\n  this.changeRoute('list'); },  \n```", "```js\n> vue create vuex-store\n```", "```js\nexport const store = new Vuex.Store({\n  ...UserStore, });\n```", "```js\nif (module.hot) {}\n```", "```js\nconst hmr = [\n  './user',\n  './user/getters',\n  './user/actions',\n  './user/mutations', ];\n```", "```js\nconst reloadCallback = () => {\n  const getters = require('./user/getters').default;\n  const actions = require('./user/actions').default;\n  const mutations =  require('./user/mutations').default;    store.hotUpdate({\n  getters,\n  actions,\n  mutations,\n  }) };\n```", "```js\nmodule.hot.accept(hmr, reloadCallback);\n```", "```js\nexport default store;  \n```", "```js\n> vue create vuex-store\n```", "```js\nconst generateState = () => ({\n  data: {\n  username: '',\n  token: '',\n  expiresAt: null,\n  },\n  loading: false,\n  error: null, });\n```", "```js\nexport default { ...generateState() };\n```", "```js\nimport state from './state';\n```", "```js\nexport default {\n  namespaced: true,\n  state, }; \n```", "```js\nimport Vue from 'vue'; import Vuex from 'vuex'; import UserStore from './user'; import Authentication from './authentication';\n```", "```js\nexport default new Vuex.Store({\n  ...UserStore,\n  modules: {   Authentication,\n  } })  \n```"]