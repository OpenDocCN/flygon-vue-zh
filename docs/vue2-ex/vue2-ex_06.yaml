- en: Caching the Current Folder Structure Using Vuex
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vuex缓存当前文件夹结构
- en: In this chapter, we are going to introduce an official Vue plugin called Vuex.
    Vuex is a state management pattern and library that allows you to have a centralized
    store for all your Vue components, irrelevant of whether they are child components
    or a Vue instance. It gives us a centralized, simple way of keeping our data in
    sync across the whole app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一个名为Vuex的官方Vue插件。Vuex是一种状态管理模式和库，允许您为所有Vue组件拥有一个集中的存储，无论它们是子组件还是Vue实例。它为我们提供了一种集中的、简单的方法来保持整个应用程序中的数据同步。
- en: 'This chapter is going to cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Getting started with Vuex
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用Vuex
- en: Storing and retrieving data from the Vuex store
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Vuex存储中存储和检索数据
- en: Integrating Vuex with our Dropbox app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Vuex与我们的Dropbox应用程序集成
- en: Caching the current Dropbox folder contents and loading data from the store
    if required
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要，从存储中缓存当前Dropbox文件夹内容并加载数据
- en: Instead of requiring custom events and the `$emit` functions on every component,
    and trying to keep components and child components up to date, every part of your
    Vue app can update the central store, and others can react and update their data
    and state based on that information. It also gives us a common place to store
    data so, rather than trying to decide whether it is more semantic to place the
    data object on the component, a parent component, or the Vue instance, we can
    use the Vuex store.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不再需要在每个组件上使用自定义事件和`$emit`函数，并尝试保持组件和子组件的最新状态，您的Vue应用程序的每个部分都可以更新中央存储，并且其他部分可以根据该信息来更新其数据和状态。它还为我们提供了一个共同的存储数据的地方，因此，我们不再需要决定将数据对象放在组件、父组件还是Vue实例上更具语义性，我们可以使用Vuex存储。
- en: Vuex is also integrated into the Vue dev tools—something that is covered in
    the last chapter of this book, [Chapter 12](part0235.html#703K60-985bf4ae118d4f62b18ae64204cb251c), *Using
    Vue Dev Tools and Testing Your SPA*. With the integration of the library, it makes
    debugging and viewing the current and past states of the store easy. The dev tools
    reflect state changes, or data updates, and allow you to inspect each part of
    the store.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex还集成到Vue开发工具中，这是本书的最后一章[第12章](part0235.html#703K60-985bf4ae118d4f62b18ae64204cb251c)《使用Vue
    Dev Tools和测试您的SPA》中介绍的内容。通过集成该库，可以轻松调试和查看存储的当前和过去状态。开发工具反映状态变化或数据更新，并允许您检查存储的每个部分。
- en: As mentioned, Vuex is a state management pattern, which is the source of truth
    for your Vue app. For example, keeping track of a shopping basket or logged in
    user is vital for some apps and could wreak havoc if this data got out of sync
    between components. It is also impossible to pass data between child components
    without using the parent to handle the exchange. Vuex removes this complication
    by handling the storage, mutation, and actions on the data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Vuex是一种状态管理模式，是您的Vue应用程序的真相来源。例如，跟踪购物篮或已登录用户对于某些应用程序至关重要，如果这些数据在组件之间不同步，可能会造成严重问题。而且，如果没有使用父组件来处理数据交换，就无法在子组件之间传递数据。Vuex通过处理数据的存储、变化和操作来消除这种复杂性。
- en: '![](img/00011.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: When initially using Vuex, it may seem quite verbose and like overkill for what
    is required; however, this is a great example of getting to grips with the library.
    More information about Vuex can be found in their documentation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 刚开始使用Vuex时，可能会觉得非常冗长，似乎超出了所需的范围；然而，这是一个很好的例子，可以帮助我们熟悉这个库。有关Vuex的更多信息可以在它们的文档中找到。
- en: For our Dropbox app, the Vuex store can be utilized to store the folder structure,
    file list, and download links. This means if a user visits the same folder more
    than once, the API will not need to be queried as all the information is stored
    already. This will speed up the navigation of the folders.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的Dropbox应用程序，可以利用Vuex存储文件夹结构、文件列表和下载链接。这意味着如果用户多次访问同一个文件夹，API将不需要查询，因为所有信息已经存储。这将加快文件夹的导航速度。
- en: Including and initializing Vuex
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包括和初始化Vuex
- en: The Vuex library is included the same way as Vue itself. You can either use
    a hosted version by using the previously mentioned unpkg service ([https://unpkg.com/vuex](https://unpkg.com/vuex))
    or you can download the JavaScript library from their [https://github.com/vuejs/vuex](https://github.com/vuejs/vuex).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex库的包含方式与Vue本身相同。您可以使用之前提到的unpkg服务（[https://unpkg.com/vuex](https://unpkg.com/vuex)）使用托管版本，或者您可以从他们的[https://github.com/vuejs/vuex](https://github.com/vuejs/vuex)下载JavaScript库。
- en: 'Add a new `<script>` block to the bottom of your HTML file. Ensure the Vuex
    library is included after your `vue.js` library but before your application JavaScript:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML文件底部添加一个新的`<script>`块。确保在应用程序JavaScript之前，但在`vue.js`库之后包含Vuex库：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you are deploying an app with several JavaScript files, it is worth investigating
    whether it is more efficient to combine and compress them into one file or configure
    your server to use HTTP/2 push.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在部署具有多个JavaScript文件的应用程序，值得调查是否将它们合并和压缩为一个文件或配置服务器使用HTTP/2推送更高效。
- en: 'With the library included, we can initialize and include the store within our
    app. Create a new variable called a `store` and initialize the `Vuex.Store` class,
    assigning it to the variable:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 包含库后，我们可以初始化并在应用程序中包含存储。创建一个名为`store`的新变量，并初始化`Vuex.Store`类，将其分配给该变量：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the Vuex store initialized, we can now utilize its functionality with the
    `store` variable. Using `store`, we can access the data within and alter that
    data with mutations. With an independent `store`, many Vue instances could update
    the same `store`; this may be desired in some instances, but, it could be an undesirable
    side effect in others.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化Vuex存储后，我们现在可以使用`store`变量来利用其功能。使用`store`，我们可以访问其中的数据，并通过mutations修改该数据。使用独立的`store`，许多Vue实例可以更新相同的`store`；这在某些情况下可能是需要的，但在其他情况下可能是一个不希望的副作用。
- en: 'To circumvent this, we can associate a store with a specific Vue instance.
    This is done by passing the `store` variable to our Vue class. Doing this also
    injects the `store` instance into all our child components. Although not strictly
    required for our app, it''s good practice to get into the habit of associating
    the store with the app:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，我们可以将存储与特定的Vue实例关联起来。这是通过将`store`变量传递给我们的Vue类来完成的。这样做还将`store`实例注入到所有子组件中。虽然对于我们的应用程序来说不是严格要求的，但将存储与应用程序关联起来是一个好的实践：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With the `store` variable added, we can now access the `store` in our components
    using the `this.$store` variable.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了`store`变量后，我们现在可以使用`this.$store`变量在组件中访问`store`。
- en: Utilizing the store
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用存储
- en: 'To help us get to grips with how to use the store, let''s move the `path` variable
    that is currently stored on the parent Vue instance. Before we start writing and
    moving code, there are a few phrases and words that are different when using the
    Vuex store and we should familiarize ourselves with them:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们掌握如何使用存储，让我们将当前存储在父Vue实例上的`path`变量移动起来。在开始编写和移动代码之前，有一些使用Vuex存储时不同的短语和词汇，我们应该熟悉一下：
- en: '`state`: This is the store''s equivalent of the data object; the raw data is
    stored within this object.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`：这是存储等效数据对象；原始数据存储在此对象中。'
- en: '`getters`: These are the Vuex equivalent of computed values; the function of
    the `store` that may process the raw state value before returning it for use in
    a component.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getters`：这些是Vuex中与计算值相当的对象；`store`的函数可以在返回给组件使用之前处理原始状态值。'
- en: '`mutations`: Vuex doesn''t allow modification of the state object directly
    outside of the `store` and this must be done via a mutation handler; these are
    functions on the `store` that then allow the state to be updated. They always
    take `state` as the first parameter.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mutations`：Vuex不允许直接在`store`之外修改state对象，必须通过变异处理程序来完成；这些是`store`上的函数，允许更新状态。它们总是以`state`作为第一个参数。'
- en: 'These objects belong directly in the `store`. Updating the `store`, however,
    is not as simple as calling `store.mutationName()`. Instead, we must call the
    method by using a new `commit()` function. This function accepts two parameters:
    the name of the mutation and the data being passed to it.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对象直接属于`store`。然而，更新`store`并不像调用`store.mutationName()`那样简单。相反，我们必须使用一个新的`commit()`函数来调用该方法。该函数接受两个参数：变异的名称和传递给它的数据。
- en: 'Although initially difficult to understand, the verbose nature of the Vuex
    store allows for powerful capabilities. An example of the store in action, adapting
    the original example from Chapter 1, *Getting Started with Vue.js*, is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然最初很难理解，但是Vuex store的冗长性允许强大的功能。下面是一个使用store的示例，将第1章《开始使用Vue.js》中的原始示例进行了调整：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding `store` example includes the `state` object, which is our raw
    data store; a `getters` object, which includes our processing of the state; and
    finally, a `mutations` object, which allows us to update the message. Notice how
    both the `message` getter and the `updateMessage` mutation have the store's state
    as the first parameter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`store`示例包括`state`对象，它是我们的原始数据存储；`getters`对象，其中包括我们对状态的处理；最后，`mutations`对象，允许我们更新消息。请注意，`message`
    getter和`updateMessage`变异都将store的state作为第一个参数。
- en: 'To use this `store`, you could do the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个`store`，你可以这样做：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Retrieving the message
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索消息
- en: 'In the `{{ message }}` computed function, we have retrieved the raw, unprocessed
    message from the state object and used the following path:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`{{ message }}`计算函数中，我们从state对象中检索了原始的、未经处理的消息，并使用了以下路径：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is literally accessing the `store`, then the state object, followed by
    the message object key.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是访问`store`，然后是state对象，然后是message对象键。
- en: 'In a similar vein, the `{{ formatted }}` computed value uses the getter from
    the `store`, which lowercases the string. This is retrieved by accessing the `getters`
    object instead:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`{{ formatted }}`计算值使用`store`的getter，将字符串转换为小写。这是通过访问`getters`对象来检索的：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Updating the message
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新消息
- en: To update the message, you need to call the `commit` function. This accepts
    the method name as the first parameter with the payload, or data, being the second.
    The payload can be either a simple variable, an array, or an object if several
    variables need to be passed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新消息，您需要调用`commit`函数。这个函数接受方法名称作为第一个参数，载荷或数据作为第二个参数。如果需要传递多个变量，载荷可以是一个简单的变量、数组或对象。
- en: 'The `updateMessage` mutation in the `store` accepts a single parameter and
    sets the message to equal that, so to update our message the code would be:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`store`中的`updateMessage`变异接受一个参数，并将消息设置为相等，所以要更新我们的消息，代码应该是：'
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This can be run anywhere in the app and will automatically update the previous
    values used, as they all rely on the same `store`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在应用程序的任何地方运行，并且会自动更新之前使用的值，因为它们都依赖于同一个`store`。
- en: Returning our message getter now would return VUEX Store, as we've updated the
    state. With that in mind, let's update our app to use a path variable in the `store`,
    rather than the Vue instance.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在返回我们的message getter将返回VUEX Store，因为我们已经更新了state。考虑到这一点，让我们更新我们的应用程序，使用store中的路径变量，而不是Vue实例。
- en: Using the Vuex store for the folder path
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vuex store来获取文件夹路径
- en: 'The first step in using the Vue store for our global Dropbox path variable
    is to move the data object from the Vue instance to the `Store`, and rename it
    to `state`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue store作为全局Dropbox路径变量的第一步是将数据对象从Vue实例移动到`Store`，并将其重命名为`state`：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We also need to create a mutation to allow the path to be updated from the
    hash of the URL. Add a `mutations` object to the store and move the `updateHash`
    function from the Vue instance—don''t forget to update the function to accept
    the store as the first parameter. Also, change the method so it updates `state.path`
    rather than `this.path`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个mutation，允许从URL的哈希值更新路径。在store中添加一个`mutations`对象，并将`updateHash`函数从Vue实例中移动过来，不要忘记更新函数以接受store作为第一个参数。还要更改方法，使其更新`state.path`而不是`this.path`：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'By moving the path variable and mutation to the store, it makes the Vue instance
    significantly smaller, with both the `methods` and `data` objects being removed:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将路径变量和mutation移动到store中，可以显著减小Vue实例的大小，同时删除`methods`和`data`对象：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We now need to update our app to use the path variable from the `store`, instead
    of on the Vue instance. We also need to ensure we call the `store` `mutation`
    function to update the path variable instead of the method on the Vue instance.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要更新我们的应用程序，使用来自`store`的路径变量，而不是在Vue实例上。我们还需要确保调用`store`的`mutation`函数来更新路径变量，而不是在Vue实例上的方法。
- en: Updating the path methods to use store commits
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新路径方法以使用store的commits
- en: Start with the Vue instance, changing `this.Updatehash` to `store.commit('updateHash')`
    instead. Don't forget to also update the method in the `onhashchange` function.
    The second function should reference the `store` object on our Vue instance, rather
    than the `store` directly. This is done by accessing the Vue instance variable,
    `app`, and then referencing the Vuex store in this instance.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从Vue实例开始，将`this.Updatehash`改为`store.commit('updateHash')`。不要忘记在`onhashchange`函数中也更新这个方法。第二个函数应该引用我们Vue实例上的`store`对象，而不是直接引用`store`。这可以通过访问Vue实例变量`app`，然后在这个实例中引用Vuex
    store来完成。
- en: 'When referring to the Vuex store on a Vue instance, it is saved under the variable
    as `$store`, regardless of the variable name it was initially declared against:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Vue实例上引用Vuex store时，它保存在变量`$store`下，无论最初对该变量的名称是什么：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using the path variable
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路径变量
- en: We now need to update the components to use the path from the `store`, rather
    than one passed down through components. Both `breadcrumb` and `dropbox-viewer`
    need to be updated to accept this new variable. We can also remove unneccesary
    props from the components.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要更新组件，使用来自`store`的路径，而不是通过组件传递的路径。`breadcrumb`和`dropbox-viewer`都需要更新以接受这个新变量。我们还可以从组件中删除不必要的props。
- en: Updating the breadcrumb component
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新breadcrumb组件
- en: 'From the HTML, remove the `:p` prop, leaving a simple breadcrumb HTML tag:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从HTML中删除`:p` prop，只留下一个简单的breadcrumb HTML标签：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, remove the `props` object from the component in the JavaScript file.
    The `parts` variable will also need to be updated to use `this.$store.state.path`,
    instead of `this.p`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从JavaScript文件中的组件中删除`props`对象。`parts`变量也需要更新为使用`this.$store.state.path`，而不是`this.p`：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Updating the dropbox-viewer component to work with Vuex
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新dropbox-viewer组件以与Vuex配合使用
- en: 'As with the `breadcrumb` component, the first step is to remove the HTML prop
    from the view. This should simplify the view of your app even more and you should
    be left with a handful of HTML tags:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与`breadcrumb`组件一样，第一步是从视图中删除HTML属性。这将进一步简化您的应用程序视图，您将只剩下一些HTML标签：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The next step is to clean up the JavaScript, removing any unnecessary function
    parameters. Remove the `props` object from the `dropbox-viewer` component. Next,
    update the `filesListFolder` Dropbox method located inside `getFolderStructure` to
    use the store path, instead of using the path variable:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是清理JavaScript代码，删除任何不必要的函数参数。从`dropbox-viewer`组件中删除`props`对象。接下来，更新`getFolderStructure`中的`filesListFolder`
    Dropbox方法，使用存储路径而不是使用路径变量：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As this method is now using the `store`, instead of a function parameter, we
    can remove the variable from the method declaration itself, along with removing
    it from the `updateStructure` method and from whenever these two functions get
    called. For example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此方法现在使用`store`而不是函数参数，因此我们可以从方法声明本身中删除变量，以及从`updateStructure`方法和调用这两个函数的任何地方删除变量。例如：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This would become the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将变为以下内容：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We do, however, still need to store the path as a variable on this component.
    This is due to our `watch` method, which calls the `updateStructure` function.
    To do this, we need to store our path as a computed value, rather than a fixed
    variable. This is so it can dynamically update when the `store` updates, rather
    than a fixed value when the component gets initialized.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们仍然需要将路径存储为此组件上的变量。这是由于我们的`watch`方法调用`updateStructure`函数。为此，我们需要将路径存储为计算值，而不是固定变量。这样可以在`store`更新时动态更新，而不是在组件初始化时固定值。
- en: 'Create a computed object on the `dropbox-viewer` component with a method called
    `path`—this should just return the `store` path:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dropbox-viewer`组件上创建一个计算对象，其中包含一个名为`path`的方法-这只需返回`store`路径：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We now have it as a local variable, so the Dropbox `filesListFolder` method
    can be updated to once again use `this.path`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将其作为局部变量，因此Dropbox的`filesListFolder`方法可以再次使用`this.path`。
- en: 'The newly-updated `dropbox-viewer` component should look like the following.
    Viewing the app in your browser, it should appear as though nothing has changed—however,
    the inner workings of the app are now reliant on the new Vuex store, rather than
    a variable stored on the Vue instance:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 新更新的`dropbox-viewer`组件应该如下所示。在浏览器中查看应用程序时，应该看不出任何变化-然而，应用程序的内部工作现在依赖于新的Vuex存储，而不是存储在Vue实例上的变量：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Caching the folder contents
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存文件夹内容
- en: Now that we have Vuex in our app and are utilizing it for the path, we can begin
    to look at storing the contents of the currently-displayed folder so that if the
    user returns to the same place, the API does not need to be queried to retrieve
    the results. We are going to do this by storing the object returned by the API
    the Vuex store.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序中有了Vuex，并且正在使用它来存储路径，我们可以开始考虑存储当前显示文件夹的内容，以便如果用户返回到相同的位置，API不需要查询以检索结果。我们将通过将API返回的对象存储在Vuex存储中来实现这一点。
- en: When the folder gets requested, the app will check whether the data exists in
    the store. If it does, the API call will be omitted and the data loaded from the
    storage. If it doesn't exist, the API will be queried and the results saved in
    the Vuex store.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求文件夹时，应用程序将检查存储中是否存在数据。如果存在，则会省略API调用，并从存储中加载数据。如果不存在，则会查询API并将结果保存在Vuex存储中。
- en: The first step is to separate out the data processing into its own method. This
    is because the files and folders are going to need to be split regardless of whether
    the data comes from the store or API.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将数据处理分离到自己的方法中。这是因为无论数据来自存储还是API，文件和文件夹都需要被拆分。
- en: Create a new method in the `dropbox-viewer` component titled `createFolderStructure()` and
    move the code from inside the `then()` function, following the Dropbox `filesListFolder` method.
    Call the new method inside this function instead.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dropbox-viewer`组件中创建一个名为`createFolderStructure()`的新方法，并将代码从`then()`函数内部移动到Dropbox的`filesListFolder`方法之后。在此函数内部调用新方法。
- en: 'Your two methods should now look like the following, and your app should still
    be working as it was before:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的两个方法应该如下所示，并且您的应用程序应该仍然正常工作：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Using promises, we can use `createFolderStructure` as the action for the API
    call.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Promise，我们可以将`createFolderStructure`作为API调用的操作。
- en: 'The next step is to store the data we are processing. To do this, we are going
    to take advantage of the ability to pass an object to the `commit` function of
    the `store` and use the path as the key in the storage object. Rather than nest
    the file structures, we are going to store the information in a flat structure.
    For example, after we''ve navigated through a few folders, our store would look
    like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是存储正在处理的数据。为此，我们将利用将对象传递给存储的`commit`函数的能力，并将路径用作存储对象中的键。我们将不会嵌套文件结构，而是将信息存储在一个扁平的结构中。例如，在浏览了几个文件夹后，我们的存储将如下所示：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There will be several transformations made to the path to make it object key-friendly.
    It will be lowercased and any punctuation will be removed. We will also replace
    all spaces and slashes with hyphens.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将对路径进行几个转换，使其适合作为对象键。将其转换为小写，并删除任何标点符号。我们还将用连字符替换所有空格和斜杠。
- en: 'To begin, create an empty object in the Vuex store state object titled `structure`;
    this is where we are going to store the data:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在Vuex存储状态对象中创建一个名为`structure`的空对象；这是我们将存储数据的地方：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We now need to create a new `mutation`, to allow us to store the data as we
    load it. Create a new function inside the `mutations` object. Call it `structure`; it
    needs to accept the `state` as a parameter, plus a `payload` variable which will
    be an object passed in:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个新的`mutation`，以便在加载数据时存储数据。在`mutations`对象内创建一个名为`structure`的新函数。它需要接受`state`作为参数，以及一个作为对象传递的`payload`变量：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The path object will consist of a `path` variable, plus the `data` returned
    from the API. For example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 路径对象将包括一个`path`变量和从API返回的`data`。例如：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With this object being passed in, we can use the path as the key and the data
    as the value. Store the data with a key of the path inside the mutation:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传入该对象，我们可以使用路径作为键，数据作为值。使用路径作为键将数据存储在变异中：
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can now commit this data at the end of our new `createFolderStructure` method
    in our component:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在组件的新`createFolderStructure`方法的末尾提交这些数据：
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will now store each folder's data when navigating through the app. This
    can be verified by adding a `console.log(state.structure)` inside the structure
    mutation.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过应用程序导航时，这将存储每个文件夹的数据。可以通过在结构变异中添加`console.log(state.structure)`来验证这一点。
- en: Although this works as is, it would be good practice to sanitize the path when
    using it as the key in an object. To do this, we are going to remove any punctuation,
    replace any spaces and slashes with hyphens, and change the path to lowercase.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这样可以工作，但最好在将其用作对象键时对路径进行清理。为此，我们将删除任何标点符号，用连字符替换任何空格和斜杠，并将路径改为小写。
- en: 'Create a new computed function called `slug` on the `dropbox-viewer` component.
    The term slug is often used for sanitized URLs and originates from newspapers
    and how editors used to reference stories. This function will run several JavaScript
    `replace` methods to create a safe object key:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dropbox-viewer`组件上创建一个名为`slug`的新计算函数。术语“slug”通常用于消毒URL，并源自报纸和编辑如何引用故事的方式。该函数将运行多个JavaScript
    `replace`方法来创建一个安全的对象键：
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The slug function carries out the following operations. An example path ofimg/iPhone/mom''s
    Birthday - 40th` would be affected in the following way:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: slug函数执行以下操作。例如路径img/iPhone/mom's Birthday - 40th`将受到以下影响：
- en: Convert the string to lowercase:img/iphone/mom's birthday - 40th`
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符串转换为小写：img/iphone/mom's birthday - 40th`
- en: Remove any slashes at the beginning and end of the path: `images/iphone/mom
    birthday - 40th`
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除路径开头和结尾的任何斜杠：`images/iphone/mom birthday - 40th`
- en: Replace any spaces with hyphens: `images/iphone/mom-birthday---40th`
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将任何空格替换为连字符：`images/iphone/mom-birthday---40th`
- en: Replace any slashes with hyphens: `images-iphone-mom-birthday---40th`
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将任何斜杠替换为连字符：`images-iphone-mom-birthday---40th`
- en: Replace any multiple hyphens with just a singular hyphen: `images-iphone-mom-birthday-40th`
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将多个连字符替换为单个连字符：`images-iphone-mom-birthday-40th`
- en: Finally, remove any punctuation: `images-iphone-moms-birthday-40th`
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，删除任何标点符号：`images-iphone-moms-birthday-40th`
- en: 'With the slug now created, we can use this as the key when storing the data:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用这个slug作为存储数据时的键：
- en: '[PRE28]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: With our folder contents now being cached in the Vuex store, we can add a check
    to see whether the data exists in the store and if it does, load it from there.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的文件夹内容已经缓存在Vuex存储中，我们可以添加一个检查来查看数据是否存在于存储中，如果存在，则从存储中加载数据。
- en: Loading data from the store if it exists
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果存在，则从存储中加载数据
- en: Loading our data from the store requires a couple of changes to our code. The
    first step is to check whether the structure exists in the `store` and if it does,
    load it. The second step is to only commit the data to storage if it is new data—calling
    the existing `createFolderStructure` method will update the structure but also
    re-commit the data to storage. Although not detrimental to the user as it currently
    stands, unnecessarily writing data to the `store` could cause issues when your
    app grows. This will also help us when we come to precaching the folders and files.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从存储中加载数据需要对我们的代码进行一些更改。第一步是检查`store`中是否存在结构，如果存在，则加载它。第二步是仅在数据是新数据时将数据提交到存储中-调用现有的`createFolderStructure`方法将更新结构，但也会重新提交数据到存储中。尽管当前情况对用户没有害处，但在应用程序增长时，不必要地将数据写入`store`可能会引起问题。这也将在我们进行文件夹和文件的预缓存时对我们有所帮助。
- en: Loading the data from the store
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从存储中加载数据
- en: 'As a `store` is a JavaScript object and our `slug` variable is a consistent
    computed value on our component, we can check whether the object key exists with
    an `if` statement:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`store`是一个JavaScript对象，而我们的`slug`变量是组件上一个一致的计算值，我们可以使用`if`语句来检查对象键是否存在：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This gives us the flexibility to load the data from the `store` if it exists,
    using the `createFolderStructure` method and, if not, trigger the Dropbox API
    call.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够根据数据是否存在于存储中来加载数据，使用`createFolderStructure`方法，如果不存在，则触发Dropbox API调用。
- en: 'Update the `getFolderStructure` method to include the `if` statement and add
    the method call if the data exists:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`getFolderStructure`方法以包含`if`语句，并在数据存在时添加方法调用：
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The path to the data is quite long and can make our code unreadable. To make
    it easier to understand, assign the data to a variable, which allows us to check
    whether it exists and returns the data with cleaner, smaller, and less repeatable
    code. It also means we only have to update one line if the path to our data changes:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 数据路径非常长，可能会使我们的代码难以阅读。为了更容易理解，将数据分配给一个变量，这样我们可以检查它是否存在，并以更干净、更简洁、更少重复的代码返回数据。这也意味着如果数据路径发生变化，我们只需要更新一行代码：
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Only storing new data
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅存储新数据
- en: As mentioned earlier, the current `createFolderStructure` method both displays
    the structure and caches the response in the `store`, thus re-saving the structure
    even when the data is loaded from the cache.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当前的`createFolderStructure`方法既显示结构，又将响应缓存到`store`中，因此即使从缓存中加载数据，也会重新保存结构。
- en: 'Create a new method that the Dropbox API will fire once the data has loaded.
    Call it `createStructureAndSave`. This should accept the response variable as
    its only parameter:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的方法，Dropbox API在数据加载完成后将调用它。将其命名为`createStructureAndSave`。它应该接受响应变量作为唯一参数：
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can now move the `store` `commit` function from the `createFolderStructure`
    method into this new one, along with a call to fire the existing method with the
    data:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将`store`的`commit`函数从`createFolderStructure`方法中移动到这个新方法中，同时调用现有方法来处理数据：
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Lastly, update the Dropbox API function to call this method:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更新Dropbox API函数来调用这个方法：
- en: '[PRE34]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Open your app in the browser and navigate through the folders. When you navigate
    back up using the breadcrumb, the response should be a lot quicker—as it is now
    loading from the cache you've created instead of querying the API every time.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开你的应用程序并浏览文件夹。当你使用面包屑导航返回时，响应应该更快，因为它现在是从你创建的缓存中加载，而不是每次都查询API。
- en: In [Chapter 7](part0118.html#3GH2C0-985bf4ae118d4f62b18ae64204cb251c), *Pre-Caching
    Other Folders and Files for Faster Navigation*, we will be looking at precaching
    the folders to try and preempt where the user is heading next. We will also look
    at caching the download links for the files.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](part0118.html#3GH2C0-985bf4ae118d4f62b18ae64204cb251c)中，*预缓存其他文件夹和文件以加快导航速度*，我们将尝试预缓存文件夹，以预测用户接下来要访问的位置。我们还将查看缓存文件的下载链接。
- en: 'Our full app JavaScript should now look like:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完整的应用程序JavaScript现在应该如下所示：
- en: '[PRE35]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After this chapter, your app should now be integrated with Vuex and be caching
    the contents of the Dropbox folders. The Dropbox folder path should also be utilizing
    the `store` to make the app more efficient. We are also querying the API only
    when we need to.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章之后，你的应用程序现在应该与Vuex集成，并缓存Dropbox文件夹的内容。Dropbox文件夹路径也应该利用`store`来使应用程序更高效。我们只在需要时查询API。
- en: In [Chapter 7](https://cdp.packtpub.com/vue_js_by_example/wp-admin/post.php?post=71&action=edit#post_82), *Pre-Caching
    Other Folders and Files for Faster Navigation*, we will look at precaching the
    folders—actively querying the API in advance to speed up the app navigation and
    usability.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](https://cdp.packtpub.com/vue_js_by_example/wp-admin/post.php?post=71&action=edit#post_82)中，*预缓存其他文件夹和文件以加快导航速度*，我们将看到预缓存文件夹-提前主动查询API以加快应用程序的导航和可用性。
