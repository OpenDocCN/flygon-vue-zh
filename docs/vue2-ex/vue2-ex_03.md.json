["```js\n      const app = new Vue({\n        el: '#app',\n        data: {\n          people: [...],\n          currency: '$',\n          filterField: '',\n          filterQuery: '',\n          filterUserState: ''\n        },\n        methods: {\n          activeStatus(person) {\n            return (person.isActive) ? 'Active' : \n             'Inactive';\n          },\n          activeClass(person) {\n            return person.isActive ? 'active' : \n            'inactive';\n          },\n          balanceClass(person) {\n            let balanceLevel = 'success';\n            if(person.balance < 2000) {\n              balanceLevel = 'error';\n            } else if (person.balance < 3000) {\n              balanceLevel = 'warning';\n            }\n            let increasing = false,\n            balance = person.balance / 1000;\n            if(Math.round(balance) == \n             Math.ceil(balance)) {\n              increasing = 'increasing';\n            }\n            return [balanceLevel, increasing];\n          },\n          formatBalance(balance) {\n            return this.currency + balance.toFixed(2);\n          },\n          formatDate(date) {\n            let registered = new Date(date);\n            return registered.toLocaleString('en-US');\n          },\n          filterRow(person) {\n            let result = true;\n            if(this.filterField) {\n              if(this.filterField === 'isActive') {\n                result = (typeof this.filterUserState \n                 === 'boolean') ? (this.filterUserState \n                 === person.isActive) : true;\n              } else {\n                let query = this.filterQuery,\n                    field = person[this.filterField];\n                if(typeof field === 'number') {\n                  query.replace(this.currency, '');\n                  try {\n                    result = eval(field + query);\n                  } catch(e) {}\n                } else {\n                  field = field.toLowerCase();\n                  result =        \n            field.includes(query.toLowerCase());\n                }\n              }\n            }\n            return result;\n          },\n          isActiveFilterSelected() {\n            return (this.filterField === 'isActive');\n          }\n        }\n      });\n```", "```js\n      data: {\n        people: [..],\n        currency: '$',\n        filter: {\n          field: '',\n          query: '',\n          userState: '',\n        }\n      }\n```", "```js\n      isActiveFilterSelected() {\n        return (this.filter.field === 'isActive');\n      }\n```", "```js\n      if(this.filter.field === 'isActive') {\n        result = (typeof this.filter.query ===        \n       'boolean') ? (this.filter.query ===             \n        person.isActive) : true;\n         } else {\n        let query = String(this.filter.query),\n            field = person[this.filter.field];\n           if(typeof field === 'number') {\n           query.replace(this.currency, '');\n          try {\n            result = eval(field + query);\n          } catch(e) {}\n        } else {\n          field = field.toLowerCase();\n          result = field.includes(query.toLowerCase());\n        }\n```", "```js\n      <select v-on:change=\"changeFilter($event)\"     \n       id=\"filterField\">\n        <option value=\"\">Disable filters</option>\n        <option value=\"isActive\">Active user</option>\n        <option value=\"name\">Name</option>\n        <option value=\"email\">Email</option>\n        <option value=\"balance\">Balance</option>\n        <option value=\"registered\">Date \n         registered</option>\n      </select>\n```", "```js\n      changeFilter(event) {\n        this.filter.query = '';\n        this.filter.field = event.target.value;\n      }\n```", "```js\n      {{ format(person.balance) }}\n```", "```js\n      format(variable) {\n        switch (typeof variable) {\n          case 'string':\n          // Formatting if the variable is a string\n          break;\n          case 'number':\n          // Number formatting\n          break;\n          default:\n          // Default formatting\n          break;\n        }\n      }\n```", "```js\n      {{ format(person.balance, 'currency') }}\n```", "```js\n      <td v-bind:class=\"balanceClass(person)\">\n        {{ format(person, 'balance') }}\n      </td>\n      <td>\n        {{ format(person, 'registered') }}\n      </td>\n```", "```js\n      format(person, key) {\n        let field = person[key],\n            output = field.toString().trim();      \n        return output;\n      }\n```", "```js\n      format(person, key) {\n        let field = person[key],\n            output = field.toString().trim();\n\n        switch(key) {\n case 'balance':\n break;\n case 'registered':\n break;\n }\n        return output;\n      }\n```", "```js\n      format(person, key) {\n        let field = person[key],\n            output = field.toString().trim();\n\n        switch(key) {\n          case 'balance':\n            output = this.currency + field.toFixed(2);\n            break;\n\n          case 'registered':\n           let registered = new Date(field);\n output = registered.toLocaleString('en-US');\n          break;\n        }\n        return output;\n      }\n```", "```js\n      case 'registered':\n case 'deactivated':\n        let registered = new Date(field);\n        output = registered.toLocaleString('en-US');\n        break;\n```", "```js\n      ...\n\n    if(this.filter.field === 'isActive') {\n    result = (typeof this.filter.query === 'boolean') ?       \n    (this.filter.query === person.isActive) : true;\n      } else {\n\n      ...\n```", "```js\n      ...\n\n    if(this.isActiveFilterSelected()) {\n    result = (typeof this.filter.query === 'boolean') ?     \n     (this.filter.query === person.isActive) : true;\n     } else {\n\n      ...\n```", "```js\n      filterRow(person) {\n        let visible = true,\n field = this.filter.field,\n query = this.filter.query;      ...\n```", "```js\n      if(field) {\n          if(this.isActiveFilterSelected()) {\n            visible = (typeof query === 'boolean') ?   \n            (query === person.isActive) : true;\n          } else {\n\n          query = String(query),\n          field = person[field];\n```", "```js\n      const app = new Vue({\n        el: '#app',\n         data: {\n          people: [...],\n          currency: '$',\n          filter: {\n            field: '',\n            query: ''\n          }\n        },\n        methods: {\n          isActiveFilterSelected() {\n            return (this.filter.field === 'isActive');\n          },\n          /**\n           * CSS Classes\n           */\n          activeClass(person) {\n             return person.isActive ? 'active' : \n             'inactive';\n          },\n           balanceClass(person) {\n            let balanceLevel = 'success';\n            if(person.balance < 2000) {\n              balanceLevel = 'error';\n            } else if (person.balance < 3000) {\n              balanceLevel = 'warning';\n            }\n                let increasing = false,\n                balance = person.balance / 1000;\n            if(Math.round(balance) == \n             Math.ceil(balance)) {\n              increasing = 'increasing';\n            }\n            return [balanceLevel, increasing];\n          },\n          /**\n           * Display\n           */\n          format(person, key) {\n            let field = person[key],\n            output = field.toString().trim();\n            switch(key) {\n              case 'balance':\n                output = this.currency + \n              field.toFixed(2);\n                break;\n              case 'registered':\n          let registered = new Date(field);\n          output = registered.toLocaleString('en-US');\n          break;  \n        case 'isActive':\n          output = (person.isActive) ? 'Active' : \n          'Inactive';\n            }\n        return output;\n          },  \n          /**\n           * Filtering\n           */\n          changeFilter(event) {\n            this.filter.query = '';\n            this.filter.field = event.target.value;\n          },\n          filterRow(person) {\n            let visible = true,\n                field = this.filter.field,\n                query = this.filter.query; \n            if(field) {  \n              if(this.isActiveFilterSelected()) {\n                visible = (typeof query === 'boolean') ?\n               (query === person.isActive) : true;\n              } else { \n                query = String(query),\n                field = person[field];\n                if(typeof field === 'number') {\n                  query.replace(this.currency, '');  \n                  try {\n                    visible = eval(field + query);\n                  } catch(e) {}  \n                } else {  \n                  field = field.toLowerCase();\n                  visible = \n                  field.includes(query.toLowerCase());         \n                }\n              }\n            }\n            return visible;\n          }\n        }\n      });\n```", "```js\n      <my-component></my-component>\n```", "```js\n      <div>Hello</div><div>Goodbye</div>\n```", "```js\n Vue.component('my-component', {\n template: '<div>hello</div>'\n });\n\n      const app = new Vue({\n        el: '#app',\n\n       // App options\n      });\n```", "```js\n      let Child = {\n        template: '<div>hello</div>'\n      }\n\n      const app = new Vue({\n        el: '#app',\n\n        // App options\n\n        components: {\n          'my-component': Child\n        }\n      });\n```", "```js\n      <div id=\"app\">\n        <my-component></my-component>\n      </div>\n```", "```js\n      <ol>\n        <li is=\"my-component\"></li>\n      </ol>\n```", "```js\n      Vue.component('balance', {\n        template: '<div></div>',\n        data() {\n          return {\n\n          }\n        },\n        computed: {\n\n        }\n      });\n```", "```js\n      Vue.component('balance', {\n        template: '<div>{{ cost }}</div>',\n        data() {\n          return {\n            cost: 1234\n          }\n        },\n        computed: {\n\n        }\n      });\n```", "```js\n      Vue.component('balance', {\n        template: '<div>{{ formattedCost }}</div>',\n        data() {\n          return {\n            cost: 1234,\n            currency: '$'\n          }\n        },\n        computed: {\n          formattedCost() {\n return this.currency + this.cost.toFixed(2);\n }\n        }\n      });\n```", "```js\n      Vue.component('heading', {\n        template: '<h1>{{ text }}</h1>',\n\n        props: ['text']\n      });\n```", "```js\n      <heading text=\"Hello!\"></heading>\n```", "```js\n      <balance cost=\"1234\"></balance> \n```", "```js\n      template: '<div>{{ formattedCost }}</div>',\n props: ['cost'],\n      data() {\n        return {\n          currency: '$'\n        }\n      },\n```", "```js\n      <balance v-bind:cost=\"15234\"></balance> \n```", "```js\n      props: {\n cost: Number\n },\n```", "```js\n      props: {\n        cost: {\n          type: Number,\n default: 0\n }\n      },\n```", "```js\n      Vue.component('balance', {\n        template: '<div>{{ formattedCost }}</div>',\n\n        props: {\n          cost: {\n            type: Number,\n            default: 0\n          }\n        },\n\n        data() {\n          return {\n            currency: '$'\n          }\n        },\n\n        computed: {\n          formattedCost() {\n            return this.currency +       \n            this.cost.toFixed(2);\n          }\n        }\n      });\n```", "```js\n      Vue.component('modal-window', {\n        template: `<div class=\"modal fade\">\n          <div class=\"modal-dialog\" role=\"document\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n               <button type=\"button\" class=\"close\" \n               data-dismiss=\"modal\" aria-label=\"Close\">\n               <span aria-hidden=\"true\">&times;</span>\n              </button>\n             </div>\n          <div class=\"modal-body\">\n          </div>\n           <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-  \n             primary\">Save changes</button>\n            <button type=\"button\" class=\"btn btn-      \n             secondary\" data-dismiss=\"modal\">Close\n            </button>\n            </div>\n          </div>\n         </div>\n      </div>`,\n\n      props: {\n        visible: {\n          type: Boolean,\n          default: false\n        }\n       }\n    });\n```", "```js\n      Vue.component('modal-window', {\n          template: `<div class=\"modal fade\" v-\n            show=\"visible\">\n          ...\n        </div>`,\n\n        props: {\n          visible: {\n            type: Boolean,\n            default: false\n          }\n        }\n      });\n```", "```js\n      <modal-window :visible=\"true\"></modal-window>\n```", "```js\n      <modal-window :visible=\"true\">\n        <h1>Modal Title</h1>\n <p>Lorem ipsum dolor sit amet, consectetur                \n         adipiscing elit. Suspendisse ut rutrum ante, a          \n         ultrices felis. Quisque sodales diam non mi            \n         blandit dapibus. </p>\n <p>Lorem ipsum dolor sit amet, consectetur             \n          adipiscing elit. Suspendisse ut rutrum ante, a             \n          ultrices felis. Quisque sodales diam non mi             \n          blandit dapibus. </p>\n       </modal-window>\n```", "```js\n      Vue.component('modal-window', {\n        template: `<div class=\"modal fade\" v-      \n        show=\"visible\">\n          <div class=\"modal-dialog\" role=\"document\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n          <button type=\"button\" class=\"close\" data-              \n              dismiss=\"modal\" aria-label=\"Close\">\n               <span aria-hidden=\"true\">&times;</span>\n             </button>\n              </div>\n              <div class=\"modal-body\">\n                <slot></slot>\n              </div>\n              <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-  \n             primary\">Save changes</button>\n             <button type=\"button\" class=\"btn btn-                   \n               secondary\" data-\n            dismiss=\"modal\">Close</button>\n           </div>\n           </div>\n        </div>\n        </div>`,\n\n         props: {\n          visible: {\n            type: Boolean,\n            default: false\n          }\n        }\n      });\n```", "```js\n      template: `<div class=\"modal fade\" v-              \n      show=\"visible\">\n        <div class=\"modal-dialog\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <slot name=\"header\"></slot>\n              <button type=\"button\" class=\"close\" data-\n               dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n           <div class=\"modal-body\">\n            <slot></slot>\n          </div>\n          <div class=\"modal-footer\">\n            <slot name=\"footer\"></slot>\n            <button type=\"button\" class=\"btn btn-  \n            primary\">Save changes</button><button type=\"button\" class=\"btn btn-\n           secondary\" data-\n           dismiss=\"modal\">Close</button>\n           </div>\n        </div>\n       </div>\n     </div>`,\n```", "```js\n      <modal-window :visible=\"true\">\n        <h1 slot=\"header\">Modal Title</h1>\n\n        <p>Lorem ipsum dolor sit amet, consectetur             \n        adipiscing elit. Suspendisse ut rutrum ante, a \n        ultrices felis. Quisque sodales diam non mi \n         blandit dapibus. </p>\n\n        <p slot=\"footer\">Lorem ipsum dolor sit amet,            \n         consectetur adipiscing elit. Suspendisse ut \n         rutrum ante, a ultrices felis. Quisque sodales \n           diam non mi blandit dapibus. </p>\n      </modal-window>\n```", "```js\n      template: `<div class=\"modal fade\" v-\n      show=\"visible\">\n        <div class=\"modal-dialog\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <slot name=\"header\"></slot>\n              <button type=\"button\" class=\"close\" data-\n              dismiss=\"modal\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            <div class=\"modal-body\">\n              <slot></slot>\n            </div>\n            <div class=\"modal-footer\">\n              <slot name=\"footer\"></slot>\n              <slot name=\"buttons\">\n                <button type=\"button\" class=\"btn btn-\n                 primary\">Save changes</button>\n                <button type=\"button\" class=\"btn btn-\n                 secondary\" data-\n                 dismiss=\"modal\">Close</button>\n              </slot>\n            </div>\n          </div>\n        </div>\n      </div>`,\n```", "```js\n\n     <modal-window :visible=\"true\">\n     <h1 slot=\"header\">Modal Title</h1>\n      <p>Lorem ipsum dolor sit amet, consectetur \n      adipiscing elit. Suspendisse ut rutrum ante, a \n      ultrices felis. Quisque sodales diam non mi blandit \n      dapibus. </p>\n\n        <p slot=\"footer\">Lorem ipsum dolor sit amet, \n       consectetur adipiscing elit. Suspendisse ut rutrum \n       ante, a ultrices felis. Quisque sodales diam non mi \n       blandit dapibus. </p>\n\n        <div slot=\"buttons\">\n <button type=\"button\" class=\"btn btn-      \n           primary\">Ok</button> </div>\n       </modal-window>\n```", "```js\n      Vue.component('team-member', {\n        props: {\n          person: Object\n        }\n      });\n```", "```js\n      <script type=\"text/x-template\" id=\"team-member-            \n       template\">\n      </script>\n```", "```js\n      <script type=\"text/x-template\" id=\"team-member-\n      template\">\n        <tr v-show=\"filterRow(person)\">\n <td>\n {{ person.name }}\n </td>\n <td>\n <a v-bind:href=\"'mailto:' + person.email\">{{                \n             person.email }}</a>\n </td>\n <td v-bind:class=\"balanceClass(person)\">\n {{ format(person, 'balance') }}\n </td>\n <td>\n {{ format(person, 'registered') }}\n </td>\n <td v-bind:class=\"activeClass(person)\">\n {{ format(person, 'isActive') }}\n </td>\n </tr>\n      </script>\n```", "```js\n      <table>\n       <template v-for=\"individual in people\">\n       </template>\n      </table>\n```", "```js\n      <table>\n        <template v-for=\"individual in people\">\n          <team-member v-bind:person=\"individual\"></team-           \n            member>\n        </template>\n      </table>\n```", "```js\n      Vue.component('team-member', {\n        template: '#team-member-template',\n        props: {\n          person: Object\n        }\n      });\n```", "```js\n      <script type=\"text/x-template\" id=\"team-member-             \n        template\">\n        <tr v-show=\"filterRow()\">\n          <td>\n            {{ person.name }}\n          </td>\n        </tr>\n      </script>\n```", "```js\n computed: {\n        /**\n         * CSS Classes\n         */\n        activeClass() {\n          return this.person.isActive ? 'active' : \n      'inactive';\n        },\n\n        balanceClass() {\n          let balanceLevel = 'success';\n\n          if(this.person.balance < 2000) {\n            balanceLevel = 'error';\n          } else if (this.person.balance < 3000) {\n            balanceLevel = 'warning';\n          }\n\n          let increasing = false,\n              balance = this.person.balance / 1000;\n\n          if(Math.round(balance) == Math.ceil(balance)) {\n            increasing = 'increasing';\n          }\n\n          return [balanceLevel, increasing];\n        }\n },\n```", "```js\n      <td v-bind:class=\"balanceClass\">\n    {{ format(person, 'balance') }}\n      </td>\n```", "```js\n      data() {\n        return {\n          currency: '$'\n        }\n      },\n```", "```js\n      Vue.component('team-member', {\n        template: '#team-member-template',\n        props: {\n          person: Object \n       },\n        data() {\n          return {\n            currency: '$'\n          }\n        },\n        computed: {\n          /**\n           * CSS Classes\n           */\n          activeClass() {\n            return this.person.isActive ? 'active' : \n            'inactive';\n          },\n          balanceClass() {\n            let balanceLevel = 'success';   \n            if(this.person.balance < 2000) {\n              balanceLevel = 'error';\n            } else if (this.person.balance < 3000) {\n              balanceLevel = 'warning';\n            }\n          let increasing = false,\n                balance = this.person.balance / 1000; \n            if(Math.round(balance) == Math.ceil(balance))                           \n            {\n              increasing = 'increasing';\n            }\n            return [balanceLevel, increasing];\n          }, \n          /**\n           * Fields\n           */\n          balance() {\n            return this.currency +       \n            this.person.balance.toFixed(2);\n          },\n          dateRegistered() {\n            let registered = new \n            Date(this.person.registered);\n            return registered.toLocaleString('en-US');\n          },\n          status() {\n            return (this.person.isActive) ? 'Active' : \n            'Inactive';\n          }\n        }\n      });\n```", "```js\n      <script type=\"text/x-template\" id=\"team-member-\n      template\">\n        <tr v-show=\"filterRow()\">\n          <td>\n            {{ person.name }}\n          </td>\n          <td>\n            <a v-bind:href=\"'mailto:' + person.email\">{{ \n            person.email }}</a>\n          </td>\n          <td v-bind:class=\"balanceClass\">\n            {{ balance }}\n          </td>\n          <td>\n            {{ dateRegistered }}\n          </td>\n          <td v-bind:class=\"activeClass\">\n            {{ status }}\n          </td>\n        </tr>\n      </script>\n```", "```js\n      const app = new Vue({\n        el: '#app',\n        data: {\n          people: [...],\n          filter: {\n            field: '',\n            query: ''\n          }\n        },\n        methods: {\n          isActiveFilterSelected() {\n            return (this.filter.field === 'isActive');\n          },   \n          /**\n           * Filtering\n           */\n          filterRow(person) {\n            let visible = true,\n                field = this.filter.field,\n                query = this.filter.query;  \n            if(field) {   \n              if(this.isActiveFilterSelected()) {\n                visible = (typeof query === 'boolean') ? \n                  (query === person.isActive) : true;\n              } else {\n                query = String(query),\n                field = person[field]; \n          if(typeof field === 'number') {\n            query.replace(this.currency, '');\n                  try {\n                    visible = eval(field + query);\n                  } catch(e) {}   \n                } else {\n                  field = field.toLowerCase();\n                  visible = \n                  field.includes(query.toLowerCase())  \n                }\n              }\n            }\n            return visible;\n          }\n          changeFilter(event) {\n            this.filter.query = '';\n            this.filter.field = event.target.value;\n          }\n        }\n      });\n```", "```js\nProperty or method \"filterRow\" is not defined on the instance but referenced during render\n```", "```js\n      filterRow() {\n        let visible = true,\n            field = this.filter.field,\n            query = this.filter.query;\n            if(field) {\n            if(this.isActiveFilterSelected()) {\n            visible = (typeof query === 'boolean') ?                 \n           (query === this.person.isActive) : true;\n            } else {\n\n            query = String(query),\n            field = this.person[field];\n\n            if(typeof field === 'number') {\n              query.replace(this.currency, '');\n              try {\n                visible = eval(field + query);\n              } catch(e) {}\n              } else {\n\n              field = field.toLowerCase();\n              visible = \n            field.includes(query.toLowerCase());\n            }\n          }\n        }\n        return visible;\n      }\n```", "```js\nCannot read property 'field' of undefined\n```", "```js\n      props: {\n        person: Object,\n        filter: Object\n      },\n```", "```js\n      <table>\n        <template v-for=\"individual in people\">\n          <team-member v-bind:person=\"individual\" v-               \n           bind:filter=\"filter\"></team-member>\n        </template>\n      </table>\n```", "```js\n      Vue.component('team-member', {\n        template: '#team-member-template',\n        props: {\n          person: Object,\n          filter: Object,\n          statusFilter: Boolean\n        },\n        data() {\n          return {\n            currency: '$'\n          }\n        },\n        computed: {\n          /**\n           * CSS Classes\n           */\n          activeClass() {\n            return this.person.isActive ? 'active' : \n            'inactive';\n            },\n            balanceClass() {\n            let balanceLevel = 'success';\n\n         if(this.person.balance < 2000) {\n           balanceLevel = 'error';\n          } else if (this.person.balance < 3000) {\n            balanceLevel = 'warning';\n          }\n          let increasing = false,\n            balance = this.person.balance / 1000;\n           if(Math.round(balance) == Math.ceil(balance)) {\n             increasing = 'increasing';\n          }\n          return [balanceLevel, increasing];\n        },\n       /**\n       * Fields\n         */\n       balance() {\n       return this.currency +    \n       this.person.balance.toFixed(2);\n       },\n      dateRegistered() {\n       let registered = new Date(this.registered); \n        return registered.toLocaleString('en-US');\n        },\n        status() {\n           return output = (this.person.isActive) ?    \n          'Active' : 'Inactive';\n         }\n       },\n       methods: {\n        filterRow() {\n         let visible = true,\n            field = this.filter.field,\n            query = this.filter.query;\n\n         if(field) {  \n           if(this.statusFilter) {\n             visible = (typeof query === 'boolean') ? \n            (query === this.person.isActive) : true;\n           } else {\n             query = String(query),\n            field = this.person[field];  \n              if(typeof field === 'number') {\n                query.replace(this.currency, '');  \n                 try {\n                 visible = eval(field + query);\n                } catch(e) {\n            } \n           } else {   \n            field = field.toLowerCase();\n            visible = field.includes(query.toLowerCase());\n             }\n            }\n           }\n           return visible;\n        }\n       }\n     });\n```", "```js\n      <template v-for=\"individual in people\">\n          <team-member v-bind:person=\"individual\" v-               bind:filter=\"filter\" v-bind:status-      \n            filter=\"isActiveFilterSelected()\"></team-\n            member>\n       </template>\n```", "```js\n      <div id=\"app\">\n       <filtering></filtering>\n       <table>\n         <template v-for=\"individual in people\">\n           <team-member v-bind:person=\"individual\" v-\n            bind:filter=\"filter\" v-\n            bind:statusfilter=\"isActiveFilterSelected()\">           </team-member>\n         </template>\n       </table>\n      </div>\n\n <script type=\"text/x-template\" id=\"filtering-\n      template\">\n        <form>\n          <label for=\"fiterField\">\n            Field:\n            <select v-on:change=\"changeFilter($event)\"                 id=\"filterField\">\n           <option value=\"\">Disable filters</option>\n           <option value=\"isActive\">Active user</option>\n           <option value=\"name\">Name</option>\n           <option value=\"email\">Email</option>\n           <option value=\"balance\">Balance</option>\n           <option value=\"registered\">Date      \n            registered</option>\n           </select>\n         </label>\n        <label for=\"filterQuery\" v-show=\"this.filter.field \n         && !isActiveFilterSelected()\">\n            Query:\n            <input type=\"text\" id=\"filterQuery\" v-\n            model=\"filter.query\">\n          </label>\n          <span v-show=\"isActiveFilterSelected()\">\n            Active:\n         <label for=\"userStateActive\">\n            Yes:\n             <input type=\"radio\" v-bind:value=\"true\"       id=\"userStateActive\" v-model=\"filter.query\">\n          </label>\n            <label for=\"userStateInactive\">\n            No:\n        <input type=\"radio\" v-bind:value=\"false\" \n        id=\"userStateInactive\" v-model=\"filter.query\">\n         </label>\n       </span>\n      </form>\n </script>\n      <script type=\"text/x-template\" id=\"team-member-\n       template\">\n       // Team member template\n    </script>\n```", "```js\n      Vue.component('filtering', {\n        template: '#filtering-template'\n      });\n```", "```js\n      Vue.component('filtering', {\n        template: '#filtering-template',\n\n        data() {\n return {\n filter: {\n field: '',\n query: ''\n }\n }\n },\n\n methods: {\n isActiveFilterSelected() {\n return (this.filter.field === 'isActive');\n },\n\n changeFilter(event) {\n this.filter.query = '';\n this.filter.field = event.target.value;\n }\n }\n      });\n```", "```js\n      <filtering v-bind:filter=\"filter\"></filtering>\n```", "```js\n      changeFilterField(event) {\n        this.$emit('change-filter-field', \n      event.target.value);\n      }\n```", "```js\n      <filtering v-bind:filter=\"filter\" v-on:change-filter-field=\"changeFilter\"></filtering>\n```", "```js\n      changeFilter(field) {\n        this.filter.query = '';\n        this.filter.field = field;\n      }\n```", "```js\n      watch: {\n        'filter.query': function() {\n        }\n      }\n```", "```js\n     watch: {\n         'filter.query': function() {\n         this.$emit('change-filter-query', \n         this.filter.query)\n         }\n       }\n```", "```js\n      <filtering v-bind:filter=\"filter\" v-on:change-      \n      filter-field=\"changeFilter\" v-on:change-filter-          \n      query=\"changeQuery\"></filtering>\n```", "```js\n     changeQuery(query) {\n       this.filter.query = query;\n     }\n```", "```js\n      Vue.component('team-member', {\n        template: '#team-member-template',\n        props: {\n          person: Object,\n          filter: Object\n        },\n        data() {\n          return {\n            currency: '$'\n          }\n        },\n        computed: {\n          /**\n           * CSS Classes\n           */\n           activeClass() {\n            return this.person.isActive ? 'active' : 'inactive';\n          },\n          balanceClass() {\n            let balanceLevel = 'success';    \n            if(this.person.balance < 2000) {\n              balanceLevel = 'error';\n            } else if (this.person.balance < 3000) {\n              balanceLevel = 'warning';\n            }\n           let increasing = false,\n            balance = this.person.balance / 1000;      \n            if(Math.round(balance) == Math.ceil(balance))             {\n             increasing = 'increasing';\n            } \n            return [balanceLevel, increasing];\n          },\n          /**\n           * Fields\n           */\n          balance() {\n            return this.currency +       \n          this.person.balance.toFixed(2);\n          },\n          dateRegistered() {\n            let registered = new Date(this.registered);  \n            return registered.toLocaleString('en-US');\n          },\n          status() {\n            return output = (this.person.isActive) ? \n           'Active' : 'Inactive';\n          }\n        },\n          methods: {\n          filterRow() {\n            let visible = true,\n            field = this.filter.field,\n            query = this.filter.query;         \n            if(field) {      \n              if(this.filter.field === 'isActive') {\n              visible = (typeof query === 'boolean') ? \n             (query === this.person.isActive) : true;\n              } else {   \n                query = String(query),\n                field = this.person[field]; \n                if(typeof field === 'number') {\n                  query.replace(this.currency, '');\n               try {\n              visible = eval(field + query);\n            } catch(e) {}\n\n          } else {\n\n            field = field.toLowerCase();\n            visible = field.includes(query.toLowerCase());  \n              }\n           }\n          }\n            return visible;\n          }\n          }\n         });\n\n     Vue.component('filtering', {\n     template: '#filtering-template',\n       props: {\n       filter: Object\n     },\n       methods: {\n       isActiveFilterSelected() {\n        return (this.filter.field === 'isActive');\n       },     \n        changeFilterField(event) {\n        this.filedField = '';\n       this.$emit('change-filter-field',                     \n        event.target.value);\n          },\n        },\n        watch: {\n    'filter.query': function() {\n      this.$emit('change-filter-query', this.filter.query)\n          }\n        }\n      });\n\n      const app = new Vue({\n        el: '#app',\n\n        data: {\n          people: [...],\n          filter: {\n            field: '',\n            query: ''\n          }\n        },\n        methods: { \n          changeFilter(field) {\n            this.filter.query = '';\n            this.filter.field = field;\n          },\n          changeQuery(query) {\n            this.filter.query = query;\n          }\n        }\n      });\n```", "```js\n     <div id=\"app\">\n        <filtering v-bind:filter=\"filter\" v-on:change-\n         filter-field=\"changeFilter\" v-on:change-filter-\n          query=\"changeQuery\"></filtering>\n       <table>\n         <template v-for=\"individual in people\">\n          <team-member v-bind:person=\"individual\" v-  \n          bind:filter=\"filter\"></team-member>\n         </template>\n        </table>\n     </div>\n    <script type=\"text/x-template\" id=\"filtering-\n     template\">\n       <form>\n      <label for=\"fiterField\">\n       Field:\n      <select v-on:change=\"changeFilterField($event)\" \n         id=\"filterField\">\n        <option value=\"\">Disable filters</option>\n        <option value=\"isActive\">Active user</option>\n        <option value=\"name\">Name</option>\n        <option value=\"email\">Email</option>\n        <option value=\"balance\">Balance</option>\n        <option value=\"registered\">Date     \n          registered</option>\n         </select>\n          </label>\n         <label for=\"filterQuery\" v-\n         show=\"this.filter.field && \n          !isActiveFilterSelected()\">\n         Query:\n        <input type=\"text\" id=\"filterQuery\" v-    \n         model=\"filter.query\">\n          </label>\n\n          <span v-show=\"isActiveFilterSelected()\">\n           Active:\n\n            <label for=\"userStateActive\">\n              Yes:\n            <input type=\"radio\" v-bind:value=\"true\"   \n          id=\"userStateActive\" v-model=\"filter.query\">\n           </label>\n          <label for=\"userStateInactive\">\n           No:\n            <input type=\"radio\" v-bind:value=\"false\"                 id=\"userStateInactive\" v-model=\"filter.query\">\n            </label>\n          </span>\n        </form>\n      </script>\n      <script type=\"text/x-template\" id=\"team-member-\n      template\">\n        <tr v-show=\"filterRow()\">\n          <td>\n            {{ person.name }}\n          </td>\n          <td>\n            <a v-bind:href=\"'mailto:' + person.email\">{{                person.email }}</a>\n          </td>\n          <td v-bind:class=\"balanceClass\">\n            {{ balance }}\n          </td>\n          <td>\n            {{ dateRegistered }}\n          </td>\n          <td v-bind:class=\"activeClass\">\n            {{ status }}\n          </td>\n        </tr>\n      </script>\n```"]