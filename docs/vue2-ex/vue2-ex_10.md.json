["```js\nconst router = new VueRouter({\n  routes: [\n {\n path: '/',\n name: 'Home',\n component: HomePage\n },\n    {\n      path: '/product/:slug', \n      component: ProductPage\n    },\n\n    {\n      path: '/404', \n      alias: '*',\n      component: PageNotFound\n    }\n  ]\n});\n```", "```js\nconst HomePage = {\n  name: 'HomePage',\n\n  template: `<div v-if=\"products\"></div>`,\n\n  computed: {\n products() {\n return this.$store.state.products;\n }\n }\n};\n```", "```js\ntemplate: `<div v-if=\"products\">\n  <ol>\n <li v-for=\"product in products\" v-if=\"product\">\n <h3>{{ product.title }}</h3>\n </li>\n </ol>\n</div>`,\n```", "```js\nproducts() {\n  let products = this.$store.state.products;\n return Object.keys(products).map(key => products[key]);\n},\n```", "```js\ncomputed: {\n  products() {\n    let products = this.$store.state.products;\n    return Object.keys(products).map(key => products[key]);\n  },\n\n  pagination() {\n if(this.products) {\n\n return {\n\n }\n }\n }\n},\n```", "```js\nconst HomePage = {\n  name: 'HomePage',\n\n  template: `...`,\n\n data() {\n return {\n perPage: 12, \n currentPage: 1\n }\n },\n\n  computed: {\n    ...\n  }\n};\n```", "```js\npagination() {\n  if(this.products) {\n    let totalProducts = this.products.length;\n\n    return {\n totalProducts: totalProducts,\n totalPages: Math.ceil(totalProducts / this.perPage)\n    }\n  }\n}\n```", "```js\npagination() {\n  if(this.products) {\n    let totalProducts = this.products.length,\n      pageFrom = (this.currentPage * this.perPage) - this.perPage;\n\n    return {\n      totalProducts: totalProducts,\n      totalPages: Math.ceil(totalProducts / this.perPage),\n      range: {\n from: pageFrom,\n to: pageFrom + this.perPage\n }\n    }\n  }\n}\n```", "```js\nmethods: {\n  paginate(list) {\n    return list.slice(\n      this.pagination.range.from, \n      this.pagination.range.to\n    );\n  }\n}\n```", "```js\ntemplate: `<div v-if=\"products\">\n  <ol>\n    <li v-for=\"product in paginate(products)\" v-if=\"product\">\n      <h3>{{ product.title }}</h3>\n    </li>\n  </ol>\n</div>`,\n```", "```js\ntemplate: `<div v-if=\"products\">\n  <ol :start=\"pagination.range.from + 1\">\n    <li v-for=\"product in paginate(products)\" v-if=\"product\">\n      <h3>{{ product.title }}</h3>\n    </li>\n  </ol>\n</div>`\n```", "```js\n<button :disabled=\"currentPage == 1\">Previous page</button>\n<button :disabled=\"currentPage == pagination.totalPages\">Next page</button>\n```", "```js\nmethods: {\n toPage(page) {\n this.currentPage = page;\n },\n\n  paginate(list) {\n    return list.slice(this.pagination.range.from, this.pagination.range.to);\n  }\n}\n```", "```js\ntemplate: `<div v-if=\"products\">\n  <button @click=\"toPage(currentPage - 1)\" :disabled=\"currentPage == 1\">Previous page</button>\n  <button @click=\"toPage(currentPage + 1)\" :disabled=\"currentPage == pagination.totalPages\">Next page</button>\n\n  <ol :start=\"pagination.range.from + 1\">\n    <li v-for=\"product in paginate(products)\" v-if=\"product\">\n      <h3>{{ product.title }}</h3>\n    </li>\n  </ol>\n</div>`\n```", "```js\ntemplate: `<div v-if=\"products\">\n  <p>\n Page {{ currentPage }} out of {{ pagination.totalPages }}\n </p>\n  <button @click=\"toPage(currentPage - 1)\" :disabled=\"currentPage == 1\">Previous page</button>\n  <button @click=\"toPage(currentPage + 1)\" :disabled=\"currentPage == pagination.totalPages\">Next page</button>\n\n  <ol :start=\"pagination.range.from + 1\">\n    <li v-for=\"product in paginate(products)\" v-if=\"product\">\n      <h3>{{ product.title }}</h3>\n    </li>\n  </ol>\n</div>`\n```", "```js\ntoPage(page) {\n  this.$router.push({\n query: Object.assign({}, this.$route.query, {\n page\n })\n }); \n  this.currentPage = page;\n},\n```", "```js\ncreated() {\n if(this.$route.query.page) {\n this.currentPage = parseInt(this.$route.query.page);\n }\n}\n```", "```js\n<nav>\n  <ol>\n    <li v-for=\"page in pagination.totalPages\">\n      <button @click=\"toPage(page)\">{{ page }}</button>\n    </li>\n  </ol>\n</nav>\n```", "```js\ndata() {\n  return {\n    perPage: 12, \n    currentPage: 1,\n    pageLinksCount: 3\n  }\n},\n```", "```js\npageLinks() {\n  if(this.products.length) {\n    let negativePoint = parseInt(this.currentPage) - this.pageLinksCount,\n      positivePoint = parseInt(this.currentPage) + this.pageLinksCount;\n\n    if(negativePoint < 1) {\n      negativePoint = 1;\n    }\n\n    if(positivePoint > this.pagination.totalPages) {\n      positivePoint = this.pagination.totalPages;\n    }\n\n    return pages;\n  }\n}\n```", "```js\npageLinks() {\n  if(this.products.length) {\n    let negativePoint = parseInt(this.currentPage) - this.pageLinksCount,\n      positivePoint = parseInt(this.currentPage) + this.pageLinksCount,\n      pages = [];\n\n    if(negativePoint < 1) {\n      negativePoint = 1;\n    }\n\n    if(positivePoint > this.pagination.totalPages) {\n      positivePoint = this.pagination.totalPages;\n    }\n\n    for (var i = negativePoint; i <= positivePoint; i++) {\n pages.push(i)\n }\n\n return pages;\n  }\n}\n```", "```js\n<nav>\n  <ul>\n    <li v-for=\"page in pageLinks\">\n      <button @click=\"toPage(page)\">{{ page }}</button>\n    </li>\n  </ul>\n</nav>\n```", "```js\nwatch: {\n  '$route'(to) {\n    this.currentPage = parseInt(to.query.page) || 1;\n  }\n}\n```", "```js\ntemplate: `<div v-if=\"products\">\n  <p>\n    Page {{ currentPage }} out of {{ pagination.totalPages }}\n  </p>\n\n Products per page: \n <select v-model=\"perPage\">\n <option>12</option>\n <option>24</option>\n <option>48</option>\n <option>60</option>\n </select>\n\n  <button @click=\"toPage(currentPage - 1)\" :disabled=\"currentPage == 1\">Previous page</button>\n  <button @click=\"toPage(currentPage + 1)\" :disabled=\"currentPage == pagination.totalPages\">Next page</button>\n\n  <ol :start=\"pagination.range.from + 1\">\n    <li v-for=\"product in paginate(products)\" v-if=\"product\">\n      <h3>{{ product.title }}</h3>\n    </li>\n  </ol>\n\n  <nav>\n    <ul>\n      <li v-for=\"page in pageLinks\">\n        <button @click=\"toPage(page)\">{{ page }}</button>\n      </li>\n    </ul>\n  </nav>\n</div>\n```", "```js\nwatch: {\n  '$route'(to) {\n    this.currentPage = parseInt(to.query.page);\n  },\n\n  perPage() {\n if(this.currentPage > this.pagination.totalPages) {\n this.$router.push({\n query: Object.assign({}, this.$route.query, {\n page: this.pagination.totalPages\n })\n })\n }\n }\n}\n```", "```js\nconst HomePage = {\n  name: 'HomePage',\n\n  template: `<div>\n    <list-products :products=\"products\"></list-products>\n  </div>`,\n\n  computed: {\n    products() {\n      let products = this.$store.state.products;\n      return Object.keys(products).map(key => products[key]);\n    }\n  }\n};\n```", "```js\nVue.component('list-products', {\n  template: `<div v-if=\"products\">\n    <p v-if=\"pagination.totalPages > 1\">\n      Page {{ currentPage }} out of {{ pagination.totalPages }}\n    </p>\n\n    <div v-if=\"pagination.totalProducts > 12\">\n      Products per page: \n      <select v-model=\"perPage\">\n        <option>12</option>\n        <option>24</option>\n        <option v-if=\"pagination.totalProducts > 24\">48</option>\n        <option v-if=\"pagination.totalProducts > 48\">60</option>\n      </select>\n    </div>\n\n    <button \n      @click=\"toPage(currentPage - 1)\" \n      :disabled=\"currentPage == 1\" \n      v-if=\"pagination.totalPages > 1\"\n    >\n      Previous page\n    </button>\n    <button \n      @click=\"toPage(currentPage + 1)\" \n      :disabled=\"currentPage == pagination.totalPages\" \n      v-if=\"pagination.totalPages > 1\"\n    >\n      Next page\n    </button>\n\n    <ol :start=\"pagination.range.from + 1\">\n      <li v-for=\"product in paginate(products)\" v-if=\"product\">\n        <h3>{{ product.title }}</h3>\n      </li>\n    </ol>\n\n    <nav v-if=\"pagination.totalPages > pageLinksCount\">\n      <ul>\n        <li v-for=\"page in pageLinks\">\n          <button @click=\"toPage(page)\">{{ page }}</button>\n        </li>\n      </ul>\n    </nav>\n  </div>`,\n\n props: {\n products: Array\n },\n\n  data() {\n    return {\n      perPage: 12, \n      currentPage: 1,\n      pageLinksCount: 3\n    }\n  },\n\n  computed: {\n    pagination() {\n      if(this.products) {\n        let totalProducts = this.products.length,\n          pageFrom = (this.currentPage * this.perPage) - this.perPage,\n          totalPages = Math.ceil(totalProducts / this.perPage);\n\n        return {\n          totalProducts: totalProducts,\n          totalPages: Math.ceil(totalProducts / this.perPage),\n          range: {\n            from: pageFrom,\n            to: pageFrom + this.perPage\n          }\n        }\n      }\n    },\n\n    pageLinks() {\n      if(this.products.length) {\n        let negativePoint = this.currentPage - this.pageLinksCount,\n          positivePoint = this.currentPage + this.pageLinksCount,\n          pages = [];\n\n        if(negativePoint < 1) {\n          negativePoint = 1;\n        }\n\n        if(positivePoint > this.pagination.totalPages) {\n          positivePoint = this.pagination.totalPages;\n        }\n\n        for (var i = negativePoint; i <= positivePoint; i++) {\n          pages.push(i)\n        }\n\n        return pages;\n      }\n    }\n  },\n\n  watch: {\n    '$route'(to) {\n      this.currentPage = parseInt(to.query.page);\n    },\n    perPage() {\n      if(this.currentPage > this.pagination.totalPages) {\n        this.$router.push({\n          query: Object.assign({}, this.$route.query, {\n            page: this.pagination.totalPages\n          })\n        })\n      }\n    }\n  },\n\n  created() {\n    if(this.$route.query.page) {\n      this.currentPage = parseInt(this.$route.query.page);\n    }\n  },\n\n  methods: {\n    toPage(page) {\n      this.$router.push({\n        query: Object.assign({}, this.$route.query, {\n          page\n        })\n      });\n\n      this.currentPage = page;\n    },\n\n    paginate(list) {\n      return list.slice(this.pagination.range.from, this.pagination.range.to)\n    }\n  }\n});\n```", "```js\nproducts() {\n  let products = this.$store.state.products;\n  return Object.keys(products).map(key => products[key]).slice(1, 10);\n}\n```", "```js\ndata() {\n  return {\n    selectedProducts: []\n  }\n},\n```", "```js\ndata() {\n  return {\n    selectedProducts: [\n      'adjustable-stem',\n 'colorful-fixie-lima',\n 'fizik-saddle-pak',\n 'kenda-tube',\n 'oury-grip-set',\n 'pure-fix-pedals-with-cages'\n    ]\n  }\n},\n```", "```js\nproducts() {\n  let products = this.$store.state.products;\n\n  products = Object.keys(products).map(key => products[key]);\n  products = products.filter(product => this.selectedProducts.includes(product.handle));\n\n  return products;\n}\n```", "```js\nproducts() {\n  let products = this.$store.state.products,\n    output = [];\n\n  if(Object.keys(products).length) {\n for(let featured of this.selectedProducts) {\n output.push(products[featured]);\n }\n return output;\n }\n}\n```", "```js\n<ol :start=\"pagination.range.from + 1\">\n  <li v-for=\"product in paginate(products)\" v-if=\"product\">\n    <img v-if=\"product.images[0]\" :src=\"product.images[0].source\" :alt=\"product.title\" width=\"120\">\n    <h3>{{ product.title }}</h3>\n    <p>Made by: {{ product.vendor.title }}</p>\n  </li>\n</ol>\n```", "```js\nproductPrice(variations) {\n  let prices = [];\n}\n```", "```js\nproductPrice(variations) {\n  let prices = [];\n\n  for(let variation of variations) {\n if(!prices.includes(variation.price)) {\n prices.push(variation.price);\n }\n }\n}\n```", "```js\nproductPrice(variations) {\n  let prices = [];\n\n  for(let variation of variations) {\n    if(!prices.includes(variation.price)) {\n      prices.push(variation.price);\n    }\n  }\n\n let price = '$' + Math.min(...prices);\n\n if(prices.length > 1) {\n price = 'From: ' + price;\n }\n\n  return price;\n}\n```", "```js\n<ol :start=\"pagination.range.from + 1\">\n  <li v-for=\"product in paginate(products)\" v-if=\"product\">\n    <router-link :to=\"'/product/' + product.handle\">\n      <img v-if=\"product.images[0]\" :src=\"product.images[0].source\" :alt=\"product.title\" width=\"120\">\n    </router-link> \n    <h3>\n      <router-link :to=\"'/product/' + product.handle\">\n        {{ product.title }}\n      </router-link>\n    </h3>\n\n    <p>Made by: {{ product.vendor.title }}</p>\n    <p>Price {{ productPrice(product.variationProducts) }}</p>\n  </li>\n</ol>\n```", "```js\n{\n  path: '/product/:slug',\n  name: 'Product',\n  component: ProductPage\n}\n```", "```js\n<ol :start=\"pagination.range.from + 1\">\n  <li v-for=\"product in paginate(products)\" v-if=\"product\">\n    <router-link :to=\"{name: 'Product', params: {slug: product.handle}}\">\n      <img v-if=\"product.images[0]\" :src=\"product.images[0].source\" :alt=\"product.title\" width=\"120\">\n    </router-link>\n    <h3>\n      <router-link :to=\"{name: 'Product', params: {slug: product.handle}}\">\n        {{ product.title }}\n      </router-link>\n    </h3>\n    <p>Made by: {{ product.vendor.title }}</p>\n    <p>Price {{ productPrice(product.variationProducts) }}</p>\n  </li>\n</ol>\n```", "```js\ncategories = {\n  tools: {\n    name: 'Tools',\n    handle: 'tools',\n    products: ['product-handle', 'product-handle'...]\n  },\n  freewheels: {\n    name: 'Freewheels',\n    handle: 'freewheels',\n    products: ['another-product-handle', 'product'...]\n  }\n};\n```", "```js\nconst store = new Vuex.Store({\n  state: {\n    products: {}\n  },\n\n  mutations: {\n    products(state, payload) {\n      state.products = payload;\n    }\n  },\n\n actions: {\n initializeShop() {\n\n }\n }\n});\n```", "```js\nactions: {\n  initializeShop(store) {\n    store.commit('products');\n  }\n}\n```", "```js\nactions: {\n  initializeShop({commit}) {\n    commit('products');\n  }\n}\n```", "```js\nactions: {\n  initializeShop({state, commit}) {\n    commit('products');\n    // state.products\n  }\n}\n```", "```js\ninitializeShop({commit}, products) {\n  commit('products', products);\n}\n```", "```js\ncreated() {\n  CSV.fetch({url: './data/csv-files/bicycles.csv'}).then(data => {\n    this.$store.dispatch('initializeShop', this.$formatProducts(data));\n  });\n}\n```", "```js\nstate: {\n  products: {},\n  categories: {}\n}\n```", "```js\nmutations: {\n  products(state, payload) {\n    state.products = payload;\n  },\n\n categories(state, payload) {\n\n }\n},\n```", "```js\ncategories(state, payload) {\n let categories = {}; \n Object.keys(payload).forEach(key => {\n let product = payload[key],\n type = product.type;\n });\n}\n```", "```js\ncategories(state, payload) {\n  let categories = {};\n\n  Object.keys(payload).forEach(key => {\n    let product = payload[key],\n      type = product.type;\n\n if(!categories.hasOwnProperty(type.handle)) {\n categories[type.handle] = {\n title: type.title,\n handle: type.handle,\n products: []\n }\n }\n  });\n}\n```", "```js\ncategories(state, payload) {\n  let categories = {};\n\n  Object.keys(payload).forEach(key => {\n    let product = payload[key],\n      type = product.type;\n\n    if(!categories.hasOwnProperty(type.handle)) {\n      categories[type.handle] = {\n        title: type.title,\n        handle: type.handle,\n        products: []\n      }\n    }\n\n    categories[type.handle].products.push(product.handle);\n  });\n}\n```", "```js\n\ncategories(state, payload) {\n  let categories = {};\n\n  Object.keys(payload).forEach(key => {\n    ...\n  });\n\n  console.log(categories);\n}\n```", "```js\ninitializeShop({commit}, products) {\n  commit('products', products);\n  commit('categories', products);\n}\n```", "```js\nlet categories = {},\n  other = {\n title: 'Miscellaneous',\n handle: 'other'\n };\n```", "```js\nObject.keys(payload).forEach(key => {\n  let product = payload[key],\n    type = product.hasOwnProperty('type') ? product.type : other;\n\n  if(!categories.hasOwnProperty(type.handle)) {\n    categories[type.handle] = {\n      title: type.title,\n      handle: type.handle,\n      products: []\n    }\n  }\n\n  categories[type.handle].products.push(product.handle);\n});\n```", "```js\nObject.keys(categories).forEach(key => {\n  let category = categories[key];\n\n  if(category.products.length < 3) {\n    categories.other.products = categories.other.products.concat(category.products);\n  }\n});\n```", "```js\nObject.keys(categories).forEach(key => {\n  let category = categories[key];\n\n  if(category.products.length < 3) {\n    categories.other.products = categories.other.products.concat(category.products);\n    delete categories[key];\n  }\n});\n```", "```js\ncategories(state, payload) {\n  let categories = {},\n    other = {\n      title: 'Miscellaneous',\n      handle: 'other'\n    };\n\n  Object.keys(payload).forEach(key => {\n    let product = payload[key],\n      type = product.hasOwnProperty('type') ? product.type : other;\n\n    if(!categories.hasOwnProperty(type.handle)) {\n      categories[type.handle] = {\n        title: type.title,\n        handle: type.handle,\n        products: []\n      }\n    }\n\n    categories[type.handle].products.push(product.handle);\n  });\n\n  Object.keys(categories).forEach(key => {\n    let category = categories[key];\n\n    if(category.products.length < 3) {\n      categories.other.products =      categories.other.products.concat(category.products);\n      delete categories[key];\n    }\n  });\n\n  let categoriesSorted = {}\n Object.keys(categories).sort().forEach(key => {\n categoriesSorted[key] = categories[key]\n });\n state.categories = categoriesSorted;\n}\n```", "```js\n<div id=\"app\">\n  <main>\n    <router-view></router-view>\n  </main>\n <aside>\n <router-view name=\"sidebar\"></router-view>\n </aside>\n</div>\n```", "```js\n{\n  path: '/',\n  name: 'Home',\n  components: {\n default: HomePage,\n sidebar: ListCategories\n }\n}\n```", "```js\nconst ListCategories = {\n  name: 'ListCategories'\n\n};\n```", "```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/',\n      name: 'Home',\n      components: {\n        default: HomePage,\n        sidebar: ListCategories\n      }\n    },\n    {\n path: '/category/:slug',\n name: 'Category',\n component: CategoryPage,\n props: true\n },\n    {\n      path: '/product/:slug',\n      name: 'Product',\n      component: ProductPage\n    },\n\n    {\n      path: '/404', \n      alias: '*',\n      component: PageNotFound\n    }\n  ]\n});\n```", "```js\nconst ListCategories = {\n  name: 'ListCategories',\n\n template: `<div v-if=\"categories\">\n <ul>\n <li v-for=\"category in categories\">\n <router-link :to=\"{name: 'Category', params: {slug: category.handle}}\">\n {{ category.title }} ({{ category.products.length }})\n </router-link>\n </li>\n </ul>\n </div>`,\n\n computed: {\n categories() {\n return this.$store.state.categories;\n }\n } \n};\n```", "```js\nconst CategoryPage = {\n  name: 'CategoryPage',\n\n  template: `<div>\n    <div v-if=\"category\"></div>\n    <page-not-found v-if=\"categoryNotFound\"></page-not-found>\n  </div>`,\n\n  components: {\n    PageNotFound\n  },\n\n  props: {\n    slug: String\n  },\n\n  data() {\n    return {\n      categoryNotFound: false,\n    }\n  },\n\n  computed: {\n    category() {\n    }\n  }\n};\n```", "```js\ncomputed: {\n  category() {\n    let category;\n\n if(Object.keys(this.$store.state.categories).length) {\n\n category = this.$store.state.categories[this.slug];\n\n if(!category) {\n this.categoryNotFound = true;\n }\n }\n\n return category;\n  }\n}\n```", "```js\ntemplate: `<div>\n  <div v-if=\"category\">\n    <h1>{{ category.title }}</h1>\n  </div>\n  <page-not-found v-if=\"categoryNotFound\"></page-not-found>\n</div>`,\n```", "```js\ncomputed: {\n  category() {\n    ...\n  },\n\n  products() {\n    if(this.category) {\n let products = this.$store.state.products,\n output = [];\n\n for(let featured of this.category.products) {\n output.push(products[featured]);\n }\n\n return output; \n }\n  }\n}\n```", "```js\ntemplate: `<div>\n  <div v-if=\"category\">\n    <h1>{{ category.title }}</h1>\n    <list-products :products=\"products\"></list-products>\n  </div>\n  <page-not-found v-if=\"categoryNotFound\"></page-not-found>\n</div>`\n```", "```js\n{\n  path: '/',\n  name: 'Home',\n  components: {\n    default: CategoryPage,\n    sidebar: ListCategories\n  },\n  props: {\n default: true, \n sidebar: true\n }\n}\n```", "```js\ndata() {\n  return {\n    categoryNotFound: false,\n    categoryHome: {\n title: 'Welcome to the Shop',\n handle: 'home',\n products: [\n 'adjustable-stem',\n 'fizik-saddle-pak',\n 'kenda-tube',\n 'colorful-fixie-lima',\n 'oury-grip-set',\n 'pure-fix-pedals-with-cages'\n ]\n }\n  }\n}\n```", "```js\ncategory() {\n  let category;\n\n  if(Object.keys(this.$store.state.categories).length) {\n    if(this.slug) {\n category = this.$store.state.categories[this.slug];\n } else {\n category = this.categoryHome;\n }\n\n    if(!category) {\n      this.categoryNotFound = true;\n    }\n  }\n\n  return category;\n}\n```", "```js\n{\n  path: '/category/:slug',\n  name: 'Category',\n  components: {\n default: CategoryPage,\n sidebar: ListCategories\n },\n  props: {\n default: true, \n sidebar: true\n }\n},\n```", "```js\n<div class=\"ordering\">\n  <select>\n    <option>Order products</option>\n    <option>Title - ascending (A - Z)</option>\n    <option>Title - descending (Z - A)</option>\n    <option>Price - ascending ($1 - $999)</option>\n    <option>Price - descending ($999 - $1)</option>\n  </select>\n</div>\n```", "```js\n<div class=\"ordering\">\n  <select v-model=\"ordering\">\n    <option value=\"\">Order products</option>\n    <option value=\"title-asc\">Title - ascending (A - Z)</option>\n    <option value=\"title-desc\">Title - descending (Z - A)</option>\n    <option value=\"price-asc\">Price - ascending ($1 - $999)</option>\n    <option value=\"price-desc\">Price - descending ($999 - $1)</option>\n  </select>\n</div>\n```", "```js\ndata() {\n  return {\n    perPage: 12, \n    currentPage: 1,\n    pageLinksCount: 3,\n\n    ordering: ''\n  }\n}\n```", "```js\nproducts(state, payload) {\n let products = {};\n\n Object.keys(payload).forEach(key => {\n let product = payload[key];\n\n products[key] = product;\n });\n\n  state.products = payload;\n}\n```", "```js\nproducts(state, payload) {\n  let products = {};\n\n  Object.keys(payload).forEach(key => {\n    let product = payload[key];\n\n    let prices = [];\n for(let variation of product.variationProducts) {\n if(!prices.includes(variation.price)) {\n prices.push(variation.price);\n }\n }\n\n product.price = Math.min(...prices);\n product.hasManyPrices = prices.length > 1;\n\n    products[key] = product;\n  });\n\n  state.products = products;\n}\n```", "```js\nproductPrice(product) {\n  let price = '$' + product.price;\n\n  if(product.hasManyPrices) {\n    price = 'From: ' + price;\n  }\n\n  return price;\n}\n```", "```js\n<p>Price {{ productPrice(product) }}</p>\n```", "```js\ncomputed: {\n ...\n\n  orderProducts() {\n return this.products;\n }, },\n\nmethods: {\n  paginate() {\n    return this.orderProducts.slice(\n      this.pagination.range.from,  \n      this.pagination.range.to\n    );\n  },\n}\n```", "```js\norderProducts() {\n  let output;\n\n if(this.ordering.length) {\n let orders = this.ordering.split('-');\n } else {\n output = this.products;\n }\n return output;\n}\n```", "```js\norderProducts() {\n  let output;\n\n  if(this.ordering.length) {\n    let orders = this.ordering.split('-');\n\n    output = this.products.sort(function(a, b) {\n if(typeof a[orders[0]] == 'string') {\n return a[orders[0]].localeCompare(b[orders[0]]);\n } else {\n return a[orders[0]] - b[orders[0]];\n }\n });\n\n  } else {\n    output = this.products;\n  }\n  return output;\n}\n```", "```js\norderProducts() {\n  let output;\n\n  if(this.ordering.length) {\n    let orders = this.ordering.split('-');\n\n    output = this.products.sort(function(a, b) {\n      if(typeof a[orders[0]] == 'string') {\n        return a[orders[0]].localeCompare(b[orders[0]]);\n      } else {\n        return a[orders[0]] - b[orders[0]];\n      }\n    });\n\n if(orders[1] == 'desc') {\n output.reverse();\n }\n  } else {\n    output = this.products;\n  }\n  return output;\n}\n```", "```js\ngetters: {\n  categoryProducts: () => {\n\n  }\n}\n```", "```js\ncategoryProducts: (state) => (slug) => {\n\n}\n```", "```js\nstate: {\n  products: {},\n  categories: {},\n\n  categoryHome: {\n title: 'Welcome to the Shop',\n handle: 'home',\n products: [\n 'adjustable-stem',\n 'fizik-saddle-pak',\n 'kenda-tube',\n 'colorful-fixie-lima',\n 'oury-grip-set',\n 'pure-fix-pedals-with-cages'\n ]\n }\n}\n```", "```js\ncategoryProducts: (state) => (slug) => {\n  if(Object.keys(state.categories).length) {\n    let category = false;\n\n    if(slug) {\n      category = this.$store.state.categories[this.slug];\n    } else {\n      category = state.categoryHome;\n    }\n  }\n}\n```", "```js\ncategoryProducts: (state) => (slug) => {\n  if(Object.keys(state.categories).length) {\n    let category = false,\n      products = [];\n\n    if(slug) {\n      category = this.$store.state.categories[this.slug];\n    } else {\n      category = state.categoryHome;\n    }\n\n    if(category) {\n for(let featured of category.products) {\n products.push(state.products[featured]);\n }\n }\n  }\n}\n```", "```js\ncategoryProducts: (state) => (slug) => {\n  if(Object.keys(state.categories).length) {\n    let category = false,\n      products = [];\n\n    if(slug) {\n      category = state.categories[slug];\n    } else {\n      category = state.categoryHome;\n    }\n\n    if(category) {\n      for(let featured of category.products) {\n        products.push(state.products[featured]);\n      }\n\n      category.productDetails = products;\n    }\n\n    return category;\n  }\n}\n```", "```js\ncomputed: {\n  category() {\n    if(Object.keys(this.$store.state.categories).length) {\n      let category = this.$store.getters.categoryProducts(this.slug);\n\n      if(!category) {\n        this.categoryNotFound = true;\n      }\n      return category;\n    }\n  }\n}\n```", "```js\ncategoriesExist: (state) => {\n  return Object.keys(state.categories).length;\n},\n```", "```js\ncategoryProducts: (state, getters) => (slug) => {\n  if(getters.categoriesExist) {\n    ...\n  }\n}\n```", "```js\ncomputed: {\n ...Vuex.mapGetters([\n 'categoryProducts',\n 'categoriesExist'\n ]),\n\n  category() {\n    ...\n  }\n}\n```", "```js\ncomputed: {\n  ...Vuex.mapGetters([\n    'categoriesExist',\n    'categoryProducts'\n  ]),\n\n  category() {\n    if(this.categoriesExist) {\n      let category = this.categoryProducts(this.slug);\n\n      if(!category) {\n        this.categoryNotFound = true;\n      }\n      return category;\n    }\n  }\n}\n```", "```js\ntemplate: `<div>\n  <div v-if=\"category\">\n    <h1>{{ category.title }}</h1>\n    <list-products :products=\"category.productDetails\"></list-products>\n  </div>\n  <page-not-found v-if=\"categoryNotFound\"></page-not-found>\n</div>`,\n```", "```js\nconst ProductFiltering = {\n  name: 'ProductFiltering',\n\n  template: `<div>\n    <list-categories />\n  </div>`,\n\n  components: {\n    ListCategories\n  }\n}\n```", "```js\n{\n  path: '/category/:slug',\n  name: 'Category',\n  components: {\n    default: CategoryPage,\n    sidebar: ProductFiltering\n  },\n  props: {\n    default: true, \n    sidebar: true\n  }\n}\n```", "```js\nconst ProductFiltering = {\n  name: 'ProductFiltering',\n\n  template: `<div>\n    <list-categories />\n  </div>`,\n\n  components: {\n    ListCategories\n  },\n\n  props: {\n slug: String\n },\n\n computed: {\n ...Vuex.mapGetters([\n 'categoriesExist',\n 'categoryProducts'\n ]),\n filters() {\n if(this.categoriesExist) {\n let category = this.categoryProducts(this.slug);\n\n }\n }\n }\n}\n```", "```js\ndata() {\n  return {\n    topics: {\n      vendor: {\n        title: 'Manufacturer',\n        handle: 'vendor',\n        values: {}\n      },\n      tags: {\n        title: 'Tags',\n        handle: 'tags',\n        values: {}\n      }\n    }\n  }\n},\n```", "```js\nfilters() {\n  if(this.categoriesExist) {\n\n    let category = this.categoryProducts(this.slug),\n      vendors = this.topics.vendor;\n\n for(let product of category.productDetails) {\n\n        if(product.hasOwnProperty('vendor')) {\n let vendor = product.vendor; \n if(vendor.handle) { if(!vendor.handle.count.includes(product.handle)) {\n              category.values[item.handle].count.push(product.handle);\n            }\n          } else {\n vendors.values[vendor.handle] = {\n ...vendor,\n count: [product.handle]\n }\n }\n } \n }\n\n }\n  }\n}\n```", "```js\nvendors.values[product.vendor.handle] = {\n  title: vendor.title,\n handle: vendor.handle,\n  count: [product.handle]\n}\n```", "```js\nfor(let product of category.productDetails) {\n\n  if(product.hasOwnProperty('vendor')) {\n    let vendor = product.vendor;\n\n    if(vendor.handle) {\n      if(!vendor.handle.count.includes(product.handle)) {\n        category.values[item.handle].count.push(product.handle);\n      }\n    } else {\n      vendors.values[vendor.handle] = {\n        ...vendor,\n        count: [product.handle]\n      }\n    }\n  }\n\n if(product.hasOwnProperty('tags')) {\n for(let tag of product.tags) {\n if(tag.handle) {\n if(topicTags.values[tag.handle]) {\n if(!topicTags.values[tag.handle].count.includes(product.handle)) {\n            topicTags.values[tag.handle].count.push(product.handle);\n          }\n } else {\n topicTags.values[tag.handle] = {\n ...tag,\n count: [product.handle]\n }\n }\n }\n }\n }\n\n}\n```", "```js\nif(product.hasOwnProperty('vendor')) {\n  this.addTopic(this.topics.vendor, product.vendor, product.handle);\n}\n```", "```js\nmethods: {\n  addTopic(category, item, handle) {\n    if(item.handle) {\n\n      if(category.values[item.handle]) {\n        if(!category.values[item.handle].count.includes(handle)) {\n          category.values[item.handle].count.push(handle);\n        }\n\n      } else {\n\n        category.values[item.handle] = {\n          ...item,\n          count: [handle]\n        }\n      }\n    }\n  }\n}\n```", "```js\nfilters() {\n  if(this.categoriesExist) {\n\n    let category = this.categoryProducts(this.slug);\n\n    for(let product of category.productDetails) {\n\n      if(product.hasOwnProperty('vendor')) {\n        this.addTopic(this.topics.vendor, product.vendor, product.handle);\n      }\n\n      if(product.hasOwnProperty('tags')) {\n        for(let tag of product.tags) {\n          this.addTopic(this.topics.tags, tag, product.handle);\n        }\n      }\n\n    }\n  }\n}\n```", "```js\nfilters() {\n  if(this.categoriesExist) {\n    ...\n  }\n\n  return this.topics;\n}\n```", "```js\n\ntemplate: `<div>\n <div class=\"filters\">\n <div class=\"filterGroup\" v-for=\"filter in filters\">\n <h3>{{ filter.title }}</h3>\n\n <label class=\"filter\" v-for=\"value in filter.values\">\n <input type=\"checkbox\" :value=\"value.handle\">\n {{ value.title }} ({{ value.count }})\n </label>\n </div> \n </div>\n\n  <list-categories />\n</div>`,\n```", "```js\ndata() {\n  return {\n    topics: {\n      vendor: {\n        title: 'Manufacturer',\n        handle: 'vendor',\n        checked: [],\n        values: {}\n      },\n      tags: {\n        title: 'Tags',\n        handle: 'tags',\n        checked: [],\n        values: {}\n      }\n    }\n  }\n}\n```", "```js\n<div class=\"filters\">\n  <div class=\"filterGroup\" v-for=\"filter in filters\">\n    <h3>{{ filter.title }}</h3>\n\n    <label class=\"filter\" v-for=\"value in filter.values\">\n      <input type=\"checkbox\" :value=\"value.handle\" v-model=\"filter.checked\"  @click=\"updateFilters\">\n      {{ value.title }} ({{ value.count }})\n    </label>\n  </div> \n</div>\n```", "```js\nmethods: {\n    addTopic(category, item) {\n      ...\n    },\n\n updateFilters() {\n\n }\n}\n```", "```js\nfilters() {\n  if(this.categoriesExist) {\n\n    let category = this.categoryProducts(this.slug);\n\n    for(let product of category.productDetails) {\n\n      if(product.hasOwnProperty('vendor')) {\n        this.addTopic(this.topics.vendor, product.vendor);\n      }\n\n      if(product.hasOwnProperty('tags')) {\n        for(let tag of product.tags) {\n          this.addTopic(this.topics.tags, tag);\n        }\n      }\n\n Object.keys(product.variationTypes).forEach(vkey => {\n let variation = product.variationTypes[vkey];\n\n if(!this.topics.hasOwnProperty(variation.handle)) {\n this.topics[variation.handle] = {\n ...variation,\n checked: [],\n values: {}\n }\n }\n });\n\n    }\n  }\n\n  return this.topics;\n}\n```", "```js\nObject.keys(product.variationTypes).forEach(vkey => {\n  let variation = product.variationTypes[vkey];\n\n  if(!this.topics.hasOwnProperty(variation.handle)) {\n    this.topics[variation.handle] = {\n      ...variation,\n      checked: [],\n      values: {}\n    }\n  }\n\n  Object.keys(product.variationProducts).forEach(pkey => {\n let variationProduct = product.variationProducts[pkey]; \n this.addTopic(\n this.topics[variation.handle],\n variationProduct.variant[variation.handle],      product.handle\n );\n });\n\n});\n```", "```js\naddTopic(category, item, handle) {\n  if(item.handle) {\n\n    if(category.values[item.handle]) {\n      if(!category.values[item.handle].count.includes(handle)) {\n        category.values[item.handle].count.push(handle);\n      }\n\n    } else {\n\n if(item.hasOwnProperty('value')) {\n item.title = item.value;\n }\n\n      category.values[item.handle] = {\n        ...item,\n        count: [handle]\n      }\n    }\n  }\n}\n```", "```js\nmethods: {\n defaultTopics() {\n return {\n vendor: {\n title: 'Manufacturer',\n handle: 'vendor',\n checked: [],\n values: {}\n },\n tags: {\n title: 'Tags',\n handle: 'tags',\n checked: [],\n values: {}\n }\n }\n },\n\n  addTopic(category, item) {\n    ...\n  }\n\n  updateFilters() {\n\n  }\n}\n```", "```js\ndata() {\n  return {\n    topics: this.defaultTopics()\n  }\n},\n```", "```js\nwatch: {\n  slug() {\n this.topics = this.defaultTopics();\n }\n}\n```", "```js\nupdateFilters() {\n  let filters = {};\n\n Object.keys(this.topics).forEach(key => {\n let topic = this.topics[key];\n if(topic.checked.length) {\n filters[key] = topic.checked;\n }\n });\n\n this.$router.push({query: filters});\n}\n```", "```js\nfilters() {\n  if(this.categoriesExist) {\n\n    let category = this.categoryProducts(this.slug);\n\n    for(let product of category.productDetails) {\n      ...\n    }\n\n Object.keys(this.$route.query).forEach(key => {\n      if(Object.keys(this.topics).includes(key)) {\n        let query = this.$route.query[key];\n        this.topics[key].checked = Array.isArray(query) ? query : [query];\n      }\n    });\n  }\n\n  return this.topics;\n}\n```", "```js\n<ol :start=\"pagination.range.from + 1\">\n  <li v-for=\"product in paginate(products)\" :key=\"product.handle\">\n    ...\n  </li>\n</ol>\n```", "```js\nmethods: {\n  filtering(product, query) {\n\n return true;\n }\n}\n```", "```js\ncategory() {\n  if(this.categoriesExist) {\n    let category = this.categoryProducts(this.slug),\n filters = Object.assign({}, this.$route.query);\n\n if(Object.keys(filters).length && filters.hasProperty('page')) {\n delete filters.page;\n }\n\n if(Object.keys(filters).length) {\n category.productDetails = category.productDetails.filter(\n p => this.filtering(p, filters)\n );\n }\n\n    if(!category) {\n      this.categoryNotFound = true;\n    }\n    return category;\n  }\n}\n```", "```js\nfiltering(product, query) {\n  let display = false,\n hasProperty = {};\n\n Object.keys(query).forEach(key => {\n let filter = Array.isArray(query[key]) ? query[key] : [query[key]];\n\n for(attribute of filter) {\n if(key == 'vendor') {\n\n hasProperty.vendor = false;\n if(product.vendor.handle == attribute) {\n hasProperty.vendor = true;\n }\n\n }      }\n });\n\n return display;\n}\n```", "```js\nfiltering(product, query) {\n  let display = false,\n    hasProperty = {};\n\n    Object.keys(query).forEach(key => {\n      let filter = Array.isArray(query[key]) ? query[key] : [query[key]];\n\n      for(attribute of filter) {\n        if(key == 'vendor') {\n\n          hasProperty.vendor = false;\n          if(product.vendor.handle == attribute) {\n            hasProperty.vendor = true;\n          }\n\n        } else if(key == 'tags') {\n hasProperty.tags = false;\n\n product[key].map(key => {\n if(key.handle == attribute) {\n hasProperty.tags = true;\n }\n });\n\n } else {\n hasProperty[key] = false;\n\n let variant = product.variationProducts.map(v => {\n if(v.variant[key] && v.variant[key].handle == attribute) {\n hasProperty[key] = true;\n }\n });\n }\n }\n    });\n\n  return display;\n}\n```", "```js\nfiltering(product, query) {\n  let display = false,\n    hasProperty = {};\n\n    Object.keys(query).forEach(key => {\n      let filter = Array.isArray(query[key]) ? query[key] : [query[key]];\n\n      for(attribute of filter) {\n        if(key == 'vendor') {\n\n          hasProperty.vendor = false;\n          if(product.vendor.handle == attribute) {\n            hasProperty.vendor = true;\n          }\n\n        } else if(key == 'tags') {\n          hasProperty.tags = false;\n\n          product[key].map(key => {\n            if(key.handle == attribute) {\n              hasProperty.tags = true;\n            }\n          });\n\n        } else {\n          hasProperty[key] = false;\n\n          let variant = product.variationProducts.map(v => {\n            if(v.variant[key] && v.variant[key].handle == attribute) {\n              hasProperty[key] = true;\n            }\n          });\n        }\n      }\n\n if(Object.keys(hasProperty).every(key => hasProperty[key])) {\n display = true;\n }\n\n    });\n\n  return display;\n}\n```"]