["```js\n      data() {\n        return {\n          accessToken: 'XXXX',\n          structure: {\n files: [],\n folders: []\n },\n          byteSizes: ['Bytes', 'KB', 'MB', 'GB', 'TB'],\n          isLoading: true\n        }\n      }\n```", "```js\n      getFolderStructure(path) {\n        this.dropbox().filesListFolder({\n          path: path, \n          include_media_info: true\n        })\n        .then(response => {\n          for (let entry of response.entries) {\n // Check \".tag\" prop for type\n if(entry['.tag'] === 'folder') {\n this.structure.folders.push(entry);\n } else {\n this.structure.files.push(entry);\n }\n }\n          this.isLoading = false;\n        })\n        .catch(error => {\n          console.log(error);\n        });\n      },\n```", "```js\n      <ul v-if=\"!isLoading\">\n        <template v-for=\"entry in structure.folders\">\n <li>\n <strong>{{entry.name }}</strong>\n </li>\n </template>\n <template v-for=\"entry in structure.files\">\n <li>\n <strong>{{ entry.name }}</strong>\n <span v-if=\"entry.size\">- {{ bytesToSize(entry.size)       }}</span>\n </li>\n </template>\n      </ul>\n```", "```js\n      Vue.component('folder', {\n        template: '<li><strong>{{ f.name }}</strong>      \n        </li>',\n        props: {\n          f: Object\n        },\n      });\n```", "```js\n      <template v-for=\"entry in structure.folders\">\n        <folder :f=\"entry\"></folder>\n      </template>\n```", "```js\n      Vue.component('file', {\n        template: '<li><strong>{{ f.name }}</strong><span       v-if=\"f.size\"> - {{ bytesToSize(f.size) }}</span>         </li>',\n        props: {\n          f: Object\n        },\n        data() {\n          return {\n            byteSizes: ['Bytes', 'KB', 'MB', 'GB', 'TB']\n          }\n        }, \n        methods: {\n          bytesToSize(bytes) {\n            // Set a default\n            let output = '0 Byte';      \n            // If the bytes are bigger than 0\n            if (bytes > 0) {\n              // Divide by 1024 and make an int\n              let i = parseInt(Math.floor(Math.log(bytes) \n              / Math.log(1024)));\n             // Round to 2 decimal places and select the \n            appropriate unit from the array\n            output = Math.round(bytes / Math.pow(1024, i), \n             2) + ' ' + this.byteSizes[i];\n            }   \n            return output\n          }\n        }\n      });\n```", "```js\n      <template v-for=\"entry in structure.files\">\n        <file :f=\"entry\"></file>\n      </template>\n```", "```js\n      Vue.component('folder', {\n        template: '<li><strong><a :href=\"f.path_lower\">{{ \n        f.name }}</a></strong></li>',\n        props: {\n          f: Object\n        },\n      });\n```", "```js\n      Vue.component('folder', {\n        template: '<li><strong><a          \n @click.prevent=\"navigate()\" :href=\"f.path_lower\">{{ \n       f.name }}</a></strong></li>',\n        props: {\n          f: Object\n        },\n        methods: {\n          navigate() {\n this.$emit('path', this.f.path_lower);\n }\n        }\n      });\n```", "```js\n      <template v-for=\"entry in structure.folders\">\n        <folder :f=\"entry\" @path=\"updateStructure\">      \n        </folder>\n      </template>\n```", "```js\n      updateStructure(path) {\n        this.getFolderStructure(path);\n      }\n```", "```js\n      getFolderStructure(path) {\n        this.dropbox().filesListFolder({\n          path: path, \n          include_media_info: true\n        })\n        .then(response => {  \n          const structure = {\n folders: [],\n files: []\n }\n          for (let entry of response.entries) {\n            // Check \".tag\" prop for type\n            if(entry['.tag'] == 'folder') {\n              structure.folders.push(entry);\n            } else {\n              structure.files.push(entry);\n            }\n          } \n          this.structure = structure;\n          this.isLoading = false;\n        })\n        .catch(error => {\n          console.log(error);\n        });\n      }\n```", "```js\n      data() {\n        return {\n          accessToken: 'XXXX',\n          structure: {},\n          isLoading: true\n        }\n      }\n```", "```js\n      updateStructure(path) {\n        this.isLoading = true;\n        this.getFolderStructure(path);\n      }\n```", "```js\n      Vue.component('breadcrumb', {\n        template: '<div></div>'\n      });\n```", "```js\n      <transition name=\"fade\">\n        <div v-if=\"!isLoading\">\n          <breadcrumb></breadcrumb>\n          <ul>\n            <template v-for=\"entry in structure.folders\">\n              <folder :f=\"entry\" @path=\"updateStructure\">              </folder>\n            </template>  \n            <template v-for=\"entry in structure.files\">\n              <file :f=\"entry\"></file>\n            </template>\n          </ul>\n        </div>\n      </transition>\n```", "```js\n      data() {\n        return {\n          accessToken: 'XXXXX',\n          structure: {},\n          isLoading: true,\n          path: ''\n        }\n      }\n```", "```js\n      getFolderStructure(path) {\n        this.dropbox().filesListFolder({\n          path: path, \n          include_media_info: true\n        })\n        .then(response => {    \n          const structure = {\n            folders: [],\n            files: []\n          }  \n          for (let entry of response.entries) {\n            // Check \".tag\" prop for type\n            if(entry['.tag'] == 'folder') {\n              structure.folders.push(entry);\n            } else {\n              structure.files.push(entry);\n            }\n          } \n          this.path = path;\n          this.structure = structure;\n          this.isLoading = false;\n        })\n        .catch(error => {\n          console.log(error);\n        });\n      },\n```", "```js\n      <breadcrumb :p=\"path\"></breadcrumb>\n```", "```js\n      Vue.component('breadcrumb', {\n        template: '<div></div>',\n        props: {\n p: String\n }\n      });\n```", "```js\n      computed: {\n       folders() {   \n        }\n      }\n```", "```js\n      computed: {\n        folders() {\n let output = [],\n slug = '',\n parts = this.p.split('/');\n        }\n      }\n```", "```js\n      ['images', 'holiday', 'summer']\n```", "```js\n      folders() {\n        let output = [],\n          slug = '',\n          parts = this.p.split('/'); \n for (let item of parts) {\n slug += item;\n output.push({'name': item, 'path': slug});\n slug += '/';\n }  \n        return output;\n      }\n```", "```js\n      template: '<div>' +\n '<span v-for=\"f in folders\">' +\n '<a :href=\"f.path\">{{ f.name }}</a>' +\n '</span>' + \n      '</div>'\n```", "```js\n      folders() {\n        let output = [],\n          slug = '',\n          parts = this.p.split('/');\n        console.log(parts);\n        for (let item of parts) {\n          slug += item;\n          output.push({'name': item || 'home', 'path':      \n            slug});\n          slug += '/';\n        }  \n        return output;\n      }\n```", "```js\n      template: '<div>' +\n        '<span v-for=\"f in folders\">' +\n          '<a :href=\"f.path\">{{ f.name || 'Home' }}</a>' +\n        '</span>' + \n      '</div>'\n```", "```js\n      template: '<div>' +\n        '<span v-for=\"(f, i) in folders\">' +\n          '<a :href=\"f.path\">{{ f.name || 'Home' }}</a>' +\n          '<span v-if=\"i !== (folders.length - 1)\"> \u00bb \n            </span>' +\n        '</span>' + \n      '</div>',\n```", "```js\n      template: '<div>' +\n        '<span v-for=\"(f, i) in folders\">' +\n          '<a @click.prevent=\"navigate(f)\"          \n            :href=\"f.path\"> \n            {{ f.name || 'Home' }}</a>' +\n          '<i v-if=\"i !== (folders.length - 1)\"> &raquo; \n           </i>' +\n        '</span>' + \n      '</div>',\n```", "```js\n      methods: {\n        navigate(folder) {\n          this.$emit('path', folder.path);\n        }\n      }\n```", "```js\n      <breadcrumb :p=\"path\" @path=\"updateStructure\">      \n      </breadcrumb>\n```", "```js\n      Vue.component('breadcrumb', {\n        template: '<div>' +\n          '<span v-for=\"(f, i) in folders\">' +\n            '<a @click.prevent=\"navigate(f)\" \n             :href=\"f.path\">{{ \n              f.name || 'Home' }}</a>' +\n              '<i v-if=\"i !== (folders.length - 1)\"> \u00bb \n              </i>' + '</span>' + \n             '</div>',\n\n        props: {\n    p: String\n  },\n\n  computed: {\n    folders() {\n      let output = [],\n        slug = '',\n        parts = this.p.split('/');\n      console.log(parts);\n      for (let item of parts) {\n        slug += item;\n        output.push({'name': item || 'home', 'path':   \n        slug});\n        slug += '/';\n      }\n\n      return output;\n    }\n  },\n\n   methods: {\n    navigate(folder) {\n      this.$emit('path', folder.path);\n    }\n  }\n});\n```", "```js\n      <file :d=\"dropbox()\" :f=\"entry\"></file>\n```", "```js\n    props: {\n      f: Object,\n      d: Object\n    },\n```", "```js\n     created() {\n      this.d.filesGetTemporaryLink({path:    \n       this.f.path_lower}).then(data => {\n        this.link = data.link;\n     });\n    }\n```", "```js\n   template: '<li><strong>{{ f.name }}</strong><span v-  \n    if=\"f.size\"> - {{ bytesToSize(f.size) }}</span><span    \n    v-if=\"link\"> - <a :href=\"link\">Download</a></span>  \n   </li>'\n```", "```js\n    Vue.component('file', {\n     template: '<li><strong>{{ f.name }}</strong><span v-   \n     if=\"f.size\"> - {{ bytesToSize(f.size) }}</span><span \n     v-if=\"link\"> - <a :href=\"link\">Download</a></span>\n     </li>',\n    props: {\n      f: Object,\n      d: Object\n      },\n\n   data() {\n     return {\n       byteSizes: ['Bytes', 'KB', 'MB', 'GB', 'TB'],\n      link: false\n      }\n   },\n\n    methods: {\n     bytesToSize(bytes) {\n      // Set a default\n      let output = '0 Byte';\n\n      // If the bytes are bigger than 0\n      if (bytes > 0) {\n        // Divide by 1024 and make an int\n        let i = parseInt(Math.floor(Math.log(bytes) / \n          Math.log(1024)));\n        // Round to 2 decimal places and select the \n         appropriate unit from the array\n        output = Math.round(bytes / Math.pow(1024, i), 2) \n         + ' ' + this.byteSizes[i];\n      }\n\n      return output\n      }\n     },\n\n     created() {\n    this.d.filesGetTemporaryLink({path:    \n     this.f.path_lower}).then(data => {\n      this.link = data.link;\n      });\n    },\n  });\n```", "```js\n    getFolderStructure(path) {\n      window.location.hash = path;\n\n      this.dropbox().filesListFolder({\n       path: path, \n        include_media_info: true\n      })\n     .then(response => {\n\n       const structure = {\n        folders: [],\n        files: []\n       }\n\n      for (let entry of response.entries) {\n        // Check \".tag\" prop for type\n         if(entry['.tag'] == 'folder') {\n          structure.folders.push(entry);\n         } else {\n          structure.files.push(entry);\n         }\n       }\n\n      this.path = path;\n      this.structure = structure;\n      this.isLoading = false;\n   })\n     .catch(error => {\n      console.log(error);\n   });\n }\n```", "```js\n  created() {\n    let hash = window.location.hash.substring(1);\n    this.getFolderStructure(hash || '');\n  }\n```", "```js\n   getFolderStructure(path) {\n     window.location.hash = path;\n\n     this.dropbox().filesListFolder({\n      path: path, \n      include_media_info: true\n    })\n    .then(response => {\n\n      const structure = {\n        folders: [],\n        files: []\n      }\n\n      for (let entry of response.entries) {\n        // Check \".tag\" prop for type\n        if(entry['.tag'] == 'folder') {\n         structure.folders.push(entry);\n       } else {\n         structure.files.push(entry);\n       }\n     }\n\n     this.path = path;\n     this.structure = structure;\n     this.isLoading = false;\n   })\n    .catch(error => {\n      this.isLoading = 'error';\n      console.log(error);\n    });\n  }\n```", "```js\n   <transition name=\"fade\">\n    <div v-if=\"isLoading\">\n      <div v-if=\"isLoading === 'error'\">\n <p>There seems to be an issue with the URL entered.  \n       </p>\n <p><a href=\"\">Go home</a></p>\n </div>\n <div v-else>\n Loading...\n </div>\n    </div>\n  </transition>\n```", "```js\n Vue.component('breadcrumb', {\n   template: '<div>' +\n     '<span v-for=\"(f, i) in folders\">' +\n       '<a :href=\"f.path\">{{ f.name || 'Home' }}</a>' +\n       '<i v-if=\"i !== (folders.length - 1)\"> &raquo;   \n       </i>' + '</span>' + \n       '</div>',\n    props: {\n      p: String\n     },\n    computed: {\n      folders() {\n        let output = [],\n          slug = '',\n          parts = this.p.split('/');\n\n         for (let item of parts) {\n          slug += item;\n            output.push({'name': item || 'home', 'path': '#' + slug});\n            slug += '/';\n         }\n\n         return output;\n       }\n     }\n   });\n```", "```js\n    <breadcrumb :p=\"path\"></breadcrumb>\n```", "```js\n   Vue.component('folder', {\n    template: '<li><strong><a :href=\"\\'#\\' +   \n    f.path_lower\">{{ f.name }}</a></strong></li>',\n     props: {\n      f: Object\n     }\n   });\n```", "```js\n   <template v-for=\"entry in structure.folders\">\n     <folder :f=\"entry\"></folder>\n   </template>\n```", "```js\n const app = new Vue({\n    el: '#app',\n data: {\n path: ''\n }\n });\n```", "```js\n   window.onhashchange = () => {\n    let hash = window.location.hash.substring(1);\n    app.path = (hash || '');\n   }\n```", "```js\n   <div id=\"app\">\n    <dropbox-viewer :p=\"path\"></dropbox-viewer>\n   </div>\n```", "```js\n   props: {\n     p: String\n    },\n```", "```js\n   watch: {\n     p() {\n      this.updateStructure(this.p);\n     }\n   }\n```", "```js\n   window.location.hash = path;\n```", "```js\n   Vue.component('dropbox-viewer', {\n     template: '#dropbox-viewer-template',\n\n     props: {\n      path: String\n     },\n\n     data() {\n       return {\n         accessToken: 'XXXX',\n        structure: {},\n         isLoading: true\n       }\n      },\n\n     methods: {\n       dropbox() {\n         return new Dropbox({\n            accessToken: this.accessToken\n         });\n       },\n\n       getFolderStructure(path) { \n         this.dropbox().filesListFolder({\n           path: path, \n          include_media_info: true\n         })\n          .then(response => {\n\n           const structure = {\n            folders: [],\n            files: []\n           }\n\n          for (let entry of response.entries) {\n            // Check \".tag\" prop for type\n            if(entry['.tag'] == 'folder') {\n             structure.folders.push(entry);\n             } else {\n           }\n          }\n\n         this.structure = structure;\n         this.isLoading = false;\n       })\n        .catch(error => {\n         this.isLoading = 'error';\n         console.log(error);\n        });\n      },\n\n       updateStructure(path) {\n        this.isLoading = true;\n        this.getFolderStructure(path);\n       }\n    },\n\n     created() {\n       this.getFolderStructure(this.path);\n     },\n\n      watch: {\n      path() {\n        this.updateStructure(this.path);\n      }\n     },\n   });\n```", "```js\n   <dropbox-viewer :path=\"path\"></dropbox-viewer>\n```", "```js\n  const app = new Vue({\n    el: '#app',\n\n    data: {\n      path: ''\n    }, \n    methods: {\n updateHash() {\n let hash = window.location.hash.substring(1);\n this.path = (hash || '');\n }\n },\n created() {\n this.updateHash()\n }\n  });\n```", "```js\n   window.onhashchange = () => {\n     app.updateHash();\n   }\n```", "```js\n   <div id=\"app\">\n      <dropbox-viewer :path=\"path\"></dropbox-viewer>\n    </div>\n\n   <script type=\"text/x-template\" id=\"dropbox-viewer- \n     template\">\n    <div>\n      <h1>Dropbox</h1>\n\n      <transition name=\"fade\">\n        <div v-if=\"isLoading\">\n          <div v-if=\"isLoading == 'error'\">\n            <p>There seems to be an issue with the URL \n            entered.</p>\n            <p><a href=\"\">Go home</a></p>\n          </div>\n          <div v-else>\n            Loading...\n          </div>\n        </div>\n      </transition>\n\n      <transition name=\"fade\">\n        <div v-if=\"!isLoading\">\n          <breadcrumb :p=\"path\"></breadcrumb>\n          <ul>\n            <template v-for=\"entry in structure.folders\">\n             <folder :f=\"entry\"></folder>\n            </template>\n\n           <template v-for=\"entry in structure.files\">\n             <file :d=\"dropbox()\" :f=\"entry\"></file>\n           </template>\n         </ul>\n       </div>\n      </transition>\n\n     </div>\n    </script>\n```", "```js\n   Vue.component('breadcrumb', {\n        template: '<div>' +\n        '<span v-for=\"(f, i) in folders\">' +\n         '<a :href=\"f.path\">{{ f.name || 'Home' }}</a>' +\n          '<i v-if=\"i !== (folders.length - 1)\"> &raquo; \n           </i>' + '</span>' + \n        '</div>',\n      props: {\n      p: String\n     },\n     computed: {\n        folders() {\n          let output = [],\n           slug = '',\n           parts = this.p.split('/');\n\n        for (let item of parts) {\n          slug += item;\n            output.push({'name': item || 'home', 'path': \n            '#' + slug});\n          slug += '/';\n         }\n\n         return output;\n        }\n      }\n    });\n\n    Vue.component('folder', {\n       template: '<li><strong><a :href=\"\\'#\\' + \n       f.path_lower\">{{ f.name }}</a></strong></li>',\n      props: {\n       f: Object\n      }\n   });\n\n   Vue.component('file', {\n         template: '<li><strong>{{ f.name }}</strong><span \n         v-if=\"f.size\"> - {{ bytesToSize(f.size) }}</span>\n         <span v-if=\"link\"> - <a :href=\"link\">Download</a>\n         </span></li>',\n        props: {\n        f: Object,\n         d: Object\n       },\n\n     data() {\n      return {\n        byteSizes: ['Bytes', 'KB', 'MB', 'GB', 'TB'],\n        link: false\n       }\n      },\n\n    methods: {\n       bytesToSize(bytes) {\n        // Set a default\n        let output = '0 Byte';\n\n        // If the bytes are bigger than 0\n         if (bytes > 0) {\n          // Divide by 1024 and make an int\n          let i = parseInt(Math.floor(Math.log(bytes) / \n           Math.log(1024)));\n        // Round to 2 decimal places and select the \n           appropriate unit from the array\n         output = Math.round(bytes / Math.pow(1024, i), 2)   \n         + ' ' + this.byteSizes[i];\n       }\n\n       return output\n      }\n    },\n\n     created() {\n       this.d.filesGetTemporaryLink({path:   \n       this.f.path_lower}).then(data => {\n         this.link = data.link;\n       });\n      },\n    });\n\n     Vue.component('dropbox-viewer', {\n       template: '#dropbox-viewer-template',\n\n     props: {\n       path: String\n      },\n\n     data() {\n       return {\n       accessToken: 'XXXX',\n       structure: {},\n       isLoading: true\n     }\n    },\n\n     methods: {\n      dropbox() {\n        return new Dropbox({\n          accessToken: this.accessToken\n        });\n      },\n\n     getFolderStructure(path) { \n      this.dropbox().filesListFolder({\n        path: path, \n        include_media_info: true\n      })\n      .then(response => {\n\n        const structure = {\n          folders: [],\n          files: []\n        }\n\n        for (let entry of response.entries) {\n          // Check \".tag\" prop for type\n          if(entry['.tag'] == 'folder') {\n            structure.folders.push(entry);\n          } else {\n            structure.files.push(entry);\n          }\n        }\n\n          this.structure = structure;\n          this.isLoading = false;\n        })\n        .catch(error => {\n         this.isLoading = 'error';\n         console.log(error);\n        });\n     },\n\n     updateStructure(path) {\n       this.isLoading = true;\n       this.getFolderStructure(path);\n      }\n    },\n\n    created() {\n     this.getFolderStructure(this.path);\n    },\n\n   watch: {\n     path() {\n       this.updateStructure(this.path);\n       }\n     },\n  });\n\n     const app = new Vue({\n      el: '#app',\n\n       data: {\n       path: ''\n      }, \n    methods: {\n     updateHash() {\n        let hash = window.location.hash.substring(1);\n        this.path = (hash || '');\n      }\n    },\n     created() {\n      this.updateHash()\n     }\n  });\n\n   window.onhashchange = () => {\n   app.updateHash();\n }\n```"]