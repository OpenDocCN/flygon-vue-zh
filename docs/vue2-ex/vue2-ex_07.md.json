["```js\nVue.component('dropbox-viewer', {\n  template: '#dropbox-viewer-template',\n\n  data() {\n    return {\n      accessToken: 'XXXX',\n      structure: {},\n      isLoading: true\n    }\n  },\n\n  computed: {\n    path() {\n      return this.$store.state.path\n    },\n    slug() {\n      return this.path.toLowerCase()\n        .replace(/^\\/|\\/$/g, '')\n        .replace(/ /g,'-')\n        .replace(/\\//g,'-')\n        .replace(/[-]+/g, '-')\n        .replace(/[^\\w-]+/g,'');\n    }\n  },\n\n  methods: {\n    dropbox() {\n      return new Dropbox({\n        accessToken: this.accessToken\n      });\n    },\n  }\n});\n```", "```js\ngetFolderStructure(path) {\n\n}\n```", "```js\ngetFolderStructure(path) {\n let output;\n\n return output;\n}\n```", "```js\ngenerateSlug(path) {\n  return path.toLowerCase()\n    .replace(/^\\/|\\/$/g, '')\n    .replace(/ /g,'-')\n    .replace(/\\//g,'-')\n    .replace(/[-]+/g, '-')\n    .replace(/[^\\w-]+/g,'');\n}\n```", "```js\ngetFolderStructure(path) {\n  let output;\n\n  const slug = this.generateSlug(path);\n\n  return output;\n}\n```", "```js\ngetFolderStructure(path) {\n  let output;\n\n  const slug = this.generateSlug(path),\n      data = this.$store.state.structure[slug];\n\n  return output;\n}\n```", "```js\ngetFolderStructure(path) {\n  let output;\n\n  const slug = this.generateSlug(path),\n      data = this.$store.state.structure[slug];\n\n if(data) {\n output = data;\n } else {\n\n }\n\n  return output;\n}\n```", "```js\ngetFolderStructure(path) {\n  let output;\n\n  const slug = this.generateSlug(path),\n      data = this.$store.state.structure[slug];\n\n  if(data) {\n    output = data;\n  } else {\n\n    output = this.dropbox().filesListFolder({\n path: path, \n include_media_info: true\n })\n .then(response => {\n let entries = response.entries;\n this.$store.commit('structure', {\n path: slug,\n data: entries\n });\n\n return entries;\n })\n .catch(error => {\n this.isLoading = 'error';\n console.log(error);\n });\n\n  }\n\n  return output;\n}\n```", "```js\ngetFolderStructure(path) {\n  let output;\n\n  const slug = this.generateSlug(path),\n      data = this.$store.state.structure[slug];\n\n  if(data) {\n    output = Promise.resolve(data);\n  } else {\n\n    output = this.dropbox().filesListFolder({\n      path: path, \n      include_media_info: true\n    })\n    .then(response => {\n      let entries = response.entries;\n\n      this.$store.commit('structure', {\n        path: slug,\n        data: entries\n      });\n\n      return entries;\n    })\n    .catch(error => {\n      this.isLoading = 'error';\n      console.log(error);\n    });\n\n  }\n  return output;\n}\n```", "```js\ndisplayFolderStructure() {\n\n} \n```", "```js\ndisplayFolderStructure() {\n this.isLoading = true;\n\n const structure = {\n folders: [],\n files: []\n }\n}\n```", "```js\ndisplayFolderStructure() {\n  this.isLoading = true;\n\n  const structure = {\n    folders: [],\n    files: []\n  }\n\n this.getFolderStructure(this.path).then(data => {\n\n });\n}\n```", "```js\ndisplayFolderStructure() {\n  this.isLoading = true;\n\n  const structure = {\n    folders: [],\n    files: []\n  }\n\n  this.getFolderStructure(this.path).then(data => {\n\n    for (let entry of data) {\n // Check \".tag\" prop for type\n if(entry['.tag'] == 'folder') {\n structure.folders.push(entry);\n } else {\n structure.files.push(entry);\n }\n }\n  });\n}\n```", "```js\ndisplayFolderStructure() {\n  this.isLoading = true;\n\n  const structure = {\n    folders: [],\n    files: []\n  }\n\n  this.getFolderStructure(this.path).then(data => {\n\n    for (let entry of data) {\n      // Check \".tag\" prop for type\n      if(entry['.tag'] == 'folder') {\n        structure.folders.push(entry);\n      } else {\n        structure.files.push(entry);\n      }\n    }\n\n    this.structure = structure;\n this.isLoading = false;\n  });\n}\n```", "```js\nVue.component('dropbox-viewer', {\n  template: '#dropbox-viewer-template',\n\n  data() {\n    return {\n      accessToken: 'XXXX',\n      structure: {},\n      isLoading: true\n    }\n  },\n\n  computed: {\n    ...\n  },\n\n  methods: {\n\n    ...\n  },\n\n created() {\n this.displayFolderStructure();\n }\n});\n```", "```js\n  created() {\n    this.displayFolderStructure();\n  },\n\n  watch: {\n path() {\n this.displayFolderStructure();\n }\n }\n```", "```js\nwatch: {\n  path() {\n    this.displayFolderStructure();\n  },\n\n  structure: {\n deep: true,\n handler() {\n\n }\n }\n}\n```", "```js\nstructure: {\n  deep: true,\n  handler() {\n    for (let folder of this.structure.folders) {\n this.getFolderStructure(folder.path_lower);\n }\n  }\n}\n```", "```js\nif(data) {\n  output = Promise.resolve(data);\n} else {\n\n  console.log(`API query for ${path}`);\n  output = this.dropbox().filesListFolder({\n    path: path, \n    include_media_info: true\n  })\n  .then(response => {\n    console.log(`Response for ${path}`);\n\n    ... \n```", "```js\nVue.component('folder', {\n  template: '<li><strong><a :href=\"\\'#\\' + f.path_lower\">{{ f.name }}</a></strong></li>',\n  props: {\n    f: Object\n  },\n  created() {\n this.$parent.getFolderStructure(this.f.path_lower);\n }\n});\n```", "```js\n<folder :f=\"entry\" :cache=\"getFolderStructure\"></folder>\n```", "```js\nVue.component('folder', {\n  template: '<li><strong><a :href=\"\\'#\\' + f.path_lower\">{{ f.name }}</a></strong></li>',\n  props: {\n    f: Object,\n    cache: Function\n  }\n});\n```", "```js\nVue.component('folder', {\n  template: '<li><strong><a :href=\"\\'#\\' + f.path_lower\">{{ f.name }}</a></strong></li>',\n  props: {\n    f: Object,\n    cache: Function\n  },\n created() {\n this.cache(this.f.path_lower);\n }\n});\n```", "```js\nVue.component('breadcrumb', {\n  template: '<div>' +\n    '<span v-for=\"(f, i) in folders\">' +\n      '<a :href=\"\\'#\\' + f.path\">{{ f.name || 'Home' }}</a>' +\n      '<i v-if=\"i !== (folders.length - 1)\"> &raquo; </i>' +\n    '</span>' + \n  '</div>',\n  computed: {\n    folders() {\n      let output = [],\n        slug = '',\n        parts = this.$store.state.path.split('/');\n\n      for (let item of parts) {\n        slug += item;\n        output.push({'name': item || 'home', 'path': slug});\n        slug += '/';\n      }\n\n      return output;\n    }\n  }\n});\n```", "```js\n<breadcrumb :cache=\"getFolderStructure\"></breadcrumb>\n```", "```js\nVue.component('breadcrumb', {\n  template: '...',\n props: {\n cache: Function\n },\n  computed: {\n    folders() {\n      ...\n  }\n});\n```", "```js\nVue.component('breadcrumb', {\n  template: '...',\n  props: {\n    cache: Function\n  },\n  computed: {\n    folders() {\n      ...\n    }\n  },\n  mounted() {\n let parents = this.folders;\n }\n});\n```", "```js\nmounted() {\n  let parents = this.folders;\n  parents.reverse().shift();\n}\n```", "```js\nmounted() {\n  let parents = this.folders;\n  parents.reverse().shift();\n\n  for(let parent of parents) {\n this.cache(parent.path);\n }\n}\n```", "```js\nconst store = new Vuex.Store({\n  state: {\n    path: '',\n    structure: {},\n    breadcrumb: []\n  },\n  mutations: {\n    updateHash(state) {\n      let hash = window.location.hash.substring(1);\n      state.path = (hash || '');\n    },\n    structure(state, payload) {\n      state.structure[payload.path] = payload.data;\n    }\n  }\n});\n```", "```js\nupdateHash(state) {\n  let hash = window.location.hash.substring(1);\n  state.path = (hash || '');\n\n let output = [],\n slug = '',\n parts = state.path.split('/');\n\n for (let item of parts) {\n slug += item;\n output.push({'name': item || 'home', 'path': slug});\n slug += '/';\n }\n\n state.breadcrumb = output;\n},\n```", "```js\ncomputed: {\n  folders() {\n return this.$store.state.breadcrumb;\n }\n}\n```", "```js\ncacheParentFolders() {\n  let parents = this.$store.state.breadcrumb;\n  parents.reverse().shift();\n\n  for(let parent of parents) {\n    this.getFolderStructure(parent.path);\n  }\n}\n```", "```js\ncreated() {\n  this.displayFolderStructure();\n  this.cacheParentFolders();\n}\n```", "```js\nVue.component('breadcrumb', {\n  template: '<div>' +\n    '<span v-for=\"(f, i) in folders\">' +\n      '<a :href=\"\\'#\\' + f.path\">{{ f.name || 'Home' }}</a>' +\n      '<i v-if=\"i !== (folders.length - 1)\"> &raquo; </i>' +\n    '</span>' + \n  '</div>',\n  computed: {\n    folders() {\n      return this.$store.state.breadcrumb;\n    }\n  }\n});\n```", "```js\n<breadcrumb></breadcrumb>\n```", "```js\nupdateHash(state, val) {\n  let path = (window.location.hash.substring(1) || ''),\n    breadcrumb = [],\n    slug = '',\n    parts = path.split('/');\n\n  for (let item of parts) {\n    slug += item;\n    breadcrumb.push({'name': item || 'home', 'path': slug});\n    slug += '/';\n  }\n\n  state.path = path\n  state.breadcrumb = breadcrumb;\n}\n```", "```js\nconst app = new Vue({\n  el: '#app',\n\n  store,\n  mounted() {\n    store.commit('updateHash');\n  }\n});\n```", "```js\nVue.component('file', {\n  template: '<li><strong>{{ f.name }}</strong><span v-if=\"f.size\"> - {{ bytesToSize(f.size) }}</span> - <a v-if=\"link\" :href=\"link\">Download</a></li>',\n  props: {\n    f: Object,\n    d: Object\n  },\n\n  data() {\n    return {\n      byteSizes: ['Bytes', 'KB', 'MB', 'GB', 'TB'],\n      link: false\n    }\n  },\n\n  methods: {\n    bytesToSize(bytes) {\n      // Set a default\n      let output = '0 Byte';\n\n      // If the bytes are bigger than 0\n      if (bytes > 0) {\n        // Divide by 1024 and make an int\n        let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n        // Round to 2 decimal places and select the appropriate unit from the array\n        output = Math.round(bytes / Math.pow(1024, i), 2) + ' ' + this.byteSizes[i];\n      }\n\n      return output\n    }\n  },\n\n  created() {\n    this.d.filesGetTemporaryLink({path: this.f.path_lower})\n      .then(data => {\n        this.f.download_link = this.link = data.link;\n      });\n  }\n});\n```", "```js\ncreated() {\n  if(this.f.download_link) {\n this.link = this.f.download_link;\n } else {\n    this.d.filesGetTemporaryLink({path: this.f.path_lower})\n      .then(data => {\n        this.f.download_link = this.link = data.link;\n      });\n  }\n}\n```", "```js\n/**\n * Displays a folder with a link and cache its contents\n * @example <folder :f=\"entry\" :cache=\"getFolderStructure\"></folder>\n *\n * @param {object} f The folder entry from the tree\n * @param {function} cache The getFolderStructure method from the dropbox-viewer component\n */\n```", "```js\n/**\n * Displays the folder tree breadcrumb\n * @example <breadcrumb></breadcrumb>\n */\nVue.component('breadcrumb', {\n  template: '<div>' +\n    '<span v-for=\"(f, i) in folders\">' +\n      '<a :href=\"\\'#\\' + f.path\">{{ f.name || 'Home' }}</a>' +\n      '<i v-if=\"i !== (folders.length - 1)\"> &raquo; </i>' +\n    '</span>' + \n  '</div>',\n\n  computed: {\n    folders() {\n      return this.$store.state.breadcrumb;\n    }\n  }\n});\n```", "```js\n/**\n * Displays a folder with a link and cache its contents\n * @example <folder :f=\"entry\" :cache=\"getFolderStructure\"></folder>\n *\n * @param {object} f The folder entry from the tree\n * @param {function} cache The getFolderStructure method from the dropbox-viewer component\n */\nVue.component('folder', {\n  template: '<li><strong><a :href=\"\\'#\\' + f.path_lower\">{{ f.name }}</a></strong></li>',\n  props: {\n    f: Object,\n    cache: Function\n  },\n  created() {\n    // Cache the contents of the folder\n    this.cache(this.f.path_lower);\n  }\n});\n```", "```js\n/**\n * File component display size of file and download link\n * @example <file :d=\"dropbox()\" :f=\"entry\"></file>\n * \n * @param {object} f The file entry from the tree\n * @param {object} d The dropbox instance from the parent component\n */\nVue.component('file', {\n  template: '<li><strong>{{ f.name }}</strong><span v-if=\"f.size\"> - {{ bytesToSize(f.size) }}</span> - <a v-if=\"link\" :href=\"link\">Download</a></li>',\n  props: {\n    f: Object,\n    d: Object\n  },\n\n  data() {\n    return {\n      // List of file size\n      byteSizes: ['Bytes', 'KB', 'MB', 'GB', 'TB'],\n\n      // The download link\n      link: false\n    }\n  },\n\n  methods: {\n    /**\n     * Convert an integer to a human readable file size\n     * @param {integer} bytes\n     * @return {string}\n     */\n    bytesToSize(bytes) {\n      // Set a default\n      let output = '0 Byte';\n\n      // If the bytes are bigger than 0\n      if (bytes > 0) {\n        // Divide by 1024 and make an int\n        let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n        // Round to 2 decimal places and select the appropriate unit from the array\n        output = Math.round(bytes / Math.pow(1024, i), 2) + ' ' + this.byteSizes[i];\n      }\n\n      return output\n    }\n  },\n\n  created() {\n    // If the download link has be retrieved from the API, use it\n    // if not, aquery the API\n    if(this.f.download_link) {\n      this.link = this.f.download_link;\n    } else {\n      this.d.filesGetTemporaryLink({path: this.f.path_lower})\n        .then(data => {\n          this.f.download_link = this.link = data.link;\n        });\n    }\n  }\n});\n```", "```js\n/**\n * The dropbox component\n * @example <dropbox-viewer></dropbox-viewer>\n */\nVue.component('dropbox-viewer', {\n  template: '#dropbox-viewer-template',\n\n  data() {\n    return {\n      // Dropbox API token\n      accessToken: 'XXXX',\n\n      // Current folder structure\n      structure: {},\n      isLoading: true\n    }\n  },\n\n  computed: {\n    // The current folder path\n    path() {\n      return this.$store.state.path\n    }\n  },\n\n  methods: {\n\n    /**\n     * Dropbox API instance\n     * @return {object}\n     */\n    dropbox() {\n      return new Dropbox({\n        accessToken: this.accessToken\n      });\n    },\n\n    /**\n     * @param {string} path The path to a folder\n     * @return {string} A cache-friendly URL without punctuation/symbals\n     */\n    generateSlug(path) {\n      return path.toLowerCase()\n        .replace(/^\\/|\\/$/g, '')\n        .replace(/ /g,'-')\n        .replace(/\\//g,'-')\n        .replace(/[-]+/g, '-')\n        .replace(/[^\\w-]+/g,'');\n    },\n\n    /**\n     * Retrieve the folder structure form the cache or Dropbox API\n     * @param {string} path The folder path\n     * @return {Promise} A promise containing the folder data\n     */\n    getFolderStructure(path) {\n      let output;\n\n      const slug = this.generateSlug(path),\n          data = this.$store.state.structure[slug];\n\n      if(data) {\n        output = Promise.resolve(data);\n      } else {\n        output = this.dropbox().filesListFolder({\n          path: path, \n          include_media_info: true\n        })\n        .then(response => {\n          let entries = response.entries;\n\n          this.$store.commit('structure', {\n            path: slug,\n            data: entries\n          });\n\n          return entries;\n        })\n        .catch(error => {\n          this.isLoading = 'error';\n          console.log(error);\n        });\n\n      }\n      return output;\n    },\n\n    /**\n     * Display the contents of getFolderStructure\n     * Updates the output to display the folders and folders\n     */\n    displayFolderStructure() {\n      // Set the app to loading\n      this.isLoading = true;\n\n      // Create an empty object\n      const structure = {\n        folders: [],\n        files: []\n      }\n\n      // Get the structure\n      this.getFolderStructure(this.path).then(data => {\n\n        for (let entry of data) {\n          // Check \".tag\" prop for type\n          if(entry['.tag'] == 'folder') {\n            structure.folders.push(entry);\n          } else {\n            structure.files.push(entry);\n          }\n        }\n\n        // Update the data object\n        this.structure = structure;\n        this.isLoading = false;\n      });\n    },\n\n    /**\n     * Loop through the breadcrumb and cache parent folders\n     */\n    cacheParentFolders() {\n      let parents = this.$store.state.breadcrumb;\n      parents.reverse().shift();\n\n      for(let parent of parents) {\n        this.getFolderStructure(parent.path);\n      }\n    }\n  },\n\n  created() {\n    // Display the current path & cache parent folders\n    this.displayFolderStructure();\n    this.cacheParentFolders();\n  },\n\n  watch: {\n    // Update the view when the path gets updated\n    path() {\n      this.displayFolderStructure();\n    }\n  }\n});\n```", "```js\n/**\n * The Vuex Store\n */\nconst store = new Vuex.Store({\n  state: {\n    // Current folder path\n    path: '',\n\n    // The current breadcrumb\n    breadcrumb: [],\n\n    // The cached folder contents\n    structure: {},\n  },\n  mutations: {\n    /**\n     * Update the path & breadcrumb components\n     * @param {object} state The state object of the store\n     */\n    updateHash(state) {\n\n      let path = (window.location.hash.substring(1) || ''),\n        breadcrumb = [],\n        slug = '',\n        parts = path.split('/');\n\n      for (let item of parts) {\n        slug += item;\n        breadcrumb.push({'name': item || 'home', 'path': slug});\n        slug += '/';\n      }\n\n      state.path = path\n      state.breadcrumb = breadcrumb;\n    },\n\n    /**\n     * Cache a folder structure\n     * @param {object} state The state objet of the store\n     * @param {object} payload An object containing the slug and data to store\n     */\n    structure(state, payload) {\n      state.structure[payload.path] = payload.data;\n    }\n  }\n});\n```", "```js\n/**\n * The Vue app\n */\nconst app = new Vue({\n  el: '#app',\n\n  // Initialize the store\n  store,\n\n  // Update the current path on page load\n  mounted() {\n    store.commit('updateHash');\n  }\n});\n```", "```js\n/**\n * Update the path & store when the URL hash changes\n */\nwindow.onhashchange = () => {\n  app.$store.commit('updateHash');\n}\n```", "```js\n<div id=\"app\">\n  <dropbox-viewer></dropbox-viewer>\n</div>\n```", "```js\n<script type=\"text/x-template\" id=\"dropbox-viewer-template\">\n  <div>\n    <h1>Dropbox</h1>\n\n    <transition name=\"fade\">\n      <div v-if=\"isLoading\">\n        <div v-if=\"isLoading == 'error'\">\n          <p>There seems to be an issue with the URL entered.</p>\n          <p><a href=\"\">Go home</a></p>\n        </div>\n        <div v-else>\n          Loading...\n        </div>\n      </div>\n    </transition>\n\n    <transition name=\"fade\">\n      <div v-if=\"!isLoading\">\n        <breadcrumb></breadcrumb>\n        <ul>\n          <template v-for=\"entry in structure.folders\">\n            <folder :f=\"entry\" :cache=\"getFolderStructure\"></folder>\n          </template>\n\n          <template v-for=\"entry in structure.files\">\n            <file :d=\"dropbox()\" :f=\"entry\"></file>\n          </template>\n        </ul>\n      </div>\n    </transition>\n\n  </div>\n</script>\n```"]