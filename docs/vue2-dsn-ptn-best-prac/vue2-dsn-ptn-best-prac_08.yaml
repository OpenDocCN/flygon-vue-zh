- en: Vue Router Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue 路由模式
- en: Routing is a vitally important part of any **Single Page Application** (**SPA**).
    This chapter focuses on maximizing the Vue router and looks at everything from
    routing a user between pages, to parameters, to optimal configuration.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是任何**单页应用程序**（**SPA**）的重要组成部分。本章重点介绍了最大化 Vue 路由器，并涵盖了从在页面之间路由用户到参数到最佳配置的一切。
- en: 'By the end of this chapter, we will have covered the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将涵盖以下内容：
- en: Implementing routing in a Vue.js application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Vue.js 应用程序中实现路由
- en: Using dynamic route matching to create route parameters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动态路由匹配创建路由参数
- en: Passing route parameters as component props
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将路由参数作为组件属性传递
- en: Single Page Applications
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页应用程序
- en: Modern JavaScript applications implement a pattern known as an SPA. In its most
    simplistic form, it can be thought of as an application that displays components
    based on a URL. As the templates are mapped to routes, there is no need for a
    page reload, as they can be injected depending on where the user navigated.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 JavaScript 应用程序实现了一种称为 SPA 的模式。在其最简单的形式中，它可以被认为是根据 URL 显示组件的应用程序。由于模板被映射到路由，因此无需重新加载页面，因为它们可以根据用户导航的位置进行注入。
- en: This is the job of the router.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是路由器的工作。
- en: By creating our application this way, we're able to increase both perceived
    and actual speed, because our application is much more dynamic. If we add in the
    concepts that we learned in the previous chapter (HTTP), you'll find that they
    go hand in hand with the SPA model.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式创建我们的应用程序，我们能够增加感知和实际速度，因为我们的应用程序更加动态。如果我们加入在上一章学到的概念（HTTP），你会发现它们与 SPA
    模型紧密相连。
- en: Using the router
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由器
- en: Let's spin up a playground project and install the `vue-router` library. This
    allows us to take advantage of routing inside our application and give us the
    power of a modern SPA.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动一个游乐场项目并安装 `vue-router` 库。这使我们能够在我们的应用程序内利用路由，并为我们提供现代 SPA 的功能。
- en: 'Run the following commands in your Terminal:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we''re using webpack as part of our build system, we''ve installed the router
    with `npm`. We can then initialize the router inside of `src/main.js`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在构建系统中使用 webpack，我们已经用 `npm` 安装了路由器。然后我们可以在 `src/main.js` 中初始化路由器：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This effectively registers `VueRouter` as a global plugin. A plugin simply is
    just a function that receives `Vue` and `options` as parameters and allows libraries
    such as `VueRouter` to add functionality to our Vue application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上将 `VueRouter` 注册为全局插件。插件只是一个接收 `Vue` 和 `options` 作为参数的函数，并允许诸如 `VueRouter`
    这样的库向我们的 Vue 应用程序添加功能。
- en: Creating routes
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建路由
- en: 'We can then define two small components inside our `main.js` file that simply
    have a template that shows `h1` with some text inside:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在 `main.js` 文件中定义两个小组件，它们只是有一个模板，显示带有一些文本的 `h1`：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, in order to display these components on screen at particular URLs (such
    as `/hello` and `/world`), we can define routes inside our application:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了在特定的 URL（如 `/hello` 和 `/world`）上在屏幕上显示这些组件，我们可以在我们的应用程序内定义路由：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we've defined what components we want to use as well as the routes
    inside of our application, we'll need to create a new instance of `VueRouter`
    and pass along the routes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们想要在应用程序中使用的组件以及路由，我们需要创建一个新的 `VueRouter` 实例并传递路由。
- en: 'Although we''ve used `Vue.use(VueRouter)`, we still need to create a new instance
    of `VueRouter` and initialize our routes. This is because merely registering `VueRouter`
    as a plugin gives us access to the router option within our Vue instance(s):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们使用了 `Vue.use(VueRouter)`，但我们仍然需要创建一个新的 `VueRouter` 实例并初始化我们的路由。这是因为仅仅将 `VueRouter`
    注册为插件，就可以让我们在 Vue 实例中访问路由选项：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We then need to pass the `router` to our root Vue instance:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要将`router`传递给我们的根Vue实例：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, to display our routed components inside of our `App.vue` component,
    we need to add the `router-view` component inside the `template`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了在我们的`App.vue`组件内显示路由组件，我们需要在`template`内添加`router-view`组件：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we then navigate to `/#/hello/` or `/#/world`, the appropriate component
    is displayed:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们然后导航到`/#/hello/`或`/#/world`，将显示适当的组件：
- en: '![](assets/4c87430e-b1d6-41bc-9401-153bae4b2ec1.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4c87430e-b1d6-41bc-9401-153bae4b2ec1.png)'
- en: Dynamic routes
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态路由
- en: 'We can also dynamically match routes depending on a particular parameter. This
    is done by specifying a route with a colon before the parameter name. Here''s
    an example using a similar greeting component:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以根据特定参数动态匹配路由。这可以通过在参数名称前指定带有冒号的路由来实现。以下是使用类似问候组件的示例：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If our user navigates to `/hello`, they'll see `h1` with the text `Hello`. Otherwise,
    if they navigate to `/hello/{name}` (that is, Paul), they'll see `h1` with the
    text `Hello Paul`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的用户导航到`/hello`，他们将看到带有文本`Hello`的`h1`。否则，如果他们导航到`/hello/{name}`（即Paul），他们将看到带有文本`Hello
    Paul`的`h1`。
- en: We've made a lot of progress, but it's important to know that when we navigate
    to parameterized URLs, component lifecycle hooks aren't fired again if the parameter
    changes (that is, from `/hello/paul` to `/hello/katie`). We'll look at this soon!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取得了很大的进展，但重要的是要知道，当我们导航到参数化的URL时，如果参数发生变化（即从`/hello/paul`到`/hello/katie`），组件生命周期钩子不会再次触发。我们很快会看到这一点！
- en: Route props
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由props
- en: 'Let''s change our `/hello/name` route to pass the `name` parameter as a `component`
    prop, which can be done by adding the `props: true` flag to the route:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们将我们的`/hello/name`路由更改为将`name`参数作为`component` prop传递，可以通过在路由中添加`props: true`标志来实现：'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can then update our component to take in a prop with an `id` of name and
    also log this to the console within the life cycle hook:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以更新我们的组件以接受具有`id`名称的prop，并在生命周期钩子中将其记录到控制台中：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we then try and navigate to different dynamic routes, we''ll see that the
    created hook only fires once (unless we refresh the page) even though our page
    shows the correct name:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试导航到不同的动态路由，我们会看到创建的钩子只触发一次（除非我们刷新页面），即使我们的页面显示了正确的名称：
- en: '![](assets/e76bda75-afd5-40c1-8476-ec547d867264.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e76bda75-afd5-40c1-8476-ec547d867264.png)'
- en: Component Navigation Guards
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件导航守卫
- en: How do we fix the lifecycle hook problem? In this instance, we can use what's
    known as a Navigation Guard. This allows us to hook into different lifecycles
    of the router, such as the `beforeRouteEnter`, `beforeRouteUpdate`, and `beforeRouteLeave`
    methods.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何解决生命周期钩子问题？在这种情况下，我们可以使用所谓的导航守卫。这允许我们钩入路由器的不同生命周期，例如`beforeRouteEnter`、`beforeRouteUpdate`和`beforeRouteLeave`方法。
- en: beforeRouteUpdate
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: beforeRouteUpdate
- en: 'Let''s use the `beforeRouteUpdate` method to access information about the route
    change:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`beforeRouteUpdate`方法来访问有关路由更改的信息：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If we check the JavaScript console after navigating to a different route under
    `/hello/{name}`, we'll be able to see which route the user is going to and where
    they are coming from. The `to` and `from` objects also give us access to `params`,
    queries, the full path, and much more.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在导航到`/hello/{name}`下的不同路由后检查JavaScript控制台，我们将能够看到用户要去哪里以及他们来自哪里。`to`和`from`对象还让我们访问`params`、查询、完整路径等等。
- en: 'While we correctly get the log statements, if we try and navigate between routes,
    you''ll note that our application doesn''t update with the parameter `name` prop.
    This is because we haven''t used the `next` function after we''ve finished doing
    any computations within the guard. Let''s add that in:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们正确地获得了日志声明，但是如果我们尝试在路由之间导航，您会注意到我们的应用程序不会使用参数`name` prop进行更新。这是因为在守卫内完成任何计算后，我们没有使用`next`函数。让我们添加进去：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: beforeRouteEnter
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: beforeRouteEnter
- en: 'We can also take advantage of `beforeRouteEnter` to perform actions prior to
    entering the component route. Here''s an example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以利用`beforeRouteEnter`在进入组件路由之前执行操作。这里有一个例子：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We still have to call `next` to pass the stack down to the next route handler.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然必须调用`next`将堆栈传递给下一个路由处理程序。
- en: beforeRouteLeave
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: beforeRouteLeave
- en: 'We can also hook into `beforeRouteLeave` to perform actions whenever we''re
    navigating away from a route. As we''re already on this route within the context
    of this hook, we have access to the component instance. Let''s look at an example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以钩入`beforeRouteLeave`，以便在我们从一个路由导航离开时执行操作。由于我们已经在这个钩子的上下文中在这个路由上，我们可以访问组件实例。让我们来看一个例子：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once again, we have to call `next` in this instance.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，在这个实例中，我们必须调用`next`。
- en: Global router hooks
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局路由钩子
- en: We've looked at component Navigation Guards and while these work on a component-by-component
    basis, you may want to establish global hooks that listen to navigation events.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了组件导航守卫，虽然这些守卫是基于组件的，但您可能希望建立全局钩子来监听导航事件。
- en: beforeEach
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: beforeEach
- en: We can use `router.beforeEach` to listen for routing events globally across
    the application. This is worth using if you have authentication checks or other
    pieces of functionality that should be used in every route.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`router.beforeEach`来全局监听应用程序中的路由事件。如果您有身份验证检查或其他应该在每个路由中使用的功能，这是值得使用的。
- en: 'Here''s an example that simply logs out the route the user is going to and
    coming from. Each one of the following examples assume that the router exists
    in scope similar to the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单记录用户要去和来自的路由的示例。以下每个示例都假定路由器存在于类似以下的范围内：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once again, we have to call `next()` to trigger the next route guard.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们必须调用`next()`来触发下一个路由守卫。
- en: beforeResolve
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: beforeResolve
- en: The `beforeResolve` global route guard is triggered just before navigation is
    confirmed, but it's important to know that this is only after all component-specific
    guards and async components have been resolved.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认导航之前触发`beforeResolve`全局路由守卫，但重要的是要知道，这仅在所有特定于组件的守卫和异步组件已解析之后才会发生。
- en: 'Here''s an example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: afterEach
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: afterEach
- en: 'We can also hook into the global `afterEach` function that allows us to perform
    the action(s), but we can''t affect navigation and thus only have access to the
    `to` and `from` parameters:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以钩入全局`afterEach`函数，允许我们执行操作，但我们无法影响导航，因此只能访问`to`和`from`参数：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Resolution stack
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析堆栈
- en: 'Now that we''ve familiarized ourselves with the various different route lifecycle
    hooks on offer, it''s worth investigating the entire resolution stack whenever
    we attempt to navigate to another route:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了各种不同的路由生命周期钩子，值得在尝试导航到另一个路由时调查整个解析堆栈：
- en: '**Trigger a route change**:This is the first stage of any route lifecycle and
    is triggered any time we *attempt* to navigate to a new route. An example would
    be going from `/hello/Paul` to `/hello/Katie`. No Navigation Guards have been
    triggered at this point.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**触发路由更改**：这是任何路由生命周期的第一阶段，也是我们*尝试*导航到新路由时触发的。例如，从`/hello/Paul`到`/hello/Katie`。此时尚未触发任何导航守卫。'
- en: '**Trigger component leave guards**:Next, any leave guards are triggered, such
    as `beforeRouteLeave`, on loaded components.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**触发组件离开守卫**：接下来，任何离开守卫都会被触发，例如`beforeRouteLeave`，在加载的组件上。'
- en: '**Trigger global beforeEach guards**:As global route middleware can be created
    with `beforeEach`, these functions will be called prior to any route update.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**触发全局beforeEach守卫**：由于可以使用`beforeEach`创建全局路由中间件，这些函数将在任何路由更新之前被调用。'
- en: '**Trigger local beforeRouteUpdate** **guards in reused components**:As we saw
    earlier, whenever we navigate to the same route with a different parameter, the
    lifecycle hooks aren''t fired twice. Instead, we use `beforeRouteUpdate` to trigger
    lifecycle changes.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**触发重用组件中的本地beforeRouteUpdate守卫**：正如我们之前看到的，每当我们使用不同的参数导航到相同的路由时，生命周期钩子不会被触发两次。相反，我们使用`beforeRouteUpdate`来触发生命周期更改。'
- en: '**Trigger beforeRouteEnter in components**:This is called each time prior to
    navigating to any route. At this stage, the component isn''t rendered, so it doesn''t
    have access to the `this` component instance.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在组件中触发beforeRouteEnter**：在导航到任何路由之前每次都会调用这个。在这个阶段，组件没有被渲染，因此没有访问`this`组件实例。'
- en: '**Resolve asynchronous route components**:It then attempts to resolve any asynchronous
    components in your project. Here''s an example of one:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**解析异步路由组件**：然后尝试解析项目中的任何异步组件。这里有一个例子：'
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Trigger beforeRouteEnter in successfully activated components**:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在成功激活的组件中触发beforeRouteEnter**：'
- en: We now have access to the `beforeRouteEnter` hook and can perform any action(s)
    prior to resolving the route.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以访问`beforeRouteEnter`钩子，并在解析路由之前执行任何操作。
- en: '**Trigger global beforeResolve hooks**:Providing in-component guards and async
    route components have been resolved, we can now hook into the global `router.beforeResolve`
    method that allows us to perform action(s) at this stage.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**触发全局beforeResolve钩子**：在组件内提供守卫和异步路由组件已经被解析后，我们现在可以钩入全局的`router.beforeResolve`方法，允许我们在这个阶段执行操作。'
- en: '**Navigation**:All prior Navigation Guards have been fired, and the user is
    now successfully navigated to a route.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航**：所有先前的导航守卫都已触发，用户现在成功导航到了一个路由。'
- en: '**Trigger afterEach hooks**:Although the user has been navigated to the route,
    it doesn''t stop there. Next, the router triggers a global `afterEach` hook that
    has access to the `to` and `from` parameters. As the route has already been resolved
    at this stage, it doesn''t have the next parameter and thus cannot affect navigation.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**触发afterEach钩子**：虽然用户已经被导航到了路由，但事情并没有到此为止。接下来，路由器会触发一个全局的`afterEach`钩子，该钩子可以访问`to`和`from`参数。由于在这个阶段路由已经被解析，它没有下一个参数，因此不能影响导航。'
- en: '**Trigger DOM updates**:Routes have been resolved, and Vue can appropriately
    trigger DOM updates.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**触发DOM更新**：路由已经被解析，Vue可以适当地触发DOM更新。'
- en: '**Trigger callbacks within next in beforeRouteEnter**:As `beforeRouteEnter`
    does not have access to the component''s `this` context, the `next` parameter
    takes a callback that resolves to the component instance on navigation. An example
    can be seen here:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在beforeRouteEnter中触发next中的回调**：由于`beforeRouteEnter`没有访问组件的`this`上下文，`next`参数采用一个回调函数，在导航时解析为组件实例。一个例子可以在这里看到：'
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Programmatic navigation
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序化导航
- en: 'We''re not limited to template navigation using `router-link`; we can also
    programmatically navigate the user to different routes from within our JavaScript.
    Inside of our `App.vue`, let''s expose the `<router-view>` and give the user the
    ability to select a button that will navigate them to either the `/hello` or `/hello/:name`
    route:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅限于使用`router-link`进行模板导航；我们还可以在JavaScript中以编程方式将用户导航到不同的路由。在我们的`App.vue`中，让我们暴露`<router-view>`并让用户能够选择一个按钮，将他们导航到`/hello`或`/hello/:name`路由：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We can then add a method that pushes a new route onto the route stack*:*
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以添加一个方法，将新的路由推送到路由堆栈上*:*。
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At this point, any time we select a button, it should subsequently navigate
    the user to the appropriate route. The `$router.push()` function can take a variety
    of different arguments, depending on how you have your routes set up. Here are
    some examples:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，每当我们选择一个按钮，它应该随后将用户导航到适当的路由。`$router.push()`函数可以采用各种不同的参数，这取决于你如何设置你的路由。以下是一些例子：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: router.replace
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: router.replace
- en: 'Instead of pushing a navigation item on the stack, we can also replace the
    current history stack with `router.replace`. Here''s an example of this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以用`router.replace`替换当前的历史堆栈，而不是将导航项推送到堆栈上。这是一个例子：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: router.go
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: router.go
- en: 'If we want to navigate the user backward or forward, we can use `router.go`;
    this is essentially an abstraction over the `window.history` API. Let''s take
    a look at some examples:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要向用户后退或前进导航，我们可以使用`router.go`；这本质上是`window.history` API的一个抽象。让我们看一些例子：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Lazy loading routes
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟加载路由
- en: 'We can also lazy load our routes to take advantage of code splitting with webpack.
    This allows us to have greater performance than when eagerly loading our routes.
    To do this, we can create a small playground project. Run the following in your
    Terminal:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以延迟加载我们的路由，以利用webpack的代码拆分。这使我们比急切加载路由时拥有更好的性能。为了做到这一点，我们可以创建一个小型的试验项目。在终端中运行以下命令：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s start off by creating two components, named `Hello.vue` and `World.vue`,
    inside `src/components`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建两个组件，命名为`Hello.vue`和`World.vue`，放在`src/components`目录下：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now we have created our `Hello.vue` component, let''s create the second `World.vue`
    like so:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`Hello.vue`组件，让我们创建第二个`World.vue`：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can then initialize our router as we usually do, inside `main.js`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以像通常一样在`main.js`中初始化我们的路由：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The main difference has to do with the way in which to import our components.
    This requires the use of the `syntax-dynamic-import` Babel plugin. Install it
    into your project by running the following in your Terminal:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 主要区别在于导入组件的方式。这需要使用`syntax-dynamic-import` Babel插件。通过在终端中运行以下命令将其安装到您的项目中：
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can then update `.babelrc` to use the new plugin:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以更新`.babelrc`以使用新的插件：
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, this allows us to import our components asynchronously, like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这使我们能够异步导入我们的组件，就像这样：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can then define our routes and initialize the router, this time referencing
    the asynchronous import:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以定义我们的路由并初始化路由器，这次引用异步导入：
- en: '[PRE31]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can then see its results by looking in Chrome via Developer Tools | Network
    tab while navigating through our application:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以通过在Chrome中查看开发者工具|网络选项卡来查看其结果，同时浏览我们的应用程序：
- en: '![](assets/62c576a9-3b61-4e57-960e-160e30b8d7bc.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62c576a9-3b61-4e57-960e-160e30b8d7bc.png)'
- en: 'Each route is added to its own bundle file and subsequently gives us improved
    performance as the initial bundle is much smaller:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 每个路由都被添加到自己的捆绑文件中，随后我们得到了改进的性能，因为初始捆绑文件要小得多：
- en: '![](assets/1ca0081c-83e0-46f9-939d-5f4d4acaac13.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1ca0081c-83e0-46f9-939d-5f4d4acaac13.png)'
- en: An SPA project
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个SPA项目
- en: 'Let''s create a project that uses a RESTful API and the routing concepts that
    we''ve just learned. Create a new project by running the following in your Terminal:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个使用RESTful API和我们刚学到的路由概念的项目。通过在终端中运行以下命令来创建一个新项目：
- en: '[PRE32]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Enabling the router
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用路由
- en: We can start off by enabling the `VueRouter` plugin within our application.
    To do this, we can create a new file inside `src/router` named `index.js`. We'll
    use this file to contain all the router-specific configuration, but we'll separate
    out each route into different files depending on the underlying feature.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以首先在应用程序中启用`VueRouter`插件。为了做到这一点，我们可以在`src/router`目录下创建一个名为`index.js`的新文件。我们将使用这个文件来包含所有特定于路由的配置，但根据底层功能将每个路由分别放在不同的文件中。
- en: 'Let''s import and add the router plugin:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导入并添加路由插件：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Defining routes
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义路由
- en: To separate out the routes into different files within our application, we can
    firstly create a file under `src/components/user` named `user.routes.js`. Each
    time we have a different feature set (that requires routes), we can create our
    own `*.routes.js` file that can be imported into the router's `index.js`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将路由分离到应用程序中的不同文件中，我们首先可以在`src/components/user`下创建一个名为`user.routes.js`的文件。每当我们有一个需要路由的不同功能集时，我们可以创建我们自己的`*.routes.js`文件，然后将其导入到路由的`index.js`中。
- en: 'For now, we can just export a new empty array:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需导出一个新的空数组：
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can then add the routes to our `index.js` (even though we have none defined
    yet):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将路由添加到我们的`index.js`中（即使我们还没有定义任何路由）：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We're using the ES2015+ spread operator, which allows us to use each object
    in the array instead of the array itself.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用ES2015+扩展运算符，它允许我们使用数组中的每个对象而不是数组本身。
- en: 'To then initialize the router, we can then create a new `VueRouter` and pass
    along the routes, as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后初始化路由，我们可以创建一个新的`VueRouter`并传递路由，如下所示：
- en: '[PRE36]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, let''s export the router so that it can be used inside our main Vue
    instance:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们导出路由，以便在我们的主Vue实例中使用它：
- en: '[PRE37]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Inside `main.js`, let''s import the router and add it to the instance, as shown:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.js`中，让我们导入路由并将其添加到实例中，如下所示：
- en: '[PRE38]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Creating the UserList route
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建UserList路由
- en: The first section of our application will be a home page that displays a list
    of users from an API. We've used this example in the past, so you should be familiar
    with the steps involved. Let's create a new component under `src/components/user`
    named `UserList.vue`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第一部分将是一个主页，显示来自API的用户列表。我们过去曾使用过这个例子，所以你应该熟悉涉及的步骤。让我们在`src/components/user`下创建一个名为`UserList.vue`的新组件。
- en: 'The component will look something like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 组件将看起来像这样：
- en: '[PRE39]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Feel free to add your own test data at this point. We'll be requesting this
    data from the API momentarily.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以随意添加自己的测试数据。我们将很快从API请求这些数据。
- en: 'As we''ve created our component, we can then add a route to `user.routes.js`,
    which displays this component whenever the `''/''` (or a path of your choice)
    is activated:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建了我们的组件后，我们可以在`user.routes.js`中添加一个路由，每当激活'/'（或您选择的路径）时显示这个组件：
- en: '[PRE40]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In order to show this route, we need to update `App.vue` to subsequently inject
    the content into a `router-view` node. Let''s update `App.vue` to handle this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示这个路由，我们需要更新`App.vue`，以便随后将内容注入到`router-view`节点中。让我们更新`App.vue`来处理这个问题：
- en: '[PRE41]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Our application should then display a single user. Let's create an HTTP utility
    to get data from an API.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序应该显示一个单一的用户。让我们创建一个HTTP实用程序来从API获取数据。
- en: Getting data from an API
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从API获取数据
- en: 'Create a new file under `src/utils` named `api.js`. This will be used to create
    a base instance of `Axios`, which we can then perform HTTP requests on:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/utils`下创建一个名为`api.js`的新文件。这将用于创建`Axios`的基本实例，然后我们可以在其上执行HTTP请求：
- en: '[PRE42]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We can then use the `beforeRouteEnter` Navigation Guard to get user data whenever
    someone navigates to the `''/''` route:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用`beforeRouteEnter`导航守卫来在有人导航到'/'路由时获取用户数据：
- en: '[PRE43]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We then find that we get a list of users on screen, as illustrated in the following
    screenshot, each represented as a different list item. The next step is to create
    a `detail` component, register the detail route, and find a way to link to that
    route:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们发现屏幕上显示了用户列表，如下截图所示，每个用户都表示为不同的列表项。下一步是创建一个`detail`组件，注册详细路由，并找到一种链接到该路由的方法：
- en: '![](assets/985caab3-024e-44ae-bbdc-a24caf20342f.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/985caab3-024e-44ae-bbdc-a24caf20342f.png)
- en: Creating a detail page
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建详细页面
- en: 'In order to create a detail page, we can create `UserDetail.vue` and follow
    steps similar to the previous component:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个详细页面，我们可以创建`UserDetail.vue`并按照与上一个组件类似的步骤进行操作：
- en: '[PRE44]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As there should never be more than one user inside of our detail page, the `userInfo`
    variable has been created as a JavaScript object rather than an array.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的详细页面中永远不应该有多个用户，因此`userInfo`变量被创建为JavaScript对象而不是数组。
- en: 'We can then add the new component to our `user.routes.js`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将新组件添加到我们的`user.routes.js`中：
- en: '[PRE45]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In order to link to this component, we can add `router-link` within our `UserList`
    component:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了链接到这个组件，我们可以在我们的`UserList`组件中添加`router-link`：
- en: '[PRE46]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'If we then take a look in our browser we can see that there is only one user
    listed with the information underneath coming from the user detail linked to that
    one user:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在浏览器中看一下，我们可以看到只有一个用户列出，下面的信息来自于与该用户相关联的用户详细信息：
- en: '![](assets/4fbeea0a-1218-4af9-bee1-f67dbd6d2cad.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4fbeea0a-1218-4af9-bee1-f67dbd6d2cad.png)'
- en: Child routes
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子路由
- en: 'We can also access posts from our API, and as a result, we can display both
    the posts'' information alongside our user information. Let''s create a new component
    named `UserPosts.vue`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从我们的API中访问帖子，因此我们可以同时显示帖子信息和用户信息。让我们创建一个名为`UserPosts.vue`的新组件：
- en: '[PRE47]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This allows us to get posts based on our `userId` route parameter. In order
    to display this component as a child view, we''ll need to register it as such
    within the `user.routes.js`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们根据我们的`userId`路由参数获取帖子。为了将此组件显示为子视图，我们需要在`user.routes.js`中注册它：
- en: '[PRE48]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We can then add another `<router-view>` tag inside our `UserDetail.vue` component
    to display the child route. The template now looks like this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在我们的`UserDetail.vue`组件中添加另一个`<router-view>`标签来显示子路由。模板现在看起来像这样：
- en: '[PRE49]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'To top it off, we''ve also added some styles that display the user information
    on the left and posts on the right:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还添加了一些样式，将用户信息显示在左侧，帖子显示在右侧：
- en: '[PRE50]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If we then head to our browser, we can see how the data appears just as we
    had planned, with the user information displaying on the left and the posts on
    the right:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们转到浏览器，我们可以看到数据的显示方式正如我们计划的那样，用户信息显示在左侧，帖子显示在右侧：
- en: '![](assets/e23a65d4-d0d5-425a-96e6-490e124b718b.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e23a65d4-d0d5-425a-96e6-490e124b718b.png)'
- en: Ta-da! We've now created a Vue application with multiple routes, child routes,
    parameters, and more!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 哒哒！我们现在已经创建了一个具有多个路由、子路由、参数等的Vue应用程序！
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this section, we learned about the Vue Router and how we can use it to create
    Single Page Applications. As a result, we covered everything from initializing
    the router plugin to defining routes, components, Navigation Guards, and much
    more. We now have the necessary knowledge to create Vue applications that scale
    past a singular component.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了Vue Router以及如何使用它来创建单页面应用程序。因此，我们涵盖了从初始化路由器插件到定义路由、组件、导航守卫等等的所有内容。我们现在有必要的知识来创建超越单一组件的Vue应用程序。
- en: Now that we have expanded our knowledge and understand how to use the Vue Router,
    we can move on to handling state management with `Vuex` in the next chapter.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经扩展了我们的知识，并了解了如何使用Vue Router，我们可以在下一章中继续处理`Vuex`中的状态管理。
