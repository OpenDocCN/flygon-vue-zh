- en: Vue.js Directives
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js指令
- en: When writing Vue applications, we have access to a variety of powerful directives
    that allow us to shape the way our content appears on the screen. This allows
    us to craft highly interactive user experiences with additions to our HTML templates.
    This chapter will be looking at each one of these directives in detail, as well
    as any shortcuts and patterns that allow us to improve our workflow.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写Vue应用程序时，我们可以访问各种强大的指令，这些指令允许我们塑造内容在屏幕上的呈现方式。这使我们能够通过对HTML模板进行添加来打造高度交互式的用户体验。本章将详细介绍这些指令，以及任何缩写和模式，使我们能够改进我们的工作流程。
- en: 'By the end of this chapter you will have:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将学会：
- en: Used attribute binding to conditionally change element behavior
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用属性绑定来有条件地改变元素行为
- en: Investigated two-way binding with `v-model`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 研究了使用`v-model`的双向绑定
- en: Conditionally displayed information with `v-if`, `v-else`, and `v-if-else`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`v-if`，`v-else`和`v-if-else`有条件地显示信息
- en: Iterated over items in a collection with `v-for`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`v-for`在集合中对项目进行迭代
- en: Listened to events (such as keyboard/input) with `v-on`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听事件（如键盘/输入）使用`v-on`
- en: Used event modifiers to change the binding of a directive
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用事件修饰符来改变指令的绑定
- en: Used filters to change the view data of a binding
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用过滤器来改变绑定的视图数据
- en: Looked at how we can use shorthand syntax to save time and be more declarative
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看了一下我们如何可以使用简写语法来节省时间并更具有声明性
- en: Model
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型
- en: 'One of the most common requirements for any business application is text input.
    Vue assists us with this need with the `v-model` directive. It allows us to create
    reactive two-way data bindings on form input events, making working with forms
    easily. It''s a welcome abstraction over what would otherwise be a tedious way
    to get form values and input events. To explore this, we can create a new Vue
    project:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 任何业务应用程序最常见的需求之一就是文本输入。Vue通过`v-model`指令来满足我们的需求。它允许我们在表单输入事件上创建反应式的双向数据绑定，使得处理表单变得更加容易。这是对获取表单值和输入事件的一种方便的抽象。为了探索这一点，我们可以创建一个新的Vue项目：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can head over to our root `App.vue` file and remove everything from the
    template and instead add a new `div` that encompasses a `label` and `form` input:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以转到我们的根`App.vue`文件，从模板中删除所有内容，而是添加一个包含`label`和`form`输入的新`div`：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This gives us the ability to add text to our input element, that is, prompting
    the user to input their name. I''d like to capture this value and display it below
    the name element for demonstration sake. In order to do this, we''d need to add
    the `v-model` directive to the input element; this will allow us to capture the
    user input events and place the value into a variable. We''ll call this variable
    `name` and subsequently add it to our `data` object within our Vue instance. As
    the value is now captured as a variable, we can display this in our template with
    interpolation binding:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够向输入元素添加文本，即提示用户输入他们的姓名。我想捕获这个值并在姓名元素下方显示出来以进行演示。为了做到这一点，我们需要在输入元素中添加`v-model`指令；这将允许我们捕获用户输入事件并将值放入一个变量中。我们将这个变量称为`name`，并随后将其添加到我们Vue实例中的`data`对象中。现在值已经被捕获为一个变量，我们可以在模板中使用插值绑定来显示这个值：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result can be seen in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可以在以下截图中看到：
- en: '![](assets/57e1b1bd-0dc7-4d39-91f1-945d91e28b95.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57e1b1bd-0dc7-4d39-91f1-945d91e28b95.png)'
- en: 'We''re not limited to working with text inputs when using `v-model`, we can
    also capture radio buttons or checkboxes when selected. The following example
    shows this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`v-model`时，我们不仅限于处理文本输入，还可以在选择时捕获单选按钮或复选框。以下示例展示了这一点：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will then display in our browser like so:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在我们的浏览器中显示如下：
- en: '![](assets/e61b09d2-ec24-4925-a376-4471e6a09a50.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e61b09d2-ec24-4925-a376-4471e6a09a50.png)'
- en: The great thing about `v-model` is that it's highly adaptable to a variety of
    form controls, giving us declarative power over our HTML templates.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-model`的好处是，它非常适应各种表单控件，让我们对HTML模板具有声明性的控制权。'
- en: Iteration with v-for
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用v-for进行迭代
- en: 'If we have content that we''d like to repeat over a certain number, we can
    use `v-for`. This is often used to populate a template with a dataset. For example,
    let''s say we have a list of groceries and we wanted to display this list on the
    screen; we could do this with `v-for`. We can create a new project to see this
    in action:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有想要重复一定次数的内容，我们可以使用`v-for`。这通常用于使用数据集填充模板。例如，假设我们有一个杂货清单，并且我们想要在屏幕上显示这个清单；我们可以使用`v-for`来做到这一点。我们可以创建一个新项目来看看它的运行情况：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To start with, let''s create an array with a list of groceries that we can
    display on screen. Each item has an `id`, `name`, and `quantity`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个包含杂货清单的数组，我们可以在屏幕上显示。每个项目都有`id`，`name`和`quantity`：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can then iterate over each item inside of our groceries list and modify
    the DOM to display them on screen:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以遍历我们的杂货清单中的每个项目，并修改DOM以在屏幕上显示它们：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Notice how we have a `v-bind:key="item.id"` on the `li` element. This makes
    Vue work better with iterations that change over time and a key should be added
    where possible:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在`li`元素上有一个`v-bind:key="item.id"`。这使得Vue在随时间变化的迭代中更好地工作，并且应尽可能添加一个键：
- en: '![](assets/1ef683ca-2198-4e34-9033-b7a37aa89275.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1ef683ca-2198-4e34-9033-b7a37aa89275.png)'
- en: Bindings
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定
- en: 'In this section, we''re going to look at how we can dynamically toggle CSS
    classes within our Vue applications. We''ll start off by investigating the `v-bind`
    directive and we''ll see how this can be applied to both `class` and `style` attributes.
    This is great for conditionally applying styles based on a particular business
    logic. Let''s create a new Vue project for this example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看看如何在Vue应用程序中动态切换CSS类。我们将首先调查`v-bind`指令，看看如何将其应用于`class`和`style`属性。这对于根据特定业务逻辑有条件地应用样式非常有用。让我们为此示例创建一个新的Vue项目：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Inside of our project, we can make checkboxes that represent the different states
    of our application. We'll start off with one named `red`. As you may be able to
    infer, by checking this we can turn a particular piece of text `red` in color
    and subsequently turn it black by unchecking it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们可以创建代表应用程序不同状态的复选框。我们将从一个名为`red`的开始。正如您可能推断的那样，通过检查这个复选框，我们可以将特定的文本颜色变为`red`，然后通过取消选中它将其变为黑色。
- en: 'Create a `data` object named `red` with the value of `false` inside `App.vue`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.vue`中创建一个名为`red`的`data`对象，其值为`false`：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This represent the value of our checkbox, which we''ll be able to set with
    the `v-model` directive:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这代表了我们复选框的值，我们将能够使用`v-model`指令来设置它：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'At this point, we can create a new CSS class for our color:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以为我们的颜色创建一个新的CSS类：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you can see in the browser if we open the dev tools, we can see that the
    color of the text is currently set to `blue`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在浏览器中所看到的，如果我们打开开发工具，可以看到文本的颜色当前设置为`blue`：
- en: '![](assets/e906133c-b558-45a1-ab86-4cd6523d2b20.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e906133c-b558-45a1-ab86-4cd6523d2b20.png)'
- en: 'Finally, to add the addition/removal of the class based on the context of the
    `red` variable, we''ll need to add the `v-bind:class` directive to our `h1` like
    so:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了根据`red`变量的上下文添加/删除类，我们需要在我们的`h1`上添加`v-bind:class`指令，如下所示：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now in our browser, we can see that we have the ability to check the box to
    set the text to `red` like so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在我们的浏览器中，我们可以看到我们有能力勾选框来将文本设置为`red`，就像这样：
- en: '![](assets/dc02a9df-a9dd-4162-b481-5ff39fa36596.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dc02a9df-a9dd-4162-b481-5ff39fa36596.png)'
- en: Adding secondary properties
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加次要属性
- en: 'If we also wanted to add another property to our class binding, we''d need
    to add another property (such as `strikeThrough`) to our `data` object like so:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还想要向我们的类绑定添加另一个属性，我们需要在`data`对象中添加另一个属性（比如`strikeThrough`）：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can then add another `checkbox`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以添加另一个`checkbox`：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With an appropriate `style`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用适当的`style`：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we then need to adjust our binding to add the extra class like so:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要调整我们的绑定以添加额外的类，就像这样：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here''s the results of checking both boxes:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是勾选两个框的结果：
- en: '![](assets/0aa00a8a-02df-4684-9173-d45a35cd66be.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0aa00a8a-02df-4684-9173-d45a35cd66be.png)'
- en: Style bindings
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式绑定
- en: 'We may want to add various styles to our heading, so instead, we could use
    `v-bind:style`. We can see this in action by creating a new object named `headingStyles`
    inside of our `data` object:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能想要向我们的标题添加各种样式，因此，我们可以使用`v-bind:style`。通过在我们的`data`对象中创建一个名为`headingStyles`的新对象，我们可以看到这个功能的实际效果：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Anytime we're adding CSS classes that would otherwise be kebab-case (for example,
    `text-align`) they now become camel-case (`textAlign`) inside of our JavaScript.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们添加本应为kebab-case的CSS类（例如`text-align`）时，它们现在在我们的JavaScript中变为camel-case（`textAlign`）。
- en: 'Let''s add the style to our heading inside of the template:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在模板中为我们的标题添加样式：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Every time the compiler sees a `v-bind` or `:` the content inside of `"` is
    treated as JavaScript with an implicit `this`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每当编译器看到`v-bind`或`:`时，`"`内的内容都被视为JavaScript，具有隐式的`this`。
- en: 'We could also split this to add `layoutStyles` as a separate object, for example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将其拆分为一个单独的对象，例如添加`layoutStyles`：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'So all that we have to do at this point is add the `styles` in an array within
    the `template` like so within the `<h1>` tag, using `v-bind`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们现在需要在`template`中的数组中添加`styles`，就像在`<h1>`标签中使用`v-bind`一样：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](assets/54a1ea26-3a11-4a1c-a346-95fd2d5e0363.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/54a1ea26-3a11-4a1c-a346-95fd2d5e0363.png)'
- en: You can now see the results of our styling on screen. Note that any items further
    in the array will take styling preference over items declared first.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以在屏幕上看到我们的样式结果。请注意，数组中的任何后续项目都将优先采用首先声明的样式。
- en: DOM events and v-on
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM事件和v-on
- en: We can handle DOM events within Vue by using `v-on`. By listening to DOM events,
    we're able to react to user input with everything from key-down events (such as
    clicking the *Enter* button) to button click events and more.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`v-on`在Vue中处理DOM事件。通过监听DOM事件，我们能够对用户输入做出反应，从按键事件（比如点击*Enter*按钮）到按钮点击事件等等。
- en: 'Let''s make a playground project to try this in our own project:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个试验项目来尝试在我们自己的项目中使用这个功能：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s imagine an `input` box such that, when we either hit the Add button
    or hit the *Enter* key, the input gets added to an array:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个`input`框，当我们点击添加按钮或按下*Enter*键时，输入将被添加到数组中：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You will have to copy the object before pushing it in.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在将其推入之前，您必须复制对象。
- en: 'What exactly is happening here? We''re capturing the value of the user input
    inside of the person string using the `v-model` directive; after that we''re listening
    for both `keyup.enter` and `v-on:click` events, both of which call the `addPerson`
    function, and subsequently adding the `person` to an array. After that, using
    the `v-for` directive, we''re able to output this list of people to the page:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里到底发生了什么？我们使用`v-model`指令捕获了用户输入的值，然后我们监听了`keyup.enter`和`v-on:click`事件，两者都调用了`addPerson`函数，随后将`person`添加到数组中。之后，使用`v-for`指令，我们能够将这个人员列表输出到页面上：
- en: '![](assets/ace0b21b-bc4c-45b3-98bf-43bf51fed64a.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ace0b21b-bc4c-45b3-98bf-43bf51fed64a.png)'
- en: Key modifiers
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按键修饰符
- en: 'We''re not limited to simply using the `enter` modifier, we also have access
    to a variety of shorthand modifiers, for example the use of the @ symbol and shortening
    `v-on:event.name` `v-on:` by replacing it with the `@` symbol. Other shortening
    methods include:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅仅局限于使用`enter`修饰符，我们还可以使用各种简写修饰符，例如使用@符号和缩短`v-on:event.name` `v-on：`，用@符号替换它。其他缩写方法包括：
- en: '`@` is the same as ``v-on:``'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@`与`v-on：`相同'
- en: '`@keyup.13` is the same as `@keyup.enter`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@keyup.13`与`@keyup.enter`相同'
- en: '`@key*` can be queued, such as `@keyup.ctrl.alt.delete`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@key*`可以排队，例如`@keyup.ctrl.alt.delete`'
- en: 'Other modifiers can be seen in the following table:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 其他修饰符可以在下表中看到：
- en: '| **Name** | **Description** | **Code Example** |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **描述** | **代码示例** |'
- en: '| `.enter` | Whenever the *Enter* key is tapped. | `<input v-on:keyup.enter="myFunction"
    />` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `.enter` | 每当按下*Enter*键时。 | `<input v-on:keyup.enter="myFunction" />` |'
- en: '| `.tab` | Whenever the *Tab* key is tapped. | `<input v-on:keyup.tab="myFunction"
    />` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `.tab` | 每当按下*Tab*键时。 | `<input v-on:keyup.tab="myFunction" />` |'
- en: '| `.delete` | Whenever the *Delete* or *Backspace* key is tapped. | `<input
    v-on:keyup.delete="myFunction" />` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `.delete` | 每当按下*Delete*或*Backspace*键时。 | `<input v-on:keyup.delete="myFunction"
    />` |'
- en: '| `.esc` | Whenever the *Esc* key is tapped. | `<input v-on:keyup.esc="myFunction"
    />` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `.esc` | 每当按下*Esc*键时。 | `<input v-on:keyup.esc="myFunction" />` |'
- en: '| `.up` | Whenever the up arrow key is tapped. | `<input v-on:keyup.up="myFunction"
    />` |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `.up` | 每当按下上箭头键时。 | `<input v-on:keyup.up="myFunction" />` |'
- en: '| `.down` | Whenever the down arrow key is tapped. | `<input v-on:keyup.down="myFunction"
    />` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `.down` | 每当按下下箭头键时。 | `<input v-on:keyup.down="myFunction" />` |'
- en: '| `.left` | Whenever the left arrow key is tapped. | `<input v-on:keyup.left="myFunction"
    />` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `.left` | 每当按下左箭头键时。 | `<input v-on:keyup.left="myFunction" />` |'
- en: '| `.right` | Whenever the right arrow key is tapped. | `<input v-on:keyup.right="myFunction"
    />` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `.right` | 每当按下右箭头键时。 | `<input v-on:keyup.right="myFunction" />` |'
- en: Event modifiers
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件修饰符
- en: Often when we're working with events inside of JavaScript, we'll modify the
    functionality of the event itself. This means that we need to add `event.preventDefault()`
    or `event.stopPropagation()` within our handler. Vue helps us abstract these calls
    by handling this inside of the template using event modifiers.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在JavaScript中处理事件时，我们会修改事件本身的功能。这意味着我们需要在处理程序中添加`event.preventDefault()`或`event.stopPropagation()`。Vue通过在模板中使用事件修饰符来处理这些调用，帮助我们抽象化这些调用。
- en: 'This is best shown with a `form` example. Let''s take our previous people example
    and modify this to contain a `form` element:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这最好通过一个`form`示例来展示。让我们以前面的人员示例为例，并修改为包含一个`form`元素：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you try and run this example, you''ll notice that when we click the Add
    button, the page refreshes. This is because it''s the default behavior of the
    `form` submitted event. As we''re not POSTing data to a server at this point,
    we instead need to add the `.prevent` modifier to our `submit` event:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试运行此示例，您会注意到当我们点击“添加”按钮时，页面会刷新。这是因为这是`form`提交事件的默认行为。由于我们此时没有向服务器POST数据，因此我们需要在我们的`submit`事件中添加`.prevent`修饰符：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now when we select our button, the `addPerson` function is called without refreshing
    the page.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们选择我们的按钮时，`addPerson`函数被调用而不刷新页面。
- en: Conditionally showing DOM elements
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有条件地显示DOM元素
- en: When creating business applications, there'll be many times when you only want
    to display a particular element if a certain condition is **true** or **false**.
    This could include a user's age, whether the user is logged in, whether it is
    an administrator or any other piece of business logic you can think of.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建业务应用程序时，会有许多时候，您只想在某个条件为**true**或**false**时显示特定的元素。这可能包括用户的年龄，用户是否已登录，是否为管理员或您能想到的任何其他业务逻辑片段。
- en: 'For this, we have a variety of conditional directives such as `v-show`, `v-if`,
    `v-else`, and `v-else-if`, all of which act in similar yet different ways. Let''s
    take a look at this in more detail by creating a new playground project:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一点，我们有各种条件指令，如`v-show`、`v-if`、`v-else`和`v-else-if`，它们都以类似但不同的方式起作用。让我们通过创建一个新的示例项目来更详细地了解这一点：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: v-show
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-show
- en: 'If we want to hide elements from view yet still have them in the DOM (effectively
    `display:none`), we can use `v-show`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要隐藏元素但仍然在DOM中拥有它们（有效地`display:none`），我们可以使用`v-show`：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For example, if we had a data variable that allowed us to determine whether
    someone was an administrator, we''d be able to use `v-show` to only show protected
    content to appropriate users:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个数据变量，可以确定某人是否是管理员，我们可以使用`v-show`只向适当的用户显示受保护的内容：
- en: '![](assets/41ae3f14-c246-456f-a71c-14bf49db5c8f.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/41ae3f14-c246-456f-a71c-14bf49db5c8f.jpg)'
- en: 'Notice how, in the preceding figure when `admin` is set to `false`, the `display:
    none` style is added to the element. At first glance it may seem like this is
    exactly what we want, our item has disappeared! In certain circumstances, this
    is the case, but in other scenarios, the use of `v-if` may be better.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，在前面的图中，当`admin`设置为`false`时，`display: none`样式被添加到元素中。乍一看，这似乎就是我们想要的，我们的项目已经消失了！在某些情况下，这是正确的，但在其他情况下，使用`v-if`可能更好。'
- en: '`v-show` doesn''t remove the element from the DOM, meaning that everything
    is initially loaded and simply hidden if it isn''t being used. Our page will have
    to render this content and this could cause performance issues when used in the
    wrong way; therefore prior to using `v-show` ask this question:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-show`不会从DOM中移除元素，这意味着一切都会被初始加载，如果没有被使用，就会被隐藏起来。我们的页面将不得不渲染这些内容，如果使用不当可能会导致性能问题；因此在使用`v-show`之前要问这个问题：'
- en: Do I need to show this component again? If so, will be showing it often?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要再次显示这个组件吗？如果是，会经常显示吗？
- en: If the answer to this question is **yes**, then `v-show` may be better in this
    circumstance. Otherwise, if the answer to this is **no,** then `v-if` may be better
    in this use case.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对这个问题的答案是**是**，那么在这种情况下`v-show`可能更好。否则，如果对这个问题的答案是**否**，那么在这种用例中`v-if`可能更好。
- en: v-if
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-if
- en: 'If we''d like to conditionally remove the element from the DOM, we can use
    `v-if`. Let''s replace our previous `v-show` directive with `v-if`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想有条件地从DOM中移除元素，我们可以使用`v-if`。让我们用`v-if`替换之前的`v-show`指令：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Notice that now when we look at the DOM, the element is entirely removed:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，现在当我们查看DOM时，元素已完全被移除：
- en: '![](assets/666919bd-0ba3-4999-82dd-830f4bd3e78c.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/666919bd-0ba3-4999-82dd-830f4bd3e78c.jpg)'
- en: v-else
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-else
- en: A common pattern when showing or hiding elements is to instead show a different
    piece of content. Whilst we could use `v-if` or `v-show` multiple times, we also
    have access to the `v-else` directive, which can be used directly after showing
    or hiding the element.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示或隐藏元素时的常见模式是显示不同的内容。虽然我们可以多次使用`v-if`或`v-show`，但我们也可以使用`v-else`指令，它可以直接在显示或隐藏元素之后使用。
- en: 'Let''s take a look at this in more detail:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地了解一下这一点：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: By adding the `v-else` directive to the second `<article>`, we're telling Vue
    that we want to show this DOM element whenever the first condition is hidden.
    Because of the way this works, we don't have to pass a value to `v-else` as Vue
    is specifically looking for a structural directive in the preceding element.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在第二个`<article>`中添加`v-else`指令，我们告诉Vue我们希望在第一个条件隐藏时显示这个DOM元素。由于这种工作方式，我们不必向`v-else`传递一个值，因为Vue明确地在前面的元素中寻找结构指令。
- en: 'It''s important to realize that this wouldn''t work if we had an element in
    between the `v-if` and `v-else` directive(s), such as this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '重要的是要意识到，如果在`v-if`和`v-else`指令之间有一个元素，这种方法是行不通的，比如这样： '
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: v-else-if
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-else-if
- en: Whilst `v-else` works well in standard **IF NOT A** then **B** scenarios, you
    may want to test for multiple values and show a different template. Similar to
    `v-else`, we can use `v-else-if` to change the behavior of our application. For
    this example, we'll have fun by using a generator as introduced with ES2015.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`v-else`在标准的**IF NOT A** then **B**场景中运行良好，但您可能希望测试多个值并显示不同的模板。类似于`v-else`，我们可以使用`v-else-if`来改变应用程序的行为。在这个例子中，我们将通过使用ES2015引入的生成器来玩耍。
- en: 'To use the generator, we''ll need to install the `babel-polyfill` package;
    this also allows us to use things such as `async` and `await` better promise handling:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用生成器，我们需要安装`babel-polyfill`包；这也允许我们更好地处理`async`和`await`等内容：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'After installing it, we can modify our Webpack configuration (`webpack.config.js`)
    to include it inside of our entry files:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以修改我们的Webpack配置（`webpack.config.js`）将其包含在我们的入口文件中：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we hadn''t installed the appropriate polyfill, we''d not be able to use
    the generator functionality within our project. Let''s make a new method named
    `returnRole()` that gives us one of three users "roles" when called:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有安装适当的polyfill，我们将无法在项目中使用生成器功能。让我们创建一个名为`returnRole()`的新方法，当调用时给我们三个用户中的一个“角色”：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you''ve never seen a generator function before, you may be wondering what
    the asterisk (`*`) is that we''ve prefixed to our function name, as well as the
    `yield` keyword. This essentially allows us to step through the function by capturing
    an instance of it. For example, let''s make a data value that returns our iterator,
    which we can call `next()` on:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前从未见过生成器函数，您可能会想知道我们在函数名前面加上的星号（`*`）以及`yield`关键字是什么。这实质上允许我们通过捕获它的实例来逐步执行函数。例如，让我们创建一个返回迭代器的数据值，我们可以在其上调用`next()`：
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can, therefore, make a template that takes advantage of `v-if-else` by displaying
    different messages depending on the user role:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以制作一个模板，利用`v-if-else`来根据用户角色显示不同的消息：
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: There are different messages shown on the screen depending on the user role.
    If the user has no role, we use `v-else` to show a message stating `You have no
    role!`. This example shows how we can take advantage of structural directives
    to truly change the DOM depending on our application state.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上显示的消息取决于用户角色。如果用户没有角色，我们使用`v-else`来显示一条消息，说明“您没有角色！”。这个例子展示了我们如何利用结构指令根据应用程序状态真正改变DOM。
- en: Filters
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器
- en: 'In this section, we''re going to investigate filters; you may have come across
    filters before in frameworks such as Angular (Pipes). Perhaps we want to create
    a filter that allows us to format a date in a readable format (DD/MM/YYYY). Let''s
    create a playground project to investigate this further:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究过滤器；您可能在诸如Angular（管道）之类的框架中遇到过过滤器。也许我们想创建一个允许我们以可读格式（DD/MM/YYYY）格式化日期的过滤器。让我们创建一个探索项目来进一步研究这个问题：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If we had some test people and used the `v-for` directive to display them on
    screen, we''d get the following result:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一些测试人员，并使用`v-for`指令在屏幕上显示它们，我们将得到以下结果：
- en: '![](assets/90cd6697-f297-41f9-81e3-81584b5e8a08.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/90cd6697-f297-41f9-81e3-81584b5e8a08.png)'
- en: 'To obtain the result shown in the preceding screenshot, where we display our
    test people with the appropriate data through the `v-for` directive, we would
    have to add the following code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得前面截图中显示的结果，我们通过`v-for`指令显示我们的测试人员与适当的数据，我们需要添加以下代码：
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We could do the work of converting the date ourselves, but where possible it's
    always worth looking to see if there is a trusted third-party component that can
    do the same thing. We'll be using moment ([https://momentjs.com](https://momentjs.com))
    to do this.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以自己做日期转换的工作，但在可能的情况下，值得寻找是否有可信赖的第三方组件可以做同样的事情。我们将使用moment ([https://momentjs.com](https://momentjs.com))
    来实现这一点。
- en: 'Let''s install `moment` for our project:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的项目安装 `moment`：
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We can then add it to our `App.vue`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将其添加到我们的 `App.vue` 中：
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Locally registered filters
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地注册的过滤器
- en: 'We then have a choice: add the filter locally to this Vue instance, or add
    it globally to the entire project. We''ll first look at how to add it locally:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有一个选择：将过滤器添加到此Vue实例的本地，或者将其全局添加到整个项目中。我们首先看看如何在本地添加它：
- en: 'First, we''ll create a function that takes in a value and returns the date
    as a formatted date using `moment`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个函数，该函数接受一个值，并使用 `moment` 返回格式化的日期：
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We can then add a filters object to our Vue instance and reference this by
    a `key`, such as `date`. When we call the `date` filter inside of our template,
    the value will be passed to this filter and instead, we''ll display the converted
    date on screen. This can be done by using the `|` key, as seen in the following
    code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在我们的Vue实例中添加一个filters对象，并通过一个 `key` 来引用它，比如 `date`。当我们在模板中调用 `date` 过滤器时，值将传递给这个过滤器，而我们将在屏幕上显示转换后的日期。这可以通过使用
    `|` 键来实现，如下面的代码所示：
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Finally, to add this to the local Vue instance, we can add a `filters` object
    that references our function:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要将其添加到本地Vue实例中，我们可以添加一个引用我们函数的 `filters` 对象：
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The result of this shows the date as intended:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的结果显示了预期的日期：
- en: '![](assets/fad4697a-7219-4dec-96b0-372a6c51fe20.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fad4697a-7219-4dec-96b0-372a6c51fe20.png)'
- en: Globally registered filters
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局注册的过滤器
- en: 'If we wanted to use this filter elsewhere, we could abstract this function
    into its own file and reference our filter once again, or, we could register the
    `date` filter globally inside of our application. Let''s abstract our `convertDateToString`
    function into its own file at `src/filters/date/date.filter.js`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在其他地方使用这个过滤器，我们可以将这个函数抽象成自己的文件，并再次引用我们的过滤器，或者，我们可以在应用程序中全局注册 `date` 过滤器。让我们将我们的
    `convertDateToString` 函数抽象成自己的文件，放在 `src/filters/date/date.filter.js` 中：
- en: '[PRE41]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Afterwards we can define the filter inside of our `main.js` with the following
    interface: `Vue.filter(''filterName'', filterFunction())`. As we''ve abstracted
    the function into its own file we can import it and define it like so:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以在我们的 `main.js` 中定义过滤器的接口：`Vue.filter('filterName', filterFunction())`。由于我们已经将函数抽象成了自己的文件，我们可以导入它并像这样定义它：
- en: '[PRE42]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: If you check our application again, you'll see that we get the same result as
    before. It is therefore important to consider where and how many times the filter
    will be used inside of the project. If you're using it on a specific component/instance
    (once) then you should place it locally; otherwise, place it globally.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您再次检查我们的应用程序，您会看到我们得到了与之前相同的结果。因此，重要的是要考虑过滤器在项目中的使用位置和次数。如果您在特定组件/实例上使用它（一次），那么应该将它放在本地；否则，将其放在全局。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at many Vue directives and their usage. This now
    gives us the power to declaratively change the way our templates appear on screen,
    including ways to capture user input, hook into events, filter view data, and
    much more. This chapter should be used as a reference whenever you're looking
    to implement directives in a Vue.js application.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了很多Vue指令及其用法。这使我们有能力以声明方式改变模板在屏幕上的显示方式，包括捕获用户输入、挂接事件、过滤视图数据等等。每当您想在Vue.js应用程序中实现指令时，都应该将本章用作参考。
- en: Component-based architecture is an important concept that allows us to build
    scalable projects that range from personal to enterprise. In the next chapter,
    we'll be looking at how we can create these reusable components to encapsulate
    pieces of functionality within our projects.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 基于组件的架构是一个重要的概念，它使我们能够构建从个人到企业的可扩展项目。在下一章中，我们将看看如何创建这些可重用的组件，以封装项目中的功能部分。
