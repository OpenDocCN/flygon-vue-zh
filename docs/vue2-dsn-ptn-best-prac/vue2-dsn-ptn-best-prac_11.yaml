- en: Optimization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化
- en: If you've been writing applications targeting the web platform for many years,
    you'll have seen just how many changes the web has gone through. What started
    off as a simple document viewer now sees us having to deal with complex build
    steps, state management patterns, continuous review of performance and compatibility,
    and much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你多年来一直在编写针对Web平台的应用程序，你会看到Web经历了多少变化。最初只是一个简单的文档查看器，现在我们必须处理复杂的构建步骤、状态管理模式、持续审查性能和兼容性等等。
- en: Thankfully, the popularity of JavaScript and subsequent tooling means that there
    are templates and tried-and-tested techniques that we can use to optimize our
    application and deployment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 值得庆幸的是，JavaScript的流行和随后的工具意味着有模板和经过验证的技术，我们可以用来优化我们的应用程序和部署。
- en: 'In this chapter, we''ll take a look at the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下以下主题：
- en: The `vue-pwa` template from the Vue CLI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Vue CLI的`vue-pwa`模板
- en: Features of Progressive Web Applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐进式Web应用程序的特点
- en: Using ngrok to view localhost applications on any device
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ngrok在任何设备上查看本地主机应用程序
- en: Using Firebase hosting to deploy web applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Firebase托管部署Web应用程序
- en: Continuous Integration and what it means for large-scale projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成及其对大型项目的意义
- en: Automatically running tests on each Git `commit`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每次Git`commit`上自动运行测试
- en: Automatically deploying to Firebase hosting on each Git `commit`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每次Git`commit`上自动部署到Firebase托管
- en: Progressive Web Applications (PWAs)
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐进式Web应用程序（PWA）
- en: PWAs can be defined as applications that use the capabilities of the modern
    web to deliver thoughtful, engaging, and interactive experiences. My definition
    of PWAs is one that encompasses the principle of progressive enhancement. We could
    certainly take advantage of everything that PWAs have to offer, but we don't have
    to (or at least not all at once).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PWAs可以被定义为利用现代Web的能力来提供周到、引人入胜和互动体验的应用程序。我的对PWAs的定义是包含渐进增强原则的。我们当然可以利用PWAs所提供的一切，但我们不必这样做（或者至少不是一次性做完）。
- en: This means that not only are we continuing to improve our application over time,
    but adhering to these principles forces us to think in the perspective of a user
    who has bad internet connectivity, wants an offline-first experience, needs home-screen
    accessible apps, and so on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们不仅在不断改进我们的应用程序，而且遵循这些原则迫使我们以用户的角度思考，用户可能有不稳定的互联网连接，想要离线优先体验，需要主屏幕可访问的应用程序等等。
- en: 'Once again, the Vue CLI makes this process easy for us, as it provides a PWA
    template. Let''s create a new Vue application with the appropriate template:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，Vue CLI让这个过程对我们来说很容易，因为它提供了一个PWA模板。让我们使用适当的模板创建一个新的Vue应用程序：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Throughout this chapter, we'll be looking at the benefits that this template
    gives us, and ways we can make both our application and operations more progressive.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下这个模板给我们带来的好处，以及我们如何使我们的应用程序和操作更加渐进。
- en: Web application manifest
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序清单
- en: You may have seen the benefits of applications that use a web app manifest already—if
    you've ever been on a website that asks you to install this on your home screen
    or if you've noticed that the color of the address bar change from default gray
    to a different color on Android Chrome, that's a progressive app.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经看到使用Web应用程序清单的应用程序的好处——如果你曾经在一个要求你在主屏幕上安装的网站上，或者如果你注意到在Android Chrome上地址栏的颜色从默认灰色变成不同颜色，那就是一个渐进式应用程序。
- en: 'Let''s head over to `static/manifest.json` and investigate the contents:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到`static/manifest.json`并调查内容：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have the option to give our application `name` and `short_name`; these will
    be shown when installing on the home screen of a device.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有选项来给我们的应用程序`name`和`short_name`；这些将在设备的主屏幕上安装时显示。
- en: The `icons` array is used to provide varying sizes of our icon for a high-definition
    experience across devices. The `start_url` defines the file to be loaded upon
    startup when installed on a user's home screen and thus points toward `index.html`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`icons`数组用于为不同大小的图标提供高清体验。`start_url`定义了在用户主屏幕上安装时启动时要加载的文件，因此指向`index.html`。'
- en: We can change how our application appears when running on a device as a PWA
    with the display attribute. There are various options available, such as `browser`,
    `standalone`, `minimal-ui`, and `fullscreen`. Each one changes how our application
    is displayed on the device; [(https://developers.google.com/web/fundamentals/web-app-manifest/)](https://developers.google.com/web/fundamentals/web-app-manifest/)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过显示属性在设备上运行PWA时更改应用程序的外观。有各种可用选项，如`browser`、`standalone`、`minimal-ui`和`fullscreen`。每个选项都会改变应用程序在设备上的显示方式；[(https://developers.google.com/web/fundamentals/web-app-manifest/)](https://developers.google.com/web/fundamentals/web-app-manifest/)
- en: 'here''s an example of both browser and standalone:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个浏览器和独立应用的例子：
- en: '![](assets/0c9ee94d-9fc1-4205-b005-b02e594ca17b.jpg)Display options—the web
    app manifest'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/0c9ee94d-9fc1-4205-b005-b02e594ca17b.jpg)显示选项-Web应用清单'
- en: 'We can also take advantage of the `background_color` option to change the color
    of the splash screen background when our PWA starts, as seen in the following
    screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以利用`background_color`选项来改变PWA启动时闪屏背景的颜色，如下截图所示：
- en: '![](assets/ff35908d-7857-4d28-8de5-d8ba20026233.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff35908d-7857-4d28-8de5-d8ba20026233.png)'
- en: If we want to change the color of the toolbar, we can use the `theme_color`
    option (we'll look at an example as we move ahead).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要改变工具栏的颜色，我们可以使用`theme_color`选项（随着我们继续前进，我们将看一个例子）。
- en: There are other options you can pass to your web app manifest and you should
    customize these based on the needs of your project. You can find more information
    about the web app manifest on MDN at [https://developer.mozilla.org/en-US/docs/Web/Manifest](https://developer.mozilla.org/en-US/docs/Web/Manifest).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据项目的需求自定义您的Web应用清单并传递其他选项。您可以在MDN上找到有关Web应用清单的更多信息[https://developer.mozilla.org/en-US/docs/Web/Manifest](https://developer.mozilla.org/en-US/docs/Web/Manifest)。
- en: Testing on a device
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在设备上进行测试
- en: If we want to test our application on a device without worrying about deployment,
    we could use a tool, such as ngrok, to create a tunnel between our localhost and
    the outside world. This allows us to view our application on any device with a
    public URL, and once we close the connection, the URL and subsequent application
    disappear.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要在设备上测试我们的应用程序而不用担心部署，我们可以使用ngrok等工具在本地主机和外部世界之间创建隧道。这允许我们在任何具有公共URL的设备上查看我们的应用程序，一旦关闭连接，URL和随后的应用程序就会消失。
- en: Download ngrok by navigating to [https://ngrok.com/download](https://ngrok.com/download)
    and following the installation steps for your platform.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导航到[https://ngrok.com/download](https://ngrok.com/download)并按照您的平台的安装步骤来下载ngrok。
- en: 'Ngrok also can be installed via `npm` typing :'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Ngrok也可以通过`npm`安装，输入：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As our Vue application is running on port `8080`, we can start ngrok and tell
    it to serve from that port. Run the following command in your Terminal with ngrok
    installed:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的Vue应用程序正在8080端口上运行，我们可以启动ngrok并告诉它从该端口提供服务。在已安装ngrok的终端中运行以下命令：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We then get the following result in our Terminal:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在终端中得到以下结果：
- en: '![](assets/590ca896-1bf2-4b16-82f3-f1ed6210898d.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/590ca896-1bf2-4b16-82f3-f1ed6210898d.png)'
- en: 'We can then navigate to this URL on any device and see the following results
    on screen:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在任何设备上导航到此URL，并在屏幕上看到以下结果：
- en: '![](assets/01bef090-dc5b-4f04-85e7-29a8ccc3b00d.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/01bef090-dc5b-4f04-85e7-29a8ccc3b00d.png)'
- en: Isn't this much more of a native experience? Now we have a colored address/status
    bar by default. We also get access to much more with the power of `ServiceWorker`
    in production mode. Before we dive into that, let's look at how we can deploy
    our application to a more permanent URL using Firebase.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是更本地化的体验吗？现在我们默认拥有有色的地址/状态栏。在生产模式下，我们还可以通过`ServiceWorker`获得更多功能。在深入了解之前，让我们看看如何使用Firebase将我们的应用程序部署到更永久的URL。
- en: Firebase deployment
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase部署
- en: Firebase is a platform by Google that allows us to take advantage of everything
    from real-time databases, remote configuration, push notifications, and much more.
    Perhaps more important for our use case is the potential for static file deployment,
    and this is something we'll be taking advantage of.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase是谷歌的一个平台，允许我们利用实时数据库、远程配置、推送通知等等。对于我们的用例来说，更重要的是静态文件部署的潜力，这是我们将要利用的东西。
- en: The platform has three different packages available, each offering different
    levels of service, with the first tier being free and then the following two tiers
    requiring payment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 该平台有三种不同的可用套餐，每种套餐提供不同级别的服务，第一层是免费的，接下来的两层需要付费。
- en: Start off by navigating to [https://firebase.google.com](https://firebase.google.com)
    and logging in with a Google account by clicking on SIGN IN, and then, click GO
    TO CONSOLE at the top right.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导航到[https://firebase.google.com](https://firebase.google.com)，并通过点击“登录”来使用谷歌账号登录，然后点击右上角的“转到控制台”。
- en: We can then create a new Firebase project by selecting + Add Project on the
    Firebase dashboard and subsequently selecting a project name and country.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过在Firebase仪表板上选择+添加项目来创建一个新的Firebase项目，然后选择项目名称和国家。
- en: 'We will then navigate to Project Overview, where we can choose to add Firebase
    to our project and a variety of other options. We''re looking for hosting, as
    we''re interested in deploying our static content. From the left-side menu, click
    on Hosting:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将导航到项目概述，我们可以选择将Firebase添加到我们的项目以及各种其他选项。我们正在寻找托管，因为我们有兴趣部署我们的静态内容。从左侧菜单中，点击“托管”：
- en: '![](assets/ab2db5b9-7017-4dfa-8cc8-365832a10d2b.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ab2db5b9-7017-4dfa-8cc8-365832a10d2b.png)'
- en: 'We''ll be on this screen quite a bit, as it allows us to revert deployments
    as well as see other usage metrics. Since we haven''t made our first deployment
    yet, the screen will look similar to this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将经常在这个屏幕上，因为它允许我们回滚部署以及查看其他使用指标。由于我们还没有进行第一次部署，屏幕看起来会类似于这样：
- en: '![](assets/f572484c-22ef-4e0d-93e2-ce4456de2aa4.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f572484c-22ef-4e0d-93e2-ce4456de2aa4.png)'
- en: If we click on GET STARTED, we will receive a message stating that we need to
    download the Firebase tools. This is a CLI that allows us to manage our Firebase
    project from within the Terminal.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击“开始”，我们将收到一条消息，指出我们需要下载Firebase工具。这是一个允许我们在终端内管理Firebase项目的CLI。
- en: 'Install Firebase tools by running the following command in the Terminal:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中运行以下命令来安装Firebase工具：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can then follow the steps outlined in the next step of the hosting wizard,
    but we won''t be using the deployment step just yet. The wizard should look like
    the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以按照托管向导的下一步中概述的步骤进行操作，但我们暂时不会使用部署步骤。向导应该看起来像这样：
- en: '![](assets/43546367-de51-43c4-88a0-adc78faae885.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/43546367-de51-43c4-88a0-adc78faae885.png)'
- en: 'Let''s start off by logging in to the Firebase console by running the following
    in the Terminal:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在终端中运行以下命令来登录Firebase控制台：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Select a Google account and give it appropriate permissions. You should then
    be provided the following screen:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个谷歌账号并给予适当的权限。然后会出现以下屏幕：
- en: '![](assets/d5ec4dcb-64d6-4a21-ba96-27426bedf170.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d5ec4dcb-64d6-4a21-ba96-27426bedf170.png)'
- en: 'We can then initialize a new Firebase project inside of our `vue-pwa` project.
    Run the following command in your Terminal:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在我们的`vue-pwa`项目中初始化一个新的Firebase项目。在终端中运行以下命令：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point, we can use the keyboard to navigate to hosting and select it
    with the spacebar. This should make the circle green and it tells Firebase that
    we'd like to set up hosting within our project.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以使用键盘导航到托管并用空格键选择它。这应该使圆圈变绿，并告诉Firebase我们想要在我们的项目中设置托管。
- en: '![](assets/826a6ff0-0808-420e-b37a-1b39cd4ab76b.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/826a6ff0-0808-420e-b37a-1b39cd4ab76b.png)
- en: 'We then have to match our local project with the one that''s inside of our
    Firebase dashboard. Select the project you created earlier from the list:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须将我们的本地项目与Firebase仪表板中的项目进行匹配。从列表中选择您之前创建的项目：
- en: '![](assets/a172175d-09f8-4b35-b194-088123863f48.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/a172175d-09f8-4b35-b194-088123863f48.png)
- en: 'It should then ask you questions related to the setup—answer them like so:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它应该问您与设置相关的问题-像这样回答：
- en: '![](assets/aa4c1662-0734-419f-bcb4-1d06be3865b8.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/aa4c1662-0734-419f-bcb4-1d06be3865b8.png)
- en: 'We''ve now got the ability to deploy to Firebase at will. We''ll need to build
    our project for production to appropriately generate a `dist` folder with the
    contents of our application. Let''s run the following command in the Terminal:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以随意部署到Firebase。我们需要为生产构建我们的项目，以适当生成包含我们应用程序内容的`dist`文件夹。让我们在终端中运行以下命令：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, to deploy to Firebase, we can run the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要部署到Firebase，我们可以运行以下命令：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After a short while, you should be given a navigable URL that contains our
    application served over HTTPS:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 过了一会儿，您应该会收到一个可导航的URL，其中包含我们通过HTTPS提供的应用程序：
- en: '![](assets/b0cf75f6-3328-4737-bbb0-fc4b2294a661.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/b0cf75f6-3328-4737-bbb0-fc4b2294a661.png)
- en: 'Our Firebase dashboard has also been updated to reflect our deployment:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Firebase仪表板也已更新以反映我们的部署：
- en: '![](assets/1e582605-e4f4-45f8-a9ca-0e9ab0070b81.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/1e582605-e4f4-45f8-a9ca-0e9ab0070b81.png)
- en: 'If we then navigate to the URL, we should get our project as expected:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们然后导航到URL，我们应该按预期获得我们的项目：
- en: '![](assets/3d3cb016-af9e-462c-9559-5759a1554014.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/3d3cb016-af9e-462c-9559-5759a1554014.png)
- en: Also, because we built our application using a production build, we can disconnect
    it from Wi-Fi or check the offline box inside of your Developer Tools. Upon doing
    so, we will find that our application still runs as expected because we have a
    `ServiceWorker` running on all production builds.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，因为我们使用生产构建构建了我们的应用程序，我们可以断开与Wi-Fi的连接或在开发者工具中勾选离线框。这样做后，我们会发现我们的应用程序仍然按预期运行，因为我们在所有生产构建上都运行了`ServiceWorker`。
- en: Continuous Integration (CI)
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成（CI）
- en: There are a variety of CI platforms available, such as Travis, GitLab, Jenkins,
    and countless others. Each platform often serves a common goal, that is, automating
    deployment and the challenges that come along with it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种CI平台可用，例如Travis、GitLab、Jenkins等等。每个平台通常都有一个共同的目标，即自动化部署和随之而来的挑战。
- en: Sure, we could deploy our site, run our tests, and continue with other items
    in our forever increasing build steps. Not only is this a tedious process, but
    it also gives us many opportunities to make mistakes. Furthermore, it also means
    that each step has to be documented for every member of the team, the documentation
    has to be kept up to date and is not exactly scalable across an organization.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以部署我们的站点，运行我们的测试，并继续进行我们不断增加的构建步骤中的其他项目。这不仅是一个繁琐的过程，而且也给了我们许多犯错的机会。此外，这也意味着每个步骤都必须为团队的每个成员进行记录，文档必须保持最新，并且在整个组织中并不是完全可扩展的。
- en: For our examples, we'll be using Travis CI, and the first objective that I'd
    like to tackle is automatically running our unit tests. To do this, we'll need
    one or more unit tests inside of our project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将使用Travis CI，我想要解决的第一个目标是自动运行我们的单元测试。为此，我们需要在项目中有一个或多个单元测试。
- en: Unit tests
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'We covered testing our Vue.js applications in the preceding chapter, so wouldn''t
    it be nice to automatically run our tests each time we push a new build? Let''s
    quickly set up some tests inside of our project and integrate it with Travis:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一章中介绍了如何测试Vue.js应用程序，那么每次推送新版本时自动运行测试不是很好吗？让我们快速在项目中设置一些测试，并将其与Travis集成：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can then add a new script that runs `jest`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以添加一个运行`jest`的新脚本：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, add the `jest` configuration to your `package.json`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`jest`配置添加到您的`package.json`中：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, we can update our `babel` configuration inside of `.babelrc`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在`.babelrc`中更新我们的`babel`配置：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can then make a sample test inside of `components/__test__/Hello.spec.js`
    that simply checks whether `msg` inside of our data matches a string:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`components/__test__/Hello.spec.js`中创建一个简单的测试，只需检查我们数据中的`msg`是否与一个字符串匹配：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As expected, we can then run `npm test` to execute our tests:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，我们可以运行`npm test`来执行我们的测试：
- en: '![](assets/ba19775a-fe4a-45de-9bc8-9b714c48c367.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ba19775a-fe4a-45de-9bc8-9b714c48c367.png)'
- en: Creating a Git repository
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Git存储库
- en: To use continuous integration with Travis CI, we'll need to upload our project
    to GitHub. If you haven't already got Git on your machine, download it from [https://git-scm.com/](https://git-scm.com/)
    and subsequently create a GitHub account at [https://github.com](https://github.com).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Travis CI进行持续集成，我们需要将项目上传到GitHub。如果您的机器上还没有安装Git，请从[https://git-scm.com/](https://git-scm.com/)下载并随后在[https://github.com](https://github.com)创建一个GitHub账户。
- en: Create a new repository for your project at [https://github.com/new](https://github.com/new),
    or by clicking on the New repository button by clicking on the + at the top-right
    corner of the screen.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://github.com/new](https://github.com/new)为您的项目创建一个新的存储库，或者点击屏幕右上角的+号，然后点击新存储库按钮。
- en: 'We can then give our repository a name and make the visibility either Public
    or Private:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以给我们的存储库命名，并将可见性设置为公共或私有：
- en: '![](assets/5c6d0311-8217-432f-b93e-4f8225b04c3e.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5c6d0311-8217-432f-b93e-4f8225b04c3e.png)'
- en: Once we click on the Create repository button, we're greeted with a variety
    of ways in which we can upload our repository to GitHub. The only problem is that
    we haven't made our PWA project a Git repository yet.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击创建存储库按钮，我们将看到多种上传存储库到GitHub的方式。唯一的问题是我们还没有把我们的PWA项目变成Git存储库。
- en: We can do this inside Visual Studio Code or the command line. In Visual Studio
    Code, click on the New repository button. If you've just installed Git, you may
    need to restart your editor for this button to appear. This is how it should appear
    inside of Visual Studio Code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Visual Studio Code或命令行中执行此操作。在Visual Studio Code中，点击新存储库按钮。如果您刚安装了Git，您可能需要重新启动编辑器才能看到此按钮。这是它在Visual
    Studio Code中的样子。
- en: '![](assets/a3d74b11-3111-427a-8a0c-69d85f7e7deb.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a3d74b11-3111-427a-8a0c-69d85f7e7deb.png)'
- en: 'We can then make a new commit with a simple message, such as First commit,
    and subsequently click on the tick:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以用一个简单的消息进行新提交，比如“第一次提交”，然后点击打勾：
- en: '![](assets/e4d55968-1c84-4824-a5af-69653acc9f8e.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e4d55968-1c84-4824-a5af-69653acc9f8e.png)'
- en: 'We can then push these changes up to the repository on GitHub by following
    the steps highlighted inside...or push an existing repository from the command
    line given in the following image:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以按照内部突出显示的步骤将这些更改推送到GitHub上的存储库...或者按照以下图片中给出的命令行推送现有的存储库：
- en: '![](assets/b91594d3-5c01-4183-a84d-06c8fb3ff64c.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b91594d3-5c01-4183-a84d-06c8fb3ff64c.png)'
- en: Any future changes to our repository will be pushed to this remote repository.
    This is important because when we create our Travis account, it'll automatically
    get access to all of our GitHub repositories.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对存储库的任何未来更改都将推送到此远程存储库。这很重要，因为当我们创建Travis帐户时，它将自动访问我们的所有GitHub存储库。
- en: Connecting to Travis CI
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到Travis CI
- en: 'Let''s navigate to [https://travis-ci.org/](https://travis-ci.org/) and click
    on Sign in with GitHub.After giving Travis any necessary permissions, you should
    then be able to see a list of repositories attached to your account. We can tell
    Travis that we''d like it to watch for changes in this repository by flicking
    the switch to green:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到[https://travis-ci.org/](https://travis-ci.org/)，并单击使用GitHub登录。在给予Travis任何必要的权限后，您应该能够看到与您的帐户关联的存储库列表。我们可以告诉Travis，我们希望它监视此存储库中的更改，方法是将开关切换为绿色：
- en: '![](assets/cc84b945-494c-4bd3-96d4-93f1134903a1.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cc84b945-494c-4bd3-96d4-93f1134903a1.png)'
- en: Configuring Travis
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Travis
- en: 'The next thing to do is add an appropriate `.travis.yml` configuration file
    to our project. This will tell Travis what to do each time we push a build to
    GitHub. As such, there are two distinct phases that happen when we build with
    Travis:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的是向我们的项目添加一个适当的`.travis.yml`配置文件。这将告诉Travis每次我们将构建推送到GitHub时要做什么。因此，在我们使用Travis构建时会发生两个不同的阶段：
- en: Travis installs any dependencies inside of our project
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis在我们的项目内安装任何依赖项
- en: Travis runs the build script
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis运行构建脚本
- en: We can hook into various stages of the build process such as `before_install`,
    `install`, `before_script`, `script`, `before_cache`, `after_success`, `after_failure`,
    `before_deploy`, `deploy`, `after_deploy`, and `after_script`. All of these are
    relatively self-explanatory, but if it seems like a lot to take in—don't worry,
    we'll only be hooking into a select few of these stages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以连接到构建过程的各个阶段，例如`before_install`、`install`、`before_script`、`script`、`before_cache`、`after_success`、`after_failure`、`before_deploy`、`deploy`、`after_deploy`和`after_script`。所有这些都相对容易理解，但如果看起来很多，不用担心，我们只会连接其中的一些阶段。
- en: 'Let''s add a file named `.travis.yml` to the root of our project and add options
    one step at a time. We can start off by defining the language of our project and
    as we''re using Node, the subsequent Node environment version also:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在项目的根目录添加一个名为`.travis.yml`的文件，并逐步添加选项。我们可以首先定义项目的语言，由于我们使用的是Node，接下来也是Node环境的版本：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `node_js` version I've selected matches the same as my environment (this
    can be checked with `node -v`), but if you need to target a specific version of
    Node (or more than one version), you can add them here.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择的`node_js`版本与我的环境相匹配（可以使用`node -v`进行检查），但如果您需要针对特定版本的Node（或多个版本），您可以在这里添加它们。
- en: 'Next, let''s add that we''d only like to trigger builds on the `master` branch:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加我们只想在`master`分支上触发构建：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, we will need to tell Travis what script to run from `package.json`. As
    we''d like to run our tests, we''ll be running the test script:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要告诉Travis从`package.json`运行什么脚本。因为我们想运行我们的测试，所以我们将运行测试脚本：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, let''s state that we''d like to receive email notifications for every
    build:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们声明我们希望收到每次构建的电子邮件通知：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This gives us the following file:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们以下文件：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we then push these changes to our repository and sync it with the origin,
    we should be able to watch our Travis console as it runs our tests. It may take
    a few minutes for Travis to start the build as follows, so be patient:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这些更改推送到我们的存储库并与原始存储库同步，我们应该能够观看Travis控制台运行我们的测试。Travis可能需要一些时间来启动构建，所以请耐心等待：
- en: '![](assets/28aff7c1-1f18-4322-b4be-5b0197661987.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/28aff7c1-1f18-4322-b4be-5b0197661987.png)'
- en: 'If we scroll down to the bottom of the log, you can see that our project was
    built for both productions and our tests run:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们向下滚动日志的底部，您可以看到我们的项目已经为生产和测试构建：
- en: '![](assets/3aea6f8a-e2c9-45b5-a82e-009aada9e3e9.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3aea6f8a-e2c9-45b5-a82e-009aada9e3e9.png)'
- en: Awesome! We can now run our tests and hook into various stages of the build
    process with Travis CI. Given that we're building our project for production on
    Travis, we should be able to deploy this build to Firebase automatically.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在可以运行我们的测试，并在Travis CI的构建过程中连接到各个阶段。鉴于我们正在Travis上为生产构建我们的项目，我们应该能够自动将此构建部署到Firebase。
- en: 'Let''s change our `Hello.vue` component to have a new message (and also make
    our test fail):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改我们的`Hello.vue`组件以显示新消息（并使我们的测试失败）：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Automatic deployment to Firebase
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动部署到Firebase
- en: 'We can let Travis handle our deployment automatically, but we''ll need a way
    to give Travis access to our deployment token. We can get this token for CI environments
    by running the following command in the Terminal:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以让Travis自动处理我们的部署，但是我们需要一种方法让Travis访问我们的部署令牌。我们可以通过在终端中运行以下命令来获取CI环境的令牌：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After logging in to your Google account once again, you should be given a token
    inside of the Terminal:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 再次登录您的Google帐户后，您应该在终端内获得一个令牌：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Keep the token for now, as we'll need it in a second.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保留令牌，因为我们一会儿会用到它。
- en: Navigate back to the Travis CI dashboard, and go to the settings for your project.
    Inside of the settings, we'll need to add an environment variable that we can
    then reference inside of our deployment script.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Travis CI仪表板，并转到项目的设置。在设置内，我们需要添加一个环境变量，然后我们可以在部署脚本内引用它。
- en: 'Add the `FIREBASE_TOKEN` environment variable with the value equal to the token
    we got from the Terminal:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`FIREBASE_TOKEN`环境变量，其值等于我们从终端获得的令牌：
- en: '![](assets/d3a7bf3b-42b6-4cff-a3ed-c2ac301a3bde.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d3a7bf3b-42b6-4cff-a3ed-c2ac301a3bde.png)'
- en: 'We can then update our `.travis.yml` file to install the firebase tools in
    our CI environment, and if everything is successful, then deploy them to our Firebase
    hosting environment:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以更新我们的`.travis.yml`文件，在我们的CI环境中安装firebase工具，并且如果一切顺利，然后将它们部署到我们的Firebase托管环境：
- en: '[PRE22]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Make a new commit after changing this file and sync the repositories. This should
    then trigger a new build on Travis, and we can watch for the log.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改此文件并同步存储库后进行新的提交。然后这应该触发Travis上的新构建，我们可以查看日志。
- en: 'Here are the results:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![](assets/ced00187-969a-42df-808a-e10cece1989a.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ced00187-969a-42df-808a-e10cece1989a.png)'
- en: Our deployment failed **because our test(s) failed.** Note how our application
    hosted on Firebase didn't change at all. This is intended and is why we placed
    the deployment step inside `after_success` because if we have failing tests, we
    most likely don't want to be pushing this code to production.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的部署失败**因为我们的测试失败。**请注意，我们托管在Firebase上的应用程序根本没有更改。这是有意的，这就是为什么我们将部署步骤放在`after_success`内的原因，因为如果我们有失败的测试，我们很可能不希望将此代码推送到生产环境。
- en: 'Let''s fix our test(s) and push a new `commit` to the repository:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修复我们的测试，并将新的“commit”推送到存储库：
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As all of our scripts passed with an exit code of 0 (no errors), the `after_success`
    hook was fired, pushing our project to Firebase Hosting:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有脚本的退出代码为0（没有错误），“after_success”钩子被触发，将我们的项目推送到Firebase Hosting：
- en: '![](assets/be614da3-476a-4cbe-a3a4-6aefd5a38048.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/be614da3-476a-4cbe-a3a4-6aefd5a38048.png)'
- en: 'If we check our application at the appropriate URL, we should see an updated
    message:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在适当的URL检查我们的应用程序，我们应该看到一个更新的消息：
- en: '![](assets/5253fa7f-de41-4e35-adca-685c208b7ddc.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5253fa7f-de41-4e35-adca-685c208b7ddc.png)'
- en: Service worker
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务工作者
- en: When building our application for production using the `vue-pwa` template, it
    includes `ServiceWorker`. This is essentially a script that runs in the background
    and allows us to take advantage of offline-first approaches, push notifications,
    background sync, and more.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`vue-pwa`模板为生产构建我们的应用程序时，它包括`ServiceWorker`。这本质上是一个在后台运行的脚本，使我们能够利用首次离线方法、推送通知、后台同步等功能。
- en: 'Our application will now also prompt our user to install the application on
    their home screen, as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在还会提示用户将应用程序安装到他们的主屏幕上，如下所示：
- en: '![](assets/41b5d1ea-53c3-4d1f-87e2-f16dc8b9f890.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/41b5d1ea-53c3-4d1f-87e2-f16dc8b9f890.png)'
- en: If we are disconnected from the internet, we'd also get an offline-first experience,
    as the application still continues to function. This is one of the major benefits
    we get when using the `vue-pwa` template, and if you'd like to read more about
    `ServiceWorker` and see how you can customize this to your needs, Google has a
    great onboarding guide at [https://developers.google.com/web/fundamentals/primers/service-workers/](https://developers.google.com/web/fundamentals/primers/service-workers/).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们与互联网断开连接，我们也会获得首次离线体验，因为应用程序仍然可以继续运行。这是在使用`vue-pwa`模板时获得的主要好处之一，如果您想了解更多关于`ServiceWorker`以及如何根据自己的需求自定义它，Google在[https://developers.google.com/web/fundamentals/primers/service-workers/](https://developers.google.com/web/fundamentals/primers/service-workers/)上有一个很好的入门指南。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we investigated the PWA template from the Vue CLI and subsequently
    looked at how we can automatically deploy and test our application as it continues
    to grow. These principles allow us to continually ensure that we can spend more
    time developing features and less time maintaining deployment documentation and
    following rudimentary tasks each time.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们调查了Vue CLI中的PWA模板，随后看了一下随着应用程序的不断增长，我们如何可以自动部署和测试我们的应用程序。这些原则使我们能够不断确保我们可以花更多的时间开发功能，而不是花时间维护部署文档和每次遵循基本任务。
- en: In the following chapter, we'll cover Nuxt, a framework that allows us to create
    server-side rendered/static applications using Vue. Nuxt also has an interesting
    folder-based routing structure, which gives us a lot of power when creating Vue
    applications.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍Nuxt，这是一个允许我们使用Vue创建服务器端渲染/静态应用程序的框架。Nuxt还具有一个有趣的基于文件夹的路由结构，这在创建Vue应用程序时给了我们很大的力量。
