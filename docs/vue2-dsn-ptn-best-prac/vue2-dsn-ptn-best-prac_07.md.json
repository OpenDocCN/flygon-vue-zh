["```js\n# Create a new Vue project\n$ vue init webpack-simple vue-http\n\n# Navigate to directory\n$ cd vue-http\n```", "```js\n# Install dependencies\n$ npm install\n\n# Run application\n$ npm run dev\n```", "```js\n# Install Axios to our project\n$ npm install axios --save\n```", "```js\n# Install the json-server module globally\n$ npm install json-server -g\n```", "```js\n{\n  \"courses\": [\n    {\n      \"id\": 1,\n      \"name\": \"Vue.js Design Patterns\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Angular: From Beginner to Advanced\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Cross Platform Native Applications with Fuse\"\n    }\n  ]\n}\n```", "```js\n# Run the database based on our db.json file\n$ json-server db.json --watch\n```", "```js\n<script>\nimport axios from 'axios'\nexport default {\n  data() {\n    return {\n      ROOT_URL: 'http://localhost:3000/courses',\n      courses: []\n    }\n  }\n}\n</script>\n```", "```js\nexport default {\n  data() {\n    return {\n      ROOT_URL: 'http://localhost:3000/courses',\n      courses: []\n    }\n  },\n  created() {\n    this.getCourseList();\n  },\n  methods: {\n    getCourseList() {\n      axios\n        .get(this.ROOT_URL)\n        .then(response => {\n          this.courses = response.data;\n        })\n        .catch(error => console.log(error));\n    }\n  }\n}\n```", "```js\n<template>\n  <div class=\"course-list\">\n    <h1>Courses</h1>\n    <div v-for=\"course in courses\" v-bind:key=\"course.id\">\n      <p>\n        {{course.name}}\n      </p> \n    </div>\n  </div>\n</template>\n```", "```js\n<style>\n.course-list {\n  background-color: rebeccapurple;\n  padding: 10px;\n  width: 50%;\n  text-align: center;\n  margin: 0 auto;\n  color: white;\n}\n</style>\n```", "```js\n<div>\n <input type=\"text\" v-model=\"courseName\" placeholder=\"Course name\"> \n <button @click=\"addCourse(courseName)\">Add</button>\n</div>\n```", "```js\ndata() {\n return {\n  ROOT_URL: 'http://localhost:3000/courses/',\n  courses: [],\n  courseName: '',\n };\n},\n```", "```js\nmethods: {\n// Omitted\n addCourse(name) {\n  axios\n   .post(this.ROOT_URL, { name })\n   .then(response => {\n     this.courses.push(response.data);\n     this.courseName = ''; \n   })\n   .catch(error => console.log(error));\n }\n}\n```", "```js\ndata() {\n return {\n  ROOT_URL: 'http://localhost:3000/courses/',\n  courses: [],\n  courseName: '',\n  editing: false,\n };\n},\n```", "```js\n<template>\n <div class=\"course-list\">\n  <h1>Courses</h1>\n  <div v-for=\"course in courses\" v-bind:key=\"course.id\">\n   <p @click=\"setEdit(course)\" v-if=\"!editing\">\n   {{course.name}}\n   </p>\n  <div v-else>\n   <input type=\"text\" v-model=\"course.name\">\n   <button @click=\"saveCourse(course)\">Save</button>\n  </div> \n  </div>\n  <div v-if=\"!editing\">\n  <input type=\"text\" v-model=\"courseName\" placeholder=\"Course name\"> \n  <button @click=\"addCourse(courseName)\">Add</button>\n  </div>\n </div>\n</template>\n```", "```js\nsetEdit(course) {\n this.editing = !this.editing;\n},\nsaveCourse(course) {\n this.setEdit();\n axios\n .put(`${this.ROOT_URL}/${course.id}`, { ...course })\n .then(response => {\n console.log(response.data);\n })\n .catch(error => console.log(error));\n}\n```", "```js\n<div v-else>\n  <input type=\"text\" v-model=\"course.name\">\n  <button @click=\"saveCourse(course)\">Save</button>\n  <button @click=\"removeCourse(course)\">Remove</button>\n</div> \n```", "```js\nremoveCourse(course) {\n  axios\n    .delete(`${this.ROOT_URL}/${course.id}`)\n    .then(response => {\n      this.setEdit();\n      this.courses = this.courses.filter(c => c.id != course.id);\n    })\n    .catch(error => console.error(error));\n},\n```", "```js\n# Create a new Vue project\n$ vue init webpack-simple vue-chat\n\n# Navigate to directory\n$ cd vue-chat\n\n# Install dependencies\n$ npm install\n\n# Run application\n$ npm run dev\n```", "```js\n# Create a new folder named server\n$ mkdir server\n\n# Navigate to directory\n$ cd server\n\n# Make a server.js file\n$ touch server.js\n\n# Initialise a new package.json\n$ npm init -y\n\n# Install dependencies\n$ npm install socket.io express --save\n```", "```js\nconst app = require('express')();\nconst http = require('http').Server(app);\nconst io = require('socket.io')(http);\nconst PORT = 3000;\n\nhttp.listen(PORT, () => console.log(`Listening on port: ${PORT}`));\n\nio.on('connection', socket => {\n  console.log('A user connected.');\n});\n```", "```js\n# Install socket.io-client and vue-socket.io\n$ npm install socket.io-client vue-socket.io --save\n```", "```js\nimport Vue from 'vue';\nimport App from './App.vue';\nimport SocketIo from 'socket.io-client';\nimport VueSocketIo from 'vue-socket.io';\n\nexport const Socket = SocketIo(`http://localhost:3000`);\n\nVue.use(VueSocketIo, Socket);\n\nnew Vue({\n  el: '#app',\n  render: h => h(App),\n});\n```", "```js\n<template>\n  <div>\n    <h1 v-if=\"isConnected\">Connected to the server.</h1>\n    <h1 v-else>Disconnected from the server.</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isConnected: false,\n    };\n  },\n  sockets: {\n    connect() {\n      this.isConnected = true;\n    },\n    disconnect() {\n      this.isConnected = false;\n    },\n  },\n};\n</script>\n```", "```js\n<template>\n  <div>\n    <span v-if=\"isConnected === true\" class=\"bar connected\">\n      Connected to the server.\n    </span>\n    <span v-else class=\"bar disconnected\">\n      Disconnected from the server.\n    </span>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['isConnected'],\n};\n</script>\n\n<style>\n.bar {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  text-align: center;\n  padding: 5px;\n}\n\n.connected {\n  background: greenyellow;\n  color: black;\n}\n\n.disconnected {\n  background: red;\n  color: white;\n}\n</style>\n```", "```js\nimport App from './App.vue';\nimport ConnectionStatus from './components/ConnectionStatus.vue';\n\nVue.component('connection-status', ConnectionStatus);\n```", "```js\n<template>\n  <div>\n    <connection-status :isConnected=\"isConnected\" />\n  </div>\n</template>\n```", "```js\n<template>\n  <div v-once>\n    <nav class=\"navbar\">\n      <span>Socket Chat</span>\n    </nav>\n  </div>\n</template>\n\n<script>\nexport default {};\n</script>\n\n<style>\n.navbar {\n  background-color: blueviolet;\n  padding: 10px;\n  margin: 0px;\n  text-align: center;\n  color: white;\n}\n</style>\n```", "```js\nbody {\n margin: 0px;\n padding: 0px;\n}\n```", "```js\n<head>\n <meta charset=\"utf-8\">\n <title>vue-chat</title>\n <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n```", "```js\nimport Navbar from './components/Navbar.vue'\n\nVue.component('navigation-bar', Navbar);\n```", "```js\n<template>\n  <div>\n    <navigation-bar />\n    <connection-status :isConnected=\"isConnected\" />\n  </div>\n</template>\n```", "```js\n<template>\n <div>\n  <span v-for=\"message in messages\" :key=\"message.id\">\n  <strong>{{message.username}}: </strong> {{message.message}}\n  </span>\n </div>\n</template>\n\n<script>\nexport default {\n props: ['messages'],\n};\n</script>\n\n<style scoped>\ndiv {\n overflow: scroll;\n height: 150px;\n margin: 10px auto 10px auto;\n padding: 5px;\n border: 1px solid gray;\n}\nspan {\n display: block;\n padding: 2px;\n}\n</style>\n```", "```js\nimport MessageList from './components/MessageList.vue';\n\nexport default {\n data() {\n  return {\n   isConnected: false,\n   messages: [\n    {\n     id: 1,\n     username: 'Paul',\n     message: 'Hey!',\n    },\n    {\n     id: 2,\n     username: 'Evan',\n     message: 'How are you?',\n    },\n   ],\n  };\n },\n components: {\n MessageList,\n},\n```", "```js\n <div class=\"container\">\n  <message-list :messages=\"messages\" />\n </div>\n```", "```js\n<style>\n.container {\n width: 300px;\n margin: 0 auto;\n}\n</style>\n```", "```js\n<template>\n  <form @submit.prevent=\"sendMessage\">\n    <div>\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" name=\"username\" v-model=\"username\">\n    </div>\n    <div>\n      <label for=\"message\">Message:</label>\n      <textarea name=\"message\" v-model=\"message\"></textarea>\n    </div>\n    <button type=\"submit\">Send</button>\n  </form>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      username: '',\n      message: '',\n    };\n  },\n};\n</script>\n\n<style>\ninput,\ntextarea {\n  margin: 5px;\n  width: 100%;\n}\n</style>\n\n```", "```js\nimport MessageList from './components/MessageList.vue';\n\nexport default {\n // Omitted\n components: {\n   MessageList,\n   MessageForm,\n },\n}\n```", "```js\n<template>\n  <div>\n    <navigation-bar />\n    <div class=\"container\">\n      <message-list :messages=\"messages\" />\n      <message-form />\n    </div>\n    <connection-status :isConnected=\"isConnected\" />\n  </div>\n</template>\n```", "```js\nio.on('connection', socket => {\n  console.log('A user connected.');\n\n  socket.on('chatMessage', message => {\n    console.log(message);\n  })\n});\n```", "```js\n# Install nodemon globally\n$ npm install nodemon -g\n```", "```js\n# Listen for any changes to our server.js file and restart the server\n$ nodemon server.js\n```", "```js\nmethods: {\n sendMessage() {\n   this.socket.emit('chatMessage', {\n     username: this.username,\n     message: this.message,\n   });\n },\n},\n```", "```js\nexport default {\n// Omitted\n sockets: {\n  connect() {\n   this.isConnected = true;\n  },\n  disconnect() {\n   this.isConnected = false;\n  },\n  chatMessage(messages) {\n   this.messages = messages;\n  },\n },\n}\n```", "```js\nconst app = require('express')();\nconst http = require('http').Server(app);\nconst io = require('socket.io')(http);\nconst PORT = 3000;\n\nhttp.listen(PORT, () => console.log(`Listening on port: ${PORT}`));\n\nconst messages = [];\n\nconst emitMessages = () => io.emit('chatMessage', messages);\n\nio.on('connection', socket => {\n  console.log('A user connected.');\n\n  emitMessages(messages);\n\n  socket.on('chatMessage', message => {\n    messages.push(message);\n\n    emitMessages(messages);\n  });\n});\n```"]