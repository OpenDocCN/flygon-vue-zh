["```js\n/**\n * Outputting the value of this to the console in the global context returns the Window object\n */\nconsole.log(this);\n\n/**\n * When referencing global Window objects, we don't need to refer to them with this, but if we do, we get the same behavior\n */\nalert('Alert one');\nthis.alert('Alert two');\n```", "```js\n/**\n * The context of this changes when we enter another lexical scope, take our Student object example:\n */\nconst Student = {\n firstName: 'Paul',\n lastName: 'Halliday',\n grades: [50, 95, 70, 65, 35],\n getFullName() {\n  return `${this.firstName} ${this.lastName}` \n },\n getGrades() {\n  return this.grades.reduce((accumulator, grade) => accumulator + grade);\n },\n toString() {\n  return `Student ${this.getFullName()} scored ${this.getGrades()}/500`;\n }\n}\n```", "```js\nlet res = document.createTextNode(Student.toString());\nlet heading = document.createElement('h1');\nheading.appendChild(res);\ndocument.body.appendChild(heading);\n```", "```js\n<template>\n <button @click=\"showAlert\">\n Show Alert</button>\n</template>\n\n<script>\nexport default {\n data() {\n  return {\n   message: 'Hello World!',\n  };\n },\n methods: {\n  showAlert() {\n   alert(this.message);\n  },\n },\n};\n</script>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n <title>Vue Data</title>\n <script src=\"https://unpkg.com/vue\"></script>\n</head>\n<body>\n <div id=\"app\">\n  <h1>Name: {{ firstName }}</h1>\n  <input type=\"text\" v-model=\"firstName\">\n </div>\n\n <script>\n const app = new Vue({\n  el: '#app',\n  data: {\n   firstName: 'Paul'\n  }\n });\n </script>\n</body>\n</html>\n```", "```js\n<body>\n <div id=\"app\">\n  <h1>Name: {{ firstName }}</h1>\n  <h1>Name: {{ name }}</h1>\n  <input type=\"text\" v-model=\"firstName\">\n </div>\n\n <script>\n const app = new Vue({\n  el: '#app',\n  data: {\n   firstName: 'Paul'\n  }\n });\n app.fullName = 'Paul Halliday';\n </script>\n</body>\n```", "```js\n const user = {};\n let fullName = 'Paul Halliday';\n\n Object.defineProperty(user, 'fullName', {\n  configurable: true,\n  enumerable: true,\n  get() {\n   return fullName;\n  },\n  set(v) {\n   fullName = v;\n  }\n });\n\n console.log(user.fullName); // > Paul Halliday\n user.fullName = \"John Doe\";\n console.log(user.fullName); // > John Doe\n```", "```js\n# Create a new Vue.js project\n$ vue init webpack-simple computed \n\n# Change directory\n$ cd computed\n\n# Install dependencies\n$ npm install\n\n# Run application\n$ npm run dev\n```", "```js\n<h1>{{  firstName.split('').reverse().join('') }}</h1>\n```", "```js\n<template>\n <h1>Name: {{ reversedName }}</h1>\n</template>\n\n<script>\nexport default {\n data() {\n  return {\n   firstName: 'Paul'\n  }\n },\n computed: {\n  reversedName() {\n   return this.firstName.split('').reverse().join('')\n  }\n }\n}\n</script>\n```", "```js\n<template>\n <div>\n  <input type=\"number\" v-model=\"id\" />\n  <p>Name: {{user.name}}</p>\n  <p>Email: {{user.email}}</p>\n  <p>Id: {{user.id}}</p>\n </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n data() {\n  return {\n   id: '',\n   user: {}\n  }\n },\n methods: {\n  getDataForUser() { \n   axios.get(`https://jsonplaceholder.typicode.com/users/${this.id}`)\n .then(res => this.user = res.data);\n  }\n },\n watch: {\n  id() {\n   this.getDataForUser();\n  }\n }\n}\n</script>\n```", "```js\n// App.vue\n<template>\n</template>\n\n<script>\nexport default {\n data () {\n   return {\n    msg: 'Welcome to Your Vue.js App'\n   }\n },\n beforeCreate() {\n  console.log('beforeCreate'); \n },\n created() {\n  console.log('created');\n }\n}\n</script>\n```", "```js\nbeforeMount() {\n console.log('beforeMount');\n},\nmounted() {\n console.log('mounted');\n}\n```", "```js\n<template>\n <div>\n  <h1>{{msg}}</h1>\n  <button @click=\"msg = 'Updated Hook'\">Update Message</button>\n </div>\n</template>\n\n<script>\nexport default {\n data () {\n   return {\n    msg: 'Welcome to Your Vue.js App'\n   }\n },\n beforeCreate() {\n  console.log('beforeCreate'); \n },\n created() {\n  console.log('created');\n },\n beforeMount() {\n  console.log('beforeMount');\n },\n mounted() {\n  console.log('mounted');\n },\n beforeUpdated() {\n  console.log('beforeUpdated'); \n },\n updated() {\n  console.log('updated');\n }\n}\n</script>\n```", "```js\n<template>\n  <div>\n    <h1>{{msg}}</h1>\n    <button @click=\"msg = 'Updated Hook'\">Update Message\n    </button>\n    <button @click=\"remove\">Destroy instance</button>\n  </div>\n</template>\n```", "```js\nmethods: {\n  remove(){\n   this.$destroy();\n  }\n},\n// Other hooks\n  beforeDestroy(){\n  console.log(\"Before destroy\");\n},\n  destroyed(){\n  console.log(\"Destroyed\");\n}\n```", "```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <title>DOM Example</title>\n</head>\n<body>\n <div>\n  <p>I love JavaScript!</p>\n  <p>Here's a list of my favourite frameworks:</p>\n  <ul>\n   <li>Vue.js</li>\n   <li>Angular</li>\n   <li>React</li>\n  </ul>\n </div>\n\n <script src=\"app.js\"></script>\n</body>\n</html>\n```", "```js\nconst paragraphs = Array.from(document.getElementsByTagName('p'));\nconst listItems = Array.from(document.getElementsByTagName('li'));\n\nparagraphs.map(p => console.log(p.innerHTML));\nlistItems.map(li => console.log(li.innerHTML));\n```"]