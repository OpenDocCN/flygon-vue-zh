["```js\nconst state = {\n count: 0 // number\n}\n```", "```js\n# Create a new Vue project\n$ vue init webpack-simple vuex-counter\n\n# Navigate to directory\n$ cd vuex-counter\n\n# Install dependencies\n$ npm install\n\n# Install Vuex\n$ npm install vuex\n\n# Run application\n$ npm run dev\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n```", "```js\nexport default new Vuex.Store({\n  state: {\n    count: 0,\n  },\n}); \n```", "```js\nexport const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\nexport const RESET = 'RESET';\n```", "```js\nimport * as types from './mutation-types';\n\nexport default {\n  [types.INCREMENT]({ commit }) {\n    commit(types.INCREMENT);\n  },\n  [types.DECREMENT]({ commit }) {\n    commit(types.DECREMENT);\n  },\n  [types.RESET]({ commit }) {\n    commit(types.RESET);\n  },\n};\n```", "```js\nexport default {\n [types.INCREMENT](store) {\n  store.commit(types.INCREMENT);\n }\n}\n```", "```js\nimport * as types from './mutation-types';\n\nexport default {\n  [types.INCREMENT](state) {\n    state.count++;\n  },\n  [types.DECREMENT](state) {\n    state.count--;\n  },\n  [types.RESET](state) {\n    state.count = 0;\n  },\n};\n```", "```js\nexport default {\n  count(state) {\n    return state.count;\n  },\n};\n```", "```js\nexport default {\n  count(state) {\n    return state.count > 3 ? 'Above three!' : state.count;\n  },\n};\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n\nimport actions from './actions';\nimport getters from './getters';\nimport mutations from './mutations';\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    count: 0,\n  },\n  actions,\n  getters,\n  mutations,\n});\n```", "```js\n<template>\n  <div>\n    <h1>{{count}}</h1>\n    <button @click=\"increment\">+</button>\n    <button @click=\"decrement\">-</button>\n    <button @click=\"reset\">R</button>\n  </div>\n</template>\n```", "```js\nimport * as types from './store/mutation-types';\n\nexport default {\n  methods: {\n    increment() {\n      this.$store.dispatch(types.INCREMENT);\n    },\n    decrement() {\n      this.$store.dispatch(types.DECREMENT);\n    },\n    reset() {\n      this.$store.dispatch(types.RESET);\n    },\n  },\n}\n```", "```js\nexport default {\n  // Omitted\n  computed: {\n    count() {\n      return this.$store.getters.count;\n    },\n  },\n}\n```", "```js\n<template>\n  <div>\n    <h1>{{count}}</h1>\n\n    <input type=\"text\" v-model=\"amount\">\n\n    <button @click=\"increment\">+</button>\n    <button @click=\"decrement\">-</button>\n    <button @click=\"reset\">R</button>\n  </div>\n</template>\n```", "```js\nexport default {\n  data() {\n    return {\n      amount: 0,\n    };\n  },\n  methods: {\n    increment() {\n      this.$store.dispatch(types.INCREMENT, this.getAmount);\n    },\n    decrement() {\n      this.$store.dispatch(types.DECREMENT, this.getAmount);\n    },\n    reset() {\n      this.$store.dispatch(types.RESET);\n    },\n  },\n  computed: {\n    count() {\n      return this.$store.getters.count;\n    },\n    getAmount() {\n      return Number(this.amount) || 1;\n    },\n  },\n};\n```", "```js\nimport * as types from './mutation-types';\n\nexport default {\n  [types.INCREMENT]({ commit }, amount) {\n    commit(types.INCREMENT, amount);\n  },\n  [types.DECREMENT]({ commit }, amount) {\n    commit(types.DECREMENT, amount);\n  },\n  [types.RESET]({ commit }) {\n    commit(types.RESET);\n  },\n};\n```", "```js\nexport default {\n  [types.INCREMENT](state, amount) {\n    state.count += amount;\n  },\n  [types.DECREMENT](state, amount) {\n    state.count -= amount;\n  },\n  [types.RESET](state) {\n    state.count = 0;\n  },\n};\n```", "```js\nimport actions from './actions';\nimport getters from './getters';\nimport mutations from './mutations';\n\nexport const countStore = {\n  state: {\n    count: 0,\n  },\n  actions,\n  getters,\n  mutations,\n};\n\nexport * from './mutation-types';\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport { countStore } from './modules/count';\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  modules: {\n    countStore,\n  },\n});\n```", "```js\nimport * as fromCount from './store/modules/count';\n\nexport default {\n  data() {\n    return {\n      amount: 0,\n    };\n  },\n  methods: {\n    increment() {\n      this.$store.dispatch(fromCount.INCREMENT, this.getAmount);\n    },\n    decrement() {\n      this.$store.dispatch(fromCount.DECREMENT, this.getAmount);\n    },\n    reset() {\n      this.$store.dispatch(fromCount.RESET);\n    },\n  },\n  computed: {\n    count() {\n      return this.$store.getters.count;\n    },\n    getAmount() {\n      return Number(this.amount) || 1;\n    },\n  },\n};\n```"]