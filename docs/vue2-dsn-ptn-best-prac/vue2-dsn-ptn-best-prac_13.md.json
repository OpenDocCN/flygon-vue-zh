["```js\nexport default {\n  props: ['todo'],\n  methods: {\n    completeTodo(todo) {\n      this.$parent.$options.methods.completeTodo(todo);\n    }\n  }\n}\n```", "```js\nmethods: {\n  completeTodo(todo) {\n    this.$emit('completeTodo', todo)\n  }\n}\n```", "```js\nmethods: {\n  completeTodo(todo) {\n    this.todo = [{id: 1, name: 'Do the dishes.'}];\n    this.$emit('completeTodo', todo)\n  }\n}\n```", "```js\nexport default {\n  props: {\n    age: {\n      type: Number,\n    }\n  },\n  data() {\n    return {\n      personAge: this.age\n    }\n  },\n}\n```", "```js\nexport default {\n  props: {\n    filter: {\n      type: String,\n    }\n  },\n  computed: {\n    trimFilter() {\n      return this.filter.trim().toLowerCase()\n    }\n  }\n}\n```", "```js\n<template>\n  <div>\n    <h1>Parent Component</h1>\n    <ul>\n      <li v-for=\"friend in friendList\" :key=\"friend.id\">{{friend.name}}</li>\n    </ul>\n\n    <Person :friendList=\"friendList\" />\n  </div>\n</template>\n\n<script>\nimport Person from './components/Person';\n\nexport default {\n  data() {\n    return {\n      friendList: [{ id: 1, name: 'John Doe' }]\n    }\n  },\n  components: {\n    Person\n  }\n}\n</script>\n```", "```js\n<template>\n  <div>\n    <h1>Child Component</h1>\n    <ul>\n      <li v-for=\"friend in friendList\" :key=\"friend.id\">{{friend.name}}</li>\n    </ul>\n    <button @click=\"addFriend\">Add Friend</button>\n  </div> \n</template>\n\n<script>\nexport default {\n  props: {\n    friendList: {\n      type: Array,\n    }\n  },\n  methods: {\n    addFriend() {\n      this.friendList.push({ id: 2, name: 'Sarah Doe' })\n    }\n  }\n}\n</script>\n```", "```js\nexport default {\n  props: {\n    friendList: {\n      type: Array,\n    }\n  },\n  data() {\n    return {\n      fList: [...this.friendList]\n    }\n  },\n  methods: {\n    addFriend() {\n      this.fList.push({ id: 2, name: 'Sarah Doe' })\n    }\n  }\n}\n```", "```js\ndata: {\n recipeList: [],\n selectedCategory: 'Desserts'\n}\n```", "```js\ndata () {\n return {\n  recipeList: [],\n  selectedCategory: 'Desserts'\n }\n}\n```", "```js\n// This would not be an appropriate name as it conflicts with HTML elements.\nVue.component('form', Form)\n\n// This is a better name as it's multi-word and there are less chances to conflict.\nVue.component('signup-form', Form)\n```", "```js\n// Bad \n<nuxt-link :to=\"`/categories/${this.category.id}`\" class=\"card-footer-item\">View</nuxt-link>\n\n// Good\n<nuxt-link :to=\"categoryLink\" class=\"card-footer-item\">View</nuxt-link>\n\nexport default {\n  props: ['category'],\n  computed: {\n    categoryLink () {\n      return `/categories/${this.category.id}`\n    }\n  }\n}\n```", "```js\n<template>\n  <dog-presentational :dogName=\"dogName\" @woof=\"woof\"></dog-presentational>\n</template>\n\n<script>\nimport DogPresentational from './DogPresentational'\n\nexport default {\n  data() {\n    return {\n      dogName: 'Coco',\n    }\n  },\n  components: {\n    'dog-presentational': DogPresentational\n  },\n  methods: {\n    woof() {\n      alert('Woof!');\n    }\n  },\n}\n</script>\n```", "```js\n<template>\n  <div>\n    <h1>Name: {{dogName}}</h1>\n    <button @click=\"woof\">Woof</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['dogName'],\n  methods: {\n    woof() {\n      this.$emit('woof')\n    }\n  }\n}\n</script>\n```", "```js\nexport default {\n  props: {\n    firstName: {\n      type: String\n    },\n    lastName: {\n      type: String\n    },\n    age: {\n      type: Number\n    },\n    friendList: {\n      type: Array\n    }\n  },\n}\n```", "```js\n  props: {\n    firstName: {\n      type: String,\n      required: true,\n      default: 'John'\n    },\n    lastName: {\n      type: String,\n      required: true,\n      default: 'Doe'\n    }\n  }\n```", "```js\nprops: {\n  firstName: {\n    type: String,\n    default: 'John'\n  },\n  lastName: {\n    type: String,\n    default: 'Doe'\n  },\n  friendList: {\n    type: Array,\n    default: () => [{ id: 1, name: 'Paul Halliday'}]\n  }\n}\n```", "```js\n  props: {\n    age: {\n      type: Number,\n      required: true,\n      validator: value => {\n        return value >= 18\n      }\n    },\n  }\n```", "```js\nexport default {\n  data() {\n    return {\n      name: 'Vue.js'\n    }\n  }\n}\n```", "```js\nexport default {\n  data() {\n    return {\n      items: [\n        { id: 1, name: 'Bananas'},\n        { id: 2, name: 'Pizza', quantity: 2},\n        { id: 3, name: 'Cheesecake', quantity: 5}\n      ] \n    }\n  },\n}\n```", "```js\n<template>\n  <div>\n    <ul>\n      <li v-for=\"(item, index) in items\" :key=\"item.id\" @click=\"addQuantity(index)\">\n        {{item.name}} {{item.quantity}}\n      </li>\n    </ul>\n  </div> \n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      items: [\n        { id: 1, name: 'Bananas'},\n        { id: 2, name: 'Pizza', quantity: 2},\n        { id: 3, name: 'Cheesecake', quantity: 5}\n      ] \n    }\n  },\n  methods: {\n    addQuantity(selected) {\n      this.items[selected].quantity = 1;\n      console.log(this.items);\n    }\n  }\n}\n```", "```js\nmethods: {\n  addQuantity(selected) {\n    const selectedItem = this.items[selected];\n    this.$set(selectedItem, 'quantity', 2)\n    console.log(this.items);\n  }\n}\n```"]