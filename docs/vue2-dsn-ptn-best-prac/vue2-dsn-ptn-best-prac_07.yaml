- en: HTTP and WebSocket Communication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP和WebSocket通信
- en: In this chapter, we'll be looking at how we can interface with our server-side
    APIs using `HTTP`. We will create an application using our own offline API with
    `HTTP GET`, `POST`, `PUT` , `PATCH`, and `DELETE`. As well as this, we'll be creating
    an in-memory, real-time chat application that takes advantage of WebSockets with
    the `Socket.io` library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何使用`HTTP`与服务器端API进行接口交互。我们将使用`HTTP GET`，`POST`，`PUT`，`PATCH`和`DELETE`创建一个应用程序，以及创建一个利用`Socket.io`库的内存实时聊天应用程序，利用WebSockets。
- en: 'By the end of this chapter, you will know how to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将知道如何：
- en: Create a mock database APIs with `json-server`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`json-server`创建模拟数据库API
- en: Create HTTP requests with `Axios`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Axios`创建HTTP请求
- en: Use WebSockets and `Socket.io` for real-time communication across clients
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WebSockets和`Socket.io`进行客户端之间的实时通信
- en: HTTP
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP
- en: 'Let''s start off by creating a new Vue.js project that we can use as a playground
    project. Type the following in your Terminal:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个新的Vue.js项目，作为我们的游乐场项目。在终端中输入以下内容：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are many ways to create HTTP requests within JavaScript. We''ll be using
    the `Axios` library to use a simplified promise-based approach within our project.
    Let''s install it by typing the following in our Terminal:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中有许多创建HTTP请求的方法。我们将使用`Axios`库在项目中使用简化的基于promise的方法。让我们通过在终端中输入以下内容来安装它：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We now have the ability to create HTTP requests; we just need an API to point
    `Axios` towards. Let's create a mock API.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了创建HTTP请求的能力；我们只需要一个API来指向`Axios`。让我们创建一个模拟API。
- en: Installing JSON server
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装JSON服务器
- en: In order to create a mock API, we can use the `json-server` library. This allows
    us to get up-and-running globally quickly by just creating a `db.json` file inside
    of our project. It effectively creates a GET, POST, PUT, PATCH, and DELETE API
    and stores the data in a file, appended to our original JSON file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个模拟API，我们可以使用`json-server`库。这允许我们通过在项目内创建一个`db.json`文件来快速全局启动。它有效地创建了一个GET，POST，PUT，PATCH和DELETE
    API，并将数据存储在一个文件中，附加到我们的原始JSON文件中。
- en: 'We can install it by running the following in our Terminal:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在终端中运行以下命令来安装它：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we've added the `-g` flag, we'll be able to access the `json-server` module
    globally throughout our Terminal.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们添加了`-g`标志，我们将能够在整个终端中全局访问`json-server`模块。
- en: 'The next thing we need to do is create our `db.json` file inside the root of
    our project. Be as creative as you want with your dataset; we just simply have
    a list of courses that we may or may not be interested in:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在项目的根目录下创建我们的`db.json`文件。您可以根据需要对数据集进行创意处理；我们只是简单地有一份我们可能感兴趣的课程列表：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can then run our database by running the following in the Terminal:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以通过在终端中运行以下命令来运行我们的数据库：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we''ve done everything successfully, we should then be able to access our
    database at `http://localhost:3000`, as seen by the following success message:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们一切顺利，我们应该能够通过`http://localhost:3000`访问我们的数据库，如下成功消息所示：
- en: '![](assets/77705cdb-4486-431d-b8f9-e929efaa77a4.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/77705cdb-4486-431d-b8f9-e929efaa77a4.png)'
- en: Awesome. We're all set up and now we can get a list of courses.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。我们已经准备好了，现在我们可以获取课程列表。
- en: HTTP GET
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP GET
- en: 'The first thing we need to do is import `Axios` into our `App.vue` component.
    We can also set a `ROOT_URL` in this instance as we''ll only be looking for the
    `/courses` endpoint:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是将`Axios`导入到我们的`App.vue`组件中。在这种情况下，我们还可以设置一个`ROOT_URL`，因为我们只会寻找`/courses`端点：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This then gives us the ability to hook into a lifecycle hook such as `created()`
    and call a method that requests the courses from our API:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就能够钩入`created()`这样的生命周期钩子，并调用一个从我们的API请求课程的方法：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What's happening here? We're calling the `getCoursesList` function, which makes
    an HTTP `GET` request to our `http://localhost:3000/courses` endpoint. This then
    either sets the courses array equal to the data (that is, everything inside of
    our `db.json`) or merely logs out an error if there was one.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？我们调用了`getCoursesList`函数，该函数向我们的`http://localhost:3000/courses`端点发出了HTTP`GET`请求。然后，它要么将课程数组设置为数据（也就是说，我们的`db.json`中的所有内容），要么仅仅在出现错误时记录错误。
- en: 'We can then display this on screen using the `v-` for directive:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`v-`指令在屏幕上显示这个：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Together with a little bit of styling, we get:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 再加上一点样式，我们得到：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](assets/e65701a2-f9fa-424f-a77e-fb392acbbf3b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e65701a2-f9fa-424f-a77e-fb392acbbf3b.png)'
- en: Let's move on to HTTP POST!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行HTTP POST！
- en: HTTP POST
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP POST
- en: 'We can add an input box and `button` following the `courseName` `div`, allowing
    the user to input a new course to their learning list:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`courseName` `div`后面添加一个输入框和`button`，允许用户向他们的学习列表中输入一个新的课程：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This requires us to add the `courseName` variable to our `data` object:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这要求我们将`courseName`变量添加到我们的`data`对象中：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can then create a similar method named `addCourse` that takes the `courseName`
    as a parameter:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以创建一个名为`addCourse`的类似方法，该方法以`courseName`作为参数：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You may notice that it's quite similar to the previous HTTP call, but this time
    instead of `.get` we're using `.post`, and passing an object with the key and
    value of `name`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到它与之前的HTTP调用非常相似，但这次我们使用的是`.post`而不是`.get`，并传递了一个具有`name`键和值的对象。
- en: After sending the POST request, we then use `this.courses.push(response.data)`
    to update the client side array as, whilst the server side (our client `db.json`
    file) is updated, the client state is not.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 发送POST请求后，我们使用`this.courses.push(response.data)`来更新客户端数组，因为虽然服务器端（我们的客户端`db.json`文件）已更新，但客户端状态没有更新。
- en: '![](assets/5843056b-60f4-42d8-b48e-9106ab582223.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5843056b-60f4-42d8-b48e-9106ab582223.png)'
- en: HTTP PUT
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP PUT
- en: The next thing we'd like to be able to do is change items in our list. Perhaps
    we've made a mistake when submitting the item and we therefore want to edit it.
    Let's add that functionality.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要做的是能够更改列表中的项目。也许在提交项目时我们犯了一个错误，因此我们想要编辑它。让我们添加这个功能。
- en: 'Firstly, let''s tell Vue to keep track of whenever we''re editing a course.
    A user''s intention to edit will be whenever they click a course name; we can
    then add the editing Boolean to our `data` object:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们告诉Vue跟踪我们何时正在编辑课程。用户编辑课程的意图是每当他们点击课程名称时；然后我们可以将编辑布尔值添加到我们的`data`对象中：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Our template can then be changed to reflect this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们的模板可以更改以反映这一点：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What exactly is happening here? Well, we've changed our `courseName` to instead
    only display when we're not editing (that is, we haven't clicked the name of the
    course). Instead, using the `v-else` directive, we're displaying an input box
    and `button` that allows us to save the new `CourseName`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里到底发生了什么？嗯，我们已经将我们的`courseName`更改为只在我们不编辑时显示（也就是说，我们没有点击课程名称）。相反，使用`v-else`指令，我们显示一个输入框和`button`，允许我们保存新的`CourseName`。
- en: We're also hiding the add course button at this point to keep things simple.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们还隐藏了添加课程按钮，以保持简单。
- en: 'Here''s what the code looks like:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下所示：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here we're using the `.put` method on our `axios` instance pointed at the endpoint
    of our selected course. As a data parameter we're using the spread operator with
    `{ ...course }` to destructure the course variable to work with our API.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在指向所选课程的端点上使用了我们的`axios`实例上的`.put`方法。作为数据参数，我们使用了展开操作符`{ ...course }`来解构课程变量以与我们的API一起使用。
- en: 'After this, we merely log the results to the console. Here''s what it looks
    like when we edit the "Vue.js Design Patterns" string to simply say `Vue.js`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们只是将结果记录到控制台。当我们将"Vue.js Design Patterns"字符串编辑为简单地说`Vue.js`时，它看起来是这样的：
- en: '![](assets/bf30fdfc-829c-4a50-ada7-0654d868290d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bf30fdfc-829c-4a50-ada7-0654d868290d.png)'
- en: Yay! The last thing we'll be looking at is DELETE and removing items from our
    database.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 耶！我们要看的最后一件事是DELETE和从我们的数据库中删除项目。
- en: HTTP DELETE
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP DELETE
- en: 'To delete items from our list, let''s add a `button` so that, when the user
    enters edit mode (by clicking an item), they can remove that specific course:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从我们的列表中删除项目，让我们添加一个`button`，这样当用户进入编辑模式（通过点击一个项目）时，他们可以删除那个特定的课程：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Our `removeCourse` function then looks as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`removeCourse`函数如下：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We're calling the `axios.delete` method and then filtering our `courses` list
    for every course but the one we've deleted. This then updates our client state
    and makes it consistent with the database.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用`axios.delete`方法，然后过滤我们的`courses`列表，除了我们删除的课程之外的每个课程。然后更新我们的客户端状态，并使其与数据库一致。
- en: '![](assets/69091533-e283-418f-8b4d-46d41fc6048f.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/69091533-e283-418f-8b4d-46d41fc6048f.png)'
- en: In this section of the chapter, we've created ourselves a simple "courses I
    want to study" list based on our REST API. It could have certainly been abstracted
    to multiple components, but as this wasn't the core focus of the application we've
    simply did it all in one.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分中，我们根据我们的REST API创建了一个简单的“我想学习的课程”列表。它当然可以被抽象为多个组件，但由于这不是应用程序的核心重点，我们只是在一个组件中完成了所有操作。
- en: Coming up next, let's make a real-time chat application with Node and `Socket.io`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们使用Node和`Socket.io`制作一个实时聊天应用程序。
- en: Real-time chat application with Node and Socket.io
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node和Socket.io制作实时聊天应用程序
- en: In this section, we'll be creating a real-time chat application using Node and
    `Socket.io`. We'll be writing a small amount of code with Node.js and the Express
    framework, but it's all the same JavaScript that you know and love.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Node和`Socket.io`创建一个实时聊天应用程序。我们将使用Node.js和Express框架编写少量代码，但它都是您所熟悉和喜爱的JavaScript。
- en: 'Run the following in your Terminal to create a new project:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的终端中运行以下命令以创建一个新项目：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can then create a server folder and initialize a `package.json` for server-specific
    dependencies like so:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以创建一个服务器文件夹，并初始化一个`package.json`，用于服务器特定的依赖项，如下所示：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: What is Socket.io?
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Socket.io？
- en: In our previous example, if we wanted to get new data from the server we'd need
    to make another HTTP request, whereas with WebSockets we can simply have a consistent
    event-listener that reacts whenever the event is fired.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，如果我们想要从服务器获取新数据，我们需要发出另一个HTTP请求，而使用WebSockets，我们可以简单地拥有一个一致的事件监听器，每当事件被触发时就会做出反应。
- en: To take advantage of this in our chat application, we'll be using `Socket.io`.
    This is a client and server-side library that allows us to work with WebSockets
    quickly and easily. It allows us to define and submit events that we can listen
    to and subsequently perform actions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的聊天应用程序中利用这一点，我们将使用`Socket.io`。这是一个客户端和服务器端的库，允许我们快速轻松地使用WebSockets。它允许我们定义和提交事件，我们可以监听并随后执行操作。
- en: Server setup
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器设置
- en: 'We can then create a new HTTP server using Express and listen for application
    connections with `Socket.io` by adding the following to `server.js`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用Express创建一个新的HTTP服务器，并通过在`server.js`中添加以下内容来监听应用程序连接：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we then run `node server.js` from within our Terminal inside the `server`
    folder, we should see the message Listening on port: 3000. This means that once
    we implement `Socket.io` inside of our client application we''ll be able to monitor
    whenever somebody connects to the application.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们在`server`文件夹内的终端中运行`node server.js`，我们应该会看到消息“Listening on port: 3000”。这意味着一旦我们在客户端应用程序中实现`Socket.io`，我们就能够监视每当有人连接到应用程序时。'
- en: Client connections
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端连接
- en: To capture a client connection, we need to install the `Socket.io` into our
    Vue application. We'll also be using another dependency named `vue-socket.io`,
    which provides us with a smoother implementation within our Vue applications.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕获客户端连接，我们需要在Vue应用程序中安装`Socket.io`。我们还将使用另一个名为`vue-socket.io`的依赖项，在Vue应用程序中为我们提供更流畅的实现。
- en: 'Run the following in your Terminal, ensuring you''re in the root directory
    (that is, not in the `server` folder):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令，确保你在根目录下（即不在`server`文件夹中）：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Setting up Vue and Socket.io
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Vue和Socket.io
- en: 'Let''s head on over to our `main.js` file so we can register `Socket.io` and
    the `Vue-Socket.io` plugin. You may remember how to do this from previous chapters:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到我们的`main.js`文件，这样我们就可以注册`Socket.io`和`Vue-Socket.io`插件。你可能还记得如何在之前的章节中做到这一点：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code block, we're importing the necessary dependencies and
    creating a reference to our Socket.io server, which is currently running on port
    `3000`. We're then adding the Vue plugin by using `Vue.use`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码块中，我们导入必要的依赖项，并创建对我们当前运行在端口`3000`上的Socket.io服务器的引用。然后我们使用`Vue.use`添加Vue插件。
- en: 'If we''ve done everything correctly, our client and server should be talking
    to each other. We should get the following inside of our Terminal:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们做的一切都正确，我们的客户端和服务器应该在彼此交流。我们应该在终端中看到以下内容：
- en: '![](assets/3c4ef978-1ba1-461b-acdd-7ca0f26ea14c.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3c4ef978-1ba1-461b-acdd-7ca0f26ea14c.png)'
- en: Determining connection status
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定连接状态
- en: Now that we've added the Vue-Socket.io plugin, we have access to a sockets object
    inside of our Vue instance. This allows us to listen to particular events as well
    as determine whether the user is connected or disconnected from the WebSocket.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了Vue-Socket.io插件，我们可以在Vue实例内部访问sockets对象。这使我们能够监听特定事件，并确定用户是否连接或断开WebSocket连接。
- en: 'Inside of `App.vue`, let''s display a message on screen if we''re connected/disconnected
    from the server:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.vue`中，让我们在屏幕上显示一条消息，如果我们与服务器连接/断开连接：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: There shouldn't be much new here other than the sockets object. Whenever we're
    connected to the socket, we can run any code we want inside of the `connect()`
    hook, and the same goes for `disconnect()`. We're simply flipping a Boolean to
    display a different message on screen with the `v-if` and `v-else` directive(s).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了sockets对象之外，这里不应该有太多新的东西。每当我们连接到socket时，我们可以在`connect()`钩子内运行任何代码，`disconnect()`也是一样。我们只是翻转一个布尔值，以便在屏幕上显示不同的消息，使用`v-if`和`v-else`指令。
- en: 'Initially, we get Connected to the server as our server is running. If we stop
    the server with *CTRL* + *C* in our Terminal window, our heading will change to
    reflect the fact that we no longer have a WebSocket connection. Here''s the result:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我们得到了Connected to the server，因为我们的服务器正在运行。如果我们在终端窗口中使用*CTRL* + *C*停止服务器，我们的标题将更改以反映我们不再具有WebSocket连接的事实。以下是结果：
- en: '![](assets/60c8c31c-5543-4391-80a3-23c99418f74c.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/60c8c31c-5543-4391-80a3-23c99418f74c.png)'
- en: Creating a connection status bar
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建连接状态栏
- en: 'Let''s have some fun with this concept. We can make a components folder and
    subsequently a new component named `ConnectionStatus.vue`. Inside of this file
    we can create a status bar that is shown to the user whenever they''re online
    or offline:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用这个概念玩一些游戏。我们可以创建一个components文件夹，然后创建一个名为`ConnectionStatus.vue`的新组件。在这个文件中，我们可以创建一个状态栏，当用户在线或离线时向用户显示：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Whilst we only have one screen inside of our current application, we may want
    to use this component across multiple components, so we can register it globally
    inside of `main.js`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们当前应用程序中只有一个屏幕，但我们可能希望在多个组件中使用这个组件，所以我们可以在`main.js`中全局注册它：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can then edit our `App.vue` template to use this component and pass the
    current connection state as a prop:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以编辑我们的 `App.vue` 模板以使用此组件，并将当前连接状态作为 prop 传递：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here''s our result:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的结果：
- en: '![](assets/4663d9db-06e7-4894-a7ce-f5f279ecd755.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4663d9db-06e7-4894-a7ce-f5f279ecd755.png)'
- en: Next, we can make a navigation bar component to make our UI more complete.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以创建一个导航栏组件，使我们的用户界面更完整。
- en: Navigation bar
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航栏
- en: The navigation bar component won't have many uses other than to simply display
    the name of our application. You could change this to include other functionality
    such as log in/out, adding new chat channels, or any other chat-specific user
    actions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏组件除了简单显示我们应用程序的名称外，不会有太多用途。您可以更改此功能，以包括其他功能，例如登录/注销、添加新的聊天频道或任何其他特定于聊天的用户操作。
- en: 'Let''s make a new component named `Navbar.vue` in the `components` folder:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `components` 文件夹中创建一个名为 `Navbar.vue` 的新组件：
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You may notice that the `v-once` directive was added on this `div`. This is
    the first time we've looked at it, but as this component is entirely static we
    can tell Vue to not listen for any changes and only render it once.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到在这个 `div` 上添加了 `v-once` 指令。这是我们第一次看到它，但由于这个组件完全是静态的，我们可以告诉 Vue 不要监听任何更改，只渲染一次。
- en: 'We then have to remove any default padding or margin inside of the HTML body.
    Create a file named `styles.css` inside of the root directory that contains these
    attributes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须删除 HTML body 内部的任何默认填充或边距。在根目录中创建一个名为 `styles.css` 的文件，其中包含这些属性：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can then add this to our `index.html` file like so:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以像这样将其添加到我们的 `index.html` 文件中：
- en: '[PRE29]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Next, we'll need to register this component globally. Try and do this by yourself
    inside `main.js` if you feel you can.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要全局注册此组件。如果您觉得可以的话，请尝试在 `main.js` 中自行完成。
- en: 'This requires us to import `Navbar` and register it like so:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这要求我们导入 `Navbar` 并像这样注册它：
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can then add this to our `App.vue` file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将其添加到我们的 `App.vue` 文件中：
- en: '[PRE31]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Next up, let's create our `MessageList` component to hold a list of messages.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建我们的 `MessageList` 组件来保存消息列表。
- en: Message list
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息列表
- en: 'We can display a list of messages on screen by creating a new component with
    a prop that accepts an array of messages. Create a new component inside the components
    folder named `MessageList.vue`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个接受消息数组的 prop 的新组件，我们可以在屏幕上显示消息列表。在 `components` 文件夹中创建一个名为 `MessageList.vue`
    的新组件：
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This component is fairly simple; all it does is iterate over our `messages`
    array using the `v-for` directive. We pass the messages array into this component
    using the appropriate prop.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件非常简单；它只是使用 `v-for` 指令遍历我们的 `messages` 数组。我们使用适当的 prop 将消息数组传递给这个组件。
- en: 'Instead of registering this component globally, let''s register it specifically
    inside of our `App.vue` component. Whilst we''re here, we can also add some dummy
    data to the `messages` array:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将此组件全局注册，让我们在 `App.vue` 组件内部特别注册它。在这里，我们还可以向 `messages` 数组添加一些虚拟数据：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can then add the `message-list` component to our template:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将 `message-list` 组件添加到我们的模板中：
- en: '[PRE34]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We''re passing the messages in as a prop based on the messages array found
    inside of our data object. We can also add the following styles:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据数据对象中找到的消息数组将消息作为 prop 传递。我们还可以添加以下样式：
- en: '[PRE35]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Doing so will center our message box on the screen and constrain the `width`
    for demonstration purposes.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做将使我们的消息框居中显示在屏幕上，并限制 `width` 以进行演示。
- en: 'We''re making progress! Here''s our message box:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在取得进展！这是我们的消息框：
- en: '![](assets/6f9659ba-e0cf-4719-9d60-66c855f8e40d.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6f9659ba-e0cf-4719-9d60-66c855f8e40d.png)'
- en: What next? Well, we still need the ability to add messages to our list. Let's
    work on that next.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来呢？嗯，我们仍然需要能够向我们的列表中添加消息的功能。让我们接下来处理这个。
- en: Adding messages to the list
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向列表添加消息
- en: Create a new component inside of the components folder named `MessageForm.vue`.
    This will serve to input messages into the list.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在components文件夹中创建一个名为`MessageForm.vue`的新组件。这将用于将消息输入到列表中。
- en: 'We can start off with the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从以下开始：
- en: '[PRE36]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This essentially allows us to capture user input for both the selected `username`
    and `message`. We can then use this information to send data to our `Socket.io`
    server within the `sendMessage` function.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这本质上允许我们捕获用户对所选`username`和`message`的输入。然后我们可以使用这些信息在`sendMessage`函数中向我们的`Socket.io`服务器发送数据。
- en: By adding `@submit.prevent` to our form rather than `@submit`, we're ensuring
    that we override the default behavior of the submitted form; this is necessary
    or else our page would otherwise reload.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`@submit.prevent`添加到我们的表单而不是`@submit`，我们确保覆盖了提交表单的默认行为；这是必要的，否则我们的页面会重新加载。
- en: 'Let''s go and register our form inside of `App.vue`, even though we haven''t
    hooked up any actions yet:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去注册我们的表单在`App.vue`中，即使我们还没有连接任何操作：
- en: '[PRE37]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can then add this to our template:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将其添加到我们的模板中：
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Here''s what our application looks like now:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序看起来是这样的：
- en: '![](assets/92c939a6-e392-4e4b-b07f-2183edd45d5c.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/92c939a6-e392-4e4b-b07f-2183edd45d5c.png)'
- en: Server-side events with Socket.io
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Socket.io进行服务器端事件
- en: In order to send a new message, we can listen for an event named `chatMessage`
    within our `server.js` file.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发送新消息，我们可以在我们的`server.js`文件中监听名为`chatMessage`的事件。
- en: 'This can be done inside of our original connection event, ensuring that we
    listen for events on a socket-by-socket basis:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在我们的原始连接事件内完成，确保我们按socket逐个socket地监听事件：
- en: '[PRE39]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: If we then send the `chatMessage` event from our client, it should subsequently
    log out this message inside of our Terminal. Let's try it out!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从客户端发送`chatMessage`事件，那么它应该随后在我们的终端内记录出这条消息。让我们试一试！
- en: Because we've made a change to our `server.js` file, we'll need to restart the
    Node instance. Hit *CTRL* + *C* within the Terminal window that is running `server.js`
    and run node `server.js` again.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们对`server.js`文件进行了更改，所以我们需要重新启动Node实例。在运行`server.js`的终端窗口中按下*CTRL* + *C*，然后再次运行node
    `server.js`。
- en: Nodemon
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nodemon
- en: Alternatively, you may want to use a module called `nodemon` to automatically
    do this whenever any changes are made.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可能希望使用一个名为`nodemon`的模块，在进行任何更改时自动执行此操作。
- en: 'Run the following inside of your Terminal:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的终端内运行以下命令：
- en: '[PRE40]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We can then run:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以运行：
- en: '[PRE41]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Great! Let''s go back to our `MessageForm` component and create the `sendMessage`
    function:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！让我们回到我们的`MessageForm`组件并创建`sendMessage`函数：
- en: '[PRE42]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![](assets/b7ba289b-f5fc-401e-babe-33f9f49a203a.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b7ba289b-f5fc-401e-babe-33f9f49a203a.png)'
- en: 'At this point hitting Send doesn''t add the message to an array yet, but it
    does give us the sent message inside of our Terminal! Let''s take a look:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此时点击发送还没有将消息添加到数组中，但它确实在我们的终端内显示了发送的消息！让我们来看一下：
- en: '![](assets/ec545d8a-9493-4d3a-ab16-e55ec33fbe42.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ec545d8a-9493-4d3a-ab16-e55ec33fbe42.png)'
- en: 'As it turns out, we don''t have to write much more code to take advantage of
    our WebSockets. Let''s head back over to the `App.vue` component and add a function
    to our sockets object called `chatMessage`. Notice how this is identical to the
    event name, meaning that every time this event is fired we can run a particular
    method:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，我们不必写太多代码来利用我们的WebSockets。让我们回到`App.vue`组件并向我们的sockets对象添加一个名为`chatMessage`的函数。注意这与事件名称相同，这意味着每次触发此事件时我们都可以运行特定的方法：
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Our client-side code is now hooked up and listening to the `chatMessage` event.
    The problem is that our server-side code isn''t currently sending anything to
    the client! Let''s fix this by emitting an event from within the socket:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的客户端代码现在已经连接并监听`chatMessage`事件。问题在于我们的服务器端代码目前没有向客户端发送任何内容！让我们通过在socket内部发出一个事件来解决这个问题：
- en: '[PRE44]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We're keeping the messages in memory with an array named messages. We're also
    then emitting those messages downstream whenever a client connects to our application
    (all the previous messages will be shown). As well as this, any time there is
    a new message added to the array, we're also sending this to all of the clients
    too.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个名为messages的数组将消息保存在内存中。每当客户端连接到我们的应用程序时，我们也会向下游发送这些消息（所有先前的消息都将显示）。除此之外，每当数组中添加新消息时，我们也会将其发送给所有客户端。
- en: If we open up two Chrome tabs we should then be able to have a self-directed
    conversation!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开两个Chrome标签，我们应该能够进行自我导向的对话！
- en: '![](assets/597f3540-a0de-4b8e-9ea6-0f7ced878124.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/597f3540-a0de-4b8e-9ea6-0f7ced878124.png)'
- en: We can then talk to ourselves in the other tab!
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在另一个标签页中与自己交谈！
- en: '![](assets/a4adcb16-28ff-4fa1-b43b-b8e88bfe7dd3.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a4adcb16-28ff-4fa1-b43b-b8e88bfe7dd3.png)'
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to create HTTP requests with Vue using the `Axios`
    library and `json-server`. This allows us to interact with third-party APIs and
    power up our Vue applications.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用`Axios`库和`json-server`在Vue中创建HTTP请求。这使我们能够与第三方API进行交互，并增强我们的Vue应用程序。
- en: We also looked at how to create a larger application using WebSockets and `Socket.io`.
    This allows us to have real-time communication with other clients that are connected
    to our application, allowing for even more possibilities.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何使用WebSockets和`Socket.io`创建一个更大的应用程序。这使我们能够与连接到我们的应用程序的其他客户端进行实时通信，从而实现更多的可能性。
- en: We've come a long way! In order to truly take advantage of Vue, we'll need to
    master the router and look at advanced state management concepts. That is all
    coming up in the next chapter(s)!
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经走了很长的路！为了真正利用Vue，我们需要掌握路由器并了解高级状态管理概念。这将在接下来的章节中讨论！
