["```js\n# Create a new Vue project\n$ vue init webpack-simple vue-css-animations\n\n# Navigate to directory\n$ cd vue-css-animations\n\n# Install dependencies\n$ npm install\n\n# Run application\n$ npm run dev\n```", "```js\n<style>\nbutton {\n background-color: transparent;\n padding: 5px;\n border: 1px solid black;\n}\n\nh1 {\n opacity: 0;\n}\n\n@keyframes fade {\n from { opacity: 0; }\n to { opacity: 1; }\n}\n\n.animated {\n animation: fade 1s;\n opacity: 1;\n}\n</style>\n```", "```js\n<template>\n <div id=\"app\">\n  <h1 v-bind:class=\"{ animated: toggle }\">I fade in!</h1>\n  <button @click=\"toggle = !toggle\">Toggle Heading</button>\n </div> \n</template>\n\n<script>\nexport default {\n data () {\n  return {\n   toggle: false\n  }\n }\n}\n</script>\n```", "```js\n Create a new Vue project\n$ vue init webpack-simple vue-animate-css\n\n# Navigate to directory\n$ cd vue-animate-css\n\n# Install dependencies\n$ npm install\n\n# Run application\n$ npm run dev\n```", "```js\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css\">\n```", "```js\n<template>\n <h1 class=\"animated fadeIn\">Hello Vue!</h1>\n</template>\n```", "```js\n<template>\n <div id=\"app\">\n  <transition name=\"fadeIn\"\n  enter-active-class=\"animated fadeIn\"\n  leave-active-class=\"animated fadeOut\">\n   <h1 v-if=\"toggle\">I fade in and out!</h1>\n  </transition>\n  <button @click=\"toggle = !toggle\">Toggle Heading</button>\n </div> \n</template>\n\n<script>\nexport default {\n data () {\n  return {\n   toggle: false\n  }\n }\n}\n</script>\n```", "```js\n<transition name=\"my-transition\">\n```", "```js\n# Create a new Vue project\n$ vue init webpack-simple vue-validation\n\n# Navigate to directory\n$ cd vue-validation\n\n# Install dependencies\n$ npm install\n\n# Install Vuelidate\n$ npm install vuelidate\n\n# Run application\n$ npm run dev\n```", "```js\nimport Vue from 'vue';\nimport Vuelidate from 'vuelidate';\nimport App from './App.vue';\n\nVue.use(Vuelidate);\n\nnew Vue({\n  el: '#app',\n  validations: {},\n  render: h => h(App),\n});\n```", "```js\n<template>\n  <div>\n    <form class=\"form\" @submit.prevent=\"onSubmit\">\n      <div class=\"input\">\n        <label for=\"email\">Email</label>\n        <input \n        type=\"email\" \n        id=\"email\" \n        v-model.trim=\"email\">\n      </div>\n      <div class=\"input\"> \n        <label for=\"firstName\">First Name</label>\n        <input \n        type=\"text\"\n        id=\"firstName\" \n        v-model.trim=\"firstName\">\n      </div>\n      <div class=\"input\">\n        <label for=\"lastName\">Last Name</label>\n        <input \n        type=\"text\" \n        id=\"lastName\" \n        v-model.trim=\"lastName\">\n      </div>\n      <div class=\"input\">\n        <label for=\"password\">Password</label>\n        <input \n        type=\"password\" \n        id=\"password\" \n        v-model.trim=\"password\">\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      firstName: '',\n      lastName: '',\n    };\n  },\n  methods: {\n    onSubmit(){\n    }\n  },\n}\n</script>\n```", "```js\n<div class=\"input\">\n  <label for=\"email\">Email</label>\n  <input \n  type=\"email\" \n  id=\"email\" \n  @input=\"$v.email.$touch()\"\n  v-model.trim=\"email\">\n</div>\n<div class=\"input\"> \n  <label for=\"firstName\">First Name</label>\n  <input \n  type=\"text\"\n  id=\"firstName\" \n  v-model.trim=\"firstName\"\n  @input=\"$v.firstName.$touch()\">\n</div>\n<div class=\"input\">\n  <label for=\"lastName\">Last Name</label>\n  <input \n  type=\"text\" \n  id=\"lastName\" \n  v-model.trim=\"lastName\"\n  @input=\"$v.lastName.$touch()\">\n</div>\n<div class=\"input\">\n  <label for=\"password\">Password</label>\n  <input \n  type=\"password\" \n  id=\"password\" \n  v-model.trim=\"password\"\n  @input=\"$v.password.$touch()\">\n</div>\n```", "```js\nimport { required, email } from 'vuelidate/lib/validators';\n\nexport default {\n // Omitted\n  validations: {\n    email: {\n      required,\n      email,\n    },\n    firstName: {\n      required,\n    },\n    lastName: {\n      required,\n    },\n    password: {\n      required,\n    }\n  },\n}\n```", "```js\n <div class=\"validators\">\n  <pre>{{$v}}</pre>\n </div>\n```", "```js\n<style>\n.form {\n display: inline-block;\n text-align: center;\n width: 49%;\n}\n.validators {\n display: inline-block;\n width: 49%;\n text-align: center;\n vertical-align: top;\n}\n.input {\n padding: 5px;\n}\n</style>\n```", "```js\n<style>\ninput:focus {\n  outline: none;\n}\n.error {\n  border: 1px solid red;\n}\n</style>\n```", "```js\n<div class=\"input\">\n  <label for=\"email\">Email</label>\n  <input \n  :class=\"{ error: $v.email.$error }\"\n  type=\"email\" \n  id=\"email\" \n  @input=\"$v.email.$touch()\"\n  v-model.trim=\"email\">\n</div>\n<div class=\"input\"> \n  <label for=\"firstName\">First Name</label>\n  <input \n  :class=\"{ error: $v.firstName.$error }\"\n  type=\"text\"\n  id=\"firstName\" \n  v-model.trim=\"firstName\"\n  @input=\"$v.firstName.$touch()\">\n</div>\n<div class=\"input\">\n  <label for=\"lastName\">Last Name</label>\n  <input \n  :class=\"{ error: $v.lastName.$error}\"\n  type=\"text\" \n  id=\"lastName\" \n  v-model.trim=\"lastName\"\n  @input=\"$v.lastName.$touch()\">\n</div>\n<div class=\"input\">\n  <label for=\"password\">Password</label>\n  <input \n  :class=\"{ error: $v.password.$error }\"\n  type=\"password\" \n  id=\"password\" \n  v-model.trim=\"password\"\n  @input=\"$v.password.$touch()\">\n</div>\n```", "```js\n<div class=\"input\">\n  <label for=\"email\">Email</label>\n  <input \n  :class=\"{ error: $v.email.$error }\"\n  type=\"email\" \n  id=\"email\" \n  @input=\"$v.email.$touch()\"\n  v-model.trim=\"email\">\n\n  <p class=\"error-message\" v-if=\"!$v.email.email\">Please enter a valid email address</p>\n</div>\n\n// Omitted\n<style>\n.error-message {\n color: red;\n}\n</style>\n```", "```js\n <p class=\"error-message\" v-if=\"!$v.email.email\">Please enter a valid email address.</p>\n <p class=\"error-message\" v-if=\"!$v.email.required\">Email must not be empty.</p>\n```", "```js\n<div class=\"input\">\n  <label for=\"email\">Email</label>\n  <input \n  :class=\"{ error: $v.email.$error }\"\n  type=\"email\" \n  id=\"email\" \n  @input=\"$v.email.$touch()\"\n  v-model.trim=\"email\">\n\n  <div v-if=\"$v.email.$dirty\">\n    <p class=\"error-message\" v-if=\"!$v.email.email\">Please enter a \n    valid email address.</p>\n    <p class=\"error-message\" v-if=\"!$v.email.required\">Email must not \n    be empty.</p>\n  </div>\n\n</div>\n<div class=\"input\"> \n  <label for=\"firstName\">First Name</label>\n  <input \n  :class=\"{ error: $v.firstName.$error }\"\n  type=\"text\"\n  id=\"firstName\" \n  v-model.trim=\"firstName\"\n  @input=\"$v.firstName.$touch()\">\n\n  <div v-if=\"$v.firstName.$dirty\">\n    <p class=\"error-message\" v-if=\"!$v.firstName.required\">First Name \n  must not be empty.</p>\n  </div>\n</div>\n<div class=\"input\">\n  <label for=\"lastName\">Last Name</label>\n  <input \n  :class=\"{ error: $v.lastName.$error}\"\n  type=\"text\" \n  id=\"lastName\" \n  v-model.trim=\"lastName\"\n  @input=\"$v.lastName.$touch()\">\n\n  <div v-if=\"$v.lastName.$dirty\">\n    <p class=\"error-message\" v-if=\"!$v.lastName.required\">Last Name \n   must not be empty.</p>\n  </div>\n</div>\n<div class=\"input\">\n  <label for=\"password\">Password</label>\n  <input \n  :class=\"{ error: $v.password.$error }\"\n  type=\"password\" \n  id=\"password\" \n  v-model.trim=\"password\"\n  @input=\"$v.password.$touch()\">\n\n  <div v-if=\"$v.password.$dirty\">\n    <p class=\"error-message\" v-if=\"!$v.password.required\">Password must \n  not be empty.</p>\n  </div>\n</div>\n```", "```js\nimport { required, email, minLength, sameAs } from 'vuelidate/lib/validators';\n\nexport default {\n // Omitted\n  data() {\n    return {\n      email: '',\n      password: '',\n      repeatPassword: '',\n      firstName: '',\n      lastName: '',\n    };\n  },\n  validations: {\n    email: {\n      required,\n      email,\n    },\n    firstName: {\n      required,\n    },\n    lastName: {\n      required,\n    },\n    password: {\n      required,\n      minLength: minLength(6),\n    },\n    repeatPassword: {\n      required,\n      minLength: minLength(6),\n      sameAsPassword: sameAs('password'),\n    },\n  },\n}\n```", "```js\n<div class=\"input\">\n <label for=\"email\">Email</label>\n <input \n :class=\"{ error: $v.email.$error }\"\n type=\"email\" \n id=\"email\" \n @input=\"$v.email.$touch()\"\n v-model.trim=\"email\">\n\n <div v-if=\"$v.email.$dirty\">\n <p class=\"error-message\" v-if=\"!$v.email.email\">Please enter a valid email address.</p>\n <p class=\"error-message\" v-if=\"!$v.email.required\">Email must not be empty.</p>\n </div>\n\n</div>\n<div class=\"input\"> \n <label for=\"firstName\">First Name</label>\n <input \n :class=\"{ error: $v.firstName.$error }\"\n type=\"text\"\n id=\"firstName\" \n v-model.trim=\"firstName\"\n @input=\"$v.firstName.$touch()\">\n\n <div v-if=\"$v.firstName.$dirty\">\n <p class=\"error-message\" v-if=\"!$v.firstName.required\">First Name must not be empty.</p>\n </div>\n</div>\n<div class=\"input\">\n <label for=\"lastName\">Last Name</label>\n <input \n :class=\"{ error: $v.lastName.$error}\"\n type=\"text\" \n id=\"lastName\" \n v-model.trim=\"lastName\"\n @input=\"$v.lastName.$touch()\">\n\n <div v-if=\"$v.lastName.$dirty\">\n <p class=\"error-message\" v-if=\"!$v.lastName.required\">Last Name must not be empty.</p>\n </div>\n</div>\n<div class=\"input\">\n <label for=\"password\">Password</label>\n <input \n :class=\"{ error: $v.password.$error }\"\n type=\"password\" \n id=\"password\" \n v-model.trim=\"password\"\n @input=\"$v.password.$touch()\">\n\n <div v-if=\"$v.password.$dirty\">\n <p class=\"error-message\" v-if=\"!$v.password.required\">Password must not be empty.</p>\n </div>\n</div>\n<div class=\"input\">\n <label for=\"repeatPassword\">Repeat Password</label>\n <input \n :class=\"{ error: $v.repeatPassword.$error }\"\n type=\"password\" \n id=\"repeatPassword\" \n v-model.trim=\"repeatPassword\"\n @input=\"$v.repeatPassword.$touch()\">\n\n <div v-if=\"$v.repeatPassword.$dirty\">\n <p class=\"error-message\" v-if=\"!$v.repeatPassword.sameAsPassword\">Passwords must be identical.</p>\n\n <p class=\"error-message\" v-if=\"!$v.repeatPassword.required\">Password must not be empty.</p>\n </div>\n</div>\n```", "```js\n<button :disabled=\"$v.$invalid\" type=\"submit\">Submit</button>\n```", "```js\nmethods: {\n  onSubmit() {\n    if(!this.$v.$invalid) {\n      const user = { \n        email: this.email,\n        firstName: this.firstName,\n        lastName: this.lastName,\n        password: this.password,\n        repeatPassword: this.repeatPassword\n      }\n\n      // Submit the object to an API of sorts\n    }\n  },\n},\n```", "```js\ndata() {\n  return {\n    user: {\n      email: '',\n      password: '',\n      repeatPassword: '',\n      firstName: '',\n      lastName: '',\n    }\n  };\n},\n```", "```js\nimport Vue from 'vue'\nimport App from './App.vue'\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n})\n```", "```js\n<script>\nexport default {\n render(h) {\n  return h('h1', 'Hello render!')\n }\n}\n</script>\n```", "```js\n  render(h){\n    h('ul', [\n      h('li', 'Evan You'),\n      h('li', 'Edd Yerburgh'),\n      h('li', 'Paul Halliday')\n    ])\n }\n```", "```js\nrender(h) {\n return h('div', [\n  h('ul', [\n   h('li', 'Evan You'),\n   h('li', 'Edd Yerburgh'),\n   h('li', 'Paul Halliday')\n  ])\n ])\n}\n```", "```js\n h('div', [\n  h('ul', { style: { color: 'red' } }, [\n   h('li', 'Evan You'),\n   h('li', 'Edd Yerburgh'),\n   h('li', 'Paul Halliday')\n  ])\n ])\n```", "```js\n<script>\nexport default {\n props: ['name'],\n functional: true\n}\n</script>\n```", "```js\nimport ListItem from './components/ListItem.vue';\n\nexport default {\n data() {\n  return {\n   names: ['Evan You', 'Edd Yerburgh', 'Paul Halliday']\n  }\n },\n render(createElement) {\n  return createElement('div', [\n   createElement('ul',\n    this.names.map(name => \n     createElement(ListItem, \n      {props: { name: name } })\n     ))\n   ])\n }\n}\n```", "```js\nexport default {\n props: ['name'],\n functional: true,\n render(createElement, context) {\n  return createElement('li', context.props.name)\n }\n}\n```", "```js\n**$ npm i -D babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx** \n```", "```js\n{\n \"presets\": [\n [\"env\", { \"modules\": false }],\n \"stage-3\"\n ],\n \"plugins\": [\"transform-vue-jsx\"]\n}\n```", "```js\nrender(h) {\n return (\n  <div>\n   <ul>\n    { this.names.map(name => <ListItem name={name} />) }\n   </ul>\n  </div>\n )\n}\n```"]