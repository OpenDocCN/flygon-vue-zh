- en: Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式
- en: In this chapter, we'll look at a variety of anti-patterns within Vue.js and
    review concepts at a high level that we've learned throughout the book. We'll
    look at various patterns and anti-patterns and how we can write code that is consistent
    across teams and your own projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看Vue.js中的各种反模式，并在高层次上回顾我们在整本书中学到的概念。我们将看看各种模式和反模式，以及我们如何编写能够在团队和自己的项目中保持一致的代码。
- en: Before defining anything as a *pattern* or *anti-pattern*, it's important to
    accurately define both for the reader. If something is to be considered a pattern,
    this means that this is a recommended practice in the vast majority of cases.
    On the contrary, if I've defined it as an anti-pattern, then it's most likely
    not a recommended practice in a vast majority of cases. For further information
    on this, a good source of patterns and guidelines can be found at [https://github.com/pablohpsilva/vuejs-component-style-guide](https://github.com/pablohpsilva/vuejs-component-style-guide).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在将任何东西定义为*模式*或*反模式*之前，重要的是为读者准确定义两者。如果某事被认为是一种模式，这意味着在绝大多数情况下这是一种推荐的做法。相反，如果我将其定义为反模式，那么在绝大多数情况下，这很可能不是一种推荐的做法。关于这一点的更多信息，可以在[https://github.com/pablohpsilva/vuejs-component-style-guide](https://github.com/pablohpsilva/vuejs-component-style-guide)找到模式和指南的良好来源。
- en: Software development is an opinionated field with a variety of ways to solve
    the same problem, so there may be ideologies that are classified as something
    you don't agree with, and that's okay. At the end of the day, each team has their
    own style, but developers should seek to stick to patterns that reduce friction
    and speed up development where possible.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发是一个主观的领域，有各种解决同一问题的方式，因此可能有一些被归类为你不同意的意识形态，这是可以的。在一天结束时，每个团队都有自己的风格，但开发人员应该努力坚持能够减少摩擦并加快开发速度的模式。
- en: 'In this chapter, we''ll learn about the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Common patterns and anti-patterns within Vue projects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue项目中的常见模式和反模式
- en: Container/presentational components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器/展示组件
- en: How to write testable Vue.js components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写可测试的Vue.js组件
- en: Components
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: There are many ways for components to communicate within Vue, such as the use
    of props, events, and store-based scenarios. Vue also gives us access to `$parent`
    and `$children` objects, which allow us to interact with parent/child components.
    Let's take a look at this and see why it shouldn't be used.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中，组件之间有许多通信方式，例如使用props、事件和基于store的场景。Vue还给我们提供了`$parent`和`$children`对象的访问权限，允许我们与父/子组件进行交互。让我们来看看这个，并看看为什么不应该使用它。
- en: Communication – Anti-pattern
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信-反模式
- en: 'Imagine that we had our familiar `TodoList` example, and within the `TodoItem`
    component, we want the ability to complete a particular Todo. If we wanted to
    keep our todos within the `TodoList` and thus call the completed method from `TodoItem`,
    we could do it like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下我们熟悉的`TodoList`示例，在`TodoItem`组件中，我们希望能够完成特定的Todo。如果我们想要将我们的todos保留在`TodoList`中，因此从`TodoItem`中调用完成方法，我们可以这样做：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is a bad idea for numerous reasons, mostly because we're tightly coupling
    these two components together and assuming that there will always be a `completeTodo`
    method on the parent component.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 出于许多原因，这是一个坏主意，主要是因为我们将这两个组件紧密耦合在一起，并假设父组件上始终会有一个`completeTodo`方法。
- en: What can we change about this to make it better?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们可以改变什么来使它变得更好？
- en: 'I''m not saying that parent/child components can''t communicate, but you should
    aim to design components in such a way that they''re flexible. Use events or the
    Vuex store depending on the structure of your application. Here''s an example
    using an event instead:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不是说父/子组件不能通信，但你应该设计组件的方式是灵活的。根据应用程序的结构，使用事件或Vuex存储。这里有一个使用事件的例子：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Children mutating props – Anti-pattern
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子组件变异道具-反模式
- en: It's important that we won't modify props inside our child components. Props
    should be considered the source of truth when passed down to a component and thus,
    change the value from within a child component is typically bad practice. There
    are some unique case scenarios however where it may be appropriate to do so, like
    when using the `.sync` modifier to achieve two-way data binding.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是我们不应该在子组件内修改道具。当传递给组件时，道具应被视为真相的来源，因此在子组件内更改值通常是不好的做法。然而，也有一些特殊情况，可能适当这样做，比如使用`.sync`修饰符实现双向数据绑定时。
- en: 'If we use our previous example and change the todos prop from within the child,
    we''ll get a warning inside the console:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用先前的示例并在子组件内更改todos道具，我们将在控制台内收到警告：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What should we do instead?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们应该做什么？
- en: 'If you want to work with the prop inside the child component, it''s best to
    save the prop as a new variable inside the `data` option. This allows you to then
    mutate a new version of the prop, local to this component:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在子组件内使用道具，最好将道具保存为`data`选项内的新变量。这样可以使您变异道具的新版本，局限于此组件：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can then access and mutate `personAge` without worrying about any side effects.
    Another example can be seen when creating a filterable search box, where instead
    of mutating the prop directly, make a `computed` property that performs the required
    functions:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以访问和变异`personAge`而不必担心任何副作用。另一个例子是创建一个可过滤的搜索框，而不是直接变异道具，可以创建一个执行所需功能的`computed`属性：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Mutating property arrays
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变异属性数组
- en: 'An important consideration to make when passing down arrays and objects as
    properties within JavaScript is the fact that they are passed by reference. This
    means that any changes to the original array within the child will also spill
    over into the parent component. Let''s see this in action:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中传递数组和对象作为属性时，需要考虑的一个重要因素是它们是按引用传递的。这意味着在子组件内对原始数组的任何更改也会泄漏到父组件中。让我们看看这个例子：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, we have a component (`App.vue`) that contains an array that we''re displaying
    on screen and passing down into the child component. We''ll display the same array
    on screen inside the child component, but also give the child a button to add
    a new item into the array:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个包含数组的组件（`App.vue`），我们将其显示在屏幕上并传递到子组件中。我们将在子组件内在屏幕上显示相同的数组，但还会给子组件一个按钮，用于向数组中添加新项：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When we add a new person to our friends'' list, this is our result:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向朋友列表中添加一个新人时，这是我们的结果：
- en: '![](assets/0d2c36e1-e927-4e12-b168-b6b066a619e2.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0d2c36e1-e927-4e12-b168-b6b066a619e2.png)'
- en: 'Then, both components have the same array! This isn''t what we want. If for
    some reason we wanted to do an action like this, it would be wiser to keep a copy
    of the friends'' list and mutate that, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，两个组件都有相同的数组！这不是我们想要的。如果出于某种原因我们想要执行这样的操作，最好保留朋友列表的副本并进行变异，如下所示：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using data as an object - Anti-Pattern
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据作为对象-反模式
- en: When creating components with Vue, it's important that the data option is a
    function that returns a new object holding data, rather than just a plain data
    object.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Vue组件时，重要的是数据选项是一个返回包含数据的新对象的函数，而不仅仅是一个普通的数据对象。
- en: If you simply use a data object that's not a function, all instances of the
    component will share the same data. This is bad because as you may be able to
    imagine, all instances of the component will be updated with the same data any
    time it changes. It's important to ensure that each component is capable of managing
    its own data rather than sharing data across the board.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你简单地使用一个不是函数的数据对象，那么组件的所有实例将共享相同的数据。这是不好的，因为你可以想象到，每当数据发生变化时，组件的所有实例都会被更新为相同的数据。重要的是要确保每个组件都能够管理自己的数据，而不是在整个组件之间共享数据。
- en: 'Let''s take a look at the problem:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下问题所在：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can fix this by doing this instead:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过这样做来修复这个问题：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By creating the `return` statement, it allows each instance created to have
    its own object rather than a shared one. This then allows the code to be used
    multiple times without the conflict of shared data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建`return`语句，它允许每个创建的实例都有自己的对象，而不是共享一个对象。这样就可以在没有共享数据冲突的情况下多次使用代码。
- en: Next up, let's take a look at best practices for naming our components.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看一下命名组件的最佳实践。
- en: Naming components – Anti-pattern
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件命名 - 反模式
- en: It's not a good idea to name components in single words as it has the chance
    to conflict with native HTML elements. Let's say we had a signup form and a component
    named `Form.vue`; what would be an appropriate name when using this inside our
    template?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将组件命名为单个单词并不是一个好主意，因为它有可能与原生HTML元素发生冲突。假设我们有一个注册表单和一个名为`Form.vue`的组件；在模板中使用时，什么样的名称才是合适的呢？
- en: 'Well, as you might imagine, having a component named `<form>` will conflict
    with the `<form>`, so it''s a best practice to have components that are named
    with more than one word. A better example can be the name of `signup-form`, `app-signup-form`,
    or `app-form`, depending on preference:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，你可能会想象到，拥有一个名为`<form>`的组件将与`<form>`冲突，因此最佳实践是使用多于一个单词命名的组件。一个更好的例子可以是`signup-form`，`app-signup-form`或`app-form`，具体取决于个人偏好：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Template expressions
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板表达式
- en: 'Often times, when we''re displaying items on the screen, we may have to compute
    values and call functions to change the way our data looks. Instead of doing this
    work inside the template, it''s advised to move this out into a `computed` property,
    as this is much easier to maintain:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，当我们在屏幕上显示项目时，我们可能需要计算值并调用函数来改变我们的数据外观。建议不要在模板内部进行这项工作，而是将其移到`computed`属性中，因为这样更容易维护。
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This means any changes in our template are much easier to handle because the
    output is mapped to a computed property.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的模板中的任何更改都更容易处理，因为输出被映射到一个计算属性。
- en: Pattern – Container/Presentational components
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式 - 容器/展示组件
- en: An important part of the component design is ensuring that your components are
    testable. You should think of each component as a standalone module in your application
    that could be switched in/out, as necessary; as a result, it should not be tightly
    coupled with another component.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 组件设计的一个重要部分是确保你的组件是可测试的。你应该把每个组件都看作是应用程序中的一个独立模块，可以根据需要进行切换；因此，它不应该与另一个组件紧密耦合。
- en: The best way is to ensure that your components are testable after ensuring that
    light coupling is to have a well-defined public API via component props and then
    use events to communicate between the parent/child component. This also helps
    us when testing, as we're able to mock components much easier.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的方法是确保你的组件在确保轻耦合之后是可测试的，通过组件属性具有明确定义的公共API，然后使用事件在父/子组件之间进行通信。这也有助于我们进行测试，因为我们能够更容易地模拟组件。
- en: A common pattern to use when following this model is the container/presentational
    components. This means we keep all of our business logic and state inside the
    "container" and then pass the state down to the "presentational" component to
    display on the screen.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这种模式时常见的模式是容器/展示组件。这意味着我们将所有业务逻辑和状态保留在“容器”中，然后将状态传递给“展示”组件以在屏幕上显示。
- en: The presentational component can still communicate with other components, if
    necessary, with the use of events, but it shouldn't modify or hold state outside
    inbound props. This ensures that we have a common data flow between our components,
    and it means that our applications are easier to reason about.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 展示组件仍然可以通过事件与其他组件通信，如果必要的话，但不应修改或保存外部传入props之外的状态。这确保了我们的组件之间有一个共同的数据流，这意味着我们的应用程序更容易理解。
- en: 'Here''s an explicitly named component—`DogContainer.vue`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个明确命名的组件—`DogContainer.vue`：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The container component has handed down the dog''s name (and any other items)
    as a property into the presentational component. The container component is also
    listening for an event named `woof` on this component and is taking action by
    calling the `woof` method when it has been emitted. Here''s our presentational
    component:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 容器组件已将狗的名字（以及任何其他项目）作为属性传递到展示组件中。容器组件还在此组件上监听名为`woof`的事件，并在发出时调用`woof`方法。这是我们的展示组件：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Our component's concerns are now clearly separated, and we have a clear communication
    path between them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的组件关注点现在清晰地分离开来，并且它们之间有一个明确的通信路径。
- en: 'This composition can be visualized in the following figure:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组合可以在以下图中可视化：
- en: '![](assets/88c31e61-8f44-4bc8-a702-5768fe482873.png)Composing components'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/88c31e61-8f44-4bc8-a702-5768fe482873.png)组合组件'
- en: Prop validation
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Prop验证
- en: 'While we should seek to communicate between child components via props, it''s
    important to be verbose when validating properties by considering types, requirements,
    defaults, and so on. Throughout the book, I''ve used a mix of both techniques
    for brevity, but in production, props should be appropriately validated. Let''s
    start out by looking at some examples of property types:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们应该通过props在子组件之间进行通信，但在验证属性时要考虑类型、要求、默认值等，是很重要的。在整本书中，我为简洁起见使用了这两种技术的混合，但在生产中，props应该得到适当的验证。让我们首先看一些属性类型的示例：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We also have various other types available such as Boolean, function, or any
    other constructor function (that is, type of Person). By accurately defining the
    types we expect, this allows us (and our team) to reason better about what we
    can expect within this component.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有其他各种类型可用，例如布尔值、函数或任何其他构造函数（即Person类型）。通过准确定义我们期望的类型，这使我们（和我们的团队）更好地理解我们可以在这个组件中期望什么。
- en: 'At the same time, we can also ensure that props are required. This should be
    done where necessary, allowing us to ensure that whenever the component is used,
    no required props are missing:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们还可以确保props是必需的。这应该在必要时进行，这样我们就可以确保每当组件被使用时，没有缺少必需的props：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We should always seek to give our props default values where possible, as this
    reduces necessary configurations but still allows the component to be customized
    if a developer wants. When dealing with objects and arrays, a function is used
    as a default parameter to avoid issues where instances share the same value.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该始终在可能的情况下为我们的props提供默认值，因为这减少了必要的配置，但仍允许开发人员自定义组件。在处理对象和数组时，函数被用作默认参数，以避免实例共享相同的值的问题。
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can also assign a custom `validator` function for our properties. Let''s
    say that we have a slot `machine` component that is only rendered if the user
    is `18` years or older:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为我们的属性分配一个自定义的“验证器”函数。假设我们有一个插槽“机器”组件，只有在用户年满18岁时才会被渲染：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Understanding reactivity
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解响应性
- en: 'We''ve discussed reactivity and how it can be used in the previous chapters,
    but it''s important to reconsider. When we''re creating reactive data objects
    within Vue, it takes each property and adds appropriate getters/setters using
    `Object.defineProperty`. This allows Vue to handle changes to the object and notifies
    watchers, subsequently updating the component [https://vuejs.org/v2/guide/reactivity.html](https://vuejs.org/v2/guide/reactivity.html).
    This can be visualized like so:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了响应性以及它在之前的章节中如何使用，但重新考虑是很重要的。当我们在Vue中创建响应式数据对象时，它会使用`Object.defineProperty`来获取每个属性并添加适当的getter/setter。这允许Vue处理对象的更改并通知观察者，随后更新组件[https://vuejs.org/v2/guide/reactivity.html](https://vuejs.org/v2/guide/reactivity.html)。可以这样来可视化：
- en: '![](assets/19fa61cd-d221-4b75-9d73-262ea5d107a8.png)Visualizing Reactivity'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/19fa61cd-d221-4b75-9d73-262ea5d107a8.png)可视化响应性'
- en: 'This means that any property defined in the data option is automatically reactive.
    Here''s an example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在数据选项中定义的任何属性都会自动变为响应式。这里有一个例子：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `name` property is reactive inside this Vue instance, but if we were to
    add another property outside of the Vue instance, this would not be reactive.
    Let''s take a look at an example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Vue实例中，`name`属性是响应式的，但如果我们在Vue实例之外添加另一个属性，那么它就不会是响应式的。让我们看一个例子：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Our `groceries` component has an items array that contains various objects.
    Every object has a quantity apart from the `Bananas` object, but we'd like to
    set the quantity for this. When using `v-for` it's important to include `v-bind:key`
    (or the shorthand `:key`) as it acts as a unique identifier for each item and
    by doing so allows for reuse and reordering of each node. Whilst `key` may be
    an attribute for `v-for` keep in mind it does have other use case scenarios.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`groceries`组件有一个包含各种对象的items数组。每个对象都有一个数量，除了`香蕉`对象，但我们想为其设置数量。在使用`v-for`时，包含`v-bind:key`（或简写为`:key`）是很重要的，因为它作为每个项目的唯一标识符，从而允许重用和重新排序每个节点。虽然`key`可能是`v-for`的属性，但请记住它还有其他用例场景。
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If we then head over to our browser, and proceed to use the dev tools to access
    the `console` we can see that the quantity has been set to hold a value for our
    object.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们转到浏览器，并使用开发工具访问`控制台`，我们可以看到数量已经被设置为保存我们对象的值。
- en: '![](assets/798a236b-ab31-40b6-9a58-52bccc0adba1.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/798a236b-ab31-40b6-9a58-52bccc0adba1.png)'
- en: 'Note how there are reactive getters and setters for the quantity objects that
    contain quantity when defined inside the data object. Adding a property to the
    items after the fact means Vue doesn''t add the appropriate getters/setters. If
    we wanted to do this, we''d have to use `Vue.set` instead:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当在数据对象中定义包含数量的数量对象时，会有响应式的getter和setter。在事后向items添加属性意味着Vue不会添加适当的getter/setter。如果我们想要这样做，我们必须使用`Vue.set`：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This time, there are getters/setters for every property inside our instance:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们的实例中的每个属性都有getter/setter：
- en: '![](assets/19cca632-7a91-4a97-baad-a18ac0e6a363.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/19cca632-7a91-4a97-baad-a18ac0e6a363.png)'
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we looked at anti-patterns and patterns, and we have expanded
    our knowledge as to not only what they are, but also when it is appropriate to
    use them to coincide with best practices. Not only that, we also reviewed a lot
    of the concepts that we learned throughout the book in this chapter, along with
    considering some new ideas and techniques of what can be used going forward.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了反模式和模式，并且我们扩展了我们的知识，不仅知道它们是什么，还知道何时适合使用它们以符合最佳实践。不仅如此，我们还在本章中回顾了我们在整本书中学到的许多概念，同时考虑了一些新的想法和技术，可以在未来使用。
- en: Reflecting on the previous chapters, we can look back and see how much ground
    we've covered. Practicing the techniques covered in this book will allow you to
    create scalable applications with Vue.js and build on what you've learned. Another
    important thing to remember is that **web development is always evolving**, the
    amount of *practical applications* for Vue continues to grow and *so should you*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾之前的章节，我们可以回顾过去，看到我们已经覆盖了多少内容。实践本书中涵盖的技术将使您能够使用Vue.js创建可扩展的应用程序，并建立在您所学到的基础上。另一件重要的事情要记住的是，**web开发一直在不断发展**，Vue的*实际应用*数量不断增长，*你也应该如此*。
- en: What next? Try new things! Build new projects, attend Vue.js meetings and conferences
    - find new ways of applying your skills to teach others. Not only will you have
    a positive impact on others, but you'll reaffirm your skills as a developer.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来呢？尝试新事物！建立新项目，参加Vue.js的会议和会议 - 找到新的方式来运用你的技能来教别人。你不仅会对他人产生积极影响，而且会重新确认自己作为开发者的技能。
