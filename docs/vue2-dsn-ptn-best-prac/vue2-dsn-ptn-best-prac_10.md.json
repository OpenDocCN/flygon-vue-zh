["```js\n# Create a new Vue project\n**$ vue init webpack vue-testing** ? Project name vue-testing\n? Project description Various examples of testing Vue.js applications\n? Author Paul Halliday <hello@paulhalliday.io>\n? Vue build runtime\n? Install vue-router? Yes\n? Use ESLint to lint your code? Yes\n? Pick an ESLint preset Airbnb\n? Set up unit tests Yes\n? Pick a test runner jest\n? Setup e2e tests with Nightwatch? No\n? Should we run `npm install` for you after the project has been create\nd? (recommended) npm\n\n# Navigate to directory\n$ cd vue-testing\n\n# Run application\n$ npm run dev\n```", "```js\n// Importing Vue and the HelloWorld component\nimport Vue from 'vue';\nimport HelloWorld from '@/components/HelloWorld';\n\n// 'describe' is a function used to define the 'suite' of tests (i.e.overall context).\ndescribe('HelloWorld.vue', () => {\n\n  //'it' is a function that allows us to make assertions (i.e. test \n  true/false)\n  it('should render correct contents', () => {\n    // Create a sub class of Vue based on our HelloWorld component\n    const Constructor = Vue.extend(HelloWorld);\n\n    // Mount the component onto a Vue instance\n    const vm = new Constructor().$mount();\n\n    // The h1 with the 'hello' class' text should equal 'Welcome to \n   Your Vue.js App'\n    expect(vm.$el.querySelector('.hello h1').textContent).toEqual(\n      'Welcome to Your Vue.js App',\n    );\n  });\n});\n```", "```js\n# Create a new Vue project\n$ vue init webpack-simple vue-test-jest\n\n# Navigate to directory\n$ cd vue-test-jest\n\n# Install dependencies\n$ npm install\n\n# Install Jest and vue-test-utils\n$ npm install jest vue-test-utils --save-dev\n\n# Run application\n$ npm run dev\n```", "```js\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```", "```js\nnpm install --save-dev babel-jest vue-jest\n```", "```js\n\"jest\": {\n  \"moduleNameMapper\": {\n    \"^@/(.*)$\": \"<rootDir>/src/$1\"\n  },\n  \"moduleFileExtensions\": [\n    \"js\",\n    \"vue\"\n  ],\n  \"transform\": {\n    \"^.+\\\\.js$\": \"<rootDir>/node_modules/babel-jest\",\n    \".*\\\\.(vue)$\": \"<rootDir>/node_modules/vue-jest\"\n  }\n}\n```", "```js\n{\n  \"presets\": [[\"env\", { \"modules\": false }], \"stage-3\"],\n  \"env\": {\n    \"test\": {\n      \"presets\": [[\"env\", { \"targets\": { \"node\": \"current\" } }]]\n    }\n  }\n}\n```", "```js\n<template>\n  <div>\n    <h1>Todo List</h1>\n    <ul>\n      <li v-for=\"todo in todos\" v-bind:key=\"todo.id\">\n        {{todo.id}}. {{todo.name}}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      todos: [\n        { id: 1, name: 'Wash the dishes' },\n        { id: 2, name: 'Clean the car' },\n        { id: 3, name: 'Learn about Vue.js' },\n      ],\n    };\n  },\n};\n</script>\n\n<style>\nul,\nli {\n  list-style: none;\n  margin-left: 0;\n  padding-left: 0;\n}\n</style>\n```", "```js\nimport Vue from 'vue';\nimport Router from 'vue-router';\nimport TodoList from '../components/TodoList';\n\nVue.use(Router);\n\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'TodoList',\n      component: TodoList,\n    },\n  ],\n});\n```", "```js\n$ npm install vue-router --save-dev\n```", "```js\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router';\n\nnew Vue({\n  el: '#app',\n  router,\n  render: h => h(App)\n})\n```", "```js\n<template>\n  <div id=\"app\">\n    <router-view/>\n  </div>\n</template>\n```", "```js\nimport { mount } from 'vue-test-utils';\nimport TodoList from '../TodoList';\n```", "```js\ndescribe('TodoList.vue', () => {\n\n});\n```", "```js\ndescribe('TodoList.vue', () => {\n // Vue instance can be accessed at wrapper.vm\n const wrapper = mount(TodoList);\n});\n```", "```js\ndescribe('TodoList.vue', () => {\n  const todos = [{ id: 1, name: 'Wash the dishes' }];\n  const wrapper = mount(TodoList);\n\n  it('should contain a list of Todo items', () => {\n    expect(wrapper.vm.todos).toContainEqual(todos[0]);\n  });\n});\n```", "```js\n\"scripts\": {\n \"test:watch\": \"jest --watchAll\"\n}\n```", "```js\ndescribe('TodoList.vue', () => {\n  it('should contain a list of Todo items', () => {\n    const todos = [{ id: 1, name: 'Wash the dishes' }];\n    const wrapper = mount(TodoList, {\n      data: { todos },\n    });\n\n    // Find the list items on the page\n    const liWrapper = wrapper.find('li').text();\n\n    // List items should match the todos item in data\n    expect(liWrapper).toBe(todos[0].name);\n  });\n});\n```", "```js\n<template>\n  <li>{{todo.name}}</li>\n</template>\n\n<script>\nexport default {\n  props: ['todo'],\n};\n</script>\n```", "```js\n<template>\n  <div>\n    <h1>TodoList</h1>\n    <ul>\n      <TodoItem v-for=\"todo in todos\" v-bind:key=\"todo.id\" \n      :todo=\"todo\">{{todo.name}}</TodoItem>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport TodoItem from './TodoItem';\n\nexport default {\n  components: {\n    TodoItem,\n  },\n  // Omitted\n}\n```", "```js\nimport { mount } from 'vue-test-utils';\nimport TodoList from '../TodoList';\nimport TodoItem from '../TodoItem';\n\ndescribe('TodoList.vue', () => {\n  it('should contain a list of Todo items', () => {\n    const todos = [{ id: 1, name: 'Wash the dishes' }];\n    const wrapper = mount(TodoList, {\n      data: { todos },\n    });\n\n    // Find the list items on the page\n    const liWrapper = wrapper.find(TodoItem).text();\n\n    // List items should match the todos item in data\n    expect(liWrapper).toBe(todos[0].name);\n  });\n});\n```", "```js\nimport { mount } from 'vue-test-utils';\nimport TodoItem from '../TodoItem';\n\ndescribe('TodoItem.vue', () => {\n  it('should display name of the todo item', () => {\n    const todo = { id: 1, name: 'Wash the dishes' };\n    const wrapper = mount(TodoItem, { propsData: { todo } });\n\n    // Find the list items on the page\n    const liWrapper = wrapper.find('li').text();\n\n    // List items should match the todos item in data\n    expect(liWrapper).toBe(todo.name);\n  });\n});\n```", "```js\nit('should add an item to the todo list', () => {\n  const wrapper = mount(TodoList);\n  const todos = wrapper.vm.todos;\n  const newTodos = wrapper.vm.addTodo('Go to work');\n  expect(todos.length).toBeLessThan(newTodos.length);\n});\n```", "```js\nexport default {\n  methods: {\n    addTodo(name) {},\n  },\n  // Omitted\n}\n```", "```js\naddTodo(name) {\n  return [...this.todos, { name }]\n},\n```", "```js\n$ npm install uuid\n```", "```js\nit('should add an id to each todo item', () => {\n  const wrapper = mount(TodoList);\n  const todos = wrapper.vm.todos;\n  const newTodos = wrapper.vm.addTodo('Go to work');\n\n  newTodos.map(item => {\n    expect(item.id).toBeTruthy();\n  });\n});\n```", "```js\nimport uuid from 'uuid/v4';\n\nexport default {\n  methods: {\n    addTodo(name) {\n      return [...this.todos, { id: uuid(), name }];\n    },\n  },\n  // Omitted\n};\n```", "```js\n<form @submit.prevent=\"addTodo(todoName)\">\n  <input type=\"text\" v-model=\"todoName\">\n  <button type=\"submit\">Submit</button>\n</form>\n```", "```js\naddTodo(name) {\n this.todos = [...this.todos, { id: uuid(), name }];\n return this.todos;\n},\n```", "```js\n  it('should add an item to the todo list when the button is clicked', () => {\n    const wrapper = mount(TodoList);\n  })\n```", "```js\nit('should add an item to the todo list when the button is clicked', () => {\n const wrapper = mount(TodoList);\n wrapper.find('form').trigger('submit', 'Clean the car');\n\n const todos = wrapper.vm.todos;\n\n expect(todos.length).toBe(1);\n})\n```", "```js\nit('should call addTodo when form is submitted', () => {\n  const wrapper = mount(TodoList);\n  const spy = jest.spyOn(wrapper.vm, 'addTodo');\n\n  wrapper.find('form').trigger('submit', 'Clean the car');\n\n  expect(wrapper.vm.addTodo).toHaveBeenCalled();\n});\n```", "```js\n<template>\n  <form @submit.prevent=\"addTodo(todoName)\">\n    <input type=\"text\" v-model=\"todoName\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      todoName: ''\n    } \n  },\n  methods: {\n    addTodo(name) {\n      this.$emit('addTodo', name);\n    }\n  }\n}\n</script>\n```", "```js\nimport { mount } from 'vue-test-utils';\nimport TodoInput from '../TodoInput';\n\ndescribe('TodoInput.vue', () => {\n  it('should fire an event named addTodo with todo name', () => {\n    const mock = jest.fn()\n    const wrapper = mount(TodoInput);\n\n    wrapper.vm.$on('addTodo', mock)\n    wrapper.vm.addTodo('Clean the car');\n\n    expect(mock).toBeCalledWith('Clean the car')\n  })\n});\n```", "```js\n<template>\n  <div>\n    <h1>TodoList</h1>\n\n    <TodoInput @addTodo=\"addTodo($event)\"></TodoInput>\n\n    <ul>\n      <TodoItem v-for=\"todo in todos\" v-bind:key=\"todo.id\" :todo=\"todo\">{{todo.name}}</TodoItem>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport uuid from 'uuid/v4';\n\nimport TodoItem from './TodoItem';\nimport TodoInput from './TodoInput';\n\nexport default {\n  components: {\n    TodoItem,\n    TodoInput\n  },\n  data() {\n    return {\n      todos: [],\n      todoName: ''\n    };\n  },\n  methods: {\n    addTodo(name) {\n      this.todos = [...this.todos, { id: uuid(), name }];\n      return this.todos;\n    },\n  },\n};\n</script>\n<style>\nul,\nli {\n  list-style: none;\n  margin-left: 0;\n  padding-left: 0;\n}\n</style>\n```", "```js\nimport TodoInput from '../TodoInput';\nit('should call addTodo when the addTodo event happens', () => {\n  const wrapper = mount(TodoList);\n\n  wrapper.vm.addTodo = jest.fn();\n  wrapper.find(TodoInput).vm.$emit('addTodo', 'Clean the car');\n\n  expect(wrapper.vm.addTodo).toBeCalledWith('Clean the car');\n})\n```", "```js\nit('adds an item to the todolist when the addTodo event happens', () => {\n const wrapper = mount(TodoList);\n wrapper.find(TodoInput).vm.$emit('addTodo', 'Clean the car');\n const todos = wrapper.vm.todos;\n expect(todos.length).toBe(1);\n});\n```", "```js\n# Clone the repository\n$ git clone https://github.com/ChangJoo-Park/vue-wallaby-webpack-template\n\n# Change directory\n$ cd vue-wallaby-webpack-template\n\n# Install dependencies\n$ npm install\n\n# At the time of writing this package is missing eslint-plugin-node\n$ npm install eslint-plugin-node\n\n# Run in browser\n$ npm run dev\n```"]