- en: Server-Side Rendering with Nuxt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nuxt进行服务器端渲染
- en: Nuxt is inspired by a popular React project named Next.js, built by Zeit. Both
    projects have the aim of creating applications that allow for a better development
    experience using the latest ideologies, tools, and techniques. Nuxt recently entered
    version 1.x and onward, meaning that it should be considered stable to use for
    production websites.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt受到一个名为Next.js的流行React项目的启发，由Zeit构建。这两个项目的目标都是创建应用程序，利用最新的思想、工具和技术，提供更好的开发体验。Nuxt最近进入了1.x版本及更高版本，这意味着它应该被认为是稳定的，可以用于生产网站。
- en: We'll be taking a look at Nuxt in more detail throughout this chapter, and if
    you find it useful, it may become the default way that you create Vue applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更详细地了解Nuxt，如果你觉得它有用，它可能会成为你创建Vue应用程序的默认方式。
- en: 'In this chapter, we''ill cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Investigating Nuxt and understanding the benefits of using it
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查Nuxt并理解使用它的好处
- en: Creating an application with Nuxt
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nuxt创建应用程序
- en: Using Nuxt middleware
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nuxt中间件
- en: Using layouts to define content
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用布局定义内容
- en: Understanding routing within Nuxt
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Nuxt中理解路由
- en: Building a Vue project with Server-Side Rendering
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用服务器端渲染构建Vue项目
- en: Building a Vue project as a static site
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Vue项目构建为静态站点
- en: Nuxt
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nuxt
- en: Nuxt introduces the concept of Universal Vue Applications, as it allows us to
    take advantage of **Server-Side Rendering** (**SSR**) with ease. At the same time,
    Nuxt also gives us the ability to generate static sites, which means that the
    content is rendered as HTML, CSS, and JS files without going backward and forward
    from the server.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt引入了通用Vue应用程序的概念，因为它使我们能够轻松地利用服务器端渲染（SSR）。与此同时，Nuxt还赋予我们生成静态站点的能力，这意味着内容以HTML、CSS和JS文件的形式呈现，而不需要来回从服务器传输。
- en: That's not all—Nuxt handles route generation and doesn't detract from any core
    features of Vue. Let's create a Nuxt project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这还不是全部——Nuxt处理路由生成，并且不会减少Vue的任何核心功能。让我们创建一个Nuxt项目。
- en: Creating a Nuxt project
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Nuxt项目
- en: 'We can use Vue CLI to create a new Nuxt project using the starter template.
    This provides us with a barebones Nuxt project and saves us from having to configure
    everything manually. We''ll be creating a "recipe list" application named "Hearty
    Home Cooking" that uses a REST API to get category and recipe names. Run the following
    command in your Terminal to create a new Nuxt project:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Vue CLI使用启动模板创建一个新的Nuxt项目。这为我们提供了一个简单的Nuxt项目，并避免了手动配置的麻烦。我们将创建一个名为“丰盛家常烹饪”的“食谱列表”应用程序，该应用程序使用REST
    API获取类别和食谱名称。在终端中运行以下命令创建一个新的Nuxt项目：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding steps are quite similar to what we've come to expect when creating
    a new Vue project, instead, we can simply use the Nuxt repository and starter
    template to generate a project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤与创建新的Vue项目时所期望的非常相似，相反，我们可以简单地使用Nuxt存储库和启动模板来生成一个项目。
- en: 'If we take a look at our `package.json`, you''ll see that we don''t have a
    list of production dependencies; instead, we just have one, `nuxt`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看我们的`package.json`，你会发现我们没有生产依赖项的列表；相反，我们只有一个`nuxt`：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is important, as this means we don't have to manage the version of Vue
    or worry about other compatible packages since we only need to update the version
    of `nuxt`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为这意味着我们不必管理Vue的版本或担心其他兼容的包，因为我们只需要更新`nuxt`的版本。
- en: Directory structure
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录结构
- en: 'If we open our project up inside the editor, we''ll note that we have substantially
    more folders than our previous Vue applications. I''ve compiled a table that outlines
    what they mean:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在编辑器中打开我们的项目，我们会注意到我们比以前的Vue应用程序有更多的文件夹。我编制了一张表格，概述了它们的含义：
- en: '| Folder | Description |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹 | 描述 |'
- en: '| `Assets` | Used to store project assets, such as uncompiled images, js, and
    CSS. Uses Webpack loaders to load as modules. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `资产` | 用于存储项目资产，例如未编译的图像、js和CSS。 使用Webpack加载程序作为模块加载。 |'
- en: '| `Components` | Used to store application components. These are not converted
    to routes. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `组件` | 用于存储应用程序组件。 这些不会转换为路由。 |'
- en: '| `Layouts` | Used to create application layouts, such as default, error, or
    other custom layouts. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `布局` | 用于创建应用程序布局，例如默认布局、错误布局或其他自定义布局。 |'
- en: '| `Middleware` | Used to define custom application middleware. This allows
    us to run the custom functionality on different events, such as navigating between
    pages. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `中间件` | 用于定义自定义应用程序中间件。 这允许我们在不同事件上运行自定义功能，例如在页面之间导航。 |'
- en: '| `Pages` | Used to create components (the `.vue` file) that serve as application
    routes. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `页面` | 用于创建组件（`.vue`文件），用作应用程序路由。 |'
- en: '| `Plugins` | Used to register application-wide plugins (that is, with `Vue.use`).
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `插件` | 用于注册应用程序范围的插件（即使用 `Vue.use`）。 |'
- en: '| `Static` | Used to store static files; each item inside this folder is mapped
    to `/*` instead of `/static/*`. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `静态` | 用于存储静态文件；此文件夹中的每个项目都映射到 `/*` 而不是 `/static/*`。 |'
- en: '| `Store` | Used with the Vuex store. Both the standard and module implementations
    of Vuex can be used with Nuxt. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `Store` | 与Vuex存储一起使用。 Nuxt可以与Vuex的标准和模块实现一起使用。 |'
- en: Although this may seem more complex, keep in mind that this helps us separate
    our concerns, and the structure allows Nuxt to handle things such as autoroute
    generation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这可能看起来更复杂，但请记住，这有助于我们分离关注点，结构允许Nuxt处理诸如自动生成路由之类的事情。
- en: Nuxt configuration
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nuxt配置
- en: Let's add some custom links to our project so that we can take advantage of
    CSS libraries, fonts, and more. Let's add Bulma to our project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向项目添加一些自定义链接，以便我们可以利用CSS库、字体等。 让我们向项目添加Bulma。
- en: 'Bulma is a CSS framework that allows us to build applications with Flexbox
    and lets us take advantage of many premade components. We can add it (and other
    external CDN files) to our project by navigating to `nuxt.config.js` and adding
    a new object to our `link` object within the `head` object, like so:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Bulma是一个CSS框架，允许我们使用Flexbox构建应用程序，并让我们利用许多预制组件。 我们可以通过转到`nuxt.config.js`并在`head`对象内的`link`对象中添加一个新对象来将其添加到我们的项目中，如下所示：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we then use the developer tools to check the head inside of our HTML document,
    you''ll note that Bulma has been added to our project. If we head over to our
    developer tools we can see that it does indeed use Bulma within the project:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用开发人员工具来检查HTML文档中的头部，您会注意到Bulma已添加到我们的项目中。 如果我们转到开发人员工具，我们可以看到它确实在项目中使用Bulma：
- en: '![](assets/16b5d5fe-0de0-4cc0-9c96-6699a39fb3cc.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/16b5d5fe-0de0-4cc0-9c96-6699a39fb3cc.png)'
- en: Navigation
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航
- en: 'Each time we create a new `.vue` file inside the pages directory, we''re given
    a new route for our application. This means that any time we want to create a
    new route, we just create a new folder with the route name and the rest is handled
    by Nuxt. Given that we have default `index.vue` in our `pages` folder, the routes
    initially look like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们在页面目录中创建一个新的`.vue`文件，我们都会为我们的应用程序创建一个新的路由。 这意味着每当我们想要创建一个新的路由时，我们只需创建一个带有路由名称的新文件夹，其余工作由Nuxt处理。
    鉴于我们的`pages`文件夹中有默认的`index.vue`，路由最初看起来像这样：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we then add a `categories` folder with an `index.vue` inside, Nuxt would
    generate the following routes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们然后添加一个带有`index.vue`的`categories`文件夹，Nuxt将生成以下路由：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we want to take advantage of dynamic route parameters, such as an `id`,
    we can make a component named `_id.vue` inside the `categories` folder. This automatically
    creates a route with the `id` parameter, allowing us to take action based on a
    user''s selection:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想利用动态路由参数，比如`id`，我们可以在`categories`文件夹内创建一个名为`_id.vue`的组件。这将自动创建一个带有`id`参数的路由，允许我们根据用户的选择采取行动：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Navigating between routes
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在路由之间导航
- en: How do we navigate between routes with Nuxt? Well, we do so using the `nuxt-link`
    component, of course!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何使用Nuxt在路由之间导航？嗯，当然是使用`nuxt-link`组件！
- en: This is similar to the `router-link` component that's used when navigating between
    links with a standard Vue.js application (and as of writing, it is identical to
    it), but this is wrapped with the `nuxt-link` component to take advantage of features,
    such as prefetching, in the future.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于在标准Vue.js应用程序中导航链接时使用的`router-link`组件（截至目前为止，它与之相同），但这是用`nuxt-link`组件包装的，以利用未来的预取等功能。
- en: Layouts
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: We can create custom layouts inside our Nuxt project. This allows us to change
    the way our pages are arranged and also allows us to add commonalities, such as
    static navigation bars and footers. Let's use Bulma to create a new navigation
    bar that allows us to navigate between multiple components within our site.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Nuxt项目中创建自定义布局。这允许我们更改页面的排列方式，还允许我们添加共同点，比如静态导航栏和页脚。让我们使用Bulma创建一个新的导航栏，以便在我们的站点中的多个组件之间导航。
- en: 'Inside the `components` folder, make a new file called `NavigationBar.vue`
    and give it the following markup:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在`components`文件夹中，创建一个名为`NavigationBar.vue`的新文件，并给它以下标记：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We then need to add this to our default layout inside `layouts`/`default.vue`.
    I''ve also enclosed the `nuxt` tag (that is, our main `router-view`) with appropriate
    Bulma classes to center our content:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将这个添加到我们默认布局中`layouts`/`default.vue`。我还用适当的Bulma类将`nuxt`标签（也就是我们的主`router-view`）包起来，以使我们的内容居中：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we then head to the browser, we have an application that looks like this,
    reflecting our code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们然后转到浏览器，我们会看到一个反映我们代码的应用程序：
- en: '![](assets/8a7ca3de-b6fa-4ec9-86cf-b9ddb618282e.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8a7ca3de-b6fa-4ec9-86cf-b9ddb618282e.png)'
- en: The Mock REST API
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟REST API
- en: 'Before we create the components to display our data, let''s mock out a REST
    API with JSON Server. To do this, we''ll need a file named `db.json` inside the
    root of our project, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建用于显示我们数据的组件之前，让我们用JSON Server模拟一个REST API。为此，我们需要在项目的根目录下创建一个名为`db.json`的文件，如下所示：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, ensure that you have JSON Server installed on your machine by running
    the following command in the Terminal:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，请确保您在终端中运行以下命令，以确保您的机器上安装了JSON Server：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can then run the server on the `3001` port (or any port other than `3000`
    because this is what Nuxt runs on) by typing the following command in the Terminal:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过在终端中输入以下命令，我们可以在`3001`端口（或除`3000`之外的任何端口，因为这是Nuxt运行的端口）上运行服务器：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will watch for any changes to our database and update the API accordingly.
    We'll then be able to make requests to `localhost:3000/recipes/:id` and `localhost:3000/categories/:id`.
    In Nuxt, we can do this with `axios` and `asyncData`; let's take a look at that
    next.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将监视我们数据库的任何更改，并相应地更新API。然后我们就能够请求`localhost:3000/recipes/:id`和`localhost:3000/categories/:id`。在Nuxt中，我们可以使用`axios`和`asyncData`来做到这一点；让我们接下来看看。
- en: asyncData
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: asyncData
- en: We can use the `asyncData` method to resolve data for our component before the
    component is loaded, essentially requesting data on the server side and then merging
    the results with the data object inside our component instance when loaded. This
    makes it a great place to add asynchronous actions, such as getting data from
    a REST API.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`asyncData`方法在组件加载之前解析组件的数据，实质上是在服务器端请求数据，然后在加载时将结果与组件实例内的数据对象合并。这使得它成为一个很好的地方来添加异步操作，比如从REST
    API获取数据。
- en: 'We''ll use the `axios` library to create HTTP requests, so we''ll need to ensure
    that we''ve installed it. Run the following from your Terminal:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`axios`库来创建HTTP请求，因此我们需要确保已经安装了它。在终端中运行以下命令：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, inside `pages`/`index.vue`, we will get a list of categories to show
    the user when our application starts. Let''s do that inside `asyncData`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`pages`/`index.vue`中，当我们的应用程序启动时，我们将获取一个类别列表来展示给用户。让我们在`asyncData`中做到这一点：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Categories
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类别
- en: 'As `asyncData` is merged with our Vue instance''s data object, we can then
    access the data inside of our view. Let''s create a `category` component that
    displays a category for each category inside our API:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`asyncData`与我们的Vue实例的数据对象合并，我们可以在视图中访问数据。让我们创建一个`category`组件，用于显示API中每个类别的类别：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding code, we used Bulma to take the category information and placed
    it on a card. We also used a `computed` property to generate the prop for the
    `nuxt-link` component. This allows us to navigate the user to a list of items
    based on category `id`. We can then add this to our root `pages/index.vue` file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用Bulma来获取类别信息并将其放在卡片上。我们还使用了一个`computed`属性来生成`nuxt-link`组件的prop。这使我们能够根据类别`id`导航用户到项目列表。然后我们可以将其添加到我们的根`pages/index.vue`文件中：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As a result, this is what our front page now looks like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这就是我们的首页现在的样子：
- en: '![](assets/5f24ca53-a9a5-439a-ac2e-7a886237e951.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5f24ca53-a9a5-439a-ac2e-7a886237e951.png)'
- en: Category detail
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类详情
- en: 'In order to navigate the user to the `category` detail page, we''ll need to
    create a `_id.vue` file inside the `categories` folder. This will give us access
    to the ID parameter inside this page. This process is similar to before, except
    that now we''ve also added a `validate` function that checks whether the `id`
    parameter exists:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将用户导航到`category`详细页面，我们需要在`categories`文件夹中创建一个`_id.vue`文件。这将使我们能够在此页面内访问ID参数。这个过程与之前类似，只是现在我们还添加了一个`validate`函数来检查`id`参数是否存在：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `validate` function ensures that the parameter exists for this route, and
    if it doesn't exist, it will navigate the user to an error (`404`) page. Later
    on in this chapter, we'll get the hang of how to create our own error pages.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate`函数确保该路由存在参数，如果不存在，将会将用户导航到错误（`404`）页面。在本章的后面，我们将学习如何创建自己的错误页面。'
- en: 'We now have a `recipes` array inside our `data` object that contains recipes
    based on the `categoryId` that the user selected. Let''s create a `Recipe.vue`
    component inside the components folder that displays recipe information:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在`data`对象内有一个基于用户选择的`categoryId`的`recipes`数组。让我们在组件文件夹内创建一个`Recipe.vue`组件，用于显示食谱信息：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once again, we''re using Bulma for styling and are able to pass a recipe into
    this component as a prop. Let''s iterate over all recipes inside our `_id.vue`
    component:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用Bulma进行样式设置，并且能够将一个食谱作为prop传递给这个组件。让我们在`_id.vue`组件内迭代所有的食谱：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Whenever we select a category, we now get the following page, which shows the
    selected recipes:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们选择一个类别，现在我们会得到以下页面，显示所选的食谱：
- en: '![](assets/96e218fc-6c83-4f8e-ad69-c9f6efe3e9a2.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/96e218fc-6c83-4f8e-ad69-c9f6efe3e9a2.png)'
- en: Error page
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误页面
- en: What if the user navigates to a route that doesn't exist or there's an error
    in our application? Well, we certainly could take advantage of Nuxt's default
    error page, or we could create our own.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户导航到一个不存在的路由或者我们的应用程序出现错误怎么办？嗯，我们当然可以利用Nuxt的默认错误页面，或者我们可以创建自己的错误页面。
- en: 'We can do that by creating `error.vue` inside the `layouts` folder. Let''s
    go ahead and do that and display an error message if the status code is `404`;
    if not, we''ll display a generic error message:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在`layouts`文件夹内创建`error.vue`来实现这一点。让我们继续做这个，并在状态码为`404`时显示错误消息；如果不是，我们将显示一个通用的错误消息：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we then navigate to `locahost:3000/e`, you''ll be navigated to our error
    page. Let''s take a look at the error page:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们然后导航到`localhost:3000/e`，您将被导航到我们的错误页面。让我们来看看错误页面：
- en: '![](assets/aa972259-99e1-47fb-a4f0-1f53424f8e5e.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aa972259-99e1-47fb-a4f0-1f53424f8e5e.png)'
- en: Plugins
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件
- en: 'We''ll need the ability to add recipes to our application; as adding new recipes
    will require a form and some input(s) in order to appropriately validate the form,
    we''ll use `Vuelidate`. If you remember from previous chapters, we can add `Vuelidate`
    and other plugins with `Vue.use`. The process is similar when using Nuxt, but
    requires an extra step. Let''s install `Vuelidate` by running the following command
    in the Terminal:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要能够向我们的应用程序添加配方；因为添加新配方将需要一个表单和一些输入以适当验证表单，我们将使用`Vuelidate`。如果您还记得之前的章节，我们可以使用`Vue.use`添加`Vuelidate`和其他插件。在使用Nuxt时，该过程类似，但需要额外的步骤。让我们通过在终端中运行以下命令来安装`Vuelidate`：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Inside our plugins folder, make a new file named `Vuelidate.js`. Inside this
    file, we can import `Vue` and `Vuelidate` and add the plugin:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的插件文件夹内，创建一个名为`Vuelidate.js`的新文件。在这个文件内，我们可以导入`Vue`和`Vuelidate`并添加插件：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can then update `nuxt.config.js` to add the plugins array, which points
    toward our `Vuelidate` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以更新`nuxt.config.js`以添加指向我们的`Vuelidate`文件的插件数组：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Inside the `build` object, we''ll also add `''vuelidate''` to the vendor bundle
    so that it''s added to our application:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在`build`对象内，我们还将`'vuelidate'`添加到供应商包中，以便将其添加到我们的应用程序中：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Adding recipes
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加配方
- en: Let's make a new route under `pages/Recipes/new.vue`; this will then generate
    a route to `localhost:3000/recipes/new`. Our implementation will be simple; for
    example, having recipe steps as `string` may not be the best idea for production,
    but it allows us to achieve our goal(s) in development.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`pages/Recipes/new.vue`下创建一个新的路由；这将生成一个到`localhost:3000/recipes/new`的路由。我们的实现将是简单的；例如，将食谱步骤作为`string`可能不是生产的最佳选择，但它允许我们在开发中实现我们的目标。
- en: 'We can then add the appropriate data object and validation(s) with `Vuelidate`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`Vuelidate`添加适当的数据对象和验证：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next up, we can add the appropriate template, which includes everything from
    validation messages, to contextual classes, and enabling/disabling the `submit`
    button if the form is valid/invalid:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以添加适当的模板，其中包括从验证消息到上下文类的所有内容，并在表单有效/无效时启用/禁用`submit`按钮：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To submit the recipe, we''ll need to make a POST request to our API:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要提交食谱，我们需要向我们的API发出POST请求：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Instead of navigating to the `http://localhost:3000/recipes/new` URL manually,
    let''s add an item to our navigation bar:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 不要手动导航到`http://localhost:3000/recipes/new` URL，让我们在导航栏中添加一个项目：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here''s what our page now looks like:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的页面是这样的：
- en: '![](assets/86996268-e888-47f6-98b1-d0ba3bdb3569.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/86996268-e888-47f6-98b1-d0ba3bdb3569.png)'
- en: Although we haven't used the recipe steps in our application, I've included
    it in this example as a feature you may want to include yourself.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们还没有在应用程序中使用食谱步骤，但我在这个示例中包含了它作为您可能想要自己包含的功能。
- en: Transitions
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换
- en: 'When navigating between pages, Nuxt makes adding transitions super simple.
    Let''s add a `transition` to each navigation action by adding custom CSS. Add
    a file named `transition.css` into the `assets` folder, and we''ll hook into the
    various different page states:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面之间导航时，Nuxt使添加过渡效果变得非常简单。让我们通过添加自定义CSS来为每个导航操作添加一个`transition`。将名为`transition.css`的文件添加到`assets`文件夹中，然后我们将钩入到不同页面状态中：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After adding the file, we''ll need to tell Nuxt that we want to use it as a
    `.css` file. Add the following code to your `nuxt.config.js`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 添加文件后，我们需要告诉Nuxt我们要将其用作`.css`文件。将以下代码添加到您的`nuxt.config.js`中：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, we can navigate between any page and we'll have a page transition each
    time.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在任何页面之间导航，每次都会有页面过渡效果。
- en: Building for production
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生产构建
- en: Nuxt offers us a variety of ways to build our project for production, such as
    server-rendered (Universal), static, or **Single Page Application** (**SPA**)
    mode. All of these offer different pros and cons, depending on the use case.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt为我们提供了多种构建项目用于生产的方式，例如服务器渲染（Universal）、静态或单页应用程序（SPA）模式。所有这些都根据用例提供了不同的优缺点。
- en: 'By default, our project is in server-rendered (Universal) mode and can be built
    for production by running the following command in the Terminal:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们的项目处于服务器渲染（Universal）模式，并且可以通过在终端中运行以下命令来进行生产构建：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We then get a `dist` folder inside the `.nuxt` folder within our project; this
    contains the built end result(s) of our application, which can be deployed to
    a hosting provider:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在项目的`.nuxt`文件夹内得到一个`dist`文件夹；其中包含我们应用程序的构建结果，可以部署到托管提供商：
- en: '![](assets/0131d6b7-891b-4da5-812e-12653f451922.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0131d6b7-891b-4da5-812e-12653f451922.png)'
- en: Static
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态
- en: 'In order to build our project in static mode, we can run the following command
    in the Terminal:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以静态模式构建我们的项目，我们可以在终端中运行以下命令：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will build a static site, which can then be deployed to a static hosting
    provider such as Firebase. This is how the Terminal should appear:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建一个静态站点，然后可以部署到诸如Firebase之类的静态托管提供商。终端应该如下所示：
- en: '![](assets/1e379bd4-7de1-4bdb-8ef9-6371ba5eae25.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1e379bd4-7de1-4bdb-8ef9-6371ba5eae25.png)'
- en: SPA mode
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SPA模式
- en: 'To build our project in the SPA mode, we will need to add the following key
    value to `nuxt.config.js`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要以SPA模式构建我们的项目，我们需要将以下键值添加到`nuxt.config.js`中：
- en: '[PRE31]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can then build our project once again, but this time it''ll be built using
    SPA mode:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以再次构建我们的项目，但这次将使用SPA模式构建：
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Our command Terminal should now look like the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的命令终端现在应该如下所示：
- en: '![](assets/6eba689d-7d87-43a7-b6e7-27c62a6e865f.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6eba689d-7d87-43a7-b6e7-27c62a6e865f.png)'
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed how to use Nuxt to create server-rendered Vue
    applications. We also discussed just *how easy* it is to create new routes and
    how to add custom CSS libraries inside our project. Furthermore, we covered how
    we can add transitions to our pages to make it interesting when switching between
    routes. We also covered how we can build different versions of our project, depending
    on whether we want a universal, static, or SPA application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何使用Nuxt创建服务器渲染的Vue应用程序。我们还讨论了创建新路由有多么容易，以及如何在项目中添加自定义CSS库。此外，我们还介绍了如何在页面中添加过渡效果，使在路由之间切换时更加有趣。我们还介绍了如何根据需要构建项目的不同版本，无论是想要一个通用、静态还是SPA应用程序。
- en: In the final chapter, we'll be discussing common anti-patterns within Vue.js
    and how to avoid them. This is paramount to writing consistent software that can
    survive the test of time.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将讨论Vue.js中常见的反模式以及如何避免它们。这对于编写能经受时间考验的一致性软件至关重要。
