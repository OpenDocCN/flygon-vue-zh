["```js\nnpm install vue-cli -g\n```", "```js\nvue init webpack-simple my-vue-project\n```", "```js\n// my-module.js\nexport default function add(x, y) {\n return x + y\n}\n```", "```js\n// my-other-module.js\nimport { add } from './my-other-module'\n\nadd(1, 2) // 3\n```", "```js\nmodule: {\n rules: [{\n  test: /\\.vue$/,\n  loader: 'vue-loader',\n  options: {\n   loaders: {}\n  // other vue-loader options go here\n }\n}]\n```", "```js\n# New Vue Project\nvue init simple vue-modules\n\n# Navigate to Directory\ncd vue-modules\n\n# Create App and Counter file\ntouch app.js\ntouch counter.js\n```", "```js\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n <title>Vue.js Modules - Counter</title>\n <script src=\"https://unpkg.com/vue\"></script>\n</head>\n<body>\n <div id=\"app\">\n </div>\n <script type=\"module\" src=\"counter.js\"></script>\n <script type=\"module\" src=\"app/app.js\"></script>\n</body>\n</html>\n```", "```js\nexport default {\n template: `\n  <div>\n   <h1>Counter: {{counter}}</h1>\n   <button @click=\"increment\">Increment</button>\n   <button @click=\"decrement\">Decrement</button>\n  </div>`,\n data() {\n  return {\n   counter: 1\n  };\n },\n methods: {\n  increment() {\n   this.counter++;\n  },\n decrement() {\n   this.counter--;\n  }\n }\n};\n```", "```js\nimport Counter from './counter.js';\n\nconst app = new Vue({\n el: '#app',\n components: {\n  Counter\n },\n template: `<counter></counter>`\n});\n```", "```js\n# New project\nvue init webpack-simple vue-devtools\n\n# Change directory\ncd vue-devtools\n\n# Install dependencies\nnpm install\n\n# Run application\nnpm run dev\n```", "```js\n# Create a new Vue project\nvue init webpack-simple typescript-vue\n\n# Change directory\ncd typescript-vue\n\n# Install dependencies\nnpm install\n```", "```js\n# Install TypeScript and the TypeScript Loader\nnpm install typescript ts-loader --save-dev  \n```", "```js\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n entry: './src/main.ts',\n output: {\n path: path.resolve(__dirname, './dist'),\n publicPath: '/dist/',\n filename: 'build.js'\n },\n module: {\n rules: [\n {\n test: /\\.vue$/,\n loader: 'vue-loader',\n options: {\n loaders: {}\n }\n },\n {\n test: /\\.tsx?$/,\n loader: 'ts-loader',\n exclude: /node_modules/,\n options: {\n appendTsSuffixTo: [/\\.vue$/]\n }\n },\n {\n test: /\\.(png|jpg|gif|svg)$/,\n loader: 'file-loader',\n options: {\n name: '[name].[ext]?[hash]'\n }\n }\n ]\n },\n resolve: {\n extensions: ['.ts', '.js', '.vue'],\n alias: {\n vue$: 'vue/dist/vue.esm.js'\n }\n },\n devServer: {\n historyApiFallback: true,\n noInfo: true\n },\n performance: {\n hints: false\n },\n devtool: '#eval-source-map'\n};\n\nif (process.env.NODE_ENV === 'production') {\n module.exports.devtool = '#source-map';\n // http://vue-loader.vuejs.org/en/workflow/production.html\n module.exports.plugins = (module.exports.plugins || []).concat([\n new webpack.DefinePlugin({\n 'process.env': {\n NODE_ENV: '\"production\"'\n }\n }),\n new webpack.optimize.UglifyJsPlugin({\n sourceMap: true,\n compress: {\n warnings: false\n }\n }),\n new webpack.LoaderOptionsPlugin({\n minimize: true\n })\n ]);\n}\n```", "```js\n{\n \"compilerOptions\": {\n \"lib\": [\"dom\", \"es5\", \"es2015\"],\n \"module\": \"es2015\",\n \"target\": \"es5\",\n \"moduleResolution\": \"node\",\n \"experimentalDecorators\": true,\n \"sourceMap\": true,\n \"allowSyntheticDefaultImports\": true,\n \"strict\": true,\n \"noImplicitReturns\": true\n },\n \"include\": [\"./src/**/*\"]\n}\n```", "```js\n# Install TypeScript helpers\nnpm install vue-class-component --save-dev\n```", "```js\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\n\n@Component({\n template: `\n <div>\n   <input type=\"text\" v-model=\"name\" />\n   <button @click=\"sayHello(name)\">Say Hello!</button>\n</div>\n`\n})\nexport default class App extends Vue {\n name: string = 'Paul';\n\n sayHello(name: string): void {\n   alert(`Hello ${name}`)\n }\n}\n</script>\n```", "```js\n// Omitted\nexport default class App extends Vue {\n name: string = 'Paul';\n\n created() {\n console.log(`Created: Hello ${this.name}`)\n }\n\n mounted() {\n console.log(`Mounted: Hello ${this.name}`);\n }\n}\n```", "```js\n# Install Vue Property Decorator\nnpm install vue-property-decorator --save-dev\n```", "```js\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport { Component, Prop } from 'vue-property-decorator';\n\n// Omitted\n@Component({\n})\nexport default class App extends Vue {\n@Prop({ default: 'Paul Halliday' }) name: string;\n}\n</script>\n```", "```js\nexport default {\n props: {\n name: {\n  type: String,\n  default: 'Paul Halliday'\n  }\n }\n}\n```", "```js\n@Component({\n template: `\n   <div>\n     <input type=\"text\" v-model=\"name\" />\n     <button @click=\"sayHello(name)\">Say Hello!</button>\n     <p>{{nameReversed}}</p>\n   </div>\n `\n})\nexport default class App extends Vue {\n @Prop({ default: 'Paul Halliday' }) name: string;\n\n // Computed values\n get nameReversed() {\n  return this.name.split(\"\").reverse().join(\"\");\n }\n\n sayHello(name: string): void {\n  alert(`Hello ${name}`)\n }\n}\n```", "```js\nexport default {\n computed: {\n  nameReversed() {\n   return this.name.split(\"\").reverse().join(\"\");\n  }\n }\n}\n```", "```js\ndocument.addEventListener('click', event => {\n console.log(event);\n }); \n```", "```js\n# New Vue project\nvue init webpack-simple vue-rxjs\n\n# Change directory\ncd vue-rxjs\n\n# Install dependencies\nnpm install\n\n# Install rxjs and vue-rx\nnpm install rxjs vue-rx\n\n# Run project\nnpm run dev\n```", "```js\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport VueRx from \"vue-rx\";\nimport Rx from \"rxjs\";\n\n// Use the VueRx plugin with the entire RxJS library\nVue.use(VueRx, Rx);\n\nnew Vue({\n el: \"#app\",\n render: h => h(App)\n});\n```", "```js\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport VueRx from \"vue-rx\";\n\n// Import only the necessary modules\nimport { Observable } from \"rxjs/Observable\";\nimport { Subject } from \"rxjs/Subject\"; \n\n// Use only Observable and Subject. Add more if needed.\nVue.use(VueRx, {\nObservable,\nSubject\n});\n\nnew Vue({\nel: \"#app\",\nrender: h => h(App)\n});\n```", "```js\n// Required to create an Observable stream\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\n```", "```js\n// New Observable stream of string array values\nconst people$ = Observable.of(['Paul', 'Katie', 'Bob']);\n```", "```js\nexport default {\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    }\n  },\n  /**\n   * Bind to Observable using the subscriptions object.\n   * Allows us to then access the values of people$ inside of our template.\n   * Similar to the Async pipe within Angular\n   **/\n  subscriptions: {\n    people$\n  }\n}\n```", "```js\n subscriptions() {\n   const people$ = Observable.of(['Paul', 'Katie', 'Bob'])\n   return {\n     people$\n   }\n }\n```", "```js\n<template>\n  <div id=\"app\"> \n    <ul>\n      <li\n        v-for=\"(person,index) in people$\":key=\"index\"> {{person}}\n      </li>\n    </ul>\n  </div>\n</template>\n```", "```js\n/**\n * Outputting the value of this to the console in the global context returns the Window object\n */\nconsole.log(this);\n\n/**\n * When referencing global Window objects, we don't need to refer to them with this, but if we do, we get the same behavior\n */\nalert('Alert one');\nthis.alert('Alert two');\n```", "```js\n/**\n * The context of this changes when we enter another lexical scope, take our Student object example:\n */\nconst Student = {\n firstName: 'Paul',\n lastName: 'Halliday',\n grades: [50, 95, 70, 65, 35],\n getFullName() {\n  return `${this.firstName} ${this.lastName}` \n },\n getGrades() {\n  return this.grades.reduce((accumulator, grade) => accumulator + grade);\n },\n toString() {\n  return `Student ${this.getFullName()} scored ${this.getGrades()}/500`;\n }\n}\n```", "```js\nlet res = document.createTextNode(Student.toString());\nlet heading = document.createElement('h1');\nheading.appendChild(res);\ndocument.body.appendChild(heading);\n```", "```js\n<template>\n <button @click=\"showAlert\">\n Show Alert</button>\n</template>\n\n<script>\nexport default {\n data() {\n  return {\n   message: 'Hello World!',\n  };\n },\n methods: {\n  showAlert() {\n   alert(this.message);\n  },\n },\n};\n</script>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n <title>Vue Data</title>\n <script src=\"https://unpkg.com/vue\"></script>\n</head>\n<body>\n <div id=\"app\">\n  <h1>Name: {{ firstName }}</h1>\n  <input type=\"text\" v-model=\"firstName\">\n </div>\n\n <script>\n const app = new Vue({\n  el: '#app',\n  data: {\n   firstName: 'Paul'\n  }\n });\n </script>\n</body>\n</html>\n```", "```js\n<body>\n <div id=\"app\">\n  <h1>Name: {{ firstName }}</h1>\n  <h1>Name: {{ name }}</h1>\n  <input type=\"text\" v-model=\"firstName\">\n </div>\n\n <script>\n const app = new Vue({\n  el: '#app',\n  data: {\n   firstName: 'Paul'\n  }\n });\n app.fullName = 'Paul Halliday';\n </script>\n</body>\n```", "```js\n const user = {};\n let fullName = 'Paul Halliday';\n\n Object.defineProperty(user, 'fullName', {\n  configurable: true,\n  enumerable: true,\n  get() {\n   return fullName;\n  },\n  set(v) {\n   fullName = v;\n  }\n });\n\n console.log(user.fullName); // > Paul Halliday\n user.fullName = \"John Doe\";\n console.log(user.fullName); // > John Doe\n```", "```js\n# Create a new Vue.js project\n$ vue init webpack-simple computed \n\n# Change directory\n$ cd computed\n\n# Install dependencies\n$ npm install\n\n# Run application\n$ npm run dev\n```", "```js\n<h1>{{  firstName.split('').reverse().join('') }}</h1>\n```", "```js\n<template>\n <h1>Name: {{ reversedName }}</h1>\n</template>\n\n<script>\nexport default {\n data() {\n  return {\n   firstName: 'Paul'\n  }\n },\n computed: {\n  reversedName() {\n   return this.firstName.split('').reverse().join('')\n  }\n }\n}\n</script>\n```", "```js\n<template>\n <div>\n  <input type=\"number\" v-model=\"id\" />\n  <p>Name: {{user.name}}</p>\n  <p>Email: {{user.email}}</p>\n  <p>Id: {{user.id}}</p>\n </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n data() {\n  return {\n   id: '',\n   user: {}\n  }\n },\n methods: {\n  getDataForUser() { \n   axios.get(`https://jsonplaceholder.typicode.com/users/${this.id}`)\n .then(res => this.user = res.data);\n  }\n },\n watch: {\n  id() {\n   this.getDataForUser();\n  }\n }\n}\n</script>\n```", "```js\n// App.vue\n<template>\n</template>\n\n<script>\nexport default {\n data () {\n   return {\n    msg: 'Welcome to Your Vue.js App'\n   }\n },\n beforeCreate() {\n  console.log('beforeCreate'); \n },\n created() {\n  console.log('created');\n }\n}\n</script>\n```", "```js\nbeforeMount() {\n console.log('beforeMount');\n},\nmounted() {\n console.log('mounted');\n}\n```", "```js\n<template>\n <div>\n  <h1>{{msg}}</h1>\n  <button @click=\"msg = 'Updated Hook'\">Update Message</button>\n </div>\n</template>\n\n<script>\nexport default {\n data () {\n   return {\n    msg: 'Welcome to Your Vue.js App'\n   }\n },\n beforeCreate() {\n  console.log('beforeCreate'); \n },\n created() {\n  console.log('created');\n },\n beforeMount() {\n  console.log('beforeMount');\n },\n mounted() {\n  console.log('mounted');\n },\n beforeUpdated() {\n  console.log('beforeUpdated'); \n },\n updated() {\n  console.log('updated');\n }\n}\n</script>\n```", "```js\n<template>\n  <div>\n    <h1>{{msg}}</h1>\n    <button @click=\"msg = 'Updated Hook'\">Update Message\n    </button>\n    <button @click=\"remove\">Destroy instance</button>\n  </div>\n</template>\n```", "```js\nmethods: {\n  remove(){\n   this.$destroy();\n  }\n},\n// Other hooks\n  beforeDestroy(){\n  console.log(\"Before destroy\");\n},\n  destroyed(){\n  console.log(\"Destroyed\");\n}\n```", "```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <title>DOM Example</title>\n</head>\n<body>\n <div&gt;\n  <p>I love JavaScript!</p>\n  <p>Here's a list of my favourite frameworks:</p>\n  <ul>\n   <li>Vue.js</li>\n   <li>Angular</li>\n   <li>React</li>\n  </ul>\n </div>\n\n <script src=\"app.js\"></script>\n</body>\n</html>\n```", "```js\nconst paragraphs = Array.from(document.getElementsByTagName('p'));\nconst listItems = Array.from(document.getElementsByTagName('li'));\n\nparagraphs.map(p => console.log(p.innerHTML));\nlistItems.map(li => console.log(li.innerHTML));\n```"]